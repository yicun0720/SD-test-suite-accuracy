[
    {
      "id": 0,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT count(*) FROM club",
          "SELECT COUNT(Club_ID) FROM club",
          "SELECT COUNT(*) AS TotalClubs FROM club",
          "SELECT COUNT(DISTINCT Club_ID) FROM club",
          "SELECT COUNT(1) FROM club",
          "SELECT COUNT(Club_ID) AS NumberOfClubs FROM club",
          "SELECT COUNT(*) FROM club WHERE Club_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT Club_ID) AS TotalNumberOfClubs FROM club",
          "SELECT COUNT(*) FROM (SELECT Club_ID FROM club) AS Total",
          "SELECT COUNT(*) FROM club GROUP BY Club_ID HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT count(*) FROM club",
          "SELECT COUNT(Club_ID) FROM club",
          "SELECT COUNT(*) AS NumberOfClubs FROM club",
          "SELECT COUNT(1) FROM club",
          "SELECT COUNT(DISTINCT Club_ID) FROM club",
          "SELECT COUNT('Club_ID') FROM club",
          "SELECT COUNT(*) FROM club WHERE Club_ID IS NOT NULL",
          "SELECT COUNT(Club_ID) FROM club WHERE Club_ID > 0",
          "SELECT COUNT(*) FROM club GROUP BY Club_ID HAVING COUNT(*) > 0",
          "SELECT COUNT(*) FROM (SELECT Club_ID FROM club) AS TotalClubs"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club ORDER BY Name ASC",
          "SELECT Name FROM club ORDER BY Name",
          "SELECT club.Name FROM club ORDER BY club.Name ASC",
          "SELECT c.Name FROM club c ORDER BY c.Name ASC",
          "SELECT Name FROM club ORDER BY Name ASCENDING",
          "SELECT Name FROM club ORDER BY Name ASC;",
          "SELECT `Name` FROM `club` ORDER BY `Name` ASC",
          "SELECT Name FROM club ORDER BY Name ASC LIMIT ALL",
          "SELECT Name FROM club ORDER BY Name ASC, Club_ID ASC",
          "SELECT Name FROM club ORDER BY Name ASC OFFSET 0"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club ORDER BY Name ASC",
          "SELECT Name FROM club ORDER BY Name",
          "SELECT club.Name FROM club ORDER BY club.Name ASC",
          "SELECT c.Name FROM club c ORDER BY c.Name ASC",
          "SELECT Name FROM club ORDER BY Name ASCENDING",
          "SELECT club.Name FROM club ORDER BY Name",
          "SELECT Name FROM club ORDER BY Name COLLATE NOCASE",
          "SELECT Name FROM club ORDER BY UPPER(Name)",
          "SELECT Name FROM club ORDER BY LOWER(Name) ASC",
          "SELECT Name FROM club ORDER BY Name ASC, Club_ID ASC"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manager, Captain FROM club",
          "SELECT club.Manager, club.Captain FROM club",
          "SELECT `Manager`, `Captain` FROM `club`",
          "SELECT c.Manager, c.Captain FROM club c",
          "SELECT Manager AS Club_Manager, Captain AS Club_Captain FROM club",
          "SELECT Manager, Captain FROM club WHERE Club_ID IS NOT NULL",
          "SELECT club.Manager, club.Captain FROM club WHERE Club_ID > 0",
          "SELECT Manager, Captain FROM club ORDER BY Club_ID",
          "SELECT DISTINCT Manager, Captain FROM club",
          "SELECT Manager, Captain FROM club GROUP BY Club_ID"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manager, Captain FROM club",
          "SELECT club.Manager, club.Captain FROM club",
          "SELECT `Manager`, `Captain` FROM `club`",
          "SELECT c.Manager, c.Captain FROM club AS c",
          "SELECT Manager AS Club_Manager, Captain AS Club_Captain FROM club",
          "SELECT club.Manager AS Manager, club.Captain AS Captain FROM club",
          "SELECT Manager, Captain FROM club WHERE Club_ID IS NOT NULL",
          "SELECT DISTINCT Manager, Captain FROM club",
          "SELECT Manager, Captain FROM club ORDER BY Club_ID",
          "SELECT * FROM club WHERE Club_ID IN (SELECT Club_ID FROM club) AND Manager IS NOT NULL AND Captain IS NOT NULL"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Manufacturer != 'Nike'",
          "SELECT Name FROM club WHERE NOT Manufacturer = 'Nike'",
          "SELECT club.Name FROM club WHERE club.Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')",
          "SELECT Name FROM club WHERE Manufacturer NOT LIKE 'Nike'",
          "SELECT c.Name FROM club c WHERE c.Manufacturer != 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer IS NOT 'Nike'",
          "SELECT Name FROM club WHERE 'Nike' <> Manufacturer",
          "SELECT Name FROM club WHERE 'Nike' NOT IN (Manufacturer)",
          "SELECT Name FROM club WHERE Manufacturer != 'Nike' AND Manufacturer IS NOT NULL"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Manufacturer != 'Nike'",
          "SELECT Name FROM club WHERE NOT Manufacturer = 'Nike'",
          "SELECT club.Name FROM club WHERE club.Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT LIKE 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer IS NOT 'Nike'",
          "SELECT Name FROM club WHERE NOT (Manufacturer = 'Nike')",
          "SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')",
          "SELECT Name FROM club WHERE 'Nike' <> Manufacturer",
          "SELECT Name FROM club WHERE 'Nike' NOT LIKE Manufacturer",
          "SELECT Name FROM club WHERE 'Nike' != Manufacturer"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Wins_count ASC",
          "SELECT player.Name FROM player ORDER BY player.Wins_count ASC",
          "SELECT p.Name FROM player p ORDER BY p.Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count",
          "SELECT `Name` FROM `player` ORDER BY `Wins_count` ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT player.Name FROM player ORDER BY Wins_count",
          "SELECT Name FROM player AS p ORDER BY p.Wins_count ASC",
          "SELECT p.Name FROM player AS p ORDER BY p.Wins_count ASCENDING",
          "SELECT Name FROM player ORDER BY player.Wins_count ASC"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Wins_count ASC",
          "SELECT player.Name FROM player ORDER BY player.Wins_count ASC",
          "SELECT p.Name FROM player p ORDER BY p.Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count",
          "SELECT `Name` FROM `player` ORDER BY `Wins_count` ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT player.Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT Name FROM player ORDER BY player.Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASC, Player_ID ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASC, Name ASC"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Name FROM player p ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT player.Name FROM player ORDER BY player.Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Name FROM player ORDER BY Earnings DESC",
          "SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT p.Name FROM player AS p WHERE p.Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT Name FROM player ORDER BY Earnings DESC, Player_ID ASC LIMIT 1",
          "SELECT Name FROM (SELECT Name FROM player ORDER BY Earnings DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(Name) FROM player ORDER BY Earnings DESC"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Name FROM player p ORDER BY p.Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Name FROM player ORDER BY Earnings DESC",
          "SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT player.Name FROM player ORDER BY player.Earnings DESC LIMIT 1",
          "SELECT Name FROM player AS p ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT Name FROM (SELECT Name FROM player ORDER BY Earnings DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM player ORDER BY Earnings DESC, Player_ID ASC LIMIT 1",
          "SELECT Name FROM player WHERE Earnings >= ALL (SELECT Earnings FROM player)",
          "SELECT FIRST(Name) FROM player ORDER BY Earnings DESC"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000",
          "SELECT UNIQUE Country FROM player WHERE Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000 ORDER BY Country",
          "SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1200000",
          "SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000 AND Country IS NOT NULL",
          "SELECT DISTINCT p.Country FROM player AS p WHERE p.Earnings > 1200000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000 AND Country <> ''"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Earnings > 1200000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000",
          "SELECT player.Country FROM player WHERE player.Earnings > 1200000",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 ORDER BY Country",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000 ORDER BY Country",
          "SELECT player.Country FROM player WHERE player.Earnings > 1200000 GROUP BY player.Country",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1200000 ORDER BY p.Country"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC FETCH FIRST ROW ONLY",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Country FROM player AS p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC, Player_ID ASC LIMIT 1",
          "SELECT TOP 1 Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC",
          "SELECT Country FROM (SELECT * FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC) AS subquery LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 OFFSET 0",
          "SELECT p.Country FROM player AS p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT FIRST(Country) FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 ROW",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC ROWS 1"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID",
          "SELECT pl.Name AS PlayerName, cl.Name AS ClubName FROM player pl, club cl WHERE pl.Club_ID = cl.Club_ID",
          "SELECT player.Name AS Player, club.Name AS Club FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID",
          "SELECT `Name` FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT player.Name, club.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT pl.Name, cl.Name FROM player AS pl JOIN club AS cl ON pl.Club_ID = cl.Club_ID",
          "SELECT Name FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT player.Name, club.Name FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID",
          "SELECT pl.Name AS PlayerName, cl.Name AS ClubName FROM player pl, club cl WHERE pl.Club_ID = cl.Club_ID",
          "SELECT Name FROM player, Name FROM club WHERE player.Club_ID = club.Club_ID",
          "SELECT player.Name, club.Name FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player AS p JOIN club AS c ON p.Club_ID = c.Club_ID",
          "SELECT pl.Name, cl.Name FROM player pl JOIN club cl ON pl.Club_ID = cl.Club_ID",
          "SELECT Name AS PlayerName, (SELECT Name FROM club WHERE Club_ID = player.Club_ID) AS ClubName FROM player",
          "SELECT player.Name AS Player, club.Name AS Club FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name AS PlayerName, c.Name AS ClubName FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name",
          "SELECT DISTINCT club.Name FROM club INNER JOIN player ON club.Club_ID = player.Club_ID WHERE player.Wins_count > 2",
          "SELECT club.Name FROM club, player WHERE club.Club_ID = player.Club_ID AND player.Wins_count > 2 GROUP BY club.Name",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)",
          "SELECT c.Name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID GROUP BY c.Name HAVING MAX(p.Wins_count) > 2",
          "SELECT Name FROM club WHERE EXISTS (SELECT 1 FROM player WHERE Club_ID = club.Club_ID AND Wins_count > 2)",
          "SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name HAVING SUM(player.Wins_count) > 2",
          "SELECT DISTINCT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID AND p.Wins_count > 2",
          "SELECT c.Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID AND p.Wins_count > 2 GROUP BY c.Name",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING MAX(Wins_count) > 2)"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2",
          "SELECT c.Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name HAVING MAX(p.Wins_count) > 2",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)",
          "SELECT club.Name FROM club, player WHERE club.Club_ID = player.Club_ID AND player.Wins_count > 2 GROUP BY club.Name",
          "SELECT c.Name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID AND p.Wins_count > 2 GROUP BY c.Name",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING MAX(Wins_count) > 2)",
          "SELECT DISTINCT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID AND p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID AND p.Wins_count > 2)",
          "SELECT c.Name FROM club AS c INNER JOIN player AS p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name, c.Club_ID",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2 GROUP BY Club_ID)"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT player.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT player.Name FROM player, club WHERE player.Club_ID = club.Club_ID AND club.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player AS p JOIN club AS c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club c WHERE c.Manager = 'Sam Allardyce')",
          "SELECT p.Name FROM player p LEFT JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT player.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player AS p, club AS c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player, club WHERE player.Club_ID = club.Club_ID AND club.Manager = 'Sam Allardyce'",
          "SELECT player.Name FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT p.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID ORDER BY AVG(Earnings) DESC)",
          "SELECT club.Name FROM club INNER JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC",
          "SELECT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings) ORDER BY AVG(Earnings) DESC)",
          "SELECT Name FROM (SELECT c.Name, AVG(p.Earnings) as AvgEarnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name) ORDER BY AvgEarnings DESC",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY Name ORDER BY AVG(Earnings) DESC",
          "SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC",
          "SELECT c.Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT club.Name FROM club INNER JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID ORDER BY AVG(Earnings) DESC)",
          "SELECT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club JOIN player USING (Club_ID) GROUP BY Name ORDER BY AVG(Earnings) DESC",
          "SELECT club.Name AS ClubName FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY ClubName ORDER BY AVG(player.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings) ORDER BY AVG(Earnings) DESC)",
          "SELECT c.Name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM (SELECT club.Name, AVG(player.Earnings) AS AvgEarnings FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name) AS SubQuery ORDER BY AvgEarnings DESC"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) AS NumberOfClubs FROM club GROUP BY Manufacturer",
          "SELECT c.Manufacturer, COUNT(c.Club_ID) FROM club c GROUP BY c.Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(*) AS TotalClubs FROM club GROUP BY Manufacturer",
          "SELECT c.Manufacturer, COUNT(*) FROM club AS c GROUP BY c.Manufacturer",
          "SELECT Manufacturer, COUNT(1) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer ORDER BY COUNT(Club_ID) DESC",
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer HAVING COUNT(*) > 0",
          "SELECT Manufacturer, COUNT(*) AS ClubCount FROM club GROUP BY Manufacturer ORDER BY Manufacturer"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) AS NumberOfClubs FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT c.Manufacturer, COUNT(*) FROM club c GROUP BY c.Manufacturer",
          "SELECT c.Manufacturer, COUNT(c.Club_ID) FROM club c GROUP BY c.Manufacturer",
          "SELECT Manufacturer, COUNT(*) AS ClubCount FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer ORDER BY COUNT(Club_ID) DESC",
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer HAVING COUNT(*) > 0",
          "SELECT Manufacturer, COUNT(Club_ID) AS TotalClubs FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 0",
          "SELECT Manufacturer, COUNT(*) AS Total FROM club GROUP BY Manufacturer ORDER BY Total DESC"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM club GROUP BY Manufacturer) sub)",
          "SELECT Manufacturer, COUNT(*) AS Frequency FROM club GROUP BY Manufacturer ORDER BY Frequency DESC LIMIT 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS TempTable ORDER BY Count DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT FIRST(Manufacturer) FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC, Manufacturer ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM club GROUP BY Manufacturer)",
          "SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC LIMIT 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC FETCH FIRST ROW ONLY",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC, Manufacturer ASC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC, Manufacturer LIMIT 1"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(c.Manufacturer) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1",
          "SELECT c.Manufacturer FROM club AS c GROUP BY c.Manufacturer HAVING COUNT(DISTINCT c.Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1",
          "SELECT DISTINCT Manufacturer FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1)",
          "SELECT Manufacturer FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1)",
          "SELECT DISTINCT c.Manufacturer FROM club c WHERE EXISTS (SELECT NULL FROM club WHERE Manufacturer = c.Manufacturer GROUP BY Manufacturer HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(c.Manufacturer) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1",
          "SELECT c.Manufacturer FROM club AS c GROUP BY c.Manufacturer HAVING COUNT(DISTINCT c.Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1 ORDER BY Manufacturer",
          "SELECT DISTINCT Manufacturer FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1)",
          "SELECT Manufacturer, COUNT(*) AS ClubCount FROM club GROUP BY Manufacturer HAVING ClubCount > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT player.Country FROM player GROUP BY player.Country HAVING COUNT(*) > 1",
          "SELECT Country FROM (SELECT Country FROM player) AS subquery GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT p.Country FROM player AS p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(DISTINCT Player_ID) > 1",
          "SELECT DISTINCT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(DISTINCT p.Player_ID) > 1"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT p.Country FROM player AS p GROUP BY p.Country HAVING COUNT(*) > 1",
          "SELECT Country FROM (SELECT Country FROM player) AS subquery GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(DISTINCT Player_ID) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(DISTINCT p.Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Country) > 1",
          "SELECT p.Country FROM player AS p GROUP BY p.Country HAVING COUNT(p.Country) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(1) > 1"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Player_ID IS NULL",
          "SELECT Name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE player.Club_ID = club.Club_ID)",
          "SELECT Name FROM club c WHERE c.Club_ID NOT IN (SELECT Club_ID FROM player WHERE Club_ID IS NOT NULL)",
          "SELECT c.Name FROM club c WHERE NOT EXISTS (SELECT * FROM player p WHERE p.Club_ID = c.Club_ID)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player)",
          "SELECT Name FROM club AS c WHERE NOT EXISTS (SELECT NULL FROM player AS p WHERE p.Club_ID = c.Club_ID)",
          "SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p WHERE p.Club_ID IS NOT NULL)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player p WHERE p.Club_ID IS NOT NULL)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT p.Club_ID FROM player p)"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
          "SELECT Name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE player.Club_ID = club.Club_ID)",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Club_ID IS NULL",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player)",
          "SELECT club.Name FROM club LEFT OUTER JOIN player ON club.Club_ID = player.Club_ID WHERE player.Club_ID IS NULL",
          "SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)",
          "SELECT Name FROM club AS c WHERE c.Club_ID NOT IN (SELECT Club_ID FROM player AS p)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player WHERE Club_ID IS NOT NULL)",
          "SELECT Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p WHERE p.Club_ID IS NOT NULL)",
          "SELECT c.Name FROM club c WHERE NOT EXISTS (SELECT * FROM player p WHERE p.Club_ID = c.Club_ID)"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1400000 INTERSECT SELECT p.Country FROM player p WHERE p.Earnings < 1100000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT DISTINCT Country FROM player WHERE Earnings < 1100000",
          "SELECT player.Country FROM player WHERE player.Earnings > 1400000 INTERSECT SELECT player.Country FROM player WHERE player.Earnings < 1100000",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1400000 AND MIN(Earnings) < 1100000",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING MAX(p.Earnings) > 1400000 AND MIN(p.Earnings) < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 AND Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1400000 AND p.Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1400000 AND p.Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT Country FROM player WHERE EXISTS (SELECT 1 FROM player p2 WHERE player.Country = p2.Country AND p2.Earnings < 1100000) AND Earnings > 1400000"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1400000 INTERSECT SELECT DISTINCT p.Country FROM player p WHERE p.Earnings < 1100000",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING MAX(p.Earnings) > 1400000 AND MIN(p.Earnings) < 1100000",
          "SELECT Country FROM (SELECT Country FROM player WHERE Earnings > 1400000 UNION ALL SELECT Country FROM player WHERE Earnings < 1100000) GROUP BY Country HAVING COUNT(DISTINCT Country) > 1",
          "WITH HighEarners AS (SELECT Country FROM player WHERE Earnings > 1400000), LowEarners AS (SELECT Country FROM player WHERE Earnings < 1100000) SELECT Country FROM HighEarners INTERSECT SELECT Country FROM LowEarners",
          "SELECT p1.Country FROM player p1 JOIN player p2 ON p1.Country = p2.Country WHERE p1.Earnings > 1400000 AND p2.Earnings < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 AND Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT p.Country FROM player p WHERE EXISTS (SELECT 1 FROM player WHERE Earnings > 1400000 AND Country = p.Country) AND EXISTS (SELECT 1 FROM player WHERE Earnings < 1100000 AND Country = p.Country)",
          "SELECT Country FROM player GROUP BY Country HAVING SUM(CASE WHEN Earnings > 1400000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Earnings < 1100000 THEN 1 ELSE 0 END) > 0",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 HAVING MAX(Earnings) > 1400000 AND MIN(Earnings) < 1100000"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Country) FROM player",
          "SELECT COUNT(UNIQUE Country) FROM player",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player)",
          "SELECT COUNT(DISTINCT player.Country) FROM player",
          "SELECT COUNT(DISTINCT p.Country) FROM player AS p",
          "SELECT DISTINCT COUNT(Country) FROM player",
          "SELECT COUNT(DISTINCT Country) AS DistinctCountries FROM player",
          "SELECT COUNT(*) FROM (SELECT Country FROM player GROUP BY Country)",
          "SELECT COUNT(DISTINCT Country) FROM player GROUP BY Country HAVING COUNT(*) >= 1",
          "SELECT COUNT(DISTINCT Country) FROM (SELECT Country FROM player) AS UniqueCountries"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Country) FROM player",
          "SELECT COUNT(DISTINCT player.Country) FROM player",
          "SELECT COUNT(DISTINCT `Country`) FROM `player`",
          "SELECT COUNT(DISTINCT p.Country) FROM player AS p",
          "SELECT COUNT(UNIQUE Country) FROM player",
          "SELECT DISTINCT COUNT(Country) FROM player",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player) AS unique_countries",
          "SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL",
          "SELECT COUNT(DISTINCT Country) FROM player GROUP BY Country HAVING COUNT(*) > 0",
          "SELECT COUNT(DISTINCT Country) FROM player WHERE Country <> ''"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe')",
          "SELECT `Earnings` FROM `player` WHERE `Country` = 'Australia' OR `Country` = 'Zimbabwe'",
          "SELECT p.Earnings FROM player AS p WHERE p.Country = 'Australia' OR p.Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE (Country = 'Australia' OR Country = 'Zimbabwe')",
          "SELECT player.Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT player.Earnings FROM player WHERE player.Country IN ('Australia', 'Zimbabwe')",
          "SELECT p.Earnings FROM player AS p WHERE p.Country = 'Australia' OR p.Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE (Country = 'Australia' OR Country = 'Zimbabwe')",
          "SELECT `Earnings` FROM `player` WHERE `Country` = 'Australia' OR `Country` = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Australia' UNION SELECT Earnings FROM player WHERE Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country IN ('Zimbabwe', 'Australia')",
          "SELECT player.Earnings FROM player WHERE player.Country = 'Australia' OR player.Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Zimbabwe' OR Country = 'Australia'"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id HAVING COUNT(DISTINCT O.order_id) > 2 AND SUM((SELECT COUNT(*) FROM Order_Items WHERE order_id = O.order_id)) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND customer_id IN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)",
          "SELECT DISTINCT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C, Orders O, Order_Items OI WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id GROUP BY C.customer_id HAVING COUNT(DISTINCT O.order_id) > 2 AND COUNT(OI.order_item_id) >= 3",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id GROUP BY O.customer_id HAVING COUNT(*) > 2) AND EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id GROUP BY O.customer_id HAVING COUNT(OI.order_item_id) >= 3)",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY C.customer_id HAVING COUNT(DISTINCT O.order_id) > 2 AND COUNT(OI.order_item_id) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM (SELECT customer_id, COUNT(DISTINCT order_id) AS order_count, SUM(item_count) AS item_total FROM (SELECT O.customer_id, O.order_id, COUNT(OI.order_item_id) AS item_count FROM Orders O LEFT JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id) AS Sub GROUP BY customer_id) AS Final WHERE order_count > 2 AND item_total >= 3",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O GROUP BY O.customer_id HAVING COUNT(O.order_id) > 2) AND C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.customer_id HAVING COUNT(OI.order_item_id) >= 3)",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C JOIN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AS O ON C.customer_id = O.customer_id JOIN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3) AS OI ON C.customer_id = OI.customer_id",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE (SELECT COUNT(*) FROM Orders WHERE customer_id = C.customer_id) > 2 AND (SELECT COUNT(*) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id = C.customer_id)) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(*) > 2) AND customer_id IN (SELECT Orders.customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.customer_id HAVING COUNT(Order_Items.order_item_id) >= 3)"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 2 AND SUM((SELECT COUNT(*) FROM Order_Items WHERE order_id = o.order_id)) >= 3",
          "SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id HAVING COUNT(DISTINCT Orders.order_id) > 2 AND (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id IN (SELECT order_id FROM Orders WHERE Orders.customer_id = Customers.customer_id)) >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers AS c, Orders AS o WHERE c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND (SELECT COUNT(*) FROM Order_Items oi WHERE oi.order_id = o.order_id) >= 3",
          "SELECT DISTINCT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) >= 3) GROUP BY c.customer_id HAVING COUNT(DISTINCT (SELECT order_id FROM Orders WHERE customer_id = c.customer_id)) > 2",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE (SELECT COUNT(*) FROM Orders o WHERE o.customer_id = c.customer_id) > 2 AND (SELECT COUNT(*) FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.customer_id = c.customer_id) >= 3 GROUP BY c.customer_id",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c, Orders o, Order_Items oi WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c INNER JOIN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AS o ON c.customer_id = o.customer_id INNER JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) >= 3) AS oi ON oi.order_id IN (SELECT order_id FROM Orders WHERE customer_id = c.customer_id)",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE (SELECT COUNT(order_id) FROM Orders WHERE customer_id = c.customer_id) > 2 AND (SELECT COUNT(order_item_id) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id = c.customer_id)) >= 3 GROUP BY c.customer_id"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS product_count FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) AS number_of_products FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) FROM Orders JOIN Order_Items USING(order_id) GROUP BY order_id, order_status_code",
          "SELECT a.order_id, a.order_status_code, COUNT(b.product_id) FROM Orders a, Order_Items b WHERE a.order_id = b.order_id GROUP BY a.order_id, a.order_status_code",
          "SELECT order_id, order_status_code, COUNT(*) AS total_products FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(*) AS num_products FROM Orders AS O LEFT JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS count_of_products FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) FROM Orders LEFT OUTER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(DISTINCT OI.product_id) AS product_count FROM Orders O INNER JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS total_products FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.order_status_code, COUNT(*) AS product_count FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.order_item_id) AS product_count FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS product_count FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(*) FROM Orders JOIN Order_Items USING(order_id) GROUP BY order_id, order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(OI.order_item_id) AS NumberOfProducts FROM Orders O LEFT JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(order_item_id) AS product_count FROM Orders, Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(DISTINCT OI.product_id) AS product_count FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS product_count FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(*) AS product_count FROM Orders O, Order_Items OI WHERE O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT O.date_order_placed FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(OI.order_item_id) > 1 OR O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT O.date_order_placed FROM Orders O WHERE EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.order_id = O.order_id GROUP BY OI.order_id HAVING COUNT(*) > 1) OR O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 1 UNION SELECT order_id FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders))",
          "SELECT O.date_order_placed FROM Orders O LEFT JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(OI.order_item_id) > 1 OR MIN(O.date_order_placed) = O.date_order_placed",
          "SELECT date_order_placed FROM Orders WHERE (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id = Orders.order_id) > 1 OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders O)",
          "SELECT date_order_placed FROM Orders O WHERE (SELECT COUNT(order_item_id) FROM Order_Items OI WHERE OI.order_id = O.order_id) > 1 OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT O.date_order_placed FROM Orders O JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) AS Filtered ON O.order_id = Filtered.order_id UNION SELECT MIN(date_order_placed) FROM Orders",
          "SELECT O.date_order_placed FROM Orders O WHERE O.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION SELECT MIN(date_order_placed) FROM Orders"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT MIN(date_order_placed) AS earliest_order_date, O.date_order_placed FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(OI.order_item_id) > 1",
          "SELECT (SELECT MIN(date_order_placed) FROM Orders) AS earliest_order, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 1) UNION SELECT MIN(date_order_placed) FROM Orders",
          "WITH OrderCounts AS (SELECT order_id, COUNT(*) AS item_count FROM Order_Items GROUP BY order_id) SELECT MIN(O.date_order_placed) AS earliest_order, O.date_order_placed FROM Orders O JOIN OrderCounts OC ON O.order_id = OC.order_id WHERE OC.item_count > 1",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION ALL SELECT MIN(date_order_placed) FROM Orders",
          "SELECT MIN(O.date_order_placed) AS earliest_order, O.date_order_placed FROM Orders O INNER JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) AS MultiItemOrders ON O.order_id = MultiItemOrders.order_id",
          "SELECT MIN(date_order_placed) AS earliest_order_date FROM Orders UNION SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION SELECT MIN(date_order_placed) FROM Orders",
          "SELECT MIN(date_order_placed) AS earliest_order_date, date_order_placed FROM Orders GROUP BY order_id HAVING COUNT((SELECT order_item_id FROM Order_Items WHERE Orders.order_id = Order_Items.order_id)) > 1",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION SELECT MIN(date_order_placed) AS earliest_order_date FROM Orders"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE customer_id IS NOT NULL)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers AS c WHERE NOT EXISTS (SELECT NULL FROM Orders AS o WHERE o.customer_id = c.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT o.customer_id FROM Orders o)",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o WHERE o.customer_id IS NOT NULL)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE Orders.customer_id IS NOT NULL)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE Orders.customer_id IS NOT NULL AND Orders.order_status_code <> '')"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders)",
          "SELECT Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers LEFT OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_id IS NULL",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE Orders.customer_id IS NOT NULL)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers c WHERE NOT EXISTS (SELECT NULL FROM Orders o WHERE o.customer_id = c.customer_id)",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers AS c WHERE NOT EXISTS (SELECT * FROM Orders AS o WHERE o.customer_id = c.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE customer_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT o.product_id FROM Order_Items o GROUP BY o.product_id HAVING COUNT(o.order_id) >= 2)",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) >= 2)",
          "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN (SELECT product_id, COUNT(order_id) as order_count FROM Order_Items GROUP BY product_id) as OrderCount ON Products.product_id = OrderCount.product_id WHERE OrderCount.order_count < 2 OR OrderCount.order_count IS NULL",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN (SELECT product_id, COUNT(*) as num_orders FROM Order_Items GROUP BY product_id) as oi ON p.product_id = oi.product_id WHERE oi.num_orders < 2 OR oi.num_orders IS NULL",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Order_Items oi WHERE p.product_id = oi.product_id GROUP BY oi.product_id HAVING COUNT(oi.order_id) >= 2)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) > 1)",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 1)",
          "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_id) < 2",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_id) < 2",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) >= 2)"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE (SELECT COUNT(*) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE OI.product_id = P.product_id) < 2",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) < 2)",
          "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_id) < 2",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2) AS sub ON p.product_id = sub.product_id WHERE sub.product_id IS NOT NULL",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(oi.order_id) >= 2)",
          "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(DISTINCT Order_Items.order_id) < 2",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) < 2)",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) < 2)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_id) < 2"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(OI.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2)",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.order_id = o.order_id GROUP BY oi.order_id HAVING COUNT(oi.product_id) >= 2)",
          "SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2",
          "SELECT distinct o.order_id, o.date_order_placed FROM Orders o, Order_Items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
          "SELECT o.order_id, o.date_order_placed FROM Orders o INNER JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2) as sub ON o.order_id = sub.order_id",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(*) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o WHERE (SELECT COUNT(*) FROM Order_Items oi WHERE oi.order_id = o.order_id) >= 2 GROUP BY o.order_id"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
          "SELECT o.order_id, o.date_order_placed FROM Orders AS o WHERE EXISTS (SELECT 1 FROM Order_Items AS oi WHERE oi.order_id = o.order_id GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2)",
          "SELECT DISTINCT o.order_id, o.date_order_placed FROM Orders o, Order_Items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, oi.product_id HAVING COUNT(oi.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o INNER JOIN (SELECT order_id FROM Order_Items GROUP BY order_id, product_id HAVING COUNT(product_id) >= 2) AS sub ON o.order_id = sub.order_id",
          "SELECT o.order_id, o.date_order_placed FROM Orders o WHERE o.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id, product_id HAVING COUNT(*) >= 2)",
          "SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.product_id) >= 2"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id ORDER BY COUNT(Order_Items.order_item_id) DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(order_item_id) DESC LIMIT 1)",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p WHERE p.product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(order_item_id) DESC LIMIT 1)",
          "SELECT TOP 1 p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p INNER JOIN (SELECT product_id, COUNT(*) as cnt FROM Order_Items GROUP BY product_id ORDER BY cnt DESC LIMIT 1) as freq ON p.product_id = freq.product_id",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price HAVING COUNT(oi.order_item_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(order_item_id) as cnt FROM Order_Items GROUP BY product_id) as subquery)",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Order_Items GROUP BY product_id) as subquery))",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p WHERE p.product_id = (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id ORDER BY COUNT(*) DESC",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC)",
          "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id ORDER BY COUNT(Order_Items.order_item_id) DESC",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN (SELECT product_id, COUNT(*) as freq FROM Order_Items GROUP BY product_id ORDER BY freq DESC) as freq_table ON p.product_id = freq_table.product_id",
          "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(Order_Items.order_item_id) DESC",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 WITH TIES Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(Order_Items.order_item_id) DESC",
          "SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price HAVING COUNT(oi.order_item_id) = (SELECT MAX(count) FROM (SELECT COUNT(order_item_id) as count FROM Order_Items GROUP BY product_id) as counts)",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Order_Items GROUP BY product_id) as sub))"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, SUM(P.product_price) AS total_price FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_price ASC LIMIT 1",
          "SELECT order_id, MIN(total_price) FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS SubQuery",
          "SELECT Orders.order_id, SUM(Products.product_price) AS SumPrice FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY SumPrice ASC LIMIT 1",
          "SELECT order_id, SUM(product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price ASC LIMIT 1",
          "SELECT O.order_id, MIN(TotalPrice) FROM (SELECT O.order_id, SUM(P.product_price) AS TotalPrice FROM Orders O INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id) AS SubTotal GROUP BY O.order_id",
          "SELECT order_id, SUM(product_price) AS total_price FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id HAVING total_price = (SELECT MIN(total_price) FROM (SELECT order_id, SUM(product_price) AS total_price FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) AS SubQuery)",
          "SELECT order_id, SUM(product_price) AS total_price FROM Orders, Order_Items, Products WHERE Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price ASC LIMIT 1",
          "SELECT TOP 1 order_id, SUM(product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price ASC",
          "SELECT order_id, SUM(product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price ASC FETCH FIRST ROW ONLY",
          "SELECT order_id, SUM(product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_price ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, SUM(P.product_price) AS total_cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_cost ASC LIMIT 1",
          "SELECT order_id, MIN(total_cost) FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS CostTable",
          "SELECT Orders.order_id, MIN(SUM(Products.product_price)) AS LowestCost FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY LowestCost ASC LIMIT 1",
          "SELECT order_id, total_cost FROM (SELECT Orders.order_id AS order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS CostSummary ORDER BY total_cost ASC LIMIT 1",
          "SELECT TOP 1 Orders.order_id, SUM(Products.product_price) AS TotalCost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY TotalCost ASC",
          "SELECT order_id, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id ORDER BY total_cost ASC LIMIT 1",
          "SELECT O.order_id, SUM(P.product_price) AS total_cost FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_cost ASC LIMIT 1",
          "SELECT order_id, total_cost FROM (SELECT order_id, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) AS OrderCosts ORDER BY total_cost ASC LIMIT 1",
          "SELECT O.order_id, SUM(P.product_price) AS TotalPrice FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY TotalPrice ASC LIMIT 1",
          "SELECT order_id, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_cost ASC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 56,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) as cnt FROM Customer_Payment_Methods GROUP BY payment_method_code) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS counts)",
          "SELECT payment_method_code, COUNT(*) as total FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY total DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1 OFFSET 0",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC, payment_method_code LIMIT 1",
          "SELECT payment_method_code, MAX(count) FROM (SELECT payment_method_code, COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code) sub GROUP BY payment_method_code ORDER BY count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code))",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) as total FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY total DESC) WHERE ROWNUM = 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1",
          "SELECT payment_method_code, COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.gender_code, COUNT(P.product_id) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products USING (product_id) GROUP BY gender_code",
          "SELECT gender_code, COUNT(DISTINCT P.product_id) AS product_count FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(*) FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(P.product_id) AS num_products FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products P ON Order_Items.product_id = P.product_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Products.product_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(Products.product_id) FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(DISTINCT P.product_id) FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id LEFT JOIN Order_Items OI ON O.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(P.product_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT gender_code, COUNT(DISTINCT product_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(DISTINCT P.product_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(DISTINCT Products.product_id) FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(DISTINCT Products.product_id) AS Product_Count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(DISTINCT product_id) AS Total_Products FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(DISTINCT P.product_id) AS Products_Purchased FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(DISTINCT product_id) FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(DISTINCT P.product_id) FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id LEFT JOIN Order_Items OI ON O.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(DISTINCT product_id) FROM Customers, Orders, Order_Items WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(DISTINCT Products.product_id) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT c.gender_code, COUNT(o.order_id) AS order_count FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code",
          "SELECT Customers.gender_code, COUNT(Orders.order_id) FROM Customers, Orders WHERE Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers INNER JOIN Orders USING(customer_id) GROUP BY gender_code",
          "SELECT gender_code, COUNT(*) AS total_orders FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT c.gender_code, COUNT(*) FROM Customers c, Orders o WHERE c.customer_id = o.customer_id GROUP BY c.gender_code",
          "SELECT gender_code, COUNT(Orders.order_id) AS NumberOfOrders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Orders.order_id) AS OrderCount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(order_id) AS TotalOrders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT c.gender_code, COUNT(o.order_id) FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(O.order_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers, Orders WHERE Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Orders.order_id) AS OrderCount FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(*) AS TotalOrders FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(*) FROM Customers C, Orders O WHERE C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(Orders.order_id) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Orders.order_id) FROM Customers LEFT OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers JOIN Orders USING (customer_id) GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(O.order_id) FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c INNER JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id",
          "SELECT Customers.customer_first_name AS FirstName, Customers.customer_middle_initial AS MiddleInitial, Customers.customer_last_name AS LastName, Customer_Payment_Methods.payment_method_code AS PaymentMethod FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers, Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT first_name, middle_initial, last_name, payment_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT customer_first_name AS FirstName, customer_middle_initial AS MiddleInitial, customer_last_name AS LastName, payment_method_code AS PaymentMethod FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers c, Customer_Payment_Methods cp WHERE c.customer_id = cp.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cp.payment_method_code FROM Customers AS c JOIN Customer_Payment_Methods AS cp ON c.customer_id = cp.customer_id"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c INNER JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT Customers.customer_first_name AS FirstName, Customers.customer_middle_initial AS MiddleInitial, Customers.customer_last_name AS LastName, Customer_Payment_Methods.payment_method_code AS PaymentMethod FROM Customers, Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT first_name, middle_initial, last_name, payment_method FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT customer_first_name AS `First Name`, customer_middle_initial AS `Middle Initial`, customer_last_name AS `Last Name`, payment_method_code AS `Payment Method` FROM Customers JOIN Customer_Payment_Methods USING(customer_id)",
          "SELECT A.customer_first_name, A.customer_middle_initial, A.customer_last_name, B.payment_method_code FROM Customers A JOIN Customer_Payment_Methods B ON A.customer_id = B.customer_id",
          "SELECT `customer_first_name`, `customer_middle_initial`, `customer_last_name`, `payment_method_code` FROM `Customers` INNER JOIN `Customer_Payment_Methods` ON `Customers`.`customer_id` = `Customer_Payment_Methods`.`customer_id`",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT first_name, middle_initial, last_name, payment_method FROM Customers c, Customer_Payment_Methods p WHERE c.customer_id = p.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers CROSS JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number",
          "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments USING (invoice_number)",
          "SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number",
          "SELECT a.invoice_status_code, a.invoice_date, b.shipment_date FROM Invoices a INNER JOIN Shipments b ON a.invoice_number = b.invoice_number",
          "SELECT inv.invoice_status_code AS Status, inv.invoice_date AS InvoiceDate, shp.shipment_date AS ShipmentDate FROM Invoices inv INNER JOIN Shipments shp ON inv.invoice_number = shp.invoice_number",
          "SELECT Invoices.invoice_status_code AS InvoiceStatus, Invoices.invoice_date AS InvoiceDate, Shipments.shipment_date AS ShipmentDate FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT status.invoice_status_code, dates.invoice_date, dates.shipment_date FROM Invoices status JOIN Shipments dates ON status.invoice_number = dates.invoice_number",
          "SELECT 'Status' = Invoices.invoice_status_code, 'Invoice Date' = Invoices.invoice_date, 'Shipment Date' = Shipments.shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT DISTINCT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number",
          "SELECT invoice_status_code AS Status, invoice_date AS Date, shipment_date AS ShipmentDate FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT inv.invoice_status_code, inv.invoice_date, shp.shipment_date FROM Invoices inv INNER JOIN Shipments shp ON inv.invoice_number = shp.invoice_number",
          "SELECT status.invoice_status_code, dates.invoice_date, ship_dates.shipment_date FROM Invoices status JOIN Shipments ship_dates ON status.invoice_number = ship_dates.invoice_number",
          "SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number",
          "SELECT a.invoice_status_code, a.invoice_date, b.shipment_date FROM Invoices a, Shipments b WHERE a.invoice_number = b.invoice_number",
          "SELECT `invoice_status_code`, `invoice_date`, `shipment_date` FROM `Invoices` JOIN `Shipments` ON `Invoices`.`invoice_number` = `Shipments`.`invoice_number`",
          "SELECT Invoices.invoice_status_code AS 'Status', Invoices.invoice_date AS 'Date', Shipments.shipment_date AS 'Shipment Date' FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT status_code AS Status, date AS Date, shipment AS ShipmentDate FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_name, S.shipment_date FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipments S ON OI.order_id = S.order_id",
          "SELECT product_name, shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, shipment_date FROM Products, Order_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Shipments.order_id",
          "SELECT Products.product_name, Shipments.shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT P.product_name AS ProductName, S.shipment_date AS ShipmentDate FROM Products P, Order_Items OI, Shipments S WHERE P.product_id = OI.product_id AND OI.order_id = S.order_id",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT Products.product_name, Shipments.shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, shipment_date FROM Products, Order_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Shipments.order_id",
          "SELECT P.product_name, S.shipment_date FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id INNER JOIN Shipments AS S ON OI.order_id = S.order_id",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id"
        ]
      ]
    },
    {
      "id": 67,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT Products.product_name, Shipments.shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, shipment_date FROM Products, Order_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Shipments.order_id",
          "SELECT p.product_name, s.shipment_date FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Shipments AS s ON oi.order_id = s.order_id",
          "SELECT DISTINCT Products.product_name, Shipments.shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, shipment_date FROM Products p, Order_Items oi, Shipments s WHERE p.product_id = oi.product_id AND oi.order_id = s.order_id",
          "SELECT p.product_name, s.shipment_date FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id INNER JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT Products.product_name AS ProductName, Shipments.shipment_date AS ShipmentDate FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items USING (product_id) JOIN Shipments USING (order_id)"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT Order_Items.order_item_status_code, Shipments.shipment_tracking_number FROM Order_Items INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT status_code AS order_item_status_code, tracking_number AS shipment_tracking_number FROM Order_Items, Shipments WHERE Order_Items.order_id = Shipments.order_id",
          "SELECT oi.order_item_status_code AS Status_Code, s.shipment_tracking_number AS Tracking_Number FROM Order_Items oi, Shipments s WHERE oi.order_id = s.order_id",
          "SELECT Order_Items.order_item_status_code, Shipments.shipment_tracking_number FROM Order_Items, Shipments WHERE Order_Items.order_id = Shipments.order_id",
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items INNER JOIN Shipments USING(order_id)",
          "SELECT order_item_status_code, shipment_tracking_number FROM Shipments JOIN Order_Items ON Shipments.order_id = Order_Items.order_id",
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Shipments s JOIN Order_Items oi ON s.order_id = oi.order_id"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT Order_Items.order_item_status_code, Shipments.shipment_tracking_number FROM Order_Items INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items, Shipments WHERE Order_Items.order_id = Shipments.order_id",
          "SELECT status_code AS order_item_status_code, tracking_number AS shipment_tracking_number FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT oi.order_item_status_code AS Status_Code, s.shipment_tracking_number AS Tracking_Number FROM Order_Items oi, Shipments s WHERE oi.order_id = s.order_id",
          "SELECT DISTINCT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipments USING(order_id)",
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id WHERE oi.order_item_status_code = 'Shipped'",
          "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi LEFT JOIN Shipments s ON oi.order_id = s.order_id WHERE oi.order_item_status_code = 'Shipped'"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id",
          "SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Shipments))",
          "SELECT Products.product_name, Products.product_color FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT pr.product_name, pr.product_color FROM Products pr, Order_Items oi, Shipments sh WHERE pr.product_id = oi.product_id AND oi.order_id = sh.order_id",
          "SELECT DISTINCT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT p.product_name, p.product_color FROM Products p, Order_Items oi, Shipments s WHERE p.product_id = oi.product_id AND oi.order_id = s.order_id",
          "SELECT product_name, product_color FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id WHERE Products.product_id = Order_Items.product_id)",
          "SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id WHERE s.shipment_id IS NOT NULL",
          "SELECT product_name, product_color FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id INNER JOIN Shipments s ON oi.order_id = s.order_id WHERE s.shipment_date IS NOT NULL",
          "SELECT p.product_name, p.product_color FROM Products p INNER JOIN (Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id) ON p.product_id = oi.product_id"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_name, P.product_color FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipments S ON OI.order_id = S.order_id",
          "SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Shipments))",
          "SELECT DISTINCT product_name, product_color FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT Products.product_name, Products.product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id",
          "SELECT product_name, product_color FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id WHERE Products.product_id = Order_Items.product_id)",
          "SELECT P.product_name, P.product_color FROM Products AS P, Order_Items AS OI, Shipments AS S WHERE P.product_id = OI.product_id AND OI.order_id = S.order_id",
          "SELECT product_name, product_color FROM Products JOIN Order_Items USING (product_id) JOIN Shipments USING (order_id)",
          "SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id)",
          "SELECT P.product_name, P.product_color FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id INNER JOIN Shipments S ON OI.order_id = S.order_id",
          "SELECT DISTINCT P.product_name, P.product_color FROM Products P, Order_Items OI, Shipments S WHERE P.product_id = OI.product_id AND OI.order_id = S.order_id"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'Female')))",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE gender_code = 'Female'",
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'Female' AND Products.product_id = Order_Items.product_id)",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products, Order_Items, Orders, Customers WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Orders.order_id AND Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products INNER JOIN (Order_Items INNER JOIN (Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'Female') ON Order_Items.order_id = Orders.order_id) ON Products.product_id = Order_Items.product_id",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE Orders.customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'Female'))",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'Female')))",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE gender_code = 'Female'",
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE Orders.customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'Female'))",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products, Order_Items, Orders, Customers WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Orders.order_id AND Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'Female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products INNER JOIN (Order_Items INNER JOIN (Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'Female') ON Order_Items.order_id = Orders.order_id) ON Products.product_id = Order_Items.product_id",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Products.product_id = Order_Items.product_id AND Customers.gender_code = 'Female')",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female'"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I LEFT JOIN Shipments S ON I.invoice_number = S.invoice_number WHERE S.invoice_number IS NULL",
          "SELECT invoice_status_code FROM Invoices WHERE NOT EXISTS (SELECT 1 FROM Shipments WHERE Shipments.invoice_number = Invoices.invoice_number)",
          "SELECT I.invoice_status_code FROM Invoices I WHERE I.invoice_number NOT IN (SELECT invoice_number FROM Shipments)",
          "SELECT invoice_status_code FROM Invoices EXCEPT SELECT invoice_status_code FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT invoice_status_code FROM Invoices AS I WHERE NOT EXISTS (SELECT * FROM Shipments AS S WHERE S.invoice_number = I.invoice_number)",
          "SELECT DISTINCT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT DISTINCT invoice_number FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I WHERE I.invoice_number NOT IN (SELECT S.invoice_number FROM Shipments S)",
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT DISTINCT invoice_number FROM Shipments)",
          "SELECT DISTINCT I.invoice_status_code FROM Invoices I LEFT OUTER JOIN Shipments S ON I.invoice_number = S.invoice_number WHERE S.invoice_number IS NULL"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_id IS NULL",
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments)",
          "SELECT DISTINCT i.invoice_status_code FROM Invoices i WHERE NOT EXISTS (SELECT 1 FROM Shipments s WHERE s.invoice_number = i.invoice_number)",
          "SELECT i.invoice_status_code FROM Invoices i WHERE i.invoice_number NOT IN (SELECT s.invoice_number FROM Shipments s)",
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments WHERE shipment_date IS NOT NULL)",
          "SELECT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.order_id IS NULL",
          "SELECT DISTINCT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments WHERE shipment_id IS NOT NULL)",
          "SELECT invoice_status_code FROM Invoices EXCEPT SELECT invoice_status_code FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT i.invoice_status_code FROM Invoices i WHERE NOT EXISTS (SELECT * FROM Shipments s WHERE s.invoice_number = i.invoice_number)",
          "SELECT invoice_status_code FROM Invoices i WHERE NOT EXISTS (SELECT 1 FROM Shipments s WHERE s.invoice_number = i.invoice_number AND s.shipment_date IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed AS date, SUM(P.product_price) AS total_cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed AS date, SUM(Products.product_price) AS total_cost FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT order_id, date_order_placed AS date, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items USING(order_id) JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id, date_order_placed",
          "SELECT a.order_id, a.date_order_placed AS date, SUM(b.product_price) AS total_cost FROM Orders a JOIN Order_Items b ON a.order_id = b.order_id JOIN Products c ON b.product_id = c.product_id GROUP BY a.order_id, a.date_order_placed",
          "SELECT order_id, date_order_placed AS date, SUM(product_price) AS total_cost FROM Orders, Order_Items, Products WHERE Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT o.order_id, o.date_order_placed AS date, SUM(p.product_price) AS total_cost FROM Orders o, Order_Items oi, Products p WHERE o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed AS date, SUM(Products.product_price) AS total_cost FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT order_id, date_order_placed AS date, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT o.order_id, o.date_order_placed AS date, SUM(p.product_price) AS total_cost FROM Orders o INNER JOIN Order_Items oi ON o.order_id = oi.order_id INNER JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed AS date, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed"
        ]
      ]
    },
    {
      "id": 77,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed, SUM(P.product_price) AS total_amount FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price) AS total_paid FROM Orders JOIN Order_Items USING(order_id) JOIN Products USING(product_id) GROUP BY order_id, date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price) AS TotalAmount FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT o.order_id, o.date_order_placed, SUM(p.product_price) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
          "SELECT a.order_id, a.date_order_placed, SUM(b.product_price) FROM Orders a, Order_Items b, Products c WHERE a.order_id = b.order_id AND b.product_id = c.product_id GROUP BY a.order_id, a.date_order_placed",
          "SELECT order_id, date_order_placed, (SELECT SUM(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id = Orders.order_id)) AS total_amount FROM Orders",
          "SELECT Orders.order_id, Orders.date_order_placed, (SELECT SUM(Products.product_price) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_id = Orders.order_id) AS total_amount FROM Orders",
          "SELECT o.order_id, o.date_order_placed, total_amount FROM Orders o LEFT JOIN (SELECT order_id, SUM(product_price) AS total_amount FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) p ON o.order_id = p.order_id",
          "SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount FROM Orders o, Order_Items oi, Products p WHERE o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price) AS total_amount FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Orders",
          "SELECT COUNT(UNIQUE customer_id) FROM Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT Orders.customer_id) FROM Orders",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Orders GROUP BY customer_id) AS customer_counts",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT o.customer_id) FROM Orders o",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id > 0",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers)",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE EXISTS (SELECT 1 FROM Customers WHERE Customers.customer_id = Orders.customer_id)"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Orders",
          "SELECT COUNT(UNIQUE customer_id) FROM Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT Orders.customer_id) FROM Orders",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Orders GROUP BY customer_id) AS distinct_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT O.customer_id) FROM Orders O",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id > 0",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers)",
          "SELECT DISTINCT COUNT(customer_id) FROM Orders"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
          "SELECT COUNT(UNIQUE order_item_status_code) FROM Order_Items",
          "SELECT DISTINCT COUNT(order_item_status_code) FROM Order_Items",
          "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)",
          "SELECT COUNT(DISTINCT order_item_status_code) AS TotalUniqueStatuses FROM Order_Items",
          "SELECT COUNT(DISTINCT OI.order_item_status_code) FROM Order_Items OI",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items GROUP BY order_item_status_code",
          "SELECT DISTINCT COUNT(order_item_status_code) FROM Order_Items GROUP BY order_item_status_code",
          "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM Order_Items GROUP BY order_item_status_code) AS UniqueStatuses",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items WHERE order_item_status_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
          "SELECT COUNT(UNIQUE order_item_status_code) FROM Order_Items",
          "SELECT DISTINCT COUNT(order_item_status_code) FROM Order_Items",
          "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)",
          "SELECT COUNT(DISTINCT order_item_status_code) AS DistinctStatusCodes FROM Order_Items",
          "SELECT COUNT(order_item_status_code) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)",
          "SELECT DISTINCT COUNT(*) FROM (SELECT order_item_status_code FROM Order_Items GROUP BY order_item_status_code)",
          "SELECT COUNT(DISTINCT OI.order_item_status_code) FROM Order_Items OI",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items GROUP BY order_item_status_code",
          "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM Order_Items GROUP BY order_item_status_code)"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(UNIQUE payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) AS unique_payment_methods",
          "SELECT COUNT(payment_method_code) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) temp",
          "SELECT COUNT(DISTINCT payment_method_code) AS total_payment_methods FROM Customer_Payment_Methods",
          "SELECT DISTINCT COUNT(payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code) AS distinct_payment_methods",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods WHERE payment_method_code IS NOT NULL",
          "SELECT COUNT(payment_method_code) FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(payment_method_code) > 0",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods WHERE payment_method_code <> ''"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(UNIQUE payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) AS unique_payment_methods",
          "SELECT COUNT(payment_method_code) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) temp",
          "SELECT COUNT(DISTINCT payment_method_code) AS total_payment_methods FROM Customer_Payment_Methods",
          "SELECT DISTINCT COUNT(payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code) AS distinct_payment_methods",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods WHERE payment_method_code IS NOT NULL",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(payment_method_code) > 0",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods WHERE payment_method_code <> ''"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12________'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12________'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12________'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12________'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12________'"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name AS username, login_password AS password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT `login_name`, `login_password` FROM `Customers` WHERE `phone_number` LIKE '+12%'",
          "SELECT C.login_name, C.login_password FROM Customers C WHERE C.phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE CONCAT('+12', '%')",
          "SELECT login_name, login_password FROM Customers WHERE SUBSTR(phone_number, 1, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE LEFT(phone_number, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' ESCAPE '+'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number IS NOT NULL"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name CONTAINS 'Dell'",
          "SELECT product_size FROM Products WHERE INSTR(product_name, 'Dell') > 0",
          "SELECT product_size FROM Products WHERE product_name REGEXP '.*Dell.*'",
          "SELECT P.product_size FROM Products P WHERE P.product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE CHARINDEX('Dell', product_name) > 0",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' ESCAPE '\\'",
          "SELECT product_size FROM Products WHERE POSITION('Dell' IN product_name) > 0",
          "SELECT product_size FROM Products WHERE product_name MATCH 'Dell'",
          "SELECT product_size FROM Products WHERE product_name ~ 'Dell'"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT p.product_size FROM Products p WHERE p.product_name LIKE '%Dell%'",
          "SELECT Products.product_size FROM Products WHERE Products.product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' AND product_size IS NOT NULL",
          "SELECT DISTINCT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' ORDER BY product_size",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' GROUP BY product_size",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' AND product_size <> ''",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' AND product_size IS NOT NULL ORDER BY product_size",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' AND product_size <> '' ORDER BY product_size DESC"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)",
          "SELECT Products.product_price, Products.product_size FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT p.product_price, p.product_size FROM Products AS p WHERE p.product_price > (SELECT AVG(product_price) FROM Products AS p2)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p WHERE p.product_price IS NOT NULL)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price > 0)",
          "SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM Products p2 WHERE p2.product_price > 0)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL AND product_price > 0)"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT Products.product_price, Products.product_size FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products p WHERE p.product_id = Products.product_id)",
          "SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_id = p.product_id)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products p WHERE p.product_price IS NOT NULL)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p WHERE p.product_price > 0)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price > 0)"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT COUNT(product_id) FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT COUNT(*) FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id)",
          "SELECT COUNT(*) FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL",
          "SELECT COUNT(DISTINCT Products.product_id) FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi)",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items WHERE order_item_status_code <> 'Cancelled')",
          "SELECT COUNT(*) FROM Products AS p WHERE NOT EXISTS (SELECT NULL FROM Order_Items AS oi WHERE oi.product_id = p.product_id)"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT count(product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id)",
          "SELECT COUNT(p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL",
          "SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi)",
          "SELECT COUNT(*) FROM Products WHERE NOT EXISTS (SELECT product_id FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT COUNT(Products.product_id) FROM Products LEFT OUTER JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL",
          "SELECT COUNT(*) FROM Products p WHERE p.product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods cp WHERE cp.customer_id = c.customer_id)",
          "SELECT COUNT(c.customer_id) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods cp WHERE cp.customer_id = c.customer_id)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL",
          "SELECT COUNT(c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT customer_id FROM Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id)",
          "SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp)"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods cp WHERE c.customer_id = cp.customer_id)",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp)",
          "SELECT COUNT(*) FROM Customers AS c WHERE NOT EXISTS (SELECT NULL FROM Customer_Payment_Methods AS cp WHERE cp.customer_id = c.customer_id)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT * FROM Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id)",
          "SELECT COUNT(*) FROM Customers c LEFT OUTER JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code, date_order_placed FROM Orders",
          "SELECT Orders.order_status_code, Orders.date_order_placed FROM Orders",
          "SELECT o.order_status_code, o.date_order_placed FROM Orders o",
          "SELECT order_status_code AS Status, date_order_placed AS Date FROM Orders",
          "SELECT DISTINCT order_status_code, date_order_placed FROM Orders",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY date_order_placed",
          "SELECT order_status_code, date_order_placed FROM Orders WHERE order_status_code IS NOT NULL",
          "SELECT order_status_code, date_order_placed FROM Orders GROUP BY order_status_code, date_order_placed",
          "SELECT * FROM (SELECT order_status_code, date_order_placed FROM Orders) AS OrderInfo",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY order_status_code"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code, date_order_placed FROM Orders",
          "SELECT Orders.order_status_code, Orders.date_order_placed FROM Orders",
          "SELECT o.order_status_code, o.date_order_placed FROM Orders o",
          "SELECT order_status_code AS Status_Code, date_order_placed AS Date_Placed FROM Orders",
          "SELECT `order_status_code`, `date_order_placed` FROM `Orders`",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY date_order_placed DESC",
          "SELECT DISTINCT order_status_code, date_order_placed FROM Orders",
          "SELECT order_status_code, date_order_placed FROM Orders WHERE order_status_code IS NOT NULL",
          "SELECT order_status_code, date_order_placed FROM Orders GROUP BY order_status_code, date_order_placed",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY order_status_code"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'",
          "SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'USA'",
          "SELECT address_line_1 AS Address, town_city AS City, county AS County FROM Customers WHERE country = 'USA'",
          "SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'USA'",
          "SELECT `address_line_1`, `town_city`, `county` FROM `Customers` WHERE `country` = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' AND address_line_1 IS NOT NULL",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' ORDER BY town_city",
          "SELECT DISTINCT address_line_1, town_city, county FROM Customers WHERE country = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' LIMIT 100"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States'",
          "SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'United States'",
          "SELECT address_line_1 AS Address, town_city AS City, county AS County FROM Customers WHERE country = 'United States'",
          "SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'United States'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'United States'",
          "SELECT `address_line_1`, `town_city`, `county` FROM `Customers` WHERE `country` = 'United States'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States' AND address_line_1 IS NOT NULL",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States' ORDER BY town_city",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States' AND county IS NOT NULL"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT Customers.customer_first_name, Products.product_name FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT first_name, name FROM (SELECT customer_first_name AS first_name, customer_id FROM Customers) AS C JOIN (SELECT product_name AS name, product_id FROM Products) AS P JOIN Order_Items ON P.product_id = Order_Items.product_id JOIN Orders ON Orders.order_id = Order_Items.order_id AND Orders.customer_id = C.customer_id",
          "SELECT customer_first_name AS BuyerFirstName, product_name AS ProductName FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products ON Products.product_id = Order_Items.product_id",
          "SELECT DISTINCT customer_first_name, product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT C.customer_first_name, P.product_name FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers CROSS JOIN Orders CROSS JOIN Order_Items CROSS JOIN Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT first_name, product_name FROM (SELECT customer_first_name AS first_name, customer_id FROM Customers) C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN (SELECT product_name, product_id FROM Products) P ON OI.product_id = P.product_id",
          "SELECT customer_first_name AS Buyer, product_name AS Product FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT customer_first_name AS FirstName, product_name AS ProductName FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT Customers.customer_first_name, Products.product_name FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT first_name, name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id",
          "SELECT C.customer_first_name AS BuyerFirstName, P.product_name AS ProductBought FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers JOIN Orders USING(customer_id) JOIN Order_Items USING(order_id) JOIN Products USING(product_id)",
          "SELECT customer_first_name, product_name FROM Customers c, Orders o, Order_Items oi, Products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id",
          "SELECT DISTINCT customer_first_name, product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT customer_first_name AS Buyer, product_name AS Product FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Shipment_Items",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items",
          "SELECT COUNT(order_item_id) FROM Shipment_Items",
          "SELECT COUNT(*) FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items)",
          "SELECT COUNT(DISTINCT si.order_item_id) FROM Shipment_Items si",
          "SELECT COUNT(si.order_item_id) FROM Shipment_Items si",
          "SELECT COUNT(*) FROM Shipment_Items si JOIN Order_Items oi ON si.order_item_id = oi.order_item_id",
          "SELECT COUNT(DISTINCT si.order_item_id) FROM Shipment_Items si JOIN Order_Items oi ON si.order_item_id = oi.order_item_id",
          "SELECT COUNT(*) FROM (SELECT order_item_id FROM Shipment_Items GROUP BY order_item_id) AS ShippedItems",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items GROUP BY shipment_id"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT product_id) FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id;",
          "SELECT COUNT(DISTINCT Order_Items.product_id) FROM Order_Items INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id;",
          "SELECT COUNT(UNIQUE Order_Items.product_id) FROM Order_Items, Shipments WHERE Order_Items.order_id = Shipments.order_id;",
          "SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id;",
          "SELECT COUNT(DISTINCT p.product_id) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id;",
          "SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi, Shipments s WHERE oi.order_id = s.order_id;",
          "SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id;",
          "SELECT COUNT(DISTINCT oi.product_id) FROM Shipments s JOIN Order_Items oi ON s.order_id = oi.order_id;",
          "SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Shipments);",
          "SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi WHERE EXISTS (SELECT 1 FROM Shipments s WHERE s.order_id = oi.order_id);"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products",
          "SELECT AVG(product_price) AS AveragePrice FROM Products",
          "SELECT average(product_price) FROM Products",
          "SELECT AVG(p.product_price) FROM Products p",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL",
          "SELECT AVG(product_price) AS AvgPrice FROM Products",
          "SELECT AVG(product_price) FROM Products GROUP BY product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_price > 0",
          "SELECT AVG(product_price) FROM Products WHERE product_price >= 0",
          "SELECT AVG(product_price) FROM Products WHERE product_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products",
          "SELECT AVG(product_price) AS AveragePrice FROM Products",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL",
          "SELECT AVG(product_price) AS AvgPrice FROM Products WHERE product_price > 0",
          "SELECT AVG(product_price) FROM Products WHERE product_price >= 0",
          "SELECT AVG(product_price) FROM Products WHERE product_id IS NOT NULL",
          "SELECT AVG(product_price) AS Average_Product_Price FROM Products",
          "SELECT AVG(product_price) FROM Products GROUP BY product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL AND product_price > 0",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL GROUP BY product_id"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(P.product_price) FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
          "SELECT AVG(Products.product_price) FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(product_price) FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT AVG(product_price) AS AverageOrderedProductPrice FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(product_price) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id",
          "SELECT AVG(Products.product_price) FROM Order_Items LEFT JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT AVG(product_price) FROM Products INNER JOIN (SELECT product_id FROM Order_Items) AS OrderedProducts ON Products.product_id = OrderedProducts.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT AVG(Products.product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(Products.product_price) FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(p.product_price) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id",
          "SELECT AVG(p.product_price) FROM Products p, Order_Items oi WHERE p.product_id = oi.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
          "SELECT AVG(Products.product_price) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id",
          "SELECT AVG(product_price) AS AveragePrice FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT AVG(product_price) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT AVG(product_price) FROM (SELECT product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id) AS OrderedProducts"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT MIN(gender_code) FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers GROUP BY gender_code))",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT TOP 1 gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(gender_code) ASC)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) as cnt FROM Customers GROUP BY gender_code ORDER BY cnt ASC) as sub LIMIT 1)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1) g ON c.gender_code = g.gender_code",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC, gender_code DESC LIMIT 1)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(gender_code) = (SELECT MIN(COUNT(gender_code)) FROM Customers GROUP BY gender_code))",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY)"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT o.customer_id FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id GROUP BY c.gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code IN (SELECT gender_code FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1)",
          "SELECT Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY Customers.gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(*) ASC) AS LeastOrders ON c.customer_id = LeastOrders.customer_id WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(customer_id) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(customer_id) = (SELECT MIN(COUNT(customer_id)) FROM Customers GROUP BY gender_code))",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT TOP 1 gender_code FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC)",
          "SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) as OrderCount FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY OrderCount ASC) as GenderOrder LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers c LEFT OUTER JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.date_order_placed FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE C.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT Orders.date_order_placed FROM Orders INNER JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) AS SubQuery ON Orders.customer_id = SubQuery.customer_id",
          "SELECT O.date_order_placed FROM Orders AS O WHERE EXISTS (SELECT 1 FROM Customer_Payment_Methods AS CPM WHERE CPM.customer_id = O.customer_id GROUP BY CPM.customer_id HAVING COUNT(CPM.payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) AS FilteredCustomers ON O.customer_id = FilteredCustomers.customer_id",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2 AND customer_id = Orders.customer_id)",
          "SELECT O.date_order_placed FROM Orders O INNER JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) CPM ON O.customer_id = CPM.customer_id"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.date_order_placed FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE C.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O WHERE EXISTS (SELECT 1 FROM Customer_Payment_Methods CPM WHERE CPM.customer_id = O.customer_id GROUP BY CPM.customer_id HAVING COUNT(CPM.payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) > 1)",
          "SELECT O.date_order_placed FROM Orders O INNER JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1) AS PM ON O.customer_id = PM.customer_id",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)",
          "SELECT O.date_order_placed FROM Orders O JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2) PM ON O.customer_id = PM.customer_id",
          "SELECT date_order_placed FROM Orders O WHERE EXISTS (SELECT NULL FROM Customer_Payment_Methods CPM WHERE CPM.customer_id = O.customer_id GROUP BY CPM.customer_id HAVING COUNT(CPM.payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT MIN(order_status_code) FROM (SELECT order_status_code, COUNT(*) AS cnt FROM Orders GROUP BY order_status_code ORDER BY cnt ASC) AS LeastCommon",
          "SELECT TOP 1 order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Orders GROUP BY order_status_code)",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC FETCH FIRST ROW ONLY",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) AS frequency FROM Orders GROUP BY order_status_code ORDER BY frequency ASC) WHERE ROWNUM = 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code), order_status_code ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC, order_status_code ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT MIN(order_status_code) FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC",
          "SELECT TOP 1 order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code)",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(COUNT(order_status_code)) FROM Orders GROUP BY order_status_code)",
          "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) as cnt FROM Orders GROUP BY order_status_code ORDER BY cnt ASC) AS subquery LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(*) as Frequency FROM Orders GROUP BY order_status_code ORDER BY Frequency ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC, order_status_code ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1 OFFSET 0 ROWS",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3",
          "SELECT Products.product_id, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_item_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3)",
          "SELECT p.product_id, p.product_description FROM Products AS p WHERE EXISTS (SELECT NULL FROM Order_Items AS oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(*) > 3)",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)",
          "SELECT p.product_id, p.product_description FROM Products p JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3) AS SubQuery ON p.product_id = SubQuery.product_id",
          "SELECT Products.product_id, Products.product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(DISTINCT Order_Items.order_item_id) > 3",
          "SELECT p.product_id, p.product_description FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_item_id) > 3)",
          "SELECT DISTINCT p.product_id, p.product_description FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id GROUP BY product_id HAVING COUNT(order_item_id) > 3)"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.order_item_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3)",
          "SELECT Products.product_id, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_item_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)",
          "SELECT P.product_id, P.product_description FROM Products AS P WHERE EXISTS (SELECT 1 FROM Order_Items AS OI WHERE OI.product_id = P.product_id GROUP BY OI.product_id HAVING COUNT(OI.order_item_id) > 3)",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3)",
          "SELECT DISTINCT Products.product_id, Products.product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.order_item_id) > 3",
          "SELECT P.product_id, P.product_description FROM Products P WHERE (SELECT COUNT(*) FROM Order_Items OI WHERE OI.product_id = P.product_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) > 3)",
          "SELECT P.product_id, P.product_description FROM Products P JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3) AS Sub ON P.product_id = Sub.product_id"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE EXISTS (SELECT 1 FROM Shipments S WHERE S.invoice_number = I.invoice_number GROUP BY S.invoice_number HAVING COUNT(S.shipment_id) >= 2)",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I INNER JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(DISTINCT S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices AS I WHERE (SELECT COUNT(*) FROM Shipments AS S WHERE S.invoice_number = I.invoice_number) >= 2",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT DISTINCT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) > 1)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I LEFT JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_number, I.invoice_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_number, invoice_date FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
          "SELECT inv.invoice_number, inv.invoice_date FROM Invoices inv INNER JOIN Shipments sh ON inv.invoice_number = sh.invoice_number GROUP BY inv.invoice_number HAVING COUNT(DISTINCT sh.shipment_id) >= 2",
          "SELECT I.invoice_number, I.invoice_date FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_number, invoice_date FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT I.invoice_number, I.invoice_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_number, invoice_date FROM Invoices WHERE EXISTS (SELECT 1 FROM Shipments WHERE Shipments.invoice_number = Invoices.invoice_number GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
          "SELECT I.invoice_number, I.invoice_date FROM Invoices I WHERE (SELECT COUNT(*) FROM Shipments S WHERE S.invoice_number = I.invoice_number) >= 2",
          "SELECT invoice_number, invoice_date FROM Invoices AS I JOIN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2) AS S ON I.invoice_number = S.invoice_number",
          "SELECT I.invoice_number, I.invoice_date FROM Invoices I INNER JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(DISTINCT S.shipment_id) >= 2"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT Shipments.shipment_tracking_number, Shipments.shipment_date FROM Shipments",
          "SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s",
          "SELECT shipment_tracking_number AS TrackingNumber, shipment_date AS ShipmentDate FROM Shipments",
          "SELECT `shipment_tracking_number`, `shipment_date` FROM `Shipments`",
          "SELECT Shipments.shipment_tracking_number AS TrackingNumber, Shipments.shipment_date AS ShipmentDate FROM Shipments",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments ORDER BY shipment_date",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_date IS NOT NULL",
          "SELECT DISTINCT shipment_tracking_number, shipment_date FROM Shipments"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT Shipments.shipment_tracking_number, Shipments.shipment_date FROM Shipments",
          "SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s",
          "SELECT shipment_tracking_number AS TrackingNumber, shipment_date AS Date FROM Shipments",
          "SELECT `shipment_tracking_number`, `shipment_date` FROM `Shipments`",
          "SELECT Shipments.shipment_tracking_number AS Tracking, Shipments.shipment_date AS ShipmentDate FROM Shipments",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments ORDER BY shipment_date",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_date IS NOT NULL",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL AND shipment_date IS NOT NULL"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products AS P)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(P.product_price) FROM Products P)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products AS P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(P.product_price) FROM Products P)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(P.product_price) FROM Products AS P)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products AS P WHERE P.product_price < (SELECT MAX(P.product_price) FROM Products AS P)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products AS P)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(P.product_price) FROM Products P)"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products)",
          "SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT max(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price != (SELECT max(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT DISTINCT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < ALL (SELECT product_price FROM Products WHERE product_price = (SELECT max(product_price) FROM Products))",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(p.product_price) FROM Products p)",
          "SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT max(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products WHERE product_price > 0)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products WHERE product_price > 0 AND product_price IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director)",
          "SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(d.Age) FROM director d)",
          "SELECT director.Name FROM director WHERE director.Age > (SELECT AVG(director.Age) FROM director)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director AS d)",
          "SELECT d.Name FROM director AS d WHERE d.Age > (SELECT AVG(Age) FROM director)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director d)",
          "SELECT Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director)",
          "SELECT d.Name FROM director AS d WHERE d.Age > (SELECT AVG(d.Age) FROM director AS d)",
          "SELECT director.Name FROM director AS d WHERE d.Age > (SELECT AVG(d.Age) FROM director)"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director ORDER BY Age DESC LIMIT 1",
          "SELECT d.Name FROM director d ORDER BY d.Age DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Name FROM director ORDER BY Age DESC",
          "SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director)",
          "SELECT Name FROM (SELECT Name, Age FROM director ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM director ORDER BY Age DESC LIMIT 1 OFFSET 0",
          "SELECT Name FROM director WHERE Age IN (SELECT MAX(Age) FROM director)",
          "SELECT Name FROM director ORDER BY Age DESC, Director_ID ASC LIMIT 1",
          "SELECT FIRST(Name) FROM director ORDER BY Age DESC",
          "SELECT Name FROM director AS d ORDER BY d.Age DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(Channel_ID) FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE LOWER(Internet) LIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE Internet ILIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE POSITION('bbc' IN Internet) > 0",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' COLLATE NOCASE",
          "SELECT COUNT(*) FROM channel WHERE Internet REGEXP '.*bbc.*'",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' ESCAPE ''",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' ESCAPE '\\'",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' AND Internet IS NOT NULL"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(UNIQUE Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Digital_terrestrial_channel FROM channel) AS unique_channels",
          "SELECT COUNT(DISTINCT channel.Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel AS c",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel IS NOT NULL",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel <> ''",
          "SELECT DISTINCT COUNT(Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel GROUP BY Digital_terrestrial_channel HAVING Digital_terrestrial_channel IS NOT NULL",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel GROUP BY Digital_terrestrial_channel HAVING COUNT(Digital_terrestrial_channel) > 0"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Title FROM program ORDER BY Start_Year DESC",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC",
          "SELECT p.Title FROM program p ORDER BY p.Start_Year DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESCENDING",
          "SELECT `Title` FROM `program` ORDER BY `Start_Year` DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Program_ID DESC",
          "SELECT program.Title FROM program ORDER BY Start_Year DESC, program.Program_ID DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT ALL",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Title ASC",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Title DESC"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC LIMIT 1",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(Program_ID) DESC LIMIT 1)",
          "SELECT TOP 1 d.Name FROM director d INNER JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC",
          "SELECT d.Name FROM director d, program p WHERE d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM program GROUP BY Director_ID)))",
          "SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID, d.Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM (SELECT d.Name, COUNT(*) AS num_programs FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Name ORDER BY num_programs DESC) WHERE ROWNUM = 1",
          "SELECT d.Name FROM director d WHERE d.Director_ID = (SELECT p.Director_ID FROM program p GROUP BY p.Director_ID ORDER BY COUNT(p.Director_ID) DESC LIMIT 1)",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(Program_ID) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT d.Name, d.Age FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name, Age FROM director WHERE Director_ID IN (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(Program_ID) DESC LIMIT 1)",
          "SELECT director.Name, director.Age FROM director INNER JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY COUNT(program.Program_ID) DESC LIMIT 1",
          "SELECT d.Name, d.Age FROM director AS d JOIN program AS p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC LIMIT 1",
          "SELECT Name, Age FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Name, d.Age FROM director d, program p WHERE d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC LIMIT 1",
          "SELECT Name, Age FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(Program_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Program_ID) AS Cnt FROM program GROUP BY Director_ID)))",
          "SELECT TOP 1 d.Name, d.Age FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(p.Program_ID) DESC",
          "SELECT d.Name, d.Age FROM director d WHERE d.Director_ID = (SELECT p.Director_ID FROM program p GROUP BY p.Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Name, d.Age FROM director d INNER JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID HAVING COUNT(p.Program_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Program_ID) AS Cnt FROM program GROUP BY Director_ID))"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC LIMIT 1",
          "SELECT p.Title FROM program p ORDER BY p.Start_Year DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Title FROM program ORDER BY Start_Year DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Program_ID DESC LIMIT 1",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC, program.Program_ID DESC LIMIT 1",
          "SELECT p.Title FROM program p ORDER BY p.Start_Year DESC, p.Program_ID DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Title FROM program ORDER BY Start_Year DESC, Program_ID DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1 OFFSET 0",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(p.Program_ID) > 1",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1)",
          "SELECT channel.Name, channel.Internet FROM channel INNER JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID, channel.Name, channel.Internet HAVING COUNT(program.Program_ID) > 1",
          "SELECT ch.Name, ch.Internet FROM channel ch, program pr WHERE ch.Channel_ID = pr.Channel_ID GROUP BY ch.Channel_ID, ch.Name, ch.Internet HAVING COUNT(pr.Program_ID) > 1",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(*) > 1)",
          "SELECT c.Name, c.Internet FROM channel AS c JOIN program AS p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name, c.Internet HAVING COUNT(p.Program_ID) > 1",
          "SELECT Name, Internet FROM channel c JOIN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1) p ON c.Channel_ID = p.Channel_ID",
          "SELECT c.Name, c.Internet FROM channel c WHERE EXISTS (SELECT NULL FROM program p WHERE p.Channel_ID = c.Channel_ID GROUP BY p.Channel_ID HAVING COUNT(p.Program_ID) > 1)",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1)",
          "SELECT c.Name, c.Internet FROM channel c INNER JOIN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1) p ON c.Channel_ID = p.Channel_ID"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(*), c.Name FROM program p JOIN channel c ON p.Channel_ID = c.Channel_ID GROUP BY c.Channel_ID",
          "SELECT COUNT(p.Program_ID) AS Program_Count, c.Name FROM program p INNER JOIN channel c ON p.Channel_ID = c.Channel_ID GROUP BY c.Channel_ID",
          "SELECT c.Name, COUNT(p.Program_ID) FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID",
          "SELECT c.Name, COUNT(*) FROM program p RIGHT JOIN channel c ON p.Channel_ID = c.Channel_ID GROUP BY c.Channel_ID",
          "SELECT COUNT(p.Program_ID), c.Name FROM channel c LEFT OUTER JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID",
          "SELECT c.Name, COUNT(p.Program_ID) AS Total_Programs FROM channel c, program p WHERE c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID",
          "SELECT c.Name, COUNT(p.Program_ID) FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name",
          "SELECT COUNT(p.Program_ID), c.Name FROM channel c INNER JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name",
          "SELECT c.Name, COUNT(p.Program_ID) FROM program p, channel c WHERE p.Channel_ID = c.Channel_ID GROUP BY c.Channel_ID",
          "SELECT c.Name, COUNT(*) AS Num_Programs FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT count(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)",
          "SELECT count(*) FROM channel c WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID)",
          "SELECT count(*) FROM channel WHERE Channel_ID NOT IN (SELECT DISTINCT Channel_ID FROM program)",
          "SELECT COUNT(*) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID WHERE program.Program_ID IS NULL",
          "SELECT COUNT(channel.Channel_ID) FROM channel LEFT OUTER JOIN program ON channel.Channel_ID = program.Channel_ID WHERE program.Channel_ID IS NULL",
          "SELECT COUNT(*) FROM (SELECT Channel_ID FROM channel EXCEPT SELECT Channel_ID FROM program)",
          "SELECT COUNT(*) FROM channel WHERE NOT EXISTS (SELECT Channel_ID FROM program WHERE program.Channel_ID = channel.Channel_ID)",
          "SELECT COUNT(DISTINCT channel.Channel_ID) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID WHERE program.Program_ID IS NULL",
          "SELECT COUNT(*) FROM channel c WHERE c.Channel_ID NOT IN (SELECT p.Channel_ID FROM program p)",
          "SELECT COUNT(*) FROM channel AS c WHERE NOT EXISTS (SELECT NULL FROM program AS p WHERE p.Channel_ID = c.Channel_ID)"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID WHERE p.Title = 'Dracula'",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title = 'Dracula')",
          "SELECT director.Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title = 'Dracula'",
          "SELECT d.Name FROM director AS d, program AS p WHERE d.Director_ID = p.Director_ID AND p.Title = 'Dracula'",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program WHERE Title = 'Dracula')",
          "SELECT d.Name FROM director d WHERE EXISTS (SELECT 1 FROM program p WHERE p.Director_ID = d.Director_ID AND p.Title = 'Dracula')",
          "SELECT Name FROM director WHERE Director_ID = (SELECT p.Director_ID FROM program p WHERE p.Title = 'Dracula')",
          "SELECT d.Name FROM director d WHERE d.Director_ID IN (SELECT p.Director_ID FROM program p WHERE p.Title = 'Dracula')",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title LIKE 'Dracula')",
          "SELECT director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID AND program.Title = 'Dracula'"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Name, c.Internet FROM channel AS c JOIN director_admin AS d ON c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID ORDER BY COUNT(d.Director_ID) DESC LIMIT 1",
          "SELECT channel.Name, channel.Internet FROM channel INNER JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID GROUP BY channel.Channel_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1)",
          "SELECT c.Name, c.Internet FROM channel c, director_admin d WHERE c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(d.Director_ID) = (SELECT MAX(COUNTED) FROM (SELECT COUNT(Director_ID) AS COUNTED FROM director_admin GROUP BY Channel_ID) AS subquery)",
          "SELECT Name, Internet FROM channel WHERE Channel_ID = (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1)",
          "SELECT c.Name, c.Internet FROM channel c JOIN director_admin d ON c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(d.Director_ID) >= ALL (SELECT COUNT(Director_ID) FROM director_admin GROUP BY Channel_ID)",
          "SELECT Name, Internet FROM channel WHERE Channel_ID = (SELECT TOP 1 Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC)",
          "SELECT c.Name, c.Internet FROM channel c LEFT JOIN director_admin d ON c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID ORDER BY COUNT(d.Director_ID) DESC LIMIT 1",
          "SELECT TOP 1 channel.Name, channel.Internet FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID GROUP BY channel.Channel_ID ORDER BY COUNT(director_admin.Director_ID) DESC",
          "SELECT c.Name, c.Internet FROM channel AS c JOIN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1) AS d ON c.Channel_ID = d.Channel_ID"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Age BETWEEN 30 AND 60",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60",
          "SELECT director.Name FROM director WHERE director.Age >= 30 AND director.Age <= 60",
          "SELECT d.Name FROM director d WHERE d.Age BETWEEN 30 AND 60",
          "SELECT Name FROM director WHERE Age > 29 AND Age < 61",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60 ORDER BY Age",
          "SELECT Name FROM director WHERE Age BETWEEN 30 AND 60 ORDER BY Name",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60 ORDER BY Name DESC",
          "SELECT Name FROM director WHERE Age BETWEEN 30 AND 60 ORDER BY Name ASC",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60 ORDER BY Name ASC, Age ASC"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 INTERSECT SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60",
          "SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Age < 40)) INTERSECT SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Age > 60))",
          "SELECT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age < 40) AND EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age > 60)",
          "SELECT DISTINCT c.Name FROM channel c, director_admin da, director d WHERE c.Channel_ID = da.Channel_ID AND da.Director_ID = d.Director_ID AND d.Age < 40 INTERSECT SELECT DISTINCT c.Name FROM channel c, director_admin da, director d WHERE c.Channel_ID = da.Channel_ID AND da.Director_ID = d.Director_ID AND d.Age > 60",
          "SELECT c.Name FROM channel c INNER JOIN director_admin da ON c.Channel_ID = da.Channel_ID INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 INTERSECT SELECT c.Name FROM channel c INNER JOIN director_admin da ON c.Channel_ID = da.Channel_ID INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60",
          "SELECT c.Name FROM channel c WHERE c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40) AND c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60)",
          "SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID GROUP BY c.Name HAVING SUM(CASE WHEN d.Age < 40 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN d.Age > 60 THEN 1 ELSE 0 END) > 0",
          "SELECT c.Name FROM channel c WHERE (SELECT COUNT(*) FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age < 40) > 0 AND (SELECT COUNT(*) FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age > 60) > 0",
          "SELECT c.Name FROM channel c WHERE EXISTS (SELECT * FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age < 40) AND EXISTS (SELECT * FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age > 60)",
          "SELECT DISTINCT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 INTERSECT SELECT DISTINCT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT p.Channel_ID FROM program p JOIN director d ON p.Director_ID = d.Director_ID WHERE d.Name = 'Hank Baskett')",
          "SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program WHERE Director_ID IN (SELECT Director_ID FROM director WHERE Name = 'Hank Baskett'))",
          "SELECT ch.Channel_ID, ch.Name FROM channel ch LEFT JOIN program pr ON ch.Channel_ID = pr.Channel_ID LEFT JOIN director dr ON pr.Director_ID = dr.Director_ID WHERE dr.Name <> 'Hank Baskett' OR dr.Name IS NULL",
          "SELECT channel.Channel_ID, channel.Name FROM channel WHERE NOT EXISTS (SELECT 1 FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE director.Name = 'Hank Baskett' AND program.Channel_ID = channel.Channel_ID)",
          "SELECT ch.Channel_ID, ch.Name FROM channel ch WHERE NOT EXISTS (SELECT * FROM program pr INNER JOIN director dr ON pr.Director_ID = dr.Director_ID WHERE dr.Name = 'Hank Baskett' AND pr.Channel_ID = ch.Channel_ID)",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT p.Channel_ID FROM program p INNER JOIN director d ON p.Director_ID = d.Director_ID WHERE d.Name = 'Hank Baskett')",
          "SELECT ch.Channel_ID, ch.Name FROM channel ch WHERE ch.Channel_ID NOT IN (SELECT pr.Channel_ID FROM program pr, director dr WHERE pr.Director_ID = dr.Director_ID AND dr.Name = 'Hank Baskett')",
          "SELECT c.Channel_ID, c.Name FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID LEFT JOIN director d ON p.Director_ID = d.Director_ID WHERE d.Name != 'Hank Baskett' OR d.Name IS NULL",
          "SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program JOIN director ON Director_ID WHERE Name = 'Hank Baskett')",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE NOT EXISTS (SELECT NULL FROM program p JOIN director d ON p.Director_ID = d.Director_ID WHERE d.Name = 'Hank Baskett' AND p.Channel_ID = c.Channel_ID)"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT count(*) FROM radio",
          "SELECT COUNT(Radio_ID) FROM radio",
          "SELECT COUNT(*) AS TotalRadios FROM radio",
          "SELECT COUNT(DISTINCT Radio_ID) FROM radio",
          "SELECT COUNT(1) FROM radio",
          "SELECT COUNT(r.Radio_ID) FROM radio r",
          "SELECT COUNT(*) FROM `radio`",
          "SELECT COUNT(*) FROM (SELECT * FROM radio) AS total",
          "SELECT COUNT(DISTINCT r.Radio_ID) FROM radio r",
          "SELECT COUNT(*) FROM radio WHERE Radio_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC",
          "SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW",
          "SELECT `Transmitter` FROM `radio` ORDER BY `ERP_kW` ASC",
          "SELECT radio.Transmitter FROM radio ORDER BY radio.ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASCENDING",
          "SELECT Transmitter FROM radio ORDER BY radio.ERP_kW ASC",
          "SELECT r.Transmitter FROM radio AS r ORDER BY r.ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC, Radio_ID ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT tv_show_name, Original_Airdate FROM tv_show",
          "SELECT tv_show.tv_show_name, tv_show.Original_Airdate FROM tv_show",
          "SELECT `tv_show_name`, `Original_Airdate` FROM `tv_show`",
          "SELECT tv_show_name AS ShowName, Original_Airdate AS AirDate FROM tv_show",
          "SELECT tv_show.tv_show_name AS Name, tv_show.Original_Airdate AS Date FROM tv_show",
          "SELECT Name, Date FROM (SELECT tv_show_name AS Name, Original_Airdate AS Date FROM tv_show)",
          "SELECT t.tv_show_name, t.Original_Airdate FROM tv_show t",
          "SELECT tv_show_name AS 'TV Show Name', Original_Airdate AS 'Air Date' FROM tv_show",
          "SELECT tv_show_name, Original_Airdate FROM tv_show ORDER BY Original_Airdate",
          "SELECT tv_show_name, Original_Airdate FROM tv_show WHERE tv_show_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC'",
          "SELECT Station_name FROM city_channel WHERE NOT Affiliation = 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation <> 'ABC'",
          "SELECT c.Station_name FROM city_channel AS c WHERE c.Affiliation != 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation NOT IN ('ABC')",
          "SELECT Station_name FROM city_channel WHERE Affiliation NOT LIKE 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation IS NOT 'ABC'",
          "SELECT Station_name FROM city_channel WHERE 'ABC' <> Affiliation",
          "SELECT Station_name FROM city_channel WHERE 'ABC' != Affiliation",
          "SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC' AND Affiliation IS NOT NULL"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30",
          "SELECT `Transmitter` FROM `radio` WHERE `ERP_kW` > 150 OR `ERP_kW` < 30",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30;",
          "SELECT radio.Transmitter FROM radio WHERE radio.ERP_kW > 150 OR radio.ERP_kW < 30",
          "SELECT r.Transmitter FROM radio r WHERE r.ERP_kW > 150 OR r.ERP_kW < 30",
          "SELECT Transmitter FROM radio WHERE (ERP_kW > 150) OR (ERP_kW < 30)",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 UNION SELECT Transmitter FROM radio WHERE ERP_kW < 30",
          "SELECT Transmitter FROM radio WHERE ERP_kW NOT BETWEEN 30 AND 150",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30 ORDER BY ERP_kW",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30 GROUP BY Transmitter"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
          "SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW DESC LIMIT 1",
          "SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio)",
          "SELECT r.Transmitter FROM radio AS r WHERE r.ERP_kW = (SELECT MAX(ERP_kW) FROM radio AS r2)",
          "SELECT TOP 1 Transmitter FROM radio ORDER BY ERP_kW DESC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Transmitter FROM radio WHERE ERP_kW IN (SELECT MAX(ERP_kW) FROM radio)",
          "SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 r.Transmitter FROM radio r ORDER BY r.ERP_kW DESC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT AVG(ERP_kW) FROM radio",
          "SELECT average(ERP_kW) FROM radio",
          "SELECT AVG(`ERP_kW`) FROM `radio`",
          "SELECT AVG(r.ERP_kW) FROM radio r",
          "SELECT AVG(ERP_kW) AS AverageERP FROM radio",
          "SELECT AVG(ERP_kW) FROM radio WHERE ERP_kW IS NOT NULL",
          "SELECT AVG(radio.ERP_kW) FROM radio",
          "SELECT AVG(ERP_kW) FROM radio GROUP BY ERP_kW",
          "SELECT AVG(ERP_kW) FROM radio ORDER BY ERP_kW",
          "SELECT AVG(ERP_kW) FROM radio HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(ID) AS ChannelCount FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(ID) FROM city_channel GROUP BY Affiliation",
          "SELECT c.Affiliation, COUNT(c.ID) FROM city_channel AS c GROUP BY c.Affiliation",
          "SELECT Affiliation, COUNT(*) AS NumberOfChannels FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation ORDER BY Affiliation",
          "SELECT Affiliation, COUNT(*) AS TotalChannels FROM city_channel GROUP BY Affiliation ORDER BY TotalChannels DESC",
          "SELECT Affiliation, COUNT(ID) FROM city_channel GROUP BY Affiliation ORDER BY COUNT(ID) DESC",
          "SELECT Affiliation, COUNT(*) AS CountOfChannels FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 0",
          "SELECT Affiliation, COUNT(*) FROM city_channel WHERE Affiliation IS NOT NULL GROUP BY Affiliation"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1",
          "SELECT c.Affiliation FROM city_channel c GROUP BY c.Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM city_channel GROUP BY Affiliation) tmp)",
          "SELECT Affiliation, COUNT(*) AS Frequency FROM city_channel GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Affiliation, COUNT(Affiliation) AS Total FROM city_channel GROUP BY Affiliation ORDER BY Total DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3",
          "SELECT c.Affiliation FROM city_channel AS c GROUP BY c.Affiliation HAVING COUNT(c.ID) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3",
          "SELECT `Affiliation` FROM `city_channel` GROUP BY `Affiliation` HAVING COUNT(`ID`) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) > 3",
          "SELECT c.Affiliation FROM city_channel c GROUP BY c.Affiliation HAVING COUNT(c.Affiliation) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(DISTINCT ID) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(1) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC",
          "SELECT `City`, `Station_name` FROM `city_channel` ORDER BY `Station_name` ASC",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name",
          "SELECT city_channel.City, city_channel.Station_name FROM city_channel ORDER BY city_channel.Station_name ASC",
          "SELECT c.City, c.Station_name FROM city_channel AS c ORDER BY c.Station_name ASC",
          "SELECT City AS CityName, Station_name AS StationName FROM city_channel ORDER BY StationName ASC",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASCENDING",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC, City ASC",
          "SELECT * FROM city_channel ORDER BY Station_name ASC",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC, ID ASC"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT R.Transmitter, CC.City FROM radio R JOIN city_channel_radio CCR ON R.Radio_ID = CCR.Radio_ID JOIN city_channel CC ON CCR.City_channel_ID = CC.ID",
          "SELECT radio.Transmitter, city_channel.City FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT r.Transmitter, cc.City FROM radio r, city_channel cc, city_channel_radio ccr WHERE r.Radio_ID = ccr.Radio_ID AND cc.ID = ccr.City_channel_ID",
          "SELECT Transmitter, City FROM radio, city_channel, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID AND city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT a.Transmitter, b.City FROM radio AS a JOIN city_channel_radio AS c ON a.Radio_ID = c.Radio_ID JOIN city_channel AS b ON c.City_channel_ID = b.ID",
          "SELECT Transmitter, City FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT r.Transmitter AS Transmitter, cc.City AS City FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID",
          "SELECT radio.Transmitter, city_channel.City FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT Transmitter, City FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID",
          "SELECT r.Transmitter, cc.City FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON cc.ID = ccr.City_channel_ID"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT R.Transmitter, CC.Station_name FROM radio R JOIN city_channel_radio CCR ON R.Radio_ID = CCR.Radio_ID JOIN city_channel CC ON CCR.City_channel_ID = CC.ID ORDER BY R.ERP_kW DESC",
          "SELECT radio.Transmitter, city_channel.Station_name FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r, city_channel cc, city_channel_radio ccr WHERE r.Radio_ID = ccr.Radio_ID AND cc.ID = ccr.City_channel_ID ORDER BY r.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio, city_channel, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID AND city_channel_radio.City_channel_ID = city_channel.ID ORDER BY ERP_kW DESC",
          "SELECT a.Transmitter, b.Station_name FROM radio AS a JOIN city_channel_radio AS c ON a.Radio_ID = c.Radio_ID JOIN city_channel AS b ON c.City_channel_ID = b.ID ORDER BY a.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT radio.Transmitter AS Transmitter, city_channel.Station_name AS Station_name FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio r INNER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID INNER JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY ERP_kW DESC"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT r.Transmitter, COUNT(DISTINCT ccr.City_channel_ID) FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(DISTINCT City_channel_ID) AS Channel_Count FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(ccr.City_channel_ID) FROM radio r INNER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(*) FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(DISTINCT ccr.City_channel_ID) AS Num_Channels FROM radio r, city_channel_radio ccr WHERE r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(DISTINCT City_channel_ID) FROM radio, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(*) AS Channel_Count FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(DISTINCT City_channel_ID) FROM radio LEFT JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(ccr.City_channel_ID) FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(*) FROM radio LEFT OUTER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
          "SELECT DISTINCT r.Transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.Radio_ID IS NULL",
          "SELECT DISTINCT Transmitter FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE city_channel_radio.Radio_ID = radio.Radio_ID)",
          "SELECT DISTINCT r.Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
          "SELECT DISTINCT Transmitter FROM radio EXCEPT SELECT Transmitter FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID",
          "SELECT DISTINCT r.Transmitter FROM radio r WHERE NOT EXISTS (SELECT * FROM city_channel_radio ccr WHERE ccr.Radio_ID = r.Radio_ID)",
          "SELECT DISTINCT Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT ccr.Radio_ID FROM city_channel_radio ccr)",
          "SELECT DISTINCT r.Transmitter FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.Radio_ID IS NULL",
          "SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT DISTINCT Radio_ID FROM city_channel_radio)",
          "SELECT DISTINCT r.Transmitter FROM radio r WHERE NOT EXISTS (SELECT Radio_ID FROM city_channel_radio ccr WHERE ccr.Radio_ID = r.Radio_ID)"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1",
          "SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Vehicle_ID ASC LIMIT 1",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1",
          "SELECT Model FROM (SELECT Model, Top_Speed FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC) AS subquery LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(Model) FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1",
          "SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Vehicle_ID ASC LIMIT 1",
          "SELECT TOP 1 Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM (SELECT Model, Top_Speed FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC) AS subquery LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC ROWS 1",
          "SELECT FIRST(Model) FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 FETCH FIRST ROW ONLY",
          "SELECT Model FROM vehicle AS v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT d.Name FROM driver d WHERE d.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship LIKE 'United States'",
          "SELECT driver.Name FROM driver WHERE driver.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT d.Name FROM driver d WHERE d.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship LIKE 'United States'",
          "SELECT driver.Name FROM driver WHERE driver.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT `Name` FROM `driver` WHERE `Citizenship` = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID ORDER BY Vehicle_Count DESC LIMIT 1",
          "SELECT d.Driver_ID, COUNT(v.Vehicle_ID) AS Num_Vehicles FROM vehicle_driver AS v JOIN driver AS d ON v.Driver_ID = d.Driver_ID GROUP BY d.Driver_ID ORDER BY Num_Vehicles DESC LIMIT 1",
          "SELECT TOP 1 Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(*) DESC",
          "SELECT Driver_ID, COUNT(*) AS Total_Vehicles FROM vehicle_driver GROUP BY Driver_ID ORDER BY Total_Vehicles DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Driver_ID, MAX(Count) FROM (SELECT Driver_ID, COUNT(Vehicle_ID) AS Count FROM vehicle_driver GROUP BY Driver_ID) AS SubQuery",
          "SELECT v.Driver_ID, COUNT(*) AS VehicleCount FROM vehicle_driver v GROUP BY v.Driver_ID ORDER BY VehicleCount DESC LIMIT 1",
          "SELECT Driver_ID, COUNT(Vehicle_ID) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Vehicle_ID) AS Count FROM vehicle_driver GROUP BY Driver_ID) AS Counts)",
          "SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS VehiclesDriven FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY VehiclesDriven DESC LIMIT 1",
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS VehicleCount FROM vehicle_driver GROUP BY Driver_ID ORDER BY VehicleCount DESC LIMIT 1",
          "SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID ORDER BY Vehicle_Count DESC LIMIT 1",
          "SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS Num_Vehicles FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY Num_Vehicles DESC LIMIT 1",
          "SELECT vd.Driver_ID, COUNT(*) AS Total_Vehicles FROM vehicle_driver AS vd GROUP BY vd.Driver_ID ORDER BY Total_Vehicles DESC LIMIT 1",
          "SELECT TOP 1 vd.Driver_ID, COUNT(vd.Vehicle_ID) AS Vehicle_Count FROM vehicle_driver vd GROUP BY vd.Driver_ID ORDER BY Vehicle_Count DESC",
          "SELECT vd.Driver_ID, COUNT(vd.Vehicle_ID) FROM vehicle_driver vd GROUP BY vd.Driver_ID ORDER BY COUNT(vd.Vehicle_ID) DESC LIMIT 1",
          "SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM vehicle_driver GROUP BY Driver_ID) tmp)",
          "SELECT vd.Driver_ID, COUNT(vd.Vehicle_ID) AS Vehicle_Count FROM vehicle_driver vd GROUP BY vd.Driver_ID HAVING Vehicle_Count = (SELECT MAX(Vehicle_Count) FROM (SELECT COUNT(Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID) AS subquery) LIMIT 1",
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID ORDER BY Vehicle_Count DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT vd.Driver_ID, COUNT(*) AS Total_Vehicles FROM vehicle_driver vd GROUP BY vd.Driver_ID ORDER BY Total_Vehicles DESC FETCH FIRST ROW ONLY",
          "SELECT Driver_ID, COUNT(Vehicle_ID) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(vehicle.Power), AVG(vehicle.Power) FROM vehicle WHERE vehicle.Builder = 'Zhuzhou'",
          "SELECT maximum(Power), average(Power) FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) AS MaxPower, AVG(Power) AS AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(v.Power), AVG(v.Power) FROM vehicle v WHERE v.Builder = 'Zhuzhou'",
          "SELECT MAX(Power) maximum_power, AVG(Power) average_power FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder LIKE 'Zhuzhou'",
          "SELECT MAX(Power) MaxPower, AVG(Power) AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) as MaximumPower, AVG(Power) as AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(vehicle.Power), AVG(vehicle.Power) FROM vehicle WHERE vehicle.Builder = 'Zhuzhou'",
          "SELECT MAX(v.Power) AS MaxPower, AVG(v.Power) AS AvgPower FROM vehicle v WHERE v.Builder = 'Zhuzhou'",
          "SELECT MAX(Power) AS MaximumPower, AVG(Power) AS AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder LIKE 'Zhuzhou'",
          "SELECT MAX(Power) Maximum, AVG(Power) Average FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) MaxPower, AVG(Power) AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) as Max_Power, AVG(Power) as Avg_Power FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) Max_Power, AVG(Power) Avg_Power FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) \"Maximum Power\", AVG(Power) \"Average Power\" FROM vehicle WHERE Builder = 'Zhuzhou'"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT v.Vehicle_ID FROM vehicle_driver v GROUP BY v.Vehicle_ID ORDER BY COUNT(v.Vehicle_ID) ASC LIMIT 1",
          "SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Vehicle_ID) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID)",
          "SELECT TOP 1 Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*)",
          "SELECT Vehicle_ID FROM (SELECT Vehicle_ID, COUNT(*) as times_used FROM vehicle_driver GROUP BY Vehicle_ID) AS usage ORDER BY times_used ASC LIMIT 1",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT v.Vehicle_ID FROM vehicle_driver AS v GROUP BY v.Vehicle_ID ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT MIN(Vehicle_ID) KEEP (DENSE_RANK FIRST ORDER BY COUNT(*) ASC) FROM vehicle_driver GROUP BY Vehicle_ID",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT v.Vehicle_ID FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Vehicle_ID) ASC LIMIT 1",
          "SELECT TOP 1 Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC",
          "SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID ORDER BY COUNT(vd.Vehicle_ID) ASC LIMIT 1",
          "SELECT Vehicle_ID FROM (SELECT Vehicle_ID, COUNT(*) as TimesDriven FROM vehicle_driver GROUP BY Vehicle_ID) AS SubQuery ORDER BY TimesDriven ASC LIMIT 1",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID)",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC LIMIT 1",
          "SELECT v.Vehicle_ID FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(vd.Driver_ID) = (SELECT MIN(COUNT(Driver_ID)) FROM vehicle_driver GROUP BY Vehicle_ID)",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1",
          "SELECT v.Vehicle_ID FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Driver_ID) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996",
          "SELECT v.Top_Speed, v.Power FROM vehicle v WHERE v.Build_Year = 1996",
          "SELECT `Top_Speed`, `Power` FROM `vehicle` WHERE `Build_Year` = 1996",
          "SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT TOP_SPEED, POWER FROM VEHICLE WHERE BUILD_YEAR = 1996",
          "SELECT top_speed, power FROM vehicle WHERE build_year = '1996'",
          "SELECT TOP_SPEED, POWER FROM VEHICLE WHERE BUILD_YEAR = '1996'",
          "SELECT Top_Speed AS Speed, Power AS HP FROM vehicle WHERE Build_Year = 1996",
          "SELECT vehicle.Top_Speed AS 'Top Speed', vehicle.Power AS 'Power' FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT v.Top_Speed, v.Power FROM vehicle AS v WHERE v.Build_Year = 1996"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996",
          "SELECT v.Top_Speed, v.Power FROM vehicle v WHERE v.Build_Year = 1996",
          "SELECT `Top_Speed`, `Power` FROM `vehicle` WHERE `Build_Year` = 1996",
          "SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT TOP_SPEED, POWER FROM VEHICLE WHERE BUILD_YEAR = 1996",
          "SELECT top_speed, power FROM vehicle WHERE build_year = 1996",
          "SELECT Top_Speed AS Speed, Power AS HP FROM vehicle WHERE Build_Year = 1996",
          "SELECT TOP 1 Top_Speed, Power FROM vehicle WHERE Build_Year = 1996",
          "SELECT TOP_SPEED, POWER FROM VEHICLE WHERE BUILD_YEAR = '1996'",
          "SELECT v.Top_Speed AS Maximum_Speed, v.Power AS Horsepower FROM vehicle AS v WHERE v.Build_Year = 1996"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle",
          "SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v",
          "SELECT `Build_Year`, `Model`, `Builder` FROM `vehicle`",
          "SELECT Build_Year AS Year_Built, Model AS Model_Name, Builder AS Manufacturer FROM vehicle",
          "SELECT [Build_Year], [Model], [Builder] FROM [vehicle]",
          "SELECT Build_Year, Model, Builder FROM vehicle ORDER BY Build_Year",
          "SELECT DISTINCT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle WHERE Build_Year IS NOT NULL",
          "SELECT * FROM vehicle WHERE Build_Year IS NOT NULL AND Model IS NOT NULL AND Builder IS NOT NULL"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle",
          "SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v",
          "SELECT `Build_Year`, `Model`, `Builder` FROM `vehicle`",
          "SELECT Build_Year AS Year_Built, Model AS Vehicle_Model, Builder AS Manufacturer FROM vehicle",
          "SELECT [Build_Year], [Model], [Builder] FROM [vehicle]",
          "SELECT vehicle.Build_Year AS 'Year of Manufacture', vehicle.Model AS 'Model Name', vehicle.Builder AS 'Manufacturer' FROM vehicle",
          "SELECT Build_Year, Model, Builder FROM vehicle ORDER BY Build_Year",
          "SELECT * FROM vehicle WHERE Builder IS NOT NULL",
          "SELECT DISTINCT Build_Year, Model, Builder FROM vehicle"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = 2012)",
          "SELECT COUNT(UNIQUE driver.Driver_ID) FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012)",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT DISTINCT COUNT(driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(UNIQUE vd.Driver_ID) FROM vehicle_driver AS vd INNER JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012)",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd, vehicle v WHERE vd.Vehicle_ID = v.Vehicle_ID AND v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT DISTINCT COUNT(Driver_ID) FROM vehicle_driver vd LEFT JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver vd RIGHT JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT driver.Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT count(DISTINCT d.Driver_ID) FROM driver d WHERE d.Racing_Series = 'NASCAR'",
          "SELECT count(*) FROM (SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Driver_ID) AS NASCARDrivers",
          "SELECT count(unique driver.Driver_ID) FROM driver WHERE driver.Racing_Series = 'NASCAR'",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series LIKE 'NASCAR'",
          "SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver AS d WHERE d.Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR') AS drivers",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT count(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT count(Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM (SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR') AS NASCARDrivers",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Racing_Series = 'NASCAR'",
          "SELECT COUNT(1) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE d.Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM driver d WHERE d.Racing_Series LIKE 'NASCAR'",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series LIKE 'NASCAR'",
          "SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Racing_Series"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT AVG(Top_Speed) FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) FROM vehicle",
          "SELECT average(Top_Speed) FROM vehicle",
          "SELECT AVG(v.Top_Speed) FROM vehicle v",
          "SELECT AVG(Top_Speed) AS AverageTopSpeed FROM vehicle",
          "SELECT AVG(Top_Speed) FROM vehicle GROUP BY Top_Speed",
          "SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed IS NOT NULL",
          "SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed > 0",
          "SELECT AVG(Top_Speed) FROM vehicle ORDER BY Top_Speed",
          "SELECT AVG(Top_Speed) FROM vehicle HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT AVG(Top_Speed) FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) FROM vehicle",
          "SELECT average(Top_Speed) FROM vehicle",
          "SELECT AVG(v.Top_Speed) FROM vehicle v",
          "SELECT AVG(Top_Speed) AS AverageSpeed FROM vehicle",
          "SELECT AVG(Top_Speed) FROM vehicle GROUP BY Top_Speed",
          "SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed IS NOT NULL",
          "SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed > 0",
          "SELECT AVG(Top_Speed) FROM vehicle ORDER BY Top_Speed",
          "SELECT AVG(Top_Speed) FROM vehicle HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT DISTINCT d.Name FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT DISTINCT driver.Name FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT DISTINCT Name FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Power > 5000",
          "SELECT DISTINCT d.Name FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))",
          "SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Power > 5000)",
          "SELECT DISTINCT d.Name FROM driver d WHERE d.Driver_ID IN (SELECT vd.Driver_ID FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000)",
          "SELECT DISTINCT Name FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT DISTINCT d.Name FROM driver AS d, vehicle_driver AS vd, vehicle AS v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT D.Name FROM driver AS D JOIN vehicle_driver AS VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle AS V ON VD.Vehicle_ID = V.Vehicle_ID WHERE V.Power > 5000",
          "SELECT driver.Name FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))",
          "SELECT d.Name FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT Name FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Power > 5000)",
          "SELECT DISTINCT driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT driver.Name FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Power > 5000",
          "SELECT Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT d.Name FROM driver AS d INNER JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE Power > 5000)"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150",
          "SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150",
          "SELECT `Model` FROM `vehicle` WHERE `Total_Production` > 100 OR `Top_Speed` > 150",
          "SELECT Model FROM vehicle WHERE (Total_Production > 100) OR (Top_Speed > 150)",
          "SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > '150'",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150;",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 ORDER BY Model",
          "SELECT DISTINCT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150",
          "SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;",
          "SELECT DISTINCT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150;",
          "SELECT v.Model FROM vehicle AS v WHERE v.Total_Production > 100 OR v.Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE (Total_Production > 100) OR (Top_Speed > 150)",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 UNION SELECT Model FROM vehicle WHERE Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 UNION ALL SELECT Model FROM vehicle WHERE Top_Speed > 150"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'",
          "SELECT `Model`, `Build_Year` FROM `vehicle` WHERE `Model` LIKE '%DJ%'",
          "SELECT Model AS CarModel, Build_Year AS YearBuilt FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' ORDER BY Build_Year",
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' AND Build_Year IS NOT NULL",
          "SELECT DISTINCT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model COLLATE UTF8_GENERAL_CI LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE INSTR(Model, 'DJ') > 0"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'",
          "SELECT `Model`, `Build_Year` FROM `vehicle` WHERE `Model` LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE \"%DJ%\"",
          "SELECT vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model ILIKE '%DJ%'",
          "SELECT Model AS CarModel, Build_Year AS YearBuilt FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT v.Model AS VehicleModel, v.Build_Year AS YearOfManufacture FROM vehicle AS v WHERE v.Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE UPPER(Model) LIKE UPPER('%DJ%')",
          "SELECT Model, Build_Year FROM vehicle WHERE Model COLLATE UTF8_GENERAL_CI LIKE '%DJ%'"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Driver_ID IS NULL",
          "SELECT Model FROM vehicle EXCEPT SELECT Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID",
          "SELECT vehicle.Model FROM vehicle WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID)",
          "SELECT Model FROM vehicle v WHERE NOT EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd)",
          "SELECT DISTINCT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT v.Model FROM vehicle v LEFT OUTER JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT DISTINCT Vehicle_ID FROM vehicle_driver)"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT Model FROM vehicle WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID)",
          "SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Driver_ID IS NULL",
          "SELECT Model FROM vehicle EXCEPT SELECT Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID",
          "SELECT Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT vehicle.Model FROM vehicle LEFT OUTER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL",
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT DISTINCT Vehicle_ID FROM vehicle_driver)",
          "SELECT v.Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver vd)",
          "SELECT DISTINCT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(DISTINCT vehicle_driver.Driver_ID) = 2 OR vehicle.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) OR Builder = 'Ziyang'",
          "SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd WHERE v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd WHERE v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE (SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) = 2 OR v.Builder = 'Ziyang'"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(DISTINCT vehicle_driver.Driver_ID) = 2 OR vehicle.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Builder = 'Ziyang' UNION SELECT v.Vehicle_ID, v.Model FROM vehicle v INNER JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT OUTER JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang' UNION SELECT Vehicle_ID, Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd WHERE v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Builder = 'Ziyang' OR (SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) = 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Builder = 'Ziyang' OR v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Builder = 'Ziyang' GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2) OR vehicle_driver.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE vd.Vehicle_ID = v.Vehicle_ID AND d.Name = 'Jeff Gordon') OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd, driver d WHERE v.Vehicle_ID = vd.Vehicle_ID AND vd.Driver_ID = d.Driver_ID AND (d.Name = 'Jeff Gordon' OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2))",
          "SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID LEFT JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' OR (SELECT COUNT(*) FROM vehicle_driver vd2 WHERE vd2.Vehicle_ID = v.Vehicle_ID) > 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' UNION SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) > 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) > 2) OR EXISTS (SELECT * FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE vd.Vehicle_ID = v.Vehicle_ID AND d.Name = 'Jeff Gordon')",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(vd.Driver_ID) > 2 OR MAX(CASE WHEN (SELECT d.Name FROM driver d WHERE d.Driver_ID = vd.Driver_ID) = 'Jeff Gordon' THEN 1 ELSE 0 END) = 1",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd WHERE vd.Driver_ID IN (SELECT d.Driver_ID FROM driver d WHERE d.Name = 'Jeff Gordon')) OR v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) > 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE (SELECT COUNT(Driver_ID) FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) > 2 OR EXISTS (SELECT 1 FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE vd.Vehicle_ID = v.Vehicle_ID AND d.Name = 'Jeff Gordon')"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2) OR vehicle_driver.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID AND vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)",
          "SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd, driver d WHERE v.Vehicle_ID = vd.Vehicle_ID AND vd.Driver_ID = d.Driver_ID AND (d.Name = 'Jeff Gordon' OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2))",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' UNION SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(vd.Driver_ID) > 2 OR MAX(vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) = 1",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v INNER JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(DISTINCT vd.Driver_ID) > 2 OR SUM(CASE WHEN vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon') THEN 1 ELSE 0 END) > 0",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) > 2 OR vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'))",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd WHERE v.Vehicle_ID = vd.Vehicle_ID AND (vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon') OR v.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2)) GROUP BY v.Vehicle_ID, v.Model",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) > 2 OR vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'))"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed IN (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(*) FROM vehicle v WHERE v.Top_Speed = (SELECT max(v2.Top_Speed) FROM vehicle v2)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle GROUP BY Top_Speed)",
          "SELECT count(*) FROM vehicle GROUP BY Top_Speed HAVING Top_Speed = max(Top_Speed)",
          "SELECT count(Vehicle_ID) FROM vehicle v WHERE v.Top_Speed = (SELECT max(Top_Speed) FROM vehicle v2)",
          "SELECT count(*) FROM vehicle v1 WHERE v1.Top_Speed = (SELECT max(v2.Top_Speed) FROM vehicle v2 WHERE v1.Vehicle_ID = v2.Vehicle_ID)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT Top_Speed FROM vehicle ORDER BY Top_Speed DESC LIMIT 1)",
          "SELECT count(*) FROM vehicle v WHERE v.Top_Speed = (SELECT max(Top_Speed) FROM vehicle v2 WHERE v2.Vehicle_ID = v.Vehicle_ID)"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(*) FROM vehicle v WHERE v.Top_Speed = (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed IN (SELECT max(Top_Speed) FROM vehicle)",
          "SELECT count(Vehicle_ID) FROM vehicle v WHERE v.Top_Speed = (SELECT max(v2.Top_Speed) FROM vehicle v2)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(v.Top_Speed) FROM vehicle v)",
          "SELECT count(*) FROM vehicle v1 WHERE v1.Top_Speed = (SELECT max(v2.Top_Speed) FROM vehicle v2)",
          "SELECT count(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle GROUP BY Top_Speed)",
          "SELECT count(*) FROM vehicle v WHERE v.Top_Speed = (SELECT max(Top_Speed) FROM vehicle v2)",
          "SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle v GROUP BY v.Top_Speed)"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver ORDER BY Name",
          "SELECT Name FROM driver ORDER BY Name ASC",
          "SELECT driver.Name FROM driver ORDER BY driver.Name ASC",
          "SELECT d.Name FROM driver d ORDER BY d.Name ASC",
          "SELECT `Name` FROM `driver` ORDER BY `Name` ASC",
          "SELECT Name FROM driver ORDER BY Name ASCENDING",
          "SELECT Name AS DriverName FROM driver ORDER BY DriverName",
          "SELECT Name FROM driver ORDER BY 1",
          "SELECT driver.Name FROM driver ORDER BY driver.Name",
          "SELECT Name FROM driver ORDER BY UPPER(Name)"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver ORDER BY Name ASC",
          "SELECT Name FROM driver ORDER BY Name",
          "SELECT d.Name FROM driver d ORDER BY d.Name ASC",
          "SELECT d.Name FROM driver AS d ORDER BY d.Name ASC",
          "SELECT Name FROM driver ORDER BY Name ASCENDING",
          "SELECT driver.Name FROM driver ORDER BY driver.Name ASC",
          "SELECT Name FROM driver ORDER BY Name COLLATE NOCASE ASC",
          "SELECT `Name` FROM `driver` ORDER BY `Name` ASC",
          "SELECT Name FROM driver ORDER BY UPPER(Name)",
          "SELECT Name FROM driver ORDER BY LOWER(Name) ASC"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT d.Racing_Series, COUNT(DISTINCT d.Driver_ID) FROM driver d GROUP BY d.Racing_Series",
          "SELECT Racing_Series, COUNT(DISTINCT Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series",
          "SELECT d.Racing_Series, COUNT(DISTINCT d.Driver_ID) AS DriversCount FROM driver AS d GROUP BY d.Racing_Series",
          "SELECT Racing_Series, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Racing_Series",
          "SELECT d.Racing_Series, COUNT(DISTINCT Driver_ID) FROM driver d GROUP BY d.Racing_Series",
          "SELECT Racing_Series, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Racing_Series ORDER BY Racing_Series",
          "SELECT Racing_Series AS Series, COUNT(DISTINCT Driver_ID) AS TotalDrivers FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Racing_Series HAVING COUNT(DISTINCT Driver_ID) > 0",
          "SELECT Racing_Series, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Racing_Series"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT D.Driver_ID), D.Racing_Series FROM driver D GROUP BY D.Racing_Series",
          "SELECT count(DISTINCT driver.Driver_ID), driver.Racing_Series FROM driver GROUP BY driver.Racing_Series",
          "SELECT Racing_Series, count(DISTINCT Driver_ID) FROM driver GROUP BY Racing_Series",
          "SELECT D.Racing_Series, count(DISTINCT D.Driver_ID) AS NumberOfDrivers FROM driver AS D GROUP BY D.Racing_Series",
          "SELECT count(DISTINCT D.Driver_ID) AS DriverCount, D.Racing_Series FROM driver D GROUP BY D.Racing_Series",
          "SELECT count(DISTINCT D.Driver_ID) AS TotalDrivers, D.Racing_Series FROM driver AS D GROUP BY D.Racing_Series",
          "SELECT D.Racing_Series, count(DISTINCT D.Driver_ID) FROM driver D GROUP BY D.Racing_Series",
          "SELECT count(DISTINCT Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, count(DISTINCT Driver_ID) AS DriversCount FROM driver GROUP BY Racing_Series",
          "SELECT count(DISTINCT D.Driver_ID) AS DriverCount, D.Racing_Series AS Series FROM driver D GROUP BY D.Racing_Series"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT D.Name, D.Citizenship FROM driver AS D JOIN vehicle_driver AS VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle AS V ON VD.Vehicle_ID = V.Vehicle_ID WHERE V.Model = 'DJ1'",
          "SELECT driver.Name, driver.Citizenship FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT driver.Name, driver.Citizenship FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver JOIN vehicle_driver USING (Driver_ID) JOIN vehicle USING (Vehicle_ID) WHERE Model = 'DJ1'"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT d.Name, d.Citizenship FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID = (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1'))",
          "SELECT driver.Name, driver.Citizenship FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1')",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle v, vehicle_driver vd WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND v.Vehicle_ID = vd.Vehicle_ID AND v.Model = 'DJ1'"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT count(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT COUNT(Driver_ID) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT COUNT(*) FROM driver WHERE NOT EXISTS (SELECT Driver_ID FROM vehicle_driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID)",
          "SELECT COUNT(*) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd)",
          "SELECT COUNT(*) FROM driver AS d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver AS vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(*) FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT vd.Driver_ID FROM vehicle_driver vd)"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT count(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(d.Driver_ID) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver WHERE NOT EXISTS (SELECT Driver_ID FROM vehicle_driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID)",
          "SELECT COUNT(*) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd)",
          "SELECT COUNT(*) FROM driver AS d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver AS vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Exams",
          "SELECT COUNT(Exam_ID) FROM Exams",
          "SELECT COUNT(*) AS TotalExams FROM Exams",
          "SELECT COUNT(1) FROM Exams",
          "SELECT COUNT(Exam_ID) AS ExamCount FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) FROM Exams",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID IS NOT NULL",
          "SELECT COUNT(Exam_ID) FROM Exams WHERE Exam_ID > 0",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID > 0",
          "SELECT COUNT(DISTINCT Exam_ID) AS TotalUniqueExams FROM Exams"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Exams",
          "SELECT COUNT(Exam_ID) FROM Exams",
          "SELECT COUNT(*) AS NumberOfExams FROM Exams",
          "SELECT COUNT(1) FROM Exams",
          "SELECT COUNT(Exam_ID) AS TotalExams FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) AS UniqueExams FROM Exams",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID IS NOT NULL",
          "SELECT COUNT(Exam_ID) FROM Exams WHERE Exam_ID > 0",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID IS NOT NULL AND Exam_ID > 0"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC",
          "SELECT DISTINCT Exams.Subject_Code FROM Exams ORDER BY Subject_Code ASC",
          "SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
          "SELECT DISTINCT Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code ASC",
          "SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC",
          "SELECT DISTINCT E.Subject_Code FROM Exams E ORDER BY E.Subject_Code ASC",
          "SELECT DISTINCT exams.Subject_Code FROM exams ORDER BY exams.Subject_Code",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code COLLATE NOCASE",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY UPPER(Subject_Code)",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY LOWER(Subject_Code)",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC, Exam_ID ASC"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code <> 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE NOT Subject_Code = 'Database'",
          "SELECT E.Exam_Name, E.Exam_Date FROM Exams E WHERE E.Subject_Code != 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT IN ('Database')",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT LIKE 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code <> 'Database' AND Subject_Code IS NOT NULL",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database' AND Subject_Code IS NOT NULL",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT IN (SELECT Subject_Code FROM Exams WHERE Subject_Code = 'Database')",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT LIKE 'Database' AND Subject_Code IS NOT NULL",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code <> 'Database' ORDER BY Exam_Date"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE NOT Subject_Code = 'Database'",
          "SELECT E.Exam_Date, E.Exam_Name FROM Exams E WHERE E.Subject_Code != 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT IN ('Database')",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT LIKE 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code IS NOT 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database' AND Subject_Code IS NOT NULL",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database' AND Subject_Code IS NOT NULL",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT IN (SELECT Subject_Code FROM Exams WHERE Subject_Code = 'Database')",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> ALL (SELECT Subject_Code FROM Exams WHERE Subject_Code = 'Database')"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;",
          "SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code LIKE '%data%' ORDER BY e.Exam_Date DESC",
          "SELECT Exams.Exam_Date FROM Exams WHERE Exams.Subject_Code LIKE '%data%' ORDER BY Exams.Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' DESCENDING ORDER BY Exam_Date",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESCENDING",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC LIMIT ALL",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESCENDING",
          "SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code LIKE '%data%' ORDER BY e.Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code CONTAINS 'data' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE INSTR(Subject_Code, 'data') > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESCENDING",
          "SELECT Exam_Date FROM Exams WHERE CHARINDEX('data', Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE POSITION('data' IN Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT COUNT(*), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT COUNT(Question_ID), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) AS Total FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT COUNT(*), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code ORDER BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code ORDER BY COUNT(*) DESC",
          "SELECT Type_of_Question_Code, COUNT(*) AS Count_of_Questions FROM Questions GROUP BY Type_of_Question_Code"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS Total FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT q.Type_of_Question_Code, COUNT(*) FROM Questions q GROUP BY q.Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code ORDER BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) AS CountOfQuestions FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) > 0",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code WITH ROLLUP"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' ORDER BY Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE UPPER(Comments) = 'NORMAL'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE LOWER(Comments) = 'normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text IS NOT NULL",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text <> ''",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text != ''"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers AS sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE UPPER(Comments) = 'NORMAL'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text IS NOT NULL",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' ORDER BY Student_Answer_Text",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal' AND sa.Student_Answer_Text IS NOT NULL",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text <> ''"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
          "SELECT COUNT(UNIQUE Comments) FROM Student_Answers",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers) AS unique_comments",
          "SELECT COUNT(DISTINCT Comments) AS TotalUniqueComments FROM Student_Answers",
          "SELECT DISTINCT COUNT(Comments) FROM Student_Answers",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments IS NOT NULL",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments <> ''",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers WHERE Comments IS NOT NULL) AS distinct_comments",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers WHERE Comments <> '') AS non_empty_comments",
          "SELECT DISTINCT COUNT(Comments) FROM Student_Answers WHERE Comments IS NOT NULL"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
          "SELECT COUNT(UNIQUE Comments) FROM Student_Answers",
          "SELECT COUNT(DISTINCT Student_Answers.Comments) FROM Student_Answers",
          "SELECT COUNT(DISTINCT sa.Comments) FROM Student_Answers sa",
          "SELECT COUNT(DISTINCT Comments) AS DistinctCommentsCount FROM Student_Answers",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments IS NOT NULL",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments <> ''",
          "SELECT DISTINCT COUNT(Comments) FROM Student_Answers",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers) AS UniqueComments",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers GROUP BY Comments HAVING Comments IS NOT NULL"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC",
          "SELECT SA.Student_Answer_Text, COUNT(*) AS Total FROM Student_Answers AS SA GROUP BY SA.Student_Answer_Text ORDER BY Total DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_ID) AS NumAnswers FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY NumAnswers DESC",
          "SELECT Student_Answer_Text, COUNT(1) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(1) DESC",
          "SELECT a.Student_Answer_Text, COUNT(a.Student_Answer_Text) AS Frequency FROM Student_Answers a GROUP BY a.Student_Answer_Text ORDER BY Frequency DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS CountOfAnswers FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY CountOfAnswers DESC",
          "SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_ID) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_ID) DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS TotalCount FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY TotalCount DESC"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC",
          "SELECT SA.Student_Answer_Text FROM Student_Answers AS SA GROUP BY SA.Student_Answer_Text ORDER BY COUNT(SA.Student_Answer_Text) DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC",
          "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC",
          "SELECT DISTINCT Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS Total FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Total DESC",
          "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC",
          "SELECT SA.Student_Answer_Text, COUNT(*) FROM Student_Answers AS SA GROUP BY SA.Student_Answer_Text ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID",
          "SELECT First_Name, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name, date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id",
          "SELECT Students.First_Name AS StudentFirstName, Student_Answers.Date_of_Answer AS AnswerDate FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name AS FirstName, date_of_answer AS AnswerDate FROM students INNER JOIN student_answers ON students.student_id = student_answers.student_id",
          "SELECT `First_Name`, `Date_of_Answer` FROM `Students` JOIN `Student_Answers` ON `Students`.`Student_ID` = `Student_Answers`.`Student_ID`",
          "SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name, date_of_answer FROM students, student_answers WHERE students.student_id = student_answers.student_id",
          "SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers USING(Student_ID)"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID",
          "SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name, date_of_answer FROM students INNER JOIN student_answers ON students.student_id = student_answers.student_id",
          "SELECT st.First_Name, sa.Date_of_Answer FROM Students st INNER JOIN Student_Answers sa ON st.Student_ID = sa.Student_ID",
          "SELECT `First_Name`, `Date_of_Answer` FROM `Students` JOIN `Student_Answers` ON `Students`.`Student_ID` = `Student_Answers`.`Student_ID`",
          "SELECT Students.First_Name AS StudentFirstName, Student_Answers.Date_of_Answer AS AnswerDate FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name AS StudentFirstName, date_of_answer AS AnswerDate FROM students JOIN student_answers ON students.student_id = student_answers.student_id",
          "SELECT S.First_Name AS FirstName, A.Date_of_Answer AS AnswerDate FROM Students S, Student_Answers A WHERE S.Student_ID = A.Student_ID",
          "SELECT first_name, date_of_answer FROM students s JOIN student_answers a ON s.student_id = a.student_id"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.Email_Adress, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID ORDER BY A.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT students.Email_Adress, student_answers.Date_of_Answer FROM students INNER JOIN student_answers ON students.Student_ID = student_answers.Student_ID ORDER BY student_answers.Date_of_Answer DESC",
          "SELECT Email_Adress AS Student_Email, Date_of_Answer AS Answer_Date FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers USING (Student_ID) ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT S.Email_Adress, A.Date_of_Answer FROM Students AS S, Student_Answers AS A WHERE S.Student_ID = A.Student_ID ORDER BY A.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers USING(Student_ID) ORDER BY Date_of_Answer DESC",
          "SELECT S.Email_Adress AS Email, A.Date_of_Answer AS AnswerDate FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID ORDER BY A.Date_of_Answer DESC",
          "SELECT Email_Adress AS Email, Date_of_Answer AS Answer_Date FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers USING (Student_ID) ORDER BY Date_of_Answer DESC",
          "SELECT s.Email_Adress AS StudentEmail, sa.Date_of_Answer AS AnswerDate FROM Students s INNER JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s, Student_Answers sa WHERE s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT s.Email_Adress AS Email, sa.Date_of_Answer AS Date FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT TOP 1 Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment)",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student_Assessments GROUP BY Assessment)",
          "SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1",
          "SELECT Assessment FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery ORDER BY Count ASC LIMIT 1",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC FETCH FIRST 1 ROW ONLY",
          "SELECT MIN(Assessment) KEEP (DENSE_RANK FIRST ORDER BY COUNT(*)) FROM Student_Assessments GROUP BY Assessment",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT FIRST(Assessment) FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*)",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC, Assessment ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1",
          "SELECT TOP 1 Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student_Assessments GROUP BY Assessment)",
          "SELECT MIN(Assessment) AS LeastCommonAssessment FROM (SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC) AS SubQuery",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Assessment FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment ORDER BY Count ASC) WHERE ROWNUM = 1",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT FIRST(Assessment) FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*)"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT S.First_Name FROM Students S JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_Answer_ID) >= 2",
          "SELECT DISTINCT S.First_Name FROM Students S INNER JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2) AS Sub ON S.Student_ID = Sub.Student_ID",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY SA.Student_ID HAVING COUNT(*) >= 2)",
          "SELECT First_Name FROM Students S JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) AS Filtered ON S.Student_ID = Filtered.Student_ID",
          "SELECT S.First_Name FROM Students S, Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_Answer_ID) >= 2",
          "SELECT DISTINCT First_Name FROM (SELECT S.First_Name, COUNT(SA.Student_ID) AS NumAnswers FROM Students S LEFT JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING NumAnswers >= 2) AS Result",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(DISTINCT Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S WHERE (SELECT COUNT(*) FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID) >= 2"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name FROM Students S JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_Answer_ID) >= 2",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT S.First_Name FROM Students S, Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_Answer_ID) >= 2",
          "SELECT S.First_Name FROM Students S INNER JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(DISTINCT SA.Student_Answer_ID) >= 2",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY SA.Student_ID HAVING COUNT(SA.Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2) AS Sub ON S.Student_ID = Sub.Student_ID",
          "SELECT S.First_Name FROM Students S WHERE S.Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S INNER JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) AS Filtered ON S.Student_ID = Filtered.Student_ID"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery)",
          "SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) AS TempTable ORDER BY Count DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_Text) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS",
          "WITH Ranked_Answers AS (SELECT Valid_Answer_Text, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Valid_Answers GROUP BY Valid_Answer_Text) SELECT Valid_Answer_Text FROM Ranked_Answers WHERE Rank = 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1",
          "SELECT a.Valid_Answer_Text FROM Valid_Answers a JOIN (SELECT Question_ID, COUNT(*) AS cnt FROM Valid_Answers GROUP BY Question_ID ORDER BY cnt DESC LIMIT 1) b ON a.Question_ID = b.Question_ID GROUP BY a.Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery)",
          "SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC) AS DerivedTable LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_Text) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Count DESC LIMIT 1",
          "SELECT a.Valid_Answer_Text FROM Valid_Answers a JOIN (SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) b ON a.Valid_Answer_Text = b.Valid_Answer_Text ORDER BY b.Count DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1",
          "SELECT FIRST(Valid_Answer_Text) FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID IN (SELECT Valid_Answer_ID FROM Valid_Answers GROUP BY Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'",
          "SELECT Last_Name FROM Students WHERE NOT Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT IN ('M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'U'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'U')",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU <> 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT LIKE 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'U' OR Gender_MFU = 'F'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT BETWEEN 'M' AND 'M'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'",
          "SELECT Last_Name FROM Students WHERE NOT Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT IN ('M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'U'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'U')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' UNION SELECT Last_Name FROM Students WHERE Gender_MFU = 'U'",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU <> 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT LIKE 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IS NOT 'M'"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(1) FROM Students GROUP BY Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(*) FROM Students s GROUP BY s.Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(s.Student_ID) FROM Students s GROUP BY s.Gender_MFU",
          "SELECT Gender_MFU AS Gender, COUNT(*) AS NumberOfStudents FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) AS Total FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS CountOfStudents FROM Students GROUP BY Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(*) AS StudentCount FROM Students s GROUP BY s.Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU ORDER BY Gender_MFU"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(s.Student_ID) FROM Students s GROUP BY s.Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) AS number_of_students FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU AS gender, COUNT(*) AS count FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS Total FROM Students GROUP BY Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(*) FROM Students s GROUP BY s.Gender_MFU",
          "SELECT Gender_MFU, COUNT(1) FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU ORDER BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) AS StudentCount FROM Students GROUP BY Gender_MFU ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU = 'F' OR s.Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'M' OR Gender_MFU = 'F'",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M') ORDER BY Last_Name",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' UNION SELECT Last_Name FROM Students WHERE Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN (SELECT Gender_MFU FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M')"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU = 'F' OR s.Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'M' OR Gender_MFU = 'F'",
          "SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M') AND Gender_MFU IS NOT NULL",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F') AND Gender_MFU IS NOT NULL",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M') AND Gender_MFU <> 'U'"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students WHERE NOT EXISTS (SELECT 1 FROM Student_Answers WHERE Student_Answers.Student_ID = Students.Student_ID)",
          "SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL",
          "SELECT First_Name FROM Students EXCEPT SELECT First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT s.First_Name FROM Students s WHERE NOT EXISTS (SELECT NULL FROM Student_Answers sa WHERE sa.Student_ID = s.Student_ID)",
          "SELECT DISTINCT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students AS s WHERE NOT EXISTS (SELECT * FROM Student_Answers AS sa WHERE sa.Student_ID = s.Student_ID)",
          "SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa)",
          "SELECT DISTINCT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL",
          "SELECT First_Name FROM Students WHERE NOT EXISTS (SELECT 1 FROM Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID)",
          "SELECT First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT s.First_Name FROM Students s WHERE NOT EXISTS (SELECT NULL FROM Student_Answers sa WHERE sa.Student_ID = s.Student_ID)",
          "SELECT First_Name FROM Students EXCEPT SELECT First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT DISTINCT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
          "SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa)",
          "SELECT DISTINCT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent')",
          "SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal' OR sa.Comments = 'Absent'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' UNION SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' UNION ALL SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'",
          "SELECT sa.Student_Answer_Text FROM Student_Answers sa JOIN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Normal' UNION SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Absent') AS sub ON sa.Student_Answer_ID = sub.Student_Answer_ID",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN (SELECT Comments FROM Student_Answers WHERE Comments = 'Normal' OR Comments = 'Absent')",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments IN ('Normal', 'Absent')",
          "SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE EXISTS (SELECT 1 FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_ID = sa.Student_Answer_ID) OR EXISTS (SELECT 1 FROM Student_Answers WHERE Comments = 'Absent' AND Student_Answer_ID = sa.Student_Answer_ID)",
          "SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal' UNION SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'",
          "SELECT SA.Student_Answer_Text FROM Student_Answers AS SA JOIN Student_Answers AS SB ON SA.Student_Answer_Text = SB.Student_Answer_Text WHERE SA.Comments = 'Normal' AND SB.Comments = 'Absent'",
          "SELECT DISTINCT a.Student_Answer_Text FROM Student_Answers a, Student_Answers b WHERE a.Student_Answer_Text = b.Student_Answer_Text AND a.Comments = 'Normal' AND b.Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text HAVING COUNT(DISTINCT Comments) = 2",
          "WITH Normal_Answers AS (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'), Absent_Answers AS (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent') SELECT Normal_Answers.Student_Answer_Text FROM Normal_Answers JOIN Absent_Answers ON Normal_Answers.Student_Answer_Text = Absent_Answers.Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal') AND Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')",
          "SELECT SA.Student_Answer_Text FROM Student_Answers SA WHERE EXISTS (SELECT 1 FROM Student_Answers SB WHERE SA.Student_Answer_Text = SB.Student_Answer_Text AND SB.Comments = 'Absent') AND SA.Comments = 'Normal'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'",
          "SELECT DISTINCT SA.Student_Answer_Text FROM Student_Answers SA INNER JOIN Student_Answers SB ON SA.Student_Answer_Text = SB.Student_Answer_Text WHERE SA.Comments = 'Normal' AND SB.Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM (SELECT Student_Answer_Text, COUNT(DISTINCT Comments) AS NumComments FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text) AS Filtered WHERE NumComments > 1"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3",
          "SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2",
          "SELECT q.Type_of_Question_Code FROM Questions AS q GROUP BY q.Type_of_Question_Code HAVING COUNT(*) > 2",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3 ORDER BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3 ORDER BY Type_of_Question_Code",
          "SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3)",
          "SELECT DISTINCT q.Type_of_Question_Code FROM Questions q WHERE q.Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3)",
          "SELECT Type_of_Question_Code FROM (SELECT Type_of_Question_Code, COUNT(*) AS cnt FROM Questions GROUP BY Type_of_Question_Code) AS subquery WHERE cnt >= 3"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3",
          "SELECT q.Type_of_Question_Code FROM Questions AS q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) > 2",
          "SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(*) > 2",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code ORDER BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT DISTINCT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT Type_of_Question_Code, COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code HAVING Question_Count >= 3"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT * FROM Students",
          "SELECT Students.* FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students;",
          "SELECT s.* FROM Students s",
          "SELECT s.Student_ID, s.First_Name, s.Middle_Name, s.Last_Name, s.Gender_MFU, s.Student_Address, s.Email_Adress, s.Cell_Mobile_Phone, s.Home_Phone FROM Students s",
          "SELECT * FROM Students;",
          "SELECT ALL * FROM Students",
          "SELECT ALL Students.* FROM Students",
          "SELECT ALL Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT * FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students",
          "SELECT Students.* FROM Students",
          "SELECT S.* FROM Students S",
          "SELECT Student_ID AS ID, First_Name AS FirstName, Middle_Name AS MiddleName, Last_Name AS LastName, Gender_MFU AS Gender, Student_Address AS Address, Email_Adress AS Email, Cell_Mobile_Phone AS CellPhone, Home_Phone AS HomePhone FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students WHERE Student_ID IS NOT NULL",
          "SELECT * FROM Students WHERE 1=1",
          "SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students",
          "SELECT DISTINCT * FROM Students",
          "SELECT ALL Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses",
          "SELECT COUNT(*) AS total_addresses FROM Addresses",
          "SELECT COUNT(1) FROM Addresses",
          "SELECT COUNT(address_id) AS TotalCount FROM Addresses",
          "SELECT COUNT(*) FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT COUNT(DISTINCT address_id) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses WHERE address_id > 0",
          "SELECT COUNT(*) FROM Addresses WHERE address_details IS NOT NULL",
          "SELECT COUNT(*) FROM Addresses WHERE address_id >= 1"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses",
          "SELECT COUNT(*) AS total_addresses FROM Addresses",
          "SELECT COUNT(1) FROM Addresses",
          "SELECT COUNT(address_id) AS TotalCount FROM Addresses",
          "SELECT COUNT(*) FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT COUNT(DISTINCT address_id) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses WHERE address_id > 0",
          "SELECT COUNT(*) FROM Addresses WHERE address_details IS NOT NULL",
          "SELECT COUNT(*) FROM Addresses WHERE address_id >= 1"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT address_id, address_details FROM Addresses",
          "SELECT Addresses.address_id, Addresses.address_details FROM Addresses",
          "SELECT `address_id`, `address_details` FROM `Addresses`",
          "SELECT address_id AS AddressID, address_details AS AddressDetails FROM Addresses",
          "SELECT A.address_id, A.address_details FROM Addresses A",
          "SELECT address_id, address_details FROM Addresses ORDER BY address_id",
          "SELECT DISTINCT address_id, address_details FROM Addresses",
          "SELECT address_id, address_details FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT * FROM Addresses WHERE address_id IS NOT NULL AND address_details IS NOT NULL",
          "SELECT address_id, address_details FROM Addresses GROUP BY address_id, address_details"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT address_id, address_details FROM Addresses",
          "SELECT address_id AS ID, address_details AS Details FROM Addresses",
          "SELECT `address_id`, `address_details` FROM `Addresses`",
          "SELECT Addresses.address_id, Addresses.address_details FROM Addresses",
          "SELECT A.address_id, A.address_details FROM Addresses A",
          "SELECT address_id, address_details FROM Addresses ORDER BY address_id",
          "SELECT DISTINCT address_id, address_details FROM Addresses",
          "SELECT address_id, address_details FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT * FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT address_id, address_details FROM Addresses LIMIT 100"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Products",
          "SELECT COUNT(product_id) FROM Products",
          "SELECT COUNT(*) AS total_products FROM Products",
          "SELECT COUNT(1) FROM Products",
          "SELECT COUNT(DISTINCT product_id) FROM Products",
          "SELECT COUNT(product_id) AS TotalProductCount FROM Products",
          "SELECT COUNT(*) FROM Products WHERE product_id IS NOT NULL",
          "SELECT COUNT(DISTINCT product_id) AS TotalUniqueProducts FROM Products",
          "SELECT COUNT(*) FROM Products WHERE product_id > 0",
          "SELECT COUNT(*) FROM Products WHERE product_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products",
          "SELECT COUNT(product_id) FROM Products",
          "SELECT COUNT(ALL product_id) FROM Products",
          "SELECT COUNT(DISTINCT product_id) FROM Products",
          "SELECT COUNT(product_id) AS TotalProducts FROM Products",
          "SELECT COUNT(*) AS Total FROM Products",
          "SELECT COUNT(1) FROM Products",
          "SELECT COUNT(product_name) FROM Products",
          "SELECT COUNT(*) FROM `Products`",
          "SELECT COUNT(product_id) FROM `Products`"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code, product_name FROM Products",
          "SELECT Products.product_id, Products.product_type_code, Products.product_name FROM Products",
          "SELECT p.product_id, p.product_type_code, p.product_name FROM Products p",
          "SELECT `product_id`, `product_type_code`, `product_name` FROM `Products`",
          "SELECT product_id AS ProductID, product_type_code AS ProductTypeCode, product_name AS ProductName FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products ORDER BY product_id",
          "SELECT DISTINCT product_id, product_type_code, product_name FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products WHERE product_id IS NOT NULL",
          "SELECT * FROM Products WHERE product_id IS NOT NULL AND product_type_code IS NOT NULL AND product_name IS NOT NULL",
          "SELECT product_id, product_type_code, product_name FROM Products GROUP BY product_id, product_type_code, product_name"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code, product_name FROM Products",
          "SELECT product_id AS ID, product_type_code AS Type_Code, product_name AS Name FROM Products",
          "SELECT `product_id`, `product_type_code`, `product_name` FROM `Products`",
          "SELECT p.product_id, p.product_type_code, p.product_name FROM Products p",
          "SELECT Products.product_id, Products.product_type_code, Products.product_name FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products ORDER BY product_id",
          "SELECT product_id, product_type_code, product_name FROM Products WHERE product_id IS NOT NULL",
          "SELECT DISTINCT product_id, product_type_code, product_name FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products GROUP BY product_id, product_type_code, product_name",
          "SELECT product_id, product_type_code, product_name FROM Products LIMIT 100"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name LIKE 'Monitor'",
          "SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'",
          "SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' LIMIT 1",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' ORDER BY product_price DESC LIMIT 1",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' ORDER BY product_id ASC LIMIT 1",
          "SELECT TOP 1 product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name IN ('Monitor')"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'",
          "SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name LIKE 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' LIMIT 1",
          "SELECT p.product_price FROM Products AS p WHERE p.product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE LOWER(product_name) = 'monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' ORDER BY product_id DESC LIMIT 1",
          "SELECT product_price FROM Products WHERE product_name COLLATE NOCASE = 'monitor'"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT min(product_price), avg(product_price), max(product_price) FROM Products",
          "SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products",
          "SELECT minimum(product_price), average(product_price), maximum(product_price) FROM Products",
          "SELECT MINIMUM(product_price), AVERAGE(product_price), MAXIMUM(product_price) FROM Products",
          "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products",
          "SELECT MINIMUM(product_price) AS MinimumPrice, AVERAGE(product_price) AS AveragePrice, MAXIMUM(product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(product_price) AS MinimumPrice, AVG(product_price) AS AveragePrice, MAX(product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(product_price) AS 'Minimum Price', AVG(product_price) AS 'Average Price', MAX(product_price) AS 'Maximum Price' FROM Products",
          "SELECT MIN(product_price) AS 'Min Price', AVG(product_price) AS 'Avg Price', MAX(product_price) AS 'Max Price' FROM Products",
          "SELECT MIN(product_price) AS 'Lowest Price', AVG(product_price) AS 'Mean Price', MAX(product_price) AS 'Highest Price' FROM Products"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT min(product_price), avg(product_price), max(product_price) FROM Products",
          "SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products",
          "SELECT minimum(product_price), average(product_price), maximum(product_price) FROM Products",
          "SELECT MINIMUM(product_price), AVERAGE(product_price), MAXIMUM(product_price) FROM Products",
          "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products",
          "SELECT MINIMUM(product_price) AS MinimumPrice, AVERAGE(product_price) AS AveragePrice, MAXIMUM(product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(product_price) AS MinimumPrice, AVG(product_price) AS AveragePrice, MAX(product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(product_price) AS 'Minimum Price', AVG(product_price) AS 'Average Price', MAX(product_price) AS 'Maximum Price' FROM Products",
          "SELECT MIN(product_price) AS 'Min Price', AVG(product_price) AS 'Avg Price', MAX(product_price) AS 'Max Price' FROM Products",
          "SELECT MIN(product_price) AS Minimum, AVG(product_price) AS Average, MAX(product_price) AS Maximum FROM Products"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(product_price) AS AveragePrice FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code IN ('Clothes')",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price > 0",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price > 0 GROUP BY product_type_code",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(product_price) AS AveragePrice FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code IN ('Clothes')",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price > 0",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price >= 0",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL AND product_price > 0"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code LIKE 'hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' AND product_price IS NOT NULL",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' AND product_name IS NOT NULL",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' AND product_price > 0",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' AND product_id IS NOT NULL",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' AND product_name <> ''"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'Hardware'",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code LIKE 'Hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code",
          "SELECT COUNT(*) FROM Products p WHERE p.product_type_code = 'Hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware' AND product_id IS NOT NULL",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware' AND product_price IS NOT NULL",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_type_code LIKE 'Hardware'"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products GROUP BY product_name HAVING product_price > AVG(product_price)",
          "SELECT DISTINCT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT DISTINCT product_name FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products) GROUP BY product_name",
          "SELECT DISTINCT product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products p WHERE p.product_price > (SELECT AVG(p.product_price) FROM Products p)",
          "SELECT DISTINCT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM Products p2)",
          "SELECT DISTINCT product_name FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)",
          "SELECT product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products) GROUP BY p.product_name"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT DISTINCT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT DISTINCT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_type_code)",
          "SELECT DISTINCT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_type_code)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P GROUP BY P.product_type_code)",
          "SELECT DISTINCT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(P.product_price) FROM Products P GROUP BY P.product_type_code)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(P2.product_price) FROM Products P2 WHERE P2.product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(P2.product_price) FROM Products P2 WHERE P2.product_type_code = 'hardware')"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'Hardware')",
          "SELECT P.product_name FROM Products AS P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products AS P WHERE P.product_type_code = 'Hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(P2.product_price) FROM Products P2 WHERE P2.product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(P2.product_price) FROM Products P2 WHERE P2.product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT P.product_name FROM Products AS P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(P2.product_price) FROM Products AS P2 WHERE P2.product_type_code = 'Hardware')"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Clothes' ORDER BY P.product_price DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "SELECT FIRST(product_name) FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) AS rank FROM Products WHERE product_type_code = 'Clothes') WHERE rank = 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC, product_id ASC LIMIT 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Clothes' ORDER BY P.product_price DESC LIMIT 1",
          "SELECT TOP 1 product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 OFFSET 0",
          "SELECT MAX(product_price), product_name FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_name ORDER BY MAX(product_price) DESC LIMIT 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')",
          "SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) AS rank FROM Products WHERE product_type_code = 'Clothes') WHERE rank = 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC, product_id ASC LIMIT 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 FOR UPDATE"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
          "SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_id LIMIT 1",
          "SELECT p.product_id, p.product_name FROM Products AS p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC FETCH FIRST ROW ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1 OFFSET 0",
          "SELECT FIRST(product_id), FIRST(product_name) FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC ROWS 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
          "SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1",
          "SELECT p.product_id, p.product_name FROM Products AS p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code LIKE 'Hardware' ORDER BY product_price ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_id ASC LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_id ASC LIMIT 1",
          "SELECT FIRST(product_id), FIRST(product_name) FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products ORDER BY product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESCENDING",
          "SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC",
          "SELECT p.product_name FROM Products p ORDER BY p.product_price DESC",
          "SELECT `product_name` FROM `Products` ORDER BY `product_price` DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_id ASC",
          "SELECT product_name FROM Products ORDER BY product_price DESC LIMIT ALL",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name ASC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_id DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_type_code ASC"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products ORDER BY product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESCENDING",
          "SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC",
          "SELECT p.product_name FROM Products p ORDER BY p.product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_id ASC",
          "SELECT product_name FROM Products ORDER BY product_price DESC LIMIT ALL",
          "SELECT `product_name` FROM `Products` ORDER BY `product_price` DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name ASC",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_id"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code LIKE 'hardware' ORDER BY product_price ASC",
          "SELECT * FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' ORDER BY P.product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASCENDING",
          "SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT Products.product_name FROM Products WHERE Products.product_type_code = 'Hardware' ORDER BY Products.product_price ASC",
          "SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code LIKE 'Hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASCENDING",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_name ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT ALL",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_id ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_name"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_name) AS NumberOfProducts FROM Products GROUP BY product_type_code",
          "SELECT p.product_type_code, COUNT(*) AS count FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, COUNT(*) AS total FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) AS TotalProducts FROM Products GROUP BY product_type_code",
          "SELECT Products.product_type_code, COUNT(Products.product_id) FROM Products GROUP BY Products.product_type_code",
          "SELECT product_type_code, COUNT(DISTINCT product_id) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, COUNT(*) AS ProductCount FROM Products GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code",
          "SELECT COUNT(*), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) AS total_products FROM Products GROUP BY product_type_code",
          "SELECT P.product_type_code, COUNT(P.product_id) FROM Products AS P GROUP BY P.product_type_code",
          "SELECT product_type_code, COUNT(*) AS count_of_products FROM Products GROUP BY product_type_code",
          "SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC",
          "SELECT product_type_code, COUNT(*) AS NumberOfProducts FROM Products GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code",
          "SELECT p.product_type_code, AVG(p.product_price) FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code ORDER BY AVG(product_price) DESC",
          "SELECT Products.product_type_code, AVG(Products.product_price) FROM Products GROUP BY Products.product_type_code",
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code HAVING AVG(product_price) IS NOT NULL",
          "SELECT DISTINCT product_type_code, AVG(product_price) OVER (PARTITION BY product_type_code) AS avg_price FROM Products",
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code",
          "SELECT p.product_type_code, AVG(p.product_price) FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, AVG(product_price) AS AvgPrice FROM Products GROUP BY product_type_code",
          "SELECT AVG(product_price), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code",
          "SELECT AVG(p.product_price) AS AveragePrice, p.product_type_code FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS Average_Product_Price FROM Products GROUP BY product_type_code",
          "SELECT AVG(product_price) AS AveragePrice, product_type_code FROM Products GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(*) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) > 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) > 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(*) > 1",
          "SELECT DISTINCT product_type_code FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2)",
          "SELECT DISTINCT p.product_type_code FROM Products p WHERE p.product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2)"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(*) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) > 1",
          "SELECT DISTINCT product_type_code FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2)",
          "SELECT DISTINCT p.product_type_code FROM Products p WHERE p.product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2)",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) as cnt FROM Products GROUP BY product_type_code) as subquery WHERE cnt >= 2",
          "SELECT p.product_type_code FROM (SELECT product_type_code, COUNT(*) as cnt FROM Products GROUP BY product_type_code) p WHERE p.cnt >= 2"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) DESC LIMIT 1",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) AS cnt FROM Products GROUP BY product_type_code) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Products GROUP BY product_type_code) AS counts)",
          "SELECT product_type_code, COUNT(*) AS total FROM Products GROUP BY product_type_code ORDER BY total DESC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1",
          "SELECT FIRST(product_type_code) FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT p.product_type_code FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_type_code ORDER BY COUNT(oi.product_id) DESC LIMIT 1",
          "SELECT TOP 1 product_type_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(Order_Items.product_id) DESC",
          "SELECT product_type_code FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(Order_Items.product_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_type_code FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(Order_Items.product_id) DESC LIMIT 1",
          "SELECT product_type_code FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT product_type_code FROM Products JOIN Order_Items USING (product_id) GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT product_type_code FROM Products p, Order_Items oi WHERE p.product_id = oi.product_id GROUP BY product_type_code ORDER BY COUNT(oi.product_id) DESC LIMIT 1",
          "SELECT product_type_code FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_type_code ORDER BY COUNT(Order_Items.order_item_id) DESC LIMIT 1",
          "SELECT product_type_code FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_type_code ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers",
          "SELECT COUNT(*) AS TotalCustomers FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers",
          "SELECT COUNT(1) FROM Customers",
          "SELECT COUNT(customer_id) AS CustomerCount FROM Customers",
          "SELECT COUNT(*) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT customer_id) AS UniqueCustomerCount FROM Customers",
          "SELECT COUNT(*) FROM Customers WHERE customer_id > 0",
          "SELECT COUNT(*) FROM Customers GROUP BY customer_id HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers",
          "SELECT COUNT(*) AS NumberOfCustomers FROM Customers",
          "SELECT COUNT(1) FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers",
          "SELECT COUNT(customer_id) AS TotalCustomers FROM Customers",
          "SELECT COUNT(*) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT customer_id) AS TotalUniqueCustomers FROM Customers",
          "SELECT COUNT(*) FROM Customers WHERE customer_id > 0",
          "SELECT COUNT(*) FROM Customers GROUP BY customer_id HAVING COUNT(customer_id) >= 1"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id, customer_name FROM Customers",
          "SELECT Customers.customer_id, Customers.customer_name FROM Customers",
          "SELECT `customer_id`, `customer_name` FROM `Customers`",
          "SELECT c.customer_id, c.customer_name FROM Customers c",
          "SELECT customer_id AS CustomerID, customer_name AS CustomerName FROM Customers",
          "SELECT customer_id, customer_name FROM Customers ORDER BY customer_id",
          "SELECT DISTINCT customer_id, customer_name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name",
          "SELECT customer_id, customer_name FROM Customers LIMIT 100"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id, customer_name FROM Customers",
          "SELECT Customers.customer_id, Customers.customer_name FROM Customers",
          "SELECT c.customer_id, c.customer_name FROM Customers c",
          "SELECT `customer_id`, `customer_name` FROM `Customers`",
          "SELECT customer_id AS ID, customer_name AS Name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers ORDER BY customer_id",
          "SELECT DISTINCT customer_id, customer_name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name",
          "SELECT customer_id, customer_name FROM Customers LIMIT 100"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT C.customer_address, C.customer_phone, C.customer_email FROM Customers C WHERE C.customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT C.customer_address, C.customer_phone, C.customer_email FROM Customers C WHERE C.customer_name = 'Jeromy'",
          "SELECT customer_address AS Address, customer_phone AS Phone, customer_email AS Email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT Customers.payment_method_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY Customers.payment_method_code",
          "SELECT c.payment_method_code, COUNT(c.customer_id) FROM Customers c GROUP BY c.payment_method_code",
          "SELECT payment_method_code, COUNT(1) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code",
          "SELECT Customers.payment_method_code, COUNT(Customers.customer_id) FROM Customers GROUP BY Customers.payment_method_code",
          "SELECT c.payment_method_code, COUNT(*) FROM Customers c GROUP BY c.payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS TotalCustomers FROM Customers GROUP BY payment_method_code"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT Customers.payment_method_code, COUNT(*) AS NumberOfUsers FROM Customers GROUP BY Customers.payment_method_code",
          "SELECT c.payment_method_code, COUNT(c.customer_id) AS UserCount FROM Customers c GROUP BY c.payment_method_code",
          "SELECT payment_method_code, COUNT(*) AS TotalCustomers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(1) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS CountOfCustomers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC",
          "SELECT payment_method_code, COUNT(*) AS CustomerCount FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.customer_id) DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS counts)",
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code ORDER BY num_customers DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(DISTINCT customer_id) DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) as cnt FROM Customers GROUP BY payment_method_code) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Customers GROUP BY payment_method_code) sub)",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code, COUNT(*) as usage_count FROM Customers GROUP BY payment_method_code ORDER BY usage_count DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1 OFFSET 0",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.customer_name FROM Customers C JOIN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1) PM ON C.payment_method_code = PM.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers GROUP BY payment_method_code))",
          "SELECT C.customer_name FROM Customers C WHERE C.payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC)",
          "SELECT C.customer_name FROM Customers C INNER JOIN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) AS LeastUsed ON C.payment_method_code = LeastUsed.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code ORDER BY cnt ASC) AS TempTable LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) ASC LIMIT 1)",
          "SELECT C.customer_name FROM Customers C, (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) P WHERE C.payment_method_code = P.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers GROUP BY payment_method_code))"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT c.customer_name FROM Customers c WHERE c.payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS subquery))",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC)",
          "SELECT C.customer_name FROM Customers C JOIN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) AS PM ON C.payment_method_code = PM.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS usage_count FROM Customers GROUP BY payment_method_code ORDER BY usage_count ASC) AS temp_table LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS counts))"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT C.payment_method_code, C.customer_number FROM Customers C WHERE C.customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' LIMIT 1",
          "SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT payment_method_code AS PaymentMethod, customer_number AS CustomerNumber FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND customer_id IS NOT NULL",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' ORDER BY customer_id",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' LIMIT 1",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name COLLATE NOCASE = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE LOWER(customer_name) = LOWER('Jeromy')",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND customer_id IS NOT NULL",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' ORDER BY customer_id DESC LIMIT 1",
          "SELECT payment_method_code, customer_number FROM Customers WHERE TRIM(customer_name) = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT payment_method_code FROM Customers",
          "SELECT DISTINCT c.payment_method_code FROM Customers c",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL",
          "SELECT DISTINCT payment_method_code FROM Customers ORDER BY payment_method_code",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT DISTINCT Customers.payment_method_code FROM Customers",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code <> ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code != ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code > ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE LENGTH(payment_method_code) > 0"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT payment_method_code FROM Customers",
          "SELECT DISTINCT c.payment_method_code FROM Customers c",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL",
          "SELECT DISTINCT Customers.payment_method_code FROM Customers",
          "SELECT DISTINCT payment_method_code FROM Customers ORDER BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code <> ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code != ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code > ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE LENGTH(payment_method_code) > 0"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name",
          "SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name",
          "SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name",
          "SELECT `product_id`, `product_type_code` FROM `Products` ORDER BY `product_name`",
          "SELECT product_id AS id, product_type_code AS type FROM Products ORDER BY product_name",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name COLLATE NOCASE",
          "SELECT product_id, product_type_code FROM Products ORDER BY LOWER(product_name)",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name DESC",
          "SELECT product_id, product_type_code FROM Products ORDER BY LENGTH(product_name), product_name"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name",
          "SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name",
          "SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC",
          "SELECT product_id AS ID, product_type_code AS Type FROM Products ORDER BY product_name",
          "SELECT `product_id`, `product_type_code` FROM `Products` ORDER BY `product_name` ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASCENDING",
          "SELECT product_id, product_type_code FROM Products ORDER BY UPPER(product_name)",
          "SELECT product_id, product_type_code FROM Products ORDER BY LOWER(product_name) ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1",
          "SELECT P.product_type_code FROM Products AS P GROUP BY P.product_type_code ORDER BY COUNT(P.product_id) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(COUNT(product_id)) FROM Products GROUP BY product_type_code)",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*)",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) AS cnt FROM Products GROUP BY product_type_code) AS SubQuery ORDER BY cnt ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT MIN(product_type_code) KEEP (DENSE_RANK FIRST ORDER BY COUNT(*)) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) ASC LIMIT 1",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*)",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Products GROUP BY product_type_code) as counts)",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) as qty FROM Products GROUP BY product_type_code) as grouped ORDER BY qty ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC LIMIT 1",
          "SELECT MIN(product_type_code) FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) = (SELECT MIN(COUNT(product_type_code)) FROM Products GROUP BY product_type_code)",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders",
          "SELECT COUNT(*) AS TotalOrders FROM Customer_Orders",
          "SELECT COUNT(1) FROM Customer_Orders",
          "SELECT COUNT(order_id) AS OrderCount FROM Customer_Orders",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(DISTINCT order_id) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders WHERE order_id > 0",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_status_code IS NOT NULL",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_date IS NOT NULL"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders",
          "SELECT COUNT(*) AS NumberOfOrders FROM Customer_Orders",
          "SELECT COUNT(1) FROM Customer_Orders",
          "SELECT COUNT(order_id) AS TotalOrders FROM Customer_Orders",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(DISTINCT order_id) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders WHERE order_id > 0",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_status_code IS NOT NULL",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_date IS NOT NULL"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT o.order_id, o.order_date, o.order_status_code FROM Customer_Orders o INNER JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
          "SELECT Customer_Orders.order_id, Customer_Orders.order_date, Customer_Orders.order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'",
          "SELECT a.order_id, a.order_date, a.order_status_code FROM Customer_Orders a, Customers b WHERE a.customer_id = b.customer_id AND b.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name LIKE 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name LIKE 'Jeromy')",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO INNER JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO INNER JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO, Customers C WHERE CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name LIKE 'Jeromy')",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO INNER JOIN Customers C ON CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO LEFT JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO RIGHT JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name LIKE '%Jeromy%')"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) FROM Customers C JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id",
          "SELECT customer_name, customer_id, COUNT(order_id) AS order_count FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) AS NumberOfOrders FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT customer_name, customer_id, COUNT(*) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id",
          "SELECT Customers.customer_name AS Name, Customers.customer_id AS ID, COUNT(Customer_Orders.order_id) AS Orders FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT C.customer_name, C.customer_id, COUNT(*) AS TotalOrders FROM Customers C, Customer_Orders O WHERE C.customer_id = O.customer_id GROUP BY C.customer_id",
          "SELECT customer_name, customer_id, COUNT(order_id) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS OrderCount FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id",
          "SELECT customer_name, customer_id, COUNT(order_id) AS orders FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT customer_name AS Name, customer_id AS ID, COUNT(order_id) AS OrderCount FROM Customers JOIN Customer_Orders ON customer_id = Customers.customer_id GROUP BY customer_id"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) FROM Customers C JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id",
          "SELECT customer_name, customer_id, COUNT(order_id) AS number_of_orders FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) AS orders_count FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT customer_name, customer_id, COUNT(*) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id",
          "SELECT customer_name AS Name, customer_id AS ID, COUNT(order_id) AS Orders FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id",
          "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS TotalOrders FROM Customers C, Customer_Orders O WHERE C.customer_id = O.customer_id GROUP BY C.customer_id",
          "SELECT customer_name, customer_id, COUNT(order_id) AS OrderCount FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT customer_name AS CustomerName, customer_id AS CustomerID, COUNT(order_id) AS NumberOfOrders FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS OrderTotal FROM Customers AS C LEFT JOIN Customer_Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1",
          "SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c, Customer_Orders AS co WHERE c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id HAVING COUNT(Customer_Orders.order_id) = (SELECT MAX(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY customer_id) AS counts)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(order_count) FROM (SELECT customer_id, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY customer_id) sub)",
          "SELECT TOP 1 c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c INNER JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c RIGHT JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1",
          "SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c, Customer_Orders AS co WHERE c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(order_id) AS cnt FROM Customer_Orders GROUP BY customer_id) t)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN (SELECT customer_id, COUNT(order_id) AS total_orders FROM Customer_Orders GROUP BY customer_id ORDER BY total_orders DESC LIMIT 1) co ON c.customer_id = co.customer_id",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c WHERE EXISTS (SELECT 1 FROM Customer_Orders co WHERE co.customer_id = c.customer_id GROUP BY co.customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(DISTINCT co.order_id) DESC LIMIT 1",
          "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1) AS max_orders JOIN Customers c ON c.customer_id = max_orders.customer_id"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(*), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(order_id), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code ORDER BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_id)",
          "SELECT order_status_code AS status, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code AS status_code, COUNT(order_id) AS total_orders FROM Customer_Orders GROUP BY order_status_code"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) AS total_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(*), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(order_id), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code ORDER BY order_status_code",
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_id) DESC",
          "SELECT order_status_code, COUNT(*) AS NumberOfOrders FROM Customer_Orders GROUP BY order_status_code"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS subquery)",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_id) DESC LIMIT 1",
          "SELECT order_status_code, COUNT(order_status_code) AS count FROM Customer_Orders GROUP BY order_status_code ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC, order_status_code ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1",
          "SELECT TOP 1 order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customer_Orders GROUP BY order_status_code) tmp)",
          "SELECT order_status_code, COUNT(*) AS frequency FROM Customer_Orders GROUP BY order_status_code ORDER BY frequency DESC LIMIT 1",
          "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(order_status_code) AS count FROM Customer_Orders GROUP BY order_status_code ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC, order_status_code ASC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC, order_status_code LIMIT 1"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders co WHERE co.customer_id = c.customer_id)",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co)",
          "SELECT COUNT(*) FROM Customers AS c WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders AS co WHERE co.customer_id = c.customer_id)",
          "SELECT COUNT(c.customer_id) FROM Customers c LEFT OUTER JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT * FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders co WHERE co.customer_id = c.customer_id)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT COUNT(*) FROM Customers AS c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders AS co)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE order_status_code IS NOT NULL)",
          "SELECT COUNT(c.customer_id) FROM Customers c LEFT OUTER JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT P.product_name FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.product_id IS NULL",
          "SELECT product_name FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT P.product_name FROM Products P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT NULL FROM Order_Items OI WHERE OI.product_id = P.product_id)",
          "SELECT product_name FROM Products P WHERE P.product_id NOT IN (SELECT OI.product_id FROM Order_Items OI)",
          "SELECT DISTINCT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT product_name FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.order_id IS NULL"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT P.product_name FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.product_id IS NULL",
          "SELECT product_name FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT P.product_name FROM Products P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT DISTINCT product_name FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.order_item_id IS NULL",
          "SELECT product_name FROM Products P WHERE NOT EXISTS (SELECT NULL FROM Order_Items OI WHERE OI.product_id = P.product_id)",
          "SELECT P.product_name FROM Products P WHERE P.product_id NOT IN (SELECT OI.product_id FROM Order_Items OI)",
          "SELECT DISTINCT P.product_name FROM Products P LEFT OUTER JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.product_id IS NULL"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Order_Items OI INNER JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT TOTAL(Order_Items.order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Order_Items AS OI JOIN Products AS P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name LIKE 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Order_Items OI INNER JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT TOTAL(Order_Items.order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) AS TotalMonitors FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name LIKE 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items O, Products P WHERE O.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Order_Items OI, Products P WHERE OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor' GROUP BY Products.product_name",
          "SELECT SUM(order_quantity) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor')))",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(UNIQUE Customers.customer_id) FROM Customers, Customer_Orders, Order_Items, Products WHERE Customers.customer_id = Customer_Orders.customer_id AND Customer_Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Customers.customer_id FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor') AS unique_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor'))",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.order_id = Customer_Orders.order_id AND product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'))",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Customers.customer_id = Customer_Orders.customer_id AND Products.product_name = 'Monitor')",
          "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE Order_Items.product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor')) AS ordered_monitor",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id WHERE OI.product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor')"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'))",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT COUNT(UNIQUE CO.customer_id) FROM Customer_Orders CO, Order_Items OI, Products P WHERE CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT C.customer_id) FROM Customers C, Customer_Orders CO, Order_Items OI, Products P WHERE C.customer_id = CO.customer_id AND CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name LIKE 'Monitor'",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor'))",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO, Order_Items OI, Products P WHERE CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT DISTINCT COUNT(customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_name LIKE 'Monitor'))",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO LEFT JOIN Order_Items OI ON CO.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders",
          "SELECT COUNT(UNIQUE customer_id) FROM Customer_Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c INNER JOIN Customer_Orders co ON c.customer_id = co.customer_id",
          "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Customer_Orders GROUP BY customer_id)",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Customer_Orders GROUP BY customer_id)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers)"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders",
          "SELECT COUNT(UNIQUE customer_id) FROM Customer_Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Customer_Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id",
          "SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co",
          "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Customer_Orders) AS orders",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Customer_Orders GROUP BY customer_id) AS distinct_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co WHERE EXISTS (SELECT 1 FROM Customers c WHERE c.customer_id = co.customer_id)",
          "SELECT DISTINCT COUNT(customer_id) FROM Customer_Orders GROUP BY customer_id HAVING COUNT(customer_id) > 0"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT C.customer_id FROM Customers C LEFT JOIN Customer_Orders CO ON C.customer_id = CO.customer_id WHERE CO.order_id IS NULL",
          "SELECT customer_id FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.order_id IS NULL",
          "SELECT customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT DISTINCT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT C.customer_id FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders CO WHERE C.customer_id = CO.customer_id)",
          "SELECT customer_id FROM Customers AS C WHERE NOT EXISTS (SELECT * FROM Customer_Orders AS CO WHERE C.customer_id = CO.customer_id)"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT C.customer_id FROM Customers C LEFT JOIN Customer_Orders CO ON C.customer_id = CO.customer_id WHERE CO.customer_id IS NULL",
          "SELECT customer_id FROM Customers WHERE NOT EXISTS (SELECT customer_id FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT C.customer_id FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders CO WHERE CO.customer_id = C.customer_id)",
          "SELECT customer_id FROM Customers MINUS SELECT customer_id FROM Customer_Orders",
          "SELECT customer_id FROM Customers C WHERE C.customer_id NOT IN (SELECT CO.customer_id FROM Customer_Orders CO)",
          "SELECT DISTINCT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT customer_id FROM Customers AS C WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders AS CO WHERE C.customer_id = CO.customer_id)"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 3)",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id WHERE OI.order_quantity > 6 GROUP BY CO.order_id HAVING COUNT(OI.order_item_id) > 3",
          "SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING MAX(order_quantity) > 6 OR COUNT(order_item_id) > 3)",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO WHERE EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.order_id = CO.order_id AND OI.order_quantity > 6) OR EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.order_id = CO.order_id GROUP BY OI.order_id HAVING COUNT(*) > 3)",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id HAVING MAX(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3",
          "SELECT DISTINCT CO.order_date, CO.order_id FROM Customer_Orders CO, Order_Items OI WHERE CO.order_id = OI.order_id AND (OI.order_quantity > 6 OR (SELECT COUNT(*) FROM Order_Items OI2 WHERE OI2.order_id = CO.order_id) > 3)",
          "SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 UNION SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 3)",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO WHERE CO.order_id IN (SELECT OI.order_id FROM Order_Items OI WHERE OI.order_quantity > 6 UNION ALL SELECT OI.order_id FROM Order_Items OI GROUP BY OI.order_id HAVING COUNT(*) > 3)",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO LEFT JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id HAVING MAX(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3",
          "SELECT CO.order_date, CO.order_id FROM Customer_Orders CO WHERE CO.order_id IN (SELECT OI.order_id FROM Order_Items OI WHERE OI.order_quantity > 6) OR CO.order_id IN (SELECT OI.order_id FROM Order_Items OI GROUP BY OI.order_id HAVING COUNT(OI.order_item_id) > 3)"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3",
          "SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(order_item_id) > 3)",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders AS CO INNER JOIN Order_Items AS OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.order_item_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO, Order_Items OI WHERE CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(OI.product_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO LEFT JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING MAX(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(*) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.product_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.order_item_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(OI.order_item_id) > 3"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT count(*) FROM building",
          "SELECT COUNT(Building_ID) FROM building",
          "SELECT COUNT(*) AS TotalBuildings FROM building",
          "SELECT COUNT(1) FROM building",
          "SELECT COUNT(DISTINCT Building_ID) FROM building",
          "SELECT COUNT(Building_ID) AS BuildingCount FROM building",
          "SELECT COUNT(*) FROM building WHERE Building_ID IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Building_ID FROM building) AS Total",
          "SELECT COUNT(*) FROM building GROUP BY Region_ID HAVING COUNT(*) > 0",
          "SELECT COUNT(*) FROM building WHERE '1'='1'"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT count(*) FROM building",
          "SELECT COUNT(Building_ID) FROM building",
          "SELECT COUNT(*) AS NumberOfBuildings FROM building",
          "SELECT COUNT(1) FROM building",
          "SELECT COUNT(Building_ID) AS TotalBuildings FROM building",
          "SELECT COUNT(DISTINCT Building_ID) FROM building",
          "SELECT COUNT(*) FROM building WHERE Building_ID IS NOT NULL",
          "SELECT COUNT(*) FROM `building`",
          "SELECT COUNT(*) FROM (SELECT Building_ID FROM building) AS Temp",
          "SELECT COUNT(*) FROM building GROUP BY Region_ID"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
          "SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories",
          "SELECT b.Name FROM building b ORDER BY b.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT building.Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Building_ID ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Completed_Year DESC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Address ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Region_ID ASC"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
          "SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories",
          "SELECT b.Name FROM building b ORDER BY b.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT building.Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT b.Name FROM building AS b ORDER BY b.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Building_ID ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Completed_Year DESC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Address ASC"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Address FROM building ORDER BY Completed_Year DESC",
          "SELECT building.Address FROM building ORDER BY building.Completed_Year DESC",
          "SELECT b.Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESCENDING",
          "SELECT `Address` FROM `building` ORDER BY `Completed_Year` DESC",
          "SELECT Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Building_ID ASC",
          "SELECT building.Address FROM building ORDER BY Completed_Year DESC, Building_ID ASC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC LIMIT ALL",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Building_ID DESC"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Address FROM building ORDER BY Completed_Year DESC",
          "SELECT building.Address FROM building ORDER BY building.Completed_Year DESC",
          "SELECT b.Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESCENDING",
          "SELECT `Address` FROM `building` ORDER BY `Completed_Year` DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Building_ID ASC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC LIMIT ALL",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Building_ID DESC",
          "SELECT building.Address FROM building ORDER BY building.Completed_Year DESC, building.Building_ID DESC",
          "SELECT b.Address FROM building AS b ORDER BY b.Completed_Year DESC"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE NOT Completed_Year = 1980",
          "SELECT maximum(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT IN (1980)",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year != 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE b.Completed_Year <> 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year IS NOT 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT EQUAL TO 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE NOT (Completed_Year = 1980)",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980 AND Completed_Year IS NOT NULL"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year <> 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE NOT Completed_Year = 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT IN (1980)",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year IS NOT 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE b.Completed_Year != 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != '1980'",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT LIKE 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT BETWEEN 1980 AND 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT EQUAL TO 1980"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT AVG(Population) FROM region",
          "SELECT AVG(region.Population) FROM region",
          "SELECT average(Population) FROM region",
          "SELECT AVG(Population) AS AveragePopulation FROM region",
          "SELECT AVG(r.Population) FROM region r",
          "SELECT AVG(Population) FROM region GROUP BY Region_ID",
          "SELECT AVG(Population) FROM region WHERE Population IS NOT NULL",
          "SELECT AVG(Population) FROM region WHERE Population > 0",
          "SELECT AVG(Population) FROM region ORDER BY Population",
          "SELECT AVG(Population) FROM region HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT AVG(Population) FROM region",
          "SELECT AVG(region.Population) FROM region",
          "SELECT average(Population) FROM region",
          "SELECT AVG(Population) AS AveragePopulation FROM region",
          "SELECT AVG(Population) FROM region GROUP BY Region_ID",
          "SELECT AVG(Population) FROM region WHERE Population IS NOT NULL",
          "SELECT AVG(Population) FROM region WHERE Population > 0",
          "SELECT AVG(Population) FROM region GROUP BY Region_ID HAVING COUNT(*) > 0",
          "SELECT AVG(Population) AS AvgPop FROM region",
          "SELECT AVG(Population) FROM region ORDER BY Population DESC"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Name ASC",
          "SELECT region.Name FROM region ORDER BY region.Name ASC",
          "SELECT Name FROM region ORDER BY Name",
          "SELECT region.Name FROM region ORDER BY Name",
          "SELECT `Name` FROM `region` ORDER BY `Name` ASC",
          "SELECT r.Name FROM region r ORDER BY r.Name ASC",
          "SELECT Name FROM region ORDER BY Name ASCENDING",
          "SELECT region.Name FROM region ORDER BY region.Name ASCENDING",
          "SELECT Name FROM region ORDER BY Name ASC, Region_ID ASC",
          "SELECT DISTINCT Name FROM region ORDER BY Name ASC"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Name ASC",
          "SELECT Name FROM region ORDER BY Name",
          "SELECT region.Name FROM region ORDER BY region.Name ASC",
          "SELECT r.Name FROM region r ORDER BY r.Name ASC",
          "SELECT `Name` FROM `region` ORDER BY `Name` ASC",
          "SELECT region.Name FROM region ORDER BY Name",
          "SELECT Name FROM region ORDER BY Name ASCENDING",
          "SELECT region.Name AS RegionName FROM region ORDER BY RegionName ASC",
          "SELECT Name AS RegionName FROM region ORDER BY RegionName",
          "SELECT Name FROM region ORDER BY Name COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Area > 10000",
          "SELECT r.Capital FROM region r WHERE r.Area > 10000",
          "SELECT region.Capital FROM region WHERE region.Area > 10000",
          "SELECT `Capital` FROM `region` WHERE `Area` > 10000",
          "SELECT Capital FROM region WHERE Area > 10000;",
          "SELECT region.Capital FROM region WHERE region.Area > 10000;",
          "SELECT r.Capital FROM region AS r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 ORDER BY Area",
          "SELECT Capital FROM region WHERE Area > 10000 ORDER BY Capital",
          "SELECT Capital FROM region WHERE Area > 10000 AND Population > 0"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Area > 10000",
          "SELECT r.Capital FROM region r WHERE r.Area > 10000",
          "SELECT `Capital` FROM `region` WHERE `Area` > 10000",
          "SELECT region.Capital FROM region WHERE region.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000;",
          "SELECT r.Capital FROM region AS r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 ORDER BY Capital",
          "SELECT DISTINCT Capital FROM region WHERE Area > 10000",
          "SELECT Capital FROM region r WHERE r.Area > 10000",
          "SELECT region.Capital FROM region WHERE region.Area > 10000;"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
          "SELECT r.Capital FROM region r ORDER BY r.Population DESC LIMIT 1",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
          "SELECT r.Capital FROM region AS r WHERE r.Population = (SELECT MAX(Population) FROM region AS r2)",
          "SELECT Capital FROM region WHERE Population IN (SELECT MAX(Population) FROM region)",
          "SELECT r.Capital FROM region r WHERE r.Population IN (SELECT MAX(Population) FROM region r2)",
          "SELECT Capital FROM region ORDER BY Population DESC FETCH FIRST 1 ROW ONLY",
          "SELECT r.Capital FROM region r ORDER BY r.Population DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Capital FROM region ORDER BY Population DESC",
          "SELECT r.Capital FROM region AS r ORDER BY r.Population DESC FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
          "SELECT r.Capital FROM region r ORDER BY r.Population DESC LIMIT 1",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
          "SELECT region.Capital FROM region ORDER BY region.Population DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region LIMIT 1)",
          "SELECT r.Capital FROM region AS r WHERE r.Population = (SELECT MAX(Population) FROM region AS reg)",
          "SELECT TOP 1 Capital FROM region ORDER BY Population DESC",
          "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1 OFFSET 0",
          "SELECT Capital FROM (SELECT Capital, Population FROM region ORDER BY Population DESC) AS sub LIMIT 1",
          "SELECT Capital FROM region ORDER BY Population DESC, Region_ID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
          "SELECT region.Name FROM region ORDER BY region.Area DESC LIMIT 5",
          "SELECT r.Name FROM region AS r ORDER BY r.Area DESC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT region.Name FROM region ORDER BY region.Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT r.Name FROM region r ORDER BY r.Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT `Name` FROM `region` ORDER BY `Area` DESC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC, Region_ID ASC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC, Name ASC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC, Population DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
          "SELECT region.Name FROM region ORDER BY region.Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT r.Name FROM region AS r ORDER BY r.Area DESC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC, Region_ID ASC LIMIT 5",
          "SELECT `Name` FROM `region` ORDER BY `Area` DESC LIMIT 5",
          "SELECT TOP 5 Name FROM region ORDER BY Area DESC",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5 OFFSET 0",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5 ROWS",
          "SELECT region.Name FROM region ORDER BY region.Area DESC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC FETCH FIRST 5 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT b.Name, r.Name FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID",
          "SELECT building.Name, region.Name FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT bld.Name AS BuildingName, reg.Name AS RegionName FROM building bld, region reg WHERE bld.Region_ID = reg.Region_ID",
          "SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT Name FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Name AS Building, region.Name AS Region FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name, r.Name FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT building.Name, region.Name FROM building LEFT JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name, r.Name FROM building b, region r WHERE b.Region_ID = r.Region_ID",
          "SELECT b.Name AS 'Building Name', r.Name AS 'Region Name' FROM building b JOIN region r ON b.Region_ID = r.Region_ID"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT b.Name, r.Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT building.Name, region.Name FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT bld.Name AS BuildingName, reg.Name AS RegionName FROM building AS bld INNER JOIN region AS reg ON bld.Region_ID = reg.Region_ID",
          "SELECT Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT b.Name, r.Name FROM building AS b, region AS r WHERE b.Region_ID = r.Region_ID",
          "SELECT building.Name AS Building, region.Name AS Region FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name AS 'Building Name', r.Name AS 'Region Name' FROM building b, region r WHERE b.Region_ID = r.Region_ID",
          "SELECT b.Name, r.Name FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT Name FROM building JOIN region ON building.Region_ID = region.Region_ID"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Name FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Name HAVING COUNT(B.Building_ID) > 1",
          "SELECT region.Name FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(building.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)",
          "SELECT r.Name FROM region r, building b WHERE r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1",
          "SELECT region.Name FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(*) > 1",
          "SELECT DISTINCT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) > 1)",
          "SELECT r.Name FROM region AS r JOIN building AS b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1",
          "SELECT region.Name FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(building.Building_ID) > 1",
          "SELECT Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(DISTINCT b.Building_ID) > 1"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Name FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Region_ID HAVING COUNT(B.Building_ID) > 1",
          "SELECT region.Name FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)",
          "SELECT region.Name FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) > 1",
          "SELECT DISTINCT r.Name FROM region r, building b WHERE r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1",
          "SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) > 1)",
          "SELECT region.Name FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(DISTINCT building.Building_ID) > 1",
          "SELECT r.Name FROM region AS r JOIN building AS b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(*) > 1",
          "SELECT Name FROM region WHERE EXISTS (SELECT NULL FROM building WHERE region.Region_ID = building.Region_ID GROUP BY Region_ID HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Capital FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Region_ID ORDER BY COUNT(B.Building_ID) DESC LIMIT 1",
          "SELECT region.Capital FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1",
          "SELECT capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT r.Capital FROM region r WHERE r.Region_ID = (SELECT b.Region_ID FROM building b GROUP BY b.Region_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Capital FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1",
          "SELECT r.Capital FROM region AS r JOIN building AS b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID ORDER BY COUNT(b.Building_ID) DESC LIMIT 1",
          "SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM building GROUP BY Region_ID) AS SubQuery)",
          "SELECT (SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) = MAX(COUNT(Building_ID)))"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Capital FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Region_ID ORDER BY COUNT(B.Building_ID) DESC LIMIT 1",
          "SELECT region.Capital FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT r.Capital FROM region r WHERE r.Region_ID IN (SELECT b.Region_ID FROM building b GROUP BY b.Region_ID ORDER BY COUNT(b.Building_ID) DESC LIMIT 1)",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Building_ID) AS cnt FROM building GROUP BY Region_ID) tmp))",
          "SELECT r.Capital FROM region r JOIN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1) b ON r.Region_ID = b.Region_ID",
          "SELECT Capital FROM region, (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1) AS MostBuildings WHERE region.Region_ID = MostBuildings.Region_ID",
          "SELECT r.Capital FROM region r, building b WHERE r.Region_ID = b.Region_ID GROUP BY r.Region_ID, r.Capital ORDER BY COUNT(b.Building_ID) DESC LIMIT 1",
          "SELECT TOP 1 region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID ORDER BY COUNT(building.Building_ID) DESC",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT TOP 1 Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC)"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Address, r.Capital FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT Address, Capital FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT building.Address AS BuildingAddress, region.Capital AS RegionCapital FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT A.Address, B.Capital FROM building A JOIN region B ON A.Region_ID = B.Region_ID",
          "SELECT Address, Capital FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Capital FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT b.Address, r.Capital FROM building AS b, region AS r WHERE b.Region_ID = r.Region_ID",
          "SELECT Address AS BuildingAddress, Capital AS RegionCapital FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Capital FROM building INNER JOIN region ON building.Region_ID = region.Region_ID"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT b.Address, r.Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT building.Address, region.Name FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT Address, Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT b.Address AS Building_Address, r.Name AS Region_Name FROM building AS b INNER JOIN region AS r ON b.Region_ID = r.Region_ID",
          "SELECT Address, Name FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT b.Address, r.Name FROM building b, region r WHERE b.Region_ID = r.Region_ID",
          "SELECT Address AS Building_Address, Name AS Region_Name FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Name FROM building LEFT JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT Address, Name FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')",
          "SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building INNER JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT building.Number_of_Stories FROM building, region WHERE building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building b, region r WHERE b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building AS b INNER JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building WHERE Region_ID = (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')",
          "SELECT b.Number_of_Stories FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building WHERE Region_ID = (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT building.Number_of_Stories FROM building, region WHERE building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')",
          "SELECT b.Number_of_Stories FROM building b, region r WHERE b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building INNER JOIN region ON building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT building.Number_of_Stories FROM building INNER JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building WHERE Region_ID = (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) AS NumberOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(b.Building_ID) FROM building b GROUP BY b.Completed_Year",
          "SELECT `Completed_Year`, COUNT(*) AS `Count` FROM `building` GROUP BY `Completed_Year`",
          "SELECT Completed_Year AS Year, COUNT(*) AS Total FROM building GROUP BY Year",
          "SELECT b.Completed_Year, COUNT(*) FROM building AS b GROUP BY b.Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year ORDER BY Completed_Year",
          "SELECT Completed_Year, COUNT(*) AS BuildingCount FROM building GROUP BY Completed_Year ORDER BY BuildingCount DESC",
          "SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year HAVING COUNT(*) > 0",
          "SELECT Completed_Year, COUNT(Building_ID) AS CountOfBuildings FROM building GROUP BY Completed_Year HAVING CountOfBuildings > 1"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) AS NumberOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(b.Building_ID) FROM building b GROUP BY b.Completed_Year",
          "SELECT `Completed_Year`, COUNT(*) AS `Total Buildings` FROM `building` GROUP BY `Completed_Year`",
          "SELECT Completed_Year AS Year, COUNT(*) AS Count FROM building GROUP BY Year",
          "SELECT YEAR(Completed_Year) AS Year, COUNT(Building_ID) AS BuildingCount FROM building GROUP BY YEAR(Completed_Year)",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year ORDER BY Completed_Year",
          "SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year HAVING COUNT(*) > 0",
          "SELECT b.Completed_Year, COUNT(*) AS Total FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year DESC",
          "SELECT Completed_Year AS CompletionYear, COUNT(*) AS TotalBuildings FROM building GROUP BY CompletionYear ORDER BY TotalBuildings DESC"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT b.Completed_Year FROM building b GROUP BY b.Completed_Year ORDER BY COUNT(b.Building_ID) DESC LIMIT 1",
          "SELECT TOP 1 Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Completed_Year, COUNT(*) AS NumBuildings FROM building GROUP BY Completed_Year ORDER BY NumBuildings DESC LIMIT 1",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) as Total FROM building GROUP BY Completed_Year) AS YearCounts ORDER BY Total DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS Counts)",
          "SELECT b.Completed_Year FROM building AS b GROUP BY b.Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC LIMIT 1",
          "SELECT Completed_Year, COUNT(Completed_Year) AS MostBuildings FROM building GROUP BY Completed_Year ORDER BY MostBuildings DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT b.Completed_Year FROM building b GROUP BY b.Completed_Year ORDER BY COUNT(b.Building_ID) DESC LIMIT 1",
          "SELECT TOP 1 Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC",
          "SELECT Completed_Year, COUNT(*) AS NumBuildings FROM building GROUP BY Completed_Year ORDER BY NumBuildings DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Completed_Year, COUNT(Building_ID) AS Total FROM building GROUP BY Completed_Year ORDER BY Total DESC LIMIT 1",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) as Count FROM building GROUP BY Completed_Year) AS YearCounts ORDER BY Count DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS TempTable)",
          "SELECT Completed_Year, MAX(Count) FROM (SELECT Completed_Year, COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS CompletionYears GROUP BY Completed_Year ORDER BY Count DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC, Completed_Year ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL",
          "SELECT Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)",
          "SELECT region.Name FROM region WHERE region.Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT * FROM building b WHERE b.Region_ID = r.Region_ID)",
          "SELECT Name FROM region AS r WHERE r.Region_ID NOT IN (SELECT Region_ID FROM building AS b)",
          "SELECT Name FROM region r WHERE r.Region_ID NOT IN (SELECT b.Region_ID FROM building b)",
          "SELECT region.Name FROM region LEFT JOIN building ON region.Region_ID = building.Region_ID WHERE building.Building_ID IS NULL",
          "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT NULL FROM building b WHERE b.Region_ID = r.Region_ID)"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL",
          "SELECT Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE Region_ID = region.Region_ID)",
          "SELECT region.Name FROM region WHERE region.Region_ID NOT IN (SELECT building.Region_ID FROM building)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT * FROM building b WHERE b.Region_ID = r.Region_ID)",
          "SELECT Name FROM region EXCEPT SELECT Name FROM region JOIN building ON region.Region_ID = building.Region_ID",
          "SELECT region.Name FROM region LEFT OUTER JOIN building ON region.Region_ID = building.Region_ID WHERE building.Building_ID IS NULL",
          "SELECT Name FROM region r WHERE r.Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT DISTINCT r.Name FROM region r WHERE r.Region_ID NOT IN (SELECT b.Region_ID FROM building b)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT NULL FROM building b WHERE b.Region_ID = r.Region_ID)"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 INTERSECT SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories < 15",
          "SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT DISTINCT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 INTERSECT SELECT DISTINCT b.Completed_Year FROM building b WHERE b.Number_of_Stories < 15",
          "SELECT b1.Completed_Year FROM building b1 WHERE b1.Number_of_Stories > 20 INTERSECT SELECT b2.Completed_Year FROM building b2 WHERE b2.Number_of_Stories < 15",
          "SELECT DISTINCT b1.Completed_Year FROM building b1 WHERE b1.Number_of_Stories > 20 INTERSECT SELECT DISTINCT b2.Completed_Year FROM building b2 WHERE b2.Number_of_Stories < 15",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Building_ID IN (SELECT Building_ID FROM building WHERE Number_of_Stories < 15)",
          "SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 AND b.Building_ID IN (SELECT Building_ID FROM building WHERE Number_of_Stories < 15)",
          "SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Building_ID IN (SELECT Building_ID FROM building WHERE Number_of_Stories < 15)",
          "SELECT DISTINCT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 AND b.Building_ID IN (SELECT Building_ID FROM building WHERE Number_of_Stories < 15)"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 INTERSECT SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories < 15",
          "SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT a.Completed_Year FROM building a WHERE a.Number_of_Stories > 20 INTERSECT SELECT a.Completed_Year FROM building a WHERE a.Number_of_Stories < 15",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING MAX(Number_of_Stories) > 20 AND MIN(Number_of_Stories) < 15",
          "SELECT Year FROM (SELECT Completed_Year AS Year FROM building WHERE Number_of_Stories > 20) AS HighStories INTERSECT SELECT Year FROM (SELECT Completed_Year AS Year FROM building WHERE Number_of_Stories < 15) AS LowStories",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15)",
          "SELECT DISTINCT b1.Completed_Year FROM building b1 JOIN building b2 ON b1.Completed_Year = b2.Completed_Year WHERE b1.Number_of_Stories > 20 AND b2.Number_of_Stories < 15",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15 ORDER BY Completed_Year",
          "SELECT b.Completed_Year FROM building b WHERE EXISTS (SELECT 1 FROM building WHERE Number_of_Stories > 20 AND Completed_Year = b.Completed_Year) INTERSECT SELECT b.Completed_Year FROM building b WHERE EXISTS (SELECT 1 FROM building WHERE Number_of_Stories < 15 AND Completed_Year = b.Completed_Year)"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT DISTINCT Address FROM building",
          "SELECT DISTINCT building.Address FROM building",
          "SELECT Address FROM building GROUP BY Address",
          "SELECT DISTINCT b.Address FROM building AS b",
          "SELECT DISTINCT Address FROM building ORDER BY Address",
          "SELECT DISTINCT Address FROM building WHERE Address IS NOT NULL",
          "SELECT DISTINCT Address FROM building WHERE Address <> ''",
          "SELECT DISTINCT Address FROM building WHERE Address != ''",
          "SELECT DISTINCT Address FROM building WHERE Address > ''",
          "SELECT DISTINCT Address FROM building WHERE LENGTH(Address) > 0"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT DISTINCT Address FROM building",
          "SELECT DISTINCT building.Address FROM building",
          "SELECT DISTINCT b.Address FROM building b",
          "SELECT Address FROM building GROUP BY Address",
          "SELECT DISTINCT Address FROM building ORDER BY Address",
          "SELECT DISTINCT Address AS DistinctAddresses FROM building",
          "SELECT DISTINCT Address FROM building WHERE Address IS NOT NULL",
          "SELECT DISTINCT(b.Address) FROM building b",
          "SELECT DISTINCT Address FROM building WHERE Address <> ''",
          "SELECT DISTINCT Address FROM building b WHERE b.Address IS NOT NULL"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
          "SELECT b.Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC",
          "SELECT `Completed_Year` FROM `building` ORDER BY `Number_of_Stories` DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESCENDING",
          "SELECT building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Building_ID ASC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC LIMIT ALL",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Building_ID DESC",
          "SELECT Completed_Year FROM building AS b ORDER BY b.Number_of_Stories DESC",
          "SELECT b.Completed_Year FROM building AS b ORDER BY b.Number_of_Stories DESC, b.Building_ID ASC"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
          "SELECT building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC",
          "SELECT `Completed_Year` FROM `building` ORDER BY `Number_of_Stories` DESC",
          "SELECT b.Completed_Year FROM building AS b ORDER BY b.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Building_ID ASC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year DESC",
          "SELECT Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC LIMIT ALL",
          "SELECT building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC, building.Completed_Year DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC FETCH FIRST ALL ROWS ONLY"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
          "SELECT * FROM Channels ORDER BY Channel_Details",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASCENDING",
          "SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details",
          "SELECT Channel_Details FROM Channels ORDER BY 1",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details COLLATE NOCASE",
          "SELECT Channel_Details FROM Channels ORDER BY LOWER(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY UPPER(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC, Channel_ID ASC"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details",
          "SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details COLLATE NOCASE ASC",
          "SELECT Channel_Details FROM Channels ORDER BY UPPER(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY LOWER(Channel_Details) ASC",
          "SELECT Channel_Details FROM Channels ORDER BY ASCII(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY LENGTH(Channel_Details), Channel_Details",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASCENDING",
          "SELECT * FROM Channels ORDER BY Channel_Details ASC"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Services",
          "SELECT COUNT(Service_ID) FROM Services",
          "SELECT COUNT(*) AS TotalServices FROM Services",
          "SELECT COUNT(Service_ID) AS ServiceCount FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) AS UniqueServiceCount FROM Services",
          "SELECT COUNT(1) FROM Services",
          "SELECT COUNT(1) AS NumberOfServices FROM Services",
          "SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL",
          "SELECT COUNT(Service_ID) FROM Services WHERE Service_ID > 0"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Services",
          "SELECT COUNT(Service_ID) FROM Services",
          "SELECT COUNT(*) AS NumberOfServices FROM Services",
          "SELECT COUNT(Service_ID) AS ServiceCount FROM Services",
          "SELECT COUNT(1) FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) AS UniqueServiceCount FROM Services",
          "SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL",
          "SELECT COUNT(Service_ID) FROM Services WHERE Service_ID > 0",
          "SELECT COUNT(*) FROM Services WHERE Service_Details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT a.Analytical_Layer_Type_Code FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS cnt FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY cnt DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) t)",
          "SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) WHERE rank = 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST_VALUE(Analytical_Layer_Type_Code) OVER (ORDER BY COUNT(*) DESC) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC",
          "SELECT AL.Analytical_Layer_Type_Code FROM Analytical_Layer AL GROUP BY AL.Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1",
          "SELECT A.Analytical_Layer_Type_Code FROM Analytical_Layer A GROUP BY A.Analytical_Layer_Type_Code ORDER BY COUNT(A.Analytical_Layer_Type_Code) DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT FIRST(Analytical_Layer_Type_Code) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS Counts)",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT Services.Service_Details FROM Services, Customers_and_Services, Customers WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS, Customers AS C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch')",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services, Customers_and_Services, Customers WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS, Customers AS C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Services.Service_ID HAVING COUNT(Customers_and_Services.Customer_ID) > 3",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(DISTINCT CS.Customer_ID) > 3",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3)",
          "SELECT S.Service_Details FROM Services AS S JOIN Customers_and_Services AS CS ON S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(CS.Customer_ID) > 3",
          "SELECT Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID GROUP BY CS.Service_ID HAVING COUNT(CS.Customer_ID) > 3)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(CS.Customer_ID) > 3",
          "SELECT Service_Details FROM Services S JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3) AS CS ON S.Service_ID = CS.Service_ID",
          "SELECT S.Service_Details FROM Services S WHERE (SELECT COUNT(*) FROM Customers_and_Services CS WHERE CS.Service_ID = S.Service_ID) > 3 GROUP BY S.Service_ID"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(DISTINCT CS.Customer_ID) > 3",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) > 3)",
          "SELECT S.Service_Details FROM Services S INNER JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3) AS CS ON S.Service_ID = CS.Service_ID",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(CS.Customer_ID) > 3",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT NULL FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)",
          "SELECT S.Service_Details FROM Services S WHERE (SELECT COUNT(*) FROM Customers_and_Services CS WHERE CS.Service_ID = S.Service_ID GROUP BY CS.Service_ID) > 3",
          "SELECT Service_Details FROM Services S JOIN (SELECT Service_ID, COUNT(*) AS Cnt FROM Customers_and_Services GROUP BY Service_ID HAVING Cnt > 3) CS ON S.Service_ID = CS.Service_ID",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS GROUP BY CS.Service_ID HAVING COUNT(CS.Customer_ID) > 3)",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Services.Service_ID HAVING COUNT(DISTINCT Customers_and_Services.Customer_ID) > 3"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC LIMIT 1",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC LIMIT 1)",
          "SELECT TOP 1 C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT (SELECT Customer_Details FROM Customers WHERE Customer_ID = CS.Customer_ID) AS MostFrequentCustomer FROM Customers_and_Services CS GROUP BY CS.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(Service_ID) = MAX(COUNT(Service_ID)))",
          "SELECT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID HAVING COUNT(CS.Service_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Service_ID) AS Count FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM (SELECT Customer_ID, COUNT(*) AS usage_count FROM Customers_and_Services GROUP BY Customer_ID ORDER BY usage_count DESC) WHERE ROWNUM = 1)",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID GROUP BY CS.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC LIMIT 1",
          "SELECT TOP 1 C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CS.Service_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC LIMIT 1) CS ON C.Customer_ID = CS.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID HAVING COUNT(CS.Service_ID) = (SELECT MAX(COUNT(Service_ID)) FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID HAVING COUNT(CS.Service_ID) = (SELECT MAX(COUNT(Service_ID)) FROM Customers_and_Services GROUP BY Customer_ID)",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY CS.Customer_ID HAVING COUNT(CS.Service_ID) = (SELECT MAX(COUNT(Service_ID)) FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)",
          "SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1",
          "SELECT (SELECT Customer_Details FROM Customers WHERE Customer_ID = cs.Customer_ID) AS Customer_Name FROM Customers_and_Services cs GROUP BY cs.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1",
          "SELECT TOP 1 Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC)",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT cs.Customer_ID FROM Customers_and_Services cs GROUP BY cs.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1)",
          "SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID = (SELECT cs.Customer_ID FROM Customers_and_Services cs GROUP BY cs.Customer_ID HAVING COUNT(DISTINCT cs.Service_ID) = (SELECT MAX(Service_Count) FROM (SELECT COUNT(DISTINCT Service_ID) AS Service_Count FROM Customers_and_Services GROUP BY Customer_ID) tmp))",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS Num_Services FROM Customers_and_Services GROUP BY Customer_ID ORDER BY Num_Services DESC) AS ServiceCount LIMIT 1)",
          "SELECT c.Customer_Details FROM Customers c INNER JOIN (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS Service_Count FROM Customers_and_Services GROUP BY Customer_ID) cs ON c.Customer_ID = cs.Customer_ID ORDER BY cs.Service_Count DESC LIMIT 1",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC, Customer_ID ASC LIMIT 1)",
          "SELECT c.Customer_Details FROM Customers c WHERE EXISTS (SELECT 1 FROM Customers_and_Services cs WHERE cs.Customer_ID = c.Customer_ID GROUP BY cs.Customer_ID HAVING COUNT(DISTINCT cs.Service_ID) >= ALL (SELECT COUNT(DISTINCT cs2.Service_ID) FROM Customers_and_Services cs2 GROUP BY cs2.Customer_ID))"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(DISTINCT CS.Service_ID) DESC LIMIT 1",
          "SELECT TOP 1 C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(DISTINCT CS.Service_ID) DESC",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(DISTINCT CS.Service_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY CS.Customer_ID HAVING COUNT(DISTINCT CS.Service_ID) = (SELECT MAX(COUNT(DISTINCT Service_ID)) FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS ServiceCount FROM Customers_and_Services GROUP BY Customer_ID) CS ON C.Customer_ID = CS.Customer_ID ORDER BY CS.ServiceCount DESC LIMIT 1",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID ORDER BY COUNT(DISTINCT CS.Service_ID) DESC LIMIT 1)",
          "SELECT FIRST(Customer_Details) FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID HAVING COUNT(DISTINCT CS.Service_ID) = (SELECT MAX(COUNT(DISTINCT Service_ID)) FROM Customers_and_Services GROUP BY Customer_ID))"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT C.Customer_Details FROM Customers C LEFT JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = Customers.Customer_ID)",
          "SELECT Customer_Details FROM Customers EXCEPT SELECT Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customers_and_Services)",
          "SELECT Customer_Details FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT CS.Customer_ID FROM Customers_and_Services CS)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT OUTER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT c.Customer_Details FROM Customers c LEFT JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID)",
          "SELECT Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT c.Customer_Details FROM Customers c WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services cs WHERE cs.Customer_ID = c.Customer_ID)",
          "SELECT Customer_Details FROM Customers EXCEPT SELECT Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customers_and_Services)",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)",
          "SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT cs.Customer_ID FROM Customers_and_Services cs)",
          "SELECT DISTINCT c.Customer_Details FROM Customers c LEFT OUTER JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Customers_and_Services_ID IS NULL"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(Service_ID) ASC LIMIT 1)",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT TOP 1 Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC)",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY CS.Service_ID HAVING COUNT(CS.Service_ID) = (SELECT MIN(COUNT(Service_ID)) FROM Customers_and_Services GROUP BY Service_ID))",
          "SELECT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID AND CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC FETCH FIRST 1 ROW ONLY)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers_and_Services GROUP BY Service_ID))",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Service_ID ORDER BY COUNT(CS.Customer_ID) ASC LIMIT 1)",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM (SELECT Service_ID, COUNT(*) AS cnt FROM Customers_and_Services GROUP BY Service_ID ORDER BY cnt ASC LIMIT 1) AS LeastUsed))",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)) CS ON C.Customer_ID = CS.Customer_ID"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(Service_ID) ASC LIMIT 1)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID AND CS.Service_ID = (SELECT MIN(Service_ID) FROM (SELECT Service_ID, COUNT(*) AS cnt FROM Customers_and_Services GROUP BY Service_ID ORDER BY cnt ASC LIMIT 1) AS LeastUsed)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers_and_Services GROUP BY Service_ID))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID AND CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) AS S ON CS.Service_ID = S.Service_ID",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) AS LeastUsed ON CS.Service_ID = LeastUsed.Service_ID)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE EXISTS (SELECT * FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(UNIQUE Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Customers_and_Services_Details FROM Customers_and_Services)",
          "SELECT DISTINCT COUNT(Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) AS DistinctDetailsCount FROM Customers_and_Services",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services GROUP BY Customers_and_Services_Details",
          "SELECT COUNT(DISTINCT(Customers_and_Services_Details)) FROM Customers_and_Services",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Customers_and_Services_Details FROM Customers_and_Services GROUP BY Customers_and_Services_Details)",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services ORDER BY Customers_and_Services_Details"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers_and_Services",
          "SELECT COUNT(Customers_and_Services_ID) FROM Customers_and_Services",
          "SELECT COUNT(DISTINCT Customers_and_Services_ID) FROM Customers_and_Services",
          "SELECT COUNT(*) FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL",
          "SELECT COUNT(Customers_and_Services_ID) FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL",
          "SELECT COUNT(DISTINCT Customers_and_Services_ID) FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL",
          "SELECT COUNT(*) AS TotalCount FROM Customers_and_Services",
          "SELECT COUNT(*) FROM Customers_and_Services WHERE Customers_and_Services_Details <> ''",
          "SELECT COUNT(*) FROM Customers_and_Services WHERE Customers_and_Services_Details != ''",
          "SELECT COUNT(Customers_and_Services_ID) FROM Customers_and_Services WHERE Customers_and_Services_Details <> ''"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details CONTAINS 'Kutch'",
          "SELECT Customer_Details FROM Customers WHERE INSTR(Customer_Details, 'Kutch') > 0",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details REGEXP 'Kutch'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details ILIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE POSITION('Kutch' IN Customer_Details) > 0",
          "SELECT Customer_Details FROM Customers WHERE CHARINDEX('Kutch', Customer_Details) > 0",
          "SELECT Customer_Details FROM Customers WHERE PATINDEX('%Kutch%', Customer_Details) > 0",
          "SELECT Customer_Details FROM Customers WHERE MATCH(Customer_Details) AGAINST ('Kutch' IN NATURAL LANGUAGE MODE)"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE CS.Service_ID = S.Service_ID AND C.Customer_Details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Service_ID = S.Service_ID AND CI.Status_Code = 'good')",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID LEFT JOIN Customers C ON CS.Customer_ID = C.Customer_ID LEFT JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch' INTERSECT SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C, Customer_Interactions CI WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' OR S.Service_ID = CI.Service_ID AND CI.Status_Code = 'good'",
          "SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) OR EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Status_Code = 'good' AND CI.Service_ID = S.Service_ID)",
          "SELECT DISTINCT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID LEFT JOIN Customers C ON CS.Customer_ID = C.Customer_ID LEFT JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C, Customer_Interactions CI WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Service_ID = S.Service_ID AND CI.Status_Code = 'good'",
          "SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services CS INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS, Customers C WHERE CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch') OR S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customers.Customer_Details = 'Hardy Kutch' AND Customer_Interactions.Status_Code = 'bad'",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C, Customer_Interactions CI WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND CI.Service_ID = S.Service_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE CI.Status_Code = 'bad' AND CS.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
          "SELECT DISTINCT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = Services.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad')",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Status_Code = 'bad' AND Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) AND EXISTS (SELECT * FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = S.Service_ID)",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') AND S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' AND Customer_Interactions.Status_Code = 'bad'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')",
          "SELECT S.Service_Details FROM Services S, Customers C, Customer_Interactions CI WHERE S.Service_ID = CI.Service_ID AND CI.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Status_Code = 'bad' AND Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Status_Code = 'bad' AND Customer_Interactions.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customer_Interactions CI JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE CI.Service_ID = S.Service_ID AND CI.Status_Code = 'bad' AND C.Customer_Details = 'Hardy Kutch')",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customer_Interactions CI, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND CI.Service_ID = S.Service_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'"
        ]
      ]
    },
    {
      "id": 381,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'",
          "SELECT Services.Service_Details FROM Services, Customer_Interactions, Channels WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Customer_Interactions.Channel_ID = Channels.Channel_ID AND Channels.Channel_Details = '15 ij'",
          "SELECT S.Service_Details FROM Services AS S, Customer_Interactions AS CI, Channels AS C WHERE S.Service_ID = CI.Service_ID AND CI.Channel_ID = C.Channel_ID AND C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Channel_ID = (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customer_Interactions CI, Channels C WHERE S.Service_ID = CI.Service_ID AND CI.Channel_ID = C.Channel_ID AND C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customer_Interactions JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Channels.Channel_Details = '15 ij')",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID INNER JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT DISTINCT Services.Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.* FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'",
          "SELECT * FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions, Channels WHERE Customer_Interactions.Channel_ID = Channels.Channel_ID AND Channels.Channel_Details = '15 ij')",
          "SELECT Services.Service_Details FROM Services, Customer_Interactions, Channels WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Customer_Interactions.Channel_ID = Channels.Channel_ID AND Channels.Channel_Details = '15 ij'",
          "SELECT S.Service_Details FROM Services AS S JOIN Customer_Interactions AS CI ON S.Service_ID = CI.Service_ID JOIN Channels AS C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT Services.* FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customer_Interactions CI, Channels C WHERE S.Service_ID = CI.Service_ID AND CI.Channel_ID = C.Channel_ID AND C.Channel_Details = '15 ij'",
          "SELECT * FROM Services WHERE EXISTS (SELECT 1 FROM Customer_Interactions JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Channels.Channel_Details = '15 ij')",
          "SELECT Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channel_Details = '15 ij'"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT C.* FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customers.* FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT DISTINCT Customers.* FROM Customers, Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT * FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT Customers.* FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT C.* FROM Customers C WHERE EXISTS (SELECT * FROM Customer_Interactions CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad')",
          "SELECT DISTINCT C.* FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT DISTINCT Customer_Details FROM Customers, Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customer_Details FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT DISTINCT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers AS C JOIN Customer_Interactions AS CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'Success'",
          "SELECT COUNT(DISTINCT Integration_Platform_ID) FROM Integration_Platform INNER JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Status_Code = 'Success'",
          "SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform, Customer_Interactions WHERE Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID AND Customer_Interactions.Status_Code = 'Success'",
          "SELECT COUNT(*) FROM Integration_Platform ip JOIN Customer_Interactions ci ON ip.Customer_Interaction_ID = ci.Customer_Interaction_ID WHERE ci.Status_Code = 'Success'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Status_Code = 'Success')",
          "SELECT COUNT(*) FROM Integration_Platform ip INNER JOIN Customer_Interactions ci ON ip.Customer_Interaction_ID = ci.Customer_Interaction_ID AND ci.Status_Code = 'Success'",
          "SELECT COUNT(DISTINCT ip.Integration_Platform_ID) FROM Integration_Platform ip, Customer_Interactions ci WHERE ip.Customer_Interaction_ID = ci.Customer_Interaction_ID AND ci.Status_Code = 'Success'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID AND Status_Code = 'Success')",
          "SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform INNER JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'Success'",
          "SELECT COUNT(*) FROM Integration_Platform ip LEFT JOIN Customer_Interactions ci ON ip.Customer_Interaction_ID = ci.Customer_Interaction_ID WHERE ci.Status_Code = 'Success'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details LIKE '%failed%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%failed%'))",
          "SELECT DISTINCT Customers.Customer_Details FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID INNER JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details LIKE '%failed%'",
          "SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI, Integration_Platform IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details LIKE '%failed%'",
          "SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details LIKE '%failed%'",
          "SELECT Customer_Details FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Integration_Platform.Integration_Platform_Details LIKE '%failed%')",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID LEFT JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details LIKE '%failed%'",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CI.Customer_ID FROM Customer_Interactions CI JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details LIKE '%failed%')",
          "SELECT DISTINCT Customers.Customer_Details FROM Customers, Customer_Interactions, Integration_Platform WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID AND Integration_Platform.Integration_Platform_Details LIKE '%failed%'",
          "SELECT C.Customer_Details FROM Customers AS C INNER JOIN Customer_Interactions AS CI ON C.Customer_ID = CI.Customer_ID INNER JOIN Integration_Platform AS IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details LIKE '%failed%'"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail'))",
          "SELECT DISTINCT Customer_Details FROM Customers, Customer_Interactions, Integration_Platform WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID AND Integration_Platform_Details = 'Fail'",
          "SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI, Integration_Platform IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details = 'Fail'",
          "SELECT Customer_Details FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Integration_Platform_Details = 'Fail')",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID INNER JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID LEFT JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT * FROM Integration_Platform IP JOIN Customer_Interactions CI ON IP.Customer_Interaction_ID = CI.Customer_Interaction_ID WHERE CI.Customer_ID = C.Customer_ID AND IP.Integration_Platform_Details = 'Fail')",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CI.Customer_ID FROM Customer_Interactions CI INNER JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail')",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT CI.Customer_ID FROM Customer_Interactions CI, Integration_Platform IP WHERE CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details = 'Fail')"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)",
          "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
          "SELECT S.* FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Service_ID IS NULL",
          "SELECT Service_Details FROM Services WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID)",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)",
          "SELECT Services.* FROM Services LEFT OUTER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Service_ID IS NULL",
          "SELECT DISTINCT Services.Service_Details FROM Services WHERE Services.Service_ID NOT IN (SELECT Customers_and_Services.Service_ID FROM Customers_and_Services)",
          "SELECT Service_Details FROM Services EXCEPT SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID",
          "SELECT * FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)",
          "SELECT Service_Details FROM Services AS S WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID)"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)",
          "SELECT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Service_ID IS NULL",
          "SELECT Service_Details FROM Services WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID)",
          "SELECT DISTINCT Service_Details FROM Services EXCEPT SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID",
          "SELECT Service_Details FROM Services S WHERE S.Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
          "SELECT S.Service_Details FROM Services S WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE CS.Service_ID = S.Service_ID)",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID NOT IN (SELECT CS.Service_ID FROM Customers_and_Services CS)",
          "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)",
          "SELECT S.Service_Details FROM Services S LEFT OUTER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_ID IS NULL",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT a.Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_Layer_Type_Code) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(*), Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(Analytical_ID) AS Count, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Total FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Total_Usage FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT a.Analytical_Layer_Type_Code, COUNT(a.Analytical_Layer_Type_Code) AS Usage_Count FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(Analytical_ID), Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Analytical_Layer_Type_Code",
          "SELECT COUNT(*) AS NumberOfUses, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Total FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS TotalUses FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied')",
          "SELECT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT DISTINCT Service_Details FROM Services, Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE 'unsatisfied'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services_Details = 'unsatisfied')",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details = 'unsatisfied')"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied')",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE 'unsatisfied')",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services_Details = 'unsatisfied'",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services_Details = 'unsatisfied')",
          "SELECT Service_Details FROM Services, Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services_Details = 'unsatisfied'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied')",
          "SELECT S.Service_Details FROM Services AS S JOIN Customers_and_Services AS CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details = 'unsatisfied'",
          "SELECT DISTINCT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details = 'unsatisfied'"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Vehicles",
          "SELECT COUNT(id) FROM Vehicles",
          "SELECT COUNT(*) AS TotalVehicles FROM Vehicles",
          "SELECT COUNT(Vehicles.id) FROM Vehicles",
          "SELECT COUNT(1) FROM Vehicles",
          "SELECT COUNT(Vehicles.*) FROM Vehicles",
          "SELECT COUNT(DISTINCT id) FROM Vehicles",
          "SELECT COUNT(DISTINCT Vehicles.id) FROM Vehicles",
          "SELECT COUNT(*) FROM Vehicles WHERE id IS NOT NULL",
          "SELECT COUNT(*) FROM Vehicles WHERE 'id' IS NOT NULL"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Vehicles",
          "SELECT COUNT(*) FROM Vehicles",
          "SELECT COUNT(id) FROM Vehicles",
          "SELECT COUNT(Vehicles.id) FROM Vehicles",
          "SELECT COUNT(1) FROM Vehicles",
          "SELECT COUNT(Vehicles.*) FROM Vehicles",
          "SELECT COUNT(DISTINCT id) FROM Vehicles",
          "SELECT COUNT(DISTINCT Vehicles.id) FROM Vehicles",
          "SELECT COUNT(*) AS NumberOfVehicles FROM Vehicles",
          "SELECT COUNT(Vehicles.id) AS VehicleCount FROM Vehicles"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles ORDER BY Model_year DESC",
          "SELECT V.name FROM Vehicles V ORDER BY V.Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESCENDING",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC",
          "SELECT `name` FROM `Vehicles` ORDER BY `Model_year` DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, id ASC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC LIMIT ALL",
          "SELECT name AS VehicleName FROM Vehicles ORDER BY Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name ASC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, Cost_per_25_miles ASC"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles ORDER BY Model_year DESC",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC",
          "SELECT `name` FROM `Vehicles` ORDER BY `Model_year` DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESCENDING",
          "SELECT V.name FROM Vehicles V ORDER BY V.Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, id ASC",
          "SELECT name AS VehicleName FROM Vehicles ORDER BY Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC LIMIT ALL",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESC, Vehicles.id ASC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name ASC"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles",
          "SELECT DISTINCT Vehicles.Type_of_powertrain FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL",
          "SELECT DISTINCT(Type_of_powertrain) FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL GROUP BY Type_of_powertrain",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles AS v",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles v WHERE v.Type_of_powertrain IS NOT NULL"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles",
          "SELECT DISTINCT Vehicles.Type_of_powertrain FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v",
          "SELECT DISTINCT t.Type_of_powertrain FROM Vehicles AS t",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain <> ''",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL AND Type_of_powertrain <> ''",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL ORDER BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles V WHERE V.Model_year = 2013 OR V.Model_year = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year BETWEEN 2013 AND 2014",
          "SELECT name AS Vehicle_Name, Type_of_powertrain AS Powertrain_Type, Annual_fuel_cost AS Annual_Cost FROM Vehicles WHERE Model_year >= 2013 AND Model_year <= 2014",
          "SELECT `name`, `Type_of_powertrain`, `Annual_fuel_cost` FROM `Vehicles` WHERE `Model_year` = 2013 OR `Model_year` = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014) ORDER BY name",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION ALL SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014 ORDER BY Model_year DESC",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014 GROUP BY Model_year, name, Type_of_powertrain, Annual_fuel_cost"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles V WHERE V.Model_year = 2013 OR V.Model_year = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year BETWEEN 2013 AND 2014",
          "SELECT name AS Vehicle_Name, Type_of_powertrain AS Powertrain_Type, Annual_fuel_cost AS Yearly_Fuel_Cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT `name`, `Type_of_powertrain`, `Annual_fuel_cost` FROM `Vehicles` WHERE `Model_year` = 2013 OR `Model_year` = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year >= 2013 AND Model_year <= 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles AS V WHERE V.Model_year IN (2013, 2014)",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2",
          "SELECT v1.Type_of_powertrain FROM Vehicles v1 JOIN Vehicles v2 ON v1.Type_of_powertrain = v2.Type_of_powertrain WHERE v1.Model_year = 2014 AND v2.Model_year = 2013",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 UNION ALL SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) AS subquery GROUP BY Type_of_powertrain HAVING COUNT(*) > 1",
          "WITH Year2014 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014), Year2013 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) SELECT Type_of_powertrain FROM Year2014 INTERSECT SELECT Type_of_powertrain FROM Year2013",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain IN (SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013)",
          "SELECT DISTINCT a.Type_of_powertrain FROM Vehicles a, Vehicles b WHERE a.Type_of_powertrain = b.Type_of_powertrain AND a.Model_year = 2014 AND b.Model_year = 2013",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 OR Model_year = 2013 GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING SUM(CASE WHEN Model_year = 2014 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Model_year = 2013 THEN 1 ELSE 0 END) > 0",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 UNION SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 HAVING COUNT(DISTINCT Model_year) = 2"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014",
          "SELECT DISTINCT v1.Type_of_powertrain FROM Vehicles v1 JOIN Vehicles v2 ON v1.Type_of_powertrain = v2.Type_of_powertrain WHERE v1.Model_year = 2013 AND v2.Model_year = 2014",
          "SELECT v.Type_of_powertrain FROM Vehicles v WHERE EXISTS (SELECT 1 FROM Vehicles WHERE Model_year = 2013 AND Type_of_powertrain = v.Type_of_powertrain) AND EXISTS (SELECT 1 FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain = v.Type_of_powertrain)",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2",
          "WITH Year2013 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013), Year2014 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) SELECT Type_of_powertrain FROM Year2013 INTERSECT SELECT Type_of_powertrain FROM Year2014",
          "SELECT a.Type_of_powertrain FROM Vehicles a WHERE a.Model_year = 2013 AND a.Type_of_powertrain IN (SELECT b.Type_of_powertrain FROM Vehicles b WHERE b.Model_year = 2014)",
          "SELECT DISTINCT Type_of_powertrain FROM (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 UNION ALL SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) AS CombinedYears WHERE CombinedYears.Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) AND CombinedYears.Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(DISTINCT Model_year) AS YearCount FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain) AS Yearly WHERE Yearly.YearCount > 1",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)",
          "SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v INNER JOIN Vehicles w ON v.Type_of_powertrain = w.Type_of_powertrain WHERE v.Model_year = 2013 AND w.Model_year = 2014"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(Vehicles.id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT V.Type_of_powertrain, COUNT(*) FROM Vehicles V GROUP BY V.Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(1) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain AS PowertrainType, COUNT(*) FROM Vehicles GROUP BY PowertrainType",
          "SELECT Type_of_powertrain, COUNT(Vehicles.id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(Vehicles.id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT COUNT(*), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(Vehicles.id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT COUNT(Vehicles.id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) AS Total FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS CountOfVehicles FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Vehicles GROUP BY Type_of_powertrain))",
          "SELECT TOP 1 Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(*) AS num FROM Vehicles GROUP BY Type_of_powertrain) AS subquery ORDER BY num DESC LIMIT 1",
          "SELECT Type_of_powertrain, COUNT(*) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain ORDER BY VehicleCount DESC LIMIT 1",
          "SELECT v.Type_of_powertrain FROM Vehicles v GROUP BY v.Type_of_powertrain ORDER BY COUNT(v.id) DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC LIMIT 1",
          "SELECT Type_of_powertrain, MAX(Count) FROM (SELECT Type_of_powertrain, COUNT(*) AS Count FROM Vehicles GROUP BY Type_of_powertrain) AS VehicleCounts",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT v.Type_of_powertrain FROM Vehicles v GROUP BY v.Type_of_powertrain ORDER BY COUNT(v.Type_of_powertrain) DESC LIMIT 1",
          "SELECT TOP 1 Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC",
          "SELECT Type_of_powertrain, COUNT(*) AS Count FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Count DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(*) AS num FROM Vehicles GROUP BY Type_of_powertrain) AS subquery ORDER BY num DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Vehicles GROUP BY Type_of_powertrain) as counts)",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT FIRST(Type_of_powertrain) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC, Type_of_powertrain ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT min(Annual_fuel_cost), max(Annual_fuel_cost), avg(Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles",
          "SELECT minimum(Annual_fuel_cost), maximum(Annual_fuel_cost), average(Annual_fuel_cost) FROM Vehicles",
          "SELECT MINIMUM(Annual_fuel_cost), MAXIMUM(Annual_fuel_cost), AVERAGE(Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinimumCost, MAX(Annual_fuel_cost) AS MaximumCost, AVG(Annual_fuel_cost) AS AverageCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS \"Minimum Annual Fuel Cost\", MAX(Annual_fuel_cost) AS \"Maximum Annual Fuel Cost\", AVG(Annual_fuel_cost) AS \"Average Annual Fuel Cost\" FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) \"Minimum Annual Fuel Cost\", MAX(Annual_fuel_cost) \"Maximum Annual Fuel Cost\", AVG(Annual_fuel_cost) \"Average Annual Fuel Cost\" FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) Minimum, MAX(Annual_fuel_cost) Maximum, AVG(Annual_fuel_cost) Average FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MinimumAnnualFuelCost, MAX(Annual_fuel_cost) MaximumAnnualFuelCost, AVG(Annual_fuel_cost) AverageAnnualFuelCost FROM Vehicles"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles",
          "SELECT MIN(Vehicles.Annual_fuel_cost), MAX(Vehicles.Annual_fuel_cost), AVG(Vehicles.Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) minimum, MAX(Annual_fuel_cost) maximum, AVG(Annual_fuel_cost) average FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles WHERE Annual_fuel_cost IS NOT NULL",
          "SELECT MIN(Annual_fuel_cost) MinFuelCost, MAX(Annual_fuel_cost) MaxFuelCost, AVG(Annual_fuel_cost) AvgFuelCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinimumAnnualFuelCost, MAX(Annual_fuel_cost) AS MaximumAnnualFuelCost, AVG(Annual_fuel_cost) AS AverageAnnualFuelCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinAnnualCost, MAX(Annual_fuel_cost) AS MaxAnnualCost, AVG(Annual_fuel_cost) AS AverageAnnualCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS Minimum, MAX(Annual_fuel_cost) AS Maximum, AVG(Annual_fuel_cost) AS Average FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS LowCost, MAX(Annual_fuel_cost) AS HighCost, AVG(Annual_fuel_cost) AS MeanCost FROM Vehicles"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate",
          "SELECT name AS Vehicle_Name, Model_year AS ModelYear FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT `name`, `Model_year` FROM `Vehicles` WHERE `City_fuel_economy_rate` <= `Highway_fuel_economy_rate`",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY Model_year",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Type_of_powertrain IS NOT NULL",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Combined_fuel_economy_rate IS NOT NULL",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Cost_per_25_miles IS NOT NULL"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate",
          "SELECT name AS Vehicle_Name, Model_year AS Vehicle_Model_Year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY Model_year",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY name",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year IS NOT NULL",
          "SELECT DISTINCT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate GROUP BY name, Model_year"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2",
          "SELECT V.Type_of_powertrain, AVG(V.Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles V GROUP BY V.Type_of_powertrain HAVING COUNT(V.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS AverageFuelCost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1) GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS AverageAnnualFuelCost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2",
          "SELECT v.Type_of_powertrain, AVG(v.Annual_fuel_cost) FROM Vehicles v GROUP BY v.Type_of_powertrain HAVING COUNT(v.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2)",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1",
          "SELECT v.Type_of_powertrain, AVG(v.Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles v GROUP BY v.Type_of_powertrain HAVING COUNT(v.Type_of_powertrain) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) >= 2"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age, membership_credit FROM Customers",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers",
          "SELECT c.name, c.age, c.membership_credit FROM Customers AS c",
          "SELECT `name`, `age`, `membership_credit` FROM `Customers`",
          "SELECT name AS CustomerName, age AS CustomerAge, membership_credit AS MembershipCredit FROM Customers",
          "SELECT * FROM Customers WHERE id IS NOT NULL",
          "SELECT name, age, membership_credit FROM Customers WHERE name IS NOT NULL",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers WHERE Customers.id > 0",
          "SELECT name, age, membership_credit FROM Customers ORDER BY name",
          "SELECT DISTINCT name, age, membership_credit FROM Customers"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age, membership_credit FROM Customers",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers",
          "SELECT `name`, `age`, `membership_credit` FROM `Customers`",
          "SELECT name AS CustomerName, age AS CustomerAge, membership_credit AS MembershipCredit FROM Customers",
          "SELECT C.name, C.age, C.membership_credit FROM Customers C",
          "SELECT name, age, membership_credit FROM Customers WHERE id IS NOT NULL",
          "SELECT * FROM Customers WHERE 1=1",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers WHERE Customers.id > 0",
          "SELECT name, age, membership_credit FROM Customers ORDER BY name",
          "SELECT DISTINCT name, age, membership_credit FROM Customers"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1",
          "SELECT Customers.name, Customers.age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT C.name, C.age FROM Customers C ORDER BY C.membership_credit DESC LIMIT 1",
          "SELECT name, age FROM Customers WHERE membership_credit IN (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT TOP 1 name, age FROM Customers ORDER BY membership_credit DESC",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC FETCH FIRST 1 ROW ONLY",
          "SELECT C.name, C.age FROM Customers C WHERE C.membership_credit = (SELECT MAX(membership_credit) FROM Customers C)",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1 OFFSET 0",
          "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) AS rnk FROM Customers) WHERE rnk = 1"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1",
          "SELECT c.name, c.age FROM Customers c ORDER BY c.membership_credit DESC FETCH FIRST 1 ROW ONLY",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT TOP 1 name, age FROM Customers ORDER BY membership_credit DESC",
          "SELECT name, age FROM Customers WHERE membership_credit IN (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(name), FIRST(age) FROM Customers ORDER BY membership_credit DESC",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC ROWS 1",
          "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) AS rnk FROM Customers) WHERE rnk = 1",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT average(age) FROM Customers WHERE membership_credit > (SELECT average(membership_credit) FROM Customers)",
          "SELECT AVG(Customers.age) FROM Customers WHERE Customers.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) AS AverageAge FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers GROUP BY id)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE id IS NOT NULL)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit IS NOT NULL)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit > 0)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit >= 0)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit <> NULL)"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(Customers.age) FROM Customers WHERE Customers.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) AS AverageAge FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(c.age) FROM Customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers GROUP BY id)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers c)",
          "SELECT AVG(c.age) FROM Customers c WHERE c.membership_credit > (SELECT AVG(c2.membership_credit) FROM Customers c2)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE id IS NOT NULL)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit IS NOT NULL)",
          "SELECT AVG(Customers.age) FROM Customers WHERE Customers.membership_credit > (SELECT AVG(Customers.membership_credit) FROM Customers)"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT * FROM Discount",
          "SELECT id, name, membership_credit FROM Discount",
          "SELECT Discount.* FROM Discount",
          "SELECT `id`, `name`, `membership_credit` FROM `Discount`",
          "SELECT d.* FROM Discount AS d",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount",
          "SELECT ALL id, name, membership_credit FROM Discount",
          "SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount",
          "SELECT * FROM Discount WHERE 1=1",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount WHERE Discount.id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT * FROM Discount",
          "SELECT id, name, membership_credit FROM Discount",
          "SELECT Discount.* FROM Discount",
          "SELECT `id`, `name`, `membership_credit` FROM `Discount`",
          "SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount",
          "SELECT D.* FROM Discount D",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount",
          "SELECT * FROM Discount ORDER BY id",
          "SELECT * FROM `Discount`",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount ORDER BY Discount.id ASC"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, SUM(R.total_hours) FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS Total_Renting_Hours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT v.name, SUM(r.total_hours) FROM Vehicles v, Renting_history r WHERE v.id = r.vehicles_id GROUP BY v.name",
          "SELECT name, SUM(total_hours) FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT Vehicles.name AS Vehicle_Name, SUM(Renting_history.total_hours) AS Total_Hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT v.name, total_hours_sum FROM Vehicles v JOIN (SELECT vehicles_id, SUM(total_hours) AS total_hours_sum FROM Renting_history GROUP BY vehicles_id) r ON v.id = r.vehicles_id",
          "SELECT name, total_hours FROM (SELECT Vehicles.name AS name, SUM(Renting_history.total_hours) AS total_hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name) AS Subquery",
          "SELECT Vehicles.name, Aggregate.total_hours FROM Vehicles JOIN (SELECT vehicles_id, SUM(total_hours) AS total_hours FROM Renting_history GROUP BY vehicles_id) AS Aggregate ON Vehicles.id = Aggregate.vehicles_id",
          "SELECT name, SUM(total_hours) AS Total_Hours_Rented FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, SUM(R.total_hours) FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS TotalHours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT V.name, SUM(R.total_hours) AS TotalRentalHours FROM Vehicles AS V INNER JOIN Renting_history AS R ON V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT Vehicles.name, TOTAL(Renting_history.total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT name, SUM(total_hours) AS TotalHoursRented FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT V.name, SUM(R.total_hours) FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT V.name, SUM(R.total_hours) FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.vehicles_id IS NULL",
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)",
          "SELECT Vehicles.name FROM Vehicles LEFT OUTER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL",
          "SELECT name FROM Vehicles EXCEPT SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id",
          "SELECT name FROM Vehicles WHERE NOT EXISTS (SELECT 1 FROM Renting_history WHERE Vehicles.id = Renting_history.vehicles_id)",
          "SELECT V.name FROM Vehicles V WHERE NOT EXISTS (SELECT NULL FROM Renting_history R WHERE R.vehicles_id = V.id)",
          "SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)",
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history WHERE vehicles_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.vehicles_id IS NULL",
          "SELECT name FROM Vehicles WHERE NOT EXISTS (SELECT 1 FROM Renting_history WHERE vehicles_id = Vehicles.id)",
          "SELECT Vehicles.name FROM Vehicles LEFT OUTER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL",
          "SELECT name FROM Vehicles EXCEPT SELECT name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id",
          "SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V WHERE NOT EXISTS (SELECT NULL FROM Renting_history R WHERE R.vehicles_id = V.id)",
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)",
          "SELECT DISTINCT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT C.name FROM Customers C JOIN Renting_history R ON C.id = R.customer_id GROUP BY C.name HAVING COUNT(R.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)",
          "SELECT Customers.name FROM Customers INNER JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.name HAVING COUNT(Renting_history.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT Customers.name FROM Customers, Renting_history WHERE Customers.id = Renting_history.customer_id GROUP BY Customers.name HAVING COUNT(Renting_history.id) >= 2",
          "SELECT C.name FROM Customers C, Renting_history R WHERE C.id = R.customer_id GROUP BY C.name HAVING COUNT(R.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)",
          "SELECT Customers.name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(Renting_history.id) >= 2",
          "SELECT name FROM Customers WHERE EXISTS (SELECT NULL FROM Renting_history WHERE Customers.id = Renting_history.customer_id GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT C.name FROM Customers AS C INNER JOIN Renting_history AS R ON C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.id) >= 2"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)",
          "SELECT C.name FROM Customers C JOIN Renting_history R ON C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.id) >= 2",
          "SELECT Customers.name FROM Customers INNER JOIN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2) AS Subquery ON Customers.id = Subquery.customer_id",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) > 1)",
          "SELECT DISTINCT C.name FROM Customers C, Renting_history R WHERE C.id = R.customer_id GROUP BY R.customer_id HAVING COUNT(R.id) > 1",
          "SELECT name FROM Customers WHERE EXISTS (SELECT NULL FROM Renting_history WHERE Customers.id = customer_id GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT C.name FROM Customers C WHERE (SELECT COUNT(*) FROM Renting_history R WHERE R.customer_id = C.id) >= 2",
          "SELECT name FROM Customers C WHERE (SELECT COUNT(R.id) FROM Renting_history R WHERE R.customer_id = C.id) >= 2",
          "SELECT C.name FROM Customers C WHERE 2 <= (SELECT COUNT(*) FROM Renting_history R WHERE R.customer_id = C.id)",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Model_year FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Renting_history.vehicles_id ORDER BY COUNT(Renting_history.vehicles_id) DESC LIMIT 1",
          "SELECT V.name, V.Model_year FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY R.vehicles_id HAVING COUNT(R.vehicles_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(vehicles_id) AS COUNT FROM Renting_history GROUP BY vehicles_id) AS SubQuery)",
          "SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT V.name, V.Model_year FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(R.id) DESC LIMIT 1",
          "SELECT TOP 1 V.name, V.Model_year FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(R.id) DESC",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT TOP 1 vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC)",
          "SELECT V.name, V.Model_year FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id, V.name, V.Model_year ORDER BY COUNT(R.vehicles_id) DESC LIMIT 1",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = MAX(COUNT(vehicles_id)))"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Model_year FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Renting_history.vehicles_id ORDER BY COUNT(Renting_history.vehicles_id) DESC LIMIT 1",
          "SELECT V.name, V.Model_year FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(R.vehicles_id) DESC LIMIT 1",
          "SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(vehicles_id) AS cnt FROM Renting_history GROUP BY vehicles_id)))",
          "SELECT top 1 V.name, V.Model_year FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id ORDER BY COUNT(*) DESC",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT TOP 1 vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC)",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT V.name, V.Model_year FROM Vehicles V INNER JOIN (SELECT vehicles_id, COUNT(*) AS rental_count FROM Renting_history GROUP BY vehicles_id ORDER BY rental_count DESC LIMIT 1) AS R ON V.id = R.vehicles_id"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT Vehicles.name FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC",
          "SELECT name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC",
          "SELECT V.name, SUM(R.total_hours) AS TotalHours FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name ORDER BY TotalHours DESC",
          "SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT V.name FROM Vehicles V INNER JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id = ANY (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS Total_Renting_Hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY Total_Renting_Hours DESC"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT Vehicles.name FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC",
          "SELECT name FROM Vehicles JOIN (SELECT vehicles_id, SUM(total_hours) AS total FROM Renting_history GROUP BY vehicles_id) AS SubQuery ON Vehicles.id = SubQuery.vehicles_id ORDER BY SubQuery.total DESC",
          "SELECT V.name FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY SUM(Renting_history.total_hours) DESC",
          "SELECT V.name FROM Vehicles V INNER JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS TotalHours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY TotalHours DESC"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT D.name FROM Discount AS D INNER JOIN Renting_history AS R ON D.id = R.discount_id GROUP BY D.id ORDER BY COUNT(R.id) DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(discount_id) DESC LIMIT 1)",
          "SELECT TOP 1 D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(R.id) DESC",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Renting_history GROUP BY discount_id) T))",
          "SELECT D.name FROM Discount D JOIN (SELECT discount_id, COUNT(*) AS usage_count FROM Renting_history GROUP BY discount_id) AS R ON D.id = R.discount_id ORDER BY R.usage_count DESC LIMIT 1",
          "SELECT name FROM (SELECT D.name, COUNT(*) AS count FROM Discount D LEFT JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name) AS Result ORDER BY count DESC LIMIT 1",
          "SELECT D.name FROM Discount D WHERE D.id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(discount_id) DESC LIMIT 1)",
          "SELECT (SELECT name FROM Discount WHERE id = R.discount_id) AS DiscountName FROM Renting_history R GROUP BY R.discount_id ORDER BY COUNT(R.discount_id) DESC LIMIT 1",
          "SELECT D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(R.id) DESC LIMIT 1",
          "SELECT TOP 1 D.name FROM Discount D INNER JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM Discount WHERE id = (SELECT TOP 1 discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC)",
          "SELECT D.name FROM Discount D INNER JOIN (SELECT discount_id, COUNT(*) AS cnt FROM Renting_history GROUP BY discount_id) AS R ON D.id = R.discount_id ORDER BY R.cnt DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT name FROM Discount D WHERE D.id = (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Renting_history GROUP BY discount_id))"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours > 30",
          "SELECT v.name, v.Type_of_powertrain FROM Vehicles v, Renting_history r WHERE v.id = r.vehicles_id AND r.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id AND R.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE EXISTS (SELECT 1 FROM Renting_history WHERE vehicles_id = Vehicles.id AND total_hours > 30)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id AND Renting_history.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles AS V JOIN Renting_history AS R ON V.id = R.vehicles_id WHERE R.total_hours > 30"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.id HAVING SUM(Renting_history.total_hours) > 30",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles AS V JOIN Renting_history AS R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE EXISTS (SELECT 1 FROM Renting_history WHERE Vehicles.id = vehicles_id GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate) AS AvgCityFuel, AVG(Highway_fuel_economy_rate) AS AvgHighwayFuel, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AverageCityFuelRate, AVG(Highway_fuel_economy_rate) AS AverageHighwayFuelRate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(Vehicles.City_fuel_economy_rate), AVG(Vehicles.Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS CityRate, AVG(Highway_fuel_economy_rate) AS HighwayRate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) city_avg, AVG(Highway_fuel_economy_rate) highway_avg FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) average_city_fuel, AVG(Highway_fuel_economy_rate) average_highway_fuel FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS CityFuelAverage, AVG(Highway_fuel_economy_rate) AS HighwayFuelAverage FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AverageCity, AVG(Highway_fuel_economy_rate) AS AverageHighway FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate) AS AvgCityRate, AVG(Highway_fuel_economy_rate) AS AvgHighwayRate, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(Vehicles.City_fuel_economy_rate), AVG(Vehicles.Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AverageCityFuelRate, AVG(Highway_fuel_economy_rate) AS AverageHighwayFuelRate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) average_city_fuel, AVG(Highway_fuel_economy_rate) average_highway_fuel FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) city_avg, AVG(Highway_fuel_economy_rate) highway_avg FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS CityFuelEconomyAverage, AVG(Highway_fuel_economy_rate) AS HighwayFuelEconomyAverage FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate) cityFuelAvg, AVG(Highway_fuel_economy_rate) highwayFuelAvg, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AvgCityFuel, AVG(Highway_fuel_economy_rate) AS AvgHighwayFuel FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT AVG(amount_of_loan) FROM Student_Loans",
          "SELECT average(amount_of_loan) FROM Student_Loans",
          "SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageLoanAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan IS NOT NULL",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan > 0",
          "SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id HAVING COUNT(student_id) > 1",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Students)",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Students WHERE student_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT AVG(amount_of_loan) FROM Student_Loans",
          "SELECT average(amount_of_loan) FROM Student_Loans",
          "SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageLoanAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan IS NOT NULL",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan > 0",
          "SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id HAVING COUNT(student_id) > 1",
          "SELECT AVG(amount_of_loan) AS avg_loan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Students)"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) >= 2 AND (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)",
          "SELECT S.bio_data, S.student_id FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) >= 2 AND NOT EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id GROUP BY D.student_id HAVING COUNT(D.detention_id) >= 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) INTERSECT SELECT bio_data, student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT S.bio_data, S.student_id FROM Students S, Classes C WHERE S.student_id = C.student_id GROUP BY S.student_id, S.bio_data HAVING COUNT(C.class_id) >= 2 AND (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.student_id = S.student_id GROUP BY C.student_id HAVING COUNT(C.class_id) >= 2) AND NOT EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id GROUP BY D.student_id HAVING COUNT(D.detention_id) >= 2)",
          "SELECT S.bio_data, S.student_id FROM Students S INNER JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) >= 2 AND COALESCE((SELECT COUNT(D.detention_id) FROM Detention D WHERE D.student_id = S.student_id), 0) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) >= 2)",
          "SELECT S.bio_data, S.student_id FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT D.detention_id) < 2 AND COUNT(DISTINCT (SELECT class_id FROM Classes C WHERE C.student_id = S.student_id)) >= 2",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE (SELECT COUNT(class_id) FROM Classes C WHERE C.student_id = S.student_id) >= 2 AND (SELECT COUNT(detention_id) FROM Detention D WHERE D.student_id = S.student_id) < 2"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data FROM Students S WHERE S.student_id IN (SELECT C.student_id FROM Classes C GROUP BY C.student_id HAVING COUNT(*) >= 2) OR S.student_id IN (SELECT D.student_id FROM Detention D GROUP BY D.student_id HAVING COUNT(*) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2 UNION SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)",
          "SELECT DISTINCT S.bio_data, S.student_id FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id LEFT JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) >= 2 OR COUNT(DISTINCT D.detention_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS class_count FROM Classes GROUP BY student_id) AS ClassCounts WHERE class_count >= 2) OR student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS detention_count FROM Detention GROUP BY student_id) AS DetentionCounts WHERE detention_count < 2)",
          "SELECT S.bio_data, S.student_id FROM Students S JOIN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2 UNION ALL SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2) AS Sub ON S.student_id = Sub.student_id",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.student_id = S.student_id GROUP BY C.student_id HAVING COUNT(*) >= 2) OR EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id GROUP BY D.student_id HAVING COUNT(*) < 2)",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) >= 2 OR (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE S.student_id IN (SELECT C.student_id FROM Classes C GROUP BY C.student_id HAVING COUNT(C.class_id) >= 2) OR S.student_id IN (SELECT D.student_id FROM Detention D GROUP BY D.student_id HAVING COUNT(D.detention_id) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T2.teacher_details FROM Teachers AS T2 JOIN Classes AS T1 ON T2.teacher_id = T1.teacher_id WHERE T1.class_details LIKE '%data%' AND T2.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT T2.teacher_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' AND T1.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT T2.teacher_details FROM Teachers T2 WHERE EXISTS (SELECT 1 FROM Classes T1 WHERE T1.teacher_id = T2.teacher_id AND T1.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM Classes T1 WHERE T1.teacher_id = T2.teacher_id AND T1.class_details LIKE 'net%')",
          "SELECT T2.teacher_details FROM Teachers T2 JOIN Classes T1 ON T2.teacher_id = T1.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM Teachers T2 JOIN Classes T1 ON T2.teacher_id = T1.teacher_id WHERE T1.class_details LIKE 'net%'",
          "SELECT DISTINCT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') EXCEPT SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%' AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%'))",
          "SELECT T2.teacher_details FROM Teachers AS T2 WHERE EXISTS (SELECT * FROM Classes AS T1 WHERE T1.teacher_id = T2.teacher_id AND T1.class_details LIKE '%data%') AND NOT EXISTS (SELECT * FROM Classes AS T1 WHERE T1.teacher_id = T2.teacher_id AND T1.class_details LIKE 'net%')",
          "SELECT DISTINCT T2.teacher_details FROM Teachers T2 INNER JOIN Classes T1 ON T2.teacher_id = T1.teacher_id WHERE T1.class_details LIKE '%data%' AND NOT EXISTS (SELECT * FROM Classes T3 WHERE T3.teacher_id = T2.teacher_id AND T3.class_details LIKE 'net%')",
          "SELECT T2.teacher_details FROM Teachers T2 WHERE T2.teacher_id IN (SELECT T1.teacher_id FROM Classes T1 WHERE T1.class_details LIKE '%data%') AND T2.teacher_id NOT IN (SELECT T1.teacher_id FROM Classes T1 WHERE T1.class_details LIKE 'net%')"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T1.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' AND NOT EXISTS (SELECT 1 FROM Classes C2 WHERE C2.teacher_id = T.teacher_id AND C2.class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T, Classes C WHERE T.teacher_id = C.teacher_id AND C.class_details LIKE '%data%' AND T.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' AND T.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') EXCEPT SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT T1.teacher_details FROM Teachers T1 WHERE EXISTS (SELECT * FROM Classes T2 WHERE T2.teacher_id = T1.teacher_id AND T2.class_details LIKE '%data%') AND NOT EXISTS (SELECT * FROM Classes T3 WHERE T3.teacher_id = T1.teacher_id AND T3.class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT NULL FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE '%data%') AND NOT EXISTS (SELECT NULL FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C WHERE C.class_details LIKE '%data%') AND T.teacher_id NOT IN (SELECT C.teacher_id FROM Classes C WHERE C.class_details LIKE 'net%')",
          "SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' GROUP BY T.teacher_id HAVING SUM(CASE WHEN C.class_details LIKE 'net%' THEN 1 ELSE 0 END) = 0"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id LEFT JOIN Student_Loans L ON S.student_id = L.student_id WHERE D.student_id IS NULL AND L.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE NOT EXISTS (SELECT 1 FROM Detention WHERE Detention.student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans WHERE Student_Loans.student_id = Students.student_id)",
          "SELECT bio_data FROM Students AS S WHERE NOT EXISTS (SELECT * FROM Detention AS D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans AS L WHERE L.student_id = S.student_id)",
          "SELECT S.bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention) AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION ALL SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) INTERSECT SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE NOT EXISTS (SELECT 1 FROM Detention WHERE Detention.student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans WHERE Student_Loans.student_id = Students.student_id)",
          "SELECT bio_data FROM Students EXCEPT SELECT bio_data FROM Students JOIN Detention ON Students.student_id = Detention.student_id EXCEPT SELECT bio_data FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id",
          "SELECT S.bio_data FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id LEFT JOIN Student_Loans L ON S.student_id = L.student_id WHERE D.student_id IS NULL AND L.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S WHERE NOT EXISTS (SELECT NULL FROM Detention D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT NULL FROM Student_Loans L WHERE L.student_id = S.student_id)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION ALL SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students AS S WHERE NOT EXISTS (SELECT * FROM Detention AS D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans AS L WHERE L.student_id = S.student_id)",
          "SELECT bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention) AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT S.amount_of_loan, S.date_of_loan FROM Student_Loans S JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) A ON S.student_id = A.student_id",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) > 1)",
          "SELECT L.amount_of_loan, L.date_of_loan FROM Student_Loans L INNER JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) > 1) AS A ON L.student_id = A.student_id",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT L.amount_of_loan, L.date_of_loan FROM Student_Loans L WHERE EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = L.student_id GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Achievements GROUP BY student_id) AS sub WHERE sub.cnt >= 2)",
          "SELECT L.amount_of_loan, L.date_of_loan FROM Student_Loans L JOIN (SELECT student_id, COUNT(*) AS num_achievements FROM Achievements GROUP BY student_id HAVING num_achievements >= 2) AS A ON L.student_id = A.student_id",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT L.amount_of_loan, L.date_of_loan FROM Student_Loans L WHERE L.student_id IN (SELECT A.student_id FROM Achievements A GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, SL.amount_of_loan, SL.date_of_loan FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id JOIN Achievements A ON S.student_id = A.student_id GROUP BY S.student_id HAVING COUNT(A.achievement_id) >= 2",
          "SELECT student_id, amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL INNER JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) AS A ON SL.student_id = A.student_id",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = SL.student_id GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) AS A ON SL.student_id = A.student_id",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL, (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) AS A WHERE SL.student_id = A.student_id",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL JOIN Achievements A ON SL.student_id = A.student_id GROUP BY SL.student_id HAVING COUNT(A.achievement_id) >= 2",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL INNER JOIN Achievements A ON SL.student_id = A.student_id GROUP BY SL.student_id HAVING COUNT(A.achievement_id) >= 2",
          "SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T, Classes C WHERE T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 T.teacher_id, T.teacher_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T LEFT JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T RIGHT JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN (SELECT teacher_id, COUNT(*) AS num_classes FROM Classes GROUP BY teacher_id ORDER BY num_classes DESC LIMIT 1) C ON T.teacher_id = C.teacher_id",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE T.teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id HAVING COUNT(C.class_id) = (SELECT MAX(class_count) FROM (SELECT teacher_id, COUNT(class_id) AS class_count FROM Classes GROUP BY teacher_id) AS subquery)"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers JOIN Classes USING(teacher_id) GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers AS T INNER JOIN Classes AS C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers, Classes WHERE Teachers.teacher_id = Classes.teacher_id GROUP BY Teachers.teacher_id ORDER BY COUNT(Classes.class_id) DESC LIMIT 1",
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1, Classes T2 WHERE T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(T2.class_id) DESC LIMIT 1",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T LEFT JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS subquery)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id HAVING COUNT(C.class_id) >= ALL (SELECT COUNT(class_id) FROM Classes GROUP BY teacher_id)",
          "SELECT TOP 1 T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC",
          "SELECT teacher_id, teacher_details FROM Teachers JOIN Classes ON teacher_id = Classes.teacher_id GROUP BY teacher_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT detention_summary FROM Detention",
          "SELECT DISTINCT other_details FROM Detention",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL",
          "SELECT DISTINCT other_details FROM Detention WHERE other_details IS NOT NULL",
          "SELECT DISTINCT D.detention_summary FROM Detention D",
          "SELECT DISTINCT D.other_details FROM Detention D",
          "SELECT DISTINCT D.detention_summary FROM Detention D WHERE D.detention_summary IS NOT NULL",
          "SELECT DISTINCT D.other_details FROM Detention D WHERE D.other_details IS NOT NULL",
          "SELECT DISTINCT detention_summary, other_details FROM Detention",
          "SELECT DISTINCT D.detention_summary, D.other_details FROM Detention D"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT detention_summary FROM Detention",
          "SELECT UNIQUE detention_summary FROM Detention",
          "SELECT detention_summary FROM Detention GROUP BY detention_summary",
          "SELECT DISTINCT d.detention_summary FROM Detention d",
          "SELECT DISTINCT detention_summary FROM Detention ORDER BY detention_summary",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary <> ''",
          "SELECT DISTINCT detention_summary FROM Detention d WHERE d.detention_summary IS NOT NULL",
          "SELECT DISTINCT detention_summary FROM Detention d ORDER BY d.detention_summary",
          "SELECT DISTINCT detention_summary FROM Detention d WHERE d.detention_summary <> ''"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details, R.address_type_description FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Ref_Address_Types R ON SA.address_type_code = R.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data AS Personal_Details, student_details AS Student_Details, address_type_description AS Address_Type FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT A.bio_data, A.student_details, B.address_type_description FROM Students A JOIN Students_Addresses C ON A.student_id = C.student_id JOIN Ref_Address_Types B ON C.address_type_code = B.address_type_code",
          "SELECT student_details, bio_data, address_type_description FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students CROSS JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id CROSS JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students JOIN Students_Addresses USING (student_id) JOIN Ref_Address_Types USING (address_type_code)"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details, R.address_type_description FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Ref_Address_Types R ON SA.address_type_code = R.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data AS Personal_Details, student_details AS Student_Details, address_type_description AS Address_Type FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT A.bio_data, A.student_details, C.address_type_description FROM Students A, Students_Addresses B, Ref_Address_Types C WHERE A.student_id = B.student_id AND B.address_type_code = C.address_type_code",
          "SELECT student_details, bio_data, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students RIGHT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id RIGHT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students CROSS JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id CROSS JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT bio_data, student_details, address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT A.address_details, S.bio_data FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Addresses A ON SA.address_id = A.address_id",
          "SELECT address_details, bio_data FROM Addresses JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id JOIN Students ON Students_Addresses.student_id = Students.student_id",
          "SELECT Addresses.address_details, Students.bio_data FROM Addresses INNER JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id INNER JOIN Students ON Students_Addresses.student_id = Students.student_id",
          "SELECT address_details, bio_data FROM Students, Addresses, Students_Addresses WHERE Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT A.address_details AS Address, S.bio_data AS BioData FROM Students S, Students_Addresses SA, Addresses A WHERE S.student_id = SA.student_id AND SA.address_id = A.address_id",
          "SELECT DISTINCT Addresses.address_details, Students.bio_data FROM Addresses, Students_Addresses, Students WHERE Addresses.address_id = Students_Addresses.address_id AND Students_Addresses.student_id = Students.student_id",
          "SELECT address_details, bio_data FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT A.address_details, S.bio_data FROM Students S, Addresses A, Students_Addresses SA WHERE S.student_id = SA.student_id AND A.address_id = SA.address_id",
          "SELECT address_details AS 'Address Details', bio_data AS 'Biographical Information' FROM Addresses JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id JOIN Students ON Students_Addresses.student_id = Students.student_id",
          "SELECT address_details, bio_data FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, A.address_details FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Addresses A ON SA.address_id = A.address_id",
          "SELECT bio_data, address_details FROM Students, Addresses, Students_Addresses WHERE Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT Students.bio_data AS Bio, Addresses.address_details AS Address FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data, address_details FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data AS StudentBio, address_details AS StudentAddress FROM Students, Addresses INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT Students.bio_data, Addresses.address_details FROM Students, Addresses, Students_Addresses WHERE Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT Students.bio_data, Addresses.address_details FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data, address_details FROM Students CROSS JOIN Addresses JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT bio_data AS Biography, address_details AS Address FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT s.bio_data, t.date_of_transcript FROM Students s, Transcripts t WHERE s.student_id = t.student_id",
          "SELECT bio_data, date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT bio_data AS Student_Bio, date_of_transcript AS Transcript_Date FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id",
          "SELECT bio_data, date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data AS BioData, Transcripts.date_of_transcript AS TranscriptDate FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT bio_data, date_of_transcript FROM Students s INNER JOIN Transcripts t ON s.student_id = t.student_id"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT s.bio_data, t.date_of_transcript FROM Students s, Transcripts t WHERE s.student_id = t.student_id",
          "SELECT bio_data AS BiographicalData, date_of_transcript AS TranscriptDate FROM Students JOIN Transcripts USING(student_id)",
          "SELECT bio_data, date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id",
          "SELECT bio_data, date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT bio_data AS StudentBioData, date_of_transcript AS TranscriptIssuanceDate FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT s.bio_data, t.date_of_transcript FROM Students AS s INNER JOIN Transcripts AS t ON s.student_id = t.student_id"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(*) AS student_count, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY num_students DESC LIMIT 1",
          "SELECT TOP 1 behaviour_monitoring_details, COUNT(*) AS total FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total DESC",
          "SELECT behaviour_monitoring_details, COUNT(student_id) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery)",
          "SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, MAX(student_count) FROM (SELECT behaviour_monitoring_details, COUNT(*) AS student_count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS counts_table",
          "SELECT behaviour_monitoring_details, COUNT(*) AS total_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total_students DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS count_of_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count_of_students DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(*) AS number_of_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY number_of_students DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT COUNT(*), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC",
          "SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, MAX(count) FROM (SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery",
          "SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS counts)",
          "SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS total FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(*) AS Frequency FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY Frequency DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(*) = 3 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = 3 ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data, student_details FROM Students WHERE student_id = (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = 3 ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3 ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT S.bio_data, S.student_details FROM Students S INNER JOIN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = 3) AS B ON S.student_id = B.student_id ORDER BY (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details DESC LIMIT 1)",
          "SELECT S.bio_data, S.student_details FROM Students S, Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT top 1 S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3 ORDER BY COUNT(*) DESC",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3) ORDER BY (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details DESC LIMIT 1)",
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = B.behaviour_monitoring_details) = 3 GROUP BY B.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) AND (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(*) = 3",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = 3)",
          "SELECT DISTINCT S.bio_data, S.student_details FROM Students S, Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3)",
          "SELECT S.bio_data, S.student_details FROM Students S INNER JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3",
          "SELECT bio_data, student_details FROM Students WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring WHERE Students.student_id = Behaviour_Monitoring.student_id GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3)",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B GROUP BY B.behaviour_monitoring_details HAVING COUNT(B.student_id) = 3)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_id) = 3)",
          "SELECT S.bio_data, S.student_details FROM Students S JOIN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) B ON S.student_id = B.student_id",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(DISTINCT student_id) = 3)"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT B.behaviour_monitoring_details) = 1 AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING MIN(behaviour_monitoring_details) = MAX(behaviour_monitoring_details) AND MIN(behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id, behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery))",
          "SELECT S.bio_data FROM Students S WHERE NOT EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(*) < (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1 AND behaviour_monitoring_details = (SELECT TOP 1 behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING EVERY(behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)))",
          "SELECT S.bio_data FROM Students S INNER JOIN (SELECT student_id, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY student_id, behaviour_monitoring_details HAVING behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)) AS B ON S.student_id = B.student_id",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING STRING_AGG(behaviour_monitoring_details, ',') = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING LISTAGG(behaviour_monitoring_details, ',') WITHIN GROUP (ORDER BY behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING ARRAY_AGG(behaviour_monitoring_details ORDER BY behaviour_monitoring_details) = ARRAY[(SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)])"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT S.bio_data FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details ORDER BY COUNT(B.behaviour_monitoring_details) DESC LIMIT 1",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1)",
          "SELECT S.bio_data FROM Students S WHERE S.student_id = (SELECT B.student_id FROM Behaviour_Monitoring B GROUP BY B.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY cnt DESC LIMIT 1) AS T)",
          "SELECT S.bio_data FROM Students S INNER JOIN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) B ON S.student_id = B.student_id",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS Sub))",
          "SELECT S.bio_data FROM Students S JOIN (SELECT student_id, COUNT(*) AS frequency FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY frequency DESC LIMIT 1) B ON S.student_id = B.student_id",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC, student_id LIMIT 1)",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, E.event_date FROM Students S JOIN Student_Events E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT S.bio_data AS StudentBio, E.event_date AS EventDate FROM Students S, Student_Events E WHERE S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT S.bio_data, E.event_date FROM Students AS S INNER JOIN Student_Events AS E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students S JOIN Student_Events E ON S.student_id = E.student_id"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, SE.event_date FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id",
          "SELECT bio_data, event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT `bio_data`, `event_date` FROM `Students` JOIN `Student_Events` ON `Students`.`student_id` = `Student_Events`.`student_id`",
          "SELECT bio_data AS StudentBio, event_date AS EventDate FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students JOIN Student_Events USING(student_id)",
          "SELECT S.bio_data, SE.event_date FROM Students AS S INNER JOIN Student_Events AS SE ON S.student_id = SE.student_id",
          "SELECT bio_data, event_date FROM Students INNER JOIN Student_Events USING(student_id)"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id), event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY COUNT(DISTINCT student_id) DESC LIMIT 1",
          "SELECT COUNT(DISTINCT SE.student_id), SE.event_type_code, RET.event_type_description FROM Student_Events SE INNER JOIN Ref_Event_Types RET ON SE.event_type_code = RET.event_type_code GROUP BY SE.event_type_code ORDER BY COUNT(DISTINCT SE.student_id) DESC LIMIT 1",
          "SELECT TOP 1 COUNT(DISTINCT student_id) AS NumberOfStudents, event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY NumberOfStudents DESC",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS StudentCount FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY StudentCount DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) FROM Student_Events JOIN Ref_Event_Types USING(event_type_code) GROUP BY event_type_code ORDER BY COUNT(DISTINCT student_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS TotalStudents FROM Student_Events INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY TotalStudents DESC LIMIT 1",
          "SELECT A.event_type_code, B.event_type_description, COUNT(DISTINCT A.student_id) AS StudentCount FROM Student_Events A LEFT JOIN Ref_Event_Types B ON A.event_type_code = B.event_type_code GROUP BY A.event_type_code, B.event_type_description ORDER BY StudentCount DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS Total FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY Total DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS CountOfStudents FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY CountOfStudents DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS NumberOfParticipants FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY NumberOfParticipants DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id) AS num_students, event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Student_Events.event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT COUNT(DISTINCT SE.student_id) AS num_students, SE.event_type_code, RET.event_type_description FROM Student_Events SE INNER JOIN Ref_Event_Types RET ON SE.event_type_code = RET.event_type_code GROUP BY SE.event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT COUNT(DISTINCT SE.student_id) AS num_students, SE.event_type_code, RET.event_type_description FROM Student_Events SE, Ref_Event_Types RET WHERE SE.event_type_code = RET.event_type_code GROUP BY SE.event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT TOP 1 COUNT(DISTINCT student_id) AS num_students, event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Student_Events.event_type_code ORDER BY num_students DESC",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types USING(event_type_code) GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT event_type_code, event_type_description, COUNT(DISTINCT student_id) AS num_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A INNER JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT ach.achievement_details, ach_type.achievement_type_description FROM Achievements ach JOIN Ref_Achievement_Type ach_type ON ach.achievement_type_code = ach_type.achievement_type_code",
          "SELECT details.achievement_details, types.achievement_type_description FROM Achievements details JOIN Ref_Achievement_Type types ON details.achievement_type_code = types.achievement_type_code",
          "SELECT a.achievement_details, at.achievement_type_description FROM Achievements a, Ref_Achievement_Type at WHERE a.achievement_type_code = at.achievement_type_code",
          "SELECT achievement_details, achievement_type_description FROM Achievements, Ref_Achievement_Type WHERE Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT a_details.achievement_details, a_type_desc.achievement_type_description FROM Achievements a_details INNER JOIN Ref_Achievement_Type a_type_desc ON a_details.achievement_type_code = a_type_desc.achievement_type_code",
          "SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT achievement_details AS 'Details', achievement_type_description AS 'Type Description' FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT a.achievement_details, r.achievement_type_description FROM Achievements a INNER JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code",
          "SELECT achievement_details, achievement_type_description FROM Achievements, Ref_Achievement_Type WHERE Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT a.achievement_details AS Details, r.achievement_type_description AS Type_Description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code",
          "SELECT achievement_details AS Detail, achievement_type_description AS Description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT ACH.achievement_details, ACH_TYPE.achievement_type_description FROM Achievements ACH JOIN Ref_Achievement_Type ACH_TYPE ON ACH.achievement_type_code = ACH_TYPE.achievement_type_code",
          "SELECT detail.achievement_details, type.achievement_type_description FROM Achievements detail JOIN Ref_Achievement_Type type ON detail.achievement_type_code = type.achievement_type_code",
          "SELECT Achievements.achievement_details, Ref_Achievement_Type.achievement_type_description FROM Achievements, Ref_Achievement_Type WHERE Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT a_details.achievement_details, a_type_desc.achievement_type_description FROM Achievements a_details INNER JOIN Ref_Achievement_Type a_type_desc ON a_details.achievement_type_code = a_type_desc.achievement_type_code"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL",
          "SELECT COUNT(UNIQUE T.teacher_id) FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id LEFT OUTER JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(*) FROM (SELECT DISTINCT T.teacher_id FROM Teachers T, Classes C LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE T.teacher_id = C.teacher_id AND A.achievement_id IS NULL)",
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T, Classes C WHERE T.teacher_id = C.teacher_id AND C.student_id NOT IN (SELECT student_id FROM Achievements)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE EXISTS (SELECT 1 FROM Classes WHERE Teachers.teacher_id = Classes.teacher_id AND student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE NOT EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = C.student_id)",
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL)",
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id NOT IN (SELECT student_id FROM Achievements)",
          "SELECT COUNT(DISTINCT teacher_id) FROM (SELECT teacher_id FROM Classes LEFT JOIN Achievements ON Classes.student_id = Achievements.student_id WHERE Achievements.achievement_id IS NULL) AS Subquery"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements)",
          "SELECT COUNT(UNIQUE teacher_id) FROM Classes WHERE NOT EXISTS (SELECT 1 FROM Achievements WHERE Achievements.student_id = Classes.student_id)",
          "SELECT COUNT(*) FROM (SELECT DISTINCT teacher_id FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements)) AS UniqueTeachers",
          "SELECT COUNT(DISTINCT C.teacher_id) FROM Classes C LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students EXCEPT SELECT student_id FROM Achievements)",
          "SELECT COUNT(DISTINCT C.teacher_id) FROM Classes C WHERE NOT EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = C.student_id)",
          "SELECT COUNT(*) FROM (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING SUM(CASE WHEN student_id IN (SELECT student_id FROM Achievements) THEN 0 ELSE 1 END) > 0) AS Result",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements)"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript, transcript_details FROM Transcripts",
          "SELECT `date_of_transcript`, `transcript_details` FROM `Transcripts`",
          "SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts",
          "SELECT t.date_of_transcript, t.transcript_details FROM Transcripts AS t",
          "SELECT date_of_transcript AS DateOfTranscript, transcript_details AS TranscriptDetails FROM Transcripts",
          "SELECT transcript_details, date_of_transcript FROM Transcripts",
          "SELECT Transcripts.transcript_details, Transcripts.date_of_transcript FROM Transcripts",
          "SELECT t.transcript_details, t.date_of_transcript FROM Transcripts t",
          "SELECT `Transcripts`.`date_of_transcript`, `Transcripts`.`transcript_details` FROM `Transcripts`",
          "SELECT date_of_transcript, transcript_details FROM Transcripts ORDER BY date_of_transcript"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript, transcript_details FROM Transcripts",
          "SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts",
          "SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t",
          "SELECT `date_of_transcript`, `transcript_details` FROM `Transcripts`",
          "SELECT transcript_details, date_of_transcript FROM Transcripts",
          "SELECT date_of_transcript AS Transcript_Date, transcript_details AS Transcript_Detail FROM Transcripts",
          "SELECT T.date_of_transcript, T.transcript_details FROM Transcripts AS T",
          "SELECT date_of_transcript, transcript_details FROM Transcripts ORDER BY date_of_transcript",
          "SELECT * FROM Transcripts WHERE transcript_details IS NOT NULL",
          "SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts ORDER BY Transcripts.date_of_transcript DESC"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements AS a",
          "SELECT achievement_type_code AS Code, achievement_details AS Details, date_achievement AS Date FROM Achievements",
          "SELECT `achievement_type_code`, `achievement_details`, `date_achievement` FROM `Achievements`",
          "SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements",
          "SELECT ACHIEVEMENT_TYPE_CODE, ACHIEVEMENT_DETAILS, DATE_ACHIEVEMENT FROM ACHIEVEMENTS",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC",
          "SELECT DISTINCT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements LIMIT 100"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements AS a",
          "SELECT `achievement_type_code`, `achievement_details`, `date_achievement` FROM `Achievements`",
          "SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements",
          "SELECT ach.achievement_type_code, ach.achievement_details, ach.date_achievement FROM Achievements ach",
          "SELECT A.achievement_type_code, A.achievement_details, A.date_achievement FROM Achievements A",
          "SELECT achievement_type_code AS TypeCode, achievement_details AS Details, date_achievement AS Date FROM Achievements",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement",
          "SELECT * FROM Achievements WHERE achievement_type_code IS NOT NULL",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention",
          "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention",
          "SELECT d.datetime_detention_start, d.datetime_detention_end FROM Detention d",
          "SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`",
          "SELECT Detention.datetime_detention_start AS Start_Time, Detention.datetime_detention_end AS End_Time FROM Detention",
          "SELECT start_time, end_time FROM (SELECT datetime_detention_start AS start_time, datetime_detention_end AS end_time FROM Detention) AS Detention_Times",
          "SELECT * FROM Detention WHERE detention_id IS NOT NULL",
          "SELECT datetime_detention_start AS Detention_Start, datetime_detention_end AS Detention_End FROM Detention",
          "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention WHERE detention_id > 0",
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention ORDER BY datetime_detention_start"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention",
          "SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`",
          "SELECT D.datetime_detention_start, D.datetime_detention_end FROM Detention D",
          "SELECT detention.datetime_detention_start, detention.datetime_detention_end FROM Detention detention",
          "SELECT dt.datetime_detention_start AS Start_Time, dt.datetime_detention_end AS End_Time FROM Detention dt",
          "SELECT start.datetime_detention_start, end.datetime_detention_end FROM Detention AS start JOIN Detention AS end ON start.detention_id = end.detention_id",
          "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention",
          "SELECT * FROM Detention WHERE detention_id IS NOT NULL SELECT datetime_detention_start, datetime_detention_end",
          "SELECT datetime_detention_start AS Detention_Start, datetime_detention_end AS Detention_End FROM Detention",
          "SELECT Detention.datetime_detention_start AS 'Start Time', Detention.datetime_detention_end AS 'End Time' FROM Detention"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details CONTAINS 'Suite'",
          "SELECT `bio_data` FROM `Students` WHERE `student_details` LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE INSTR(student_details, 'Suite') > 0",
          "SELECT bio_data FROM Students WHERE student_details LIKE CONCAT('%', 'Suite', '%')",
          "SELECT S.bio_data FROM Students S WHERE S.student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE POSITION('Suite' IN student_details) > 0",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%' ESCAPE '\\'",
          "SELECT bio_data FROM Students WHERE CHARINDEX('Suite', student_details) > 0",
          "SELECT bio_data FROM Students WHERE student_details REGEXP '.*Suite.*'"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id JOIN Students AS T2 ON T3.student_id = T2.student_id",
          "SELECT teacher_details, student_details FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT A.teacher_details, B.student_details FROM Teachers A, Classes C, Students B WHERE A.teacher_id = C.teacher_id AND C.student_id = B.student_id",
          "SELECT Teachers.teacher_details, Students.student_details FROM Teachers, Classes, Students WHERE Teachers.teacher_id = Classes.teacher_id AND Classes.student_id = Students.student_id",
          "SELECT t.teacher_details, s.student_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id",
          "SELECT teacher_details, student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT T1.teacher_details AS Teacher, T2.student_details AS Student FROM Teachers T1 JOIN Classes T3 ON T1.teacher_id = T3.teacher_id JOIN Students T2 ON T3.student_id = T2.student_id",
          "SELECT DISTINCT Teachers.teacher_details, Students.student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT teacher_details AS TeacherInfo, student_details AS StudentInfo FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers T, Classes C, Students S WHERE T.teacher_id = C.teacher_id AND C.student_id = S.student_id"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id JOIN Students AS T2 ON T3.student_id = T2.student_id",
          "SELECT teacher_details, student_details FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT A.teacher_details, B.student_details FROM Teachers A, Students B, Classes C WHERE A.teacher_id = C.teacher_id AND B.student_id = C.student_id",
          "SELECT teacher.teacher_details, student.student_details FROM Teachers teacher, Students student, Classes class WHERE teacher.teacher_id = class.teacher_id AND student.student_id = class.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers T, Classes C, Students S WHERE T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
          "SELECT Teachers.teacher_details, Students.student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT t.teacher_details, s.student_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id",
          "SELECT teacher_details, student_details FROM Teachers, Students, Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Students S ON C.student_id = S.student_id",
          "SELECT T1.teacher_details AS TeacherDetails, T2.student_details AS StudentDetails FROM Teachers T1 INNER JOIN Classes C ON T1.teacher_id = C.teacher_id INNER JOIN Students T2 ON C.student_id = T2.student_id"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT T.teacher_id, COUNT(class_id) AS total_classes FROM Teachers AS T JOIN Classes AS C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY total_classes DESC LIMIT 1",
          "SELECT C.teacher_id, COUNT(C.class_id) FROM Classes C GROUP BY C.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
          "SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT TOP 1 teacher_id, COUNT(*) FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC",
          "SELECT teacher_id, MAX(course_count) FROM (SELECT teacher_id, COUNT(*) AS course_count FROM Classes GROUP BY teacher_id) AS subquery",
          "SELECT teacher_id, COUNT(class_id) AS total_classes FROM Classes GROUP BY teacher_id HAVING total_classes = (SELECT MAX(total_classes) FROM (SELECT COUNT(class_id) AS total_classes FROM Classes GROUP BY teacher_id) AS subquery)",
          "SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id HAVING num_courses = (SELECT MAX(num_courses) FROM (SELECT COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id) sub)",
          "SELECT teacher_id, COUNT(class_id) AS class_count FROM Classes GROUP BY teacher_id ORDER BY class_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT teacher_id, COUNT(*) AS num_classes FROM Classes GROUP BY teacher_id ORDER BY num_classes DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT T.teacher_id, COUNT(C.class_id) AS total_classes FROM Teachers AS T JOIN Classes AS C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY total_classes DESC LIMIT 1",
          "SELECT Classes.teacher_id, COUNT(Classes.class_id) AS course_count FROM Classes GROUP BY Classes.teacher_id ORDER BY course_count DESC LIMIT 1",
          "SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT C.teacher_id, COUNT(*) FROM Classes C GROUP BY C.teacher_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 teacher_id, COUNT(class_id) AS total_courses FROM Classes GROUP BY teacher_id ORDER BY total_courses DESC",
          "SELECT teacher_id, COUNT(class_id) AS courses_taught FROM Classes GROUP BY teacher_id ORDER BY courses_taught DESC LIMIT 1",
          "SELECT teacher_id, COUNT(*) AS number_of_classes FROM Classes GROUP BY teacher_id ORDER BY number_of_classes DESC LIMIT 1",
          "SELECT C.teacher_id, COUNT(*) AS class_count FROM Classes C GROUP BY C.teacher_id ORDER BY class_count DESC LIMIT 1",
          "SELECT teacher_id, COUNT(class_id) AS num_of_courses FROM Classes GROUP BY teacher_id ORDER BY num_of_courses DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1",
          "SELECT C.student_id, COUNT(C.class_id) AS num_courses FROM Classes C GROUP BY C.student_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT TOP 1 student_id, COUNT(*) FROM Classes GROUP BY student_id ORDER BY COUNT(*) DESC",
          "SELECT student_id, COUNT(class_id) AS total_courses FROM Classes GROUP BY student_id ORDER BY total_courses DESC FETCH FIRST ROW ONLY",
          "SELECT student_id, COUNT(class_id) AS courses_taken FROM Classes GROUP BY student_id ORDER BY courses_taken DESC LIMIT 1",
          "SELECT student_id, COUNT(*) AS max_courses FROM Classes GROUP BY student_id ORDER BY max_courses DESC LIMIT 1",
          "SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id) AS subquery)",
          "SELECT student_id, COUNT(*) FROM Classes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(courses) FROM (SELECT COUNT(*) AS courses FROM Classes GROUP BY student_id) AS course_counts)",
          "SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT Classes.student_id, COUNT(Classes.class_id) AS total_classes FROM Classes GROUP BY Classes.student_id ORDER BY total_classes DESC LIMIT 1",
          "SELECT c.student_id, COUNT(c.class_id) AS course_count FROM Classes c GROUP BY c.student_id ORDER BY course_count DESC LIMIT 1",
          "SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT TOP 1 student_id, COUNT(*) AS courses_taken FROM Classes GROUP BY student_id ORDER BY courses_taken DESC",
          "SELECT student_id, COUNT(class_id) AS number_of_classes FROM Classes GROUP BY student_id ORDER BY number_of_classes DESC FETCH FIRST 1 ROW ONLY",
          "SELECT student_id, COUNT(*) FROM Classes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id) AS subquery)",
          "SELECT student_id, COUNT(class_id) AS class_count FROM Classes GROUP BY student_id ORDER BY class_count DESC LIMIT 1",
          "SELECT student_id, COUNT(*) AS total_courses FROM Classes GROUP BY student_id ORDER BY total_courses DESC LIMIT 1",
          "SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id HAVING COUNT(class_id) = (SELECT MAX(courses) FROM (SELECT COUNT(class_id) AS courses FROM Classes GROUP BY student_id) AS course_counts) LIMIT 1"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) = 2",
          "SELECT DISTINCT S.student_id, S.student_details FROM Students S, Classes C WHERE S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) = 2",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S INNER JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(*) = 2",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S WHERE EXISTS (SELECT 1 FROM Classes C WHERE S.student_id = C.student_id GROUP BY C.student_id HAVING COUNT(C.class_id) = 2)",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) as num_classes FROM Classes GROUP BY student_id) as ClassCount WHERE num_classes = 2)",
          "SELECT S.student_id, S.student_details FROM Students S JOIN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2) AS Filtered ON S.student_id = Filtered.student_id",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2)"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2)",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) = 2",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) = 2",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S INNER JOIN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2) AS C ON S.student_id = C.student_id",
          "SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S, Classes C WHERE S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) = 2",
          "SELECT DISTINCT S.student_id, S.bio_data, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) = 2",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.student_id = S.student_id GROUP BY C.student_id HAVING COUNT(C.class_id) = 2)",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT student_id FROM Classes C GROUP BY C.student_id HAVING COUNT(C.class_id) = 2)",
          "SELECT S.student_id, S.bio_data, S.student_details FROM Students S WHERE 2 = (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id GROUP BY C.student_id)"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT detention_type_code, detention_type_description FROM Detention JOIN Ref_Detention_Type ON Detention.detention_type_code = Ref_Detention_Type.detention_type_code GROUP BY Detention.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT d.detention_type_code, r.detention_type_description FROM Detention d INNER JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code GROUP BY d.detention_type_code ORDER BY COUNT(d.detention_type_code) ASC LIMIT 1",
          "SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt LEFT JOIN Detention d ON dt.detention_type_code = d.detention_type_code GROUP BY dt.detention_type_code ORDER BY COUNT(d.detention_id) ASC LIMIT 1",
          "SELECT TOP 1 r.detention_type_code, r.detention_type_description FROM Detention d RIGHT JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code GROUP BY r.detention_type_code, r.detention_type_description ORDER BY COUNT(d.detention_id)",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r LEFT OUTER JOIN Detention d ON r.detention_type_code = d.detention_type_code GROUP BY r.detention_type_code, r.detention_type_description ORDER BY COUNT(d.detention_id) ASC LIMIT 1",
          "SELECT MIN(d.detention_type_code) AS LeastCommonCode, r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code GROUP BY r.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r LEFT JOIN Detention d ON r.detention_type_code = d.detention_type_code GROUP BY r.detention_type_code HAVING COUNT(d.detention_id) = (SELECT MIN(COUNT(detention_id)) FROM Detention GROUP BY detention_type_code)",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r JOIN (SELECT detention_type_code, COUNT(*) AS cnt FROM Detention GROUP BY detention_type_code ORDER BY cnt ASC LIMIT 1) d ON r.detention_type_code = d.detention_type_code",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r WHERE r.detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r, Detention d WHERE r.detention_type_code = d.detention_type_code GROUP BY r.detention_type_code, r.detention_type_description ORDER BY COUNT(d.detention_id) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt INNER JOIN Detention d ON dt.detention_type_code = d.detention_type_code GROUP BY dt.detention_type_code ORDER BY COUNT(d.detention_type_code) ASC LIMIT 1",
          "SELECT a.detention_type_code, b.detention_type_description FROM (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) a JOIN Ref_Detention_Type b ON a.detention_type_code = b.detention_type_code",
          "SELECT TOP 1 dt.detention_type_code, dt.detention_type_description FROM Detention d RIGHT JOIN Ref_Detention_Type dt ON d.detention_type_code = dt.detention_type_code GROUP BY dt.detention_type_code, dt.detention_type_description ORDER BY COUNT(d.detention_type_code)",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r WHERE r.detention_type_code IN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT MIN(detention_type_code) FROM (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC) AS LeastCommon)",
          "SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r JOIN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) d ON r.detention_type_code = d.detention_type_code",
          "SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt LEFT JOIN Detention d ON dt.detention_type_code = d.detention_type_code GROUP BY dt.detention_type_code, dt.detention_type_description HAVING COUNT(d.detention_type_code) = (SELECT MIN(COUNT(detention_type_code)) FROM Detention GROUP BY detention_type_code)",
          "SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt WHERE dt.detention_type_code = (SELECT d.detention_type_code FROM Detention d GROUP BY d.detention_type_code ORDER BY COUNT(d.detention_type_code) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, SL.other_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT S.bio_data, SL.other_details FROM Students AS S, Student_Loans AS SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students JOIN Student_Loans USING(student_id) WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT S.bio_data, SL.other_details FROM Students S INNER JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id)",
          "SELECT bio_data, other_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id = Students.student_id)",
          "SELECT S.bio_data, SL.other_details FROM Students S LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students CROSS JOIN Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT S.bio_data, SL.other_details FROM Students S RIGHT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING amount_of_loan > AVG(amount_of_loan))",
          "SELECT bio_data, student_details FROM Students WHERE EXISTS (SELECT 1 FROM Student_Loans WHERE Students.student_id = Student_Loans.student_id AND amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data, student_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT S.bio_data, S.student_details FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans SL WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT MIN(date_of_loan) FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
          "SELECT MIN(date_of_loan) AS EarliestLoanDate FROM Student_Loans",
          "SELECT TOP 1 date_of_loan FROM Student_Loans ORDER BY date_of_loan",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan LIMIT 1",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans)",
          "SELECT MIN(date_of_loan) FROM Student_Loans GROUP BY student_id ORDER BY MIN(date_of_loan) LIMIT 1",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC FETCH FIRST 1 ROW ONLY",
          "SELECT FIRST(date_of_loan) FROM Student_Loans ORDER BY date_of_loan ASC",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans) LIMIT 1"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT MIN(date_of_loan) FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
          "SELECT MIN(date_of_loan) AS EarliestLoanDate FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan LIMIT 1",
          "SELECT * FROM (SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC) AS subquery LIMIT 1",
          "SELECT TOP 1 date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans)",
          "SELECT MIN(date_of_loan) FROM Student_Loans GROUP BY student_id ORDER BY MIN(date_of_loan) LIMIT 1",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC FETCH FIRST 1 ROW ONLY",
          "SELECT FIRST(date_of_loan) FROM Student_Loans ORDER BY date_of_loan ASC"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S INNER JOIN Student_Loans SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC LIMIT 1",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans LIMIT 1))",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans) LIMIT 1)",
          "SELECT S.bio_data FROM Students S WHERE S.student_id = (SELECT SL.student_id FROM Student_Loans SL WHERE SL.amount_of_loan = (SELECT MIN(SL.amount_of_loan) FROM Student_Loans SL))"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC LIMIT 1",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan LIMIT 1)",
          "SELECT S.bio_data FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id ORDER BY SL.amount_of_loan LIMIT 1",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT MIN(student_id) FROM Student_Loans GROUP BY student_id ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S INNER JOIN Student_Loans SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC FETCH FIRST 1 ROW ONLY",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC, date_of_loan DESC LIMIT 1)",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Loans SL WHERE S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC LIMIT 1)",
          "SELECT TOP 1 S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM (SELECT student_id, amount_of_loan FROM Student_Loans ORDER BY amount_of_loan ASC) AS SL LIMIT 1)"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT t2.date_of_transcript FROM Transcripts AS t2 JOIN Student_Loans AS t1 ON t2.student_id = t1.student_id WHERE t1.amount_of_loan = (SELECT max(amount_of_loan) FROM Student_Loans)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)",
          "SELECT t.date_of_transcript FROM Transcripts t INNER JOIN (SELECT student_id, max(amount_of_loan) as max_loan FROM Student_Loans GROUP BY student_id) sl ON t.student_id = sl.student_id",
          "SELECT Transcripts.date_of_transcript FROM Transcripts JOIN Student_Loans ON Transcripts.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT t.date_of_transcript FROM Transcripts t, Student_Loans s WHERE t.student_id = s.student_id AND s.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))",
          "SELECT MAX(t.date_of_transcript) FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id WHERE s.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))",
          "SELECT t.date_of_transcript FROM Transcripts t WHERE EXISTS (SELECT 1 FROM Student_Loans s WHERE s.student_id = t.student_id AND s.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))",
          "SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans s ON t.student_id = s.student_id ORDER BY s.amount_of_loan DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC LIMIT 1)",
          "SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id GROUP BY sl.student_id ORDER BY SUM(sl.amount_of_loan) DESC LIMIT 1",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC LIMIT 1)",
          "SELECT t.date_of_transcript FROM Transcripts t INNER JOIN (SELECT student_id FROM Student_Loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC LIMIT 1) sl ON t.student_id = sl.student_id",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING SUM(amount_of_loan) = (SELECT MAX(total_loan) FROM (SELECT SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id) tmp))",
          "SELECT t.date_of_transcript FROM Transcripts t WHERE t.student_id = (SELECT sl.student_id FROM Student_Loans sl GROUP BY sl.student_id ORDER BY SUM(sl.amount_of_loan) DESC LIMIT 1)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT TOP 1 student_id FROM Student_Loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC)",
          "SELECT t.date_of_transcript FROM Transcripts t WHERE EXISTS (SELECT 1 FROM Student_Loans sl WHERE sl.student_id = t.student_id GROUP BY sl.student_id HAVING SUM(sl.amount_of_loan) = (SELECT MAX(total) FROM (SELECT SUM(amount_of_loan) AS total FROM Student_Loans GROUP BY student_id) x))",
          "SELECT t.date_of_transcript FROM Transcripts t JOIN (SELECT student_id, MAX(total_loans) FROM (SELECT student_id, SUM(amount_of_loan) AS total_loans FROM Student_Loans GROUP BY student_id) y GROUP BY student_id ORDER BY total_loans DESC LIMIT 1) sl ON t.student_id = sl.student_id",
          "SELECT t.date_of_transcript FROM Transcripts t WHERE t.student_id = (SELECT student_id FROM (SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id ORDER BY total_loan DESC LIMIT 1) x)"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.teacher_details FROM Teachers AS T JOIN Classes AS C ON T.teacher_id = C.teacher_id JOIN Transcripts AS TR ON C.student_id = TR.student_id ORDER BY TR.date_of_transcript ASC LIMIT 1",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1))",
          "SELECT T.teacher_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)",
          "SELECT DISTINCT T.teacher_details FROM Teachers T, Classes C, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = TR.student_id ORDER BY TR.date_of_transcript ASC LIMIT 1",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT C.teacher_id FROM Classes C INNER JOIN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1) AS S ON C.student_id = S.student_id)",
          "SELECT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1) AS FirstTranscript ON C.student_id = FirstTranscript.student_id",
          "SELECT T.teacher_details FROM Teachers T, Classes C, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = TR.student_id ORDER BY TR.date_of_transcript LIMIT 1",
          "SELECT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C JOIN Transcripts TR ON C.student_id = TR.student_id WHERE T.teacher_id = C.teacher_id ORDER BY TR.date_of_transcript LIMIT 1)",
          "SELECT T.teacher_details FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1))",
          "SELECT teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes WHERE student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.teacher_details FROM Teachers AS T JOIN Classes AS C ON T.teacher_id = C.teacher_id JOIN Transcripts AS TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
          "SELECT T.teacher_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1)",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT C.teacher_id FROM Classes C INNER JOIN Transcripts TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))",
          "SELECT DISTINCT T.teacher_details FROM Teachers T, Classes C, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = TR.student_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN (SELECT student_id, MIN(date_of_transcript) AS MinDate FROM Transcripts GROUP BY student_id) TR ON C.student_id = TR.student_id WHERE TR.MinDate = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT T.teacher_details FROM Teachers T, Classes C, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = TR.student_id AND TR.date_of_transcript = (SELECT MIN(TR2.date_of_transcript) FROM Transcripts TR2)",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT C.teacher_id FROM Classes C WHERE C.student_id = (SELECT student_id FROM Transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)))",
          "SELECT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C JOIN Transcripts TR ON C.student_id = TR.student_id WHERE C.teacher_id = T.teacher_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))",
          "SELECT T.teacher_details FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C WHERE C.student_id = (SELECT TR.student_id FROM Transcripts TR WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)))"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) total_loan FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT S.student_id, SUM(S.amount_of_loan) AS total_loan FROM Student_Loans AS S GROUP BY S.student_id",
          "SELECT student_id, TOTAL(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS sum_of_loans FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, AGGREGATE(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loans FROM Student_Loans GROUP BY student_id"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id",
          "SELECT S.student_id, SUM(SL.amount_of_loan) AS total_loan FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id GROUP BY S.student_id",
          "SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT SL.student_id, SUM(SL.amount_of_loan) FROM Student_Loans SL GROUP BY SL.student_id",
          "SELECT student_id, TOTAL(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loans FROM Student_Loans GROUP BY student_id",
          "SELECT SL.student_id, SUM(SL.amount_of_loan) AS total_loans FROM Student_Loans SL GROUP BY SL.student_id",
          "SELECT student_id, SUM(amount_of_loan) total_loan_amount FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id",
          "SELECT SL.student_id, SUM(SL.amount_of_loan) AS TotalLoanAmount FROM Student_Loans AS SL GROUP BY SL.student_id"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data, COUNT(*) AS course_count FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data",
          "SELECT student_id, bio_data, COUNT(class_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id",
          "SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS courses_taken FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT student_id, bio_data, COUNT(*) FROM Students, Classes WHERE Students.student_id = Classes.student_id GROUP BY student_id",
          "SELECT S.student_id AS StudentID, S.bio_data AS BioData, COUNT(C.class_id) AS TotalCourses FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data",
          "SELECT student_id, bio_data, (SELECT COUNT(*) FROM Classes WHERE Classes.student_id = Students.student_id) AS course_count FROM Students",
          "SELECT Students.student_id, bio_data, COUNT(Classes.class_id) FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT student_id, bio_data, COUNT(class_id) FROM Students LEFT OUTER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data",
          "SELECT S.student_id, S.bio_data, (SELECT COUNT(class_id) FROM Classes WHERE Classes.student_id = S.student_id) AS CourseCount FROM Students S",
          "SELECT student_id, bio_data, COUNT(class_id) AS courses_count FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data, COUNT(C.class_id) FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id",
          "SELECT student_id, bio_data, COUNT(class_id) AS number_of_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id",
          "SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS courses_count FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id",
          "SELECT s.student_id, s.bio_data, COUNT(*) AS course_count FROM Students s, Classes c WHERE s.student_id = c.student_id GROUP BY s.student_id",
          "SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id",
          "SELECT student_id, bio_data, (SELECT COUNT(*) FROM Classes WHERE Classes.student_id = Students.student_id) AS num_courses FROM Students",
          "SELECT s.student_id, s.bio_data, (SELECT COUNT(class_id) FROM Classes WHERE student_id = s.student_id) AS course_count FROM Students s",
          "SELECT Students.student_id, Students.bio_data, COUNT(DISTINCT Classes.class_id) AS total_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id",
          "SELECT s.student_id, s.bio_data, COUNT(c.class_id) FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data",
          "SELECT student_id, bio_data, COUNT(class_id) FROM Students JOIN Classes USING(student_id) GROUP BY student_id"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id) FROM Detention",
          "SELECT COUNT(UNIQUE student_id) FROM Detention",
          "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention)",
          "SELECT COUNT(DISTINCT student_id) FROM Detention WHERE student_id IS NOT NULL",
          "SELECT COUNT(DISTINCT d.student_id) FROM Detention d",
          "SELECT COUNT(DISTINCT student_id) FROM Detention GROUP BY student_id",
          "SELECT COUNT(DISTINCT student_id) FROM Detention d WHERE d.student_id IS NOT NULL",
          "SELECT DISTINCT COUNT(student_id) FROM Detention",
          "SELECT COUNT(*) FROM (SELECT student_id FROM Detention GROUP BY student_id) AS unique_students",
          "SELECT COUNT(DISTINCT student_id) FROM Detention WHERE detention_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id) FROM Detention",
          "SELECT COUNT(UNIQUE student_id) FROM Detention",
          "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention)",
          "SELECT COUNT(DISTINCT Detention.student_id) FROM Detention",
          "SELECT COUNT(DISTINCT d.student_id) FROM Detention d",
          "SELECT COUNT(*) FROM (SELECT student_id FROM Detention GROUP BY student_id)",
          "SELECT COUNT(DISTINCT student_id) FROM Detention WHERE student_id IS NOT NULL",
          "SELECT COUNT(DISTINCT student_id) FROM Detention GROUP BY student_id HAVING COUNT(student_id) > 0",
          "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention d WHERE d.student_id IS NOT NULL)",
          "SELECT COUNT(DISTINCT student_id) FROM Detention d WHERE EXISTS (SELECT 1 FROM Students s WHERE s.student_id = d.student_id)"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY Students_Addresses.address_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses AS SA INNER JOIN Ref_Address_Types AS RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code ORDER BY COUNT(SA.address_type_code) DESC LIMIT 1",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY address_type_code ORDER BY COUNT(Students_Addresses.address_type_code) DESC LIMIT 1",
          "SELECT TOP 1 SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA JOIN Ref_Address_Types RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code, RAT.address_type_description ORDER BY COUNT(*) DESC",
          "SELECT address_type_code, address_type_description FROM Students_Addresses JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA, Ref_Address_Types RAT WHERE SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code, RAT.address_type_description HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Students_Addresses GROUP BY address_type_code)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types NATURAL JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses AS SA JOIN Ref_Address_Types AS RAT ON SA.address_type_code = RAT.address_type_code WHERE (SA.address_type_code, COUNT(*)) IN (SELECT address_type_code, MAX(COUNT(*)) FROM Students_Addresses GROUP BY address_type_code)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code IN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses AS SA INNER JOIN Ref_Address_Types AS RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code ORDER BY COUNT(SA.address_type_code) DESC LIMIT 1",
          "SELECT TOP 1 address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY address_type_code, address_type_description ORDER BY COUNT(Students_Addresses.address_type_code) DESC",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT RAT.address_type_code, RAT.address_type_description FROM Ref_Address_Types RAT, Students_Addresses SA WHERE RAT.address_type_code = SA.address_type_code GROUP BY RAT.address_type_code, RAT.address_type_description HAVING COUNT(SA.address_type_code) = (SELECT MAX(COUNT) FROM (SELECT COUNT(address_type_code) AS COUNT FROM Students_Addresses GROUP BY address_type_code) AS Counts)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code IN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC LIMIT 1)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types ORDER BY (SELECT COUNT(*) FROM Students_Addresses WHERE Students_Addresses.address_type_code = Ref_Address_Types.address_type_code) DESC LIMIT 1",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON Ref_Address_Types.address_type_code = MostCommon.address_type_code",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY Ref_Address_Types.address_type_code, Ref_Address_Types.address_type_description ORDER BY COUNT(Students_Addresses.address_type_code) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT s.bio_data FROM Students s, Student_Events se WHERE s.student_id = se.student_id AND NOT EXISTS (SELECT 1 FROM Student_Loans sl WHERE sl.student_id = s.student_id)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)",
          "SELECT s.bio_data FROM Students s INNER JOIN Student_Events se ON s.student_id = se.student_id WHERE s.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT * FROM Student_Events WHERE Students.student_id = Student_Events.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans WHERE Students.student_id = Student_Loans.student_id)",
          "SELECT s.bio_data FROM Students s WHERE EXISTS (SELECT NULL FROM Student_Events se WHERE se.student_id = s.student_id) AND NOT EXISTS (SELECT NULL FROM Student_Loans sl WHERE sl.student_id = s.student_id)",
          "SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id WHERE NOT EXISTS (SELECT student_id FROM Student_Loans sl WHERE sl.student_id = s.student_id)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT s.bio_data FROM Students s WHERE s.student_id IN (SELECT se.student_id FROM Student_Events se) AND s.student_id NOT IN (SELECT sl.student_id FROM Student_Loans sl)"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Student_Events WHERE Student_Events.student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans WHERE Student_Loans.student_id = Students.student_id)",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT student_id FROM Student_Events SE WHERE SE.student_id = S.student_id) AND NOT EXISTS (SELECT student_id FROM Student_Loans SL WHERE SL.student_id = S.student_id)",
          "SELECT DISTINCT S.bio_data FROM Students S, Student_Events SE WHERE S.student_id = SE.student_id AND NOT EXISTS (SELECT 1 FROM Student_Loans SL WHERE SL.student_id = S.student_id)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT SE.student_id FROM Student_Events SE) AND student_id NOT IN (SELECT SL.student_id FROM Student_Loans SL)",
          "SELECT S.bio_data FROM Students S INNER JOIN Student_Events SE ON S.student_id = SE.student_id LEFT OUTER JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans WHERE student_id IS NOT NULL)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) T ON SA.student_id = T.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA INNER JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS Sub ON SA.student_id = Sub.student_id",
          "SELECT A.date_from, A.date_to FROM Students_Addresses A WHERE A.student_id IN (SELECT T.student_id FROM Transcripts T GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Transcripts GROUP BY student_id) AS Temp WHERE cnt = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA WHERE EXISTS (SELECT 1 FROM Transcripts T WHERE T.student_id = SA.student_id GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS FilteredStudents ON SA.student_id = FilteredStudents.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS T ON SA.student_id = T.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses AS SA INNER JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) T ON SA.student_id = T.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Transcripts GROUP BY student_id) AS SubQuery WHERE cnt = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses AS SA WHERE EXISTS (SELECT 1 FROM Transcripts AS T WHERE T.student_id = SA.student_id GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses AS SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) AS FilteredStudents ON SA.student_id = FilteredStudents.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses AS SA INNER JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) AS Filtered ON SA.student_id = Filtered.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start",
          "SELECT datetime_detention_start FROM Detention",
          "SELECT Detention.datetime_detention_start FROM Detention",
          "SELECT `datetime_detention_start` FROM `Detention`",
          "SELECT datetime_detention_start AS StartDate FROM Detention",
          "SELECT D.datetime_detention_start FROM Detention D",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start ASC",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start DESC",
          "SELECT Detention.datetime_detention_start FROM Detention ORDER BY Detention.datetime_detention_start",
          "SELECT datetime_detention_start FROM Detention GROUP BY datetime_detention_start ORDER BY datetime_detention_start"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start FROM Detention",
          "SELECT Detention.datetime_detention_start FROM Detention",
          "SELECT `datetime_detention_start` FROM `Detention`",
          "SELECT d.datetime_detention_start FROM Detention d",
          "SELECT datetime_detention_start AS StartDate FROM Detention",
          "SELECT Detention.datetime_detention_start AS DetentionStartDate FROM Detention",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start",
          "SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start IS NOT NULL",
          "SELECT Detention.datetime_detention_start FROM Detention WHERE Detention.datetime_detention_start IS NOT NULL",
          "SELECT datetime_detention_start FROM Detention GROUP BY datetime_detention_start"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Author",
          "SELECT Name AS AuthorName FROM Author",
          "SELECT author.Name FROM Author author",
          "SELECT `Name` FROM `Author`",
          "SELECT a.Name FROM Author a",
          "SELECT Name FROM Author ORDER BY Name",
          "SELECT DISTINCT Name FROM Author",
          "SELECT Name FROM Author WHERE Name IS NOT NULL",
          "SELECT Name FROM Author GROUP BY Name",
          "SELECT Name AS `Author Name` FROM Author"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Author",
          "SELECT Name FROM Author ORDER BY Name",
          "SELECT DISTINCT Name FROM Author",
          "SELECT a.Name FROM Author a",
          "SELECT Author.Name FROM Author",
          "SELECT Name AS AuthorName FROM Author",
          "SELECT Name FROM Author WHERE Name IS NOT NULL",
          "SELECT Name FROM Author GROUP BY Name",
          "SELECT Name FROM Author ORDER BY Name ASC",
          "SELECT Name FROM Author WHERE Name <> ''"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client",
          "SELECT Client.Name, Client.Address FROM Client",
          "SELECT c.Name, c.Address FROM Client c",
          "SELECT `Name`, `Address` FROM `Client`",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client WHERE Address IS NOT NULL",
          "SELECT DISTINCT Name, Address FROM Client",
          "SELECT Name AS `Client Name`, Address AS `Client Address` FROM Client",
          "SELECT * FROM Client WHERE Address IS NOT NULL AND Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client",
          "SELECT `Name`, `Address` FROM `Client`",
          "SELECT Client.Name, Client.Address FROM Client",
          "SELECT c.Name, c.Address FROM Client c",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client WHERE Address IS NOT NULL",
          "SELECT DISTINCT Name, Address FROM Client",
          "SELECT Name AS `Client Name`, Address AS `Client Address` FROM Client",
          "SELECT * FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, ISBN, SalePrice FROM Book",
          "SELECT Book.Title, Book.ISBN, Book.SalePrice FROM Book",
          "SELECT b.Title, b.ISBN, b.SalePrice FROM Book AS b",
          "SELECT `Title`, `ISBN`, `SalePrice` FROM `Book`",
          "SELECT Title AS BookTitle, ISBN AS BookISBN, SalePrice AS BookSalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book ORDER BY Title",
          "SELECT DISTINCT Title, ISBN, SalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book WHERE SalePrice IS NOT NULL",
          "SELECT Title, ISBN, SalePrice FROM Book WHERE ISBN IS NOT NULL",
          "SELECT Title, ISBN, SalePrice FROM Book GROUP BY ISBN"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, ISBN, SalePrice FROM Book",
          "SELECT B.Title, B.ISBN, B.SalePrice FROM Book B",
          "SELECT book.Title, book.ISBN, book.SalePrice FROM Book book",
          "SELECT `Title`, `ISBN`, `SalePrice` FROM `Book`",
          "SELECT Title AS BookTitle, ISBN AS BookISBN, SalePrice AS BookSalePrice FROM Book",
          "SELECT * FROM Book WHERE Title IS NOT NULL AND ISBN IS NOT NULL AND SalePrice IS NOT NULL",
          "SELECT Title, ISBN, SalePrice FROM Book ORDER BY Title",
          "SELECT DISTINCT Title, ISBN, SalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book WHERE SalePrice > 0",
          "SELECT Title, ISBN, FORMAT(SalePrice, 2) AS SalePrice FROM Book"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Book",
          "SELECT COUNT(ISBN) FROM Book",
          "SELECT COUNT(*) AS TotalBooks FROM Book",
          "SELECT COUNT(Book.ISBN) FROM Book",
          "SELECT COUNT(DISTINCT ISBN) FROM Book",
          "SELECT COUNT(ALL ISBN) FROM Book",
          "SELECT COUNT(*) FROM Book GROUP BY ISBN",
          "SELECT COUNT(*) FROM (SELECT ISBN FROM Book) AS Total",
          "SELECT COUNT(ISBN) FROM Book WHERE ISBN IS NOT NULL",
          "SELECT COUNT(*) FROM Book WHERE ISBN <> ''"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Book",
          "SELECT COUNT(ISBN) FROM Book",
          "SELECT COUNT(*) AS NumberOfBooks FROM Book",
          "SELECT COUNT(Book.ISBN) FROM Book",
          "SELECT COUNT(1) FROM Book",
          "SELECT COUNT(DISTINCT ISBN) FROM Book",
          "SELECT COUNT(Book.*) FROM Book",
          "SELECT COUNT(*) FROM `Book`",
          "SELECT COUNT(ISBN) AS TotalBooks FROM Book",
          "SELECT COUNT(*) FROM Book WHERE ISBN IS NOT NULL"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Author",
          "SELECT COUNT(idAuthor) FROM Author",
          "SELECT COUNT(*) AS TotalAuthors FROM Author",
          "SELECT COUNT(DISTINCT idAuthor) FROM Author",
          "SELECT COUNT(Author.idAuthor) FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(Author.idAuthor) AS AuthorCount FROM Author",
          "SELECT COUNT(*) FROM Author WHERE idAuthor IS NOT NULL",
          "SELECT COUNT(DISTINCT Author.idAuthor) FROM Author",
          "SELECT COUNT(*) FROM Author GROUP BY idAuthor"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT idAuthor) FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(Author.idAuthor) FROM Author",
          "SELECT COUNT(*) FROM `Author`",
          "SELECT COUNT(DISTINCT Author.idAuthor) FROM Author",
          "SELECT COUNT(*) FROM (SELECT * FROM Author) AS A",
          "SELECT COUNT(*) FROM Author WHERE idAuthor IS NOT NULL",
          "SELECT COUNT(*) FROM Author GROUP BY idAuthor HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Client",
          "SELECT COUNT(IdClient) FROM Client",
          "SELECT COUNT(*) AS NumberOfClients FROM Client",
          "SELECT COUNT(DISTINCT IdClient) FROM Client",
          "SELECT COUNT(1) FROM Client",
          "SELECT COUNT(IdClient) AS TotalClients FROM Client",
          "SELECT COUNT(*) FROM Client WHERE IdClient IS NOT NULL",
          "SELECT COUNT(DISTINCT IdClient) AS UniqueClients FROM Client",
          "SELECT COUNT(*) FROM Client WHERE IdClient <> ''",
          "SELECT COUNT(*) FROM Client WHERE IdClient > ''"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Client",
          "SELECT COUNT(IdClient) FROM Client",
          "SELECT COUNT(*) AS NumberOfClients FROM Client",
          "SELECT COUNT(1) FROM Client",
          "SELECT COUNT(DISTINCT IdClient) FROM Client",
          "SELECT COUNT(IdClient) AS TotalClients FROM Client",
          "SELECT COUNT(*) FROM Client WHERE IdClient IS NOT NULL",
          "SELECT COUNT(*) FROM Client WHERE IdClient <> ''",
          "SELECT COUNT(IdClient) FROM Client WHERE IdClient <> ''",
          "SELECT COUNT(*) FROM Client GROUP BY IdClient"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client ORDER BY Name ASC",
          "SELECT Client.Name, Client.Address FROM Client ORDER BY Client.Name",
          "SELECT c.Name, c.Address FROM Client AS c ORDER BY c.Name ASC",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client ORDER BY Name ASCENDING",
          "SELECT `Name`, `Address` FROM `Client` ORDER BY `Name`",
          "SELECT Name, Address FROM Client ORDER BY Name, Address",
          "SELECT Name, Address FROM Client ORDER BY Name COLLATE NOCASE",
          "SELECT Name, Address FROM Client ORDER BY UPPER(Name)"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client ORDER BY Name ASC",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client ORDER BY ClientName",
          "SELECT Name, Address FROM Client ORDER BY Name ASCENDING",
          "SELECT Client.Name, Client.Address FROM Client ORDER BY Client.Name ASC",
          "SELECT `Name`, `Address` FROM `Client` ORDER BY `Name` ASC",
          "SELECT Name, Address FROM Client ORDER BY Name, Address",
          "SELECT Name, Address FROM Client ORDER BY Name ASC, Address ASC",
          "SELECT Name, Address FROM Client ORDER BY Name ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title, A.Name FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor",
          "SELECT Book.Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT title AS BookTitle, name AS AuthorName FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT b.Title, a.Name FROM Book b, Author_Book ab, Author a WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor",
          "SELECT Title, Name FROM Book, Author WHERE Book.ISBN IN (SELECT ISBN FROM Author_Book WHERE Author.idAuthor = Author_Book.Author)",
          "SELECT DISTINCT Book.Title, Author.Name FROM Book, Author, Author_Book WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor",
          "SELECT Title, Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor ORDER BY Title",
          "SELECT Book.Title AS 'Book Title', Author.Name AS 'Author Name' FROM Book LEFT JOIN Author_Book ON Book.ISBN = Author_Book.ISBN LEFT JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author",
          "SELECT b.Title AS BookTitle, a.Name AS AuthorName FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT B.Title, A.Name FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor",
          "SELECT Title, Name FROM Book, Author WHERE Book.ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = idAuthor)",
          "SELECT b.Title AS BookTitle, a.Name AS AuthorName FROM Book b, Author a, Author_Book ab WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor",
          "SELECT Title, Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT Book.Title AS `Book Title`, Author.Name AS `Author Name` FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT b.Title, a.Name FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor",
          "SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT DISTINCT Book.Title, Author.Name FROM Book, Author, Author_Book WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor",
          "SELECT b.Title AS 'Book Title', a.Name AS 'Author Name' FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder AS OrderID, c.Name AS ClientName FROM Orders o, Client c WHERE o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders AS o INNER JOIN Client AS c ON o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Orders o INNER JOIN Client c ON o.IdClient = c.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders o LEFT JOIN Client c ON o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT o.IdOrder, c.Name FROM Client c, Orders o WHERE c.IdClient = o.IdClient"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT O.IdOrder, C.Name FROM Orders O JOIN Client C ON O.IdClient = C.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders o, Client c WHERE o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient",
          "SELECT `Orders`.IdOrder, `Client`.Name FROM `Orders` JOIN `Client` ON `Orders`.IdClient = `Client`.IdClient",
          "SELECT IdOrder AS OrderID, Name AS ClientName FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT O.IdOrder, C.Name FROM Orders AS O INNER JOIN Client AS C ON O.IdClient = C.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders LEFT JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT DISTINCT O.IdOrder, C.Name FROM Orders O JOIN Client C ON O.IdClient = C.IdClient",
          "SELECT O.IdOrder, C.Name FROM Orders O CROSS JOIN Client C WHERE O.IdClient = C.IdClient"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name, COUNT(B.ISBN) FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT Author.Name, COUNT(Book.ISBN) FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN GROUP BY Author.idAuthor",
          "SELECT Name, COUNT(*) FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.idAuthor",
          "SELECT A.Name AS AuthorName, COUNT(*) AS NumberOfBooks FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.idAuthor",
          "SELECT Name, COUNT(ISBN) FROM Author, Author_Book WHERE Author.idAuthor = Author_Book.Author GROUP BY idAuthor",
          "SELECT A.Name, COUNT(AB.ISBN) FROM Author A, Author_Book AB WHERE A.idAuthor = AB.Author GROUP BY A.idAuthor",
          "SELECT A.Name, COUNT(B.ISBN) AS BooksWritten FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author LEFT JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT Name, COUNT(ISBN) AS TotalBooks FROM Author JOIN Author_Book ON idAuthor = Author GROUP BY idAuthor",
          "SELECT A.Name, COUNT(*) FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT A.Name AS AuthorName, COUNT(B.ISBN) AS BookCount FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author LEFT JOIN Book B ON B.ISBN = AB.ISBN GROUP BY A.idAuthor"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name, COUNT(B.ISBN) FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT Author.Name, COUNT(Book.ISBN) FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN GROUP BY Author.idAuthor",
          "SELECT A.Name AS AuthorName, COUNT(*) AS NumberOfBooks FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT Name, COUNT(ISBN) FROM Author JOIN Author_Book ON idAuthor = Author GROUP BY idAuthor",
          "SELECT A.Name, COUNT(*) FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author LEFT JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT Name, COUNT(ISBN) FROM Author, Author_Book WHERE Author.idAuthor = Author_Book.Author GROUP BY Author.idAuthor",
          "SELECT A.Name, COUNT(B.ISBN) FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN GROUP BY A.idAuthor",
          "SELECT A.Name, COUNT(AB.ISBN) FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.idAuthor",
          "SELECT A.Name, COUNT(*) AS BooksWritten FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.idAuthor",
          "SELECT A.Name, COUNT(DISTINCT B.ISBN) FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN, COUNT(IdOrder) FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, COUNT(o.IdOrder) AS NumberOfOrders FROM Books_Order AS b LEFT JOIN Orders AS o ON b.IdOrder = o.IdOrder GROUP BY b.ISBN",
          "SELECT Books_Order.ISBN, COUNT(*) AS OrderCount FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT b.ISBN, COUNT(o.IdOrder) FROM Books_Order b INNER JOIN Orders o ON b.IdOrder = o.IdOrder GROUP BY b.ISBN",
          "SELECT ISBN, COUNT(IdOrder) AS Orders FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, COUNT(DISTINCT b.IdOrder) FROM Books_Order b GROUP BY b.ISBN",
          "SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, COUNT(o.IdOrder) FROM Books_Order b LEFT JOIN Orders o ON b.IdOrder = o.IdOrder GROUP BY b.ISBN",
          "SELECT Books_Order.ISBN, COUNT(Books_Order.IdOrder) AS TotalOrders FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT ISBN, COUNT(IdOrder) AS TotalOrders FROM Books_Order GROUP BY ISBN"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.ISBN, COUNT(O.IdOrder) FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT ISBN, COUNT(IdOrder) AS OrdersCount FROM Books_Order GROUP BY ISBN",
          "SELECT book.ISBN, COUNT(books_order.IdOrder) AS NumberOfOrders FROM book LEFT JOIN books_order ON book.ISBN = books_order.ISBN GROUP BY book.ISBN",
          "SELECT b.ISBN, COUNT(bo.IdOrder) FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN",
          "SELECT Book.ISBN, IFNULL(COUNT(Books_Order.IdOrder), 0) AS OrderCount FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT b.ISBN, (SELECT COUNT(*) FROM Books_Order WHERE ISBN = b.ISBN) AS OrderCount FROM Book b",
          "SELECT ISBN, COUNT(IdOrder) FROM Books_Order GROUP BY ISBN",
          "SELECT Books_Order.ISBN, COUNT(Books_Order.IdOrder) FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT b.ISBN, COUNT(o.IdOrder) FROM Book AS b LEFT JOIN Books_Order AS o ON b.ISBN = o.ISBN GROUP BY b.ISBN"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, SUM(bo.amount) AS total_amount FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN",
          "SELECT Books_Order.ISBN, SUM(Books_Order.amount) AS TotalOrdered FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT bo.ISBN, SUM(bo.amount) FROM Books_Order bo GROUP BY bo.ISBN",
          "SELECT ISBN, SUM(amount) AS TotalAmountOrdered FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, SUM(bo.amount) FROM Books_Order bo INNER JOIN Book b ON bo.ISBN = b.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, TOTAL(amount) FROM Books_Order GROUP BY ISBN",
          "SELECT Books_Order.ISBN, SUM(amount) FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN ORDER BY ISBN",
          "SELECT b.ISBN, SUM(bo.amount) AS TotalAmount FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, SUM(bo.amount) AS total_amount FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN",
          "SELECT Books_Order.ISBN, SUM(Books_Order.amount) FROM Books_Order GROUP BY Books_Order.ISBN",
          "SELECT bo.ISBN, SUM(bo.amount) total_ordered FROM Books_Order bo GROUP BY bo.ISBN",
          "SELECT ISBN, SUM(amount) total_amount_ordered FROM Books_Order GROUP BY ISBN",
          "SELECT b.ISBN, SUM(bo.amount) FROM Book AS b INNER JOIN Books_Order AS bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, TOTAL(amount) FROM Books_Order GROUP BY ISBN",
          "SELECT bo.ISBN, SUM(bo.amount) AS TotalAmount FROM Books_Order AS bo GROUP BY bo.ISBN",
          "SELECT ISBN, SUM(amount) AS TotalOrderedAmount FROM Books_Order GROUP BY ISBN",
          "SELECT Books_Order.ISBN, TOTAL(Books_Order.amount) AS TotalAmount FROM Books_Order GROUP BY Books_Order.ISBN"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY COUNT(Books_Order.ISBN) DESC LIMIT 1",
          "SELECT (SELECT Title FROM Book WHERE ISBN = BO.ISBN) AS Title FROM Books_Order BO GROUP BY BO.ISBN ORDER BY COUNT(BO.ISBN) DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(IdOrder) DESC LIMIT 1)",
          "SELECT B.Title FROM Book AS B, Books_Order AS BO WHERE B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY COUNT(BO.ISBN) DESC LIMIT 1",
          "SELECT Title FROM (SELECT ISBN, COUNT(*) AS OrderCount FROM Books_Order GROUP BY ISBN ORDER BY OrderCount DESC LIMIT 1) AS MostOrdered JOIN Book ON MostOrdered.ISBN = Book.ISBN",
          "SELECT TOP 1 Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY COUNT(*) DESC",
          "SELECT Title FROM Book WHERE ISBN = (SELECT TOP 1 ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC)",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE B.ISBN = BO.ISBN GROUP BY BO.ISBN ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY COUNT(Books_Order.ISBN) DESC LIMIT 1",
          "SELECT (SELECT Title FROM Book WHERE ISBN = BO.ISBN) AS Title FROM Books_Order BO GROUP BY BO.ISBN ORDER BY COUNT(BO.ISBN) DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(ISBN) DESC LIMIT 1)",
          "SELECT B.Title FROM Book AS B, Books_Order AS BO WHERE B.ISBN = BO.ISBN GROUP BY B.ISBN ORDER BY COUNT(BO.ISBN) DESC LIMIT 1",
          "SELECT TOP 1 Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY COUNT(*) DESC",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Books_Order GROUP BY ISBN) AS Sub))",
          "SELECT Title FROM (SELECT ISBN, COUNT(*) AS OrdersCount FROM Books_Order GROUP BY ISBN) AS OrderCounts JOIN Book ON Book.ISBN = OrderCounts.ISBN ORDER BY OrdersCount DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title, B.PurchasePrice FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY BO.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Book.Title, Book.PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN ORDER BY SUM(Books_Order.amount) DESC LIMIT 1",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT b.Title, b.PurchasePrice FROM Book b, Books_Order bo WHERE b.ISBN = bo.ISBN GROUP BY bo.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT (SELECT Title FROM Book WHERE ISBN = bo.ISBN) AS Title, (SELECT PurchasePrice FROM Book WHERE ISBN = bo.ISBN) AS PurchasePrice FROM Books_Order bo GROUP BY bo.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1",
          "SELECT Title, PurchasePrice FROM Book JOIN (SELECT ISBN, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN ORDER BY TotalAmount DESC LIMIT 1) AS MostOrdered ON Book.ISBN = MostOrdered.ISBN",
          "SELECT Book.Title, Book.PurchasePrice FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN HAVING SUM(Books_Order.amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN) AS SubQuery)",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING SUM(amount) = MAX(SUM(amount)) LIMIT 1)",
          "SELECT b.Title, b.PurchasePrice FROM Book b WHERE EXISTS (SELECT 1 FROM Books_Order bo WHERE bo.ISBN = b.ISBN GROUP BY bo.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT b.Title, b.PurchasePrice FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT Book.Title, Book.PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY SUM(Books_Order.amount) DESC LIMIT 1",
          "SELECT (SELECT Title FROM Book WHERE ISBN = sub.ISBN), (SELECT PurchasePrice FROM Book WHERE ISBN = sub.ISBN) FROM (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) sub",
          "SELECT b.Title, b.PurchasePrice FROM Book b, Books_Order bo WHERE b.ISBN = bo.ISBN GROUP BY b.ISBN HAVING SUM(bo.amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN) tmp)",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT b.Title, b.PurchasePrice FROM Book b JOIN (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN ORDER BY total_amount DESC LIMIT 1) bo ON b.ISBN = bo.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT TOP 1 b.Title, b.PurchasePrice FROM Book b INNER JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY SUM(bo.amount) DESC",
          "SELECT b.Title, b.PurchasePrice FROM Book b WHERE b.ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE B.ISBN = BO.ISBN)",
          "SELECT B.Title FROM Book B, Books_Order BO WHERE B.ISBN = BO.ISBN",
          "SELECT DISTINCT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT Title FROM Book WHERE EXISTS (SELECT * FROM Books_Order WHERE Book.ISBN = Books_Order.ISBN)",
          "SELECT B.Title FROM Book AS B INNER JOIN Books_Order AS BO ON B.ISBN = BO.ISBN"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT book.Title FROM Book book INNER JOIN Books_Order order ON book.ISBN = order.ISBN",
          "SELECT DISTINCT Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN)",
          "SELECT DISTINCT B.Title FROM Book AS B, Books_Order AS BO WHERE B.ISBN = BO.ISBN",
          "SELECT DISTINCT Title FROM Book B WHERE B.ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT DISTINCT Title FROM (SELECT Title, ISBN FROM Book) AS B JOIN Books_Order ON B.ISBN = Books_Order.ISBN",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT DISTINCT ISBN FROM Books_Order)"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders)",
          "SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT DISTINCT client.Name FROM Client client, Orders orders WHERE client.IdClient = orders.IdClient",
          "SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT DISTINCT C.Name FROM Client AS C JOIN Orders AS O ON C.IdClient = O.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient)",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE Orders.IdClient = Client.IdClient)"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders)",
          "SELECT DISTINCT client.Name FROM Client client, Orders orders WHERE client.IdClient = orders.IdClient",
          "SELECT DISTINCT Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT DISTINCT Name FROM Client JOIN Orders USING (IdClient)",
          "SELECT DISTINCT Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient",
          "SELECT DISTINCT c.Name FROM Client c INNER JOIN Orders o ON c.IdClient = o.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT DISTINCT Client.Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient",
          "SELECT Name, COUNT(IdOrder) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Client.Name, COUNT(*) AS NumberOfOrders FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Name, COUNT(Orders.IdOrder) AS OrderCount FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Client.Name, COUNT(Orders.IdOrder) FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Name, COUNT(*) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Client.Name, COUNT(Orders.IdOrder) AS TotalOrders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Name, COUNT(Orders.IdOrder) FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Client.Name, COUNT(Orders.IdOrder) FROM Client FULL OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Name, COUNT(IdOrder) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient",
          "SELECT Client.Name, COUNT(Orders.IdOrder) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Name, COUNT(*) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT C.Name, COUNT(*) AS OrdersCount FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient",
          "SELECT Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT Client.Name, COUNT(Orders.IdOrder) FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client AS C INNER JOIN Orders AS O ON C.IdClient = O.IdClient GROUP BY C.IdClient",
          "SELECT Name, COUNT(IdOrder) FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient",
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient",
          "SELECT Name, COUNT(IdOrder) FROM Client JOIN Orders USING (IdClient) GROUP BY IdClient"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient ORDER BY COUNT(O.IdOrder) DESC LIMIT 1",
          "SELECT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(Orders.IdOrder) DESC LIMIT 1",
          "SELECT TOP 1 Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(Orders.IdOrder) DESC",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name ORDER BY COUNT(Orders.IdOrder) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(Cnt) FROM (SELECT COUNT(IdOrder) AS Cnt FROM Orders GROUP BY IdClient)))",
          "SELECT Name FROM Client AS C JOIN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1) AS O ON C.IdClient = O.IdClient",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdOrder) DESC LIMIT 1)",
          "SELECT C.Name FROM Client C INNER JOIN (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOrders ON C.IdClient = MaxOrders.IdClient"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdOrder) DESC LIMIT 1)",
          "SELECT (SELECT Name FROM Client WHERE IdClient = O.IdClient) AS ClientName FROM Orders O GROUP BY O.IdClient ORDER BY COUNT(O.IdOrder) DESC LIMIT 1",
          "SELECT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(Orders.IdOrder) DESC LIMIT 1",
          "SELECT TOP 1 Client.Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(Orders.IdOrder) DESC",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(Cnt) FROM (SELECT COUNT(IdOrder) AS Cnt FROM Orders GROUP BY IdClient) AS Sub))",
          "SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient, Client.Name ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY)",
          "SELECT Name FROM (SELECT Client.Name, COUNT(Orders.IdOrder) AS OrderCount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name ORDER BY OrderCount DESC LIMIT 1) AS MostOrders",
          "SELECT C.Name FROM Client AS C WHERE C.IdClient = (SELECT O.IdClient FROM Orders AS O GROUP BY O.IdClient ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, SUM(B.amount) FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order B ON O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooks FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT Name, SUM(amount) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient",
          "SELECT C.Name AS ClientName, SUM(BO.amount) AS TotalAmount FROM Client C, Orders O, Books_Order BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Name, TotalAmount FROM (SELECT Client.IdClient, Client.Name, SUM(Books_Order.amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient) AS SubQuery",
          "SELECT Client.Name, TotalBooksOrdered FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalBooksOrdered FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS OrderTotals ON Client.IdClient = OrderTotals.IdClient",
          "SELECT Name, SUM(amount) AS TotalBooks FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient, Client.Name",
          "SELECT C.Name, SUM(BO.amount) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Client.Name, SUM(Books_Order.amount) FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT C.Name AS ClientName, SUM(BO.amount) AS TotalOrderedBooks FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, SUM(B.amount) FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order B ON O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooks FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT Name, SUM(amount) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name",
          "SELECT C.Name, TOTAL(B.amount) FROM Client AS C JOIN Orders AS O ON C.IdClient = O.IdClient JOIN Books_Order AS B ON O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT Name, SUM(amount) AS TotalAmount FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Name",
          "SELECT Client.Name, SUM(Books_Order.amount) FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT C.Name, SUM(B.amount) FROM Client C, Orders O, Books_Order B WHERE C.IdClient = O.IdClient AND O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT Name, SUM(amount) FROM Client JOIN Orders USING (IdClient) JOIN Books_Order USING (IdOrder) GROUP BY Name",
          "SELECT C.Name, SUM(B.amount) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order B ON O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT Name, SUM(amount) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT (SELECT Name FROM Client WHERE IdClient = O.IdClient) AS ClientName FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY O.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Client.Name FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT C.Name FROM Client C, Orders O, Books_Order BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1)",
          "SELECT C.Name FROM Client AS C JOIN Orders AS O ON C.IdClient = O.IdClient JOIN Books_Order AS BO ON O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT (SELECT Name FROM Client WHERE IdClient = O.IdClient) AS ClientName FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY O.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT TOP 1 Client.Name FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC",
          "SELECT Name FROM Client JOIN (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1) AS MaxClient ON Client.IdClient = MaxClient.IdClient",
          "SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient HAVING SUM(Books_Order.amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(Books_Order.amount) AS TotalAmount FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Orders.IdClient) AS SubQuery)",
          "SELECT Client.Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1)",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1)",
          "SELECT C.Name FROM Client AS C, Orders AS O, Books_Order AS BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B WHERE NOT EXISTS (SELECT 1 FROM Books_Order BO WHERE B.ISBN = BO.ISBN)",
          "SELECT Title FROM Book EXCEPT SELECT ISBN FROM Books_Order",
          "SELECT Title FROM Book B WHERE B.ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT Title FROM Book AS B WHERE NOT EXISTS (SELECT ISBN FROM Books_Order AS BO WHERE B.ISBN = BO.ISBN)",
          "SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO)",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT Books_Order.ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B LEFT OUTER JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL",
          "SELECT Title FROM Book EXCEPT SELECT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book WHERE NOT EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN)",
          "SELECT B.Title FROM Book B WHERE NOT EXISTS (SELECT 1 FROM Books_Order BO WHERE BO.ISBN = B.ISBN)",
          "SELECT Title FROM Book B WHERE B.ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book WHERE ISBN NOT IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT Title FROM Book AS B WHERE NOT EXISTS (SELECT * FROM Books_Order AS BO WHERE B.ISBN = BO.ISBN)",
          "SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO)",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE Books_Order.ISBN IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)",
          "SELECT Name FROM Client WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT c.Name FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IS NULL",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT Name FROM Client c WHERE NOT EXISTS (SELECT NULL FROM Orders o WHERE o.IdClient = c.IdClient)",
          "SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o)",
          "SELECT Name FROM Client EXCEPT SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT Client.Name FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders WHERE IdClient IS NOT NULL)",
          "SELECT Name FROM Client c WHERE NOT EXISTS (SELECT * FROM Orders o WHERE o.IdClient = c.IdClient)"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)",
          "SELECT Name FROM Client WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT c.Name FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IS NULL",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT Name FROM Client c WHERE NOT EXISTS (SELECT NULL FROM Orders o WHERE o.IdClient = c.IdClient)",
          "SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o)",
          "SELECT Name FROM Client EXCEPT SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT Client.Name FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders WHERE Orders.IdClient IS NOT NULL)",
          "SELECT Name FROM Client c WHERE NOT EXISTS (SELECT * FROM Orders o WHERE o.IdClient = c.IdClient)"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT max(SalePrice), min(SalePrice) FROM Book",
          "SELECT MAX(SalePrice) AS MaximumPrice, MIN(SalePrice) AS MinimumPrice FROM Book",
          "SELECT SalePrice FROM Book ORDER BY SalePrice DESC LIMIT 1, 1",
          "SELECT SalePrice FROM Book ORDER BY SalePrice ASC LIMIT 1, 1",
          "SELECT SalePrice FROM Book ORDER BY SalePrice DESC FETCH FIRST ROW ONLY",
          "SELECT SalePrice FROM Book ORDER BY SalePrice ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 SalePrice AS MaxPrice FROM Book ORDER BY SalePrice DESC",
          "SELECT TOP 1 SalePrice AS MinPrice FROM Book ORDER BY SalePrice ASC",
          "SELECT SalePrice FROM Book WHERE SalePrice = (SELECT MAX(SalePrice) FROM Book)",
          "SELECT SalePrice FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT max(SalePrice), min(SalePrice) FROM Book",
          "SELECT MAX(SalePrice) AS HighestPrice, MIN(SalePrice) AS LowestPrice FROM Book",
          "SELECT MAX(Book.SalePrice), MIN(Book.SalePrice) FROM Book",
          "SELECT SalePrice FROM Book ORDER BY SalePrice DESC LIMIT 1; SELECT SalePrice FROM Book ORDER BY SalePrice ASC LIMIT 1",
          "SELECT (SELECT MAX(SalePrice) FROM Book) AS MaxPrice, (SELECT MIN(SalePrice) FROM Book) AS MinPrice",
          "SELECT TOP 1 SalePrice AS MaxPrice FROM Book ORDER BY SalePrice DESC, TOP 1 SalePrice AS MinPrice FROM Book ORDER BY SalePrice ASC",
          "SELECT SalePrice AS MaximumSalePrice, SalePrice AS MinimumSalePrice FROM Book ORDER BY SalePrice DESC, SalePrice ASC LIMIT 1",
          "SELECT MAX(b.SalePrice), MIN(b.SalePrice) FROM Book b",
          "SELECT SalePrice FROM Book WHERE SalePrice=(SELECT MAX(SalePrice) FROM Book); SELECT SalePrice FROM Book WHERE SalePrice=(SELECT MIN(SalePrice) FROM Book)",
          "SELECT SalePrice AS MaxSalePrice, SalePrice AS MinSalePrice FROM Book GROUP BY SalePrice ORDER BY SalePrice DESC LIMIT 1, ORDER BY SalePrice ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book",
          "SELECT AVG(Book.PurchasePrice) AS AveragePurchasePrice, AVG(Book.SalePrice) AS AverageSalePrice FROM Book",
          "SELECT AVG(PurchasePrice) AS AvgPurchasePrice, AVG(SalePrice) AS AvgSalePrice FROM Book",
          "SELECT AVG(Book.PurchasePrice), AVG(Book.SalePrice) FROM Book",
          "SELECT AVG(b.PurchasePrice), AVG(b.SalePrice) FROM Book b",
          "SELECT AVG(b.PurchasePrice) AS AveragePurchase, AVG(b.SalePrice) AS AverageSale FROM Book b",
          "SELECT AVG(PurchasePrice) average_purchase_price, AVG(SalePrice) average_sale_price FROM Book",
          "SELECT AVG(PurchasePrice) avg_purchase_price, AVG(SalePrice) avg_sale_price FROM Book",
          "SELECT AVG(Book.PurchasePrice) averagePurchasePrice, AVG(Book.SalePrice) averageSalePrice FROM Book",
          "SELECT AVG(b.PurchasePrice) avgPurchase, AVG(b.SalePrice) avgSale FROM Book b"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book",
          "SELECT AVG(Book.PurchasePrice) AS AvgPurchasePrice, AVG(Book.SalePrice) AS AvgSalePrice FROM Book",
          "SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book",
          "SELECT AVG(Book.PurchasePrice), AVG(Book.SalePrice) FROM Book",
          "SELECT AVG(b.PurchasePrice), AVG(b.SalePrice) FROM Book b",
          "SELECT AVG(b.PurchasePrice) AS AveragePurchase, AVG(b.SalePrice) AS AverageSale FROM Book b",
          "SELECT AVG(PurchasePrice) average_purchase_price, AVG(SalePrice) average_sale_price FROM Book",
          "SELECT AVG(PurchasePrice) avg_purchase_price, AVG(SalePrice) avg_sale_price FROM Book",
          "SELECT AVG(Book.PurchasePrice) averagePurchasePrice, AVG(Book.SalePrice) averageSalePrice FROM Book",
          "SELECT AVG(PurchasePrice) AS AvgPurchase, AVG(SalePrice) AS AvgSale FROM Book"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice - PurchasePrice) FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book",
          "SELECT MAX(b.SalePrice - b.PurchasePrice) FROM Book b",
          "SELECT MAX(difference) FROM (SELECT SalePrice - PurchasePrice AS difference FROM Book) AS subquery",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) FROM Book",
          "SELECT MAX(diff) FROM (SELECT (SalePrice - PurchasePrice) AS diff FROM Book) temp",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaximumDifference FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaximumPriceDifference FROM Book",
          "SELECT MAX(difference) FROM (SELECT SalePrice - PurchasePrice AS difference FROM Book) diff_table",
          "SELECT MAX(price_diff) FROM (SELECT (SalePrice - PurchasePrice) AS price_diff FROM Book) AS price_differences"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice - PurchasePrice) AS Largest_Difference FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) FROM Book",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaxPriceDifference FROM Book",
          "SELECT MAX(difference) FROM (SELECT (SalePrice - PurchasePrice) AS difference FROM Book) AS PriceDifferences",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxDiff FROM Book",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaximumDifference FROM Book",
          "SELECT MAX(difference) FROM (SELECT SalePrice - PurchasePrice AS difference FROM Book) AS DiffTable",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS LargestPriceDifference FROM Book"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice IS NOT NULL)",
          "SELECT book.Title FROM Book book WHERE book.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice > 0)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice > 0)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B WHERE B.SalePrice IS NOT NULL)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice IS NOT NULL AND SalePrice > 0)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice IS NOT NULL AND SalePrice > 0)"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B)",
          "SELECT book.Title FROM Book book WHERE book.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(Book.SalePrice) FROM Book)",
          "SELECT Title FROM Book AS b WHERE b.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT b.Title FROM Book b WHERE b.SalePrice > (SELECT AVG(b2.SalePrice) FROM Book b2)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(b.SalePrice) FROM Book b)",
          "SELECT Title FROM Book b WHERE b.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT b.Title FROM Book AS b WHERE b.SalePrice > (SELECT AVG(SalePrice) FROM Book AS b2)"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT b.Title FROM Book b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE SalePrice > 0)",
          "SELECT Title FROM Book AS b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book AS b2)",
          "SELECT b.Title FROM Book b WHERE b.SalePrice = (SELECT MIN(b2.SalePrice) FROM Book b2)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE SalePrice IS NOT NULL)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE SalePrice >= 0)",
          "SELECT Title FROM Book b1 WHERE b1.SalePrice = (SELECT MIN(b2.SalePrice) FROM Book b2 WHERE b2.SalePrice > 0)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book WHERE SalePrice > 0 AND SalePrice IS NOT NULL)",
          "SELECT Title FROM Book b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book b2 WHERE b2.SalePrice >= 0)"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(B.SalePrice) FROM Book B)",
          "SELECT b.Title FROM Book b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book AS b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book AS b2)",
          "SELECT b.Title FROM Book AS b WHERE b.SalePrice = (SELECT MIN(b2.SalePrice) FROM Book AS b2)",
          "SELECT Title FROM Book b1 WHERE b1.SalePrice = (SELECT MIN(b2.SalePrice) FROM Book b2)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book GROUP BY SalePrice)",
          "SELECT Title FROM Book b WHERE b.SalePrice = (SELECT MIN(SalePrice) FROM Book b2)"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1",
          "SELECT B.Title FROM Book B ORDER BY B.PurchasePrice DESC LIMIT 1",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B WHERE B.PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book AS B2)",
          "SELECT Title FROM Book WHERE PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book LIMIT 1)",
          "SELECT B.Title FROM Book AS B WHERE B.PurchasePrice = (SELECT MAX(B2.PurchasePrice) FROM Book AS B2 LIMIT 1)",
          "SELECT Title FROM Book WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice IN (SELECT MAX(B2.PurchasePrice) FROM Book B2)"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1",
          "SELECT B.Title FROM Book B ORDER BY B.PurchasePrice DESC LIMIT 1",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B WHERE B.PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book AS B2)",
          "SELECT Title FROM Book WHERE PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)",
          "SELECT TOP 1 Title FROM Book ORDER BY PurchasePrice DESC",
          "SELECT Title FROM (SELECT Title, PurchasePrice, RANK() OVER (ORDER BY PurchasePrice DESC) AS rank FROM Book) AS RankedBooks WHERE rank = 1",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book) LIMIT 1",
          "SELECT Title FROM Book ORDER BY PurchasePrice DESC FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'",
          "SELECT AVG(b.SalePrice) FROM Book b INNER JOIN Author_Book ab ON b.ISBN = ab.ISBN INNER JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(b.SalePrice) FROM Book b, Author_Book ab, Author a WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor AND a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')",
          "SELECT AVG(SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN WHERE ab.Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')",
          "SELECT AVG(SalePrice) FROM Book b WHERE EXISTS (SELECT 1 FROM Author_Book ab JOIN Author a ON ab.Author = a.idAuthor WHERE ab.ISBN = b.ISBN AND a.Name = 'George Orwell')",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')",
          "SELECT AVG(b.SalePrice) FROM Book b WHERE b.ISBN IN (SELECT ab.ISBN FROM Author_Book ab JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell')",
          "SELECT AVG(SalePrice) FROM Book b INNER JOIN Author_Book ab ON b.ISBN = ab.ISBN INNER JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'",
          "SELECT AVG(b.SalePrice) FROM Book b INNER JOIN Author_Book ab ON b.ISBN = ab.ISBN INNER JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(Book.SalePrice) AS AverageSalePrice FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book b, Author_Book ab, Author a WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor AND a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')",
          "SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'",
          "SELECT AVG(b.SalePrice) AS AveragePrice FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book b WHERE EXISTS (SELECT 1 FROM Author_Book ab JOIN Author a ON ab.Author = a.idAuthor WHERE ab.ISBN = b.ISBN AND a.Name = 'George Orwell')"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.SalePrice FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')",
          "SELECT book.SalePrice FROM Book book JOIN Author_Book ab ON book.ISBN = ab.ISBN JOIN Author author ON ab.Author = author.idAuthor WHERE author.Name = 'Plato'",
          "SELECT SalePrice FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'Plato'",
          "SELECT DISTINCT B.SalePrice FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.SalePrice FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.SalePrice FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')",
          "SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato'",
          "SELECT B.SalePrice FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato')",
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN WHERE AB.Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')",
          "SELECT B.SalePrice FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT DISTINCT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author A ON B.Author = A.idAuthor JOIN Author_Book AB ON B.ISBN = AB.ISBN WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B, Author A, Author_Book AB WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Title FROM (SELECT Title, SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell') AS OrwellBooks ORDER BY SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice FETCH FIRST 1 ROWS ONLY",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice LIMIT 1",
          "SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B, Author A, Author_Book AB WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice ASC",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell') ORDER BY SalePrice ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B LEFT JOIN Author_Book AB ON B.ISBN = AB.ISBN LEFT JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice, B.Title ASC LIMIT 1",
          "SELECT Title FROM (SELECT Title, SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))) AS OrwellBooks ORDER BY SalePrice ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book, Author WHERE Book.Author = Author.idAuthor AND Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B, Author A, Author_Book AB WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book GROUP BY Author)",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book GROUP BY Author)",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book WHERE Author = Author.idAuthor)",
          "SELECT B.Title FROM Book AS B JOIN Author_Book AS AB ON B.ISBN = AB.ISBN JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book WHERE Author = A.idAuthor)"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B, Author A, Author_Book AB WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT (SUM(SalePrice) / COUNT(*)) FROM Book)",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON A.idAuthor = AB.Author WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book GROUP BY Author)",
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book WHERE ISBN = B.ISBN)"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT A.Name FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE Title = 'Pride and Prejudice')",
          "SELECT DISTINCT A.Name FROM Author A, Author_Book AB, Book B WHERE B.Title = 'Pride and Prejudice' AND B.ISBN = AB.ISBN AND AB.Author = A.idAuthor",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT AB.Author FROM Author_Book AB JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice')",
          "SELECT A.Name FROM Author AS A JOIN Author_Book AS AB ON A.idAuthor = AB.Author JOIN Book AS B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT AB.Author FROM Author_Book AB INNER JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice')"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT A.Name FROM Author AS A, Author_Book AS AB, Book AS B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT A.Name FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT Author.Name FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice')",
          "SELECT A.Name FROM Author AS A JOIN Author_Book AS AB ON A.idAuthor = AB.Author JOIN Book AS B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice')"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'))",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%')",
          "SELECT book.Title FROM Book book JOIN Author_Book ab ON book.ISBN = ab.ISBN JOIN Author author ON ab.Author = author.idAuthor WHERE author.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')",
          "SELECT DISTINCT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'))"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'))",
          "SELECT Book.Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')",
          "SELECT DISTINCT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book AS B JOIN Author_Book AS AB ON B.ISBN = AB.ISBN JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%' AND Author_Book.ISBN = Book.ISBN)"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')",
          "SELECT COUNT(IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(DISTINCT IdOrder) FROM Books_Order, Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order b JOIN Book bk ON b.ISBN = bk.ISBN WHERE bk.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order AS bo JOIN Book AS b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title LIKE 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' LIMIT 1)",
          "SELECT COUNT(*) FROM (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') AS OrdersCount"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')",
          "SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(DISTINCT IdOrder) FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order, Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order BO JOIN Book B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT COUNT(BO.IdOrder) FROM Books_Order BO, Book B WHERE BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title LIKE 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order AS BO INNER JOIN Book AS B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) INTERSECT SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' INTERSECT SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince'",
          "SELECT o1.IdOrder FROM Orders o1, Books_Order bo1, Book b1 WHERE o1.IdOrder = bo1.IdOrder AND bo1.ISBN = b1.ISBN AND b1.Title = 'Pride and Prejudice' INTERSECT SELECT o2.IdOrder FROM Orders o2, Books_Order bo2, Book b2 WHERE o2.IdOrder = bo2.IdOrder AND bo2.ISBN = b2.ISBN AND b2.Title = 'The Little Prince'",
          "SELECT DISTINCT o.IdOrder FROM Orders o, Books_Order bo, Book b WHERE o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND (b.Title = 'Pride and Prejudice' OR b.Title = 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2",
          "SELECT IdOrder FROM (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title IN ('Pride and Prejudice', 'The Little Prince')) GROUP BY IdOrder HAVING COUNT(DISTINCT ISBN) = 2) AS SubQuery",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT IdOrder FROM Orders WHERE EXISTS (SELECT 1 FROM Books_Order WHERE Orders.IdOrder = Books_Order.IdOrder AND ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND EXISTS (SELECT 1 FROM Books_Order WHERE Orders.IdOrder = Books_Order.IdOrder AND ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT IdOrder FROM Orders o WHERE EXISTS (SELECT * FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE o.IdOrder = bo.IdOrder AND b.Title = 'Pride and Prejudice') AND EXISTS (SELECT * FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE o.IdOrder = bo.IdOrder AND b.Title = 'The Little Prince')",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT DISTINCT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') AND IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince')"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice') INTERSECT SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince')",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT DISTINCT o.IdOrder FROM Orders o, Books_Order bo, Book b WHERE o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2",
          "SELECT o.IdOrder FROM Orders o WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' AND bo.IdOrder = o.IdOrder) AND EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince' AND bo.IdOrder = o.IdOrder)",
          "SELECT o.IdOrder FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' INTERSECT SELECT o.IdOrder FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince'",
          "SELECT o.IdOrder FROM Orders o, Books_Order bo1, Books_Order bo2, Book b1, Book b2 WHERE o.IdOrder = bo1.IdOrder AND o.IdOrder = bo2.IdOrder AND bo1.ISBN = b1.ISBN AND bo2.ISBN = b2.ISBN AND b1.Title = 'Pride and Prejudice' AND b2.Title = 'The Little Prince'",
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' OR b.Title = 'The Little Prince' GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2",
          "SELECT o.IdOrder FROM Orders o WHERE o.IdOrder IN (SELECT bo.IdOrder FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice') AND o.IdOrder IN (SELECT bo.IdOrder FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince')",
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice') AND o.IdOrder IN (SELECT bo.IdOrder FROM Books_Order bo WHERE bo.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT o.IdOrder FROM Orders o WHERE (SELECT COUNT(*) FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title IN ('Pride and Prejudice', 'The Little Prince') AND bo.IdOrder = o.IdOrder) = 2"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') INTERSECT SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' INTERSECT SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith'",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT DISTINCT a.ISBN FROM Books_Order a, Books_Order b, Orders oa, Orders ob, Client ca, Client cb WHERE a.ISBN = b.ISBN AND a.IdOrder = oa.IdOrder AND b.IdOrder = ob.IdOrder AND oa.IdClient = ca.IdClient AND ob.IdClient = cb.IdClient AND ca.Name = 'Peter Doe' AND cb.Name = 'James Smith'",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') INTERSECT SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT b.ISBN FROM Books_Order b INNER JOIN Orders o ON b.IdOrder = o.IdOrder WHERE o.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND b.ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT b.ISBN FROM Books_Order b, Orders o, Client c WHERE b.IdOrder = o.IdOrder AND o.IdClient = c.IdClient AND c.Name IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith'))",
          "SELECT b.ISBN FROM Books_Order b WHERE EXISTS (SELECT 1 FROM Orders o JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND o.IdOrder = b.IdOrder) AND EXISTS (SELECT 1 FROM Orders o JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith' AND o.IdOrder = b.IdOrder)"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') INTERSECT SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name IN ('Peter Doe', 'James Smith') GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT DISTINCT b.ISBN FROM Books_Order b INNER JOIN Orders o ON b.IdOrder = o.IdOrder INNER JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' OR c.Name = 'James Smith' GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2",
          "SELECT b.ISBN FROM Books_Order b, Orders o, Client c WHERE b.IdOrder = o.IdOrder AND o.IdClient = c.IdClient AND c.Name = 'Peter Doe' INTERSECT SELECT b.ISBN FROM Books_Order b, Orders o, Client c WHERE b.IdOrder = o.IdOrder AND o.IdClient = c.IdClient AND c.Name = 'James Smith'",
          "SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' INTERSECT SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith'",
          "SELECT b.ISBN FROM Books_Order b WHERE EXISTS (SELECT 1 FROM Orders o JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND o.IdOrder = b.IdOrder) AND EXISTS (SELECT 1 FROM Orders o JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith' AND o.IdOrder = b.IdOrder)",
          "SELECT b.ISBN FROM Books_Order b WHERE b.IdOrder IN (SELECT o.IdOrder FROM Orders o WHERE o.IdClient = (SELECT c.IdClient FROM Client c WHERE c.Name = 'Peter Doe')) AND b.IdOrder IN (SELECT o.IdOrder FROM Orders o WHERE o.IdClient = (SELECT c.IdClient FROM Client c WHERE c.Name = 'James Smith'))",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' UNION SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith' HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT DISTINCT B.Title FROM Book B, Books_Order BO, Orders O, Client C WHERE B.ISBN = BO.ISBN AND BO.IdOrder = O.IdOrder AND O.IdClient = C.IdClient AND C.Name = 'Peter Doe' AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN = BO.ISBN) AND NOT EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith' AND B.ISBN = BO.ISBN)",
          "SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN INNER JOIN Orders O ON BO.IdOrder = O.IdOrder INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Books_Order BO2 JOIN Orders O2 ON BO2.IdOrder = O2.IdOrder JOIN Client C2 ON O2.IdClient = C2.IdClient WHERE C2.Name = 'James Smith' AND BO2.ISBN = B.ISBN)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) EXCEPT SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT DISTINCT B.Title FROM Book B, Books_Order BO, Orders O WHERE B.ISBN = BO.ISBN AND BO.IdOrder = O.IdOrder AND O.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT * FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND B.ISBN = BO.ISBN) AND NOT EXISTS (SELECT * FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith') AND B.ISBN = BO.ISBN)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order BO INNER JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN NOT IN (SELECT ISBN FROM Books_Order BO INNER JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND BO.ISBN = B.ISBN) AND NOT EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith') AND BO.ISBN = B.ISBN)",
          "SELECT DISTINCT B.Title FROM Book B, Books_Order BO, Orders O, Client C WHERE B.ISBN = BO.ISBN AND BO.IdOrder = O.IdOrder AND O.IdClient = C.IdClient AND C.Name = 'Peter Doe' AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) EXCEPT SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN INNER JOIN Orders O ON BO.IdOrder = O.IdOrder INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Books_Order BO2 JOIN Orders O2 ON BO2.IdOrder = O2.IdOrder WHERE O2.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith') AND BO2.ISBN = B.ISBN)",
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder WHERE O.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith')"
        ]
      ]
    },
    {
      "id": 591,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')))",
          "SELECT DISTINCT C.Name FROM Client C, Orders O, Books_Order BO, Book B WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT client.Name FROM Client client INNER JOIN Orders ON client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice')",
          "SELECT C.Name FROM Client AS C JOIN Orders AS O ON C.IdClient = O.IdClient JOIN Books_Order AS BO ON O.IdOrder = BO.IdOrder JOIN Book AS B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Client.IdClient = Orders.IdClient AND Book.Title = 'Pride and Prejudice')",
          "SELECT C.Name FROM Client C, Orders O, Books_Order BO, Book B WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT Orders.IdClient FROM Orders INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder WHERE Books_Order.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT DISTINCT client.Name FROM Client client, Orders orders, Books_Order books_order, Book book WHERE client.IdClient = orders.IdClient AND orders.IdOrder = books_order.IdOrder AND books_order.ISBN = book.ISBN AND book.Title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')))",
          "SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title LIKE 'Pride and Prejudice')))",
          "SELECT c.Name FROM Client c, Orders o, Books_Order bo, Book b WHERE c.IdClient = o.IdClient AND o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT c.Name FROM Client c INNER JOIN Orders o ON c.IdClient = o.IdClient INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT o.IdClient FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice')",
          "SELECT c.Name FROM Client c WHERE EXISTS (SELECT 1 FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' AND o.IdClient = c.IdClient)",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT o.IdClient FROM Orders o, Books_Order bo, Book b WHERE o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice')",
          "SELECT c.Name FROM Client c WHERE EXISTS (SELECT * FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice') AND o.IdClient = c.IdClient)",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT o.IdClient FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT count(*) FROM book",
          "SELECT COUNT(Book_ID) FROM book",
          "SELECT COUNT(*) AS TotalBooks FROM book",
          "SELECT COUNT(1) FROM book",
          "SELECT COUNT(book.Book_ID) FROM book",
          "SELECT COUNT(DISTINCT Book_ID) FROM book",
          "SELECT COUNT(book.*) FROM book",
          "SELECT COUNT(book) FROM book",
          "SELECT COUNT(*) FROM `book`",
          "SELECT COUNT(*) FROM book WHERE Book_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Title ASC",
          "SELECT Title FROM book ORDER BY Title",
          "SELECT book.Title FROM book ORDER BY book.Title ASC",
          "SELECT `Title` FROM `book` ORDER BY `Title` ASC",
          "SELECT b.Title FROM book AS b ORDER BY b.Title ASC",
          "SELECT Title FROM book ORDER BY Title ASCENDING",
          "SELECT Title FROM book ORDER BY UPPER(Title) ASC",
          "SELECT Title FROM book ORDER BY LOWER(Title) ASC",
          "SELECT Title FROM book ORDER BY Title COLLATE NOCASE ASC",
          "SELECT Title FROM book ORDER BY Title COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Pages DESC",
          "SELECT book.Title FROM book ORDER BY book.Pages DESC",
          "SELECT `Title` FROM `book` ORDER BY `Pages` DESC",
          "SELECT Title FROM book ORDER BY Pages DESCENDING",
          "SELECT b.Title FROM book b ORDER BY b.Pages DESC",
          "SELECT Title FROM book ORDER BY book.Pages DESC",
          "SELECT Title FROM book ORDER BY Pages DESC, Book_ID ASC",
          "SELECT Title FROM book AS b ORDER BY b.Pages DESC",
          "SELECT Title FROM book ORDER BY Pages DESC LIMIT ALL",
          "SELECT Title FROM book ORDER BY Pages DESC, Title ASC"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, Release FROM book",
          "SELECT `Type`, `Release` FROM book",
          "SELECT book.Type, book.Release FROM book",
          "SELECT b.Type, b.Release FROM book AS b",
          "SELECT Type AS Book_Type, Release AS Release_Date FROM book",
          "SELECT book.Type AS Book_Type, book.Release AS Release_Date FROM book",
          "SELECT Type, Release FROM book ORDER BY Release",
          "SELECT DISTINCT Type, Release FROM book",
          "SELECT Type, Release FROM book WHERE Type IS NOT NULL",
          "SELECT Type, Release FROM book GROUP BY Type, Release"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Type",
          "SELECT Type AS Book_Type, MAX(Chapters) AS Max_Chapters, MIN(Chapters) AS Min_Chapters FROM book GROUP BY Type",
          "SELECT `Type`, MAX(`Chapters`) Maximum_Chapters, MIN(`Chapters`) Minimum_Chapters FROM `book` GROUP BY `Type`",
          "SELECT b.Type, MAX(b.Chapters) MaxChapters, MIN(b.Chapters) MinChapters FROM book b GROUP BY b.Type",
          "SELECT Type, MAX(Chapters) Max_Chapters, MIN(Chapters) Min_Chapters FROM book GROUP BY Type",
          "SELECT book.Type, MAX(book.Chapters), MIN(book.Chapters) FROM book GROUP BY book.Type",
          "SELECT Type, GREATEST(Chapters) AS Most_Chapters, LEAST(Chapters) AS Fewest_Chapters FROM book GROUP BY Type",
          "SELECT Type, MAX(Chapters) Highest_Chapter_Count, MIN(Chapters) Lowest_Chapter_Count FROM book GROUP BY Type",
          "SELECT Type, MAX(Chapters) as MaximumChapters, MIN(Chapters) as MinimumChapters FROM book GROUP BY Type",
          "SELECT Type, MAX(Chapters) \"Max Chapters\", MIN(Chapters) \"Min Chapters\" FROM book GROUP BY Type"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book WHERE Type != 'Poet'",
          "SELECT Title FROM book WHERE NOT Type = 'Poet'",
          "SELECT Title FROM book WHERE Type <> 'Poet'",
          "SELECT book.Title FROM book WHERE book.Type != 'Poet'",
          "SELECT b.Title FROM book b WHERE b.Type != 'Poet'",
          "SELECT Title FROM book WHERE `Type` != 'Poet'",
          "SELECT Title FROM book WHERE Type NOT IN ('Poet')",
          "SELECT Title FROM book WHERE Type NOT LIKE 'Poet'",
          "SELECT Title FROM book WHERE NOT (Type = 'Poet')",
          "SELECT Title FROM book WHERE Type IS NOT 'Poet'"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT AVG(Rating) FROM review",
          "SELECT average(Rating) FROM review",
          "SELECT AVG(review.Rating) FROM review",
          "SELECT AVG(r.Rating) FROM review r",
          "SELECT AVG(`Rating`) FROM `review`",
          "SELECT AVG(Rating) AS AverageRating FROM review",
          "SELECT AVG(Rating) FROM review GROUP BY Rating",
          "SELECT AVG(Rating) FROM review WHERE Rating IS NOT NULL",
          "SELECT AVG(Rating) FROM review WHERE Rating > 0",
          "SELECT AVG(Rating) FROM review ORDER BY Rating"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title, Rating FROM book JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT book.Title, review.Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT b.Title, r.Rating FROM book b, review r WHERE b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book, review WHERE book.Book_ID = review.Book_ID",
          "SELECT book.Title AS BookTitle, review.Rating AS BookRating FROM book JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT Title, Rating FROM book INNER JOIN review USING (Book_ID)",
          "SELECT b.Title, r.Rating FROM book AS b JOIN review AS r ON b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT Title, Rating FROM book RIGHT JOIN review ON book.Book_ID = review.Book_ID"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)",
          "SELECT r.Rating FROM review r JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Chapters DESC LIMIT 1",
          "SELECT review.Rating FROM review INNER JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Chapters DESC LIMIT 1",
          "SELECT (SELECT Rating FROM review WHERE Book_ID = book.Book_ID) AS Rating FROM book ORDER BY Chapters DESC LIMIT 1",
          "SELECT r.Rating FROM review r, book b WHERE r.Book_ID = b.Book_ID ORDER BY b.Chapters DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 r.Rating FROM review r INNER JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Chapters DESC",
          "SELECT Rating FROM review WHERE Book_ID IN (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)",
          "SELECT r.Rating FROM review r WHERE r.Book_ID = (SELECT b.Book_ID FROM book b ORDER BY b.Chapters DESC LIMIT 1)",
          "SELECT Rating FROM review, book WHERE review.Book_ID = book.Book_ID ORDER BY book.Chapters DESC LIMIT 1",
          "SELECT r.Rating FROM review r WHERE EXISTS (SELECT 1 FROM book b WHERE b.Book_ID = r.Book_ID ORDER BY b.Chapters DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Rank FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY Pages ASC LIMIT 1",
          "SELECT r.Rank FROM review r INNER JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Pages ASC LIMIT 1",
          "SELECT Rank FROM review, book WHERE review.Book_ID = book.Book_ID ORDER BY Pages LIMIT 1",
          "SELECT r.Rank FROM review r, book b WHERE r.Book_ID = b.Book_ID ORDER BY b.Pages LIMIT 1",
          "SELECT Rank FROM review INNER JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Pages ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 r.Rank FROM review r JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Pages",
          "SELECT Rank FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY Pages ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT r.Rank FROM review r JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Pages ASC LIMIT 1",
          "SELECT Rank FROM review INNER JOIN book ON review.Book_ID = book.Book_ID ORDER BY Pages ASC LIMIT 1",
          "SELECT r.Rank FROM review r INNER JOIN book b ON r.Book_ID = b.Book_ID ORDER BY b.Pages ASC FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book WHERE Book_ID = (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1)",
          "SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rank DESC LIMIT 1",
          "SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1)",
          "SELECT b.Title FROM book b, review r WHERE b.Book_ID = r.Book_ID ORDER BY r.Rank DESC LIMIT 1",
          "SELECT Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rank DESC LIMIT 1",
          "SELECT (SELECT Title FROM book WHERE Book_ID = review.Book_ID) AS Title FROM review ORDER BY Rank DESC LIMIT 1",
          "SELECT Title FROM book WHERE Book_ID = (SELECT Book_ID FROM review ORDER BY Rank LIMIT 1 DESC)",
          "SELECT Title FROM book b WHERE EXISTS (SELECT 1 FROM review r WHERE r.Book_ID = b.Book_ID ORDER BY r.Rank DESC LIMIT 1)",
          "SELECT Title FROM (SELECT Title, Rank FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rank DESC) AS ranked_books LIMIT 1",
          "SELECT Title FROM book WHERE Book_ID = (SELECT TOP 1 Book_ID FROM review ORDER BY Rank DESC)"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE Type = 'Novel'",
          "SELECT AVG(r.Readers_in_Million) FROM review r INNER JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel'",
          "SELECT AVG(review.Readers_in_Million) FROM review, book WHERE review.Book_ID = book.Book_ID AND book.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) FROM review INNER JOIN book ON review.Book_ID = book.Book_ID AND book.Type = 'Novel'",
          "SELECT AVG(r.Readers_in_Million) FROM review r, book b WHERE r.Book_ID = b.Book_ID AND b.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) AS Average_Readers FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = 'Novel'",
          "SELECT AVG(rm) FROM (SELECT Readers_in_Million AS rm FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE Type = 'Novel')",
          "SELECT AVG(Readers_in_Million) FROM review r JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) FROM review INNER JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) FROM review, book WHERE review.Book_ID = book.Book_ID AND book.Type = 'Novel'"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, COUNT(*) FROM book GROUP BY Type",
          "SELECT book.Type, COUNT(book.Book_ID) AS NumberOfBooks FROM book GROUP BY book.Type",
          "SELECT `Type`, COUNT(`Book_ID`) FROM `book` GROUP BY `Type`",
          "SELECT b.Type, COUNT(b.Book_ID) FROM book AS b GROUP BY b.Type",
          "SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type",
          "SELECT Type, COUNT(*) AS TotalBooks FROM book GROUP BY Type",
          "SELECT book.Type, COUNT(*) FROM book GROUP BY book.Type",
          "SELECT Type, COUNT(Book_ID) AS CountOfBooks FROM book GROUP BY Type",
          "SELECT b.Type, COUNT(*) FROM book b GROUP BY b.Type",
          "SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type HAVING COUNT(Book_ID) > 0"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT b.Type FROM book b GROUP BY b.Type ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(Type) DESC LIMIT 1",
          "SELECT book.Type FROM book GROUP BY book.Type ORDER BY COUNT(book.Type) DESC LIMIT 1",
          "SELECT Type, COUNT(*) AS Count FROM book GROUP BY Type ORDER BY Count DESC LIMIT 1",
          "SELECT Type FROM (SELECT Type FROM book) GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT b.Type FROM book AS b GROUP BY b.Type ORDER BY COUNT(b.Type) DESC LIMIT 1",
          "SELECT TOP 1 Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM book GROUP BY Type) tmp)",
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3",
          "SELECT b.Type FROM book b GROUP BY b.Type HAVING COUNT(b.Book_ID) >= 3",
          "SELECT `Type` FROM `book` GROUP BY `Type` HAVING COUNT(`Book_ID`) >= 3",
          "SELECT book.Type FROM book GROUP BY book.Type HAVING COUNT(book.Book_ID) >= 3",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3",
          "SELECT b.Type FROM book AS b GROUP BY b.Type HAVING COUNT(*) >= 3",
          "SELECT Type FROM (SELECT Type FROM book) AS TempTable GROUP BY Type HAVING COUNT(*) >= 3",
          "SELECT DISTINCT Type FROM book WHERE Type IN (SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3)",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3 ORDER BY Type",
          "SELECT Type, COUNT(*) AS BookCount FROM book GROUP BY Type HAVING BookCount >= 3"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rating ASC",
          "SELECT book.Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC",
          "SELECT b.Title FROM book b, review r WHERE b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review ORDER BY Rating ASC)",
          "SELECT book.Title FROM book, review WHERE book.Book_ID = review.Book_ID ORDER BY review.Rating",
          "SELECT Title FROM book AS b JOIN review AS r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASCENDING",
          "SELECT Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASCENDING",
          "SELECT Title FROM (SELECT Title, Rating FROM book JOIN review ON book.Book_ID = review.Book_ID) AS sorted_books ORDER BY Rating ASC",
          "SELECT Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT b.Title, b.Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID GROUP BY r.Book_ID ORDER BY SUM(r.Readers_in_Million) DESC",
          "SELECT Title, Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID GROUP BY review.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC",
          "SELECT book.Title, book.Audio FROM book, review WHERE book.Book_ID = review.Book_ID GROUP BY review.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC",
          "SELECT Title, Audio FROM book JOIN review USING(Book_ID) GROUP BY Book_ID ORDER BY SUM(Readers_in_Million) DESC",
          "SELECT b.Title, b.Audio FROM book AS b INNER JOIN review AS r ON b.Book_ID = r.Book_ID GROUP BY r.Book_ID ORDER BY SUM(r.Readers_in_Million) DESC",
          "SELECT Title, Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID GROUP BY b.Book_ID ORDER BY SUM(r.Readers_in_Million) DESC",
          "SELECT Title, Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID GROUP BY book.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC",
          "SELECT book.Title, book.Audio FROM book JOIN review ON book.Book_ID = review.Book_ID GROUP BY book.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC",
          "SELECT Title, Audio FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID GROUP BY b.Book_ID ORDER BY SUM(r.Readers_in_Million) DESC",
          "SELECT book.Title, book.Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID GROUP BY book.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT count(*) FROM book b WHERE NOT EXISTS (SELECT 1 FROM review r WHERE r.Book_ID = b.Book_ID)",
          "SELECT count(*) FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL",
          "SELECT COUNT(DISTINCT book.Book_ID) FROM book LEFT OUTER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL",
          "SELECT COUNT(*) FROM (SELECT Book_ID FROM book EXCEPT SELECT Book_ID FROM review)",
          "SELECT COUNT(book.Book_ID) FROM book WHERE book.Book_ID NOT IN (SELECT review.Book_ID FROM review)",
          "SELECT COUNT(*) FROM book b WHERE b.Book_ID NOT IN (SELECT r.Book_ID FROM review r)",
          "SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)",
          "SELECT COUNT(*) FROM book AS b WHERE NOT EXISTS (SELECT NULL FROM review AS r WHERE r.Book_ID = b.Book_ID)",
          "SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review WHERE Book_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50",
          "SELECT b.Type FROM book b WHERE b.Chapters > 75 INTERSECT SELECT b.Type FROM book b WHERE b.Chapters < 50",
          "SELECT DISTINCT Type FROM book WHERE Chapters > 75 INTERSECT SELECT DISTINCT Type FROM book WHERE Chapters < 50",
          "SELECT book.Type FROM book WHERE book.Chapters > 75 INTERSECT SELECT book.Type FROM book WHERE book.Chapters < 50",
          "SELECT Type FROM book WHERE Chapters > 75 AND Book_ID IN (SELECT Book_ID FROM book WHERE Chapters < 50)",
          "SELECT DISTINCT b.Type FROM book b JOIN book bb ON b.Book_ID = bb.Book_ID WHERE b.Chapters > 75 AND bb.Chapters < 50",
          "SELECT Type FROM (SELECT Type FROM book WHERE Chapters > 75 UNION ALL SELECT Type FROM book WHERE Chapters < 50) GROUP BY Type HAVING COUNT(*) > 1",
          "SELECT b.Type FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE Chapters > 75 AND Type = b.Type) AND EXISTS (SELECT 1 FROM book WHERE Chapters < 50 AND Type = b.Type)",
          "SELECT Type FROM book GROUP BY Type HAVING MAX(Chapters) > 75 AND MIN(Chapters) < 50",
          "SELECT Type FROM book WHERE Chapters > 75 OR Chapters < 50 GROUP BY Type HAVING COUNT(DISTINCT CASE WHEN Chapters > 75 THEN 'high' WHEN Chapters < 50 THEN 'low' END) = 2"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Type) FROM book",
          "SELECT COUNT(DISTINCT book.Type) FROM book",
          "SELECT COUNT(DISTINCT `Type`) FROM `book`",
          "SELECT COUNT(DISTINCT(book.Type)) FROM book",
          "SELECT COUNT(DISTINCT Type) AS DistinctTypes FROM book",
          "SELECT DISTINCT COUNT(Type) FROM book",
          "SELECT COUNT(UNIQUE Type) FROM book",
          "SELECT COUNT(DISTINCT Type) FROM book GROUP BY Type",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Type FROM book) AS UniqueTypes",
          "SELECT COUNT(DISTINCT Type) FROM book WHERE Type IS NOT NULL"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT b.Type, b.Title FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL",
          "SELECT Type, Title FROM book WHERE NOT EXISTS (SELECT 1 FROM review WHERE review.Book_ID = book.Book_ID)",
          "SELECT book.Type, book.Title FROM book LEFT OUTER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL",
          "SELECT Type, Title FROM book b WHERE b.Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT b.Type, b.Title FROM book b WHERE NOT EXISTS (SELECT * FROM review r WHERE r.Book_ID = b.Book_ID)",
          "SELECT Type, Title FROM book AS b WHERE b.Book_ID NOT IN (SELECT Book_ID FROM review AS r)",
          "SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)",
          "SELECT book.Type, book.Title FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL",
          "SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT r.Book_ID FROM review r)"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT count(*) FROM customer",
          "SELECT COUNT(Customer_ID) FROM customer",
          "SELECT COUNT(*) AS TotalCustomers FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) FROM customer",
          "SELECT COUNT(1) FROM customer",
          "SELECT COUNT(customer.Customer_ID) FROM customer",
          "SELECT COUNT(*) FROM `customer`",
          "SELECT COUNT(*) FROM (SELECT * FROM customer) AS AllCustomers",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID IS NOT NULL",
          "SELECT COUNT(*) FROM customer GROUP BY Customer_ID HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT count(*) FROM customer",
          "SELECT COUNT(Customer_ID) FROM customer",
          "SELECT COUNT(*) AS NumberOfCustomers FROM customer",
          "SELECT COUNT(1) FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) FROM customer",
          "SELECT COUNT(customer.Customer_ID) FROM customer",
          "SELECT COUNT(*) FROM `customer`",
          "SELECT COUNT(*) FROM (SELECT * FROM customer) AS AllCustomers",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT `Customer_ID`) FROM `customer`"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership",
          "SELECT customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC",
          "SELECT `Name` FROM `customer` ORDER BY `Level_of_Membership` ASC",
          "SELECT c.Name FROM customer AS c ORDER BY c.Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASCENDING",
          "SELECT customer.Name FROM customer ORDER BY Level_of_Membership ASCENDING",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Customer_ID ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership",
          "SELECT customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC",
          "SELECT `Name` FROM `customer` ORDER BY `Level_of_Membership` ASC",
          "SELECT c.Name FROM customer AS c ORDER BY c.Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASCENDING",
          "SELECT customer.Name FROM customer ORDER BY Level_of_Membership",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Customer_ID ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, Card_Credit FROM customer",
          "SELECT customer.Nationality, customer.Card_Credit FROM customer",
          "SELECT `Nationality`, `Card_Credit` FROM `customer`",
          "SELECT c.Nationality, c.Card_Credit FROM customer AS c",
          "SELECT Nationality AS Customer_Nationality, Card_Credit AS Customer_Card_Credit FROM customer",
          "SELECT customer.Nationality AS Nationality, customer.Card_Credit AS Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer WHERE Nationality IS NOT NULL",
          "SELECT DISTINCT Nationality, Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer ORDER BY Nationality",
          "SELECT Nationality, Card_Credit FROM customer GROUP BY Nationality, Card_Credit"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, Card_Credit FROM customer",
          "SELECT customer.Nationality, customer.Card_Credit FROM customer",
          "SELECT `Nationality`, `Card_Credit` FROM `customer`",
          "SELECT c.Nationality, c.Card_Credit FROM customer AS c",
          "SELECT Nationality AS Customer_Nationality, Card_Credit AS Customer_Card_Credit FROM customer",
          "SELECT customer.Nationality AS Nationality, customer.Card_Credit AS Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer WHERE Customer_ID IS NOT NULL",
          "SELECT DISTINCT Nationality, Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer ORDER BY Nationality",
          "SELECT Nationality, Card_Credit FROM customer GROUP BY Nationality, Card_Credit"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')",
          "SELECT `Name` FROM `customer` WHERE `Nationality` = 'England' OR `Nationality` = 'Australia'",
          "SELECT Name FROM customer WHERE (Nationality = 'England' OR Nationality = 'Australia')",
          "SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN ('Australia', 'England')",
          "SELECT Name FROM customer WHERE Nationality = 'Australia' OR Nationality = 'England'",
          "SELECT c.Name FROM customer AS c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE (Nationality = 'Australia' OR Nationality = 'England')",
          "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia' ORDER BY Name"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')",
          "SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'",
          "SELECT c.Name FROM customer AS c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality LIKE 'England' OR Nationality LIKE 'Australia'",
          "SELECT Name FROM customer WHERE (Nationality = 'England' OR Nationality = 'Australia')",
          "SELECT Name FROM customer WHERE Nationality = 'England' UNION SELECT Name FROM customer WHERE Nationality = 'Australia'",
          "SELECT DISTINCT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia')",
          "SELECT customer.Name FROM customer WHERE customer.Nationality IN ('England', 'Australia')"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) AS AverageCredit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 GROUP BY Level_of_Membership",
          "SELECT AVG(Card_Credit) FROM customer GROUP BY Level_of_Membership HAVING Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL",
          "SELECT AVG(c.Card_Credit) FROM customer AS c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > '1'",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 ORDER BY Card_Credit",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 LIMIT 1000000"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) AS AverageCredit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 GROUP BY Level_of_Membership",
          "SELECT AVG(Card_Credit) FROM customer GROUP BY Level_of_Membership HAVING Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 ORDER BY Card_Credit",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit > 0",
          "SELECT AVG(c.Card_Credit) FROM customer AS c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 LIMIT 100"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
          "SELECT c.Card_Credit FROM customer c ORDER BY c.Level_of_Membership DESC LIMIT 1",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT c.Card_Credit FROM customer AS c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership IN (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT TOP 1 Card_Credit FROM customer ORDER BY Level_of_Membership DESC",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer) LIMIT 1",
          "SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(c.Level_of_Membership) FROM customer c)",
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Card_Credit FROM (SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
          "SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT TOP 1 Card_Credit FROM customer ORDER BY Level_of_Membership DESC",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership IN (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT c.Card_Credit FROM customer c ORDER BY c.Level_of_Membership DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC FETCH FIRST ROW ONLY",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(c.Level_of_Membership) FROM customer c)",
          "SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer) LIMIT 1",
          "SELECT Card_Credit FROM (SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality",
          "SELECT c.Nationality, COUNT(*) FROM customer c GROUP BY c.Nationality",
          "SELECT c.Nationality, COUNT(c.Customer_ID) FROM customer c GROUP BY c.Nationality",
          "SELECT `Nationality`, COUNT(*) FROM `customer` GROUP BY `Nationality`",
          "SELECT `Nationality`, COUNT(`Customer_ID`) FROM `customer` GROUP BY `Nationality`",
          "SELECT Nationality AS CustomerNationality, COUNT(*) AS Total FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(*) AS TotalCustomers FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(DISTINCT Customer_ID) FROM customer GROUP BY Nationality"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality",
          "SELECT c.Nationality, COUNT(c.Customer_ID) FROM customer c GROUP BY c.Nationality",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality",
          "SELECT `Nationality`, COUNT(`Customer_ID`) FROM `customer` GROUP BY `Nationality`",
          "SELECT customer.Nationality, COUNT(*) AS Total FROM customer GROUP BY customer.Nationality",
          "SELECT Nationality, COUNT(DISTINCT Customer_ID) FROM customer GROUP BY Nationality",
          "SELECT c.Nationality, COUNT(*) FROM customer AS c GROUP BY c.Nationality",
          "SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC",
          "SELECT Nationality, COUNT(*) AS CustomerCount FROM customer GROUP BY Nationality HAVING COUNT(*) > 0",
          "SELECT Nationality, COUNT(Customer_ID) FROM customer WHERE Nationality IS NOT NULL GROUP BY Nationality"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT c.Nationality FROM customer c GROUP BY c.Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1",
          "SELECT customer.Nationality FROM customer GROUP BY customer.Nationality ORDER BY COUNT(customer.Nationality) DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) as cnt FROM customer GROUP BY Nationality) sub ORDER BY cnt DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM customer GROUP BY Nationality) t)",
          "SELECT Nationality, COUNT(*) as Total FROM customer GROUP BY Nationality ORDER BY Total DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1",
          "SELECT Nationality, COUNT(Nationality) as Frequency FROM customer GROUP BY Nationality ORDER BY Frequency DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT c.Nationality FROM customer c GROUP BY c.Nationality ORDER BY COUNT(c.Customer_ID) DESC LIMIT 1",
          "SELECT Nationality, COUNT(*) AS Total FROM customer GROUP BY Nationality ORDER BY Total DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) as Count FROM customer GROUP BY Nationality) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM customer GROUP BY Nationality) AS Counts)",
          "SELECT Nationality, COUNT(Nationality) as NumCustomers FROM customer GROUP BY Nationality ORDER BY NumCustomers DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT c.Nationality FROM customer c GROUP BY c.Nationality ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75",
          "SELECT c.Nationality FROM customer c WHERE c.Card_Credit < 50 INTERSECT SELECT c.Nationality FROM customer c WHERE c.Card_Credit > 75",
          "SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT DISTINCT Nationality FROM customer WHERE Card_Credit > 75",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING MIN(Card_Credit) < 50 AND MAX(Card_Credit) > 75",
          "SELECT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit < 50 AND c2.Card_Credit > 75",
          "SELECT Nationality FROM (SELECT Nationality FROM customer WHERE Card_Credit < 50 UNION ALL SELECT Nationality FROM customer WHERE Card_Credit > 75) a GROUP BY Nationality HAVING COUNT(DISTINCT Nationality) > 1",
          "WITH LowCredit AS (SELECT Nationality FROM customer WHERE Card_Credit < 50), HighCredit AS (SELECT Nationality FROM customer WHERE Card_Credit > 75) SELECT Nationality FROM LowCredit INTERSECT SELECT Nationality FROM HighCredit",
          "SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 50) AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 75)",
          "SELECT DISTINCT c.Nationality FROM customer c WHERE EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit < 50) AND EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit > 75)",
          "SELECT Nationality FROM customer WHERE Card_Credit < 50 AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 75)"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75",
          "SELECT c.Nationality FROM customer c WHERE c.Card_Credit > 50 INTERSECT SELECT c.Nationality FROM customer c WHERE c.Card_Credit < 75",
          "SELECT DISTINCT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 75",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING MAX(Card_Credit) > 50 AND MIN(Card_Credit) < 75",
          "SELECT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit > 50 AND c2.Card_Credit < 75",
          "SELECT Nationality FROM (SELECT Nationality FROM customer WHERE Card_Credit > 50 UNION ALL SELECT Nationality FROM customer WHERE Card_Credit < 75) AS subquery GROUP BY Nationality HAVING COUNT(*) > 1",
          "SELECT c.Nationality FROM customer c WHERE EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit > 50) AND EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit < 75)",
          "WITH Credit_High AS (SELECT Nationality FROM customer WHERE Card_Credit > 50), Credit_Low AS (SELECT Nationality FROM customer WHERE Card_Credit < 75) SELECT Nationality FROM Credit_High INTERSECT SELECT Nationality FROM Credit_Low",
          "SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75 ORDER BY Nationality",
          "SELECT DISTINCT c.Nationality FROM customer c WHERE c.Card_Credit > 50 AND c.Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75)"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT cust.Name AS CustomerName, ord.Dish_Name AS DishOrdered FROM customer AS cust JOIN customer_order AS ord ON cust.Customer_ID = ord.Customer_ID",
          "SELECT `Name`, `Dish_Name` FROM `customer` JOIN `customer_order` ON `customer`.`Customer_ID` = `customer_order`.`Customer_ID`",
          "SELECT customer.Name AS Customer, customer_order.Dish_Name AS Dish FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order USING (Customer_ID)",
          "SELECT c.Name, co.Dish_Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name AS CustomerName, Dish_Name AS OrderedDish FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT cust.Name AS CustomerName, ord.Dish_Name AS DishName FROM customer AS cust JOIN customer_order AS ord ON cust.Customer_ID = ord.Customer_ID",
          "SELECT `Name`, `Dish_Name` FROM `customer` JOIN `customer_order` ON `customer`.`Customer_ID` = `customer_order`.`Customer_ID`",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order USING(Customer_ID)",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT c.Name AS Customer_Name, co.Dish_Name AS Dish FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID",
          "SELECT Name AS CustomerName, Dish_Name AS OrderedDish FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT c.Name AS CustomerName, co.Dish_Name AS DishOrdered FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order USING (Customer_ID) ORDER BY Quantity DESC",
          "SELECT c.Name, co.Dish_Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer NATURAL JOIN customer_order ORDER BY Quantity DESC",
          "SELECT c.Name AS Customer, co.Dish_Name AS Dish FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer_order INNER JOIN customer ON customer_order.Customer_ID = customer.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT (SELECT Name FROM customer WHERE Customer_ID = customer_order.Customer_ID) AS CustomerName, Dish_Name FROM customer_order ORDER BY Quantity DESC",
          "SELECT cust.Name AS CustomerName, ord.Dish_Name FROM customer_order ord JOIN customer cust ON ord.Customer_ID = cust.Customer_ID ORDER BY ord.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT c.Name, co.Dish_Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT c.Name AS CustomerName, co.Dish_Name FROM customer c CROSS JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, SUM(co.Quantity) FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID",
          "SELECT customer.Name, SUM(customer_order.Quantity) AS TotalOrdered FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID",
          "SELECT Name, TOTAL(Quantity) FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID",
          "SELECT c.Name, SUM(co.Quantity) Total_Orders FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) FROM customer INNER JOIN customer_order USING(Customer_ID) GROUP BY Customer_ID",
          "SELECT Name, SUM(Quantity) Total_Quantity FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID",
          "SELECT customer.Name, SUM(customer_order.Quantity) FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT customer.Name, SUM(customer_order.Quantity) FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name",
          "SELECT Name, TOTAL(Quantity) FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT c.Name, SUM(co.Quantity) Total_Quantity FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name",
          "SELECT Name, SUM(Quantity) FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Name"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT customer.Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT DISTINCT c.Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING TOTAL(Quantity) > 1)",
          "SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING TOTAL(co.Quantity) > 1",
          "SELECT Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(Quantity) > 1",
          "SELECT customer.Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT c.Name FROM customer AS c INNER JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT customer.Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT c.Name FROM customer AS c, customer_order AS co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING TOTAL(Quantity) > 1)",
          "SELECT DISTINCT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE (SELECT SUM(Quantity) FROM customer_order WHERE Customer_ID = c.Customer_ID) > 1",
          "SELECT c.Name FROM customer c WHERE EXISTS (SELECT 1 FROM customer_order co WHERE co.Customer_ID = c.Customer_ID GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1)",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT DISTINCT Manager FROM branch",
          "SELECT DISTINCT branch.Manager FROM branch",
          "SELECT DISTINCT b.Manager FROM branch b",
          "SELECT DISTINCT Manager FROM branch ORDER BY Manager",
          "SELECT DISTINCT Manager AS DistinctManagers FROM branch",
          "SELECT DISTINCT Manager FROM branch GROUP BY Manager",
          "SELECT DISTINCT Manager FROM branch WHERE Manager IS NOT NULL",
          "SELECT DISTINCT Manager FROM branch WHERE Manager <> ''",
          "SELECT DISTINCT Manager FROM branch WHERE Manager != ''",
          "SELECT DISTINCT Manager FROM branch WHERE LENGTH(Manager) > 0"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT DISTINCT Manager FROM branch",
          "SELECT DISTINCT branch.Manager FROM branch",
          "SELECT DISTINCT b.Manager FROM branch b",
          "SELECT DISTINCT Manager AS DistinctManagers FROM branch",
          "SELECT DISTINCT b.Manager AS DistinctManagers FROM branch b",
          "SELECT Manager FROM branch GROUP BY Manager",
          "SELECT b.Manager FROM branch b GROUP BY b.Manager",
          "SELECT DISTINCT Manager FROM branch WHERE Manager IS NOT NULL",
          "SELECT DISTINCT b.Manager FROM branch b WHERE b.Manager IS NOT NULL",
          "SELECT Manager FROM branch WHERE Manager IS NOT NULL GROUP BY Manager"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c WHERE NOT EXISTS (SELECT 1 FROM customer_order co WHERE co.Customer_ID = c.Customer_ID)",
          "SELECT Name FROM customer EXCEPT SELECT Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT customer.Name FROM customer LEFT OUTER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT co.Customer_ID FROM customer_order co)",
          "SELECT Name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order co WHERE co.Customer_ID = c.Customer_ID)",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID)"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE NOT EXISTS (SELECT 1 FROM customer_order WHERE customer_order.Customer_ID = customer.Customer_ID)",
          "SELECT Name FROM customer AS c WHERE c.Customer_ID NOT IN (SELECT Customer_ID FROM customer_order AS co)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT Name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order co WHERE co.Customer_ID = c.Customer_ID)",
          "SELECT c.Name FROM customer c LEFT OUTER JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)",
          "SELECT Name FROM customer EXCEPT SELECT Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT count(*) FROM member",
          "SELECT COUNT(Member_ID) FROM member",
          "SELECT COUNT(1) FROM member",
          "SELECT COUNT(DISTINCT Member_ID) FROM member",
          "SELECT COUNT(*) AS TotalMembers FROM member",
          "SELECT COUNT(*) FROM member WHERE Member_ID IS NOT NULL",
          "SELECT COUNT(*) FROM `member`",
          "SELECT COUNT(*) FROM (SELECT * FROM member) AS AllMembers",
          "SELECT COUNT(*) FROM member GROUP BY 'all'",
          "SELECT COUNT(*) FROM member WHERE '1'='1'"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member ORDER BY Age ASC",
          "SELECT member.Name FROM member ORDER BY member.Age ASC",
          "SELECT m.Name FROM member m ORDER BY m.Age ASC",
          "SELECT Name FROM member ORDER BY Age",
          "SELECT Name FROM member AS m ORDER BY m.Age ASC",
          "SELECT `Name` FROM `member` ORDER BY `Age` ASC",
          "SELECT Name FROM member ORDER BY Age ASCENDING",
          "SELECT member.Name FROM member ORDER BY Age ASCENDING",
          "SELECT Name FROM member ORDER BY Age ASC, Member_ID ASC",
          "SELECT Name FROM member ORDER BY Age ASC, Member_ID"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name, Nationality FROM member",
          "SELECT member.Name, member.Nationality FROM member",
          "SELECT `Name`, `Nationality` FROM `member`",
          "SELECT m.Name, m.Nationality FROM member AS m",
          "SELECT Name AS MemberName, Nationality AS MemberNationality FROM member",
          "SELECT member.Name AS MemberName, member.Nationality AS MemberNationality FROM member",
          "SELECT Name, Nationality FROM member WHERE Member_ID IS NOT NULL",
          "SELECT DISTINCT Name, Nationality FROM member",
          "SELECT Name, Nationality FROM member ORDER BY Name",
          "SELECT Name, Nationality FROM member GROUP BY Member_ID"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Nationality != 'England'",
          "SELECT m.Name FROM member m WHERE m.Nationality <> 'England'",
          "SELECT Name FROM member WHERE NOT Nationality = 'England'",
          "SELECT member.Name FROM member WHERE member.Nationality != 'England'",
          "SELECT Name FROM member WHERE Nationality NOT IN ('England')",
          "SELECT Name FROM member WHERE Nationality NOT LIKE 'England'",
          "SELECT m.Name FROM member AS m WHERE m.Nationality != 'England'",
          "SELECT Name FROM member WHERE Nationality IS NOT 'England'",
          "SELECT Name FROM member WHERE NOT (Nationality = 'England')",
          "SELECT Name FROM member WHERE Nationality != 'England' AND Nationality IS NOT NULL"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Age = 19 OR Age = 20",
          "SELECT Name FROM member WHERE Age IN (19, 20)",
          "SELECT member.Name FROM member WHERE member.Age = 19 OR member.Age = 20",
          "SELECT m.Name FROM member m WHERE m.Age = 19 OR m.Age = 20",
          "SELECT Name FROM member WHERE Age BETWEEN 19 AND 20",
          "SELECT Name FROM member WHERE (Age = 19 OR Age = 20)",
          "SELECT `Name` FROM `member` WHERE `Age` = 19 OR `Age` = 20",
          "SELECT Name FROM member WHERE Age IN (SELECT Age FROM member WHERE Age = 19 OR Age = 20)",
          "SELECT Name FROM member WHERE Age = 19 UNION SELECT Name FROM member WHERE Age = 20",
          "SELECT Name FROM member WHERE Age >= 19 AND Age <= 20"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
          "SELECT m.Name FROM member m ORDER BY m.Age DESC LIMIT 1",
          "SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member)",
          "SELECT TOP 1 Name FROM member ORDER BY Age DESC",
          "SELECT Name FROM member WHERE Age IN (SELECT MAX(Age) FROM member)",
          "SELECT member.Name FROM member ORDER BY member.Age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM (SELECT Name, Age FROM member ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM member ORDER BY Age DESC, Member_ID ASC LIMIT 1",
          "SELECT Name FROM member AS m ORDER BY m.Age DESC LIMIT 1",
          "SELECT m.Name FROM member m WHERE m.Age = (SELECT MAX(Age) FROM member m)"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality",
          "SELECT m.Nationality, COUNT(m.Member_ID) AS NumberOfMembers FROM member m GROUP BY m.Nationality",
          "SELECT `Nationality`, COUNT(`Member_ID`) FROM `member` GROUP BY `Nationality`",
          "SELECT Nationality, COUNT(Member_ID) AS Total FROM member GROUP BY Nationality",
          "SELECT Nationality, COUNT(*) AS CountOfMembers FROM member GROUP BY Nationality ORDER BY Nationality",
          "SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality ORDER BY COUNT(Member_ID) DESC",
          "SELECT m.Nationality, COUNT(*) FROM member m GROUP BY m.Nationality",
          "SELECT Nationality AS Country, COUNT(*) AS TotalMembers FROM member GROUP BY Nationality",
          "SELECT Nationality, COUNT(DISTINCT Member_ID) FROM member GROUP BY Nationality",
          "SELECT Nationality, COUNT(1) FROM member GROUP BY Nationality"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC",
          "SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality ORDER BY Count DESC LIMIT 1",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) as Total FROM member GROUP BY Nationality) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality) AS TempTable)",
          "SELECT m.Nationality FROM member AS m GROUP BY m.Nationality ORDER BY COUNT(m.Nationality) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC FETCH FIRST ROW ONLY",
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC, Nationality ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(*) >= 2",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) > 1",
          "SELECT m.Nationality FROM member AS m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) > 1",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS num_members FROM member GROUP BY Nationality) AS subquery WHERE num_members >= 2",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) > 1",
          "SELECT DISTINCT m.Nationality FROM member m JOIN (SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality) AS sub ON m.Nationality = sub.Nationality WHERE sub.Count >= 2",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(DISTINCT Member_ID) >= 2",
          "SELECT m.Nationality FROM member m WHERE EXISTS (SELECT NULL FROM member WHERE Nationality = m.Nationality GROUP BY Nationality HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT M.Name, C.Club_Name FROM member M JOIN club_leader CL ON M.Member_ID = CL.Member_ID JOIN club C ON CL.Club_ID = C.Club_ID",
          "SELECT member.Name, club.Club_Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID",
          "SELECT Name, Club_Name FROM member, club, club_leader WHERE member.Member_ID = club_leader.Member_ID AND club.Club_ID = club_leader.Club_ID",
          "SELECT m.Name AS LeaderName, c.Club_Name AS ClubName FROM member m, club c, club_leader cl WHERE m.Member_ID = cl.Member_ID AND c.Club_ID = cl.Club_ID",
          "SELECT member.Name AS Leader, club.Club_Name AS Club FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID",
          "SELECT m.Name, c.Club_Name FROM member m CROSS JOIN club_leader cl ON m.Member_ID = cl.Member_ID CROSS JOIN club c ON cl.Club_ID = c.Club_ID",
          "SELECT DISTINCT member.Name, club.Club_Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID",
          "SELECT m.Name AS LeaderName, c.Club_Name AS ClubName FROM member AS m JOIN club_leader AS cl ON m.Member_ID = cl.Member_ID JOIN club AS c ON cl.Club_ID = c.Club_ID",
          "SELECT Name, Club_Name FROM member JOIN club_leader USING(Member_ID) JOIN club USING(Club_ID)",
          "SELECT m.Name, c.Club_Name FROM member AS m INNER JOIN club_leader AS cl ON m.Member_ID = cl.Member_ID INNER JOIN club AS c ON cl.Club_ID = c.Club_ID"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100",
          "SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Overall_Ranking > 100",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100))",
          "SELECT m.Name FROM member AS m, club_leader AS cl, club AS c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Overall_Ranking > 100",
          "SELECT DISTINCT member.Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID AND club.Overall_Ranking > 100",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE Overall_Ranking > 100)",
          "SELECT m.Name FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Overall_Ranking > 100",
          "SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID AND club.Overall_Ranking > 100",
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID AND c.Overall_Ranking > 100",
          "SELECT Name FROM member WHERE EXISTS (SELECT 1 FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club_leader.Member_ID = member.Member_ID AND club.Overall_Ranking > 100)"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT M.Name FROM member M JOIN club_leader CL ON M.Member_ID = CL.Member_ID WHERE CL.Year_Join < 2018",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Year_Join < 2018)",
          "SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Year_Join < 2018",
          "SELECT Name FROM member, club_leader WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Year_Join < 2018",
          "SELECT m.Name FROM member m, club_leader cl WHERE m.Member_ID = cl.Member_ID AND cl.Year_Join < 2018",
          "SELECT DISTINCT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Year_Join < 2018",
          "SELECT Name FROM member JOIN club_leader USING(Member_ID) WHERE Year_Join < 2018",
          "SELECT m.Name FROM member AS m JOIN club_leader AS cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018",
          "SELECT Name FROM member WHERE EXISTS (SELECT 1 FROM club_leader WHERE club_leader.Member_ID = member.Member_ID AND Year_Join < 2018)",
          "SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID AND club_leader.Year_Join < 2018"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Club_Name = 'Houston'",
          "SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID = (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))",
          "SELECT m.Name FROM member AS m, club_leader AS cl, club AS c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID = (SELECT Member_ID FROM club_leader WHERE Club_ID = (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))",
          "SELECT member.Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID AND club.Club_Name = 'Houston'",
          "SELECT m.Name FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID = (SELECT Member_ID FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE Club_Name = 'Houston')",
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE Club_Name = 'Houston')"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
          "SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NULL",
          "SELECT Name FROM member WHERE NOT EXISTS (SELECT 1 FROM club_leader WHERE club_leader.Member_ID = member.Member_ID)",
          "SELECT m.Name FROM member m WHERE m.Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
          "SELECT Name FROM member EXCEPT SELECT Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID",
          "SELECT Name FROM member m WHERE NOT EXISTS (SELECT NULL FROM club_leader cl WHERE cl.Member_ID = m.Member_ID)",
          "SELECT m.Name FROM member m WHERE m.Member_ID NOT IN (SELECT cl.Member_ID FROM club_leader cl)",
          "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader WHERE club_leader.Member_ID IS NOT NULL)",
          "SELECT DISTINCT Name FROM member WHERE Member_ID NOT IN (SELECT DISTINCT Member_ID FROM club_leader)",
          "SELECT Name FROM member m WHERE NOT EXISTS (SELECT * FROM club_leader cl WHERE cl.Member_ID = m.Member_ID)"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19",
          "SELECT m.Nationality FROM member m WHERE m.Age > 22 INTERSECT SELECT m.Nationality FROM member m WHERE m.Age < 19",
          "SELECT DISTINCT Nationality FROM member WHERE Age > 22 INTERSECT SELECT DISTINCT Nationality FROM member WHERE Age < 19",
          "SELECT m1.Nationality FROM member m1 WHERE m1.Age > 22 INTERSECT SELECT m2.Nationality FROM member m2 WHERE m2.Age < 19",
          "SELECT Nationality FROM member WHERE Age > 22 AND Nationality IN (SELECT Nationality FROM member WHERE Age < 19)",
          "SELECT DISTINCT m.Nationality FROM member m WHERE m.Age > 22 AND m.Nationality IN (SELECT Nationality FROM member WHERE Age < 19)",
          "SELECT Nationality FROM (SELECT Nationality FROM member WHERE Age > 22) AS OlderMembers INTERSECT SELECT Nationality FROM (SELECT Nationality FROM member WHERE Age < 19) AS YoungerMembers",
          "SELECT DISTINCT Nationality FROM member WHERE Age > 22 AND EXISTS (SELECT 1 FROM member WHERE Age < 19 AND Nationality = member.Nationality)",
          "WITH Older AS (SELECT Nationality FROM member WHERE Age > 22), Younger AS (SELECT Nationality FROM member WHERE Age < 19) SELECT Nationality FROM Older INTERSECT SELECT Nationality FROM Younger",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING MAX(Age) > 22 AND MIN(Age) < 19"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT AVG(m.Age) FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID",
          "SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader)",
          "SELECT AVG(member.Age) FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID",
          "SELECT AVG(m.Age) FROM member m, club_leader cl WHERE m.Member_ID = cl.Member_ID",
          "SELECT AVG(Age) FROM member WHERE EXISTS (SELECT 1 FROM club_leader WHERE club_leader.Member_ID = member.Member_ID)",
          "SELECT AVG(member.Age) FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Member_ID",
          "SELECT AVG(Age) FROM (SELECT Age FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID) AS LeaderAges",
          "SELECT AVG(Age) FROM member m INNER JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NOT NULL",
          "SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT DISTINCT Member_ID FROM club_leader)",
          "SELECT AVG(m.Age) FROM member m WHERE EXISTS (SELECT * FROM club_leader cl WHERE cl.Member_ID = m.Member_ID)"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'",
          "SELECT c.Club_Name FROM club c WHERE c.Club_Name LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE Club_Name ILIKE '%state%'",
          "SELECT `Club_Name` FROM `club` WHERE `Club_Name` LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE LOWER(Club_Name) LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE Club_Name COLLATE UTF8_GENERAL_CI LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE Club_Name REGEXP '.*state.*'",
          "SELECT Club_Name FROM club WHERE INSTR(Club_Name, 'state') > 0",
          "SELECT Club_Name FROM club WHERE POSITION('state' IN Club_Name) > 0",
          "SELECT Club_Name FROM club WHERE Club_Name CONTAINS 'state'"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT name FROM Collection_Subsets",
          "SELECT Collection_Subset_Name AS Subset_Name FROM Collection_Subsets",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs",
          "SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets",
          "SELECT DISTINCT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT * FROM Collection_Subsets",
          "SELECT Collection_Subset_Name FROM Collection_Subsets ORDER BY Collection_Subset_Name",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name IS NOT NULL",
          "SELECT Collection_Subset_Name FROM Collection_Subsets GROUP BY Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT Collection_Subset_Name FROM Collection_Subsets;",
          "SELECT c.Collection_Subset_Name FROM Collection_Subsets c",
          "SELECT c.Collection_Subset_Name FROM Collection_Subsets AS c",
          "SELECT Collection_Subset_Name FROM Collection_Subsets ORDER BY Collection_Subset_Name",
          "SELECT DISTINCT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IS NOT NULL",
          "SELECT Collection_Subset_Name FROM Collection_Subsets GROUP BY Collection_Subset_Name",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name <> ''",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Subsets.Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT cs.Collecrtion_Subset_Details FROM Collection_Subsets cs WHERE cs.Collection_Subset_Name = 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name LIKE 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT details.Collecrtion_Subset_Details FROM Collection_Subsets details WHERE details.Collection_Subset_Name = 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Description FROM Collections AS C JOIN Collection_Subsets AS CS ON C.Collection_ID = CS.Collection_Subset_ID WHERE CS.Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection')",
          "SELECT C.Collection_Description FROM Collections C INNER JOIN Collection_Subsets CS ON C.Collection_ID = CS.Collection_Subset_ID WHERE CS.Collection_Subset_Name = 'Top collection'",
          "SELECT description FROM Collections WHERE Collection_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection')",
          "SELECT C.Collection_Description FROM Collections C, Collection_Subsets CS WHERE C.Collection_ID = CS.Collection_Subset_ID AND CS.Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' AND Collection_Subset_ID IS NOT NULL)",
          "SELECT C.Collection_Description FROM Collections C JOIN Collection_Subsets CS ON C.Collection_ID = CS.Collection_Subset_ID AND CS.Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Description FROM Collections WHERE Collection_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' LIMIT 1)",
          "SELECT DISTINCT C.Collection_Description FROM Collections C INNER JOIN Collection_Subsets CS ON C.Collection_ID = CS.Collection_Subset_ID WHERE CS.Collection_Subset_Name = 'Top collection'",
          "SELECT C.Collection_Description FROM Collections C LEFT JOIN Collection_Subsets CS ON C.Collection_ID = CS.Collection_Subset_ID WHERE CS.Collection_Subset_Name = 'Top collection'"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Name FROM Document_Subsets",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds",
          "SELECT Document_Subset_Name FROM Document_Subsets ORDER BY Document_Subset_Name",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets AS ds",
          "SELECT Document_Subset_Name FROM Document_Subsets GROUP BY Document_Subset_Name",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IS NOT NULL",
          "SELECT Document_Subset_Name FROM Document_Subsets ds WHERE ds.Document_Subset_ID > 0",
          "SELECT Document_Subset_Name FROM Document_Subsets ORDER BY Document_Subset_ID ASC",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Name FROM Document_Subsets",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds",
          "SELECT Document_Subset_Name FROM Document_Subsets ORDER BY Document_Subset_Name",
          "SELECT Document_Subset_Name FROM Document_Subsets GROUP BY Document_Subset_Name",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IS NOT NULL",
          "SELECT Document_Subset_Name FROM Document_Subsets ds WHERE EXISTS (SELECT 1 FROM Document_Subset_Members dsm WHERE dsm.Document_Subset_ID = ds.Document_Subset_ID)",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_Name IS NOT NULL",
          "SELECT Document_Subset_Name FROM Document_Subsets ds ORDER BY ds.Document_Subset_ID ASC",
          "SELECT Document_Subset_Name FROM Document_Subsets ds WHERE ds.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members)"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000'",
          "SELECT ds.Document_Subset_Details FROM Document_Subsets AS ds WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT * FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000'",
          "SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID FROM Document_Objects d",
          "SELECT d.Document_Object_ID FROM Document_Objects AS d",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IS NOT NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID > 0",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)",
          "SELECT Document_Object_ID FROM Document_Objects LIMIT 1000"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID AS Object_ID FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IS NOT NULL",
          "SELECT * FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects LIMIT 100",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID > 0",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Description IS NOT NULL"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT d1.Parent_Document_Object_ID FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID WHERE d2.Owner = 'Marlin'",
          "SELECT d1.Document_Object_ID FROM Document_Objects d1 INNER JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID WHERE d2.Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d INNER JOIN Document_Objects d2 ON d.Document_Object_ID = d2.Parent_Document_Object_ID WHERE d2.Owner = 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT d2.Parent_Document_Object_ID FROM Document_Objects d1, Document_Objects d2 WHERE d1.Document_Object_ID = d2.Parent_Document_Object_ID AND d2.Owner = 'Marlin'",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Objects d2 WHERE d2.Owner = 'Marlin' AND d.Document_Object_ID = d2.Parent_Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT DO.Document_Object_ID FROM Document_Objects AS DO WHERE DO.Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID > 0",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Document_Object_ID"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description LIKE 'Braeden Collection'",
          "SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection'",
          "SELECT d.Owner FROM Document_Objects d WHERE d.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection' LIMIT 1",
          "SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description LIKE 'Braeden Collection'",
          "SELECT d.Owner FROM Document_Objects AS d WHERE d.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE TRIM(Description) = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE UPPER(Description) = UPPER('Braeden Collection')",
          "SELECT Owner FROM Document_Objects WHERE LOWER(Description) = LOWER('Braeden Collection')"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'",
          "SELECT DO.Owner FROM Document_Objects AS DO WHERE DO.Description = 'Braeden Collection'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'",
          "SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection'",
          "SELECT DO.Owner FROM Document_Objects DO WHERE DO.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection'",
          "SELECT DISTINCT DO.Owner FROM Document_Objects DO WHERE DO.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description LIKE 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection' AND Owner IS NOT NULL",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Description LIKE 'Braeden Collection'"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT d.Owner FROM Document_Objects d JOIN Document_Objects p ON d.Document_Object_ID = p.Parent_Document_Object_ID WHERE p.Owner = 'Marlin'",
          "SELECT d2.Owner FROM Document_Objects d1 INNER JOIN Document_Objects d2 ON d1.Parent_Document_Object_ID = d2.Document_Object_ID WHERE d1.Owner = 'Marlin'",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT d.Owner FROM Document_Objects d, Document_Objects p WHERE d.Document_Object_ID = p.Parent_Document_Object_ID AND p.Owner = 'Marlin'",
          "SELECT TOP 1 Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin')",
          "SELECT d.Owner FROM Document_Objects AS d JOIN Document_Objects AS p ON d.Document_Object_ID = p.Parent_Document_Object_ID WHERE p.Owner = 'Marlin'",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' LIMIT 1)",
          "SELECT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects D INNER JOIN Document_Objects C ON D.Document_Object_ID = C.Parent_Document_Object_ID WHERE C.Owner = 'Marlin'",
          "SELECT D2.Owner FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Parent_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Marlin'",
          "SELECT parent.Owner FROM Document_Objects AS child JOIN Document_Objects AS parent ON child.Parent_Document_Object_ID = parent.Document_Object_ID WHERE child.Owner = 'Marlin'",
          "SELECT (SELECT Owner FROM Document_Objects WHERE Document_Object_ID = doc.Parent_Document_Object_ID) FROM Document_Objects doc WHERE doc.Owner = 'Marlin'",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects AS D, Document_Objects AS P WHERE D.Document_Object_ID = P.Parent_Document_Object_ID AND P.Owner = 'Marlin'",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT TOP 1 Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT d.Description FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT d.Description FROM Document_Objects d INNER JOIN Document_Objects p ON d.Parent_Document_Object_ID = p.Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Document_Objects WHERE Document_Object_ID = Parent_Document_Object_ID)",
          "SELECT DISTINCT d.Description FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL AND d.Description IS NOT NULL",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT d.Description FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL ORDER BY d.Description",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Description <> ''",
          "SELECT DISTINCT d.Description FROM Document_Objects d WHERE EXISTS (SELECT p.Document_Object_ID FROM Document_Objects p WHERE p.Document_Object_ID = d.Parent_Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT D.Description FROM Document_Objects AS D WHERE D.Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT D.Description FROM Document_Objects D INNER JOIN Document_Objects P ON D.Document_Object_ID = P.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Document_Objects AS P WHERE P.Parent_Document_Object_ID = Document_Object_ID)",
          "SELECT DISTINCT D.Description FROM Document_Objects D WHERE EXISTS (SELECT 1 FROM Document_Objects P WHERE P.Parent_Document_Object_ID = D.Document_Object_ID)",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Document_Object_ID = D2.Parent_Document_Object_ID",
          "SELECT DISTINCT D.Description FROM Document_Objects D WHERE D.Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT D.Description FROM Document_Objects D WHERE D.Parent_Document_Object_ID IS NOT NULL AND D.Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(1) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE UPPER(Owner) = 'MARLIN'",
          "SELECT COUNT(*) FROM Document_Objects WHERE LOWER(Owner) = 'marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IS NOT NULL",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Description IS NOT NULL",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Other_Details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(1) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects DO WHERE DO.Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Owner",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner COLLATE UTF8_GENERAL_CI = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE UPPER(Owner) = UPPER('Marlin')",
          "SELECT COUNT(*) FROM Document_Objects WHERE LOWER(Owner) = LOWER('Marlin')"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Document_Objects p ON d.Document_Object_ID = p.Parent_Document_Object_ID WHERE p.Parent_Document_Object_ID IS NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d1.Document_Object_ID FROM Document_Objects d1 WHERE NOT EXISTS (SELECT 1 FROM Document_Objects d2 WHERE d1.Document_Object_ID = d2.Parent_Document_Object_ID)",
          "SELECT Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT * FROM Document_Objects WHERE Parent_Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d LEFT OUTER JOIN Document_Objects p ON d.Document_Object_ID = p.Parent_Document_Object_ID WHERE p.Parent_Document_Object_ID IS NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p WHERE p.Parent_Document_Object_ID IS NOT NULL)",
          "SELECT Document_Object_ID FROM Document_Objects d1 WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects d2 WHERE d2.Parent_Document_Object_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d1.Document_Object_ID FROM Document_Objects d1 INNER JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Document_Objects d WHERE Document_Objects.Document_Object_ID = d.Parent_Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Objects WHERE Parent_Document_Object_ID = d.Document_Object_ID)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL ORDER BY Document_Object_ID",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL ORDER BY d.Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS Document_ID, COUNT(Document_Object_ID) AS Number_of_Children FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS Child_Documents_Count FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL",
          "SELECT d1.Parent_Document_Object_ID, COUNT(d2.Document_Object_ID) FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(1) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS Parent_ID, COUNT(Document_Object_ID) AS Total_Children FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID AS ParentDocID, COUNT(d.Document_Object_ID) AS ChildCount FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS ChildDocuments FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS NumberOfChildDocuments FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL",
          "SELECT p.Parent_Document_Object_ID, COUNT(*) FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING p.Parent_Document_Object_ID IS NOT NULL",
          "SELECT COUNT(Document_Object_ID), Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(1) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS ParentID, COUNT(Document_Object_ID) AS ChildCount FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT COUNT(*) AS TotalChildren, Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections",
          "SELECT collection_name FROM collections",
          "SELECT Collection_Name FROM Collections;",
          "SELECT collection_name FROM collections;",
          "SELECT Collections.Collection_Name FROM Collections",
          "SELECT collections.collection_name FROM collections",
          "SELECT Collections.Collection_Name FROM Collections;",
          "SELECT collections.collection_name FROM collections;",
          "SELECT c.Collection_Name FROM Collections AS c",
          "SELECT c.collection_name FROM collections AS c"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections",
          "SELECT c.Collection_Name FROM Collections AS c",
          "SELECT Collection_Name FROM Collections ORDER BY Collection_Name",
          "SELECT DISTINCT Collection_Name FROM Collections",
          "SELECT Collection_Name FROM Collections WHERE Collection_Name IS NOT NULL",
          "SELECT Collection_Name FROM Collections GROUP BY Collection_Name",
          "SELECT Collection_Name FROM Collections c WHERE EXISTS (SELECT 1 FROM Collections WHERE Collection_ID = c.Collection_ID)",
          "SELECT Collection_Name FROM Collections WHERE Collection_Name LIKE '%'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections)",
          "SELECT Collection_Name FROM Collections LIMIT 100"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name LIKE 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' LIMIT 1",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_ID IS NOT NULL",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' ORDER BY Collection_ID DESC LIMIT 1",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_Description IS NOT NULL",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' FETCH FIRST ROW ONLY",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_ID > 0",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_Description <> ''"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name LIKE 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' COLLATE NOCASE",
          "SELECT Collection_Description FROM Collections WHERE UPPER(Collection_Name) = UPPER('Best')",
          "SELECT Collection_Description FROM Collections WHERE LOWER(Collection_Name) = LOWER('Best')",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name IN ('Best')",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_Description IS NOT NULL",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' ORDER BY Collection_ID",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' LIMIT 1"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C2.Collection_Name FROM Collections C1 JOIN Collections C2 ON C1.Parent_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')",
          "SELECT parent.Collection_Name FROM Collections child JOIN Collections parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT C.Collection_Name FROM Collections AS C INNER JOIN Collections AS P ON C.Parent_Collection_ID = P.Collection_ID WHERE P.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')",
          "SELECT C2.Collection_Name FROM Collections AS C1, Collections AS C2 WHERE C1.Parent_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections AS child, Collections AS parent WHERE child.Parent_Collection_ID = parent.Collection_ID AND child.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice' LIMIT 1)",
          "SELECT C2.Collection_Name FROM Collections C1, Collections C2 WHERE C1.Parent_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Nice'",
          "SELECT TOP 1 parent.Collection_Name FROM Collections child JOIN Collections parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name FROM Collections AS C JOIN Collections AS P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections child JOIN Collections parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')",
          "SELECT C2.Collection_Name FROM Collections C1 INNER JOIN Collections C2 ON C1.Parent_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')",
          "SELECT P.Collection_Name FROM Collections AS C, Collections AS P WHERE C.Parent_Collection_ID = P.Collection_ID AND C.Collection_Name = 'Nice'",
          "SELECT parent_col.Collection_Name FROM Collections child_col, Collections parent_col WHERE child_col.Parent_Collection_ID = parent_col.Collection_ID AND child_col.Collection_Name = 'Nice'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice' LIMIT 1)",
          "SELECT C.Collection_Name FROM Collections C WHERE EXISTS (SELECT 1 FROM Collections WHERE Collection_Name = 'Nice' AND Parent_Collection_ID = C.Collection_ID)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice' AND Parent_Collection_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C LEFT JOIN Collections P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Parent_Collection_ID IS NULL",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C WHERE NOT EXISTS (SELECT 1 FROM Collections P WHERE P.Parent_Collection_ID = C.Collection_ID)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)",
          "SELECT Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)",
          "SELECT DISTINCT C.Collection_Name FROM Collections C LEFT JOIN Collections P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Parent_Collection_ID IS NULL",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID <> Collection_ID)"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C LEFT JOIN Collections P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Parent_Collection_ID IS NULL",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT DISTINCT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE NOT EXISTS (SELECT 1 FROM Collections AS Sub WHERE Sub.Parent_Collection_ID = Collections.Collection_ID)",
          "SELECT C.Collection_Name FROM Collections AS C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections AS P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT P.Parent_Collection_ID FROM Collections P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P)"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1",
          "SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1)",
          "SELECT p.Parent_Document_Object_ID FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID HAVING COUNT(p.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Parent_Document_Object_ID) > 1",
          "SELECT DISTINCT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)",
          "SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1)",
          "SELECT d1.Parent_Document_Object_ID FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Parent_Document_Object_ID HAVING COUNT(d2.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Objects WHERE Parent_Document_Object_ID = d.Parent_Document_Object_ID GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Parent_Document_Object_ID) > 1"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT count(Collection_ID) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT count(*) FROM Collections c JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_Name = 'Best'",
          "SELECT count(c.Collection_ID) FROM Collections c INNER JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_Name = 'Best'",
          "SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID IS NOT NULL",
          "SELECT count(*) FROM Collections c WHERE EXISTS (SELECT 1 FROM Collections p WHERE p.Collection_Name = 'Best' AND c.Parent_Collection_ID = p.Collection_ID)",
          "SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best' LIMIT 1)",
          "SELECT count(DISTINCT c.Collection_ID) FROM Collections c, Collections p WHERE c.Parent_Collection_ID = p.Collection_ID AND p.Collection_Name = 'Best'",
          "SELECT count(*) FROM Collections c WHERE c.Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID != Parent_Collection_ID"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT count(Collection_ID) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections c JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_Name = 'Best'",
          "SELECT COUNT(c.Collection_ID) FROM Collections c INNER JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name LIKE 'Best')",
          "SELECT COUNT(*) FROM Collections c WHERE EXISTS (SELECT 1 FROM Collections p WHERE p.Collection_ID = c.Parent_Collection_ID AND p.Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best' LIMIT 1)",
          "SELECT COUNT(*) FROM Collections c WHERE c.Parent_Collection_ID = (SELECT p.Collection_ID FROM Collections p WHERE p.Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT c.Collection_ID) FROM Collections c, Collections p WHERE c.Parent_Collection_ID = p.Collection_ID AND p.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID != Parent_Collection_ID"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Related_Document_Object_ID FROM Document_Objects AS DO INNER JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO INNER JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Objects INNER JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Related_Document_Object_ID FROM Document_Objects AS DO INNER JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Subset_Members DSM, Document_Objects DO WHERE DSM.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Objects INNER JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID WHERE Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO INNER JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS CS JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS NumberOfCollections FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(DISTINCT CSM.Collection_ID) FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Related_Collection_ID) FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) AS TotalCollections FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) AS CollectionCount FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) FROM Collection_Subsets CS, Collection_Subset_Members CSM WHERE CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_ID) FROM Collection_Subsets, Collection_Subset_Members WHERE Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) FROM Collection_Subsets AS CS LEFT OUTER JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS NumOfCollections FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(*) AS Num_Collections FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(DISTINCT Collection_ID) AS Collection_Count FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS Total_Collections FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID",
          "SELECT a.Collection_Subset_ID, a.Collection_Subset_Name, COUNT(b.Collection_ID) AS Collection_Count FROM Collection_Subsets a LEFT JOIN Collection_Subset_Members b ON a.Collection_Subset_ID = b.Collection_Subset_ID GROUP BY a.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) FROM Collection_Subsets LEFT JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) FROM Collection_Subsets CS, Collection_Subset_Members CSM WHERE CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) AS Num_Collections FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) AS Collections_Count FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Total_Collections FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(DISTINCT CSM.Collection_ID) AS Collection_Count FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(*) AS Child_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY Child_Count DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL ORDER BY NumberOfChildren DESC LIMIT 1",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID ORDER BY COUNT(d.Document_Object_ID) DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Parent_Document_Object_ID, COUNT(*) AS TotalChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY TotalChildren DESC",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL ORDER BY ChildCount DESC LIMIT 1",
          "SELECT d.Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) AS ChildCount FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID ORDER BY ChildCount DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY COUNT(Document_Object_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS ChildrenCount FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT d1.Parent_Document_Object_ID, COUNT(d2.Document_Object_ID) FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(1) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL",
          "SELECT d.Parent_Document_Object_ID, COUNT(*) FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) AS TotalChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID ORDER BY TotalChildren DESC",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Related_Count ASC LIMIT 1",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) AS Num_Related FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID ORDER BY Num_Related ASC LIMIT 1",
          "SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT DSM.Document_Object_ID, COUNT(*) AS Related_Documents FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID ORDER BY Related_Documents ASC LIMIT 1",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(Related_Document_Object_ID) ASC LIMIT 1",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID ORDER BY COUNT(DSM.Related_Document_Object_ID) ASC LIMIT 1",
          "SELECT Document_Object_ID, MIN(COUNT(Related_Document_Object_ID)) FROM Document_Subset_Members GROUP BY Document_Object_ID",
          "SELECT DSM.Document_Object_ID, MIN(COUNT(DSM.Related_Document_Object_ID)) FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Document_Count = (SELECT MIN(COUNT(Related_Document_Object_ID)) FROM Document_Subset_Members GROUP BY Document_Object_ID)",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID HAVING Related_Document_Count = (SELECT MIN(COUNT(DSM.Related_Document_Object_ID)) FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT d.Document_Object_ID FROM Document_Objects AS d LEFT JOIN Documents_in_Collections AS dc ON d.Document_Object_ID = dc.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY COUNT(dc.Document_Object_ID) ASC LIMIT 1",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC LIMIT 1",
          "SELECT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY COUNT(dc.Collection_ID) ASC LIMIT 1",
          "SELECT TOP 1 Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*)",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY (SELECT COUNT(*) FROM Documents_in_Collections WHERE Document_Object_ID = Document_Objects.Document_Object_ID) ASC LIMIT 1",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT NULL FROM Documents_in_Collections dc WHERE dc.Document_Object_ID = d.Document_Object_ID) LIMIT 1",
          "SELECT Document_Object_ID FROM (SELECT Document_Object_ID, COUNT(*) as DocCount FROM Documents_in_Collections GROUP BY Document_Object_ID) AS SubQuery ORDER BY DocCount ASC LIMIT 1",
          "SELECT Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Documents_in_Collections) LIMIT 1",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Documents_in_Collections GROUP BY Document_Object_ID) AS SubQuery) LIMIT 1"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count BETWEEN 2 AND 4",
          "SELECT D.Document_Object_ID, COUNT(*) AS Num_Related_Documents FROM Document_Objects AS D JOIN Document_Subset_Members AS DSM ON D.Document_Object_ID = DSM.Document_Object_ID GROUP BY D.Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) AS Total_Related FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID HAVING Total_Related >= 2 AND Total_Related <= 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) > 1 AND COUNT(Related_Document_Object_ID) < 5",
          "SELECT DSM.Document_Object_ID, COUNT(*) FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(*) AS Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Documents >= 2 AND Related_Documents <= 4",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) AS Count_Related FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID HAVING Count_Related BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS CountOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING CountOfRelatedDocuments > 1 AND CountOfRelatedDocuments < 5",
          "SELECT DSM.Document_Object_ID, COUNT(DSM.Related_Document_Object_ID) FROM Document_Subset_Members DSM GROUP BY DSM.Document_Object_ID HAVING COUNT(DSM.Related_Document_Object_ID) BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING NumberOfRelatedDocuments IN (2, 3, 4)"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count BETWEEN 2 AND 4",
          "SELECT D.Document_Object_ID, COUNT(*) AS Total_Related FROM Document_Subset_Members AS D GROUP BY D.Document_Object_ID HAVING Total_Related >= 2 AND Total_Related <= 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4",
          "SELECT a.Document_Object_ID, COUNT(b.Related_Document_Object_ID) AS Related_Documents FROM Document_Subset_Members a JOIN Document_Subset_Members b ON a.Document_Object_ID = b.Document_Object_ID GROUP BY a.Document_Object_ID HAVING Related_Documents BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(*) AS Count_of_Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Count_of_Related_Documents > 1 AND Count_of_Related_Documents < 5",
          "SELECT main.Document_Object_ID, COUNT(sub.Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members main LEFT JOIN Document_Subset_Members sub ON main.Document_Object_ID = sub.Document_Object_ID GROUP BY main.Document_Object_ID HAVING Related_Count BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Num_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Num_Related > 1 AND Num_Related < 5",
          "SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) >= 2 AND COUNT(*) <= 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Document_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Document_Count > 1 AND Related_Document_Count < 5",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Count_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Count_Related IN (2, 3, 4)"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT d2.Owner FROM Document_Objects AS d1 JOIN Document_Subset_Members AS ds ON d1.Document_Object_ID = ds.Document_Object_ID JOIN Document_Objects AS d2 ON ds.Related_Document_Object_ID = d2.Document_Object_ID WHERE d1.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT d.Owner FROM Document_Objects d INNER JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID INNER JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE o.Owner = 'Braeden'",
          "SELECT DISTINCT o.Owner FROM Document_Objects o, Document_Subset_Members m WHERE o.Document_Object_ID = m.Related_Document_Object_ID AND m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT d.Owner FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members m JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE o.Owner = 'Braeden' AND m.Related_Document_Object_ID = d.Document_Object_ID)",
          "SELECT DISTINCT d.Owner FROM Document_Objects d, Document_Subset_Members m, Document_Objects o WHERE d.Document_Object_ID = m.Related_Document_Object_ID AND m.Document_Object_ID = o.Document_Object_ID AND o.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Braeden')",
          "SELECT DISTINCT d2.Owner FROM Document_Objects d1, Document_Subset_Members ds, Document_Objects d2 WHERE d1.Document_Object_ID = ds.Document_Object_ID AND ds.Related_Document_Object_ID = d2.Document_Object_ID AND d1.Owner = 'Braeden'",
          "SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID WHERE m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT m.Related_Document_Object_ID FROM Document_Subset_Members m JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE o.Owner = 'Braeden')"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT D2.Owner FROM Document_Objects AS D1 JOIN Document_Subset_Members AS DSM ON D1.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Objects AS D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'",
          "SELECT DISTINCT owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT do.Owner FROM Document_Objects do INNER JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Related_Document_Object_ID WHERE dsm.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT D.Owner FROM Document_Objects D, Document_Subset_Members DSM WHERE D.Document_Object_ID = DSM.Related_Document_Object_ID AND DSM.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Braeden')",
          "SELECT DISTINCT other.Owner FROM Document_Objects AS owner JOIN Document_Subset_Members AS link ON owner.Document_Object_ID = link.Document_Object_ID JOIN Document_Objects AS other ON link.Related_Document_Object_ID = other.Document_Object_ID WHERE owner.Owner = 'Braeden'",
          "SELECT DISTINCT related.Owner FROM Document_Objects AS related WHERE EXISTS (SELECT 1 FROM Document_Subset_Members AS DSM JOIN Document_Objects AS D ON DSM.Document_Object_ID = D.Document_Object_ID WHERE D.Owner = 'Braeden' AND DSM.Related_Document_Object_ID = related.Document_Object_ID)",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT D2.Owner FROM Document_Objects D1 INNER JOIN Document_Subset_Members DSM ON D1.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Objects D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'",
          "SELECT DISTINCT D.Owner FROM Document_Objects D JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Related_Document_Object_ID WHERE DSM.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT DS.Document_Subset_Name FROM Document_Objects DO JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DO.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DS.Document_Subset_Name FROM Document_Objects AS DO INNER JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Subsets AS DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DO.Owner = 'Braeden'",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT DSM.Document_Subset_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Braeden')",
          "SELECT DISTINCT DS.Document_Subset_Name FROM Document_Subsets DS, Document_Subset_Members DSM, Document_Objects DO WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID AND DSM.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Braeden'",
          "SELECT DS.Document_Subset_Name FROM Document_Objects DO, Document_Subset_Members DSM, Document_Subsets DS WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DSM.Document_Subset_ID = DS.Document_Subset_ID AND DO.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'",
          "SELECT DISTINCT DS.Document_Subset_Name FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Braeden'",
          "SELECT DISTINCT DS.Document_Subset_Name FROM Document_Subsets AS DS INNER JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID INNER JOIN Document_Objects AS DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do INNER JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds, Document_Subset_Members dsm, Document_Objects do WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID AND dsm.Document_Object_ID = do.Document_Object_ID AND do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Braeden')",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do, Document_Subset_Members dsm, Document_Subsets ds WHERE do.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds INNER JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID INNER JOIN Document_Objects do ON do.Document_Object_ID = dsm.Document_Object_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds, Document_Subset_Members dsm, Document_Objects do WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID AND dsm.Document_Object_ID = do.Document_Object_ID AND do.Owner = 'Braeden'"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID",
          "SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) FROM Document_Subsets d INNER JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS Num_Documents FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID",
          "SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS Document_Count FROM Document_Subsets AS d JOIN Document_Subset_Members AS m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS TotalDocuments FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) FROM Document_Subsets ds, Document_Subset_Members dsm WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subsets, Document_Subset_Members WHERE Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subsets LEFT JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DOC.Document_Object_ID) FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects DOC ON DSM.Document_Object_ID = DOC.Document_Object_ID GROUP BY DS.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Document_Count FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) FROM Document_Subsets AS DS INNER JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID INNER JOIN Document_Objects AS DO ON DSM.Document_Object_ID = DO.Document_Object_ID GROUP BY DS.Document_Subset_ID",
          "SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT dm.Document_Object_ID) FROM Document_Subsets d JOIN Document_Subset_Members dm ON d.Document_Subset_ID = dm.Document_Subset_ID JOIN Document_Objects o ON dm.Document_Object_ID = o.Document_Object_ID GROUP BY d.Document_Subset_ID",
          "SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT o.Document_Object_ID) FROM Document_Subsets d, Document_Subset_Members dm, Document_Objects o WHERE d.Document_Subset_ID = dm.Document_Subset_ID AND dm.Document_Object_ID = o.Document_Object_ID GROUP BY d.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Objects.Document_Object_ID) FROM Document_Subsets, Document_Subset_Members, Document_Objects WHERE Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID AND Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subsets.Document_Subset_ID",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Num_Documents FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID LEFT JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID GROUP BY DS.Document_Subset_ID",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DOC.Document_Object_ID) FROM Document_Subsets DS, Document_Subset_Members DSM, Document_Objects DOC WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID AND DSM.Document_Object_ID = DOC.Document_Object_ID GROUP BY DS.Document_Subset_ID",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DOC.Document_Object_ID) FROM Document_Subsets AS DS INNER JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID INNER JOIN Document_Objects AS DOC ON DSM.Document_Object_ID = DOC.Document_Object_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DOC.Document_Object_ID) FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID LEFT JOIN Document_Objects DOC ON DSM.Document_Object_ID = DOC.Document_Object_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS DocumentCount FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT D.Document_Subset_ID, D.Document_Subset_Name, COUNT(DISTINCT M.Document_Object_ID) AS TotalDocuments FROM Document_Subsets D INNER JOIN Document_Subset_Members M ON D.Document_Subset_ID = M.Document_Subset_ID GROUP BY D.Document_Subset_ID, D.Document_Subset_Name ORDER BY TotalDocuments DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(UNIQUE DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID ORDER BY DocumentCount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT TOP 1 DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT OUTER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(DISTINCT DSM.Document_Object_ID) = (SELECT MAX(COUNT(DISTINCT Document_Object_ID)) FROM Document_Subset_Members GROUP BY Document_Subset_ID)",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT D.Document_Object_ID) AS Num_Documents FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects D ON DSM.Document_Object_ID = D.Document_Object_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY COUNT(DISTINCT D.Document_Object_ID) DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(UNIQUE DSM.Document_Object_ID) AS Total_Documents FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Total_Documents DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(*) AS Document_Count FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Document_Subset_Members GROUP BY Document_Subset_ID)",
          "SELECT TOP 1 DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY COUNT(DISTINCT DSM.Document_Object_ID) DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS LEFT OUTER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT d.Document_Object_ID FROM Document_Objects d INNER JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID INNER JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT dmo.Document_Object_ID FROM Document_Objects dmo, Document_Subset_Members dsm, Document_Subsets ds WHERE dmo.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members, Document_Subsets WHERE Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Subsets.Document_Subset_Name = 'Best for 2000'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT dmo.Document_Object_ID FROM Document_Objects AS dmo JOIN Document_Subset_Members AS dsm ON dmo.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets AS ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000'",
          "SELECT dmo.Document_Object_ID FROM Document_Objects dmo INNER JOIN Document_Subset_Members dsm ON dmo.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT d.Document_Object_ID FROM Document_Objects d INNER JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID INNER JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT dmo.Document_Object_ID FROM Document_Objects AS dmo JOIN Document_Subset_Members AS dsm ON dmo.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT Document_Object_ID FROM Document_Subset_Members, Document_Subsets WHERE Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Subsets.Document_Subset_Name = 'Best for 2000'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT dmo.Document_Object_ID FROM Document_Objects dmo, Document_Subset_Members dsm, Document_Subsets ds WHERE dmo.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT dmo.Document_Object_ID FROM Document_Objects dmo INNER JOIN Document_Subset_Members dsm ON dmo.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT dsm.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds INNER JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds, Document_Subset_Members dsm WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members USING(Document_Subset_ID)",
          "SELECT ds.Document_Subset_Name AS Subset_Name, dsm.Document_Object_ID AS Doc_ID FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets, Document_Subset_Members WHERE Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subsets ds RIGHT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT D.Document_Object_ID, DS.Document_Subset_Name FROM Document_Objects AS D JOIN Document_Subset_Members AS DSM ON D.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets AS DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID",
          "SELECT Document_Objects.Document_Object_ID, Document_Subsets.Document_Subset_Name FROM Document_Objects INNER JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID",
          "SELECT do.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects do, Document_Subset_Members dsm, Document_Subsets ds WHERE do.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID",
          "SELECT a.Document_Object_ID, b.Document_Subset_Name FROM Document_Objects a, Document_Subset_Members c, Document_Subsets b WHERE a.Document_Object_ID = c.Document_Object_ID AND c.Document_Subset_ID = b.Document_Subset_ID",
          "SELECT Document_Object_ID, Document_Subset_Name FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID",
          "SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID",
          "SELECT Document_Object_ID, Document_Subset_Name FROM Document_Objects, Document_Subset_Members, Document_Subsets WHERE Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID AND Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID",
          "SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects d INNER JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID",
          "SELECT Document_Object_ID, Document_Subset_Name FROM Document_Objects CROSS JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID CROSS JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID",
          "SELECT d.Document_Object_ID, ds.Document_Subset_Name FROM Document_Objects d, Document_Subset_Members dsm, Document_Subsets ds WHERE d.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name FROM Collections C JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT DISTINCT Collections.Collection_Name FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID INNER JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections, Documents_in_Collections, Document_Objects WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID AND Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom'",
          "SELECT C.Collection_Name FROM Collections AS C, Documents_in_Collections AS DC, Document_Objects AS DO WHERE C.Collection_ID = DC.Collection_ID AND DC.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT C.Collection_Name FROM Collections C WHERE EXISTS (SELECT 1 FROM Documents_in_Collections DC JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DC.Collection_ID = C.Collection_ID AND DO.Owner = 'Ransom')",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Ransom')",
          "SELECT C.Collection_Name FROM Collections C JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID WHERE DC.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DISTINCT C.Collection_Name FROM Collections C LEFT JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID LEFT JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dc ON c.Collection_ID = dc.Collection_ID JOIN Document_Objects do ON dc.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT c.Collection_Name FROM Collections c, Documents_in_Collections dc, Document_Objects do WHERE c.Collection_ID = dc.Collection_ID AND dc.Document_Object_ID = do.Document_Object_ID AND do.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID INNER JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections, Document_Objects WHERE Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom')",
          "SELECT Collection_Name FROM Collections WHERE EXISTS (SELECT 1 FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom' AND Documents_in_Collections.Collection_ID = Collections.Collection_ID)",
          "SELECT DISTINCT Collection_Name FROM Collections, Documents_in_Collections, Document_Objects WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID AND Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT c.Collection_Name FROM Collections c WHERE EXISTS (SELECT * FROM Documents_in_Collections dc INNER JOIN Document_Objects do ON dc.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom' AND dc.Collection_ID = c.Collection_ID)"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(c.Collection_ID) AS CollectionCount FROM Documents_in_Collections AS d JOIN Collections AS c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(*) AS NumOfCollections FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(Collection_ID) AS TotalCollections, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(*) FROM Documents_in_Collections d GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(DISTINCT Collection_ID) AS CollectionsCount FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(c.Collection_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS 'Number of Collections' FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(c.Collection_ID) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY Document_Object_ID"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(c.Collection_ID) AS CollectionCount FROM Documents_in_Collections AS d JOIN Collections AS c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(*) AS NumOfCollections FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(Collection_ID) AS TotalCollections, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(*) FROM Documents_in_Collections d GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS CollectionsCount FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(c.Collection_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(*) FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections AS d INNER JOIN Collections AS c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(Documents_in_Collections.Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT doc.Document_Object_ID FROM Documents_in_Collections AS doc JOIN Collections AS col ON doc.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections USING(Collection_ID) WHERE Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC INNER JOIN Collections C ON DOC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT DOC.Document_Object_ID) FROM Documents_in_Collections DOC, Collections C WHERE DOC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC JOIN Collections C ON DOC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC LEFT JOIN Collections C ON DOC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT DOC.Document_Object_ID) FROM Documents_in_Collections DOC LEFT OUTER JOIN Collections C ON DOC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS NumberOfDocuments FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(D.Document_Object_ID) DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS DocumentCount FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT Collection_Name, Collections.Collection_ID, COUNT(*) AS TotalDocuments FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID ORDER BY TotalDocuments DESC LIMIT 1",
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(*) AS DocCount FROM Collections AS C INNER JOIN Documents_in_Collections AS D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY DocCount DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) FROM Collections LEFT JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_ID ORDER BY COUNT(Document_Object_ID) DESC LIMIT 1",
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) FROM Collections C, Documents_in_Collections D WHERE C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(D.Document_Object_ID) DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS NumOfDocs FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_ID ORDER BY NumOfDocs DESC LIMIT 1",
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS DocumentCount FROM Collections C LEFT JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS TotalDocs FROM Collections JOIN Documents_in_Collections USING(Collection_ID) GROUP BY Collection_ID ORDER BY TotalDocs DESC LIMIT 1",
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(*) FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC LIMIT 1",
          "SELECT Collection_ID, Collection_Name, COUNT(Document_Object_ID) AS Num_Documents FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collection_Name = 'Best' GROUP BY Collection_ID ORDER BY Num_Documents DESC LIMIT 1",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(*) AS Total_Documents FROM Collections C INNER JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Total_Documents DESC LIMIT 1",
          "SELECT TOP 1 C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C LEFT JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C, Documents_in_Collections DIC WHERE C.Collection_ID = DIC.Collection_ID AND C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections AS C JOIN Documents_in_Collections AS DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC LIMIT 1",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) FROM Collections C JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID HAVING COUNT(DIC.Document_Object_ID) = (SELECT MAX(Count) FROM Documents_in_Collections GROUP BY Collection_ID)",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(*) AS Document_Count FROM Collections C LEFT JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Documents_in_Collections GROUP BY Collection_ID)",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C LEFT JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC LIMIT 1",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C INNER JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT d.Document_Object_ID FROM Document_Objects AS d JOIN Documents_in_Collections AS dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections AS c ON dc.Collection_ID = c.Collection_ID JOIN Document_Subsets AS ds ON ds.Document_Subset_ID = d.Document_Object_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d INNER JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID INNER JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE EXISTS (SELECT 1 FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000' AND ds.Document_Subset_ID = d.Document_Object_ID) AND c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d, Documents_in_Collections dc, Collections c, Document_Subsets ds WHERE d.Document_Object_ID = dc.Document_Object_ID AND dc.Collection_ID = c.Collection_ID AND ds.Document_Subset_ID = d.Document_Object_ID AND ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE d.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members dm WHERE dm.Document_Object_ID = d.Document_Object_ID AND dm.Document_Subset_ID = (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000')) AND EXISTS (SELECT 1 FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE dc.Document_Object_ID = d.Document_Object_ID AND c.Collection_Name = 'Best')",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000') AND d.Document_Object_ID IN (SELECT dc.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best')",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) INTERSECT SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT d.Document_Object_ID FROM Document_Objects d INNER JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID INNER JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID INNER JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID INNER JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d, Document_Subset_Members dm, Document_Subsets ds, Documents_in_Collections dc, Collections c WHERE d.Document_Object_ID = dm.Document_Object_ID AND dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' AND d.Document_Object_ID = dc.Document_Object_ID AND dc.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do INNER JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID INNER JOIN Collections col ON dic.Collection_ID = col.Collection_ID INNER JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND col.Collection_Name = 'Best'",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do, Documents_in_Collections dic, Collections col, Document_Subset_Members dsm, Document_Subsets ds WHERE do.Document_Object_ID = dic.Document_Object_ID AND dic.Collection_ID = col.Collection_ID AND do.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' AND col.Collection_Name = 'Best'",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections col ON dic.Collection_ID = col.Collection_ID, Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Document_Object_ID = dsm.Document_Object_ID AND ds.Document_Subset_Name = 'Best for 2000' AND col.Collection_Name = 'Best'",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do WHERE EXISTS (SELECT 1 FROM Documents_in_Collections dic JOIN Collections col ON dic.Collection_ID = col.Collection_ID WHERE do.Document_Object_ID = dic.Document_Object_ID AND col.Collection_Name = 'Best') AND EXISTS (SELECT 1 FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Document_Object_ID = dsm.Document_Object_ID AND ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do WHERE do.Document_Object_ID IN (SELECT dic.Document_Object_ID FROM Documents_in_Collections dic JOIN Collections col ON dic.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best') AND do.Document_Object_ID IN (SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) INTERSECT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do, Documents_in_Collections dic, Collections col WHERE do.Document_Object_ID = dic.Document_Object_ID AND dic.Collection_ID = col.Collection_ID AND col.Collection_Name = 'Best' AND do.Document_Object_ID IN (SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections col ON dic.Collection_ID = col.Collection_ID JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND col.Collection_Name = 'Best' GROUP BY do.Document_Object_ID HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections AS d INNER JOIN Collections AS c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members WHERE Document_Object_ID = d.Document_Object_ID AND Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members ds, Document_Subsets dss WHERE ds.Document_Subset_ID = dss.Document_Subset_ID AND dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID WHERE c.Collection_Name = 'Best' AND (ds.Document_Subset_ID IS NULL OR ds.Document_Subset_ID != (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT OUTER JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID AND ds.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') WHERE c.Collection_Name = 'Best' AND ds.Document_Object_ID IS NULL",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds WHERE ds.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID WHERE c.Collection_Name = 'Best' AND (ds.Document_Subset_ID IS NULL OR ds.Document_Subset_ID NOT IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))"
        ]
      ]
    },
    {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members ds, Document_Subsets dss WHERE ds.Document_Subset_ID = dss.Document_Subset_ID AND dss.Document_Subset_Name = 'Best for 2000' AND ds.Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' EXCEPT SELECT ds.Document_Object_ID FROM Document_Subset_Members ds INNER JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d LEFT JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds LEFT JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND NOT EXISTS (SELECT * FROM Document_Subset_Members ds JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000' AND ds.Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds, Document_Subsets dss WHERE ds.Document_Subset_ID = dss.Document_Subset_ID AND dss.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND NOT EXISTS (SELECT ds.Document_Object_ID FROM Document_Subset_Members ds INNER JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000' AND ds.Document_Object_ID = d.Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) OR Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND dm.Document_Object_ID = d.Document_Object_ID) OR EXISTS (SELECT 1 FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND dc.Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Document_Objects d INNER JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID INNER JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT d.Document_Object_ID FROM Document_Objects d INNER JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID INNER JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d, Document_Subset_Members dm, Document_Subsets ds WHERE d.Document_Object_ID = dm.Document_Object_ID AND dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' UNION SELECT d.Document_Object_ID FROM Document_Objects d, Documents_in_Collections dc, Collections c WHERE d.Document_Object_ID = dc.Document_Object_ID AND dc.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION ALL SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AS subquery",
          "SELECT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID LEFT JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID LEFT JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' OR c.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000') OR d.Document_Object_ID IN (SELECT dc.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best')",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000')) UNION SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name LIKE 'Best'))",
          "SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION ALL SELECT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT DISTINCT D.Document_Object_ID FROM Document_Objects D JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT D.Document_Object_ID FROM Document_Objects D JOIN Documents_in_Collections DIC ON D.Document_Object_ID = DIC.Document_Object_ID JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION ALL SELECT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best')",
          "SELECT DISTINCT Document_Object_ID FROM (SELECT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best') AS CombinedResults",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' AND DSM.Document_Object_ID = Document_Objects.Document_Object_ID) OR EXISTS (SELECT 1 FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best' AND DIC.Document_Object_ID = Document_Objects.Document_Object_ID)",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects DO WHERE DO.Document_Object_ID IN (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000') OR DO.Document_Object_ID IN (SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best')",
          "SELECT DISTINCT a.Document_Object_ID FROM (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best') a",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM, Document_Subsets DS WHERE DSM.Document_Subset_ID = DS.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC, Collections C WHERE DIC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C2.Collection_Name FROM Collections C1 JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT DISTINCT C.Collection_Name FROM Collections C INNER JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID WHERE CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT C.Collection_Name FROM Collections AS C, Collection_Subset_Members AS CSM WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT C.Collection_Name FROM Collections C WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members CSM WHERE CSM.Related_Collection_ID = C.Collection_ID AND CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT C.Collection_Name FROM Collections C JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID JOIN Collections C1 ON CSM.Collection_ID = C1.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID IN (SELECT CSM.Related_Collection_ID FROM Collection_Subset_Members CSM JOIN Collections C1 ON CSM.Collection_ID = C1.Collection_ID WHERE C1.Collection_Name = 'Best')",
          "SELECT C.Collection_Name FROM Collections C, Collection_Subset_Members CSM, Collections C1 WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = C1.Collection_ID AND C1.Collection_Name = 'Best'",
          "SELECT DISTINCT C.Collection_Name FROM Collections C LEFT JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID WHERE CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name FROM Collections AS C JOIN Collection_Subset_Members AS CSM ON C.Collection_ID = CSM.Related_Collection_ID JOIN Collections AS C2 ON CSM.Collection_ID = C2.Collection_ID WHERE C2.Collection_Name = 'Best'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT C.Collection_Name FROM Collections C INNER JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID WHERE CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT DISTINCT C.Collection_Name FROM Collections C, Collection_Subset_Members CSM WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT C.Collection_Name FROM Collections C WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members CSM WHERE CSM.Related_Collection_ID = C.Collection_ID AND CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT C.Collection_Name FROM Collections C JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID JOIN Collections C2 ON C2.Collection_ID = CSM.Collection_ID WHERE C2.Collection_Name = 'Best'",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID IN (SELECT CSM.Related_Collection_ID FROM Collection_Subset_Members CSM JOIN Collections C2 ON CSM.Collection_ID = C2.Collection_ID WHERE C2.Collection_Name = 'Best')",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT C.Collection_Name FROM Collections C, Collection_Subset_Members CSM, Collections C2 WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = C2.Collection_ID AND C2.Collection_Name = 'Best'",
          "SELECT DISTINCT C.Collection_Name FROM Collections C INNER JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Related_Collection_ID INNER JOIN Collections C2 ON C2.Collection_ID = CSM.Collection_ID WHERE C2.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1 JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections C JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1 INNER JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID INNER JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT CSM.Related_Collection_ID) FROM Collection_Subset_Members CSM JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1, Collection_Subset_Members CSM, Collections C2 WHERE C1.Collection_ID = CSM.Collection_ID AND CSM.Related_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AS Related_Collections",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collections AS C JOIN Collection_Subset_Members AS CSM ON C.Collection_ID = CSM.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT CSM.Related_Collection_ID) FROM Collections C INNER JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(UNIQUE CSM.Related_Collection_ID) FROM Collections C, Collection_Subset_Members CSM WHERE C.Collection_ID = CSM.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Related_Collection_ID FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID WHERE Collection_Name = 'Best') AS Unique_Related_Collections",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Related_Collection_ID FROM Collection_Subset_Members INNER JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT CSM.Related_Collection_ID) FROM Collection_Subset_Members CSM JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members, Collections WHERE Collection_Subset_Members.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT cs.Collection_Subset_Name FROM Collections c, Collection_Subsets cs, Collection_Subset_Members csm WHERE c.Collection_ID = csm.Collection_ID AND cs.Collection_Subset_ID = csm.Collection_Subset_ID AND c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID INNER JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs, Collection_Subset_Members csm, Collections c WHERE c.Collection_ID = csm.Collection_ID AND cs.Collection_Subset_ID = csm.Collection_Subset_ID AND c.Collection_Name = 'Best'",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs INNER JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID INNER JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT cs.Collection_Subset_Name FROM Collections c LEFT JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID LEFT JOIN Collection_Subsets cs ON csm.Collection_Subset_ID = cs.Collection_Subset_ID WHERE c.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT CS.Collection_Subset_Name FROM Collections C, Collection_Subsets CS, Collection_Subset_Members CSM WHERE C.Collection_ID = CSM.Collection_ID AND CS.Collection_Subset_ID = CSM.Collection_Subset_ID AND C.Collection_Name = 'Best'",
          "SELECT DISTINCT CS.Collection_Subset_Name FROM Collection_Subsets CS, Collection_Subset_Members CSM, Collections C WHERE C.Collection_ID = CSM.Collection_ID AND CS.Collection_Subset_ID = CSM.Collection_Subset_ID AND C.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID INNER JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets AS CS JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID JOIN Collections AS C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best')",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members CSM JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best' AND CSM.Collection_Subset_ID = CS.Collection_Subset_ID)",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID WHERE CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT Collection_Subset_Name FROM Collection_Subsets, Collection_Subset_Members, Collections WHERE Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID AND Collection_Subset_Members.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'",
          "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%' COLLATE NOCASE",
          "SELECT COUNT(*) FROM songs WHERE UPPER(name) LIKE UPPER('%Love%')",
          "SELECT COUNT(*) FROM songs WHERE name ILIKE '%Love%'",
          "SELECT COUNT(*) FROM songs WHERE INSTR(name, 'Love') > 0",
          "SELECT COUNT(*) FROM songs WHERE POSITION('Love' IN name) > 0",
          "SELECT COUNT(*) FROM songs WHERE name REGEXP '.*Love.*'",
          "SELECT COUNT(*) FROM songs WHERE name RLIKE '.*Love.*'",
          "SELECT COUNT(*) FROM songs WHERE CONTAINS(name, 'Love')",
          "SELECT COUNT(*) FROM songs WHERE CHARINDEX('Love', name) > 0"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name FROM songs ORDER BY name ASC",
          "SELECT name FROM songs ORDER BY name",
          "SELECT `name` FROM `songs` ORDER BY `name` ASC",
          "SELECT songs.name FROM songs ORDER BY songs.name ASC",
          "SELECT Name FROM songs ORDER BY Name ASC",
          "SELECT songs.Name FROM songs ORDER BY songs.Name ASC",
          "SELECT name FROM songs ORDER BY name COLLATE NOCASE ASC",
          "SELECT name FROM songs ORDER BY LOWER(name) ASC",
          "SELECT `name` FROM `songs` ORDER BY `name`",
          "SELECT Name FROM songs ORDER BY Name"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name, language FROM songs",
          "SELECT songs.name, songs.language FROM songs",
          "SELECT `name`, `language` FROM `songs`",
          "SELECT songs.name AS SongName, songs.language AS Language FROM songs",
          "SELECT name AS 'Song Name', language AS 'Language' FROM songs",
          "SELECT ",
          "SELECT name, language FROM songs ORDER BY name",
          "SELECT DISTINCT name, language FROM songs",
          "SELECT name, language FROM songs WHERE language IS NOT NULL",
          "SELECT name, language FROM songs GROUP BY name, language"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score",
          "SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score",
          "SELECT maximum(voice_sound_quality), minimum(voice_sound_quality) FROM performance_score",
          "SELECT highest(voice_sound_quality), lowest(voice_sound_quality) FROM performance_score",
          "SELECT top(voice_sound_quality), bottom(voice_sound_quality) FROM performance_score",
          "SELECT greatest(voice_sound_quality), least(voice_sound_quality) FROM performance_score",
          "SELECT max(voice_sound_quality) AS MaxQuality, min(voice_sound_quality) AS MinQuality FROM performance_score",
          "SELECT MAX(voice_sound_quality) AS MaximumQuality, MIN(voice_sound_quality) AS MinimumQuality FROM performance_score",
          "SELECT MAXIMUM(voice_sound_quality) AS MaximumQuality, MINIMUM(voice_sound_quality) AS MinimumQuality FROM performance_score",
          "SELECT HIGHEST(voice_sound_quality) AS HighestQuality, LOWEST(voice_sound_quality) AS LowestQuality FROM performance_score"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway'",
          "SELECT p.voice_sound_quality, p.rhythm_tempo, p.stage_presence FROM performance_score p INNER JOIN participants pa ON p.participant_id = pa.id WHERE pa.name = 'Freeway'",
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score AS ps JOIN participants AS pt ON ps.participant_id = pt.id WHERE pt.name = 'Freeway'",
          "SELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps, participants pt WHERE ps.participant_id = pt.id AND pt.name = 'Freeway'",
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
          "SELECT p.voice_sound_quality, p.rhythm_tempo, p.stage_presence FROM performance_score p, participants pa WHERE p.participant_id = pa.id AND pa.name = 'Freeway'",
          "SELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps INNER JOIN participants pt ON ps.participant_id = pt.id WHERE pt.name = 'Freeway'",
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT id, language, original_artist FROM songs WHERE name != 'Love'",
          "SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name <> 'Love'",
          "SELECT `id`, `language`, `original_artist` FROM `songs` WHERE `name` NOT IN ('Love')",
          "SELECT id, language, original_artist FROM songs WHERE NOT (name = 'Love')",
          "SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name NOT LIKE 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name IS NOT 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name != 'Love' AND name IS NOT NULL",
          "SELECT id, language, original_artist FROM songs WHERE name NOT LIKE 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name NOT IN (SELECT name FROM songs WHERE name = 'Love')",
          "SELECT id, language, original_artist FROM songs WHERE name != 'Love' ORDER BY id"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'",
          "SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation = 'All the streets of love'",
          "SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation = 'All the streets of love'",
          "SELECT `name`, `original_artist` FROM `songs` WHERE `english_translation` = 'All the streets of love'",
          "SELECT name AS SongName, original_artist AS Artist FROM songs WHERE english_translation = 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE english_translation LIKE 'All the streets of love'",
          "SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation LIKE 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love' LIMIT 1",
          "SELECT name, original_artist FROM songs WHERE TRIM(english_translation) = 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love' COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT DISTINCT p.stage_presence FROM performance_score AS p JOIN songs AS s ON p.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT performance_score.stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.language = 'English'",
          "SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score p, songs s WHERE p.songs_id = s.id AND s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id AND songs.language = 'English'",
          "SELECT DISTINCT ps.stage_presence FROM performance_score AS ps INNER JOIN songs AS s ON ps.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score AS p INNER JOIN songs AS s ON p.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score p INNER JOIN songs s ON p.songs_id = s.id WHERE s.language = 'English'"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) >= 2",
          "SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id HAVING COUNT(performance_score.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants AS p, performance_score AS ps WHERE p.id = ps.participant_id GROUP BY p.id HAVING COUNT(DISTINCT ps.songs_id) >= 2",
          "SELECT DISTINCT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps WHERE p.id = ps.participant_id GROUP BY ps.participant_id HAVING COUNT(ps.songs_id) >= 2)",
          "SELECT p.id, p.name FROM participants p INNER JOIN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2) ps ON p.id = ps.participant_id",
          "SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2)",
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(DISTINCT ps.songs_id) >= 2",
          "SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id HAVING COUNT(DISTINCT performance_score.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants p WHERE (SELECT COUNT(*) FROM performance_score WHERE participant_id = p.id) >= 2 GROUP BY p.id"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC",
          "SELECT participants.id, participants.name, participants.popularity FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY COUNT(performance_score.songs_id) DESC",
          "SELECT p.id, p.name, p.popularity FROM participants AS p JOIN performance_score AS ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(DISTINCT ps.songs_id) DESC",
          "SELECT id, name, popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY id ORDER BY COUNT(*) DESC",
          "SELECT participants.id, participants.name, participants.popularity FROM participants, performance_score WHERE participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY COUNT(performance_score.songs_id) DESC",
          "SELECT p.id, p.name, p.popularity FROM participants p, performance_score ps WHERE p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC",
          "SELECT DISTINCT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS song_count FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY song_count DESC",
          "SELECT p.id, p.name, p.popularity FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY COUNT(ps.songs_id) DESC",
          "SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS num_songs FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) > 0 ORDER BY num_songs DESC",
          "SELECT p.id, p.name, p.popularity FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5",
          "SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5",
          "SELECT p.id, p.name FROM participants AS p, performance_score AS ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
          "SELECT DISTINCT participants.id, participants.name FROM participants, performance_score WHERE participants.id = performance_score.participant_id AND (performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5)",
          "SELECT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
          "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5",
          "SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5",
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5",
          "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
          "SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id WHERE (performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5)"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT P.voice_sound_quality FROM performance_score AS P INNER JOIN songs AS S ON P.songs_id = S.id WHERE S.name = 'The Balkan Girls' AND S.language = 'English'",
          "SELECT performance_score.voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT ps.voice_sound_quality FROM performance_score ps, songs s WHERE ps.songs_id = s.id AND s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT ps.voice_sound_quality FROM performance_score AS ps INNER JOIN songs AS s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score AS ps JOIN songs AS s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT s.id, s.name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC LIMIT 1",
          "SELECT songs.id, songs.name FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id, songs.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT s.id, s.name FROM songs AS s JOIN performance_score AS ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(DISTINCT ps.participant_id) DESC LIMIT 1",
          "SELECT id, name FROM songs WHERE id = (SELECT songs_id FROM performance_score GROUP BY songs_id ORDER BY COUNT(participant_id) DESC LIMIT 1)",
          "SELECT songs.id, songs.name FROM songs, performance_score WHERE songs.id = performance_score.songs_id GROUP BY songs.id, songs.name ORDER BY COUNT(performance_score.participant_id) DESC LIMIT 1",
          "SELECT s.id, s.name FROM songs s WHERE s.id IN (SELECT songs_id FROM performance_score GROUP BY songs_id ORDER BY COUNT(participant_id) DESC LIMIT 1)",
          "SELECT TOP 1 s.id, s.name FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC",
          "SELECT s.id, s.name FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(ps.participant_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(participant_id) AS COUNT FROM performance_score GROUP BY songs_id) t)",
          "SELECT s.id, s.name FROM songs s, performance_score ps WHERE s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(ps.participant_id) >= ALL (SELECT COUNT(participant_id) FROM performance_score GROUP BY songs_id)",
          "SELECT s.id, s.name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence NOT BETWEEN 7 AND 9",
          "SELECT COUNT(*) FROM performance_score WHERE (stage_presence < 7) OR (stage_presence > 9)",
          "SELECT COUNT(*) AS total FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(performance_score.participant_id) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 UNION SELECT COUNT(*) FROM performance_score WHERE stage_presence > 9",
          "SELECT COUNT(DISTINCT participant_id) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 GROUP BY participant_id",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 ORDER BY participant_id",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT count(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)",
          "SELECT count(*) FROM songs WHERE NOT EXISTS (SELECT 1 FROM performance_score WHERE songs.id = performance_score.songs_id)",
          "SELECT COUNT(*) FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.songs_id IS NULL",
          "SELECT COUNT(s.id) FROM songs s LEFT OUTER JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL",
          "SELECT COUNT(*) FROM (SELECT id FROM songs EXCEPT SELECT songs_id FROM performance_score)",
          "SELECT COUNT(DISTINCT songs.id) FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.songs_id IS NULL",
          "SELECT COUNT(*) FROM songs s WHERE NOT EXISTS (SELECT NULL FROM performance_score ps WHERE ps.songs_id = s.id)",
          "SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT DISTINCT songs_id FROM performance_score)",
          "SELECT COUNT(*) FROM songs AS s WHERE s.id NOT IN (SELECT p.songs_id FROM performance_score AS p)",
          "SELECT COUNT(*) FROM songs s WHERE s.id NOT IN (SELECT ps.songs_id FROM performance_score ps)"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT avg(p.rhythm_tempo), s.language FROM performance_score p JOIN songs s ON p.songs_id = s.id GROUP BY s.language",
          "SELECT language, AVG(rhythm_tempo) AS average_rhythm FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
          "SELECT s.language, AVG(ps.rhythm_tempo) FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language",
          "SELECT AVG(ps.rhythm_tempo), s.language FROM songs s, performance_score ps WHERE s.id = ps.songs_id GROUP BY s.language",
          "SELECT language, AVG(rhythm_tempo) FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
          "SELECT AVG(performance_score.rhythm_tempo) AS AvgRhythm, songs.language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.language",
          "SELECT language, AVG(rhythm_tempo) AS AverageRhythmTempo FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY language",
          "SELECT s.language, AVG(p.rhythm_tempo) AS AverageRhythm FROM performance_score p LEFT JOIN songs s ON p.songs_id = s.id GROUP BY s.language",
          "SELECT AVG(rhythm_tempo), language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY language",
          "SELECT language, AVG(rhythm_tempo) FROM performance_score, songs WHERE performance_score.songs_id = songs.id GROUP BY language"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT DISTINCT p.name FROM participants p JOIN songs s ON p.id = s.original_artist WHERE s.language = 'English'",
          "SELECT DISTINCT participants.name FROM participants JOIN songs ON participants.id = songs.original_artist WHERE songs.language = 'English'",
          "SELECT DISTINCT name FROM participants WHERE id IN (SELECT original_artist FROM songs WHERE language = 'English')",
          "SELECT DISTINCT p.name FROM participants p, songs s WHERE p.id = s.original_artist AND s.language = 'English'",
          "SELECT DISTINCT name FROM participants WHERE id IN (SELECT original_artist FROM songs WHERE language = 'English')",
          "SELECT DISTINCT participants.name FROM participants, songs WHERE participants.id = songs.original_artist AND songs.language = 'English'",
          "SELECT DISTINCT p.name FROM participants p INNER JOIN songs s ON p.id = s.original_artist WHERE s.language = 'English'",
          "SELECT DISTINCT name FROM participants p WHERE EXISTS (SELECT 1 FROM songs s WHERE s.original_artist = p.id AND s.language = 'English')",
          "SELECT DISTINCT p.name FROM participants p WHERE p.id IN (SELECT s.original_artist FROM songs s WHERE s.language = 'English')",
          "SELECT DISTINCT participants.name FROM participants INNER JOIN songs ON participants.id = songs.original_artist WHERE songs.language = 'English'"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.name, p.popularity FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' INTERSECT SELECT ps.participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'Croatian') INTERSECT SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))",
          "SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' INTERSECT SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT p.name, p.popularity FROM participants p, songs s, performance_score ps WHERE p.id = ps.participant_id AND s.id = ps.songs_id AND s.language = 'Croatian' AND p.id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian') AND id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score ps INNER JOIN songs s ON ps.songs_id = s.id AND s.language = 'Croatian') AND id IN (SELECT participant_id FROM performance_score ps INNER JOIN songs s ON ps.songs_id = s.id AND s.language = 'English')",
          "SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) AND EXISTS (SELECT 1 FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English' AND ps.participant_id = p.id)",
          "SELECT p.name, p.popularity FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.songs_id IN (SELECT s.id FROM songs s WHERE s.language = 'Croatian')) AND p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.songs_id IN (SELECT s.id FROM songs s WHERE s.language = 'English'))",
          "SELECT p.name, p.popularity FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id INNER JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' GROUP BY p.id HAVING COUNT(DISTINCT s.language) > 1",
          "SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT * FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) INTERSECT SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT * FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English' AND ps.participant_id = p.id)"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name FROM songs WHERE name LIKE '%Is%'",
          "SELECT `name` FROM `songs` WHERE `name` LIKE '%Is%'",
          "SELECT name FROM songs WHERE name ILIKE '%Is%'",
          "SELECT name FROM songs WHERE INSTR(name, 'Is') > 0",
          "SELECT name FROM songs WHERE name LIKE '%Is%' COLLATE NOCASE",
          "SELECT name FROM songs WHERE POSITION('Is' IN name) > 0",
          "SELECT name FROM songs WHERE name REGEXP '.*Is.*'",
          "SELECT name FROM songs WHERE CHARINDEX('Is', name) > 0",
          "SELECT name FROM songs WHERE CONTAINS(name, 'Is')",
          "SELECT name FROM songs WHERE name LIKE '%Is%' ESCAPE ''"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
          "SELECT original_artist FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id AND rhythm_tempo > 5 ORDER BY voice_sound_quality DESC",
          "SELECT original_artist FROM songs, performance_score WHERE songs.id = performance_score.songs_id AND performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s, performance_score ps WHERE s.id = ps.songs_id AND ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
          "SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
          "SELECT original_artist FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY voice_sound_quality DESC",
          "SELECT original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id AND ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM City",
          "SELECT COUNT(city_code) FROM City",
          "SELECT COUNT(*) AS NumberOfCities FROM City",
          "SELECT COUNT(city_code) AS TotalCities FROM City",
          "SELECT COUNT(DISTINCT city_code) FROM City",
          "SELECT COUNT(DISTINCT city_name) FROM City",
          "SELECT COUNT(1) FROM City",
          "SELECT COUNT(city_code) FROM City WHERE city_code IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT city_code FROM City) AS Cities",
          "SELECT COUNT(*) FROM City WHERE city_code <> ''"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM City",
          "SELECT COUNT(city_code) FROM City",
          "SELECT COUNT(*) AS NumberOfCities FROM City",
          "SELECT COUNT(city_code) AS CityCount FROM City",
          "SELECT COUNT(DISTINCT city_code) FROM City",
          "SELECT COUNT(DISTINCT city_name) FROM City",
          "SELECT COUNT(1) FROM City",
          "SELECT COUNT(city_code) FROM City WHERE city_code IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT city_code FROM City) AS UniqueCities",
          "SELECT COUNT(*) FROM City WHERE city_code <> ''"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM City",
          "SELECT state FROM City GROUP BY state",
          "SELECT DISTINCT state AS State FROM City",
          "SELECT DISTINCT c.state FROM City c",
          "SELECT DISTINCT state FROM City ORDER BY state",
          "SELECT state FROM City WHERE state IS NOT NULL GROUP BY state",
          "SELECT DISTINCT state FROM City WHERE state <> ''",
          "SELECT state FROM City WHERE state IS NOT NULL",
          "SELECT DISTINCT state FROM City WHERE state != ''",
          "SELECT DISTINCT state FROM City c ORDER BY c.state ASC"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM City",
          "SELECT state FROM City GROUP BY state",
          "SELECT DISTINCT state AS State FROM City",
          "SELECT DISTINCT c.state FROM City c",
          "SELECT state FROM City WHERE state IS NOT NULL GROUP BY state",
          "SELECT DISTINCT state FROM City ORDER BY state",
          "SELECT DISTINCT state FROM City WHERE state <> ''",
          "SELECT state FROM City WHERE state IS NOT NULL DISTINCT",
          "SELECT DISTINCT state FROM (SELECT state FROM City)",
          "SELECT DISTINCT state FROM City c WHERE c.state IS NOT NULL"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT country) FROM City",
          "SELECT COUNT(UNIQUE country) FROM City",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City)",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country)",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City AS c)",
          "SELECT COUNT(DISTINCT c.country) FROM City c",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City c)",
          "SELECT COUNT(DISTINCT country) FROM City WHERE country IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country HAVING country IS NOT NULL)",
          "SELECT COUNT(DISTINCT country) FROM City WHERE country <> ''"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT country) FROM City",
          "SELECT COUNT(UNIQUE country) FROM City",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City)",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City AS c)",
          "SELECT COUNT(DISTINCT c.country) FROM City c",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country)",
          "SELECT COUNT(DISTINCT country) AS NumberOfCountries FROM City",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City c)",
          "SELECT COUNT(DISTINCT country) FROM City WHERE country IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country HAVING country IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name, city_code, state, country FROM City",
          "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM City",
          "SELECT C.city_name, C.city_code, C.state, C.country FROM City C",
          "SELECT city_name, city_code, state, country FROM City ORDER BY city_name",
          "SELECT city_name, city_code, state, country FROM City WHERE city_code IS NOT NULL",
          "SELECT * FROM City WHERE city_name IS NOT NULL AND city_code IS NOT NULL AND state IS NOT NULL AND country IS NOT NULL",
          "SELECT city_name AS CityName, city_code AS CityCode, state AS StateName, country AS CountryName FROM City",
          "SELECT DISTINCT city_name, city_code, state, country FROM City",
          "SELECT city_name, city_code, state, country FROM City GROUP BY city_code",
          "SELECT city_name, city_code, state, country FROM City LIMIT 100"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name, city_code, state, country FROM City",
          "SELECT City.city_name, City.city_code, City.state, City.country FROM City",
          "SELECT c.city_name, c.city_code, c.state, c.country FROM City AS c",
          "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM City",
          "SELECT * FROM City WHERE city_name IS NOT NULL",
          "SELECT city_name, city_code, state, country FROM City ORDER BY city_name",
          "SELECT DISTINCT city_name, city_code, state, country FROM City",
          "SELECT city_name, city_code, state, country FROM City WHERE city_code IS NOT NULL",
          "SELECT city_name, city_code, state, country FROM City GROUP BY city_code",
          "SELECT city_name, city_code, state, country FROM City LIMIT 100"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
          "SELECT City.latitude, City.longitude FROM City WHERE City.city_name = 'Baltimore'",
          "SELECT c.latitude, c.longitude FROM City c WHERE c.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' LIMIT 1",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' ORDER BY city_code DESC",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND latitude IS NOT NULL AND longitude IS NOT NULL"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
          "SELECT City.latitude, City.longitude FROM City WHERE City.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'",
          "SELECT c.latitude, c.longitude FROM City c WHERE c.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' LIMIT 1",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' ORDER BY city_code",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND latitude IS NOT NULL AND longitude IS NOT NULL"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT City.city_name FROM City WHERE City.state = 'PA'",
          "SELECT city_name FROM City WHERE City.state = 'PA'",
          "SELECT C.city_name FROM City AS C WHERE C.state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA'"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state LIKE 'PA'",
          "SELECT City.city_name FROM City WHERE City.state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' AND country = 'USA'",
          "SELECT DISTINCT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' ORDER BY city_name",
          "SELECT city_name FROM City WHERE state = 'PA' AND country LIKE 'United States'",
          "SELECT city_name FROM City WHERE state = 'PA' AND country = 'United States'",
          "SELECT city_name FROM City WHERE state = 'PA' AND latitude IS NOT NULL",
          "SELECT city_name FROM City WHERE state = 'PA' AND longitude IS NOT NULL"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country = 'Canada' GROUP BY country",
          "SELECT COUNT(*) FROM City WHERE UPPER(country) = 'CANADA'",
          "SELECT COUNT(*) FROM City WHERE LOWER(country) = 'canada'",
          "SELECT COUNT(*) FROM City c WHERE c.country = 'Canada'"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC",
          "SELECT C.city_name FROM City AS C WHERE C.country = 'USA' ORDER BY C.latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' SORT BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude, city_name",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name DESC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude, city_name ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASCENDING"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC",
          "SELECT C.city_name FROM City AS C WHERE C.country = 'USA' ORDER BY C.latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude, city_name",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name DESC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state, COUNT(*) FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) FROM City GROUP BY state",
          "SELECT state, COUNT(city_name) FROM City GROUP BY state",
          "SELECT state AS StateName, COUNT(*) AS NumberOfCities FROM City GROUP BY state",
          "SELECT state, COUNT(DISTINCT city_code) FROM City GROUP BY state",
          "SELECT state, COUNT(DISTINCT city_name) FROM City GROUP BY state",
          "SELECT C.state, COUNT(*) FROM City AS C GROUP BY C.state",
          "SELECT state, COUNT(city_code) AS CityCount FROM City GROUP BY state",
          "SELECT state, COUNT(*) AS TotalCities FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) FROM City GROUP BY state ORDER BY state"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state, COUNT(city_code) FROM City GROUP BY state",
          "SELECT state, COUNT(*) AS number_of_cities FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) AS city_count FROM City GROUP BY state",
          "SELECT COUNT(city_code), state FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) FROM City GROUP BY state ORDER BY state",
          "SELECT state, COUNT(*) FROM City GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state, COUNT(city_code) FROM City GROUP BY state HAVING COUNT(city_code) > 0",
          "SELECT state, COUNT(DISTINCT city_code) FROM City GROUP BY state",
          "SELECT state AS StateName, COUNT(city_code) AS TotalCities FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) AS NumberOfCities FROM City GROUP BY state ORDER BY NumberOfCities"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(*) FROM City GROUP BY country",
          "SELECT country, COUNT(city_code) AS NumberOfCities FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) FROM City GROUP BY country",
          "SELECT C.country, COUNT(*) FROM City AS C GROUP BY C.country",
          "SELECT country, COUNT(DISTINCT city_code) FROM City GROUP BY country",
          "SELECT country, COUNT(DISTINCT city_name) FROM City GROUP BY country",
          "SELECT C.country, COUNT(C.city_code) FROM City C GROUP BY C.country",
          "SELECT country, COUNT(city_code) FROM City GROUP BY country HAVING COUNT(city_code) > 0",
          "SELECT C.country, COUNT(*) AS TotalCities FROM City C GROUP BY C.country",
          "SELECT country, COUNT(*) FROM City WHERE country IS NOT NULL GROUP BY country"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(*) FROM City GROUP BY country",
          "SELECT COUNT(city_code), country FROM City GROUP BY country",
          "SELECT country, COUNT(city_code) FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) AS NumberOfCities FROM City GROUP BY country",
          "SELECT COUNT(*) AS TotalCities, country FROM City GROUP BY country",
          "SELECT country, COUNT(*) AS CityCount FROM City GROUP BY country",
          "SELECT COUNT(city_code) AS CityTotal, country FROM City GROUP BY country",
          "SELECT country, COUNT(city_code) AS CitiesInCountry FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) FROM City GROUP BY country",
          "SELECT COUNT(*) FROM City GROUP BY country"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2",
          "SELECT C.state FROM City AS C GROUP BY C.state HAVING COUNT(C.city_code) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
          "SELECT C.state FROM City C GROUP BY C.state HAVING COUNT(*) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_code) >= 2",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS StateCount WHERE num_cities >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_code) > 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) > 1"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2",
          "SELECT C.state FROM City C GROUP BY C.state HAVING COUNT(C.city_code) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_code) >= 2",
          "SELECT C.state FROM City AS C GROUP BY C.state HAVING COUNT(*) >= 2",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS state_count WHERE num_cities >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_code) > 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) > 1"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1",
          "SELECT C.state FROM City AS C GROUP BY C.state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS StateCount ORDER BY num_cities DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(*) = (SELECT MAX(city_count) FROM (SELECT COUNT(*) AS city_count FROM City GROUP BY state) AS Counts)",
          "SELECT TOP 1 state FROM City GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT state, COUNT(*) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1",
          "SELECT C.state FROM City AS C GROUP BY C.state ORDER BY COUNT(C.city_code) DESC LIMIT 1",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS StateCount ORDER BY num_cities DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_code) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_code) AS city_count FROM City GROUP BY state) AS Counts)",
          "SELECT TOP 1 state FROM City GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT state, COUNT(*) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1",
          "SELECT MIN(country) FROM (SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country) AS country_counts",
          "SELECT country FROM City GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_code) AS city_count FROM City GROUP BY country) AS counts)",
          "SELECT country FROM (SELECT country, COUNT(*) AS city_count FROM City GROUP BY country ORDER BY city_count ASC) AS sorted_countries LIMIT 1",
          "SELECT TOP 1 country FROM City GROUP BY country ORDER BY COUNT(*)",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC FETCH FIRST ROW ONLY",
          "SELECT FIRST(country) FROM City GROUP BY country ORDER BY COUNT(*) ASC",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(COUNT(city_code)) FROM City GROUP BY country)",
          "SELECT MIN(country) FROM (SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities ASC LIMIT 1) AS subquery",
          "SELECT country FROM (SELECT country, COUNT(city_code) AS city_count FROM City GROUP BY country ORDER BY city_count ASC LIMIT 1) AS result",
          "SELECT TOP 1 country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT FIRST(country) FROM City GROUP BY country ORDER BY COUNT(city_code)",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC, country DESC LIMIT 1",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC, country ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Fname, LName FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Student.Fname, Student.LName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'",
          "SELECT s.Fname, s.LName FROM Student s, City c WHERE s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname, LName FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Fname, LName FROM Student s INNER JOIN City c ON s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname AS FirstName, LName AS LastName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Fname, LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'",
          "SELECT Fname, LName FROM Student JOIN City USING(city_code) WHERE City.state = 'MD'"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Fname, LName FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Student.Fname, Student.LName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Fname, LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'",
          "SELECT Fname, LName FROM Student s, City c WHERE s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname, LName FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Fname, LName FROM Student s INNER JOIN City c ON s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname, LName FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Fname, LName FROM Student s, City c WHERE s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname, LName FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'",
          "SELECT COUNT(*) FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.country = 'China'",
          "SELECT COUNT(DISTINCT StuID) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM (SELECT * FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China')",
          "SELECT COUNT(*) FROM Student s, City c WHERE s.city_code = c.city_code AND c.country = 'China'",
          "SELECT COUNT(StuID) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')",
          "SELECT COUNT(*) FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country = 'China')",
          "SELECT COUNT(*) FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'",
          "SELECT COUNT(DISTINCT StuID) FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM Student s, City c WHERE s.city_code = c.city_code AND c.country = 'China'",
          "SELECT COUNT(StuID) FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM (SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China') AS ChineseStudents",
          "SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')",
          "SELECT COUNT(StuID) FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country = 'China')",
          "SELECT COUNT(*) FROM Student s WHERE EXISTS (SELECT 1 FROM City c WHERE s.city_code = c.city_code AND c.country = 'China')"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Student.Fname, Student.Major FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT s.Fname, s.Major FROM Student s, City c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name = 'Baltimore'",
          "SELECT Fname AS FirstName, Major AS MajorCode FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name LIKE 'Baltimore'",
          "SELECT Fname, Major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student RIGHT JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student CROSS JOIN City WHERE Student.city_code = City.city_code AND City.city_name = 'Baltimore'"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name = 'Baltimore'",
          "SELECT Student.Fname, Student.Major FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT s.Fname, s.Major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
          "SELECT s.Fname, s.Major FROM Student s, City c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
          "SELECT Fname, Major FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE City.city_code = Student.city_code AND City.city_name = 'Baltimore')",
          "SELECT Fname, Major FROM Student WHERE city_code = (SELECT city_code FROM City WHERE city_name = 'Baltimore')",
          "SELECT Fname, Major FROM Student s WHERE s.city_code = (SELECT c.city_code FROM City c WHERE c.city_name = 'Baltimore')",
          "SELECT Fname, Major FROM Student s WHERE EXISTS (SELECT 1 FROM City c WHERE c.city_code = s.city_code AND c.city_name = 'Baltimore')"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(*) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT c.country, COUNT(s.StuID) FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.country",
          "SELECT country, COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY country",
          "SELECT COUNT(Student.StuID), City.country FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country",
          "SELECT country, COUNT(*) AS NumberOfStudents FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT COUNT(*) AS StudentCount, country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) AS TotalStudents FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT (SELECT country FROM City WHERE City.city_code = Student.city_code) AS Country, COUNT(*) FROM Student GROUP BY Country",
          "SELECT country, COUNT(Student.StuID) FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(*) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT c.country, COUNT(s.StuID) FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.country",
          "SELECT country, COUNT(StuID) FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT COUNT(*) AS NumberOfStudents, country FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(*) AS StudentCount FROM Student, City WHERE Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) AS TotalStudents FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT country, COUNT(*) FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY country",
          "SELECT COUNT(StuID), country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY country",
          "SELECT country, COUNT(*) AS Students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY city_code",
          "SELECT S.city_code, COUNT(*) AS StudentCount FROM Student S GROUP BY S.city_code",
          "SELECT city_code, COUNT(StuID) FROM Student GROUP BY city_code",
          "SELECT Student.city_code, COUNT(Student.StuID) FROM Student GROUP BY Student.city_code",
          "SELECT COUNT(*) AS TotalStudents, city_code FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(*) AS Total FROM Student GROUP BY city_code",
          "SELECT COUNT(StuID), city_code FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(StuID) FROM Student GROUP BY city_code ORDER BY city_code",
          "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(*) AS StudentCount FROM Student GROUP BY city_code",
          "SELECT S.city_code, COUNT(*) FROM Student S GROUP BY S.city_code",
          "SELECT city_code, COUNT(1) FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(StuID) FROM Student GROUP BY city_code",
          "SELECT S.city_code, COUNT(S.StuID) FROM Student S GROUP BY S.city_code",
          "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code ORDER BY city_code",
          "SELECT city_code, COUNT(*) AS total_students FROM Student GROUP BY city_code",
          "SELECT city_code, COUNT(StuID) FROM Student GROUP BY city_code ORDER BY COUNT(StuID) DESC"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state ORDER BY COUNT(S.StuID) DESC LIMIT 1",
          "SELECT state FROM (SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code) AS StateCount GROUP BY state ORDER BY COUNT(state) DESC LIMIT 1",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1",
          "SELECT TOP 1 state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY state ORDER BY COUNT(s.StuID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT state FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1",
          "SELECT state FROM City RIGHT JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state ORDER BY COUNT(S.StuID) DESC LIMIT 1",
          "SELECT state FROM (SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code) AS StateCount GROUP BY state ORDER BY COUNT(state) DESC LIMIT 1",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1",
          "SELECT TOP 1 state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY state ORDER BY COUNT(s.StuID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT state FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1",
          "SELECT state FROM City RIGHT JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY state HAVING COUNT(s.StuID) = (SELECT MAX(count) FROM (SELECT COUNT(s.StuID) AS count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY state) AS MaxCount)",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT C.country FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1",
          "SELECT country FROM (SELECT country FROM City INNER JOIN Student ON City.city_code = Student.city_code) AS SubQuery GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT C.country FROM City AS C JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1",
          "SELECT C.country FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM City C LEFT JOIN Student S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City C RIGHT JOIN Student S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT C.country FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM (SELECT country, COUNT(*) AS num_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS subquery ORDER BY num_students ASC LIMIT 1",
          "SELECT country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1",
          "SELECT C.country FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1",
          "SELECT C.country FROM City C LEFT JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City AS C JOIN Student AS S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT country FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(*) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City AS C INNER JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT city_name FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE City.city_code = Student.city_code GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT DISTINCT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(DISTINCT S.StuID) >= 3",
          "SELECT C.city_name FROM City C JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3) AS S ON C.city_code = S.city_code",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT C.city_name FROM City AS C INNER JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3) AS S ON C.city_code = S.city_code"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT City.city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name HAVING COUNT(Student.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT c.city_name FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT c.city_name FROM City AS c JOIN Student AS s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(*) >= 3",
          "SELECT city_name FROM City c WHERE EXISTS (SELECT NULL FROM Student s WHERE s.city_code = c.city_code GROUP BY s.city_code HAVING COUNT(s.StuID) >= 3)",
          "SELECT c.city_name FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(DISTINCT s.StuID) >= 3",
          "SELECT DISTINCT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT c.city_name FROM City c WHERE (SELECT COUNT(*) FROM Student s WHERE s.city_code = c.city_code) >= 3 GROUP BY c.city_name"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) > 5",
          "SELECT state FROM (SELECT state FROM City JOIN Student ON City.city_code = Student.city_code) AS StateList GROUP BY state HAVING COUNT(*) > 5",
          "SELECT City.state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5",
          "SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) > 5)",
          "SELECT state FROM City WHERE EXISTS (SELECT NULL FROM Student WHERE City.city_code = Student.city_code GROUP BY Student.city_code HAVING COUNT(*) > 5) GROUP BY state",
          "SELECT state FROM City c JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) > 5) s ON c.city_code = s.city_code GROUP BY state",
          "SELECT c.state FROM City c LEFT JOIN Student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.StuID) > 5",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) > 5)",
          "SELECT c.state FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(DISTINCT s.StuID) > 5"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) > 5",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) > 5",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5",
          "SELECT C.state FROM City AS C JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY state HAVING COUNT(s.StuID) > 5",
          "SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(DISTINCT Student.StuID) > 5",
          "SELECT state FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY state HAVING COUNT(DISTINCT s.StuID) > 5",
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(DISTINCT S.StuID) > 5"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country <> 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND City.country != 'USA'",
          "SELECT S.StuID FROM Student S INNER JOIN City C ON S.city_code = C.city_code WHERE C.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA')",
          "SELECT StuID FROM Student WHERE NOT EXISTS (SELECT city_code FROM City WHERE City.city_code = Student.city_code AND country = 'USA')",
          "SELECT StuID FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE C.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
          "SELECT Student.StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country <> 'USA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country != 'USA'",
          "SELECT StuID FROM Student S, City C WHERE S.city_code = C.city_code AND C.country <> 'USA'"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE country != 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND City.country <> 'USA'",
          "SELECT s.StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country NOT IN ('USA')",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.country != 'USA'",
          "SELECT Student.StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country <> 'USA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country != 'USA'",
          "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
          "SELECT StuID FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE c.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'F' AND City.state = 'PA'",
          "SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'F' AND c.state = 'PA'",
          "SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'F' AND state = 'PA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'F' AND c.state = 'PA'"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'F' AND City.state = 'PA'",
          "SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'F' AND state = 'PA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT s.StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND City.state = 'PA'",
          "SELECT Student.StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'F' AND City.state = 'PA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND country != 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'M' AND City.country <> 'USA'",
          "SELECT s.StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')",
          "SELECT Student.StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'M' AND City.country <> 'USA'",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country != 'USA'",
          "SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'M' AND c.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND City.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND country != 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'M' AND City.country <> 'USA'",
          "SELECT s.StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
          "SELECT Student.StuID FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'M' AND City.country != 'USA'",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND country <> 'USA')",
          "SELECT StuID FROM Student AS S JOIN City AS C ON S.city_code = C.city_code WHERE S.Sex = 'M' AND C.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND City.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (SELECT city_code FROM City WHERE NOT country = 'USA')",
          "SELECT StuID FROM Student WHERE Sex = 'M' AND NOT EXISTS (SELECT * FROM City WHERE Student.city_code = City.city_code AND country = 'USA')"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'CHI' AND d.city2_code = 'BAL'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN ('BAL', 'CHI') AND city2_code IN ('BAL', 'CHI') AND city1_code <> city2_code",
          "SELECT * FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT * FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI')",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'CHI' AND city2_code = 'BAL')"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'CHI' AND d.city2_code = 'BAL'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')",
          "SELECT d.distance FROM Direct_distance AS d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') OR (d.city1_code = 'CHI' AND d.city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN ('BAL', 'CHI') AND city2_code IN ('BAL', 'CHI') AND city1_code <> city2_code",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code IN ('BAL', 'CHI') AND d.city2_code IN ('BAL', 'CHI') AND d.city1_code <> d.city2_code",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') UNION SELECT distance FROM Direct_distance WHERE (city1_code = 'CHI' AND city2_code = 'BAL')",
          "SELECT d.distance FROM Direct_distance AS d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') UNION SELECT d.distance FROM Direct_distance AS d WHERE (d.city1_code = 'CHI' AND d.city2_code = 'BAL')"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT d.distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT d.distance FROM Direct_distance d, City c1, City c2 WHERE d.city1_code = c1.city_code AND d.city2_code = c2.city_code AND c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name LIKE 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name LIKE 'Newark')",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston' LIMIT 1) AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark' LIMIT 1)",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark') ORDER BY distance DESC LIMIT 1",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark') ORDER BY distance ASC LIMIT 1",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark') FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city1_code = 'EWR' AND city2_code = 'BOS')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN ('BOS', 'EWR') AND city2_code IN ('BOS', 'EWR') AND city1_code <> city2_code",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR')",
          "SELECT distance FROM Direct_distance WHERE (city2_code = 'BOS' AND city1_code = 'EWR')",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BOS' AND d.city2_code = 'EWR'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'EWR' AND d.city2_code = 'BOS'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'EWR' AND city2_code = 'BOS'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city2_code = 'BOS' AND city1_code = 'EWR')",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR' UNION ALL SELECT distance FROM Direct_distance WHERE city1_code = 'EWR' AND city2_code = 'BOS'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'EWR' AND city2_code = 'BOS' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'BOS' AND city2_code = 'EWR'"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT avg(distance), min(distance), max(distance) FROM Direct_distance",
          "SELECT MIN(distance), MAX(distance), AVG(distance) FROM Direct_distance",
          "SELECT minimum(distance), maximum(distance), average(distance) FROM Direct_distance",
          "SELECT MINIMUM(distance), MAXIMUM(distance), AVERAGE(distance) FROM Direct_distance",
          "SELECT MIN(distance) AS MinDistance, MAX(distance) AS MaxDistance, AVG(distance) AS AvgDistance FROM Direct_distance",
          "SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance",
          "SELECT MIN(distance) Minimum, MAX(distance) Maximum, AVG(distance) Average FROM Direct_distance",
          "SELECT MIN(distance) MinDist, MAX(distance) MaxDist, AVG(distance) AvgDist FROM Direct_distance",
          "SELECT MIN(distance) as MinDistance, MAX(distance) as MaxDistance, AVG(distance) as AverageDistance FROM Direct_distance",
          "SELECT MIN(distance) as MinimumDistance, MAX(distance) as MaximumDistance, AVG(distance) as AverageDistance FROM Direct_distance"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance",
          "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Direct_distance",
          "SELECT MAX(distance), MIN(distance), AVG(distance) FROM Direct_distance",
          "SELECT average(distance), minimum(distance), maximum(distance) FROM Direct_distance",
          "SELECT minimum(distance), average(distance), maximum(distance) FROM Direct_distance",
          "SELECT maximum(distance), minimum(distance), average(distance) FROM Direct_distance",
          "SELECT AVG(Direct_distance.distance), MIN(Direct_distance.distance), MAX(Direct_distance.distance) FROM Direct_distance",
          "SELECT MIN(Direct_distance.distance), AVG(Direct_distance.distance), MAX(Direct_distance.distance) FROM Direct_distance",
          "SELECT MAX(Direct_distance.distance), MIN(Direct_distance.distance), AVG(Direct_distance.distance) FROM Direct_distance",
          "SELECT avg(distance) AS AverageDistance, min(distance) AS MinimumDistance, max(distance) AS MaximumDistance FROM Direct_distance"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D ORDER BY D.distance DESC LIMIT 1",
          "SELECT TOP 1 city1_code, city2_code FROM Direct_distance ORDER BY distance DESC",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC FETCH FIRST ROW ONLY",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance LIMIT 1)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
          "SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 1",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT TOP 1 city1_code, city2_code FROM Direct_distance ORDER BY distance DESC",
          "SELECT TOP 1 d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance) LIMIT 1",
          "SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance) LIMIT 1"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance AS D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(D.distance) FROM Direct_distance D)",
          "SELECT D1.city1_code, D1.city2_code FROM Direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM Direct_distance D2)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance AS DD)",
          "SELECT DD.city1_code, DD.city2_code FROM Direct_distance DD WHERE DD.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(DIST.distance) FROM Direct_distance DIST)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance AS DD)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(DIST.distance) FROM Direct_distance AS DIST)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance AS D WHERE D.distance > (SELECT AVG(DIST.distance) FROM Direct_distance AS DIST)"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT DISTINCT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code FROM Direct_distance GROUP BY city1_code HAVING AVG(distance) > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city2_code FROM Direct_distance GROUP BY city2_code HAVING AVG(distance) > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code AS city_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT DISTINCT D.city1_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT DISTINCT D.city2_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT D.city1_code FROM Direct_distance D GROUP BY D.city1_code HAVING AVG(D.distance) > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT D.city2_code FROM Direct_distance D GROUP BY D.city2_code HAVING AVG(D.distance) > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT D.city1_code AS city_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(D.distance) FROM Direct_distance) UNION SELECT D.city2_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(D.distance) FROM Direct_distance)"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance AS D WHERE D.distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 ORDER BY distance ASC",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 LIMIT 10",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 ORDER BY city1_code, city2_code",
          "SELECT DISTINCT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 AND city1_code != city2_code",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 ORDER BY distance DESC",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 ORDER BY city1_code DESC, city2_code ASC"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance < 1000",
          "SELECT DISTINCT city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city1_code AS city_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION ALL SELECT city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT DISTINCT city_code FROM (SELECT city1_code AS city_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code AS city_code FROM Direct_distance WHERE distance < 1000) AS subquery",
          "SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT DISTINCT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city_code FROM (SELECT city1_code AS city_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code AS city_code FROM Direct_distance WHERE distance < 1000) AS combined_codes"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL'",
          "SELECT SUM(distance) AS TotalDistance FROM Direct_distance WHERE city1_code = 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance AS D WHERE D.city1_code = 'BAL' OR D.city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' GROUP BY city1_code",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION ALL SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' GROUP BY D.city1_code",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code <> 'BAL'"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance AS D WHERE D.city1_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' OR D.city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code != 'BAL'",
          "SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' AND D.city2_code <> 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION ALL SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE 'BAL' IN (city1_code, city2_code)",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' GROUP BY city1_code"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance, City WHERE City.city_code = Direct_distance.city1_code AND City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance, City WHERE City.city_code = Direct_distance.city2_code AND City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance JOIN City ON City.city_code = Direct_distance.city1_code WHERE City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance JOIN City ON City.city_code = Direct_distance.city2_code WHERE City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance d JOIN City c ON c.city_code = d.city1_code OR c.city_code = d.city2_code WHERE c.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE 'Boston' IN (SELECT city_name FROM City WHERE city_code = city1_code OR city_code = city2_code)"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D JOIN City C ON D.city1_code = C.city_code WHERE C.city_name = 'Boston' UNION SELECT AVG(D.distance) FROM Direct_distance D JOIN City C ON D.city2_code = C.city_code WHERE C.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance, City WHERE City.city_code = Direct_distance.city1_code AND City.city_name = 'Boston' OR City.city_code = Direct_distance.city2_code AND City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') UNION ALL SELECT AVG(distance) FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D, City C WHERE (D.city1_code = C.city_code AND C.city_name = 'Boston') OR (D.city2_code = C.city_code AND C.city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') GROUP BY city1_code, city2_code",
          "SELECT AVG(distance) FROM (SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') UNION ALL SELECT distance FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) AS distances",
          "SELECT AVG(distance) FROM Direct_distance WHERE EXISTS (SELECT city_code FROM City WHERE city_name = 'Boston' AND (city_code = Direct_distance.city1_code OR city_code = Direct_distance.city2_code))",
          "SELECT AVG(distance) FROM Direct_distance D INNER JOIN City C1 ON D.city1_code = C1.city_code INNER JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' OR C2.city_name = 'Boston'"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1",
          "SELECT C.city_name FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1)",
          "SELECT city_name FROM City WHERE city_code = (SELECT TOP 1 city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance ASC LIMIT 1 WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago'))",
          "SELECT city_name FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY Direct_distance.distance ASC LIMIT 1",
          "SELECT C.city_name FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)",
          "SELECT TOP 1 C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance",
          "SELECT C.city_name FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC FETCH FIRST 1 ROW ONLY",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance, City WHERE City.city_name = 'Chicago' AND City.city_code = Direct_distance.city1_code ORDER BY distance ASC LIMIT 1)",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC FETCH FIRST ROW ONLY",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1)",
          "SELECT C.city_name FROM City AS C JOIN Direct_distance AS D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1",
          "SELECT FIRST(city_name) FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance)",
          "SELECT C.city_name FROM City C WHERE EXISTS (SELECT 1 FROM Direct_distance D WHERE D.city2_code = C.city_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = 'BOS' ORDER BY D.distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC)",
          "SELECT city_name FROM City WHERE city_code = (SELECT TOP 1 city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC)",
          "SELECT city_name FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = 'BOS' ORDER BY Direct_distance.distance DESC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C WHERE EXISTS (SELECT 1 FROM Direct_distance D WHERE D.city2_code = C.city_code AND D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance DESC WHERE city1_code = 'BOS' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City AS C INNER JOIN Direct_distance AS D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC",
          "SELECT city_name FROM City WHERE city_code = (SELECT TOP 1 city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC)",
          "SELECT C.city_name FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC FETCH FIRST ROW ONLY)",
          "SELECT C.city_name FROM City AS C JOIN Direct_distance AS D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code",
          "SELECT city2_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city2_code",
          "SELECT D.city1_code, SUM(D.distance) AS total_distance FROM Direct_distance AS D GROUP BY D.city1_code",
          "SELECT D.city2_code, SUM(D.distance) AS total_distance FROM Direct_distance AS D GROUP BY D.city2_code",
          "SELECT city1_code AS city_code, SUM(distance) FROM Direct_distance GROUP BY city1_code",
          "SELECT city2_code AS city_code, SUM(distance) FROM Direct_distance GROUP BY city2_code",
          "SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code UNION SELECT city2_code, SUM(distance) FROM Direct_distance GROUP BY city2_code",
          "SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION ALL SELECT city2_code, distance FROM Direct_distance) GROUP BY city_code",
          "SELECT city_code, SUM(total_distance) FROM (SELECT city1_code AS city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code UNION ALL SELECT city2_code AS city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city2_code) GROUP BY city_code",
          "SELECT IFNULL(city1_code, city2_code) AS city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code",
          "SELECT city2_code AS city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city2_code",
          "SELECT D.city1_code, SUM(D.distance) AS total_distance FROM Direct_distance AS D GROUP BY D.city1_code",
          "SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION ALL SELECT city2_code, distance FROM Direct_distance) GROUP BY city_code",
          "SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code",
          "SELECT city2_code, SUM(distance) FROM Direct_distance GROUP BY city2_code",
          "SELECT D.city1_code, SUM(D.distance) FROM Direct_distance D GROUP BY D.city1_code",
          "SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION SELECT city2_code AS city_code, distance FROM Direct_distance) AS combined GROUP BY city_code",
          "SELECT city1_code AS city_code, SUM(distance) FROM Direct_distance GROUP BY city1_code",
          "SELECT city2_code AS city_code, SUM(distance) FROM Direct_distance GROUP BY city2_code"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name, AVG(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City AS C INNER JOIN Direct_distance AS D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City INNER JOIN Direct_distance ON city_code = city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C, Direct_distance D WHERE C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City LEFT JOIN Direct_distance ON city_code = city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C RIGHT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City RIGHT JOIN Direct_distance ON city_code = city1_code GROUP BY city_name"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name, AVG(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City AS C INNER JOIN Direct_distance AS D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City INNER JOIN Direct_distance ON city_code = city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C, Direct_distance D WHERE C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT city_name, AVG(distance) FROM City LEFT JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City RIGHT JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C RIGHT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT d.distance FROM Direct_distance d JOIN Student s1 ON d.city1_code = s1.city_code JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d, Student s1, Student s2 WHERE d.city1_code = s1.city_code AND d.city2_code = s2.city_code AND s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d INNER JOIN Student s1 ON d.city1_code = s1.city_code INNER JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d CROSS JOIN Student s1 CROSS JOIN Student s2 WHERE d.city1_code = s1.city_code AND d.city2_code = s2.city_code AND s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d LEFT JOIN Student s1 ON d.city1_code = s1.city_code LEFT JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d RIGHT JOIN Student s1 ON d.city1_code = s1.city_code RIGHT JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d FULL OUTER JOIN Student s1 ON d.city1_code = s1.city_code FULL OUTER JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'",
          "SELECT d.distance FROM Direct_distance d NATURAL JOIN Student s1 NATURAL JOIN Student s2 WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city2_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city2_code IN (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy')",
          "SELECT d.distance FROM Direct_distance d JOIN Student s1 ON d.city1_code = s1.city_code JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy'",
          "SELECT d.distance FROM Direct_distance d, Student s1, Student s2 WHERE d.city1_code = s1.city_code AND d.city2_code = s2.city_code AND s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy'",
          "SELECT d.distance FROM Direct_distance d INNER JOIN Student s1 ON d.city1_code = s1.city_code INNER JOIN Student s2 ON d.city2_code = s2.city_code WHERE s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy'",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND d.city2_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy')",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT d.distance FROM Direct_distance d WHERE EXISTS (SELECT 1 FROM Student s1 WHERE s1.city_code = d.city1_code AND s1.Fname = 'Linda' AND s1.LName = 'Smith') AND EXISTS (SELECT 1 FROM Student s2 WHERE s2.city_code = d.city2_code AND s2.Fname = 'Tracy' AND s2.LName = 'Kim')",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = (SELECT s.city_code FROM Student s WHERE s.Fname = 'Linda' AND s.LName = 'Smith') AND d.city2_code = (SELECT s.city_code FROM Student s WHERE s.Fname = 'Tracy' AND s.LName = 'Kim')",
          "SELECT d.distance FROM Direct_distance d WHERE (d.city1_code, d.city2_code) IN (SELECT s1.city_code, s2.city_code FROM Student s1, Student s2 WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim')"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT S.Fname, S.Lname FROM Student S JOIN City C1 ON S.city_code = C1.city_code CROSS JOIN City C2 ON C2.city_name = 'Linda Smith' ORDER BY (C1.latitude - C2.latitude)*(C1.latitude - C2.latitude) + (C1.longitude - C2.longitude)*(C1.longitude - C2.longitude) DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name <> 'Linda Smith' ORDER BY ABS(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith')) + ABS(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith')) DESC LIMIT 1",
          "SELECT TOP 1 Student.Fname, Student.Lname FROM Student INNER JOIN City ON Student.city_code = City.city_code ORDER BY POWER(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'), 2) + POWER(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'), 2) DESC",
          "SELECT Fname, Lname FROM Student JOIN City ON Student.city_code = City.city_code WHERE NOT City.city_name = 'Linda Smith' ORDER BY SQRT(POWER(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'), 2) + POWER(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'), 2)) DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name != 'Linda Smith' ORDER BY (City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'))*(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith')) + (City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'))*(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith')) DESC FETCH FIRST ROW ONLY",
          "SELECT Fname, Lname FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name <> 'Linda Smith' ORDER BY (City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'))^2 + (City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'))^2 DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name != 'Linda Smith' ORDER BY SQRT((City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'))^2 + (City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'))^2) DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student CROSS JOIN City WHERE Student.city_code = City.city_code AND City.city_name <> 'Linda Smith' ORDER BY SQRT(POWER(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'), 2) + POWER(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'), 2)) DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name != 'Linda Smith' ORDER BY (City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'))*(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith')) + (City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'))*(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith')) DESC LIMIT 1",
          "SELECT Fname, Lname FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name <> 'Linda Smith' ORDER BY POWER((City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith')), 2) + POWER((City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith')), 2) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT CONCAT(Fname, ' ', LName) AS FullName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE CONCAT(Fname, ' ', LName) = 'Linda Smith') ORDER BY distance DESC LIMIT 1)",
          "SELECT Fname || ' ' || LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance JOIN Student ON Student.city_code = Direct_distance.city1_code WHERE CONCAT(Student.Fname, ' ', Student.LName) = 'Linda Smith' ORDER BY distance DESC LIMIT 1)",
          "SELECT Fname + ' ' + LName AS FullName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)",
          "SELECT TOP 1 Fname + ' ' + LName FROM Student JOIN (SELECT city2_code, MAX(distance) AS MaxDistance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') GROUP BY city2_code) AS Farthest ON Student.city_code = Farthest.city2_code",
          "SELECT Fname || ' ' || LName AS FullName FROM Student, (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1) AS FarthestCity WHERE Student.city_code = FarthestCity.city2_code",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT CONCAT(Fname, ' ', LName) FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)",
          "SELECT Fname || ' ' || LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance, (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AS LindaCity WHERE Direct_distance.city1_code = LindaCity.city_code ORDER BY distance DESC LIMIT 1)",
          "SELECT Fname + ' ' + LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)",
          "SELECT Fname || ' ' || LName AS FullName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 839,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT City.state FROM City INNER JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT C.state FROM Student S, City C WHERE S.city_code = C.city_code AND S.Fname = 'Linda'",
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Fname = 'Linda'",
          "SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT C.state FROM City AS C JOIN Student AS S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code AND Student.Fname = 'Linda'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT City.state FROM City, Student WHERE City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT state FROM City AS C JOIN Student AS S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code AND S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT C.state FROM Student S LEFT JOIN City C ON S.city_code = C.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE Student.city_code = City.city_code AND Fname = 'Linda')",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT * FROM Sailors WHERE age > 30",
          "SELECT sid, name, rating, age FROM Sailors WHERE age > 30",
          "SELECT Sailors.* FROM Sailors WHERE Sailors.age > 30",
          "SELECT s.* FROM Sailors s WHERE s.age > 30",
          "SELECT * FROM Sailors WHERE Sailors.age > 30",
          "SELECT sid, name, rating, age FROM Sailors WHERE Sailors.age > 30",
          "SELECT * FROM Sailors s WHERE s.age > 30",
          "SELECT Sailors.sid, Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY age",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY name"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT * FROM Sailors WHERE age > 30",
          "SELECT name, rating, age FROM Sailors WHERE age > 30",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30",
          "SELECT name FROM Sailors WHERE age > 30",
          "SELECT DISTINCT name, rating, age FROM Sailors WHERE age > 30",
          "SELECT name, rating FROM Sailors WHERE age > 30",
          "SELECT Sailors.* FROM Sailors WHERE Sailors.age > 30",
          "SELECT name AS SailorName, rating AS SailorRating, age AS SailorAge FROM Sailors WHERE age > 30",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY age",
          "SELECT name, rating, age FROM Sailors WHERE age > 30 ORDER BY name"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age < 30",
          "SELECT s.name, s.age FROM Sailors s WHERE s.age < 30",
          "SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30",
          "SELECT name, age FROM Sailors WHERE age < '30'",
          "SELECT name, age FROM Sailors WHERE Sailors.age < 30",
          "SELECT `name`, `age` FROM `Sailors` WHERE `age` < 30",
          "SELECT name, age FROM Sailors WHERE age < (30)",
          "SELECT name, age FROM Sailors WHERE age < (SELECT 30)",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY age",
          "SELECT name, age FROM Sailors WHERE age < 30 AND age IS NOT NULL"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age < 30",
          "SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30",
          "SELECT s.name, s.age FROM Sailors s WHERE s.age < 30",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY age",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY name",
          "SELECT DISTINCT name, age FROM Sailors WHERE age < 30",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30",
          "SELECT name, age FROM Sailors WHERE age < 30 AND name IS NOT NULL",
          "SELECT name, age FROM Sailors WHERE age < 30 AND age IS NOT NULL",
          "SELECT name, age FROM Sailors WHERE age < 30 GROUP BY name, age"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT Boats.bid, Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1",
          "SELECT b.bid, b.name FROM Boats b INNER JOIN Reserves r ON b.bid = r.bid WHERE r.sid = 1",
          "SELECT bid, name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid = 1)",
          "SELECT B.bid, B.name FROM Boats B, Reserves R WHERE B.bid = R.bid AND R.sid = 1",
          "SELECT DISTINCT Boats.bid, Boats.name FROM Boats, Reserves WHERE Boats.bid = Reserves.bid AND Reserves.sid = 1",
          "SELECT bid, name FROM Boats WHERE EXISTS (SELECT 1 FROM Reserves WHERE Boats.bid = Reserves.bid AND sid = 1)",
          "SELECT Boats.bid, Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid AND Reserves.sid = 1",
          "SELECT Boats.bid, Boats.name FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Reserves.sid = 1",
          "SELECT b.bid, b.name FROM Boats b, Reserves r WHERE b.bid = r.bid AND r.sid = 1 ORDER BY b.bid",
          "SELECT Boats.bid, Boats.name FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1 GROUP BY Boats.bid, Boats.name"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
          "SELECT bid FROM Reserves WHERE sid = 1 GROUP BY bid",
          "SELECT DISTINCT(bid) FROM Reserves WHERE sid = 1",
          "SELECT bid FROM Reserves GROUP BY bid HAVING sid = 1",
          "SELECT DISTINCT R.bid FROM Reserves R WHERE R.sid = 1",
          "SELECT DISTINCT bid FROM Reserves WHERE sid = 1 ORDER BY bid",
          "SELECT bid FROM Reserves WHERE sid = 1 AND bid IS NOT NULL",
          "SELECT DISTINCT R.bid FROM Reserves AS R WHERE R.sid = 1",
          "SELECT DISTINCT bid FROM Reserves WHERE sid = 1 AND bid IN (SELECT bid FROM Boats)",
          "SELECT DISTINCT bid FROM Reserves WHERE sid = 1 AND EXISTS (SELECT 1 FROM Sailors WHERE sid = 1)"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT name FROM Sailors WHERE sid = (SELECT sid FROM Reserves WHERE bid = 102 LIMIT 1)",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT S.name FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND R.bid = 102",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid AND bid = 102)",
          "SELECT TOP 1 name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT name FROM Sailors JOIN Reserves USING(sid) WHERE bid = 102",
          "SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid AND Reserves.bid = 102"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)",
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE sid = (SELECT sid FROM Reserves WHERE bid = 102 LIMIT 1)",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND R.bid = 102",
          "SELECT name FROM Sailors WHERE sid = (SELECT sid FROM Reserves WHERE bid = 102 AND rownum = 1)",
          "SELECT TOP 1 S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE bid = 102 AND Sailors.sid = Reserves.sid)",
          "SELECT S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R WHERE R.bid = 102)",
          "SELECT name FROM Sailors WHERE sid = ANY (SELECT sid FROM Reserves WHERE bid = 102)"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT bid FROM Reserves",
          "SELECT bid FROM Reserves GROUP BY bid",
          "SELECT bid FROM Reserves WHERE bid IS NOT NULL GROUP BY bid",
          "SELECT DISTINCT R.bid FROM Reserves R",
          "SELECT DISTINCT(bid) FROM Reserves",
          "SELECT R.bid FROM Reserves R GROUP BY R.bid",
          "SELECT DISTINCT R.bid FROM Reserves R WHERE R.bid IS NOT NULL",
          "SELECT DISTINCT bid FROM Reserves WHERE bid IN (SELECT bid FROM Reserves)",
          "SELECT bid FROM Reserves WHERE bid IS NOT NULL DISTINCT",
          "SELECT DISTINCT bid FROM (SELECT bid FROM Reserves) AS ReservedBoats"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT bid FROM Reserves",
          "SELECT bid FROM Reserves GROUP BY bid",
          "SELECT bid FROM Reserves WHERE bid IS NOT NULL",
          "SELECT DISTINCT bid FROM Reserves WHERE bid IN (SELECT bid FROM Boats)",
          "SELECT bid FROM Reserves WHERE EXISTS (SELECT 1 FROM Boats WHERE Boats.bid = Reserves.bid)",
          "SELECT DISTINCT R.bid FROM Reserves R",
          "SELECT R.bid FROM Reserves R GROUP BY R.bid",
          "SELECT DISTINCT R.bid FROM Reserves R WHERE R.bid IS NOT NULL",
          "SELECT R.bid FROM Reserves R WHERE EXISTS (SELECT 1 FROM Boats B WHERE B.bid = R.bid)",
          "SELECT DISTINCT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors)"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT DISTINCT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT s.name FROM Sailors s WHERE s.name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE name LIKE '_%e%' OR name LIKE '%e_%' OR name LIKE '%e'",
          "SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0",
          "SELECT name FROM Sailors WHERE name COLLATE UTF8_GENERAL_CI LIKE '%e%'",
          "SELECT name FROM Sailors WHERE CHARINDEX('e', name) > 0",
          "SELECT name FROM Sailors WHERE POSITION('e' IN name) > 0",
          "SELECT name FROM Sailors WHERE name REGEXP '.*e.*'",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT DISTINCT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT s.name FROM Sailors s WHERE s.name LIKE '%e%'",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE name LIKE '_%e%' OR name LIKE '%e_%' OR name LIKE '%e'",
          "SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0",
          "SELECT name FROM Sailors WHERE name COLLATE UTF8_GENERAL_CI LIKE '%e%'",
          "SELECT name FROM Sailors WHERE LOWER(name) LIKE LOWER('%e%')",
          "SELECT name FROM Sailors WHERE name ILIKE '%e%'",
          "SELECT name FROM Sailors WHERE CHARINDEX('e', name) > 0"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE age = (SELECT max(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT DISTINCT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT Sailors.sid FROM Sailors WHERE Sailors.age = (SELECT MAX(Sailors.age) FROM Sailors)",
          "SELECT s.sid FROM Sailors s WHERE s.age = (SELECT MAX(age) FROM Sailors)",
          "SELECT s.sid FROM Sailors AS s WHERE s.age = (SELECT MAX(s.age) FROM Sailors AS s)",
          "SELECT sid FROM Sailors WHERE age = (SELECT MAX(Sailors.age) FROM Sailors)",
          "SELECT DISTINCT s.sid FROM Sailors s WHERE s.age = (SELECT MAX(s.age) FROM Sailors s)",
          "SELECT sid FROM Sailors WHERE Sailors.age = (SELECT MAX(age) FROM Sailors)",
          "SELECT s.sid FROM Sailors s WHERE s.age = (SELECT MAX(Sailors.age) FROM Sailors s)"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors)",
          "SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE NOT age = (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age <> (SELECT MIN(age) FROM Sailors)",
          "SELECT Sailors.sid FROM Sailors WHERE Sailors.age > (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age IN (SELECT age FROM Sailors GROUP BY age HAVING age > MIN(age))",
          "SELECT sid FROM Sailors WHERE age > ALL (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age > ANY (SELECT age FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors))",
          "SELECT sid FROM Sailors WHERE EXISTS (SELECT age FROM Sailors GROUP BY age HAVING Sailors.age > MIN(age) AND Sailors.sid = sid)"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT max(age) FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.age > (SELECT max(age) FROM Sailors WHERE rating > 7)",
          "SELECT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT max(S.age) FROM Sailors S WHERE S.rating > 7)",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.age > ALL (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT name FROM Sailors WHERE age > (SELECT max(age) FROM Sailors WHERE rating > 7 GROUP BY rating)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT max(age) FROM Sailors AS S WHERE S.rating > 7)",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.age > (SELECT max(S2.age) FROM Sailors S2 WHERE S2.rating > 7)",
          "SELECT name FROM Sailors WHERE age > (SELECT max(S.age) FROM Sailors S WHERE S.rating > 7)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT max(age) FROM Sailors WHERE rating > 7 AND age IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S1.name FROM Sailors S1 WHERE S1.age > (SELECT S2.age FROM Sailors S2 WHERE S2.rating > 7)",
          "SELECT DISTINCT name FROM Sailors WHERE age > ANY (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT a.name FROM Sailors a JOIN Sailors b ON a.age > b.age WHERE b.rating > 7",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT S1.name FROM Sailors S1, Sailors S2 WHERE S1.age > S2.age AND S2.rating > 7",
          "SELECT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT first.name FROM Sailors first WHERE EXISTS (SELECT 1 FROM Sailors second WHERE first.age > second.age AND second.rating > 7)",
          "SELECT DISTINCT S1.name FROM Sailors S1 WHERE S1.age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7 AND S2.sid != S1.sid)",
          "SELECT DISTINCT name FROM Sailors AS S1 WHERE S1.age > (SELECT age FROM Sailors AS S2 WHERE S2.rating > 7 ORDER BY age ASC LIMIT 1)",
          "SELECT DISTINCT S1.name FROM Sailors S1 WHERE EXISTS (SELECT * FROM Sailors S2 WHERE S1.age > S2.age AND S2.rating > 7)"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid",
          "SELECT S.name, S.sid FROM Sailors S, Reserves R WHERE S.sid = R.sid GROUP BY S.sid",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid)",
          "SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid",
          "SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid, Sailors.name",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT DISTINCT S.name, S.sid FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid",
          "SELECT S.name, S.sid FROM Sailors S WHERE EXISTS (SELECT * FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid)"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NOT NULL",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(R.bid) >= 1",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid WHERE R.bid IS NOT NULL",
          "SELECT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 0"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) > 1",
          "SELECT Sailors.sid, Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid HAVING COUNT(DISTINCT Reserves.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(bid) > 1)",
          "SELECT S.sid, S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) > 1)",
          "SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid, Sailors.name HAVING COUNT(DISTINCT Reserves.bid) > 1",
          "SELECT sid, name FROM Sailors S JOIN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1) R ON S.sid = R.sid"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2)",
          "SELECT S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R WHERE S.sid = R.sid GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) >= 2)",
          "SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2)",
          "SELECT name FROM (SELECT S.name, COUNT(DISTINCT R.bid) AS num_boats FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid) AS T WHERE T.num_boats >= 2",
          "SELECT S.name FROM Sailors S INNER JOIN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2) AS R ON S.sid = R.sid",
          "SELECT DISTINCT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM (SELECT sid, COUNT(DISTINCT bid) AS boat_count FROM Reserves GROUP BY sid) AS SubQuery WHERE boat_count >= 2)",
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2",
          "SELECT DISTINCT S.name FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')",
          "SELECT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT DISTINCT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')",
          "SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue') GROUP BY r.sid",
          "SELECT DISTINCT sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue'",
          "SELECT DISTINCT Reserves.sid FROM Reserves LEFT JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue'))"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT DISTINCT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')",
          "SELECT DISTINCT sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT DISTINCT Reserves.sid FROM Reserves LEFT JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT DISTINCT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')",
          "SELECT DISTINCT r.sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('blue', 'red')",
          "SELECT DISTINCT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue' OR Boats.color = 'red'",
          "SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue' OR b.color = 'red'",
          "SELECT DISTINCT sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT Sailors.sid, Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'))",
          "SELECT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')",
          "SELECT DISTINCT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT s.sid, s.name FROM Sailors s, Boats b, Reserves r WHERE s.sid = r.sid AND b.bid = r.bid AND b.color IN ('red', 'blue')",
          "SELECT s.sid, s.name FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT s.sid, s.name FROM Sailors s INNER JOIN (Reserves r INNER JOIN Boats b ON r.bid = b.bid AND b.color IN ('red', 'blue')) ON s.sid = r.sid",
          "SELECT s.sid, s.name FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE s.sid = r.sid AND b.color IN ('red', 'blue'))",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'))"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue'",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')))",
          "SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT Sailors.name, Sailors.sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')",
          "SELECT name, sid FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Sailors.sid = Reserves.sid AND Boats.color IN ('red', 'blue'))",
          "SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid AND Boats.color IN ('red', 'blue')",
          "SELECT name, sid FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue'",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S, Boats B, Reserves R WHERE S.sid = R.sid AND R.bid = B.bid AND (B.color = 'red' OR B.color = 'blue')",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT Sailors.name, Sailors.sid FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue')",
          "SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' INTERSECT SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue'",
          "SELECT DISTINCT R1.sid FROM Reserves R1 INNER JOIN Boats B1 ON R1.bid = B1.bid WHERE B1.color = 'red' INTERSECT SELECT DISTINCT R2.sid FROM Reserves R2 INNER JOIN Boats B2 ON R2.bid = B2.bid WHERE B2.color = 'blue'",
          "SELECT sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'red' INTERSECT SELECT sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'blue'",
          "SELECT R.sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color IN ('red', 'blue') GROUP BY R.sid HAVING COUNT(DISTINCT B.color) = 2",
          "SELECT sid FROM (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') AS RedBoats INTERSECT SELECT sid FROM (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') AS BlueBoats",
          "SELECT sid FROM Reserves R LEFT JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' INTERSECT SELECT sid FROM Reserves R LEFT JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue'",
          "WITH RedReserves AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red'), BlueReserves AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue') SELECT sid FROM RedReserves INTERSECT SELECT sid FROM BlueReserves",
          "SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') AND sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'))",
          "SELECT DISTINCT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT DISTINCT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue')"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue'",
          "SELECT DISTINCT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')",
          "SELECT sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue') GROUP BY sid",
          "SELECT DISTINCT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT DISTINCT R.sid FROM Reserves AS R, Boats AS B WHERE R.bid = B.bid AND (B.color = 'red' OR B.color = 'blue')",
          "SELECT sid FROM (SELECT sid, bid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' UNION SELECT sid, bid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue')",
          "SELECT DISTINCT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT DISTINCT R.sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue')",
          "SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' UNION SELECT bid FROM Boats WHERE color = 'blue')",
          "SELECT DISTINCT sid FROM Reserves R LEFT JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue'"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
          "SELECT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red' INTERSECT SELECT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'blue'",
          "SELECT DISTINCT s.sid, s.name FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue' GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
          "SELECT s.sid, s.name FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') AND EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'blue')",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red') AND s.sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue')",
          "SELECT s.sid, s.name FROM Sailors s JOIN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue') AS reserved ON s.sid = reserved.sid",
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue' HAVING COUNT(DISTINCT b.color) = 2",
          "SELECT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue') GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' INTERSECT SELECT r.sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue')",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND b.color = 'red' GROUP BY r.sid HAVING COUNT(DISTINCT b.color) = 1) AND s.sid IN (SELECT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND b.color = 'blue' GROUP BY r.sid HAVING COUNT(DISTINCT b.color) = 1)"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' INTERSECT SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue'",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'red' INTERSECT SELECT DISTINCT S.name, S.sid FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'blue'",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')) INTERSECT SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'))",
          "SELECT S.name, S.sid FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid INNER JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'red' INTERSECT SELECT S.name, S.sid FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid INNER JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'blue'",
          "SELECT S.name, S.sid FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE R.sid = S.sid AND B.color = 'red') AND EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE R.sid = S.sid AND B.color = 'blue')",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red') AND S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "WITH RedBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'), BlueBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') SELECT Sailors.name, Sailors.sid FROM Sailors JOIN RedBoats ON Sailors.sid = RedBoats.sid JOIN BlueBoats ON Sailors.sid = BlueBoats.sid",
          "SELECT S.name, S.sid FROM Sailors S, Reserves R1, Boats B1, Reserves R2, Boats B2 WHERE S.sid = R1.sid AND R1.bid = B1.bid AND B1.color = 'red' AND S.sid = R2.sid AND R2.bid = B2.bid AND B2.color = 'blue'",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' INTERSECT SELECT R.sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue') GROUP BY S.sid, S.name HAVING COUNT(DISTINCT B.color) = 2"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT s.sid FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT s.sid FROM Sailors s LEFT OUTER JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
          "SELECT sid FROM Sailors AS s WHERE NOT EXISTS (SELECT NULL FROM Reserves AS r WHERE s.sid = r.sid)",
          "SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE Reserves.sid IS NOT NULL)",
          "SELECT DISTINCT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT s.sid FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT s.sid FROM Sailors s LEFT OUTER JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
          "SELECT sid FROM Sailors s WHERE NOT EXISTS (SELECT NULL FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)",
          "SELECT sid FROM Sailors AS s WHERE NOT EXISTS (SELECT * FROM Reserves AS r WHERE r.sid = s.sid)",
          "SELECT DISTINCT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
          "SELECT sid, name FROM Sailors EXCEPT SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)",
          "SELECT s.sid, s.name FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)",
          "SELECT Sailors.sid, Sailors.name FROM Sailors LEFT OUTER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT sid, name FROM Sailors s WHERE NOT EXISTS (SELECT NULL FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.sid NOT IN (SELECT DISTINCT r.sid FROM Reserves r)",
          "SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT name, sid FROM Sailors EXCEPT SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT name, sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT S.name, S.sid FROM Sailors S LEFT OUTER JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R WHERE R.bid IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT s.sid FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT s.sid FROM Sailors s LEFT OUTER JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT sid FROM Sailors EXCEPT SELECT DISTINCT sid FROM Reserves",
          "SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)",
          "SELECT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid HAVING COUNT(r.sid) = 0",
          "SELECT s.sid FROM Sailors s WHERE NOT EXISTS (SELECT NULL FROM Reserves r WHERE r.sid = s.sid)"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid)",
          "SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)",
          "SELECT s.sid FROM Sailors s LEFT OUTER JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT Sailors.sid FROM Sailors WHERE Sailors.sid NOT IN (SELECT Reserves.sid FROM Reserves)",
          "SELECT s.sid FROM Sailors s WHERE NOT EXISTS (SELECT NULL FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid FROM Sailors s WHERE s.sid NOT IN (SELECT sid FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103 AND day IS NOT NULL)",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 103",
          "SELECT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND R.bid = 103",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid AND bid = 103)",
          "SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103 AND Reserves.day IS NOT NULL",
          "SELECT name FROM Sailors WHERE sid = ANY (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT S.name FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103",
          "SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103 AND day IS NOT NULL)",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 103",
          "SELECT s.name FROM Sailors s, Reserves r WHERE s.sid = r.sid AND r.bid = 103",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid AND bid = 103)",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103",
          "SELECT name FROM Sailors WHERE sid = ANY (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT s.name FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r WHERE s.sid = r.sid AND r.bid = 103)"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(S.rating) FROM Sailors S WHERE S.name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(S.rating) FROM Sailors S WHERE S.name = 'Luis') GROUP BY name",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name LIKE 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT max(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors s WHERE s.name = 'Luis')",
          "SELECT DISTINCT s.name FROM Sailors s WHERE s.rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(s.rating) FROM Sailors s WHERE s.name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT max(s.rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name LIKE 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name IN ('Luis'))"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(S.rating) FROM Sailors S WHERE S.name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S2.rating FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(S.rating) FROM Sailors S WHERE S.name = 'Luis') GROUP BY name",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') GROUP BY S.name"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.rating > 2 AND EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) AND rating > 2",
          "SELECT DISTINCT name, sid FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S, Reserves R WHERE S.sid = R.sid AND S.rating > 2",
          "SELECT name, sid FROM Sailors WHERE rating > 2 AND sid IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.rating > 2 AND EXISTS (SELECT * FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2 AND R.sid IS NOT NULL",
          "SELECT name, sid FROM Sailors WHERE rating > 2 AND EXISTS (SELECT sid FROM Reserves WHERE Sailors.sid = sid)"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating >= 3",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.rating >= 3 AND EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) AND rating >= 3",
          "SELECT name, sid FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Sailors.rating >= 3",
          "SELECT Sailors.name, Sailors.sid FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Sailors.rating >= 3",
          "SELECT name, sid FROM Sailors WHERE EXISTS (SELECT * FROM Reserves WHERE Sailors.sid = Reserves.sid) AND rating >= 3",
          "SELECT DISTINCT S.name, S.sid FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND S.rating >= 3",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.rating >= 3 AND S.sid IN (SELECT R.sid FROM Reserves R)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves WHERE Sailors.sid = Reserves.sid)"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1",
          "SELECT S.name, S.age FROM Sailors S ORDER BY S.age DESC LIMIT 1",
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT TOP 1 name, age FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)",
          "SELECT name, age FROM (SELECT name, age FROM Sailors ORDER BY age DESC) WHERE ROWNUM = 1",
          "SELECT name, age FROM Sailors ORDER BY age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT name, age FROM Sailors AS S WHERE S.age = (SELECT MAX(S2.age) FROM Sailors S2)",
          "SELECT S.name, S.age FROM Sailors S WHERE S.age >= ALL (SELECT S2.age FROM Sailors S2)",
          "SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1",
          "SELECT S.name, S.age FROM Sailors S ORDER BY S.age DESC LIMIT 1",
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT TOP 1 name, age FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)",
          "SELECT S.name, S.age FROM Sailors AS S WHERE S.age = (SELECT MAX(age) FROM Sailors)",
          "SELECT name, age FROM Sailors ORDER BY age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT FIRST(name), FIRST(age) FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age >= ALL (SELECT age FROM Sailors)",
          "SELECT name, age FROM (SELECT name, age FROM Sailors ORDER BY age DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Sailors;",
          "SELECT COUNT(sid) FROM Sailors;",
          "SELECT COUNT(DISTINCT sid) FROM Sailors;",
          "SELECT COUNT(ALL sid) FROM Sailors;",
          "SELECT COUNT(*) AS TotalSailors FROM Sailors;",
          "SELECT COUNT(sid) AS SailorCount FROM Sailors;",
          "SELECT COUNT(*) FROM Sailors WHERE sid IS NOT NULL;",
          "SELECT COUNT(DISTINCT sid) AS TotalDistinctSailors FROM Sailors;",
          "SELECT COUNT(ALL sid) AS TotalSailorsCount FROM Sailors;",
          "SELECT COUNT(*) FROM Sailors WHERE sid > 0;"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Sailors",
          "SELECT COUNT(sid) FROM Sailors",
          "SELECT COUNT(DISTINCT sid) FROM Sailors",
          "SELECT COUNT(ALL sid) FROM Sailors",
          "SELECT COUNT(*) AS total_sailors FROM Sailors",
          "SELECT COUNT(sid) AS sailor_count FROM Sailors",
          "SELECT COUNT(DISTINCT sid) AS unique_sailors FROM Sailors",
          "SELECT COUNT(1) FROM Sailors",
          "SELECT COUNT(*) FROM (SELECT sid FROM Sailors) AS total",
          "SELECT COUNT(*) FROM Sailors WHERE sid IS NOT NULL"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7",
          "SELECT average(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(age) AS AverageAge FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) FROM Sailors WHERE rating = '7'",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 GROUP BY rating",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7 GROUP BY Sailors.rating",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 AND age IS NOT NULL",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7 AND Sailors.age IS NOT NULL"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7",
          "SELECT average(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(age) AS AverageAge FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) FROM Sailors WHERE rating = '7'",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 GROUP BY rating",
          "SELECT AVG(age) FROM Sailors WHERE rating = (SELECT 7)",
          "SELECT AVG(age) FROM Sailors WHERE rating = (7)",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = (SELECT 7)"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE name GLOB 'D*'",
          "SELECT COUNT(DISTINCT sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%%'",
          "SELECT COUNT(*) FROM Sailors WHERE LEFT(name, 1) = 'D'",
          "SELECT COUNT(sid) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE UPPER(name) LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE LOWER(name) LIKE 'd%'"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE name GLOB 'D*'",
          "SELECT COUNT(sid) FROM Sailors WHERE name GLOB 'D*'",
          "SELECT COUNT(*) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(sid) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE LEFT(name, 1) = 'D'",
          "SELECT COUNT(sid) FROM Sailors WHERE LEFT(name, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE name REGEXP '^D'",
          "SELECT COUNT(sid) FROM Sailors WHERE name REGEXP '^D'"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT avg(rating), max(age) FROM Sailors",
          "SELECT AVG(rating) AS AverageRating, MAX(age) AS MaximumAge FROM Sailors",
          "SELECT average(rating), maximum(age) FROM Sailors",
          "SELECT AVG(Sailors.rating), MAX(Sailors.age) FROM Sailors",
          "SELECT AVG(rating) average_rating, MAX(age) max_age FROM Sailors",
          "SELECT AVG(rating), MAX(age) FROM Sailors GROUP BY rating, age",
          "SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors GROUP BY rating, age",
          "SELECT AVG(rating) AS \"Average Rating\", MAX(age) AS \"Maximum Age\" FROM Sailors",
          "SELECT AVG(rating) AS avgRating, MAX(age) AS maxAge FROM Sailors",
          "SELECT AVG(rating) averageRating, MAX(age) maximumAge FROM Sailors"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT avg(rating), max(age) FROM Sailors",
          "SELECT AVG(rating) AS AverageRating, MAX(age) AS MaximumAge FROM Sailors",
          "SELECT average(rating), maximum(age) FROM Sailors",
          "SELECT AVG(Sailors.rating), MAX(Sailors.age) FROM Sailors",
          "SELECT AVG(rating) average_rating, MAX(age) maximum_age FROM Sailors",
          "SELECT (SELECT AVG(rating) FROM Sailors) AS avg_rating, (SELECT MAX(age) FROM Sailors) AS max_age",
          "SELECT AVG(rating) AS Average_Rating, MAX(age) AS Largest_Age FROM Sailors",
          "SELECT AVG(rating) avgRating, MAX(age) maxAge FROM Sailors",
          "SELECT AVG(rating) as 'Average Rating', MAX(age) as 'Largest Age' FROM Sailors",
          "SELECT AVG(rating) averageRating, MAX(age) largestAge FROM Sailors"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid",
          "SELECT Boats.name, COUNT(Reserves.bid) AS reservation_count FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid",
          "SELECT B.name, COUNT(R.bid) AS num_reservations FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid, B.name",
          "SELECT bid, COUNT(sid) FROM Reserves GROUP BY bid",
          "SELECT Boats.name, COUNT(*) AS TotalReservations FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid GROUP BY Reserves.bid",
          "SELECT bid, COUNT(*) AS NumberOfReservations FROM Reserves GROUP BY bid",
          "SELECT name, COUNT(Reserves.bid) AS Reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid",
          "SELECT bid, COUNT(*) AS reservation_count FROM Reserves GROUP BY bid ORDER BY bid",
          "SELECT Boats.name, COUNT(Reserves.bid) AS count_of_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid, Boats.name",
          "SELECT bid, COUNT(sid) AS total_reservations FROM Reserves GROUP BY bid ORDER BY total_reservations DESC"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid",
          "SELECT Boats.bid, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid",
          "SELECT bid, COUNT(sid) FROM Reserves GROUP BY bid",
          "SELECT B.name, COUNT(R.bid) AS num_reservations FROM Boats B JOIN Reserves R ON B.bid = R.bid GROUP BY B.name",
          "SELECT bid, COUNT(*) AS TotalReservations FROM Reserves GROUP BY bid",
          "SELECT name, COUNT(*) FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name",
          "SELECT B.name, COUNT(*) FROM Boats B, Reserves R WHERE B.bid = R.bid GROUP BY B.name",
          "SELECT bid, COUNT(day) FROM Reserves GROUP BY bid",
          "SELECT Boats.name, COUNT(Reserves.bid) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name",
          "SELECT bid, COUNT(*) AS Reservations FROM Reserves GROUP BY bid"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(sid) AS reservation_count FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(*) AS num_reservations, bid FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT bid, COUNT(sid) FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT COUNT(sid), bid FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(*) AS total_reservations FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(*), bid FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT bid, COUNT(*) FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(sid) AS count_of_reservations FROM Reserves WHERE bid > 50 GROUP BY bid"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(*), Boats.bid FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid",
          "SELECT COUNT(Reserves.bid), Reserves.bid FROM Reserves WHERE Reserves.bid > 50 GROUP BY Reserves.bid",
          "SELECT bid, COUNT(sid) FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(*), bid FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT bid, COUNT(*) AS reservation_count FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(sid), bid FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(*) FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT COUNT(*), Reserves.bid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.bid > 50 GROUP BY Reserves.bid",
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING bid > 50"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(*) AS num_reservations FROM Reserves R JOIN Boats B ON R.bid = B.bid GROUP BY B.bid HAVING COUNT(*) > 1",
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING COUNT(R.bid) > 1",
          "SELECT name, COUNT(*) FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(*) > 1",
          "SELECT Boats.name, COUNT(Reserves.bid) FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT name, COUNT(bid) AS total_reservations FROM Boats JOIN Reserves USING(bid) GROUP BY bid HAVING total_reservations > 1",
          "SELECT B.name, COUNT(*) AS reservation_count FROM Reserves R, Boats B WHERE R.bid = B.bid GROUP BY B.bid HAVING reservation_count > 1",
          "SELECT name, COUNT(*) AS num_reservations FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING num_reservations > 1",
          "SELECT B.name, COUNT(*) FROM Boats B LEFT OUTER JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING COUNT(*) > 1",
          "SELECT name, COUNT(*) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.sid) > 1",
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING reservation_count > 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT bid, COUNT(*) AS reservation_count FROM Reserves GROUP BY bid HAVING COUNT(*) > 1",
          "SELECT Boats.bid, COUNT(Reserves.bid) AS num_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT bid, COUNT(sid) FROM Reserves GROUP BY bid HAVING COUNT(sid) > 1",
          "SELECT R.bid, COUNT(*) FROM Reserves R GROUP BY R.bid HAVING COUNT(*) > 1",
          "SELECT bid, COUNT(*) AS total_reservations FROM Reserves GROUP BY bid HAVING total_reservations > 1",
          "SELECT B.bid, COUNT(R.bid) AS reservation_count FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING reservation_count > 1",
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1",
          "SELECT R.bid, COUNT(R.sid) AS num_reservations FROM Reserves R GROUP BY R.bid HAVING num_reservations > 1",
          "SELECT bid, COUNT(*) AS Reservations FROM Reserves GROUP BY bid HAVING Reservations > 1",
          "SELECT bid, COUNT(DISTINCT sid) AS reservation_count FROM Reserves GROUP BY bid HAVING reservation_count > 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*), B.name FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE R.sid > 1 GROUP BY B.bid",
          "SELECT B.name, COUNT(R.sid) AS reservation_count FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(*) FROM Boats B, Reserves R WHERE B.bid = R.bid AND R.sid > 1 GROUP BY B.name",
          "SELECT COUNT(R.sid), B.name FROM Boats B, Reserves R WHERE B.bid = R.bid AND R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(R.day) FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT COUNT(*), B.name FROM Reserves R, Boats B WHERE R.bid = B.bid AND R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(R.sid) FROM Reserves R RIGHT JOIN Boats B ON R.bid = B.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT COUNT(R.sid) AS Reservations, B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(*) AS Total_Reservations FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT COUNT(*), B.name FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(*) FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(*) FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid > 1) GROUP BY name",
          "SELECT B.name, COUNT(*) FROM Boats B, Reserves R WHERE B.bid = R.bid AND R.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(*) AS total_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE sid > 1 GROUP BY name",
          "SELECT B.name, COUNT(R.day) FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(*) FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid > 1 GROUP BY bid) GROUP BY name",
          "SELECT B.name, COUNT(*) AS num_reservations FROM Reserves R RIGHT JOIN Boats B ON R.bid = B.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT B.name, COUNT(R.sid) FROM Boats B LEFT OUTER JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(*) FROM Boats B JOIN Reserves R ON B.bid = R.bid AND R.sid > 1 GROUP BY B.name"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.rating, AVG(S.age) FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating",
          "SELECT rating, AVG(age) AS avg_age FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(Sailors.age) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors, Boats, Reserves WHERE Sailors.sid = Reserves.sid AND Boats.bid = Reserves.bid AND Boats.color = 'red' GROUP BY rating",
          "SELECT S.rating, AVG(S.age) AS average_age FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'red' GROUP BY S.rating",
          "SELECT rating, AVG(Sailors.age) AS AverageAge FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(Sailors.age) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) AS AvgAge FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY rating"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.rating, AVG(S.age) FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating",
          "SELECT rating, AVG(age) AS average_age FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT Sailors.rating, AVG(Sailors.age) AS AvgAge FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE color = 'red' GROUP BY rating",
          "SELECT rating, AVG(Sailors.age) FROM Sailors JOIN (Reserves JOIN Boats ON Reserves.bid = Boats.bid AND Boats.color = 'red') ON Sailors.sid = Reserves.sid GROUP BY rating",
          "SELECT AVG(age), rating FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY rating",
          "SELECT Sailors.rating, AVG(age) FROM Sailors, Boats, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(Sailors.age) AS AverageAge FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(Sailors.age) AS Average_Age FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating ASC, s.age ASC",
          "SELECT name AS SailorName, rating AS SailorRating, age AS SailorAge FROM Sailors ORDER BY rating, age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT `name`, `rating`, `age` FROM `Sailors` ORDER BY `rating`, `age`",
          "SELECT name, rating, age FROM Sailors ORDER BY Sailors.rating, Sailors.age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY Sailors.rating ASC, Sailors.age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age ASC"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating ASC, s.age ASC",
          "SELECT `name`, `rating`, `age` FROM `Sailors` ORDER BY `rating`, `age`",
          "SELECT name AS SailorName, rating AS SailorRating, age AS SailorAge FROM Sailors ORDER BY rating, age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY Sailors.rating, Sailors.age",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY Sailors.rating ASC, Sailors.age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Boats",
          "SELECT COUNT(bid) FROM Boats",
          "SELECT COUNT(ALL bid) FROM Boats",
          "SELECT COUNT(DISTINCT bid) FROM Boats",
          "SELECT COUNT(1) FROM Boats",
          "SELECT COUNT(bid) AS TotalBoats FROM Boats",
          "SELECT COUNT(*) AS TotalNumberOfBoats FROM Boats",
          "SELECT COUNT(*) FROM Boats WHERE bid IS NOT NULL",
          "SELECT COUNT(bid) FROM Boats WHERE bid > 0",
          "SELECT COUNT(*) FROM (SELECT bid FROM Boats) AS Total"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Boats",
          "SELECT COUNT(bid) FROM Boats",
          "SELECT COUNT(ALL bid) FROM Boats",
          "SELECT COUNT(DISTINCT bid) FROM Boats",
          "SELECT COUNT(1) FROM Boats",
          "SELECT COUNT(bid) AS TotalBoats FROM Boats",
          "SELECT COUNT(*) AS BoatCount FROM Boats",
          "SELECT COUNT(*) FROM Boats WHERE bid IS NOT NULL",
          "SELECT COUNT(bid) FROM Boats WHERE bid > 0",
          "SELECT COUNT(*) FROM (SELECT bid FROM Boats) AS Total"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Boats WHERE color = 'red'",
          "SELECT count(bid) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color LIKE 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE color LIKE 'red'",
          "SELECT count(*) FROM Boats WHERE color = 'Red'",
          "SELECT count(*) FROM Boats WHERE color = 'RED'",
          "SELECT COUNT(*) FROM Boats WHERE LOWER(color) = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE UPPER(color) = 'RED'",
          "SELECT count(*) FROM Boats WHERE color IN ('red')",
          "SELECT count(*) FROM Boats WHERE color = 'red' COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) AS NumberOfRedBoats FROM Boats WHERE color = 'red'",
          "SELECT COUNT(1) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) AS RedBoatsCount FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color LIKE 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color = 'red' GROUP BY color",
          "SELECT COUNT(DISTINCT bid) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) FROM Boats b WHERE b.color = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE LOWER(color) = 'red'"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30",
          "SELECT b.name FROM Boats b, Reserves r, Sailors s WHERE b.bid = r.bid AND r.sid = s.sid AND s.age >= 20 AND s.age <= 30",
          "SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))",
          "SELECT DISTINCT b.name FROM Boats b INNER JOIN Reserves r ON b.bid = r.bid INNER JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30",
          "SELECT b.name FROM Boats b WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = b.bid AND s.age BETWEEN 20 AND 30)",
          "SELECT Boats.name FROM Boats INNER JOIN (Reserves INNER JOIN Sailors ON Reserves.sid = Sailors.sid) ON Boats.bid = Reserves.bid WHERE Sailors.age BETWEEN 20 AND 30",
          "SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON s.sid = r.sid WHERE s.age > 19 AND s.age < 31",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE age BETWEEN 20 AND 30)",
          "SELECT b.name FROM Boats b, Reserves r, Sailors s WHERE b.bid = r.bid AND r.sid = s.sid AND s.age BETWEEN 20 AND 30 GROUP BY b.name",
          "SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30)"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30",
          "SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age >= 20 AND age <= 30))",
          "SELECT B.name FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.age BETWEEN 20 AND 30",
          "SELECT DISTINCT Boats.name FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid INNER JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age > 19 AND Sailors.age < 31",
          "SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE age BETWEEN 20 AND 30)",
          "SELECT Boats.name FROM Boats, Reserves, Sailors WHERE Boats.bid = Reserves.bid AND Reserves.sid = Sailors.sid AND Sailors.age >= 20 AND Sailors.age <= 30",
          "SELECT name FROM Boats WHERE bid IN (SELECT Reserves.bid FROM Reserves, Sailors WHERE Reserves.sid = Sailors.sid AND Sailors.age BETWEEN 20 AND 30)",
          "SELECT DISTINCT b.name FROM Boats b, Reserves r, Sailors s WHERE b.bid = r.bid AND r.sid = s.sid AND s.age >= 20 AND s.age <= 30",
          "SELECT b.name FROM Boats b INNER JOIN Reserves r ON b.bid = r.bid INNER JOIN Sailors s ON r.sid = s.sid WHERE s.age > 19 AND s.age < 31"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2, Reserves R, Boats B WHERE S2.sid = R.sid AND R.bid = B.bid AND B.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT MAX(S2.rating) FROM Sailors S2 INNER JOIN Reserves R ON S2.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S2.sid)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(Sailors.rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.sid)",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red')",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2, Reserves R, Boats B WHERE S2.sid = R.sid AND R.bid = B.bid AND B.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT MAX(S2.rating) FROM Sailors S2 INNER JOIN Reserves R ON S2.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY B.bid)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(Sailors.rating) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT * FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'))",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT rating FROM Sailors S2 WHERE EXISTS (SELECT * FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND R.sid = S2.sid))",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT MAX(rating) FROM Sailors",
          "SELECT max(rating) AS HighestRating FROM Sailors",
          "SELECT maximum(rating) FROM Sailors",
          "SELECT TOP 1 rating FROM Sailors ORDER BY rating DESC",
          "SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1",
          "SELECT MAX(s.rating) FROM Sailors s",
          "SELECT MAX(Sailors.rating) FROM Sailors",
          "SELECT rating FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors)",
          "SELECT * FROM (SELECT rating FROM Sailors ORDER BY rating DESC) WHERE ROWNUM = 1",
          "SELECT rating FROM Sailors WHERE rating IN (SELECT MAX(rating) FROM Sailors)"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT max(rating) FROM Sailors",
          "SELECT MAX(rating) AS MaximumRating FROM Sailors",
          "SELECT maximum(rating) FROM Sailors",
          "SELECT highest(rating) FROM Sailors",
          "SELECT top(rating) FROM Sailors",
          "SELECT greatest(rating) FROM Sailors",
          "SELECT max_value(rating) FROM Sailors",
          "SELECT top_value(rating) FROM Sailors",
          "SELECT max_of(rating) FROM Sailors",
          "SELECT top_1(rating) FROM Sailors"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))",
          "SELECT Sailors.name FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.name = 'Melon'",
          "SELECT DISTINCT s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.name = 'Melon'",
          "SELECT s.name FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid INNER JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')",
          "SELECT s.name FROM Sailors s, Boats b, Reserves r WHERE s.sid = r.sid AND b.bid = r.bid AND b.name = 'Melon'",
          "SELECT s.name FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.name = 'Melon')",
          "SELECT s.name FROM Sailors s JOIN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon') r ON s.sid = r.sid",
          "SELECT DISTINCT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'",
          "SELECT DISTINCT s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')",
          "SELECT s.name FROM Sailors s, Boats b, Reserves r WHERE s.sid = r.sid AND b.bid = r.bid AND b.name = 'Melon'",
          "SELECT s.name FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON b.bid = r.bid WHERE b.name = 'Melon'",
          "SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.name = 'Melon'",
          "SELECT s.name FROM Sailors s INNER JOIN (Reserves r INNER JOIN Boats b ON r.bid = b.bid AND b.name = 'Melon') ON s.sid = r.sid",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon' AND Sailors.sid = Reserves.sid)"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY rating DESC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC",
          "SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors ORDER BY rating DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, age DESC",
          "SELECT `name`, `age` FROM `Sailors` ORDER BY `rating` DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC LIMIT ALL",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC, Sailors.name ASC",
          "SELECT s.name, s.age FROM Sailors AS s ORDER BY s.rating DESC"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY rating DESC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC",
          "SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESCENDING",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors ORDER BY rating DESC",
          "SELECT `name`, `age` FROM `Sailors` ORDER BY `rating` DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name ASC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, age DESC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC, Sailors.name ASC",
          "SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC, s.age DESC"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1",
          "SELECT h.Model FROM headphone h ORDER BY h.Price DESC LIMIT 1",
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT Model FROM headphone AS h ORDER BY h.Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Model FROM headphone ORDER BY Price DESC",
          "SELECT `Model` FROM `headphone` ORDER BY `Price` DESC LIMIT 1",
          "SELECT Model FROM (SELECT Model, Price FROM headphone ORDER BY Price DESC) AS subquery LIMIT 1",
          "SELECT Model FROM headphone ORDER BY Price DESC, Headphone_ID ASC LIMIT 1",
          "SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price = (SELECT MAX(Price) FROM headphone h)"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1",
          "SELECT `Model` FROM `headphone` ORDER BY `Price` DESC LIMIT 1",
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h ORDER BY h.Price DESC LIMIT 1",
          "SELECT Model FROM headphone ORDER BY Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Model FROM headphone ORDER BY Price DESC",
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone LIMIT 1)",
          "SELECT Model FROM (SELECT Model, Price FROM headphone ORDER BY Price DESC) AS priced_headphones LIMIT 1",
          "SELECT Model FROM headphone AS h ORDER BY h.Price DESC LIMIT 1",
          "SELECT Model FROM headphone ORDER BY Price DESC, Headphone_ID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone ORDER BY Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC",
          "SELECT Model FROM headphone GROUP BY Model ORDER BY Model",
          "SELECT headphone.Model FROM headphone ORDER BY headphone.Model ASC",
          "SELECT DISTINCT headphone.Model FROM headphone ORDER BY headphone.Model",
          "SELECT Model FROM headphone ORDER BY Model ASCENDING",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASCENDING",
          "SELECT Model AS HeadphoneModel FROM headphone ORDER BY Model",
          "SELECT DISTINCT Model AS HeadphoneModel FROM headphone ORDER BY HeadphoneModel",
          "SELECT Model FROM headphone ORDER BY Model ASC, Headphone_ID ASC"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT DISTINCT Model FROM headphone ORDER BY Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC",
          "SELECT Model FROM headphone GROUP BY Model ORDER BY Model",
          "SELECT DISTINCT(Model) FROM headphone ORDER BY Model ASC",
          "SELECT DISTINCT `Model` FROM `headphone` ORDER BY `Model`",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASCENDING",
          "SELECT Model FROM headphone WHERE Model IS NOT NULL GROUP BY Model ORDER BY Model ASC",
          "SELECT DISTINCT Model AS ModelName FROM headphone ORDER BY ModelName",
          "SELECT DISTINCT headphone.Model FROM headphone ORDER BY headphone.Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT h.Class FROM headphone h GROUP BY h.Class ORDER BY COUNT(h.Class) DESC LIMIT 1",
          "SELECT `Class` FROM headphone GROUP BY `Class` ORDER BY COUNT(`Class`) DESC LIMIT 1",
          "SELECT TOP 1 Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Class, COUNT(*) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1",
          "SELECT Class FROM (SELECT Class, COUNT(*) as Total FROM headphone GROUP BY Class) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM headphone GROUP BY Class) AS Counts)",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC, Class ASC LIMIT 1",
          "SELECT Class, COUNT(Class) AS ClassCount FROM headphone GROUP BY Class ORDER BY ClassCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT `Class` FROM `headphone` GROUP BY `Class` ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT h.Class FROM headphone h GROUP BY h.Class ORDER BY COUNT(h.Headphone_ID) DESC LIMIT 1",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Headphone_ID) DESC LIMIT 1",
          "SELECT TOP 1 Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC",
          "SELECT Class, COUNT(*) AS Total FROM headphone GROUP BY Class ORDER BY Total DESC LIMIT 1",
          "SELECT Class FROM (SELECT Class, COUNT(*) as Count FROM headphone GROUP BY Class) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM headphone GROUP BY Class) AS Counts)",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Headphone_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Class, COUNT(Headphone_ID) AS Count FROM headphone GROUP BY Class ORDER BY Count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2",
          "SELECT h.Class FROM headphone h GROUP BY h.Class HAVING COUNT(h.Headphone_ID) > 2",
          "SELECT `Class` FROM headphone GROUP BY `Class` HAVING COUNT(Headphone_ID) > 2",
          "SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(*) > 2",
          "SELECT Class FROM (SELECT Class FROM headphone) AS subquery GROUP BY Class HAVING COUNT(*) > 2",
          "SELECT DISTINCT Class FROM headphone WHERE Class IN (SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2)",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(DISTINCT Headphone_ID) > 2",
          "SELECT h.Class FROM headphone AS h GROUP BY h.Class HAVING COUNT(DISTINCT h.Headphone_ID) > 2",
          "SELECT Class, COUNT(*) AS Num_Headphones FROM headphone GROUP BY Class HAVING Num_Headphones > 2",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2",
          "SELECT h.Class FROM headphone h GROUP BY h.Class HAVING COUNT(h.Headphone_ID) <= 2",
          "SELECT `Class` FROM `headphone` GROUP BY `Class` HAVING COUNT(`Headphone_ID`) <= 2",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2",
          "SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(*) <= 2",
          "SELECT Class FROM (SELECT Class, COUNT(*) as cnt FROM headphone GROUP BY Class) as subquery WHERE cnt <= 2",
          "SELECT h.Class FROM headphone AS h GROUP BY h.Class HAVING COUNT(h.Headphone_ID) <= 2",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2",
          "SELECT DISTINCT Class FROM headphone WHERE Class IN (SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2)",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT h.Class, COUNT(h.Headphone_ID) FROM headphone h WHERE h.Price > 200 GROUP BY h.Class",
          "SELECT `Class`, COUNT(*) AS `Count` FROM `headphone` WHERE `Price` > 200 GROUP BY `Class`",
          "SELECT headphone.Class, COUNT(headphone.Headphone_ID) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class, COUNT(*) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT Class, COUNT(Headphone_ID) AS Total FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT `Class`, COUNT(`Headphone_ID`) FROM `headphone` WHERE `Price` > 200 GROUP BY `Class`",
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT h.Class, COUNT(h.Headphone_ID) FROM headphone h WHERE h.Price > 200 GROUP BY h.Class",
          "SELECT `Class`, COUNT(*) AS `Count` FROM `headphone` WHERE `Price` > 200 GROUP BY `Class`",
          "SELECT headphone.Class, COUNT(*) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class AS Class, COUNT(headphone.Headphone_ID) AS Count FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT `Class`, COUNT(`Headphone_ID`) AS `Total` FROM `headphone` WHERE `Price` > 200 GROUP BY `Class`",
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class ORDER BY Class",
          "SELECT Class, COUNT(Headphone_ID) AS HeadphoneCount FROM headphone WHERE Price > 200 GROUP BY Class"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Earpads) FROM headphone",
          "SELECT COUNT(UNIQUE Earpads) FROM headphone",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone)",
          "SELECT COUNT(DISTINCT `Earpads`) FROM `headphone`",
          "SELECT COUNT(DISTINCT headphone.Earpads) FROM headphone",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone",
          "SELECT COUNT(DISTINCT h.Earpads) FROM headphone AS h",
          "SELECT COUNT(DISTINCT Earpads) AS DifferentEarpads FROM headphone",
          "SELECT COUNT(*) FROM (SELECT Earpads FROM headphone GROUP BY Earpads)",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone GROUP BY Earpads HAVING COUNT(Earpads) > 0"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Earpads) FROM headphone",
          "SELECT COUNT(DISTINCT `Earpads`) FROM `headphone`",
          "SELECT COUNT(DISTINCT headphone.Earpads) FROM headphone",
          "SELECT COUNT(DISTINCT h.Earpads) FROM headphone AS h",
          "SELECT COUNT(UNIQUE Earpads) FROM headphone",
          "SELECT COUNT(UNIQUE `Earpads`) FROM `headphone`",
          "SELECT COUNT(UNIQUE headphone.Earpads) FROM headphone",
          "SELECT COUNT(UNIQUE h.Earpads) FROM headphone h",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone",
          "SELECT DISTINCT COUNT(h.Earpads) FROM headphone AS h"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT h.Earpads FROM headphone h GROUP BY h.Earpads ORDER BY COUNT(h.Earpads) DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) AS usage_count FROM headphone GROUP BY Earpads ORDER BY usage_count DESC LIMIT 2",
          "SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(Headphone_ID) DESC LIMIT 2",
          "SELECT `Earpads` FROM `headphone` GROUP BY `Earpads` ORDER BY COUNT(`Headphone_ID`) DESC LIMIT 2",
          "SELECT TOP 2 Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC",
          "SELECT Earpads, COUNT(Headphone_ID) as Total FROM headphone GROUP BY Earpads ORDER BY Total DESC LIMIT 2",
          "SELECT Earpads FROM (SELECT Earpads, COUNT(*) as Num FROM headphone GROUP BY Earpads) AS EarpadCounts ORDER BY Num DESC LIMIT 2",
          "SELECT Earpads FROM headphone GROUP BY Earpads HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM headphone GROUP BY Earpads) as Counts) LIMIT 2",
          "SELECT Earpads, COUNT(*) as Count FROM headphone GROUP BY Earpads ORDER BY Count DESC FETCH FIRST 2 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads, COUNT(*) AS Count FROM headphone GROUP BY Earpads ORDER BY Count DESC LIMIT 2",
          "SELECT h.Earpads, COUNT(h.Headphone_ID) AS Total FROM headphone h GROUP BY h.Earpads ORDER BY Total DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) FROM headphone GROUP BY Earpads ORDER BY COUNT(Headphone_ID) DESC LIMIT 2",
          "SELECT `Earpads`, COUNT(`Headphone_ID`) AS `Number` FROM `headphone` GROUP BY `Earpads` ORDER BY `Number` DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT h.Earpads, COUNT(*) AS Num FROM headphone AS h GROUP BY h.Earpads ORDER BY Num DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) AS HeadphoneCount FROM headphone GROUP BY Earpads ORDER BY HeadphoneCount DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) AS TotalHeadphones FROM headphone GROUP BY Earpads ORDER BY TotalHeadphones DESC LIMIT 2",
          "SELECT `Earpads`, COUNT(`Headphone_ID`) FROM `headphone` GROUP BY `Earpads` ORDER BY COUNT(`Headphone_ID`) DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) FROM headphone GROUP BY Earpads HAVING COUNT(Headphone_ID) > 0 ORDER BY COUNT(Headphone_ID) DESC LIMIT 2"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1",
          "SELECT h.Model, h.Class, h.Construction FROM headphone h ORDER BY h.Price ASC LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)",
          "SELECT `Model`, `Class`, `Construction` FROM `headphone` ORDER BY `Price` ASC LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1",
          "SELECT TOP 1 Model, Class, Construction FROM headphone ORDER BY Price",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT Model, Class, Construction FROM (SELECT * FROM headphone ORDER BY Price ASC) WHERE ROWNUM = 1",
          "SELECT Model, Class, Construction FROM headphone AS h ORDER BY h.Price ASC LIMIT 1",
          "SELECT h.Model, h.Class, h.Construction FROM headphone h WHERE h.Price = (SELECT MIN(Price) FROM headphone)"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1",
          "SELECT h.Model, h.Class, h.Construction FROM headphone h ORDER BY h.Price ASC LIMIT 1",
          "SELECT `Model`, `Class`, `Construction` FROM `headphone` ORDER BY `Price` ASC FETCH FIRST ROW ONLY",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)",
          "SELECT TOP 1 Model, Class, Construction FROM headphone ORDER BY Price",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Model, Class, Construction FROM headphone WHERE Price IN (SELECT MIN(Price) FROM headphone)",
          "SELECT Model, Class, Construction FROM headphone AS h WHERE h.Price = (SELECT MIN(Price) FROM headphone AS hp)",
          "SELECT FIRST(Model), FIRST(Class), FIRST(Construction) FROM headphone ORDER BY Price",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC, Headphone_ID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction",
          "SELECT `Construction`, AVG(`Price`) AS Average_Price FROM `headphone` GROUP BY `Construction`",
          "SELECT headphone.Construction, AVG(headphone.Price) AS AvgPrice FROM headphone GROUP BY headphone.Construction",
          "SELECT h.Construction, AVG(h.Price) FROM headphone h GROUP BY h.Construction",
          "SELECT Construction AS Headphone_Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction",
          "SELECT AVG(Price), Construction FROM headphone GROUP BY Construction",
          "SELECT AVG(Price) Average_Price, Construction FROM headphone GROUP BY Construction",
          "SELECT Construction, AVG(Price) AveragePrice FROM headphone GROUP BY Construction",
          "SELECT AVG(headphone.Price) AS Avg_Price, headphone.Construction FROM headphone GROUP BY headphone.Construction",
          "SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction",
          "SELECT headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Construction",
          "SELECT `Construction`, AVG(`Price`) AS `AvgPrice` FROM `headphone` GROUP BY `Construction`",
          "SELECT h.Construction, AVG(h.Price) FROM headphone h GROUP BY h.Construction",
          "SELECT Construction AS Headphone_Construction, AVG(Price) AS Average_Cost FROM headphone GROUP BY Construction",
          "SELECT AVG(Price), Construction FROM headphone GROUP BY Construction",
          "SELECT Construction, AVG(Price) Average_Price FROM headphone GROUP BY Construction",
          "SELECT AVG(Price) AS AveragePrice, Construction FROM headphone GROUP BY Construction",
          "SELECT headphone.Construction, AVG(headphone.Price) FROM headphone GROUP BY headphone.Construction",
          "SELECT AVG(headphone.Price) AS Avg_Price, headphone.Construction FROM headphone GROUP BY headphone.Construction"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' INTERSECT SELECT h.Class FROM headphone h WHERE h.Earpads = 'Comfort Pads'",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls') INTERSECT SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Comfort Pads')",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'",
          "SELECT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' INTERSECT SELECT h.Class FROM headphone h WHERE h.Earpads = 'Comfort Pads'",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT Class FROM headphone WHERE Earpads LIKE 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads LIKE 'Comfort Pads'",
          "SELECT DISTINCT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' INTERSECT SELECT DISTINCT h.Class FROM headphone h WHERE h.Earpads = 'Comfort Pads'",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Comfort Pads'"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' INTERSECT SELECT h.Class FROM headphone h WHERE h.Earpads = 'Comfort Pads'",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2",
          "SELECT Class FROM (SELECT Class, Earpads FROM headphone) AS sub WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM (SELECT Class, Earpads FROM headphone) AS sub WHERE Earpads = 'Comfort Pads'",
          "SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'",
          "SELECT h.Class FROM headphone h JOIN headphone h2 ON h.Class = h2.Class WHERE h.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' AND Class IN (SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads')",
          "SELECT DISTINCT h.Class FROM headphone h WHERE EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Bowls' AND Class = h.Class) AND EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Comfort Pads' AND Class = h.Class)",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' UNION SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Comfort Pads' HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic'",
          "SELECT Earpads FROM headphone GROUP BY Earpads HAVING Construction NOT LIKE 'Plastic'",
          "SELECT DISTINCT h.Earpads FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM headphone WHERE Construction = 'Plastic' AND Earpads = h.Earpads)",
          "SELECT DISTINCT Earpads FROM headphone WHERE Construction NOT IN ('Plastic')",
          "SELECT Earpads FROM headphone WHERE Earpads NOT IN (SELECT Earpads FROM headphone WHERE Construction = 'Plastic')",
          "SELECT DISTINCT Earpads FROM headphone EXCEPT SELECT DISTINCT Earpads FROM headphone WHERE Construction = 'Plastic'",
          "SELECT DISTINCT Earpads FROM headphone h WHERE h.Construction <> 'Plastic'",
          "SELECT DISTINCT h.Earpads FROM headphone h LEFT JOIN headphone p ON h.Earpads = p.Earpads AND p.Construction = 'Plastic' WHERE p.Earpads IS NULL",
          "SELECT DISTINCT Earpads FROM headphone WHERE UPPER(Construction) != 'PLASTIC'",
          "SELECT DISTINCT Earpads FROM headphone WHERE LOWER(Construction) NOT LIKE '%plastic%'"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads FROM headphone WHERE Construction != 'Plastic'",
          "SELECT Earpads FROM headphone WHERE NOT Construction = 'Plastic'",
          "SELECT `Earpads` FROM `headphone` WHERE `Construction` <> 'Plastic'",
          "SELECT headphone.Earpads FROM headphone WHERE headphone.Construction NOT LIKE 'Plastic'",
          "SELECT h.Earpads FROM headphone h WHERE h.Construction != 'Plastic'",
          "SELECT Earpads FROM headphone WHERE Construction NOT IN ('Plastic')",
          "SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic'",
          "SELECT Earpads FROM headphone WHERE UPPER(Construction) != UPPER('Plastic')",
          "SELECT Earpads FROM headphone WHERE LOWER(Construction) <> 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction IS NOT 'Plastic'"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone GROUP BY Headphone_ID)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT `Model` FROM `headphone` WHERE `Price` < (SELECT AVG(`Price`) FROM `headphone`)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS hp)",
          "SELECT headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone WHERE Price IS NOT NULL)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone WHERE Price > 0)",
          "SELECT h.Model FROM headphone AS h WHERE h.Price < (SELECT AVG(hp.Price) FROM headphone AS hp)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone WHERE Headphone_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS h)",
          "SELECT `Model` FROM `headphone` WHERE `Price` < (SELECT AVG(`Price`) FROM `headphone`)",
          "SELECT headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)",
          "SELECT h.Model FROM headphone AS h WHERE h.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone h WHERE h.Headphone_ID = headphone.Headphone_ID)",
          "SELECT Model FROM headphone h1 WHERE h1.Price < (SELECT AVG(h2.Price) FROM headphone h2)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone GROUP BY Headphone_ID)"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store ORDER BY Date_Opened",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened",
          "SELECT `Name` FROM `store` ORDER BY `Date_Opened` ASC",
          "SELECT Name FROM store ORDER BY Date_Opened ASC",
          "SELECT s.Name FROM store s ORDER BY s.Date_Opened",
          "SELECT Name AS StoreName FROM store ORDER BY Date_Opened",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened ASC",
          "SELECT Name FROM store ORDER BY Date_Opened, Store_ID",
          "SELECT Name FROM store ORDER BY Date_Opened ASC, Store_ID ASC",
          "SELECT Name FROM store ORDER BY Date_Opened, Name"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store ORDER BY Date_Opened",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened",
          "SELECT Name FROM store ORDER BY Date_Opened ASC",
          "SELECT s.Name FROM store s ORDER BY s.Date_Opened",
          "SELECT Name FROM store ORDER BY Date_Opened ASCENDING",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened ASC",
          "SELECT `Name` FROM `store` ORDER BY `Date_Opened`",
          "SELECT Name FROM store ORDER BY Date_Opened, Store_ID",
          "SELECT Name FROM store ORDER BY Date_Opened ASC, Store_ID ASC",
          "SELECT Name FROM store ORDER BY Date_Opened ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT s.Name, s.Parking FROM store AS s WHERE s.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood LIKE 'Tarzana'",
          "SELECT `Name`, `Parking` FROM `store` WHERE `Neighborhood` = 'Tarzana'",
          "SELECT store.Name AS StoreName, store.Parking AS ParkingInfo FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT Name AS StoreName, Parking AS ParkingAvailability FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana' AND store.Parking IS NOT NULL",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' ORDER BY Name"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT s.Name, s.Parking FROM store s WHERE s.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood LIKE 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL",
          "SELECT store.Name AS StoreName, store.Parking AS ParkingInfo FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT `Name`, `Parking` FROM `store` WHERE `Neighborhood` = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' ORDER BY Name",
          "SELECT Name, Parking FROM store WHERE LOWER(Neighborhood) = LOWER('Tarzana')",
          "SELECT Name, Parking FROM store WHERE Neighborhood COLLATE NOCASE = 'Tarzana'"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Neighborhood) FROM store",
          "SELECT COUNT(UNIQUE Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store)",
          "SELECT COUNT(DISTINCT store.Neighborhood) FROM store",
          "SELECT COUNT(DISTINCT s.Neighborhood) FROM store s",
          "SELECT COUNT(*) FROM (SELECT Neighborhood FROM store GROUP BY Neighborhood)",
          "SELECT DISTINCT COUNT(Neighborhood) FROM store",
          "SELECT COUNT(DISTINCT `Neighborhood`) FROM `store`",
          "SELECT COUNT(DISTINCT Neighborhood) AS DistinctNeighborhoods FROM store",
          "SELECT COUNT(DISTINCT(Neighborhood)) FROM store"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Neighborhood) FROM store",
          "SELECT COUNT(UNIQUE Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store)",
          "SELECT COUNT(DISTINCT store.Neighborhood) FROM store",
          "SELECT COUNT(DISTINCT s.Neighborhood) FROM store s",
          "SELECT COUNT(*) FROM (SELECT Neighborhood FROM store GROUP BY Neighborhood)",
          "SELECT COUNT(DISTINCT `Neighborhood`) FROM `store`",
          "SELECT COUNT(UNIQUE s.Neighborhood) FROM store s",
          "SELECT DISTINCT COUNT(Neighborhood) FROM store",
          "SELECT COUNT(DISTINCT Neighborhood) AS DistinctNeighborhoods FROM store"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT count(*), Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, count(Store_ID) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID) AS StoreCount, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) AS NumberOfStores FROM store GROUP BY Neighborhood",
          "SELECT COUNT(DISTINCT Store_ID), Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(DISTINCT Store_ID) AS StoresInNeighborhood FROM store GROUP BY Neighborhood",
          "SELECT COUNT(*), Neighborhood FROM store GROUP BY Neighborhood ORDER BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) AS TotalStores FROM store GROUP BY Neighborhood ORDER BY TotalStores DESC",
          "SELECT COUNT(Store_ID) AS StoreCount, Neighborhood FROM store GROUP BY Neighborhood HAVING COUNT(Store_ID) > 0",
          "SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT count(*), Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) AS StoreCount FROM store GROUP BY Neighborhood",
          "SELECT COUNT(*) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID), Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(*), store.Neighborhood FROM store GROUP BY store.Neighborhood",
          "SELECT store.Neighborhood, COUNT(store.Store_ID) FROM store GROUP BY store.Neighborhood",
          "SELECT COUNT(Store_ID) AS TotalStores, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) AS TotalStoresInNeighborhood FROM store GROUP BY Neighborhood"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT S.Name, SUM(ST.Quantity) AS TotalHeadphones FROM store S JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1",
          "SELECT store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store INNER JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1",
          "SELECT Name, TotalHeadphones FROM (SELECT store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID) AS Result ORDER BY TotalHeadphones DESC LIMIT 1",
          "SELECT Name, MAX(TotalHeadphones) FROM (SELECT store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID) AS SubQuery",
          "SELECT TOP 1 store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY TotalHeadphones DESC",
          "SELECT store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store, stock WHERE store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY TotalHeadphones DESC FETCH FIRST 1 ROW ONLY",
          "SELECT store.Name, SUM(stock.Quantity) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1",
          "SELECT Name, TotalHeadphones FROM (SELECT store.Name AS Name, SUM(stock.Quantity) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1) AS MaxStock",
          "SELECT store.Name, COUNT(stock.Headphone_ID) AS TotalHeadphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1",
          "SELECT S.Name, SUM(ST.Quantity) FROM store AS S JOIN stock AS ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY SUM(ST.Quantity) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT s.Name, SUM(st.Quantity) FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name",
          "SELECT Name, SUM(Quantity) FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY Name",
          "SELECT store.Name, SUM(stock.Quantity) AS TotalQuantity FROM store INNER JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name",
          "SELECT Name, TOTAL(Quantity) FROM store, stock WHERE store.Store_ID = stock.Store_ID GROUP BY Name",
          "SELECT s.Name, SUM(st.Quantity) AS TotalStock FROM store AS s INNER JOIN stock AS st ON s.Store_ID = st.Store_ID GROUP BY s.Name",
          "SELECT Name, SUM(Quantity) FROM store INNER JOIN stock USING(Store_ID) GROUP BY Name",
          "SELECT store.Name, SUM(stock.Quantity) FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name",
          "SELECT s.Name, SUM(st.Quantity) FROM store s, stock st WHERE s.Store_ID = st.Store_ID GROUP BY s.Name",
          "SELECT Name, SUM(Quantity) FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock)",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID)",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity IS NOT NULL)",
          "SELECT Name FROM store EXCEPT SELECT Name FROM store JOIN stock ON store.Store_ID = stock.Store_ID",
          "SELECT store.Name FROM store LEFT OUTER JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Store_ID IS NULL",
          "SELECT Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock st WHERE st.Quantity > 0)"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock)",
          "SELECT store.Name FROM store WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Store_ID = store.Store_ID)",
          "SELECT Name FROM store EXCEPT SELECT Name FROM store JOIN stock ON store.Store_ID = stock.Store_ID",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock WHERE Store_ID = s.Store_ID)",
          "SELECT Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT Name FROM store WHERE Store_ID NOT EXISTS (SELECT Store_ID FROM stock WHERE store.Store_ID = stock.Store_ID)",
          "SELECT store.Name FROM store LEFT OUTER JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Store_ID IS NULL",
          "SELECT Name FROM store AS s WHERE NOT EXISTS (SELECT * FROM stock AS st WHERE st.Store_ID = s.Store_ID)"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL",
          "SELECT Model FROM headphone EXCEPT SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID",
          "SELECT headphone.Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Headphone_ID = headphone.Headphone_ID)",
          "SELECT Model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)",
          "SELECT DISTINCT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT DISTINCT Headphone_ID FROM stock)",
          "SELECT h.Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT Model FROM headphone AS h WHERE NOT EXISTS (SELECT * FROM stock AS s WHERE s.Headphone_ID = h.Headphone_ID)",
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT DISTINCT Headphone_ID FROM stock)",
          "SELECT h.Model FROM headphone h LEFT OUTER JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Store_ID IS NULL"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT Model FROM headphone EXCEPT SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID",
          "SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL",
          "SELECT Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE headphone.Headphone_ID = stock.Headphone_ID)",
          "SELECT Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT headphone.Model FROM headphone LEFT OUTER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL",
          "SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)",
          "SELECT Model FROM headphone AS h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock AS s)",
          "SELECT DISTINCT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT DISTINCT Headphone_ID FROM stock)"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT H.Model FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Model ORDER BY SUM(S.Quantity) DESC LIMIT 1",
          "SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT (SELECT Model FROM headphone WHERE Headphone_ID = S.Headphone_ID) AS Model FROM stock S GROUP BY S.Headphone_ID ORDER BY SUM(S.Quantity) DESC LIMIT 1",
          "SELECT Model FROM headphone JOIN (SELECT Headphone_ID, SUM(Quantity) AS TotalQuantity FROM stock GROUP BY Headphone_ID ORDER BY TotalQuantity DESC LIMIT 1) AS MostStock ON headphone.Headphone_ID = MostStock.Headphone_ID",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT TOP 1 Model FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Model ORDER BY SUM(stock.Quantity) DESC",
          "SELECT Model FROM headphone, stock WHERE headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Model ORDER BY SUM(stock.Quantity) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Model FROM (SELECT Model, SUM(Quantity) AS Total FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Model ORDER BY Total DESC) WHERE ROWNUM = 1",
          "SELECT Model FROM headphone h WHERE EXISTS (SELECT 1 FROM stock WHERE Headphone_ID = h.Headphone_ID GROUP BY Headphone_ID HAVING SUM(Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID)))",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) = MAX(SUM(Quantity)))"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1",
          "SELECT h.Model FROM headphone h INNER JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID ORDER BY SUM(s.Quantity) DESC LIMIT 1",
          "SELECT (SELECT Model FROM headphone WHERE Headphone_ID = s.Headphone_ID) AS Model FROM stock s GROUP BY s.Headphone_ID ORDER BY SUM(s.Quantity) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT h.Model FROM headphone h, stock s WHERE h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID HAVING SUM(s.Quantity) = (SELECT MAX(total) FROM (SELECT SUM(Quantity) AS total FROM stock GROUP BY Headphone_ID))",
          "SELECT TOP 1 h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID ORDER BY SUM(s.Quantity) DESC",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID, h.Model ORDER BY SUM(s.Quantity) DESC LIMIT 1",
          "SELECT Model FROM headphone h WHERE EXISTS (SELECT 1 FROM stock s WHERE s.Headphone_ID = h.Headphone_ID GROUP BY s.Headphone_ID ORDER BY SUM(s.Quantity) DESC LIMIT 1)",
          "SELECT h.Model FROM headphone h JOIN (SELECT Headphone_ID, SUM(Quantity) AS TotalQuantity FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1) s ON h.Headphone_ID = s.Headphone_ID"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT sum(Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT total(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock LEFT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock RIGHT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT sum(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock LEFT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock LEFT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(stock.Quantity) FROM stock RIGHT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT sum(Quantity) FROM stock RIGHT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock k ON s.Store_ID = k.Store_ID WHERE k.Headphone_ID IS NULL",
          "SELECT Neighborhood FROM store WHERE NOT EXISTS (SELECT 1 FROM stock WHERE store.Store_ID = stock.Store_ID)",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Store_ID = s.Store_ID)",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT DISTINCT s.Neighborhood FROM store s LEFT OUTER JOIN stock k ON s.Store_ID = k.Store_ID WHERE k.Store_ID IS NULL",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock)",
          "SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock k ON s.Store_ID = k.Store_ID GROUP BY s.Neighborhood HAVING SUM(k.Quantity) IS NULL",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT * FROM stock k WHERE k.Store_ID = s.Store_ID AND k.Quantity > 0)"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL",
          "SELECT Neighborhood FROM store WHERE NOT EXISTS (SELECT 1 FROM stock WHERE store.Store_ID = stock.Store_ID)",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock WHERE stock.Store_ID = s.Store_ID)",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock)",
          "SELECT s.Neighborhood FROM store s LEFT OUTER JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock)",
          "SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT * FROM stock st WHERE st.Store_ID = s.Store_ID)"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Author",
          "SELECT COUNT(author_id) FROM Author",
          "SELECT COUNT(DISTINCT author_id) FROM Author",
          "SELECT COUNT(*) AS total_authors FROM Author",
          "SELECT COUNT(DISTINCT Author.author_id) FROM Author",
          "SELECT COUNT(A.author_id) FROM Author A",
          "SELECT COUNT(*) FROM (SELECT author_id FROM Author) AS total",
          "SELECT COUNT(*) FROM Author WHERE author_id IS NOT NULL",
          "SELECT COUNT(*) FROM Author GROUP BY author_id",
          "SELECT COUNT(author_id) FROM Author WHERE author_id > 0"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(author_id) FROM Author",
          "SELECT COUNT(DISTINCT author_id) FROM Author",
          "SELECT COUNT(A.author_id) FROM Author A",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A",
          "SELECT COUNT(*) FROM (SELECT author_id FROM Author) AS total",
          "SELECT COUNT(*) FROM (SELECT DISTINCT author_id FROM Author) AS unique_authors",
          "SELECT COUNT(author_id) FROM (SELECT author_id FROM Author GROUP BY author_id) AS grouped_authors",
          "SELECT COUNT(DISTINCT author_id) FROM (SELECT author_id FROM Author) AS distinct_authors",
          "SELECT COUNT(*) FROM Author WHERE author_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paper",
          "SELECT COUNT(paper_id) FROM Paper",
          "SELECT COUNT(*) AS total_papers FROM Paper",
          "SELECT COUNT(1) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper",
          "SELECT COUNT(paper_id) AS TotalNumberOfPapers FROM Paper",
          "SELECT COUNT(*) FROM `Paper`",
          "SELECT COUNT(DISTINCT `paper_id`) FROM `Paper`",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(*) FROM Paper GROUP BY 'all'"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paper",
          "SELECT COUNT(paper_id) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper",
          "SELECT COUNT(ALL paper_id) FROM Paper",
          "SELECT COUNT(*) FROM (SELECT DISTINCT paper_id FROM Paper) AS unique_papers",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(*) FROM Paper WHERE paper_id <> ''",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IS NOT NULL AND paper_id <> ''",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(ALL paper_id) FROM Paper WHERE paper_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Affiliation",
          "SELECT COUNT(affiliation_id) FROM Affiliation",
          "SELECT COUNT(*) AS total_affiliations FROM Affiliation",
          "SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation",
          "SELECT COUNT(1) FROM Affiliation",
          "SELECT COUNT(A.affiliation_id) FROM Affiliation A",
          "SELECT COUNT(*) FROM (SELECT * FROM Affiliation) AS total",
          "SELECT COUNT(*) FROM Affiliation WHERE affiliation_id IS NOT NULL",
          "SELECT COUNT(DISTINCT A.affiliation_id) FROM Affiliation A",
          "SELECT COUNT(affiliation_id) FROM Affiliation WHERE affiliation_id > 0"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Affiliation",
          "SELECT COUNT(affiliation_id) FROM Affiliation",
          "SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation",
          "SELECT COUNT(`affiliation_id`) FROM `Affiliation`",
          "SELECT COUNT(DISTINCT `affiliation_id`) FROM `Affiliation`",
          "SELECT COUNT(*) FROM `Affiliation`",
          "SELECT COUNT(ALL affiliation_id) FROM Affiliation",
          "SELECT COUNT(ALL `affiliation_id`) FROM `Affiliation`",
          "SELECT COUNT(1) FROM Affiliation",
          "SELECT COUNT(1) FROM `Affiliation`"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue LIKE 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue LIKE 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) AS NumberOfPapers FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(1) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000 GROUP BY venue, year",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000 GROUP BY venue, year"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 AND Affiliation.name = 'Columbia University'",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 AND Affiliation.name = 'Columbia University'",
          "SELECT COUNT(Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Paper.year = 2009 AND Affiliation.name LIKE 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p LEFT JOIN Author_list al ON p.paper_id = al.paper_id LEFT JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p RIGHT JOIN Author_list al ON p.paper_id = al.paper_id RIGHT JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p CROSS JOIN Author_list al ON p.paper_id = al.paper_id CROSS JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name LIKE '%Columbia University%'"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
          "SELECT COUNT(DISTINCT P.paper_id) FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
          "SELECT COUNT(P.paper_id) FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' AND P.year = 2009",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year = 2009",
          "SELECT COUNT(*) FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE AL.paper_id = P.paper_id AND A.name = 'Columbia University') AND P.year = 2009",
          "SELECT COUNT(*) FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL, Affiliation A WHERE AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University') AND P.year = 2009",
          "SELECT COUNT(P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON A.affiliation_id = AL.affiliation_id WHERE A.name LIKE 'Columbia University' AND P.year = 2009",
          "SELECT COUNT(*) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009 GROUP BY P.paper_id",
          "SELECT COUNT(P.paper_id) FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id LEFT JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year = 2009",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL LEFT JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University') AND year = 2009"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name, address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation",
          "SELECT `name`, `address` FROM `Affiliation`",
          "SELECT a.name, a.address FROM Affiliation AS a",
          "SELECT Affiliation.name AS Name, Affiliation.address AS Address FROM Affiliation",
          "SELECT name AS AffiliationName, address AS AffiliationAddress FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation WHERE affiliation_id IS NOT NULL",
          "SELECT DISTINCT name, address FROM Affiliation",
          "SELECT name, address FROM Affiliation ORDER BY name",
          "SELECT name, address FROM Affiliation GROUP BY name, address"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name, address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation",
          "SELECT `name`, `address` FROM `Affiliation`",
          "SELECT affiliation.name AS Name, affiliation.address AS Address FROM affiliation",
          "SELECT A.name, A.address FROM Affiliation A",
          "SELECT name AS AffiliationName, address AS AffiliationAddress FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation AS Affiliation",
          "SELECT name, address FROM Affiliation WHERE affiliation_id IS NOT NULL",
          "SELECT DISTINCT name, address FROM Affiliation",
          "SELECT name, address FROM Affiliation ORDER BY name"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year FROM Paper ORDER BY year",
          "SELECT `venue`, `year` FROM `Paper` ORDER BY `year` ASC",
          "SELECT P.venue, P.year FROM Paper P ORDER BY P.year ASC",
          "SELECT venue AS Venue, year AS Year FROM Paper ORDER BY Year ASC",
          "SELECT venue, year FROM Paper ORDER BY year ASCENDING",
          "SELECT venue, year FROM Paper ORDER BY year ASC, venue ASC",
          "SELECT Paper.venue, Paper.year FROM Paper ORDER BY Paper.year",
          "SELECT venue, year FROM Paper ORDER BY year, venue",
          "SELECT venue, year FROM Paper ORDER BY 2",
          "SELECT venue, year FROM Paper ORDER BY year ASC, venue DESC"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT venue FROM Paper ORDER BY year",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY year",
          "SELECT venue FROM Paper WHERE venue IS NOT NULL GROUP BY venue ORDER BY year",
          "SELECT DISTINCT p.venue FROM Paper p ORDER BY p.year",
          "SELECT DISTINCT venue FROM Paper ORDER BY year ASC",
          "SELECT venue FROM Paper GROUP BY venue, year ORDER BY year",
          "SELECT DISTINCT venue FROM Paper WHERE venue IS NOT NULL ORDER BY year ASC",
          "SELECT venue FROM Paper WHERE venue <> '' GROUP BY venue ORDER BY year",
          "SELECT DISTINCT p.venue FROM Paper p WHERE p.venue IS NOT NULL ORDER BY p.year ASC",
          "SELECT venue FROM Paper WHERE venue IS NOT NULL AND venue <> '' GROUP BY venue ORDER BY year ASC"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University'",
          "SELECT paper.title, paper.paper_id FROM Paper paper INNER JOIN Author_list author_list ON paper.paper_id = author_list.paper_id INNER JOIN Affiliation affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University'",
          "SELECT title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University'",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Harvard University'",
          "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name LIKE 'Harvard University'",
          "SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT p.title AS Title, p.paper_id AS PaperID FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT p.title, p.paper_id FROM Paper p WHERE EXISTS (SELECT * FROM Author_list al JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE al.paper_id = p.paper_id AND af.name = 'Harvard University')"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University'",
          "SELECT p.paper_id, p.title FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT p.title, p.paper_id FROM Paper AS p JOIN Author_list AS al ON p.paper_id = al.paper_id JOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT DISTINCT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University')",
          "SELECT p.title, p.paper_id FROM Paper p WHERE EXISTS (SELECT * FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Harvard University')",
          "SELECT title, paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University')"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))",
          "SELECT P.title, P.paper_id FROM Paper AS P INNER JOIN Author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown'))",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name LIKE 'Mckeown'",
          "SELECT title, paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown')"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name LIKE 'Mckeown'",
          "SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper p WHERE EXISTS (SELECT * FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND al.paper_id = p.paper_id)",
          "SELECT p.title, p.paper_id FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.name) = 2",
          "SELECT Paper.paper_id, Paper.title FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' OR Affiliation.name = 'Columbia University' GROUP BY Paper.paper_id, Paper.title HAVING COUNT(DISTINCT Affiliation.name) = 2",
          "SELECT DISTINCT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.name) = 2",
          "SELECT p.title, p.paper_id FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Stanford University') AND EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' INTERSECT SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'",
          "SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University') AND p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University')",
          "SELECT p.title, p.paper_id FROM Paper p INNER JOIN (SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' UNION SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University') AS sub ON p.paper_id = sub.paper_id GROUP BY p.paper_id, p.title HAVING COUNT(*) = 2",
          "SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' GROUP BY al.paper_id INTERSECT SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' GROUP BY al.paper_id)",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' OR a.name = 'Columbia University' GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.name) = 2",
          "SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University') INTERSECT SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University')"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford' INTERSECT SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University'",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Stanford') AND EXISTS (SELECT 1 FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Columbia University')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list A, Affiliation AF WHERE P.paper_id = A.paper_id AND A.affiliation_id = AF.affiliation_id AND AF.name IN ('Stanford', 'Columbia University') GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT AF.name) = 2",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford') INTERSECT SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AS J ON P.paper_id = J.paper_id",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A INNER JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford' INTERSECT SELECT A.paper_id FROM Author_list A INNER JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University')",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id WHERE A.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford') AND P.paper_id IN (SELECT A.paper_id FROM Author_list A WHERE A.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Stanford') INTERSECT SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Columbia University')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) INTERSECT SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford' AND P.paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.author_id) = 2",
          "SELECT Paper.paper_id, Paper.title FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen' GROUP BY Paper.paper_id, Paper.title HAVING COUNT(DISTINCT Author.author_id) = 2",
          "SELECT p.title, p.paper_id FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' AND al.paper_id = p.paper_id) AND EXISTS (SELECT 1 FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Rambow, Owen' AND al.paper_id = p.paper_id)",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.author_id) = 2",
          "SELECT DISTINCT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' INTERSECT SELECT DISTINCT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Rambow, Owen'",
          "SELECT p.title, p.paper_id FROM Paper p INNER JOIN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') INTERSECT SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow, Owen')) AS coauthored ON p.paper_id = coauthored.paper_id",
          "SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' GROUP BY al.paper_id INTERSECT SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Rambow, Owen' GROUP BY al.paper_id)",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' OR a.name = 'Rambow, Owen' GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT CASE WHEN a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') THEN a.author_id ELSE NULL END) = 2",
          "SELECT p.title, p.paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' UNION ALL SELECT al.paper_id FROM Author_list al INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT p.paper_id) = 2",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING SUM(CASE WHEN a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') THEN 1 ELSE 0 END) = 2"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.author_id) = 2",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen') GROUP BY paper_id HAVING COUNT(DISTINCT author_id) = 2)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.author_id) = 2",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.author_id) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Mckeown, Kathleen' INTERSECT SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') INTERSECT SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE 2 = (SELECT COUNT(DISTINCT A.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' UNION SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow, Owen' HAVING COUNT(DISTINCT A.author_id) = 2",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name = 'Mckeown, Kathleen') AND EXISTS (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name = 'Rambow, Owen') GROUP BY P.paper_id HAVING COUNT(DISTINCT A.author_id) = 2"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)",
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id AND A.name = 'Mckeown' WHERE AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT * FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id AND A.name = 'Rambow' WHERE AL.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown') AND paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = Paper.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = Paper.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow' AND AL2.paper_id = P.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND A.name = 'Mckeown') AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND A.name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND A.name = 'Mckeown') AND NOT EXISTS (SELECT 1 FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND A.name = 'Rambow' AND AL.paper_id = Paper.paper_id)"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM Author_list AL2 INNER JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow' AND AL2.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Rambow'))",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT * FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND NOT EXISTS (SELECT * FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND author_id = (SELECT author_id FROM Author WHERE name = 'Rambow'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown') AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')",
          "SELECT title, paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen' AND Paper.paper_id = Author_list.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name LIKE 'Mckeown, Kathleen' OR name LIKE 'Rambow, Owen'))",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen') AND AL.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' UNION SELECT author_id FROM Author WHERE name = 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name LIKE 'Mckeown, Kathleen' OR A.name LIKE 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen') AND AL.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY num_papers DESC",
          "SELECT Author.name, COUNT(Paper.paper_id) AS paper_count FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY paper_count DESC",
          "SELECT name, COUNT(paper_id) AS total_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY total_papers DESC",
          "SELECT A.name, COUNT(*) AS papers_written FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY papers_written DESC",
          "SELECT name, COUNT(DISTINCT Paper.paper_id) AS num_of_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Paper.paper_id = Author_list.paper_id GROUP BY Author.author_id ORDER BY num_of_papers DESC",
          "SELECT Author.name, COUNT(Paper.paper_id) FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY COUNT(Paper.paper_id) DESC",
          "SELECT A.name, COUNT(P.paper_id) AS paper_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY paper_count DESC",
          "SELECT name, COUNT(paper_id) FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY COUNT(paper_id) DESC",
          "SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY num_papers DESC",
          "SELECT Author.name, COUNT(Paper.paper_id) AS count_of_papers FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY count_of_papers DESC"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.author_id, A.name, COUNT(*) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id ORDER BY num_papers DESC",
          "SELECT author.name, COUNT(paper_id) AS total_papers FROM Author author INNER JOIN Author_list author_list ON author.author_id = author_list.author_id GROUP BY author.author_id ORDER BY total_papers DESC",
          "SELECT A.name, COUNT(AL.paper_id) AS published_papers FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id ORDER BY published_papers DESC",
          "SELECT author_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY author_id ORDER BY paper_count DESC",
          "SELECT A.name, COUNT(*) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id ORDER BY COUNT(*) DESC",
          "SELECT name, COUNT(paper_id) AS papers_published FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id ORDER BY papers_published DESC",
          "SELECT A.name AS Author_Name, COUNT(AL.paper_id) AS Paper_Count FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id GROUP BY AL.author_id ORDER BY Paper_Count DESC",
          "SELECT A.name, COUNT(AL.paper_id) AS Num_Of_Papers FROM Author_list AL RIGHT JOIN Author A ON AL.author_id = A.author_id GROUP BY A.author_id ORDER BY Num_Of_Papers DESC",
          "SELECT author_id, name, COUNT(paper_id) AS total_published FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id GROUP BY author_id ORDER BY total_published DESC",
          "SELECT A.name, COUNT(*) AS Papers FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id GROUP BY A.author_id ORDER BY Papers DESC"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) ASC",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(Paper.paper_id) ASC",
          "SELECT name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(DISTINCT Paper.paper_id) ASC",
          "SELECT a.name FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) ASC",
          "SELECT Affiliation.name FROM Affiliation LEFT OUTER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id LEFT OUTER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(Paper.paper_id) ASC",
          "SELECT a.name FROM Affiliation a, Author_list al, Paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) ASC",
          "SELECT Affiliation.name FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(Paper.paper_id) ASC",
          "SELECT a.name FROM Affiliation a INNER JOIN (SELECT affiliation_id, paper_id FROM Author_list GROUP BY affiliation_id, paper_id) al ON a.affiliation_id = al.affiliation_id GROUP BY a.affiliation_id ORDER BY COUNT(al.paper_id) ASC",
          "SELECT a.name FROM Affiliation a LEFT JOIN (SELECT affiliation_id, COUNT(paper_id) AS num_papers FROM Author_list GROUP BY affiliation_id) al ON a.affiliation_id = al.affiliation_id ORDER BY al.num_papers ASC",
          "SELECT a.name FROM Affiliation a LEFT JOIN (SELECT affiliation_id, paper_id FROM Author_list GROUP BY affiliation_id, paper_id) al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) ASC"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id ORDER BY COUNT(P.paper_id) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC)",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(Author_list.paper_id) DESC",
          "SELECT name FROM Affiliation JOIN (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY affiliation_id) AS AffiliationPapers ON Affiliation.affiliation_id = AffiliationPapers.affiliation_id ORDER BY AffiliationPapers.paper_count DESC",
          "SELECT Affiliation.name FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id LEFT JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(DISTINCT Paper.paper_id) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(DISTINCT paper_id) DESC)",
          "SELECT A.name FROM Affiliation A, Author_list AL WHERE A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY affiliation_id ORDER BY COUNT(Paper.paper_id) DESC)",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT author.name FROM Author author INNER JOIN Author_list author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(author_list.paper_id) > 50",
          "SELECT A.name FROM Author AS A, Author_list AS AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) > 50",
          "SELECT DISTINCT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(*) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) > 50)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id) > 50",
          "SELECT name FROM (SELECT A.name, COUNT(AL.paper_id) AS NumPapers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id) AS SubQuery WHERE NumPapers > 50",
          "SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL WHERE AL.author_id = A.author_id GROUP BY AL.author_id HAVING COUNT(AL.paper_id) > 50)"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT Author.name FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50)",
          "SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT DISTINCT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) > 50",
          "SELECT name FROM Author WHERE EXISTS (SELECT NULL FROM Author_list WHERE Author.author_id = Author_list.author_id GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id GROUP BY AL.author_id) > 50",
          "SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)",
          "SELECT author.name FROM Author author INNER JOIN Author_list author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(author_list.paper_id) = 1",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = 1)",
          "SELECT DISTINCT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) AS SinglePaper ON A.author_id = SinglePaper.author_id",
          "SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1)",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
          "SELECT DISTINCT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id WHERE A.author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) GROUP BY A.author_id"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)",
          "SELECT Author.name FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) = 1",
          "SELECT DISTINCT Author.name FROM Author, Author_list WHERE Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(DISTINCT Author_list.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1)",
          "SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1)",
          "SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(DISTINCT Author_list.paper_id) = 1",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL WHERE A.author_id = AL.author_id GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = 1)",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1 AND COUNT(DISTINCT paper_id) = 1)"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT P.venue, P.year FROM Paper AS P GROUP BY P.venue, P.year ORDER BY COUNT(P.paper_id) DESC LIMIT 1",
          "SELECT venue, year, COUNT(paper_id) AS publication_count FROM Paper GROUP BY venue, year ORDER BY publication_count DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1",
          "SELECT TOP 1 venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC",
          "SELECT venue, year FROM (SELECT venue, year, COUNT(*) as Total FROM Paper GROUP BY venue, year) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT venue, year, MAX(pub_count) FROM (SELECT venue, year, COUNT(*) AS pub_count FROM Paper GROUP BY venue, year) AS counts",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Paper GROUP BY venue, year) AS counts)",
          "SELECT venue, year FROM Paper WHERE (venue, year) IN (SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT venue, year, COUNT(*) as Count FROM Paper GROUP BY venue, year ORDER BY Count DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT P.venue, P.year FROM Paper AS P GROUP BY P.venue, P.year ORDER BY COUNT(P.paper_id) DESC LIMIT 1",
          "SELECT venue, year, COUNT(paper_id) AS publication_count FROM Paper GROUP BY venue, year ORDER BY publication_count DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1",
          "SELECT TOP 1 venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC",
          "SELECT venue, year FROM (SELECT venue, year, COUNT(*) AS cnt FROM Paper GROUP BY venue, year) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT venue, year, MAX(pub_count) FROM (SELECT venue, year, COUNT(*) AS pub_count FROM Paper GROUP BY venue, year) AS counts_table",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue, year) AS sub_counts)",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT venue, year, COUNT(*) AS TotalPublications FROM Paper GROUP BY venue, year ORDER BY TotalPublications DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT P.venue FROM Paper P GROUP BY P.venue ORDER BY COUNT(P.paper_id) ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1",
          "SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue ORDER BY num_papers ASC LIMIT 1",
          "SELECT venue FROM (SELECT venue, COUNT(*) AS total FROM Paper GROUP BY venue) AS VenueCount ORDER BY total ASC LIMIT 1",
          "SELECT TOP 1 venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC",
          "SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Paper GROUP BY venue)",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(venue) ASC LIMIT 1",
          "SELECT venue, MIN(count) FROM (SELECT venue, COUNT(*) as count FROM Paper GROUP BY venue) AS counts",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT p.venue FROM Paper p GROUP BY p.venue ORDER BY COUNT(p.paper_id) ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(COUNT(paper_id)) FROM Paper GROUP BY venue)",
          "SELECT TOP 1 venue FROM Paper GROUP BY venue ORDER BY COUNT(*)",
          "SELECT venue FROM (SELECT venue, COUNT(*) as num_papers FROM Paper GROUP BY venue) AS VenueCount ORDER BY num_papers ASC LIMIT 1",
          "SELECT venue, COUNT(*) as TotalPublications FROM Paper GROUP BY venue ORDER BY TotalPublications ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT MIN(venue_count.venue) FROM (SELECT venue, COUNT(*) AS count FROM Paper GROUP BY venue) AS venue_count WHERE venue_count.count = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue) AS counts)",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1",
          "SELECT FIRST(venue) FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(cited_paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
          "SELECT COUNT(*) AS TotalCitations FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id IS NOT NULL",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002' AND c.paper_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
          "SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation AS c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id IS NOT NULL",
          "SELECT COUNT(DISTINCT c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id <> ''"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) AS reference_count FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) AS TotalReferences FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE Citation.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id",
          "SELECT COUNT(cited_paper_id) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' AND cited_paper_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) AS ReferenceCount FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) AS TotalCitations FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE Citation.paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' AND cited_paper_id IS NOT NULL",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT C.paper_id, COUNT(*) AS num_citations FROM Citation AS C GROUP BY C.paper_id ORDER BY num_citations DESC LIMIT 1",
          "SELECT paper_id, COUNT(*) FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Citation.paper_id, COUNT(Citation.cited_paper_id) AS TotalCitations FROM Citation GROUP BY Citation.paper_id ORDER BY TotalCitations DESC LIMIT 1",
          "SELECT paper_id, COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id ORDER BY citations DESC LIMIT 1",
          "SELECT C.paper_id, COUNT(C.cited_paper_id) AS citation_count FROM Citation C GROUP BY C.paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT paper_id, COUNT(cited_paper_id) FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1",
          "SELECT C.paper_id, COUNT(*) AS citation_number FROM Citation C GROUP BY C.paper_id ORDER BY citation_number DESC LIMIT 1",
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT C.paper_id, COUNT(*) AS num_citations FROM Citation AS C GROUP BY C.paper_id ORDER BY num_citations DESC LIMIT 1",
          "SELECT paper_id, COUNT(*) FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.paper_id, COUNT(C.cited_paper_id) AS TotalCitations FROM Citation C GROUP BY C.paper_id ORDER BY TotalCitations DESC LIMIT 1",
          "SELECT paper_id, COUNT(cited_paper_id) FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1",
          "SELECT Citation.paper_id, COUNT(Citation.cited_paper_id) AS citations FROM Citation GROUP BY Citation.paper_id ORDER BY citations DESC LIMIT 1",
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT top 1 paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC",
          "SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1)",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(cited_paper_id) AS cnt FROM Citation GROUP BY paper_id) T))",
          "SELECT (SELECT title FROM Paper WHERE paper_id = C.paper_id) AS Title FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT TOP 1 paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC)",
          "SELECT P.title FROM Paper P INNER JOIN (SELECT paper_id, COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id ORDER BY citations DESC LIMIT 1) AS C ON P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(cited_paper_id) AS count FROM Citation GROUP BY paper_id) AS Counts)"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT Paper.title FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Paper.paper_id ORDER BY COUNT(Citation.cited_paper_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT (SELECT title FROM Paper WHERE paper_id = Citation.paper_id) AS Title FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1",
          "SELECT title FROM (SELECT paper_id, COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id ORDER BY citations DESC LIMIT 1) AS MostCited JOIN Paper ON MostCited.paper_id = Paper.paper_id",
          "SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citations) FROM (SELECT COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id) AS Counts)",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = MAX((SELECT COUNT(cited_paper_id) FROM Citation GROUP BY paper_id))) LIMIT 1",
          "SELECT TOP 1 title FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Paper.paper_id, Paper.title ORDER BY COUNT(Citation.cited_paper_id) DESC",
          "SELECT title FROM Paper WHERE paper_id = (SELECT TOP 1 paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC)"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS num_citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY num_citations DESC LIMIT 10",
          "SELECT Paper.title, COUNT(*) AS TotalCitations FROM Citation INNER JOIN Paper ON Citation.cited_paper_id = Paper.paper_id GROUP BY Paper.paper_id ORDER BY TotalCitations DESC LIMIT 10",
          "SELECT title, (SELECT COUNT(*) FROM Citation WHERE Citation.cited_paper_id = Paper.paper_id) AS citations FROM Paper ORDER BY citations DESC LIMIT 10",
          "SELECT P.title, (COUNT(C.cited_paper_id)) AS citation_count FROM Citation C RIGHT JOIN Paper P ON C.cited_paper_id = P.paper_id GROUP BY P.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citations FROM Paper P, Citation C WHERE P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citations DESC LIMIT 10",
          "SELECT title, COUNT(*) AS citation_count FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS citation_count FROM Paper LEFT OUTER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY citation_count DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY citations DESC LIMIT 10",
          "SELECT Paper.title, COUNT(*) AS NumCitations FROM Citation INNER JOIN Paper ON Citation.cited_paper_id = Paper.paper_id GROUP BY Paper.paper_id ORDER BY NumCitations DESC LIMIT 10",
          "SELECT title, (SELECT COUNT(*) FROM Citation WHERE Citation.cited_paper_id = Paper.paper_id) AS citation_count FROM Paper ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) FROM Paper P, Citation C WHERE P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 10",
          "SELECT P.title, COUNT(*) AS TotalCitations FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY TotalCitations DESC LIMIT 10",
          "SELECT title, COUNT(Citation.cited_paper_id) AS citation_count FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citations FROM Paper P INNER JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citations DESC LIMIT 10",
          "SELECT title, COUNT(*) AS citation_count FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY citation_count DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(cited_paper_id) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id WHERE Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT Author_list.paper_id FROM Author_list INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT cited_paper_id FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen') AS SubQuery",
          "SELECT COUNT(*) FROM Citation WHERE EXISTS (SELECT 1 FROM Author_list WHERE Author_list.paper_id = Citation.paper_id AND Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(*) FROM Citation c WHERE c.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(Citation.cited_paper_id) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id WHERE Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT Citation.cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))) AS CitedPapers",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation WHERE EXISTS (SELECT 1 FROM Author_list WHERE Author_list.paper_id = Citation.paper_id AND Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(*) FROM Citation c WHERE c.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT c.cited_paper_id) FROM Citation c, Author_list al, Author a WHERE c.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(cited_paper_id) FROM Citation c INNER JOIN Author_list al ON c.paper_id = al.paper_id INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation c WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' AND al.paper_id = c.paper_id)"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT Citation.cited_paper_id) FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE EXISTS (SELECT 1 FROM Author_list WHERE Author_list.paper_id = Citation.paper_id AND Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(*) FROM (SELECT cited_paper_id FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id WHERE Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AS cited_papers",
          "SELECT COUNT(DISTINCT c.cited_paper_id) FROM Citation c, Author_list al, Author a WHERE c.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation c INNER JOIN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AS al ON c.paper_id = al.paper_id",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(*) AS citation_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT Author.name, COUNT(Citation.cited_paper_id) AS NumCitations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY NumCitations DESC LIMIT 1",
          "SELECT name, COUNT(cited_paper_id) AS total_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY total_citations DESC LIMIT 1",
          "SELECT A.name, COUNT(C.cited_paper_id) AS citations FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citations DESC LIMIT 1",
          "SELECT Author.name, COUNT(*) AS citation_count FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT A.name, COUNT(C.cited_paper_id) AS TotalCitations FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY TotalCitations DESC LIMIT 1",
          "SELECT TOP 1 Author.name, COUNT(Citation.cited_paper_id) AS CitationCount FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY CitationCount DESC",
          "SELECT A.name, COUNT(*) AS citation_count FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT first_name, COUNT(cited_paper_id) AS citation_total FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY citation_total DESC LIMIT 1",
          "SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(*) AS citation_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT Author.name, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY num_citations DESC LIMIT 1",
          "SELECT name, COUNT(cited_paper_id) AS total_citations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY total_citations DESC LIMIT 1",
          "SELECT A.name, COUNT(C.cited_paper_id) AS citations FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citations DESC LIMIT 1",
          "SELECT Author.name, COUNT(*) AS citation_count FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY citation_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT A.name, COUNT(C.cited_paper_id) FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1",
          "SELECT TOP 1 Author.name, COUNT(Citation.cited_paper_id) AS TotalCitations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY TotalCitations DESC",
          "SELECT A.name, COUNT(*) AS citation_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT first_name || ' ' || last_name AS full_name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT A.name, COUNT(DISTINCT C.cited_paper_id) AS citation_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT P.venue, P.year FROM Paper AS P INNER JOIN Author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT venue, year FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT DISTINCT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name LIKE 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name LIKE 'Mckeown, Kathleen'))"
        ]
      ]
    },
    {
      "id": 1018,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT Paper.venue, Paper.year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT DISTINCT p.venue, p.year FROM Paper p, Author_list al, Author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
          "SELECT p.venue, p.year FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' GROUP BY p.venue, p.year",
          "SELECT venue, year FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown, Kathleen')",
          "SELECT p.venue, p.year FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')",
          "SELECT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')"
        ]
      ]
    },
    {
      "id": 1019,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT DISTINCT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University'",
          "SELECT DISTINCT P.venue, P.year FROM Paper AS P, Author_list AS AL, Affiliation AS A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'",
          "SELECT DISTINCT venue, year FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT DISTINCT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')",
          "SELECT DISTINCT venue, year FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University'",
          "SELECT DISTINCT venue, year FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND AL.paper_id = P.paper_id)",
          "SELECT DISTINCT venue, year FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AS AL ON P.paper_id = AL.paper_id",
          "SELECT DISTINCT venue, year FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University')"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.venue, P.year FROM Paper AS P INNER JOIN Author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation AS A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
          "SELECT DISTINCT venue, year FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT venue, year FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL, Affiliation A WHERE AL.paper_id = P.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University')",
          "SELECT DISTINCT P.venue, P.year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT DISTINCT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University'",
          "SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name LIKE 'Columbia University'",
          "SELECT DISTINCT P.venue, P.year FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id LEFT JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(P.paper_id) DESC",
          "SELECT author.name FROM Author author INNER JOIN Author_list author_list ON author.author_id = author_list.author_id INNER JOIN Paper paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1) AS Temp ON A.author_id = Temp.author_id",
          "SELECT name FROM (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostProlific JOIN Author ON MostProlific.author_id = Author.author_id",
          "SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.author_id HAVING COUNT(P.paper_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE year = 2009 GROUP BY author_id) AS SubQuery)",
          "SELECT name FROM Author WHERE author_id = (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY author_id ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1) AS Temp ON A.author_id = Temp.author_id",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY author_id) AS Sub))",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)",
          "SELECT name FROM Author WHERE author_id = (SELECT AL.author_id FROM Author_list AL LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT NULL FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 AND AL.author_id = A.author_id GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM (SELECT author_id, COUNT(*) AS num_papers FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY author_id ORDER BY num_papers DESC LIMIT 1) AS T)"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 3",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT a.name FROM Affiliation a, Author_list al, Paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND p.year = 2009 GROUP BY a.name ORDER BY COUNT(p.paper_id) DESC LIMIT 3",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id AND Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(DISTINCT Paper.paper_id) DESC LIMIT 3",
          "SELECT a.name FROM Affiliation a WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE al.affiliation_id = a.affiliation_id AND p.year = 2009) GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT TOP 3 a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM (SELECT Affiliation.name, COUNT(*) AS cnt FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name) AS subquery ORDER BY cnt DESC LIMIT 3",
          "SELECT Affiliation.name, COUNT(Paper.paper_id) AS PaperCount FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY PaperCount DESC LIMIT 3",
          "SELECT a.name FROM Affiliation a INNER JOIN (SELECT al.affiliation_id FROM Author_list al INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) AS TopAffiliations ON a.affiliation_id = TopAffiliations.affiliation_id"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 3",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT a.name FROM Affiliation a, Author_list al, Paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND p.year = 2009 GROUP BY a.name ORDER BY COUNT(p.paper_id) DESC LIMIT 3",
          "SELECT Affiliation.name, COUNT(*) AS PaperCount FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY PaperCount DESC LIMIT 3",
          "SELECT TOP 3 Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE year = 2009) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT a.name, COUNT(p.paper_id) AS TotalPapers FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY TotalPapers DESC LIMIT 3",
          "SELECT Affiliation.name FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id AND Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 3",
          "SELECT a.name FROM Affiliation a INNER JOIN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University') AND year <= 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND al.paper_id = p.paper_id) AND p.year <= 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al, Affiliation a WHERE al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University') AND year <= 2009",
          "SELECT COUNT(*) FROM (SELECT Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009) AS ColumbiaPapers",
          "SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(*) FROM Paper WHERE EXISTS (SELECT * FROM Author_list WHERE Author_list.paper_id = Paper.paper_id AND Author_list.affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name LIKE 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') AND Paper.year <= 2009",
          "SELECT COUNT(Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(*) FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(*) FROM Paper p WHERE p.year <= 2009 AND EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')",
          "SELECT COUNT(*) FROM Paper p WHERE p.year <= 2009 AND p.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University')"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University') AND year >= 2000 AND year <= 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name LIKE 'Stanford University') AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND al.paper_id = p.paper_id) AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(UNIQUE Paper.paper_id) FROM Paper LEFT JOIN Author_list ON Paper.paper_id = Author_list.paper_id LEFT JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper WHERE EXISTS (SELECT * FROM Author_list WHERE Author_list.paper_id = Paper.paper_id AND Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper p WHERE p.year BETWEEN 2000 AND 2009 AND p.paper_id IN (SELECT al.paper_id FROM Author_list al INNER JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University')"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University') AND year >= 2000 AND year <= 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND al.paper_id = p.paper_id) AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT al.paper_id FROM Author_list al, Affiliation a WHERE al.affiliation_id = a.affiliation_id AND a.name = 'Stanford University') AND year BETWEEN 2000 AND 2009",
          "SELECT COUNT(UNIQUE Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id GROUP BY P.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT Paper.title FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id ORDER BY COUNT(Author_list.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.title FROM Paper AS P JOIN Author_list AS A ON P.paper_id = A.paper_id GROUP BY P.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(author_id) AS Cnt FROM Author_list GROUP BY paper_id) AS Sub)",
          "SELECT (SELECT title FROM Paper WHERE paper_id = A.paper_id) AS Title FROM Author_list A GROUP BY A.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id) AS counts)) LIMIT 1",
          "SELECT TOP 1 P.title FROM Paper P, Author_list A WHERE P.paper_id = A.paper_id GROUP BY P.paper_id ORDER BY COUNT(A.author_id) DESC",
          "SELECT title FROM (SELECT Paper.title, COUNT(Author_list.author_id) AS num_authors FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id) AS Result ORDER BY num_authors DESC LIMIT 1",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT A.paper_id FROM Author_list A GROUP BY A.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id GROUP BY P.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT Paper.title FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id ORDER BY COUNT(Author_list.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper AS P JOIN Author_list AS A ON P.paper_id = A.paper_id GROUP BY P.paper_id ORDER BY COUNT(DISTINCT A.author_id) DESC LIMIT 1",
          "SELECT (SELECT title FROM Paper WHERE paper_id = A.paper_id) AS Title FROM Author_list A GROUP BY A.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1",
          "SELECT title FROM (SELECT paper_id, COUNT(author_id) AS num_authors FROM Author_list GROUP BY paper_id) AS Counts JOIN Paper ON Counts.paper_id = Paper.paper_id ORDER BY Counts.num_authors DESC LIMIT 1",
          "SELECT TOP 1 title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id, Paper.title ORDER BY COUNT(Author_list.author_id) DESC",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id) AS Counts))",
          "SELECT Paper.title FROM Paper, Author_list WHERE Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id HAVING COUNT(Author_list.author_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(author_id) AS Cnt FROM Author_list GROUP BY paper_id) AS SubQuery)"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen') AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author_list A, Author B WHERE A.author_id = B.author_id AND B.name != 'Mckeown, Kathleen' AND A.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(DISTINCT AL.author_id) - 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL2.author_id) FROM Author_list AL1 JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND AL2.author_id != AL1.author_id",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A ON AL2.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen') AND AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen') AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 INNER JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') AND A.name <> 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2, Author A2 WHERE AL2.author_id = A2.author_id AND A2.name = 'Mckeown, Kathleen') AND A.name != 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL LEFT JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name <> 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name NOT LIKE 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') AND A.name NOT IN ('Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') AND NOT A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') AND A.name <> 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A2.name, COUNT(*) AS coauthored_papers FROM Author A1 JOIN Author_list AL1 ON A1.author_id = AL1.author_id JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A1.name = 'Mckeown, Kathleen' AND A2.name != 'Mckeown, Kathleen' GROUP BY A2.author_id ORDER BY coauthored_papers DESC LIMIT 1",
          "SELECT author.name, COUNT(*) AS num_papers FROM Author author INNER JOIN Author_list auth_list ON author.author_id = auth_list.author_id INNER JOIN Paper paper ON auth_list.paper_id = paper.paper_id WHERE paper.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author.name != 'Mckeown, Kathleen' GROUP BY author.author_id ORDER BY num_papers DESC LIMIT 1",
          "SELECT A.name, COUNT(*) FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen' GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 A.name, COUNT(P.paper_id) AS TotalPapers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name <> 'Mckeown, Kathleen' GROUP BY A.name ORDER BY TotalPapers DESC",
          "SELECT other_authors.name, COUNT(*) AS papers_with_mckeown FROM Author_list AS mckeown_list JOIN Author_list AS other_authors_list ON mckeown_list.paper_id = other_authors_list.paper_id JOIN Author AS other_authors ON other_authors.author_id = other_authors_list.author_id WHERE mckeown_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND other_authors.name <> 'Mckeown, Kathleen' GROUP BY other_authors.author_id ORDER BY papers_with_mckeown DESC LIMIT 1",
          "SELECT other.name, COUNT(*) AS num_coauthored FROM Author_list AS list1 JOIN Author_list AS list2 ON list1.paper_id = list2.paper_id JOIN Author AS other ON list2.author_id = other.author_id WHERE list1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND other.name != 'Mckeown, Kathleen' GROUP BY other.author_id ORDER BY num_coauthored DESC LIMIT 1",
          "SELECT A.name, COUNT(DISTINCT P.paper_id) AS NumPapers FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND P.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.author_id ORDER BY NumPapers DESC LIMIT 1",
          "SELECT first_author.name, COUNT(*) AS count_of_papers FROM Author_list AS first_list JOIN Author_list AS second_list ON first_list.paper_id = second_list.paper_id JOIN Author AS first_author ON first_list.author_id = first_author.author_id WHERE second_list.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND first_author.name != 'Mckeown, Kathleen' GROUP BY first_author.author_id ORDER BY count_of_papers DESC LIMIT 1",
          "SELECT A.name, COUNT(*) AS coauthored_count FROM Author A, Author_list AL1, Author_list AL2 WHERE A.author_id = AL2.author_id AND AL1.paper_id = AL2.paper_id AND AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND A.name != 'Mckeown, Kathleen' GROUP BY A.author_id ORDER BY coauthored_count DESC LIMIT 1",
          "SELECT A.name, COUNT(*) AS total_coauthored FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name <> 'Mckeown, Kathleen' GROUP BY A.author_id ORDER BY total_coauthored DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A2.name FROM Author A1 JOIN Author_list AL1 ON A1.author_id = AL1.author_id JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A1.name = 'Mckeown, Kathleen' AND A2.name != 'Mckeown, Kathleen' GROUP BY A2.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Author_list.paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen') AND Author.name != 'Mckeown, Kathleen' GROUP BY Author.name ORDER BY COUNT(Author_list.paper_id) DESC LIMIT 1",
          "SELECT TOP 1 A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen') AND A.name <> 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(*) DESC",
          "SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id AND AL.paper_id IN (SELECT AL.paper_id FROM Author_list AL, Author A WHERE AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen') AND A.name <> 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name FROM (SELECT A2.name, COUNT(*) AS coauthored_papers FROM Author A1 INNER JOIN Author_list AL1 ON A1.author_id = AL1.author_id INNER JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id INNER JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A1.name = 'Mckeown, Kathleen' AND A2.name != 'Mckeown, Kathleen' GROUP BY A2.name) AS SubQuery ORDER BY coauthored_papers DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL WHERE AL.paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC LIMIT 1",
          "SELECT first_name FROM (SELECT A.name AS first_name, COUNT(*) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AS Sub ON AL.paper_id = Sub.paper_id WHERE A.name != 'Mckeown, Kathleen' GROUP BY A.name) AS Result ORDER BY num_papers DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT AL.paper_id FROM Author_list AL JOIN Author_list AL2 ON AL.paper_id = AL2.paper_id WHERE AL.author_id = A.author_id AND AL2.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND A.name != 'Mckeown, Kathleen') GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.name, COUNT(*) AS Total FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.paper_id IN (SELECT P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen') AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY Total DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title REGEXP 'translation'",
          "SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'",
          "SELECT p.paper_id FROM Paper p WHERE p.title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE INSTR(title, 'translation') > 0",
          "SELECT paper_id FROM Paper WHERE title CONTAINS 'translation'",
          "SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'",
          "SELECT DISTINCT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%' COLLATE utf8_general_ci",
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%' ESCAPE '!'"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT `paper_id` FROM `Paper` WHERE `title` LIKE '%translation%'",
          "SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'",
          "SELECT p.paper_id FROM Paper p WHERE p.title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title ILIKE '%translation%'",
          "SELECT DISTINCT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE LOWER(title) LIKE LOWER('%translation%')",
          "SELECT paper_id FROM Paper WHERE title COLLATE UTF8_GENERAL_CI LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title REGEXP '.*translation.*'",
          "SELECT paper_id FROM Paper WHERE INSTR(title, 'translation') > 0"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
          "SELECT Paper.paper_id, Paper.title FROM Paper LEFT OUTER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id WHERE Citation.cited_paper_id IS NULL",
          "SELECT p.paper_id, p.title FROM Paper AS p WHERE NOT EXISTS (SELECT 1 FROM Citation AS c WHERE c.cited_paper_id = p.paper_id)",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation)",
          "SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c)",
          "SELECT Paper.paper_id, Paper.title FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id WHERE Citation.cited_paper_id IS NULL",
          "SELECT p.paper_id, p.title FROM Paper p LEFT OUTER JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper p WHERE NOT EXISTS (SELECT * FROM Citation c WHERE c.cited_paper_id = p.paper_id)",
          "SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c)"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.paper_id WHERE C.paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT paper_id FROM Citation)",
          "SELECT paper_id, title FROM Paper WHERE NOT EXISTS (SELECT 1 FROM Citation WHERE Citation.paper_id = Paper.paper_id)",
          "SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.paper_id FROM Citation C)",
          "SELECT paper_id, title FROM Paper EXCEPT SELECT paper_id, title FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id",
          "SELECT P.paper_id, P.title FROM Paper P LEFT OUTER JOIN Citation C ON P.paper_id = C.paper_id WHERE C.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT paper_id FROM Citation)",
          "SELECT P.paper_id, P.title FROM Paper P WHERE NOT EXISTS (SELECT NULL FROM Citation C WHERE C.paper_id = P.paper_id)",
          "SELECT paper_id, title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.paper_id FROM Citation C)",
          "SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.paper_id FROM Citation C WHERE C.paper_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.address LIKE '%China%' GROUP BY a.affiliation_id ORDER BY COUNT(p.paper_id) DESC LIMIT 1",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.affiliation_id ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1",
          "SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1)",
          "SELECT TOP 1 Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM Affiliation WHERE address LIKE '%China%' ORDER BY (SELECT COUNT(*) FROM Author_list WHERE Author_list.affiliation_id = Affiliation.affiliation_id) DESC LIMIT 1",
          "SELECT Affiliation.name FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id AND Affiliation.address LIKE '%China%' GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT a.name FROM Affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id = (SELECT al.affiliation_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id GROUP BY al.affiliation_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Affiliation.name FROM Affiliation WHERE Affiliation.address LIKE '%China%' AND Affiliation.affiliation_id = (SELECT Author_list.affiliation_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author_list.affiliation_id ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1)",
          "SELECT name FROM (SELECT Affiliation.name, COUNT(Paper.paper_id) AS NumPapers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name) AS Result ORDER BY NumPapers DESC LIMIT 1",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name HAVING COUNT(Paper.paper_id) = (SELECT MAX(CountPapers) FROM (SELECT COUNT(Paper.paper_id) AS CountPapers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name) AS Counts)"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.address LIKE '%China%' GROUP BY a.name ORDER BY COUNT(p.paper_id) DESC LIMIT 1",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1) AND address LIKE '%China%'",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1",
          "SELECT TOP 1 a.name FROM Affiliation a, Author_list al, Paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND a.address LIKE '%China%' GROUP BY a.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id HAVING COUNT(paper_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(paper_id) AS cnt FROM Author_list GROUP BY affiliation_id) AS counts))",
          "SELECT a.name FROM Affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id = (SELECT al.affiliation_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id GROUP BY al.affiliation_id ORDER BY COUNT(p.paper_id) DESC LIMIT 1)",
          "SELECT name FROM (SELECT a.name, COUNT(p.paper_id) AS total_papers FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE a.address LIKE '%China%' GROUP BY a.name) AS subquery ORDER BY total_papers DESC LIMIT 1",
          "SELECT name FROM Affiliation WHERE address LIKE '%China%' AND affiliation_id = (SELECT affiliation_id FROM (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY affiliation_id) AS counts ORDER BY paper_count DESC LIMIT 1)",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name HAVING COUNT(Paper.paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name) AS sub)",
          "SELECT a.name FROM Affiliation a WHERE a.address LIKE '%China%' AND EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE al.affiliation_id = a.affiliation_id GROUP BY al.affiliation_id HAVING COUNT(p.paper_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(p.paper_id) AS cnt FROM Author_list GROUP BY affiliation_id) AS max_papers))"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT year, venue, COUNT(*) FROM Paper GROUP BY year, venue",
          "SELECT year, venue, COUNT(paper_id) AS num_papers FROM Paper GROUP BY year, venue",
          "SELECT P.year, P.venue, COUNT(*) AS total_papers FROM Paper AS P GROUP BY P.year, P.venue",
          "SELECT year, venue, COUNT(paper_id) FROM Paper GROUP BY venue, year",
          "SELECT P.year, P.venue, COUNT(P.paper_id) FROM Paper P GROUP BY P.venue, P.year",
          "SELECT year, venue, COUNT(*) FROM Paper WHERE venue IS NOT NULL GROUP BY year, venue",
          "SELECT year, venue, COUNT(*) AS count_of_papers FROM Paper WHERE venue <> '' GROUP BY year, venue",
          "SELECT year, venue, COUNT(paper_id) FROM Paper WHERE venue IS NOT NULL AND year IS NOT NULL GROUP BY year, venue",
          "SELECT P.year, P.venue, COUNT(P.paper_id) FROM Paper P WHERE P.venue IS NOT NULL GROUP BY P.year, P.venue",
          "SELECT year, venue, COUNT(*) FROM Paper WHERE venue <> '' GROUP BY venue, year"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year",
          "SELECT venue, year, COUNT(paper_id) AS total_papers FROM Paper GROUP BY venue, year",
          "SELECT P.venue, P.year, COUNT(P.paper_id) FROM Paper AS P GROUP BY P.venue, P.year",
          "SELECT venue, year, COUNT(*) AS count_of_papers FROM Paper GROUP BY venue, year ORDER BY venue, year",
          "SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC",
          "SELECT `venue`, `year`, COUNT(`paper_id`) FROM `Paper` GROUP BY `venue`, `year`",
          "SELECT venue, year, COUNT(*) AS NumberOfPapers FROM Paper GROUP BY venue, year HAVING COUNT(*) > 0",
          "SELECT venue, year, COUNT(paper_id) AS PaperCount FROM Paper WHERE venue IS NOT NULL AND year IS NOT NULL GROUP BY venue, year",
          "SELECT venue, year, COUNT(*) FROM Paper WHERE venue IS NOT NULL GROUP BY venue, year ORDER BY year",
          "SELECT venue, year, COUNT(*) AS TotalPapers FROM Paper WHERE year IS NOT NULL GROUP BY venue, year ORDER BY venue"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.affiliation_id, COUNT(P.paper_id) AS TotalPapers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation_id, COUNT(DISTINCT paper_id) AS NumberOfPapers FROM Author_list GROUP BY affiliation_id",
          "SELECT Affiliation.affiliation_id, COUNT(Paper.paper_id) AS PaperCount FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id",
          "SELECT affiliation_id, COUNT(*) AS Total_Papers FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY affiliation_id",
          "SELECT AL.affiliation_id, COUNT(*) AS TotalPapers FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id GROUP BY AL.affiliation_id",
          "SELECT affiliation_id, COUNT(paper_id) FROM Author_list GROUP BY affiliation_id",
          "SELECT A.affiliation_id, COUNT(DISTINCT P.paper_id) AS PaperCount FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation_id, COUNT(paper_id) AS TotalPapers FROM Author_list INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY affiliation_id",
          "SELECT A.name, COUNT(P.paper_id) AS TotalPapers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.name",
          "SELECT affiliation_id, COUNT(paper_id) AS PaperCount FROM Author_list, Paper WHERE Author_list.paper_id = Paper.paper_id GROUP BY affiliation_id"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(*) FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation.name, COUNT(paper.paper_id) FROM Affiliation affiliation INNER JOIN Author_list author_list ON affiliation.affiliation_id = author_list.affiliation_id INNER JOIN Paper paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
          "SELECT A.name AS AffiliationName, COUNT(DISTINCT P.paper_id) AS NumberOfPapers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT name, COUNT(paper_id) FROM Affiliation JOIN Author_list USING (affiliation_id) JOIN Paper USING (paper_id) GROUP BY affiliation_id",
          "SELECT A.name, COUNT(P.paper_id) FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) FROM Affiliation affiliation, Author_list author_list, Paper paper WHERE affiliation.affiliation_id = author_list.affiliation_id AND author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
          "SELECT A.name, COUNT(*) AS TotalPapers FROM Affiliation A INNER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id INNER JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT name, COUNT(paper_id) AS PublishedPapers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id",
          "SELECT A.name, COUNT(P.paper_id) FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation.name, COUNT(paper.paper_id) FROM Affiliation affiliation LEFT JOIN Author_list author_list ON affiliation.affiliation_id = author_list.affiliation_id LEFT JOIN Paper paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P WHERE (SELECT COUNT(*) FROM Citation C WHERE C.paper_id = P.paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)",
          "SELECT Paper.title FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Paper.paper_id HAVING COUNT(Citation.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE (SELECT COUNT(cited_paper_id) FROM Citation WHERE Citation.paper_id = Paper.paper_id) > 50",
          "SELECT P.title FROM Paper P INNER JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)",
          "SELECT title FROM (SELECT Paper.title, COUNT(Citation.cited_paper_id) AS Citations FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Paper.paper_id) AS CitationCount WHERE Citations > 50",
          "SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE C.paper_id = P.paper_id GROUP BY C.paper_id HAVING COUNT(*) > 50)",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)",
          "SELECT P.title FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P WHERE (SELECT COUNT(*) FROM Citation C WHERE C.paper_id = P.paper_id) > 50",
          "SELECT title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE C.paper_id = P.paper_id GROUP BY C.paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C ON P.paper_id = C.paper_id",
          "SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation C GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) > 50)",
          "SELECT P.title FROM (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) AS Subquery JOIN Paper P ON Subquery.paper_id = P.paper_id",
          "SELECT title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id, P.title HAVING COUNT(C.cited_paper_id) > 50"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT Author_list.author_id FROM Author_list JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) AS HighlyCited ON Author_list.paper_id = HighlyCited.paper_id)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C ON AL.paper_id = C.paper_id WHERE C.paper_id IS NULL",
          "SELECT COUNT(author_id) FROM Author WHERE NOT EXISTS (SELECT NULL FROM Author_list WHERE Author.author_id = Author_list.author_id AND paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C ON AL.paper_id = C.paper_id)",
          "SELECT COUNT(*) FROM (SELECT author_id FROM Author EXCEPT SELECT AL.author_id FROM Author_list AL JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C ON AL.paper_id = C.paper_id) AS Result",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) > 50 AND AL.author_id = A.author_id)",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C WHERE AL.paper_id = C.paper_id)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) > 50)",
          "SELECT COUNT(author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL WHERE EXISTS (SELECT paper_id FROM Citation WHERE AL.paper_id = paper_id GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT Author_list.author_id FROM Author_list JOIN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) AS HighCitation ON Author_list.paper_id = HighCitation.cited_paper_id)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) C ON AL.paper_id = C.cited_paper_id WHERE C.cited_paper_id IS NULL",
          "SELECT COUNT(author_id) FROM Author WHERE NOT EXISTS (SELECT 1 FROM Author_list WHERE Author.author_id = Author_list.author_id AND paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Citation ON Author_list.paper_id = Citation.paper_id GROUP BY Citation.cited_paper_id HAVING COUNT(Citation.cited_paper_id) > 50)",
          "SELECT COUNT(*) FROM (SELECT author_id FROM Author EXCEPT SELECT Author_list.author_id FROM Author_list INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) AS PopularPapers ON Author_list.paper_id = PopularPapers.paper_id) AS Result",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY C.cited_paper_id HAVING COUNT(C.cited_paper_id) > 50 AND AL.author_id = A.author_id)",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) PopPapers ON AL.paper_id = PopPapers.paper_id)",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Citation C WHERE AL.paper_id = C.paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009",
          "SELECT DISTINCT Author.name FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue IN ('NAACL', 'ACL') AND Paper.year = 2009",
          "SELECT DISTINCT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009))",
          "SELECT name FROM Author WHERE author_id IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue IN ('NAACL', 'ACL') AND Paper.year = 2009)",
          "SELECT DISTINCT a.name FROM Author a, Author_list al, Paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id AND p.venue IN ('NAACL', 'ACL') AND p.year = 2009",
          "SELECT DISTINCT a.name FROM Author a WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.venue IN ('NAACL', 'ACL') AND p.year = 2009)",
          "SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE (p.venue = 'NAACL' OR p.venue = 'ACL') AND p.year = 2009",
          "SELECT DISTINCT a.name FROM Author a WHERE a.author_id IN (SELECT al.author_id FROM Author_list al INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009)",
          "SELECT DISTINCT Author.name FROM Author, Author_list, Paper WHERE Author.author_id = Author_list.author_id AND Author_list.paper_id = Paper.paper_id AND Paper.venue IN ('NAACL', 'ACL') AND Paper.year = 2009",
          "SELECT DISTINCT a.name FROM Author a INNER JOIN Author_list al ON a.author_id = al.author_id INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009 GROUP BY a.name"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009 GROUP BY a.name HAVING COUNT(DISTINCT p.venue) = 2",
          "SELECT a.name FROM Author a WHERE a.author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'NAACL' AND p.year = 2009 INTERSECT SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' AND p.year = 2009)",
          "SELECT a.name FROM Author a INNER JOIN Author_list al ON a.author_id = al.author_id INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'NAACL' AND p.year = 2009 AND a.author_id IN (SELECT al.author_id FROM Author_list al INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' AND p.year = 2009)",
          "SELECT DISTINCT a.name FROM Author a, Author_list al, Paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id AND p.year = 2009 AND p.venue = 'NAACL' AND EXISTS (SELECT 1 FROM Author_list al2 JOIN Paper p2 ON al2.paper_id = p2.paper_id WHERE al2.author_id = al.author_id AND p2.venue = 'ACL' AND p2.year = 2009)",
          "SELECT a.name FROM Author a WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.venue = 'NAACL' AND p.year = 2009) AND EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.venue = 'ACL' AND p.year = 2009)",
          "SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.venue IN ('NAACL', 'ACL') GROUP BY a.author_id HAVING COUNT(DISTINCT p.venue) > 1",
          "SELECT DISTINCT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue IN ('NAACL', 'ACL') AND Paper.year = 2009 GROUP BY Author.author_id HAVING COUNT(DISTINCT Paper.venue) = 2",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009) INTERSECT SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))",
          "SELECT DISTINCT a.name FROM Author a WHERE a.author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'NAACL' AND p.year = 2009) AND a.author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' AND p.year = 2009)",
          "SELECT name FROM Author WHERE author_id IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'NAACL' AND p.year = 2009 GROUP BY al.author_id INTERSECT SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' AND p.year = 2009 GROUP BY al.author_id)"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'))",
          "SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT DISTINCT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE venue = 'ACL')",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL')",
          "SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue != 'ACL' OR P.venue IS NULL",
          "SELECT name FROM Author EXCEPT SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue = 'ACL'",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue LIKE 'ACL'))",
          "SELECT DISTINCT A.name FROM Author A WHERE NOT EXISTS (SELECT * FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND A.author_id = AL.author_id)",
          "SELECT name FROM Author WHERE NOT EXISTS (SELECT NULL FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Author.author_id = Author_list.author_id AND Paper.venue = 'ACL')"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'))",
          "SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT DISTINCT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue != 'ACL' OR P.venue IS NULL",
          "SELECT name FROM Author EXCEPT SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.venue = 'ACL'",
          "SELECT A.name FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL')",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue LIKE 'ACL'))",
          "SELECT DISTINCT A.name FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE AL.author_id = A.author_id AND P.venue = 'ACL')",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT DISTINCT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'))"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT count(*) FROM conference",
          "SELECT COUNT(Conference_ID) FROM conference",
          "SELECT COUNT(*) AS TotalConferences FROM conference",
          "SELECT COUNT(1) FROM conference",
          "SELECT COUNT(DISTINCT Conference_ID) FROM conference",
          "SELECT COUNT(Conference_ID) AS ConferenceCount FROM conference",
          "SELECT COUNT(*) FROM `conference`",
          "SELECT COUNT(*) FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT COUNT(ALL Conference_ID) FROM conference",
          "SELECT COUNT(*) FROM (SELECT * FROM conference) AS AllConferences"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT count(*) FROM conference",
          "SELECT COUNT(Conference_ID) FROM conference",
          "SELECT COUNT(*) AS TotalConferences FROM conference",
          "SELECT COUNT(1) FROM conference",
          "SELECT COUNT(Conference_ID) AS Total FROM conference",
          "SELECT COUNT(*) FROM `conference`",
          "SELECT COUNT(DISTINCT Conference_ID) FROM conference",
          "SELECT COUNT(Conference_ID) FROM `conference`",
          "SELECT COUNT(*) FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Conference_ID FROM conference) AS Temp"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT Conference_Name FROM conference",
          "SELECT DISTINCT conference.Conference_Name FROM conference",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name",
          "SELECT DISTINCT c.Conference_Name FROM conference c",
          "SELECT DISTINCT `Conference_Name` FROM `conference`",
          "SELECT DISTINCT Conference_Name FROM conference ORDER BY Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL GROUP BY Conference_Name",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL",
          "SELECT DISTINCT Conference_Name AS DistinctConferences FROM conference",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name <> ''"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT Conference_Name FROM conference",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name",
          "SELECT DISTINCT Conference_Name AS Name FROM conference",
          "SELECT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL",
          "SELECT DISTINCT c.Conference_Name FROM conference c",
          "SELECT DISTINCT Conference_Name FROM conference ORDER BY Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_Name <> ''",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL AND Conference_Name <> ''",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(*) > 0",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name LIKE '%'"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, Year, Location FROM conference",
          "SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference",
          "SELECT `Conference_Name`, `Year`, `Location` FROM `conference`",
          "SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c",
          "SELECT Conference_Name AS Name, Year AS YearHeld, Location AS Venue FROM conference",
          "SELECT * FROM conference",
          "SELECT Conference_Name, Year, Location FROM conference ORDER BY Year",
          "SELECT Conference_Name, Year, Location FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT DISTINCT Conference_Name, Year, Location FROM conference",
          "SELECT Conference_Name, Year, Location FROM conference GROUP BY Conference_ID"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, Year, Location FROM conference",
          "SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference",
          "SELECT `Conference_Name`, `Year`, `Location` FROM `conference`",
          "SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c",
          "SELECT Conference_Name AS Name, Year AS YearHeld, Location AS Venue FROM conference",
          "SELECT * FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT Conference_Name, Year, Location FROM conference WHERE Conference_ID > 0",
          "SELECT Conference_Name, Year, Location FROM conference ORDER BY Year DESC",
          "SELECT DISTINCT Conference_Name, Year, Location FROM conference",
          "SELECT Conference_Name, Year, Location FROM conference GROUP BY Conference_ID"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, COUNT(*) FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.Conference_ID) AS count FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Total_Participations FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.staff_ID) FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(DISTINCT staff_ID) FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.Conference_ID) FROM conference AS c JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(staff_ID) FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) AS Occurrences FROM conference AS c GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Total FROM conference GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(c.Conference_ID) AS Count FROM conference c GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) AS Count FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Total_Occurrences FROM conference GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) FROM conference c GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) AS Number_of_Times FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Number_of_Occurrences FROM conference GROUP BY Conference_Name"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_Name) AS NumberOfConferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(*) AS ConferenceCount FROM conference GROUP BY Year",
          "SELECT Year, COUNT(1) FROM conference GROUP BY Year",
          "SELECT `Year`, COUNT(`Conference_ID`) AS `TotalConferences` FROM `conference` GROUP BY `Year`",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(*) AS CountOfConferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS ConferencesPerYear FROM conference GROUP BY Year",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Total_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(*) AS Conference_Count FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_Name) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year ORDER BY Year DESC",
          "SELECT Year, COUNT(*) AS Num_Conferences FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Count_of_Conferences FROM conference GROUP BY Year ORDER BY Count_of_Conferences DESC",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1",
          "SELECT c.Year FROM conference c GROUP BY c.Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM conference GROUP BY Year)",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Year FROM conference GROUP BY Year ORDER BY COUNT(*)",
          "SELECT Year FROM (SELECT Year, COUNT(*) as NumConferences FROM conference GROUP BY Year) AS YearCounts ORDER BY NumConferences ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Year, COUNT(*) AS ConferenceCount FROM conference GROUP BY Year ORDER BY ConferenceCount ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1",
          "SELECT c.Year FROM conference c GROUP BY c.Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM conference GROUP BY Year)",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC FETCH FIRST ROW ONLY",
          "SELECT MIN(Year) FROM (SELECT Year, COUNT(*) as cnt FROM conference GROUP BY Year ORDER BY cnt ASC) AS subquery",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC",
          "SELECT Year FROM (SELECT Year, COUNT(*) AS TotalConferences FROM conference GROUP BY Year ORDER BY TotalConferences ASC) AS Result LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2",
          "SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2",
          "SELECT c.Location FROM conference AS c GROUP BY c.Location HAVING COUNT(*) > 1",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_Name) > 1",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(DISTINCT Conference_ID) >= 2",
          "SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(DISTINCT c.Conference_ID) > 1",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1",
          "SELECT c.Location FROM conference AS c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2",
          "SELECT c.Location FROM conference AS c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2",
          "SELECT `Location` FROM `conference` GROUP BY `Location` HAVING COUNT(`Conference_ID`) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) > 1",
          "SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(*) > 1",
          "SELECT Location FROM (SELECT Location FROM conference) AS SubQuery GROUP BY Location HAVING COUNT(*) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(DISTINCT Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(DISTINCT Conference_ID) > 1"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location, Founded FROM institution",
          "SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution",
          "SELECT `Institution_Name`, `Location`, `Founded` FROM `institution`",
          "SELECT Institution_Name AS Name, Location AS Place, Founded AS Year FROM institution",
          "SELECT i.Institution_Name, i.Location, i.Founded FROM institution AS i",
          "SELECT Institution_Name, Location, Founded FROM institution ORDER BY Founded",
          "SELECT * FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT Institution_Name, Location, Founded FROM institution WHERE Founded > 0",
          "SELECT DISTINCT Institution_Name, Location, Founded FROM institution",
          "SELECT Institution_Name, Location, Founded FROM institution GROUP BY Institution_ID"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location, Founded FROM institution",
          "SELECT `Institution_Name`, `Location`, `Founded` FROM `institution`",
          "SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution",
          "SELECT I.Institution_Name, I.Location, I.Founded FROM institution AS I",
          "SELECT Institution_Name AS Name, Location AS Place, Founded AS Year FROM institution",
          "SELECT institution.* FROM institution",
          "SELECT DISTINCT Institution_Name, Location, Founded FROM institution",
          "SELECT Institution_Name, Location, Founded FROM institution ORDER BY Founded",
          "SELECT Institution_Name, Location, Founded FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT * FROM institution WHERE Institution_Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) AS Total FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(1) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(Institution_ID) AS 'Number of Institutions' FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) AS 'Number of Institutions' FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(1) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(Institution_ID) AS TotalInstitutions FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1",
          "SELECT `Institution_Name`, `Location` FROM institution ORDER BY `Founded` DESC LIMIT 1",
          "SELECT institution.Institution_Name, institution.Location FROM institution ORDER BY institution.Founded DESC LIMIT 1",
          "SELECT I.Institution_Name, I.Location FROM institution AS I ORDER BY I.Founded DESC LIMIT 1",
          "SELECT TOP 1 Institution_Name, Location FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1 OFFSET 0",
          "SELECT Institution_Name, Location FROM (SELECT Institution_Name, Location, Founded FROM institution ORDER BY Founded DESC) WHERE ROWNUM = 1",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1 FOR UPDATE"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1",
          "SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1",
          "SELECT `Institution_Name`, `Location` FROM `institution` ORDER BY `Founded` DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Institution_Name, Location FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT i.Institution_Name, i.Location FROM institution AS i WHERE i.Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM institution WHERE Founded IN (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC, Institution_ID DESC LIMIT 1",
          "SELECT FIRST Institution_Name, Location FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT i.Institution_Name, COUNT(s.staff_ID) FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT Institution_Name, COUNT(staff_ID) FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_ID",
          "SELECT i.Institution_Name, COUNT(*) AS StaffCount FROM institution AS i INNER JOIN staff AS s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT Institution_Name, COUNT(staff.staff_ID) FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT Institution_Name, COUNT(staff_ID) AS NumberOfStaff FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name",
          "SELECT i.Institution_Name, COUNT(s.staff_ID) AS StaffCount FROM institution i, staff s WHERE i.Institution_ID = s.Institution_ID AND i.Founded > 1800 GROUP BY i.Institution_Name",
          "SELECT Institution_Name, COUNT(staff_ID) FROM institution, staff WHERE institution.Institution_ID = staff.Institution_ID AND Founded > 1800 GROUP BY Institution_Name",
          "SELECT i.Institution_Name, COUNT(s.staff_ID) FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name",
          "SELECT Institution_Name, COUNT(staff_ID) FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY Institution_Name, institution.Institution_ID",
          "SELECT i.Institution_Name, COUNT(s.staff_ID) FROM institution i INNER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name, i.Institution_ID"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_ID, COUNT(staff_ID) FROM staff JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY Institution_ID",
          "SELECT i.Institution_ID, COUNT(s.staff_ID) FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(*) FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT Institution_ID, COUNT(staff_ID) AS Staff_Count FROM staff INNER JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY Institution_ID",
          "SELECT i.Institution_ID, COUNT(s.staff_ID) AS Total_Staff FROM institution AS i JOIN staff AS s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT Institution_ID, COUNT(staff_ID) FROM staff, institution WHERE staff.Institution_ID = institution.Institution_ID AND institution.Founded > 1800 GROUP BY Institution_ID",
          "SELECT i.Institution_ID, COUNT(s.staff_ID) FROM institution i, staff s WHERE i.Institution_ID = s.Institution_ID AND i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT Institution_ID, COUNT(*) FROM staff JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY Institution_ID",
          "SELECT i.Institution_ID, COUNT(s.staff_ID) FROM institution i INNER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID",
          "SELECT Institution_ID, COUNT(staff_ID) FROM staff INNER JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY Institution_ID"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.staff_ID IS NULL",
          "SELECT Institution_Name FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.Institution_ID = institution.Institution_ID)",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name FROM institution EXCEPT SELECT Institution_Name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID",
          "SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)",
          "SELECT Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT DISTINCT i.Institution_Name FROM institution i LEFT OUTER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.Institution_ID IS NULL",
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s WHERE s.Institution_ID = i.Institution_ID)"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.staff_ID IS NULL",
          "SELECT Institution_Name FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.Institution_ID = institution.Institution_ID)",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name FROM institution EXCEPT SELECT Institution_Name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID",
          "SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)",
          "SELECT DISTINCT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s)",
          "SELECT Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i LEFT OUTER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.Institution_ID IS NULL",
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)",
          "SELECT s.name FROM staff s WHERE s.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(Age) FROM staff AS s)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(s.Age) FROM staff s)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff WHERE Age IS NOT NULL)",
          "SELECT s.name FROM staff s WHERE s.Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff WHERE staff.Age IS NOT NULL)",
          "SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(s.Age) FROM staff AS s WHERE s.Age IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)",
          "SELECT s.name FROM staff s WHERE s.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT `name` FROM `staff` WHERE `Age` > (SELECT AVG(`Age`) FROM `staff`)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff AS s)",
          "SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(Age) FROM staff AS s1)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(s.Age) FROM staff s)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(s.Age) FROM staff s)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff GROUP BY Institution_ID)"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(staff.Age), MIN(staff.Age) FROM staff WHERE staff.Nationality = 'United States'",
          "SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality LIKE 'United States'",
          "SELECT MAX(Age) max_age, MIN(Age) min_age FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(staff.Age) MaxAge, MIN(staff.Age) MinAge FROM staff WHERE staff.Nationality = 'United States'",
          "SELECT MAXIMUM(Age), MINIMUM(Age) FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) AS 'Maximum Age', MIN(Age) AS 'Minimum Age' FROM staff WHERE Nationality = 'United States'"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT max(Age), min(Age) FROM staff",
          "SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM staff",
          "SELECT maximum(Age), minimum(Age) FROM staff",
          "SELECT MAX(staff.Age), MIN(staff.Age) FROM staff",
          "SELECT MAX(`Age`), MIN(`Age`) FROM `staff`",
          "SELECT MAX(staff.Age) AS MaxAge, MIN(staff.Age) AS MinAge FROM staff",
          "SELECT (MAX(Age)), (MIN(Age)) FROM staff",
          "SELECT MAXIMUM(Age), MINIMUM(Age) FROM staff",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM staff",
          "SELECT MAX(Age) as 'Highest Age', MIN(Age) as 'Lowest Age' FROM staff"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))",
          "SELECT DISTINCT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON s.staff_ID = cp.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada')",
          "SELECT DISTINCT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON s.staff_ID = cp.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))",
          "SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE cp.Conference_ID = c.Conference_ID AND s.Nationality = 'Canada')"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID JOIN institution i ON s.Institution_ID = i.Institution_ID WHERE s.Nationality = 'Canada'",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))",
          "SELECT DISTINCT c.Conference_Name FROM conference AS c INNER JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff AS s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT DISTINCT Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference c, staff s, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE Nationality = 'Canada')",
          "SELECT DISTINCT c.Conference_Name FROM conference AS c, conference_participation AS cp, staff AS s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON s.staff_ID = cp.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker' INTERSECT SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.role = 'speaker' INTERSECT SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.role = 'sponsor'",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp WHERE s.staff_ID = cp.staff_ID AND cp.role = 'speaker' INTERSECT SELECT DISTINCT s.name FROM staff s, conference_participation cp WHERE s.staff_ID = cp.staff_ID AND cp.role = 'sponsor'",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'speaker') AND EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'sponsor')",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp WHERE cp.role = 'speaker' GROUP BY cp.staff_ID HAVING COUNT(DISTINCT cp.role) > 1)",
          "SELECT s.name FROM staff s INNER JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID AND cp1.role = 'speaker' INNER JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID AND cp2.role = 'sponsor'",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp WHERE cp.role IN ('speaker', 'sponsor') GROUP BY cp.staff_ID HAVING COUNT(DISTINCT cp.role) = 2)",
          "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.role = 'speaker' OR cp.role = 'sponsor' GROUP BY s.staff_ID HAVING COUNT(DISTINCT cp.role) = 2",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation GROUP BY staff_ID HAVING SUM(CASE WHEN role = 'speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN role = 'sponsor' THEN 1 ELSE 0 END) > 0)"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_ID FROM conference_participation WHERE role = 'Sponsor')",
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.role = 'Speaker' INTERSECT SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.role = 'Sponsor'",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp WHERE s.staff_ID = cp.staff_ID AND cp.role = 'Speaker' AND s.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Sponsor')",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'Sponsor')",
          "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'Speaker') AND EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'Sponsor')",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp WHERE cp.role = 'Speaker' UNION ALL SELECT cp.staff_ID FROM conference_participation cp WHERE cp.role = 'Sponsor' HAVING COUNT(*) > 1)",
          "SELECT s.name FROM staff s INNER JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID AND cp1.role = 'Speaker' INNER JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID AND cp2.role = 'Sponsor'",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation GROUP BY staff_ID HAVING SUM(CASE WHEN role = 'Speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN role = 'Sponsor' THEN 1 ELSE 0 END) > 0)",
          "SELECT s.name FROM staff s WHERE (SELECT COUNT(DISTINCT role) FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND role IN ('Speaker', 'Sponsor')) = 2",
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID GROUP BY s.staff_ID, s.name HAVING COUNT(DISTINCT CASE WHEN cp.role IN ('Speaker', 'Sponsor') THEN cp.role ELSE NULL END) = 2"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' INTERSECT SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'Naccl'",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Conference_Name IN ('ACL', 'Naccl') GROUP BY s.name HAVING COUNT(DISTINCT c.Conference_Name) = 2",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' INTERSECT SELECT staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'Naccl')",
          "WITH ACL_Staff AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')), Naccl_Staff AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')) SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM ACL_Staff INTERSECT SELECT staff_ID FROM Naccl_Staff)",
          "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID) AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'Naccl' AND cp.staff_ID = s.staff_ID)",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL') AND s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'Naccl')",
          "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_ID = cp.staff_ID INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND s.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL') INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'Naccl')",
          "SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference c1 ON cp1.Conference_ID = c1.Conference_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID JOIN conference c2 ON cp2.Conference_ID = c2.Conference_ID WHERE c1.Conference_Name = 'ACL' AND c2.Conference_Name = 'Naccl'"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' INTERSECT SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'NACCL'",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL' INTERSECT SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'NACCL'",
          "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID) AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'NACCL' AND cp.staff_ID = s.staff_ID)",
          "WITH ACL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')), NACCL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')) SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM ACL_Participants INTERSECT SELECT staff_ID FROM NACCL_Participants)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' INTERSECT SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'NACCL')",
          "SELECT s.name FROM staff s INNER JOIN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) acl ON s.staff_ID = acl.staff_ID INNER JOIN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')) naccl ON s.staff_ID = naccl.staff_ID",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL') AND s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'NACCL')",
          "SELECT DISTINCT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL') INTERSECT SELECT DISTINCT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'NACCL')",
          "SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference c1 ON cp1.Conference_ID = c1.Conference_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID JOIN conference c2 ON cp2.Conference_ID = c2.Conference_ID WHERE c1.Conference_Name = 'ACL' AND c2.Conference_Name = 'NACCL'"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004))",
          "SELECT DISTINCT staff.name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year IN (2003, 2004)",
          "SELECT staff.name FROM staff, conference_participation, conference WHERE staff.staff_ID = conference_participation.staff_ID AND conference_participation.Conference_ID = conference.Conference_ID AND (conference.Year = 2003 OR conference.Year = 2004)",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND (c.Year = 2003 OR c.Year = 2004)",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference_participation.staff_ID = staff.staff_ID AND (conference.Year = 2003 OR conference.Year = 2004))",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004)",
          "SELECT DISTINCT name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year BETWEEN 2003 AND 2004",
          "SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)",
          "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004)"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004))",
          "SELECT DISTINCT staff.name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year BETWEEN 2003 AND 2004",
          "SELECT staff.name FROM staff, conference_participation, conference WHERE staff.staff_ID = conference_participation.staff_ID AND conference_participation.Conference_ID = conference.Conference_ID AND (conference.Year = 2003 OR conference.Year = 2004)",
          "SELECT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year IN (2003, 2004)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2003 OR conference.Year = 2004)",
          "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE staff.staff_ID = conference_participation.staff_ID AND (conference.Year = 2003 OR conference.Year = 2004))",
          "SELECT s.name FROM staff s WHERE EXISTS (SELECT * FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE cp.staff_ID = s.staff_ID AND (c.Year = 2003 OR c.Year = 2004))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year BETWEEN 2003 AND 2004))"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_Name, Year, COUNT(staff_ID) AS Participant_Count FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID",
          "SELECT Conference_Name, Year, COUNT(*) AS Total_Participants FROM conference AS c JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT Conference_Name, Year, COUNT(staff_ID) FROM conference JOIN conference_participation USING (Conference_ID) GROUP BY Conference_ID",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Num_Participants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_Name, Year, COUNT(DISTINCT staff_ID) AS Participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participant_Count FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_Name, Year, COUNT(staff_ID) AS Total_Participants FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Num_Participants FROM conference c LEFT OUTER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(*) AS Participant_Count FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_ID, Conference_Name, Year, COUNT(staff_ID) AS Num_Participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference AS c LEFT JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(DISTINCT cp.staff_ID) AS Total_Participants FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_ID, Conference_Name, Year, COUNT(staff_ID) FROM conference NATURAL JOIN conference_participation GROUP BY Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participants FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participant_Count FROM conference c LEFT OUTER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT Conference_ID, Conference_Name, Year, COUNT(staff_ID) AS Num_Participants FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID, Conference_Name, Year",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Total_Participants FROM conference AS c LEFT JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(staff_ID) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference AS c INNER JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c INNER JOIN (SELECT Conference_ID, COUNT(*) as total FROM conference_participation GROUP BY Conference_ID ORDER BY total DESC LIMIT 2) cp ON c.Conference_ID = cp.Conference_ID",
          "SELECT TOP 2 c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC",
          "SELECT c.Conference_Name FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID HAVING COUNT(cp.staff_ID) = (SELECT MAX(count) FROM (SELECT COUNT(staff_ID) as count FROM conference_participation GROUP BY Conference_ID) t) LIMIT 2",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(DISTINCT cp.staff_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT NULL FROM conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY cp.Conference_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM conference_participation GROUP BY Conference_ID)) LIMIT 2"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID HAVING COUNT(staff_ID) >= ALL (SELECT COUNT(staff_ID) FROM conference_participation GROUP BY Conference_ID) LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(DISTINCT cp.staff_ID) DESC LIMIT 2",
          "SELECT TOP 2 c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(*) DESC",
          "SELECT c.Conference_Name FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC FETCH FIRST 2 ROWS ONLY",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name HAVING COUNT(cp.staff_ID) > (SELECT COUNT(staff_ID) / 2 FROM conference_participation) ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT NULL FROM conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY cp.Conference_ID HAVING COUNT(cp.staff_ID) > 1) ORDER BY (SELECT COUNT(*) FROM conference_participation cp WHERE c.Conference_ID = cp.Conference_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c JOIN (SELECT Conference_ID, COUNT(staff_ID) AS total_participants FROM conference_participation GROUP BY Conference_ID ORDER BY total_participants DESC LIMIT 2) cp ON c.Conference_ID = cp.Conference_ID"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID IS NULL",
          "SELECT name, Nationality FROM staff WHERE NOT EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT * FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID)",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name LIKE 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT NULL FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID)"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name != 'ACL' OR c.Conference_Name IS NULL",
          "SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE cp.staff_ID = s.staff_ID AND c.Conference_Name = 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name LIKE 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff EXCEPT SELECT s.name, s.Nationality FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL'",
          "SELECT DISTINCT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID NOT IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') OR cp.Conference_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004)))",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND cp.staff_ID IS NULL",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s INNER JOIN conference_participation cp ON s.staff_ID = cp.staff_ID INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution EXCEPT SELECT i.Institution_Name, i.Location FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s, conference_participation cp, conference c WHERE s.Institution_ID = i.Institution_ID AND s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS sub ON i.Institution_ID = sub.Institution_ID WHERE sub.Institution_ID IS NULL",
          "SELECT Institution_Name, Location FROM institution WHERE NOT EXISTS (SELECT * FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004 AND staff.Institution_ID = institution.Institution_ID)"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference.Conference_ID = conference_participation.Conference_ID WHERE Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s INNER JOIN conference_participation cp ON s.staff_ID = cp.staff_ID INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND cp.staff_ID IS NULL",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s, conference_participation cp, conference c WHERE s.Institution_ID = i.Institution_ID AND s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution EXCEPT SELECT Institution_Name, Location FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS sub ON i.Institution_ID = sub.Institution_ID WHERE sub.Institution_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)",
          "SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC LIMIT 1",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills ORDER BY age DESC) AS oldest LIMIT 1",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT FIRST(pilot_name) FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name, age HAVING age = MAX(age) ORDER BY age DESC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (SELECT MAX(age) FROM PilotSkills) LIMIT 1",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)",
          "SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC LIMIT 1",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills ORDER BY age DESC) AS subquery LIMIT 1",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name, age HAVING age = MAX(age) LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (SELECT MAX(age) FROM PilotSkills)",
          "SELECT FIRST(pilot_name) FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY p.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills GROUP BY plane_name) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT PS.pilot_name FROM PilotSkills AS PS WHERE PS.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY PS.age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT PS.pilot_name FROM PilotSkills PS WHERE PS.age < (SELECT AVG(PS2.age) FROM PilotSkills PS2) ORDER BY PS.age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills AS PS) ORDER BY age ASC"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASCENDING",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY p.age ASC",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age < (SELECT AVG(p2.age) FROM PilotSkills p2) ORDER BY p.age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills GROUP BY pilot_name) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC LIMIT ALL",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC, pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC, pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC, pilot_name DESC"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT * FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT PilotSkills.* FROM PilotSkills WHERE age < 30",
          "SELECT PS.* FROM PilotSkills AS PS WHERE PS.age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name AS Pilot, plane_name AS Plane, age AS Age FROM PilotSkills WHERE age < 30",
          "SELECT * FROM PilotSkills WHERE PilotSkills.age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE PilotSkills.age < 30",
          "SELECT * FROM PilotSkills PS WHERE PS.age < 30",
          "SELECT PS.pilot_name, PS.plane_name, PS.age FROM PilotSkills PS WHERE PS.age < 30"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT * FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name AS Name, plane_name AS Plane, age AS Age FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY age",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY pilot_name",
          "SELECT * FROM PilotSkills WHERE age < 30 ORDER BY plane_name DESC",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 GROUP BY pilot_name",
          "SELECT DISTINCT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 AND pilot_name IS NOT NULL",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 AND plane_name IN (SELECT plane_name FROM Hangar)"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT PS.pilot_name FROM PilotSkills AS PS WHERE PS.plane_name = 'Piper Cub' AND PS.age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 LIMIT 100",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 HAVING COUNT(*) > 0",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age >= 35"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT PS.pilot_name FROM PilotSkills AS PS WHERE PS.plane_name = 'Piper Cub' AND PS.age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE (plane_name = 'Piper Cub') AND (age < 35)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 LIMIT 100",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY age DESC"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'",
          "SELECT H.location FROM Hangar H WHERE H.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name LIKE 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name IN ('F-14 Fighter')",
          "SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location IS NOT NULL",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location DESC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location ASC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'",
          "SELECT H.location FROM Hangar H WHERE H.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name LIKE 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1",
          "SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name IN ('F-14 Fighter')",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location IS NOT NULL",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location DESC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' FETCH FIRST 1 ROWS ONLY",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location <> ''"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT location) FROM Hangar",
          "SELECT COUNT(UNIQUE location) FROM Hangar",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar)",
          "SELECT COUNT(*) FROM (SELECT DISTINCT location FROM Hangar)",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE location IS NOT NULL",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE location <> ''",
          "SELECT COUNT(*) FROM (SELECT location FROM Hangar GROUP BY location)",
          "SELECT COUNT(DISTINCT H.location) FROM Hangar H",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE location != ''",
          "SELECT DISTINCT COUNT(location) FROM Hangar"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT location) FROM Hangar",
          "SELECT COUNT(UNIQUE location) FROM Hangar",
          "SELECT COUNT(*) FROM (SELECT DISTINCT location FROM Hangar) AS unique_locations",
          "SELECT COUNT(DISTINCT location) AS location_count FROM Hangar",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar) AS locations",
          "SELECT COUNT(DISTINCT Hangar.location) FROM Hangar",
          "SELECT COUNT(*) FROM (SELECT location FROM Hangar GROUP BY location) AS distinct_locations",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE location IS NOT NULL",
          "SELECT COUNT(DISTINCT location) FROM Hangar GROUP BY location HAVING COUNT(*) >= 1",
          "SELECT COUNT(DISTINCT location) FROM Hangar ORDER BY location"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;",
          "SELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.pilot_name = 'Jones' AND PilotSkills.age = 32",
          "SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 ORDER BY plane_name",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 GROUP BY plane_name",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;",
          "SELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.pilot_name = 'Jones' AND PilotSkills.age = 32",
          "SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 GROUP BY plane_name",
          "SELECT p.plane_name FROM PilotSkills p WHERE p.pilot_name = 'Jones' AND p.age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 LIMIT 100",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 FETCH FIRST 10 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(pilot_name) FROM PilotSkills GROUP BY pilot_name HAVING age > 40",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > 40) AS subquery",
          "SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.age > 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 AND pilot_name IN (SELECT pilot_name FROM PilotSkills)"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) AS PilotCount FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) FROM PilotSkills GROUP BY pilot_name HAVING age > 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills GROUP BY pilot_name HAVING age > 40",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > 40) AS UniquePilots",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name LIKE 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age BETWEEN 0 AND 34",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age <= 34",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 GROUP BY plane_name",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 GROUP BY pilot_name",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 HAVING COUNT(*) > 0",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 ORDER BY age"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT count(*) FROM PilotSkills AS PS JOIN Hangar AS H ON PS.plane_name = H.plane_name WHERE PS.plane_name = 'B-52 Bomber' AND PS.age < 35",
          "SELECT count(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 GROUP BY plane_name",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name LIKE 'B-52 Bomber' AND age < 35",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age BETWEEN 1 AND 34",
          "SELECT COUNT(*) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.plane_name = 'B-52 Bomber' AND PilotSkills.age < 35",
          "SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35 AND EXISTS (SELECT plane_name FROM Hangar WHERE Hangar.plane_name = 'B-52 Bomber')",
          "SELECT COUNT(*) FROM PilotSkills PS WHERE PS.plane_name = 'B-52 Bomber' AND PS.age < 35"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1",
          "SELECT MIN(pilot_name) FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY pilot_name ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC) AS youngest LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC ROWS 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age IN (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC, pilot_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1",
          "SELECT pilot_name FROM (SELECT * FROM PilotSkills WHERE plane_name = 'Piper Cub') AS Filtered ORDER BY age ASC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH FIRST 1 ROW ONLY",
          "SELECT MIN(pilot_name) KEEP (DENSE_RANK FIRST ORDER BY age) FROM PilotSkills WHERE plane_name = 'Piper Cub'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC ROWS 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH FIRST ROW ONLY",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH NEXT 1 ROWS ONLY",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC OFFSET 0 ROWS FETCH NEXT 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM PilotSkills GROUP BY plane_name) tmp)",
          "SELECT p.plane_name FROM PilotSkills AS p GROUP BY p.plane_name ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(*) AS popularity FROM PilotSkills GROUP BY plane_name) AS PopularityRank ORDER BY popularity DESC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC FETCH FIRST ROW ONLY",
          "SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills GROUP BY plane_name ORDER BY num_pilots DESC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1",
          "SELECT FIRST(plane_name) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC) AS RankedPlanes"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(*) AS frequency FROM PilotSkills GROUP BY plane_name) AS SubQuery ORDER BY frequency DESC LIMIT 1",
          "SELECT p.plane_name FROM PilotSkills AS p GROUP BY p.plane_name ORDER BY COUNT(p.plane_name) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM PilotSkills GROUP BY plane_name) AS counts)",
          "SELECT plane_name, COUNT(*) AS num FROM PilotSkills GROUP BY plane_name ORDER BY num DESC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1",
          "SELECT FIRST(plane_name) FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC, plane_name ASC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC, plane_name LIMIT 1"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) ASC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) ASC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*)",
          "SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT plane_name FROM PilotSkills) LIMIT 1",
          "SELECT P.plane_name FROM PilotSkills P RIGHT JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY P.plane_name ORDER BY COUNT(P.pilot_name) ASC LIMIT 1",
          "SELECT plane_name FROM Hangar EXCEPT SELECT plane_name FROM PilotSkills",
          "SELECT plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.plane_name) ASC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name)",
          "SELECT plane_name FROM Hangar ORDER BY (SELECT COUNT(*) FROM PilotSkills WHERE PilotSkills.plane_name = Hangar.plane_name) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT p.plane_name FROM PilotSkills p GROUP BY p.plane_name ORDER BY COUNT(p.plane_name) ASC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*)",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(*) as cnt FROM PilotSkills GROUP BY plane_name) AS SubQuery ORDER BY cnt ASC LIMIT 1",
          "SELECT p.plane_name FROM PilotSkills AS p GROUP BY p.plane_name HAVING COUNT(p.pilot_name) = (SELECT MIN(COUNT(pilot_name)) FROM PilotSkills GROUP BY plane_name)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) ASC LIMIT 1",
          "SELECT MIN(plane_name) FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM PilotSkills GROUP BY plane_name)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) ASC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Chicago'",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'",
          "SELECT COUNT(UNIQUE pilot_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Chicago')",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago') AS unique_pilots",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago' GROUP BY pilot_name) AS pilot_count",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(UNIQUE pilot_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Chicago')",
          "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago') AS unique_pilots",
          "SELECT COUNT(DISTINCT p.pilot_name) FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Chicago'",
          "SELECT COUNT(DISTINCT p.pilot_name) FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago') GROUP BY pilot_name) AS ChicagoPilots",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills ps WHERE EXISTS (SELECT 1 FROM Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago')"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;",
          "SELECT PS.plane_name FROM PilotSkills PS WHERE PS.pilot_name = 'Smith' AND PS.age = 41",
          "SELECT PS.plane_name FROM PilotSkills AS PS WHERE PS.pilot_name = 'Smith' AND PS.age = 41;",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 GROUP BY plane_name",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT DISTINCT PS.plane_name FROM PilotSkills PS WHERE PS.pilot_name = 'Smith' AND PS.age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 ORDER BY plane_name",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 ORDER BY plane_name DESC",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 LIMIT 10"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT Hangar.plane_name FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.pilot_name = 'Smith' AND PilotSkills.age = 41",
          "SELECT p.plane_name FROM PilotSkills p WHERE p.pilot_name = 'Smith' AND p.age = 41",
          "SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT p.plane_name FROM PilotSkills AS p WHERE p.pilot_name = 'Smith' AND p.age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills",
          "SELECT COUNT(DISTINCT plane_name) AS TotalPlanes FROM PilotSkills",
          "SELECT COUNT(UNIQUE plane_name) FROM PilotSkills",
          "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills)",
          "SELECT COUNT(*) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name) AS distinct_planes",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE plane_name IS NOT NULL",
          "SELECT DISTINCT COUNT(plane_name) FROM PilotSkills",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills GROUP BY plane_name HAVING COUNT(plane_name) > 0"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills",
          "SELECT COUNT(UNIQUE plane_name) FROM PilotSkills",
          "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills) temp",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE plane_name IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name) AS distinct_planes",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p WHERE p.plane_name IS NOT NULL",
          "SELECT DISTINCT COUNT(plane_name) FROM PilotSkills"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT count(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
          "SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
          "SELECT COUNT(*) FROM PilotSkills p WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(plane_name) FROM PilotSkills p WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(p.plane_name) FROM PilotSkills p WHERE p.pilot_name = 'Smith' GROUP BY p.pilot_name"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'",
          "SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
          "SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
          "SELECT COUNT(*) FROM PilotSkills p WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IS NOT NULL",
          "SELECT COUNT(*) FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE p.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE p.pilot_name = 'Smith'"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40",
          "SELECT count(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40",
          "SELECT count(unique plane_name) FROM PilotSkills WHERE age > 40",
          "SELECT count(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) AS subquery",
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 GROUP BY plane_name",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IS NOT NULL",
          "SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) temp",
          "SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 HAVING COUNT(plane_name) > 0",
          "SELECT DISTINCT COUNT(plane_name) FROM PilotSkills WHERE age > 40"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40",
          "SELECT count(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40",
          "SELECT count(unique plane_name) FROM PilotSkills WHERE age > 40",
          "SELECT count(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) AS unique_planes",
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 GROUP BY plane_name",
          "SELECT count(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) subquery",
          "SELECT count(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40 GROUP BY ps.plane_name",
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IS NOT NULL",
          "SELECT count(*) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING age > 40) AS filtered_planes",
          "SELECT count(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IN (SELECT plane_name FROM Hangar)"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE (age >= 30) AND (age <= 40) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 SORT BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 SORT ASCENDING BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE (age >= 30) AND (age <= 40) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC;",
          "SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC",
          "SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESCENDING",
          "SELECT DISTINCT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name, age ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills) AS TempTable ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name AS Name FROM PilotSkills ORDER BY age DESC",
          "SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC",
          "SELECT p.pilot_name FROM PilotSkills p ORDER BY p.age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESCENDING",
          "SELECT DISTINCT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name, age ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC",
          "SELECT pilot_name, age FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar ORDER BY plane_name ASC",
          "SELECT h.location FROM Hangar h ORDER BY h.plane_name",
          "SELECT Hangar.location FROM Hangar ORDER BY Hangar.plane_name ASC",
          "SELECT location FROM Hangar ORDER BY plane_name ASCENDING",
          "SELECT h.location FROM Hangar AS h ORDER BY h.plane_name ASC",
          "SELECT location FROM Hangar ORDER BY plane_name ASC;",
          "SELECT location FROM Hangar ORDER BY plane_name;",
          "SELECT location FROM Hangar h ORDER BY h.plane_name ASC;",
          "SELECT location FROM Hangar AS h ORDER BY h.plane_name ASC;"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar ORDER BY plane_name",
          "SELECT Hangar.location FROM Hangar ORDER BY Hangar.plane_name",
          "SELECT location FROM Hangar ORDER BY plane_name ASC",
          "SELECT H.location FROM Hangar H ORDER BY H.plane_name",
          "SELECT location AS Plane_Location FROM Hangar ORDER BY plane_name",
          "SELECT DISTINCT location FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar GROUP BY location ORDER BY plane_name",
          "SELECT location FROM Hangar ORDER BY plane_name ASCENDING",
          "SELECT * FROM Hangar ORDER BY plane_name",
          "SELECT location, plane_name FROM Hangar ORDER BY plane_name"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name",
          "SELECT DISTINCT p.plane_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name ORDER BY p.plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC",
          "SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name IS NOT NULL ORDER BY plane_name",
          "SELECT DISTINCT h.plane_name FROM Hangar h ORDER BY h.plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY 1",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name COLLATE NOCASE",
          "SELECT plane_name FROM (SELECT DISTINCT plane_name FROM Hangar) ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY LENGTH(plane_name), plane_name"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM Hangar ORDER BY plane_name ASC",
          "SELECT plane_name FROM Hangar ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name",
          "SELECT plane_name FROM Hangar ORDER BY plane_name ASCENDING",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC",
          "SELECT plane_name FROM PilotSkills ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC",
          "SELECT plane_name FROM PilotSkills ORDER BY plane_name ASC",
          "SELECT plane_name FROM Hangar ORDER BY 1",
          "SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40",
          "SELECT count(*) FROM PilotSkills WHERE (age > 40) OR (age < 30)",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE (age < 30) OR (age > 40)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < 30 OR age > 40",
          "SELECT count(*) FROM PilotSkills WHERE age <= 29 OR age >= 41",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age <= 29 OR age >= 41",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < 30 UNION SELECT COUNT(*) FROM PilotSkills WHERE age > 40",
          "SELECT count(*) FROM PilotSkills WHERE age IN (SELECT age FROM PilotSkills WHERE age < 30 OR age > 40)"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE (age > 40) OR (age < 30)",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE (age > 40) OR (age < 30)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 UNION SELECT COUNT(*) FROM PilotSkills WHERE age < 30",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 UNION ALL SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < 30",
          "SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills WHERE age > 40 UNION ALL SELECT pilot_name FROM PilotSkills WHERE age < 30) AS subquery",
          "SELECT COUNT(*) FROM PilotSkills GROUP BY age HAVING age > 40 OR age < 30"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name AS name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS WHERE (PS.plane_name = 'Piper Cub' AND PS.age > 35) OR (PS.plane_name = 'F-14 Fighter' AND PS.age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30",
          "SELECT pilot_name AS Pilot, age AS Age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) UNION ALL SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) ORDER BY age",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) GROUP BY pilot_name, age"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) UNION SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT P.pilot_name, P.age FROM PilotSkills P WHERE (P.plane_name = 'Piper Cub' AND P.age > 35) OR (P.plane_name = 'F-14 Fighter' AND P.age < 30)",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION ALL SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) ORDER BY pilot_name",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) GROUP BY pilot_name, age",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) HAVING COUNT(plane_name) > 0"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' MINUS SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT p1.pilot_name FROM PilotSkills p1 LEFT JOIN PilotSkills p2 ON p1.pilot_name = p2.pilot_name AND p2.plane_name = 'B-52 Bomber' WHERE p1.plane_name = 'Piper Cub' AND p2.pilot_name IS NULL",
          "SELECT pilot_name FROM (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') AS PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT pilot_name FROM PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM B52BomberPilots)",
          "SELECT pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT q.pilot_name FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber')",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT q.pilot_name FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber')"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' MINUS SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT pilot_name FROM PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM B52BomberPilots)",
          "SELECT pilot_name FROM (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') AS PiperCub WHERE pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills p1 WHERE p1.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT * FROM PilotSkills p2 WHERE p2.plane_name = 'B-52 Bomber' AND p2.pilot_name = p1.pilot_name)",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p LEFT JOIN PilotSkills q ON p.pilot_name = q.pilot_name AND q.plane_name = 'B-52 Bomber' WHERE p.plane_name = 'Piper Cub' AND q.pilot_name IS NULL",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT p.pilot_name FROM PilotSkills p JOIN PilotSkills q ON p.pilot_name = q.pilot_name WHERE p.plane_name = 'Piper Cub' AND q.plane_name != 'B-52 Bomber' GROUP BY p.pilot_name HAVING COUNT(DISTINCT q.plane_name) = 1"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 JOIN PilotSkills p2 ON p1.pilot_name = p2.pilot_name WHERE p1.plane_name = 'Piper Cub' AND p2.plane_name = 'B-52 Bomber'",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY p.pilot_name HAVING COUNT(DISTINCT p.plane_name) = 2",
          "SELECT pilot_name FROM (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') AS subquery GROUP BY pilot_name HAVING COUNT(*) = 2",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT PiperCubPilots.pilot_name FROM PiperCubPilots JOIN B52BomberPilots ON PiperCubPilots.pilot_name = B52BomberPilots.pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' HAVING COUNT(DISTINCT plane_name) > 1",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING SUM(CASE WHEN plane_name = 'Piper Cub' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN plane_name = 'B-52 Bomber' THEN 1 ELSE 0 END) > 0",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') HAVING COUNT(DISTINCT plane_name) = 2",
          "SELECT pilot_name FROM PilotSkills p WHERE EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p2.pilot_name = p.pilot_name AND p2.plane_name = 'Piper Cub') AND EXISTS (SELECT 1 FROM PilotSkills p3 WHERE p3.pilot_name = p.pilot_name AND p3.plane_name = 'B-52 Bomber')"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT p.pilot_name FROM PilotSkills p JOIN PilotSkills q ON p.pilot_name = q.pilot_name WHERE p.plane_name = 'Piper Cub' AND q.plane_name = 'B-52 Bomber'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2",
          "SELECT pilot_name FROM (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') AS subquery GROUP BY pilot_name HAVING COUNT(*) = 2",
          "SELECT a.pilot_name FROM PilotSkills a, PilotSkills b WHERE a.pilot_name = b.pilot_name AND a.plane_name = 'Piper Cub' AND b.plane_name = 'B-52 Bomber'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills p WHERE EXISTS (SELECT 1 FROM PilotSkills q WHERE p.pilot_name = q.pilot_name AND q.plane_name = 'Piper Cub') AND EXISTS (SELECT 1 FROM PilotSkills r WHERE p.pilot_name = r.pilot_name AND r.plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING SUM(CASE WHEN plane_name = 'Piper Cub' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN plane_name = 'B-52 Bomber' THEN 1 ELSE 0 END) > 0",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) >= 2"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT AVG(age), MIN(age) FROM PilotSkills",
          "SELECT average(age), minimum(age) FROM PilotSkills",
          "SELECT AVG(PilotSkills.age), MIN(PilotSkills.age) FROM PilotSkills",
          "SELECT AVG(age) AS AverageAge, MIN(age) AS MinimumAge FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS AvgAge, MIN(PilotSkills.age) AS MinAge FROM PilotSkills",
          "SELECT average(age) AS Average_Age, minimum(age) AS Minimum_Age FROM PilotSkills",
          "SELECT AVG(age) average_age, MIN(age) minimum_age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) avg_age, MIN(PilotSkills.age) min_age FROM PilotSkills",
          "SELECT AVG(age) avgAge, MIN(age) minAge FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AverageAge, MIN(PilotSkills.age) MinimumAge FROM PilotSkills"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT AVG(age), MIN(age) FROM PilotSkills",
          "SELECT average(age), minimum(age) FROM PilotSkills",
          "SELECT AVG(PilotSkills.age), MIN(PilotSkills.age) FROM PilotSkills",
          "SELECT AVG(age) AS AverageAge, MIN(age) AS MinimumAge FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS Average_Age, MIN(PilotSkills.age) AS Minimum_Age FROM PilotSkills",
          "SELECT AVG(age) Average, MIN(age) Minimum FROM PilotSkills",
          "SELECT AVG(age) avg_age, MIN(age) min_age FROM PilotSkills",
          "SELECT average(age) avgAge, minimum(age) minAge FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) avgAge, MIN(PilotSkills.age) minAge FROM PilotSkills",
          "SELECT AVG(age) as AvgAge, MIN(age) as MinAge FROM PilotSkills"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 JOIN Hangar h1 ON p1.plane_name = h1.plane_name WHERE h1.location = 'Austin' INTERSECT SELECT DISTINCT p2.pilot_name FROM PilotSkills p2 JOIN Hangar h2 ON p2.plane_name = h2.plane_name WHERE h2.location = 'Boston'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston'))",
          "SELECT p.pilot_name FROM PilotSkills p INNER JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin' INTERSECT SELECT p.pilot_name FROM PilotSkills p INNER JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Boston'",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Austin' AND p.pilot_name IN (SELECT p.pilot_name FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Boston')",
          "SELECT p.pilot_name FROM PilotSkills p WHERE EXISTS (SELECT 1 FROM Hangar h WHERE h.plane_name = p.plane_name AND h.location = 'Austin') AND EXISTS (SELECT 1 FROM Hangar h WHERE h.plane_name = p.plane_name AND h.location = 'Boston')",
          "SELECT p.pilot_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin' GROUP BY p.pilot_name HAVING COUNT(DISTINCT h.location) > 1",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name IN (SELECT h.plane_name FROM Hangar h WHERE h.location = 'Austin') INTERSECT SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name IN (SELECT h.plane_name FROM Hangar h WHERE h.location = 'Boston')",
          "SELECT p.pilot_name FROM (SELECT pilot_name, plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')) AS AustinPilots JOIN (SELECT pilot_name, plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')) AS BostonPilots ON AustinPilots.pilot_name = BostonPilots.pilot_name",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND p.plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')",
          "SELECT p.pilot_name FROM PilotSkills p JOIN Hangar h1 ON p.plane_name = h1.plane_name AND h1.location = 'Austin' JOIN Hangar h2 ON p.plane_name = h2.plane_name AND h2.location = 'Boston'"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston')",
          "SELECT ps.pilot_name FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin' OR h.location = 'Boston'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston')",
          "SELECT pilot_name FROM PilotSkills ps WHERE EXISTS (SELECT 1 FROM Hangar h WHERE h.plane_name = ps.plane_name AND h.location IN ('Austin', 'Boston'))",
          "SELECT DISTINCT ps.pilot_name FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND (h.location = 'Austin' OR h.location = 'Boston')",
          "SELECT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin' INTERSECT SELECT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Boston'",
          "SELECT DISTINCT ps.pilot_name FROM PilotSkills ps LEFT JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin' OR h.location = 'Boston'",
          "SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN (SELECT h.plane_name FROM Hangar h WHERE h.location = 'Austin' UNION SELECT h.plane_name FROM Hangar h WHERE h.location = 'Boston')",
          "SELECT DISTINCT ps.pilot_name FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name AND h.location IN ('Austin', 'Boston')",
          "SELECT ps.pilot_name FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND (h.location = 'Austin' OR h.location = 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) >= 2"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' OR p.plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE p.plane_name = 'Piper Cub' OR p.plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name LIKE 'Piper Cub' OR plane_name LIKE 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = ANY (ARRAY['Piper Cub', 'F-14 Fighter'])",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'))"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' OR p.plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE p.plane_name = 'Piper Cub' OR p.plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name LIKE 'Piper Cub' OR plane_name LIKE 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = ANY (ARRAY['Piper Cub', 'F-14 Fighter'])",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'))"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT avg(age), plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, avg(age) AS AverageAge FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name",
          "SELECT AVG(PilotSkills.age), PilotSkills.plane_name FROM PilotSkills GROUP BY PilotSkills.plane_name",
          "SELECT p.plane_name, AVG(p.age) FROM PilotSkills p GROUP BY p.plane_name",
          "SELECT plane_name, AVG(age) average_age FROM PilotSkills GROUP BY plane_name",
          "SELECT AVG(age) AS AvgAge, plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, average(age) FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name",
          "SELECT AVG(age), plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name",
          "SELECT p.plane_name, AVG(p.age) AS average_age FROM PilotSkills p GROUP BY p.plane_name",
          "SELECT plane_name, AVG(age) AS AvgAge FROM PilotSkills GROUP BY plane_name",
          "SELECT PilotSkills.plane_name, AVG(PilotSkills.age) FROM PilotSkills GROUP BY PilotSkills.plane_name",
          "SELECT p.plane_name, AVG(p.age) FROM PilotSkills p GROUP BY p.plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name",
          "SELECT plane_name, AVG(age) average_pilot_age FROM PilotSkills GROUP BY plane_name",
          "SELECT p.plane_name, average_age FROM (SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name) p",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) IS NOT NULL",
          "SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_type, COUNT(*) FROM Planes GROUP BY plane_type",
          "SELECT type AS plane_type, COUNT(plane_name) AS number_of_planes FROM Planes GROUP BY type",
          "SELECT p.type, COUNT(p.plane_name) FROM Planes p GROUP BY p.type",
          "SELECT COUNT(plane_name), type FROM Planes GROUP BY type",
          "SELECT type, COUNT(*) AS TotalPlanes FROM Planes GROUP BY type",
          "SELECT COUNT(*) FROM Planes GROUP BY type",
          "SELECT type, COUNT(plane_name) FROM Planes GROUP BY type",
          "SELECT type AS PlaneType, COUNT(*) AS PlaneCount FROM Planes GROUP BY PlaneType",
          "SELECT COUNT(plane_name), type AS PlaneType FROM Planes GROUP BY PlaneType",
          "SELECT type, COUNT(plane_name) AS NumberOfPlanes FROM Planes GROUP BY type"
        ]
      ]
    },
    {
      "id": 1156,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(*), plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(pilot_name), plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, COUNT(*) AS total FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(*) AS total_entries, plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name",
          "SELECT plane_name, COUNT(*) AS count_of_entries FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(*) AS number_of_pilots, plane_name FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MIN(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name",
          "SELECT p.plane_name, p.pilot_name FROM PilotSkills p INNER JOIN (SELECT plane_name, MIN(age) AS MinAge FROM PilotSkills GROUP BY plane_name) AS min ON p.plane_name = min.plane_name AND p.age = min.MinAge ORDER BY p.plane_name",
          "SELECT ps.plane_name, ps.pilot_name FROM PilotSkills ps JOIN (SELECT plane_name, MIN(age) as MinAge FROM PilotSkills GROUP BY plane_name) minps ON ps.plane_name = minps.plane_name AND ps.age = minps.MinAge ORDER BY ps.plane_name",
          "SELECT a.plane_name, a.pilot_name FROM PilotSkills a WHERE a.age = (SELECT MIN(b.age) FROM PilotSkills b WHERE b.plane_name = a.plane_name) ORDER BY a.plane_name",
          "SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age) as rank FROM PilotSkills) WHERE rank = 1 ORDER BY plane_name",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MIN(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name ASC",
          "SELECT DISTINCT p.plane_name, (SELECT pilot_name FROM PilotSkills WHERE plane_name = p.plane_name ORDER BY age LIMIT 1) AS pilot_name FROM PilotSkills p ORDER BY p.plane_name",
          "SELECT plane_name, MIN(pilot_name) AS pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MIN(age) FROM PilotSkills GROUP BY plane_name) GROUP BY plane_name ORDER BY plane_name",
          "SELECT p.plane_name, p.pilot_name FROM PilotSkills p WHERE p.age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = p.plane_name) ORDER BY p.plane_name",
          "SELECT plane_name, FIRST(pilot_name) OVER (PARTITION BY plane_name ORDER BY age ASC) AS pilot_name FROM PilotSkills GROUP BY plane_name, pilot_name ORDER BY plane_name"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) as rank FROM PilotSkills) WHERE rank = 1 ORDER BY plane_name",
          "SELECT H.plane_name, (SELECT P.pilot_name FROM PilotSkills P WHERE P.plane_name = H.plane_name ORDER BY P.age DESC LIMIT 1) AS pilot_name FROM Hangar H ORDER BY H.plane_name",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = P.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, MAX(P.pilot_name) KEEP (DENSE_RANK FIRST ORDER BY P.age DESC) AS pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, FIRST_VALUE(P.pilot_name) OVER (PARTITION BY H.plane_name ORDER BY P.age DESC) AS pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = P.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name, P.pilot_name HAVING P.age = MAX(P.age) ORDER BY H.plane_name"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT P.pilot_name, P.plane_name FROM PilotSkills P WHERE P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = P.plane_name)",
          "SELECT pilot_name, plane_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)",
          "SELECT A.pilot_name, A.plane_name FROM PilotSkills A INNER JOIN (SELECT plane_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY plane_name) B ON A.plane_name = B.plane_name AND A.age = B.MaxAge",
          "SELECT pilot_name, plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = PilotSkills.plane_name)",
          "SELECT P.pilot_name, P.plane_name FROM PilotSkills P JOIN (SELECT plane_name, MAX(age) as max_age FROM PilotSkills GROUP BY plane_name) AS MaxP ON P.plane_name = MaxP.plane_name AND P.age = MaxP.max_age",
          "SELECT pilot_name, plane_name FROM PilotSkills AS PS1 WHERE age = (SELECT MAX(age) FROM PilotSkills AS PS2 WHERE PS2.plane_name = PS1.plane_name GROUP BY plane_name)",
          "SELECT TOP 1 WITH TIES pilot_name, plane_name FROM PilotSkills ORDER BY RANK() OVER (PARTITION BY plane_name ORDER BY age DESC)",
          "SELECT pilot_name, plane_name FROM PilotSkills PS1 WHERE NOT EXISTS (SELECT 1 FROM PilotSkills PS2 WHERE PS2.plane_name = PS1.plane_name AND PS2.age > PS1.age)",
          "SELECT pilot_name, plane_name FROM (SELECT pilot_name, plane_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rank FROM PilotSkills) AS Ranked WHERE rank = 1",
          "SELECT pilot_name, plane_name FROM PilotSkills GROUP BY plane_name, pilot_name HAVING age = MAX(age)"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = P.plane_name)",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)",
          "SELECT ps.plane_name, ps.pilot_name FROM PilotSkills ps INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) max_ps ON ps.plane_name = max_ps.plane_name AND ps.age = max_ps.max_age",
          "SELECT a.plane_name, a.pilot_name FROM PilotSkills a WHERE a.age = (SELECT MAX(b.age) FROM PilotSkills b WHERE b.plane_name = a.plane_name)",
          "SELECT p.plane_name, (SELECT pilot_name FROM PilotSkills WHERE plane_name = p.plane_name AND age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = p.plane_name)) AS pilot_name FROM Hangar p",
          "SELECT DISTINCT p.plane_name, (SELECT pilot_name FROM PilotSkills ps WHERE ps.plane_name = p.plane_name ORDER BY age DESC LIMIT 1) AS oldest_pilot FROM Hangar p",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)",
          "SELECT h.plane_name, (SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = h.plane_name ORDER BY ps.age DESC LIMIT 1) AS oldest_pilot FROM Hangar h",
          "SELECT ps.plane_name, ps.pilot_name FROM PilotSkills ps JOIN (SELECT plane_name, MAX(age) AS oldest FROM PilotSkills GROUP BY plane_name) grp ON ps.plane_name = grp.plane_name AND ps.age = grp.oldest",
          "SELECT h.plane_name, ps.pilot_name FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = ps.plane_name)"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT PS.pilot_name, MAX(PS.age) AS MaximumAge FROM PilotSkills AS PS GROUP BY PS.pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name",
          "SELECT pilot_name, MAX(age) max_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT PS.pilot_name, MAX(PS.age) FROM PilotSkills PS GROUP BY PS.pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name HAVING MAX(age) IS NOT NULL",
          "SELECT pilot_name, MAX(age) AS oldest_pilot_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY MAX(age) DESC",
          "SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name ORDER BY max_age DESC"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT PS.pilot_name, MAX(PS.age) AS max_age FROM PilotSkills AS PS GROUP BY PS.pilot_name",
          "SELECT pilot_name, MAX(age) AS MaximumAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT p.pilot_name, MAX(p.age) FROM PilotSkills p GROUP BY p.pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name",
          "SELECT DISTINCT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) max_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name HAVING MAX(age) IS NOT NULL",
          "SELECT pilot_name AS Pilot, MAX(age) AS OldestAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY MAX(age) DESC"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*), avg(age), location FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT count(pilot_name) AS NumberOfPilots, avg(age) AS AverageAge, location FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, count(pilot_name), avg(PilotSkills.age) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, count(*), avg(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY Hangar.location",
          "SELECT location AS City, count(pilot_name) AS PilotCount, avg(age) AS AvgAge FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT H.location, count(P.pilot_name), avg(P.age) FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.location",
          "SELECT location, count(pilot_name) AS TotalPilots, avg(age) AS AveragePilotAge FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, count(pilot_name), avg(age) FROM PilotSkills LEFT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, count(pilot_name), avg(age) FROM PilotSkills RIGHT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, count(pilot_name), avg(age) FROM PilotSkills FULL OUTER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location, COUNT(pilot_name) AS num_pilots, AVG(age) AS average_age FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location, COUNT(PS.pilot_name), AVG(PS.age) FROM Hangar H JOIN PilotSkills PS ON H.plane_name = PS.plane_name GROUP BY H.location",
          "SELECT location, COUNT(DISTINCT pilot_name), AVG(age) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT location, COUNT(pilot_name) AS total_pilots, AVG(age) AS avg_age FROM Hangar LEFT JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location, COUNT(PS.pilot_name) AS pilot_count, AVG(PS.age) AS average_pilot_age FROM Hangar H, PilotSkills PS WHERE H.plane_name = PS.plane_name GROUP BY H.location",
          "SELECT location, COUNT(*) AS pilot_count, AVG(age) AS average_age FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT location, COUNT(pilot_name) AS number_of_pilots, AVG(age) FROM Hangar JOIN PilotSkills USING (plane_name) GROUP BY location",
          "SELECT H.location, COUNT(PS.pilot_name) AS pilots, AVG(PS.age) AS avg_age FROM Hangar AS H JOIN PilotSkills AS PS ON H.plane_name = PS.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name), AVG(age) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT location, COUNT(pilot_name) AS pilot_total, AVG(age) AS average_pilot_age FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT plane_name, COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT p.plane_name, COUNT(p.pilot_name) FROM PilotSkills p GROUP BY p.plane_name HAVING AVG(p.age) < 35",
          "SELECT h.plane_name, COUNT(ps.pilot_name) FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY h.plane_name HAVING AVG(ps.age) < 35",
          "SELECT plane_name, COUNT(DISTINCT pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT COUNT(pilot_name), plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT ps.plane_name, COUNT(ps.pilot_name) FROM PilotSkills ps WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE plane_name = ps.plane_name GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY ps.plane_name",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT H.plane_name, COUNT(P.pilot_name) AS pilot_count FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name HAVING AVG(P.age) < 35",
          "SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT p.plane_name, COUNT(p.pilot_name) FROM PilotSkills p GROUP BY p.plane_name HAVING AVG(p.age) < 35",
          "SELECT ps.plane_name, COUNT(ps.pilot_name) AS TotalPilots FROM PilotSkills ps WHERE ps.plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY ps.plane_name",
          "SELECT DISTINCT ps.plane_name, COUNT(ps.pilot_name) FROM PilotSkills ps GROUP BY ps.plane_name HAVING AVG(ps.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT p.plane_name, COUNT(DISTINCT p.pilot_name) FROM PilotSkills p WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE plane_name = p.plane_name GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY p.plane_name",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT ps.plane_name, COUNT(*) FROM PilotSkills ps INNER JOIN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) AS sub ON ps.plane_name = sub.plane_name GROUP BY ps.plane_name"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1)",
          "SELECT h.location FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name ORDER BY p.age LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY age LIMIT 1)",
          "SELECT Hangar.location FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY PilotSkills.age ASC LIMIT 1",
          "SELECT h.location FROM Hangar h, PilotSkills p WHERE h.plane_name = p.plane_name ORDER BY p.age ASC FETCH FIRST 1 ROW ONLY",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT TOP 1 plane_name FROM PilotSkills ORDER BY age)",
          "SELECT (SELECT location FROM Hangar WHERE plane_name = p.plane_name) FROM PilotSkills p ORDER BY p.age ASC LIMIT 1",
          "SELECT location FROM Hangar h WHERE EXISTS (SELECT 1 FROM PilotSkills p WHERE p.plane_name = h.plane_name ORDER BY p.age ASC LIMIT 1)",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age ASC FETCH FIRST ROW ONLY)",
          "SELECT h.location FROM Hangar h INNER JOIN (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1) AS youngest ON h.plane_name = youngest.plane_name"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.location FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY P.age ASC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age LIMIT 1)",
          "SELECT H.location FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name ORDER BY P.age LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY age LIMIT 1)",
          "SELECT H.location FROM Hangar AS H INNER JOIN PilotSkills AS P ON H.plane_name = P.plane_name ORDER BY P.age ASC FETCH FIRST ROW ONLY",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT TOP 1 plane_name FROM PilotSkills ORDER BY age)",
          "SELECT location FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY PilotSkills.age ASC LIMIT 1",
          "SELECT H.location FROM Hangar H INNER JOIN (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1) AS P ON H.plane_name = P.plane_name",
          "SELECT location FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name ORDER BY age LIMIT 1)",
          "SELECT H.location FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MIN(age) FROM PilotSkills) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills AS PS INNER JOIN Hangar AS H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT P.pilot_name, P.age FROM PilotSkills P, Hangar H WHERE P.plane_name = H.plane_name AND H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name AND H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills WHERE EXISTS (SELECT 1 FROM Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND location = 'Austin')",
          "SELECT pilot_name, age FROM PilotSkills PS LEFT JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills AS PS INNER JOIN Hangar AS H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS, Hangar H WHERE PS.plane_name = H.plane_name AND H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS INNER JOIN Hangar H ON PS.plane_name = H.plane_name AND H.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills WHERE EXISTS (SELECT 1 FROM Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND location = 'Austin')",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS LEFT JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 WHERE p1.age > (SELECT MIN(p2.age) FROM PilotSkills p2 WHERE p2.plane_name = 'Piper Cub') ORDER BY p1.pilot_name",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > ANY (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1) ORDER BY pilot_name",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN PilotSkills pc ON p.age > pc.age WHERE pc.plane_name = 'Piper Cub' ORDER BY p.pilot_name",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MIN(pc.age) FROM PilotSkills pc WHERE pc.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE EXISTS (SELECT 1 FROM PilotSkills pc WHERE pc.plane_name = 'Piper Cub' AND p.age > pc.age) ORDER BY p.pilot_name",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MIN(pc.age) FROM PilotSkills pc WHERE pc.plane_name = 'Piper Cub') ORDER BY p.pilot_name",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MIN(pc.age) FROM PilotSkills pc WHERE pc.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY p.pilot_name",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > ALL (SELECT ps.age FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY pilot_name ASC"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT count(pilot_name) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.plane_name = 'F-14 Fighter')",
          "SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY plane_name)",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter')",
          "SELECT count(*) FROM PilotSkills ps1 WHERE age < (SELECT min(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter')",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'F-14 Fighter'))",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.plane_name = 'F-14 Fighter')",
          "SELECT count(*) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND plane_name IN (SELECT plane_name FROM Hangar))"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter') GROUP BY pilot_name",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')) AS younger_pilots",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MIN(PilotSkills.age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills GROUP BY pilot_name HAVING age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills ps1 WHERE NOT EXISTS (SELECT 1 FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter' AND ps2.age <= ps1.age)",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills ps1 WHERE ps1.age < ALL (SELECT ps2.age FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING MIN(age) < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')) AS result"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
          "SELECT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
          "SELECT DISTINCT H.plane_name FROM Hangar H WHERE H.plane_name LIKE '%Bomber%'",
          "SELECT DISTINCT P.plane_name FROM PilotSkills P WHERE P.plane_name LIKE '%Bomber%'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name COLLATE UTF8_GENERAL_CI LIKE '%Bomber%'",
          "SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name COLLATE UTF8_GENERAL_CI LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name ILIKE '%Bomber%'",
          "SELECT plane_name FROM PilotSkills WHERE plane_name ILIKE '%Bomber%'"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
          "SELECT DISTINCT H.plane_name FROM Hangar H WHERE H.plane_name LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' DISTINCT",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name COLLATE UTF8_GENERAL_CI LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name ILIKE '%Bomber%'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE INSTR(plane_name, 'Bomber') > 0",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name REGEXP 'Bomber'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE LOWER(plane_name) LIKE LOWER('%Bomber%')",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT count(pilot_name) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > ANY (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > ANY (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' LIMIT 1)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY plane_name)"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(PilotSkills.age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(PilotSkills.age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE PilotSkills.plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills ps1 WHERE ps1.age > (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT ps1.pilot_name) FROM PilotSkills ps1 WHERE ps1.age > (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY plane_name)"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1",
          "SELECT d.Name FROM district d ORDER BY d.Area_km DESC LIMIT 1",
          "SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district)",
          "SELECT district.Name FROM district ORDER BY district.Area_km DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Name FROM district ORDER BY Area_km DESC",
          "SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1 OFFSET 0",
          "SELECT Name FROM (SELECT Name, Area_km FROM district ORDER BY Area_km DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM district WHERE Area_km IN (SELECT MAX(Area_km) FROM district)",
          "SELECT Name FROM district ORDER BY Area_km DESC, District_ID ASC LIMIT 1",
          "SELECT d.Name FROM district AS d ORDER BY d.Area_km DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1",
          "SELECT d.Area_km, d.Government_website FROM district d ORDER BY d.Population ASC LIMIT 1",
          "SELECT `Area_km`, `Government_website` FROM `district` ORDER BY `Population` ASC LIMIT 1",
          "SELECT district.Area_km, district.Government_website FROM district ORDER BY district.Population ASC FETCH FIRST 1 ROW ONLY",
          "SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district)",
          "SELECT d.Area_km, d.Government_website FROM district AS d WHERE d.Population = (SELECT MIN(Population) FROM district AS d2)",
          "SELECT TOP 1 Area_km, Government_website FROM district ORDER BY Population",
          "SELECT Area_km, Government_website FROM district ORDER BY Population LIMIT 1 OFFSET 0",
          "SELECT FIRST(Area_km), FIRST(Government_website) FROM district ORDER BY Population",
          "SELECT Area_km, Government_website FROM district WHERE Population IN (SELECT MIN(Population) FROM district)"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT d.Name, d.Population FROM district d WHERE d.Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district AS sub)",
          "SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(d.Area_km) FROM district d)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district GROUP BY District_ID)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district WHERE Area_km IS NOT NULL)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district WHERE Area_km > 0)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district WHERE Population > 0)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district WHERE District_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT max(Area_km), avg(Area_km) FROM district",
          "SELECT MAX(Area_km), AVG(Area_km) FROM district",
          "SELECT maximum(Area_km), average(Area_km) FROM district",
          "SELECT MAXIMUM(Area_km), AVERAGE(Area_km) FROM district",
          "SELECT MAX(district.Area_km), AVG(district.Area_km) FROM district",
          "SELECT MAXIMUM(district.Area_km), AVERAGE(district.Area_km) FROM district",
          "SELECT MAX(Area_km) AS LargestArea, AVG(Area_km) AS AverageArea FROM district",
          "SELECT MAXIMUM(Area_km) AS LargestArea, AVERAGE(Area_km) AS AverageArea FROM district",
          "SELECT MAX(Area_km) AS MaxArea, AVG(Area_km) AS AvgArea FROM district",
          "SELECT MAXIMUM(Area_km) AS MaxArea, AVERAGE(Area_km) AS AvgArea FROM district"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT SUM(Population) FROM district ORDER BY Area_km DESC LIMIT 3",
          "SELECT SUM(Population) FROM (SELECT Population FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(d.Population) FROM district d ORDER BY d.Area_km DESC LIMIT 3",
          "SELECT SUM(Population) AS TotalPopulation FROM district ORDER BY Area_km DESC LIMIT 3",
          "SELECT SUM(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM (SELECT Population FROM district ORDER BY Area_km DESC LIMIT 3) AS TopDistricts",
          "SELECT SUM(Population) FROM district d WHERE d.District_ID IN (SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM (SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3) AS SubQuery)",
          "SELECT SUM(d.Population) FROM district AS d WHERE d.District_ID IN (SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM district ORDER BY Area_km DESC FETCH FIRST 3 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population",
          "SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population ASC",
          "SELECT d.District_ID, d.Name, d.Government_website FROM district AS d ORDER BY d.Population ASC",
          "SELECT `District_ID`, `Name`, `Government_website` FROM `district` ORDER BY `Population` ASC",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASCENDING",
          "SELECT * FROM district ORDER BY Population ASC",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASC",
          "SELECT Name, District_ID, Government_website FROM district ORDER BY Population",
          "SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY Population ASC",
          "SELECT d.District_ID, d.Name, d.Government_website FROM district d ORDER BY d.Population ASC"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov%'",
          "SELECT district.Name FROM district WHERE district.Government_website LIKE '%.gov%'",
          "SELECT d.Name FROM district d WHERE d.Government_website LIKE '%.gov%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov.%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov.%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov.com%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov.com%'",
          "SELECT district.Name FROM district WHERE district.Government_website LIKE '%gov%'",
          "SELECT d.Name FROM district d WHERE d.Government_website LIKE '%gov%'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000",
          "SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000",
          "SELECT `District_ID`, `Name` FROM `district` WHERE `Population` > 4000 OR `Area_km` > 3000",
          "SELECT district.District_ID, district.Name FROM district WHERE district.Population > 4000 OR district.Area_km > 3000",
          "SELECT Name, District_ID FROM district WHERE Population > 4000 OR Area_km > 3000",
          "SELECT Name, District_ID FROM district WHERE (Population > 4000) OR (Area_km > 3000)",
          "SELECT d.Name, d.District_ID FROM district AS d WHERE d.Population > 4000 OR d.Area_km > 3000",
          "SELECT Name AS DistrictName, District_ID AS DistrictID FROM district WHERE Population > 4000 OR Area_km > 3000",
          "SELECT district.Name, district.District_ID FROM district WHERE district.Population > 4000 OR district.Area_km > 3000",
          "SELECT Name, District_ID FROM district WHERE Population > 4000 OR Area_km > 3000 ORDER BY District_ID"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT s.Name, s.Speach_title FROM spokesman AS s",
          "SELECT Name, Speach_title FROM spokesman",
          "SELECT `Name`, `Speach_title` FROM `spokesman`",
          "SELECT spokesman.Name, spokesman.Speach_title FROM spokesman",
          "SELECT Name AS SpokesmanName, Speach_title AS SpeechTitle FROM spokesman",
          "SELECT s.Name AS SpokesmanName, s.Speach_title AS SpeechTitle FROM spokesman s",
          "SELECT Name, Speach_title FROM spokesman ORDER BY Name",
          "SELECT DISTINCT Name, Speach_title FROM spokesman",
          "SELECT Name AS `Spokesman Name`, Speach_title AS `Speech Title` FROM spokesman",
          "SELECT * FROM spokesman WHERE Speach_title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1188,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT avg(Points), avg(Age) FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) AS Average_Points, AVG(Age) AS Average_Age FROM spokesman WHERE Rank_position = 1",
          "SELECT average(Points), average(Age) FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points), AVG(Age) FROM spokesman WHERE Rank_position = 1 GROUP BY Rank_position",
          "SELECT AVG(s.Points) AS AvgPoints, AVG(s.Age) AS AvgAge FROM spokesman s WHERE s.Rank_position = 1",
          "SELECT AVG(Points) AveragePoints, AVG(Age) AverageAge FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) as 'Average Points', AVG(Age) as 'Average Age' FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) avg_points, AVG(Age) avg_age FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) avgPoints, AVG(Age) avgAge FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) averagePoints, AVG(Age) averageAge FROM spokesman WHERE Rank_position = 1"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name, Points FROM spokesman WHERE Age < 40",
          "SELECT s.Name, s.Points FROM spokesman s WHERE s.Age < 40",
          "SELECT Name, Points FROM spokesman WHERE Age < 40;",
          "SELECT spokesman.Name, spokesman.Points FROM spokesman WHERE spokesman.Age < 40",
          "SELECT `Name`, `Points` FROM `spokesman` WHERE `Age` < 40",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Points DESC",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Name ASC",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Name",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Points",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Age"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1",
          "SELECT s.Name FROM spokesman s ORDER BY s.Age DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Name FROM spokesman ORDER BY Age DESC",
          "SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman)",
          "SELECT Name FROM spokesman ORDER BY Age DESC, Spokesman_ID ASC LIMIT 1",
          "SELECT Name FROM (SELECT Name, Age FROM spokesman ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM spokesman WHERE Age >= ALL (SELECT Age FROM spokesman)",
          "SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(Name) FROM spokesman ORDER BY Age DESC",
          "SELECT Name FROM spokesman AS s WHERE s.Age = (SELECT MAX(Age) FROM spokesman AS sub)"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(sp.Points) FROM spokesman sp)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman AS sp)",
          "SELECT s.Name FROM spokesman AS s WHERE s.Points < (SELECT AVG(sp.Points) FROM spokesman AS sp)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman sp)",
          "SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(sp.Points) FROM spokesman sp)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT s.Name FROM spokesman AS s WHERE s.Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID ORDER BY COUNT(sd.Spokesman_ID) DESC LIMIT 1",
          "SELECT Name FROM district WHERE District_ID = (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(Spokesman_ID) DESC LIMIT 1)",
          "SELECT d.Name FROM district AS d INNER JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Spokesman_ID) AS Cnt FROM spokesman_district GROUP BY District_ID)))",
          "SELECT (SELECT Name FROM district WHERE District_ID = sd.District_ID) AS DistrictName FROM spokesman_district sd GROUP BY sd.District_ID ORDER BY COUNT(sd.Spokesman_ID) DESC LIMIT 1",
          "SELECT TOP 1 d.Name FROM district d, spokesman_district sd WHERE d.District_ID = sd.District_ID GROUP BY d.District_ID ORDER BY COUNT(sd.Spokesman_ID) DESC",
          "SELECT d.Name FROM district d WHERE d.District_ID = (SELECT sd.District_ID FROM spokesman_district sd GROUP BY sd.District_ID ORDER BY COUNT(sd.Spokesman_ID) DESC LIMIT 1)",
          "SELECT Name FROM district WHERE District_ID = (SELECT TOP 1 District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(*) DESC)",
          "SELECT d.Name FROM district d INNER JOIN (SELECT District_ID, COUNT(Spokesman_ID) AS TotalSpokesmen FROM spokesman_district GROUP BY District_ID ORDER BY TotalSpokesmen DESC LIMIT 1) AS sd ON d.District_ID = sd.District_ID",
          "SELECT Name FROM district WHERE District_ID = (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(Spokesman_ID) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT s.Name FROM spokesman AS s JOIN spokesman_district AS sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004",
          "SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004)",
          "SELECT DISTINCT s.Name FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004",
          "SELECT s.Name FROM spokesman s INNER JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004",
          "SELECT Name FROM spokesman WHERE EXISTS (SELECT 1 FROM spokesman_district WHERE Spokesman_ID = spokesman.Spokesman_ID AND Start_year < 2004)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID IN (SELECT sd.Spokesman_ID FROM spokesman_district sd WHERE sd.Start_year < 2004)",
          "SELECT spokesman.Name FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE spokesman_district.Start_year < 2004",
          "SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004 GROUP BY Spokesman_ID)",
          "SELECT DISTINCT Name FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE Start_year < 2004",
          "SELECT s.Name FROM spokesman s LEFT JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT d.Name, COUNT(s.Spokesman_ID) FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID GROUP BY d.District_ID",
          "SELECT district.Name, COUNT(spokesman.Spokesman_ID) AS Num_Spokesmen FROM district INNER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID INNER JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID GROUP BY district.District_ID",
          "SELECT d.Name AS DistrictName, COUNT(*) AS SpokesmenCount FROM district d, spokesman_district sd, spokesman s WHERE d.District_ID = sd.District_ID AND sd.Spokesman_ID = s.Spokesman_ID GROUP BY d.District_ID",
          "SELECT Name, COUNT(spokesman.Spokesman_ID) FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID LEFT JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID GROUP BY district.District_ID",
          "SELECT d.Name, COUNT(s.Spokesman_ID) AS TotalSpokesmen FROM district AS d LEFT JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID LEFT JOIN spokesman AS s ON s.Spokesman_ID = sd.Spokesman_ID GROUP BY d.District_ID",
          "SELECT Name, COUNT(DISTINCT spokesman.Spokesman_ID) FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID JOIN spokesman ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID GROUP BY district.District_ID",
          "SELECT district.Name, COUNT(spokesman.Spokesman_ID) FROM district, spokesman_district, spokesman WHERE district.District_ID = spokesman_district.District_ID AND spokesman_district.Spokesman_ID = spokesman.Spokesman_ID GROUP BY district.District_ID",
          "SELECT d.Name AS District, COUNT(s.Spokesman_ID) AS Spokesmen FROM district d INNER JOIN spokesman_district sd ON d.District_ID = sd.District_ID INNER JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID GROUP BY d.District_ID",
          "SELECT Name, COUNT(spokesman.Spokesman_ID) FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID GROUP BY d.District_ID",
          "SELECT d.Name, COUNT(*) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID LEFT JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID GROUP BY d.District_ID"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1 INTERSECT SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1)) INTERSECT SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2))",
          "SELECT d.Name FROM district AS d INNER JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID INNER JOIN spokesman AS s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1 INTERSECT SELECT d.Name FROM district AS d INNER JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID INNER JOIN spokesman AS s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2",
          "SELECT DISTINCT d.Name FROM district d, spokesman_district sd, spokesman s WHERE d.District_ID = sd.District_ID AND sd.Spokesman_ID = s.Spokesman_ID AND s.Rank_position = 1 INTERSECT SELECT DISTINCT d.Name FROM district d, spokesman_district sd, spokesman s WHERE d.District_ID = sd.District_ID AND sd.Spokesman_ID = s.Spokesman_ID AND s.Rank_position = 2",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE Rank_position = 1) INTERSECT SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE Rank_position = 2)",
          "SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 2)",
          "SELECT d.Name FROM district d WHERE d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1) AND d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2)",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district sd INNER JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1) INTERSECT SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district sd INNER JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2)",
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON s.Spokesman_ID = sd.Spokesman_ID WHERE s.Rank_position = 1 INTERSECT SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON s.Spokesman_ID = sd.Spokesman_ID WHERE s.Rank_position = 2",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1)) INTERSECT SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2))"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) > 1)",
          "SELECT district.Name FROM district INNER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(spokesman_district.Spokesman_ID) > 1",
          "SELECT d.Name FROM district AS d, spokesman_district AS sd WHERE d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(*) > 1)",
          "SELECT d.Name FROM district d INNER JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(DISTINCT sd.Spokesman_ID) > 1",
          "SELECT Name FROM (SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS NumSpokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID) AS SubQuery WHERE NumSpokesmen > 1",
          "SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1",
          "SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID GROUP BY sd.District_ID HAVING COUNT(sd.Spokesman_ID) > 1)",
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)",
          "SELECT count(District_ID) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)",
          "SELECT COUNT(*) FROM district d WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)",
          "SELECT COUNT(d.District_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL",
          "SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT DISTINCT District_ID FROM spokesman_district)",
          "SELECT COUNT(DISTINCT d.District_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL",
          "SELECT COUNT(*) FROM district d WHERE d.District_ID NOT IN (SELECT sd.District_ID FROM spokesman_district sd)",
          "SELECT COUNT(*) FROM district WHERE NOT EXISTS (SELECT 1 FROM spokesman_district WHERE spokesman_district.District_ID = district.District_ID)",
          "SELECT COUNT(DISTINCT district.District_ID) FROM district LEFT OUTER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.District_ID IS NULL",
          "SELECT COUNT(*) FROM (SELECT d.District_ID FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL) AS result"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
          "SELECT s.Name FROM spokesman s LEFT JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.District_ID IS NULL",
          "SELECT Name FROM spokesman WHERE NOT EXISTS (SELECT 1 FROM spokesman_district WHERE spokesman.Spokesman_ID = spokesman_district.Spokesman_ID)",
          "SELECT s.Name FROM spokesman s WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.Spokesman_ID = s.Spokesman_ID)",
          "SELECT Name FROM spokesman EXCEPT SELECT Name FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT sd.Spokesman_ID FROM spokesman_district sd)",
          "SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT DISTINCT Spokesman_ID FROM spokesman_district)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT DISTINCT sd.Spokesman_ID FROM spokesman_district sd)",
          "SELECT Name FROM spokesman AS s WHERE NOT EXISTS (SELECT NULL FROM spokesman_district AS sd WHERE s.Spokesman_ID = sd.Spokesman_ID)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT sum(Population) AS Total_Population, avg(Population) AS Average_Population FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)",
          "SELECT sum(d.Population) Total, avg(d.Population) Average FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID",
          "SELECT sum(Population) Total_Population, avg(Population) Average_Population FROM district WHERE District_ID IN (SELECT DISTINCT District_ID FROM spokesman_district)",
          "SELECT sum(Population), avg(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)",
          "SELECT sum(d.Population) as TotalPopulation, avg(d.Population) as AvgPopulation FROM district d INNER JOIN spokesman_district sd ON d.District_ID = sd.District_ID",
          "SELECT sum(Population) Total, avg(Population) Average FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)",
          "SELECT sum(Population) as TotalPop, avg(Population) as AvgPop FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID)",
          "SELECT sum(d.Population) TotalPopulation, avg(d.Population) AveragePopulation FROM district d, spokesman_district sd WHERE d.District_ID = sd.District_ID GROUP BY sd.District_ID",
          "SELECT sum(Population) TotalPopulation, avg(Population) AveragePopulation FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Start_year IS NOT NULL)",
          "SELECT sum(d.Population) as TotalPop, avg(d.Population) as AvgPop FROM district d WHERE d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd)"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1",
          "SELECT Sculptures.title FROM Sculptures ORDER BY Sculptures.year DESC LIMIT 1",
          "SELECT title FROM Sculptures ORDER BY year DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 title FROM Sculptures ORDER BY year DESC",
          "SELECT S.title FROM Sculptures AS S ORDER BY S.year DESC LIMIT 1",
          "SELECT title FROM Sculptures ORDER BY year DESC, sculptureID DESC LIMIT 1",
          "SELECT title FROM (SELECT title, year FROM Sculptures ORDER BY year DESC) AS RecentSculpture LIMIT 1",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(title) FROM Sculptures ORDER BY year DESC"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT S.title FROM Sculptures S ORDER BY S.year DESC LIMIT 1",
          "SELECT title FROM Sculptures ORDER BY year DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 title FROM Sculptures ORDER BY year DESC",
          "SELECT title FROM Sculptures WHERE year IN (SELECT MAX(year) FROM Sculptures)",
          "SELECT title FROM Sculptures ORDER BY year DESC, sculptureID DESC LIMIT 1",
          "SELECT title FROM (SELECT title, year FROM Sculptures ORDER BY year DESC) WHERE ROWNUM = 1",
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1 OFFSET 0",
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT Paintings.title, Paintings.location FROM Paintings ORDER BY Paintings.year ASC LIMIT 1",
          "SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT Paintings.title, Paintings.location FROM Paintings WHERE Paintings.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT p.title, p.location FROM Paintings p WHERE p.year = (SELECT MIN(year) FROM Paintings p)",
          "SELECT TOP 1 title, location FROM Paintings ORDER BY year",
          "SELECT TOP 1 p.title, p.location FROM Paintings p ORDER BY p.year",
          "SELECT title, location FROM Paintings ORDER BY year LIMIT 1 OFFSET 0",
          "SELECT p.title, p.location FROM Paintings p ORDER BY p.year LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT P.title, P.location FROM Paintings P ORDER BY P.year ASC LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT P.title, P.location FROM Paintings P WHERE P.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT title, location FROM Paintings ORDER BY year LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) LIMIT 1",
          "SELECT P.title, P.location FROM Paintings P ORDER BY year LIMIT 1",
          "SELECT title, location FROM Paintings ORDER BY year ASC FETCH FIRST ROW ONLY",
          "SELECT title, location FROM Paintings ORDER BY year ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT first(title), first(location) FROM Paintings ORDER BY year"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'",
          "SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND sculptureID IS NOT NULL",
          "SELECT Sculptures.title FROM Sculptures WHERE location = 'gallery 226' AND Sculptures.sculptureID > 0",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' ORDER BY title",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND title IS NOT NULL",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND title <> ''",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND title IS NOT NULL ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings",
          "SELECT Paintings.title, Paintings.location FROM Paintings",
          "SELECT p.title, p.location FROM Paintings p",
          "SELECT `title`, `location` FROM `Paintings`",
          "SELECT title AS PaintingTitle, location AS PaintingLocation FROM Paintings",
          "SELECT Paintings.title AS Title, Paintings.location AS Location FROM Paintings",
          "SELECT title, location FROM Paintings WHERE title IS NOT NULL",
          "SELECT DISTINCT title, location FROM Paintings",
          "SELECT title, location FROM Paintings ORDER BY title",
          "SELECT title, location FROM Paintings ORDER BY location DESC"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings",
          "SELECT Paintings.title, Paintings.location FROM Paintings",
          "SELECT p.title, p.location FROM Paintings p",
          "SELECT `title`, `location` FROM `Paintings`",
          "SELECT title AS PaintingName, location AS PaintingLocation FROM Paintings",
          "SELECT Paintings.title AS 'Painting Title', Paintings.location AS 'Location' FROM Paintings",
          "SELECT title, location FROM Paintings WHERE location IS NOT NULL",
          "SELECT DISTINCT title, location FROM Paintings",
          "SELECT p.title, p.location FROM Paintings AS p",
          "SELECT title, location FROM Paintings ORDER BY title"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Sculptures",
          "SELECT Sculptures.title, Sculptures.location FROM Sculptures",
          "SELECT `title`, `location` FROM `Sculptures`",
          "SELECT Sculptures.title AS Title, Sculptures.location AS Location FROM Sculptures",
          "SELECT title AS SculptureTitle, location AS SculptureLocation FROM Sculptures",
          "SELECT s.title, s.location FROM Sculptures s",
          "SELECT title, location FROM Sculptures ORDER BY title",
          "SELECT title, location FROM Sculptures WHERE location IS NOT NULL",
          "SELECT DISTINCT title, location FROM Sculptures",
          "SELECT title, location FROM Sculptures GROUP BY title, location"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Sculptures",
          "SELECT Sculptures.title, Sculptures.location FROM Sculptures",
          "SELECT s.title, s.location FROM Sculptures s",
          "SELECT title AS Sculpture_Name, location AS Location FROM Sculptures",
          "SELECT Sculptures.title AS Sculpture_Title, Sculptures.location AS Sculpture_Location FROM Sculptures",
          "SELECT `title`, `location` FROM `Sculptures`",
          "SELECT Sculptures.title, Sculptures.location FROM Sculptures ORDER BY Sculptures.title",
          "SELECT title, location FROM Sculptures WHERE location IS NOT NULL",
          "SELECT title, location FROM Sculptures WHERE title IS NOT NULL",
          "SELECT title AS Name, location AS Place FROM Sculptures WHERE location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium FROM Paintings WHERE paintingID = 80",
          "SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80",
          "SELECT p.medium FROM Paintings p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80;",
          "SELECT `medium` FROM `Paintings` WHERE `paintingID` = 80",
          "SELECT Paintings.medium FROM Paintings WHERE paintingID = '80'",
          "SELECT medium FROM Paintings WHERE paintingID = (SELECT paintingID FROM Paintings WHERE paintingID = 80)",
          "SELECT medium FROM Paintings WHERE paintingID IN (SELECT paintingID FROM Paintings WHERE paintingID = 80)",
          "SELECT p.medium FROM Paintings AS p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80 LIMIT 1"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium FROM Paintings WHERE paintingID = 80",
          "SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80",
          "SELECT p.medium FROM Paintings p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80;",
          "SELECT Paintings.medium FROM Paintings WHERE paintingID = 80;",
          "SELECT p.medium FROM Paintings AS p WHERE p.paintingID = 80",
          "SELECT `medium` FROM `Paintings` WHERE `paintingID` = 80",
          "SELECT medium FROM Paintings WHERE paintingID = '80'",
          "SELECT medium FROM Paintings WHERE paintingID = 80 LIMIT 1",
          "SELECT medium FROM Paintings WHERE paintingID = 80 AND medium IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850",
          "SELECT fname AS FirstName, lname AS LastName FROM Artists WHERE birthYear > 1850",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.birthYear > 1850",
          "SELECT first_name, last_name FROM (SELECT fname AS first_name, lname AS last_name, birthYear FROM Artists) WHERE birthYear > 1850",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 ORDER BY lname",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 ORDER BY fname",
          "SELECT DISTINCT fname, lname FROM Artists WHERE birthYear > 1850",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 AND deathYear IS NOT NULL",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 AND deathYear IS NULL",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 GROUP BY fname, lname"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850",
          "SELECT CONCAT(fname, ' ', lname) AS FullName FROM Artists WHERE birthYear > 1850",
          "SELECT fname || ' ' || lname AS FullName FROM Artists WHERE birthYear > 1850",
          "SELECT fname + ' ' + lname AS FullName FROM Artists WHERE birthYear > 1850",
          "SELECT Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.birthYear > 1850",
          "SELECT first_name, last_name FROM Artists WHERE birth_year > 1850",
          "SELECT first_name || ' ' || last_name AS full_name FROM Artists WHERE birth_year > 1850",
          "SELECT first_name + ' ' + last_name AS full_name FROM Artists WHERE birth_year > 1850",
          "SELECT A.first_name, A.last_name FROM Artists A WHERE A.birth_year > 1850"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE NOT location = 'gallery 226'",
          "SELECT Sculptures.title, Sculptures.year FROM Sculptures WHERE Sculptures.location <> 'gallery 226'",
          "SELECT s.title, s.year FROM Sculptures s WHERE s.location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT IN ('gallery 226')",
          "SELECT title, year FROM Sculptures WHERE location <> 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE NOT (location = 'gallery 226')",
          "SELECT title, year FROM Sculptures WHERE location IS NOT 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226' AND location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226'",
          "SELECT Sculptures.title, Sculptures.year FROM Sculptures WHERE Sculptures.location <> 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE NOT location = 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT IN ('gallery 226')",
          "SELECT S.title, S.year FROM Sculptures AS S WHERE S.location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location IS NOT 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location <> 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT EQUALS 'gallery 226'"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists AS A, Sculptures AS S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT A.fname AS FirstName, A.lname AS LastName FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year < 1900)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT A.fname AS FirstName, A.lname AS LastName FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year < 1900)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT first_name, last_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID AND S.year < 1900"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)",
          "SELECT DISTINCT Artists.birthYear FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists, Sculptures WHERE Artists.artistID = Sculptures.sculptorID AND Sculptures.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE A.artistID IN (SELECT S.sculptorID FROM Sculptures S WHERE S.year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID AND year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID AND S.year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE Sculptures.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT S.sculptorID FROM Sculptures S WHERE S.year > 1920)"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT A.fname, A.lname FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL)",
          "SELECT TOP 1 fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC",
          "SELECT fname, lname FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1",
          "SELECT A.fname, A.lname FROM Artists A ORDER BY A.deathYear - A.birthYear DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE (deathYear IS NOT NULL AND birthYear IS NOT NULL) ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname || ' ' || lname AS full_name FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT CONCAT(fname, ' ', lname) AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname || ' ' || lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1",
          "SELECT fname || ' ' || lname AS full_name FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT CONCAT(fname, ' ', lname) FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1",
          "SELECT fname || ' ' || lname AS ArtistFullName FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname || ' ' || lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists LIMIT 1)",
          "SELECT fname || ' ' || lname AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists LIMIT 1)",
          "SELECT CONCAT(fname, ' ', lname) AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MIN(deathYear - birthYear) AS shortest_lifespan FROM Artists",
          "SELECT (deathYear - birthYear) AS age FROM Artists ORDER BY age ASC LIMIT 1",
          "SELECT birthYear, deathYear, (deathYear - birthYear) AS age FROM Artists ORDER BY age ASC LIMIT 1",
          "SELECT MIN(deathYear - birthYear) FROM Artists",
          "SELECT deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MIN(deathYear - birthYear) FROM Artists)",
          "SELECT MIN(deathYear - birthYear) AS shortest_life_span FROM Artists WHERE deathYear IS NOT NULL",
          "SELECT (deathYear - birthYear) AS shortest_lifespan FROM Artists ORDER BY shortest_lifespan ASC LIMIT 1",
          "SELECT MIN(deathYear - birthYear) AS age FROM Artists WHERE deathYear IS NOT NULL",
          "SELECT birthYear, deathYear, (deathYear - birthYear) AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL)",
          "SELECT MIN(deathYear - birthYear) AS age FROM Artists WHERE deathYear > birthYear"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MIN(deathYear - birthYear) AS ShortestLifespan FROM Artists",
          "SELECT birthYear, deathYear, (deathYear - birthYear) AS Age FROM Artists ORDER BY Age ASC LIMIT 1",
          "SELECT (deathYear - birthYear) AS Age FROM Artists WHERE (deathYear - birthYear) = (SELECT MIN(deathYear - birthYear) FROM Artists)",
          "SELECT MIN(deathYear - birthYear) FROM Artists",
          "SELECT (MIN(deathYear) - MAX(birthYear)) AS ShortestLived FROM Artists",
          "SELECT TOP 1 (deathYear - birthYear) AS Age FROM Artists ORDER BY Age ASC",
          "SELECT (deathYear - birthYear) AS Age FROM Artists ORDER BY Age ASC LIMIT 1",
          "SELECT MIN(Age) FROM (SELECT (deathYear - birthYear) AS Age FROM Artists) AS Lifespan",
          "SELECT birthYear, deathYear, (deathYear - birthYear) AS ShortestLife FROM Artists ORDER BY ShortestLife ASC LIMIT 1",
          "SELECT (deathYear - birthYear) AS ShortestLifeSpan FROM Artists ORDER BY ShortestLifeSpan ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE deathYear IS NOT NULL ORDER BY age DESC LIMIT 1",
          "SELECT fname, MAX(deathYear - birthYear) AS age FROM Artists GROUP BY artistID ORDER BY age DESC LIMIT 1",
          "SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A ORDER BY age DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE deathYear > birthYear ORDER BY age DESC LIMIT 1",
          "SELECT fname, deathYear - birthYear AS age FROM Artists WHERE deathYear IS NOT NULL ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL ORDER BY age DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE deathYear > 0 AND birthYear > 0 ORDER BY age DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE NOT deathYear IS NULL ORDER BY age DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1",
          "SELECT fname, MAX(deathYear - birthYear) AS age FROM Artists GROUP BY artistID ORDER BY age DESC LIMIT 1",
          "SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists) LIMIT 1",
          "SELECT TOP 1 fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC",
          "SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE artistID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) AS NumberOfPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(1) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) AS TotalPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' GROUP BY location",
          "SELECT COUNT(DISTINCT paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings p WHERE p.location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' AND title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) AS TotalPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(1) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) AS NumberOfPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings p WHERE p.location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' AND paintingID IS NOT NULL",
          "SELECT COUNT(DISTINCT paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' GROUP BY location"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)",
          "SELECT COUNT(paintingID) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE (Artists.deathYear - Artists.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(P.paintingID) FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings P WHERE P.painterID = (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(P.paintingID) FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists GROUP BY artistID)",
          "SELECT COUNT(paintingID) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists) LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists))"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)",
          "SELECT COUNT(paintingID) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE (Artists.deathYear - Artists.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(P.paintingID) FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings P WHERE P.painterID = (SELECT A.artistID FROM Artists A ORDER BY (A.deathYear - A.birthYear) DESC LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(paintingID) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC, artistID ASC LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists) LIMIT 1)",
          "SELECT COUNT(P.paintingID) FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.artistID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.year FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Mary'",
          "SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary')",
          "SELECT Paintings.title, Paintings.year FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT title AS Painting_Name, year AS Creation_Year FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Mary'",
          "SELECT title, year FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT A.fname, P.title, P.year FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND A.fname = 'Mary'",
          "SELECT title, year FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE fname = 'Mary')",
          "SELECT Paintings.title, Paintings.year FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Mary'",
          "SELECT p.title, p.year FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.fname = 'Mary'"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.year FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Mary'",
          "SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary')",
          "SELECT Paintings.title, Paintings.year FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT title AS PaintingName, year AS CreationYear FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Mary'",
          "SELECT title, year FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT Paintings.title, Paintings.year FROM Paintings LEFT JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT title, year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'",
          "SELECT title, year FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE fname = 'Mary')"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT Paintings.width_mm FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.birthYear < 1850",
          "SELECT width_mm FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT Paintings.width_mm FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.birthYear < 1850",
          "SELECT width_mm FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Pablo'",
          "SELECT P.location, P.medium FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT Paintings.location, Paintings.medium FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'",
          "SELECT location AS PaintingLocation, medium AS PaintingMedium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Pablo'",
          "SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo'",
          "SELECT Paintings.location, Paintings.medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT p.location, p.medium FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Pablo'",
          "SELECT P.location, P.medium FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'",
          "SELECT Paintings.location AS Location, Paintings.medium AS Medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT P.location, P.medium FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo'",
          "SELECT location AS PaintingLocation, medium AS PaintingMedium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT Paintings.location, Paintings.medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID",
          "SELECT DISTINCT first_name, last_name FROM Artists a, Paintings p, Sculptures s WHERE a.artistID = p.painterID AND a.artistID = s.sculptorID",
          "SELECT DISTINCT a.fname AS FirstName, a.lname AS LastName FROM Artists a, Paintings p, Sculptures s WHERE a.artistID = p.painterID AND a.artistID = s.sculptorID",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT a.fname, a.lname FROM Artists a WHERE EXISTS (SELECT 1 FROM Paintings p WHERE p.painterID = a.artistID) AND EXISTS (SELECT 1 FROM Sculptures s WHERE s.sculptorID = a.artistID)",
          "SELECT DISTINCT a.fname, a.lname FROM Artists a WHERE a.artistID IN (SELECT painterID FROM Paintings) AND a.artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings INTERSECT SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT first_name, last_name FROM Artists WHERE EXISTS (SELECT * FROM Paintings WHERE painterID = Artists.artistID) AND EXISTS (SELECT * FROM Sculptures WHERE sculptorID = Artists.artistID)",
          "SELECT DISTINCT a.fname, a.lname FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID INNER JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.fname, a.lname HAVING COUNT(DISTINCT p.paintingID) > 0 AND COUNT(DISTINCT s.sculptureID) > 0"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT first_name, last_name FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings INTERSECT SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT A.fname || ' ' || A.lname AS full_name FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID) AND EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P, Sculptures S WHERE A.artistID = P.painterID AND A.artistID = S.sculptorID",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) INTERSECT SELECT artistID FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT fname, lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID) AND EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND A.artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') INTERSECT SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT DISTINCT first_name, last_name FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' INTERSECT SELECT DISTINCT first_name, last_name FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'lithographic'",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' INTERSECT SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'lithographic'",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') AND EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' INTERSECT SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Paintings P1 ON A.artistID = P1.painterID AND P1.medium = 'oil' INNER JOIN Paintings P2 ON A.artistID = P2.painterID AND P2.medium = 'lithographic'",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') INTERSECT SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING SUM(CASE WHEN P.medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN P.medium = 'lithographic' THEN 1 ELSE 0 END) > 0",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND (P.medium = 'oil' OR P.medium = 'lithographic') GROUP BY A.artistID HAVING COUNT(DISTINCT P.medium) > 1",
          "SELECT DISTINCT first.fname, first.lname FROM Artists first INNER JOIN Paintings on first.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND first.artistID IN (SELECT artistID FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'lithographic')",
          "WITH OilPainters AS (SELECT painterID FROM Paintings WHERE medium = 'oil'), LithoPainters AS (SELECT painterID FROM Paintings WHERE medium = 'lithographic') SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM OilPainters) AND artistID IN (SELECT painterID FROM LithoPainters)",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE Paintings.painterID = Artists.artistID AND medium = 'oil') AND EXISTS (SELECT 1 FROM Paintings WHERE Paintings.painterID = Artists.artistID AND medium = 'lithographic')",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') INTERSECT SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' INTERSECT SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P1 ON A.artistID = P1.painterID WHERE P1.medium = 'oil' AND EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.painterID = A.artistID AND P2.medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium IN ('oil', 'lithographic') GROUP BY A.artistID HAVING COUNT(DISTINCT P.medium) = 2"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas')",
          "SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas' LIMIT 1)",
          "SELECT Artists.birthYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.year = 1884 AND Paintings.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE Paintings.painterID = Artists.artistID AND Paintings.year = 1884 AND Paintings.mediumOn = 'canvas')",
          "SELECT a.birthYear FROM Artists a, Paintings p WHERE a.artistID = p.painterID AND p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn LIKE 'canvas')",
          "SELECT birthYear FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas')",
          "SELECT Artists.birthYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884 AND Paintings.mediumOn LIKE 'canvas'"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)",
          "SELECT A.birthYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year = 1884",
          "SELECT birthYear FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE year = 1884 LIMIT 1)",
          "SELECT A.birthYear FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.year = 1884",
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND rownum = 1)",
          "SELECT birthYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)",
          "SELECT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND year = 1884)",
          "SELECT TOP 1 birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)",
          "SELECT birthYear FROM Artists WHERE artistID = ANY (SELECT painterID FROM Paintings WHERE year = 1884)"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241')",
          "SELECT DISTINCT A.fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE Paintings.painterID = Artists.artistID AND medium = 'oil' AND location = 'gallery 241')",
          "SELECT DISTINCT fname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil' AND P.location = 'gallery 241')",
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241')",
          "SELECT DISTINCT Artists.fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241') GROUP BY fname",
          "SELECT DISTINCT fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' AND P.location = 'gallery 241'"
        ]
      ]
    },
    {
      "id": 1243,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241')",
          "SELECT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241'",
          "SELECT Artists.fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241')",
          "SELECT DISTINCT fname FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT fname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND medium = 'oil' AND location = 'gallery 241')",
          "SELECT fname FROM Artists a WHERE EXISTS (SELECT 1 FROM Paintings p WHERE p.painterID = a.artistID AND p.medium = 'oil' AND p.location = 'gallery 241')",
          "SELECT a.fname FROM Artists a, Paintings p WHERE a.artistID = p.painterID AND p.medium = 'oil' AND p.location = 'gallery 241'",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241') GROUP BY fname",
          "SELECT fname FROM Artists a WHERE a.artistID IN (SELECT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241')"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, COUNT(*) FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium",
          "SELECT medium, COUNT(medium) AS NumberOfWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS TotalWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS Combined GROUP BY medium",
          "SELECT medium, COUNT(medium) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS Count FROM Paintings GROUP BY medium UNION ALL SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium",
          "SELECT medium, COUNT(*) AS Total FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(medium) AS WorkCount FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS TotalNumber FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium ORDER BY medium"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS Combined GROUP BY medium",
          "SELECT medium, COUNT(medium) AS count FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT Combined.medium, COUNT(*) AS Total FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS Combined GROUP BY Combined.medium",
          "SELECT medium, COUNT(*) AS NumberOfWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(medium) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS TotalWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS WorkCount FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS TotalCount FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(*) AS CountOfWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium",
          "SELECT AVG(height_mm) AS AverageHeight, medium FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium ORDER BY medium",
          "SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings GROUP BY medium ORDER BY AverageHeight DESC",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium HAVING AVG(height_mm) IS NOT NULL",
          "SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings WHERE height_mm IS NOT NULL GROUP BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings WHERE medium IS NOT NULL GROUP BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium HAVING COUNT(*) > 1",
          "SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings GROUP BY medium HAVING COUNT(paintingID) > 1"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium",
          "SELECT AVG(height_mm) AS AverageHeight, medium FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings GROUP BY medium",
          "SELECT medium, average(height_mm) FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) average_height FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium ORDER BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium ORDER BY AVG(height_mm)",
          "SELECT medium, AVG(height_mm) AS avg_height FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium HAVING AVG(height_mm) IS NOT NULL",
          "SELECT medium, AVG(height_mm) FROM Paintings WHERE height_mm IS NOT NULL GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) AS PaintingsCount FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY location",
          "SELECT location AS Place, COUNT(*) AS TotalPaintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY COUNT(paintingID) DESC",
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location HAVING COUNT(*) > 0",
          "SELECT P.location, COUNT(P.paintingID) FROM Paintings P WHERE P.year < 1900 GROUP BY P.location",
          "SELECT location, COUNT(*) AS CountOfPaintings FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY CountOfPaintings"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Paintings WHERE year < 1900",
          "SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900",
          "SELECT COUNT(*) AS Total FROM Paintings WHERE year < 1900",
          "SELECT COUNT(DISTINCT paintingID) FROM Paintings WHERE year < 1900",
          "SELECT COUNT(1) FROM Paintings WHERE year < 1900",
          "SELECT COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT COUNT(*) FROM Paintings p WHERE p.year < 1900",
          "SELECT COUNT(*) FROM Paintings WHERE Paintings.year < 1900",
          "SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.year > 1910 AND Paintings.medium = 'oil'",
          "SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil'",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium LIKE 'oil'",
          "SELECT title FROM Paintings WHERE (year > 1910) AND (medium = 'oil')",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' ORDER BY year",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' ORDER BY title",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' AND location IS NOT NULL",
          "SELECT title FROM Paintings WHERE (year > 1910) AND (medium = 'oil') AND (width_mm IS NOT NULL)",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' AND height_mm > 0"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910",
          "SELECT P.title FROM Paintings P WHERE P.medium = 'oil' AND P.year > 1910",
          "SELECT title FROM Paintings WHERE medium LIKE 'oil' AND year > 1910",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY year",
          "SELECT DISTINCT title FROM Paintings WHERE medium = 'oil' AND year > 1910",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY title ASC",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY title DESC",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY paintingID",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY location"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'",
          "SELECT DISTINCT Paintings.painterID FROM Paintings WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 240'",
          "SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' GROUP BY painterID",
          "SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 240'",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' ORDER BY painterID",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' LIMIT 100",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' HAVING COUNT(*) > 0",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' AND painterID IS NOT NULL",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' AND painterID > 0"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'",
          "SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' GROUP BY painterID",
          "SELECT DISTINCT p.painterID FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium LIKE 'oil' AND location = 'gallery 240'",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 240'",
          "SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' DISTINCT",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' ORDER BY painterID",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' ORDER BY painterID DESC",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' ORDER BY painterID ASC",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' ORDER BY painterID ASC LIMIT 100"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P1.title FROM Paintings AS P1 WHERE P1.height_mm > (SELECT MIN(P2.height_mm) FROM Paintings AS P2 WHERE P2.medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT P.title FROM Paintings P JOIN Paintings C ON P.height_mm > C.height_mm WHERE C.medium = 'canvas'",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas') GROUP BY title",
          "SELECT DISTINCT a.title FROM Paintings a WHERE EXISTS (SELECT 1 FROM Paintings b WHERE b.medium = 'canvas' AND a.height_mm > b.height_mm)",
          "SELECT DISTINCT title FROM Paintings p1 WHERE p1.height_mm > (SELECT MIN(p2.height_mm) FROM Paintings p2 WHERE p2.mediumOn = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE mediumOn = 'canvas' ORDER BY height_mm ASC LIMIT 1)",
          "SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT p1.title FROM Paintings p1 WHERE p1.height_mm > (SELECT MIN(p2.height_mm) FROM Paintings p2 WHERE p2.medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings AS p1 WHERE EXISTS (SELECT 1 FROM Paintings p2 WHERE p2.medium = 'canvas' AND p1.height_mm > p2.height_mm)",
          "SELECT DISTINCT p.title FROM Paintings p JOIN Paintings p2 ON p.height_mm > p2.height_mm WHERE p2.medium = 'canvas'",
          "SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm LIMIT 1)",
          "SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > ALL (SELECT p2.height_mm FROM Paintings p2 WHERE p2.medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings p1 WHERE p1.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT p.title FROM Paintings p WHERE EXISTS (SELECT * FROM Paintings p2 WHERE p2.medium = 'canvas' AND p.height_mm > p2.height_mm)"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT min(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(P.year) FROM Paintings P WHERE P.location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ANY (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P1.paintingID FROM Paintings P1, Paintings P2 WHERE P1.year < P2.year AND P2.location = 'gallery 240'",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ANY (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT a.paintingID FROM Paintings a JOIN Paintings b ON a.year < b.year WHERE b.location = 'gallery 240'",
          "SELECT DISTINCT p.paintingID FROM Paintings p WHERE EXISTS (SELECT 1 FROM Paintings q WHERE p.year < q.year AND q.location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT p1.paintingID FROM Paintings p1 CROSS JOIN Paintings p2 WHERE p1.year < p2.year AND p2.location = 'gallery 240'",
          "SELECT DISTINCT p.paintingID FROM Paintings p INNER JOIN Paintings q ON p.year < q.year WHERE q.location = 'gallery 240'",
          "SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT p.paintingID FROM Paintings p, Paintings q WHERE p.year < q.year AND q.location = 'gallery 240'",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT paintingID FROM Paintings ORDER BY year LIMIT 1",
          "SELECT MIN(year), paintingID FROM Paintings GROUP BY paintingID ORDER BY year LIMIT 1",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT TOP 1 paintingID FROM Paintings ORDER BY year",
          "SELECT paintingID FROM Paintings ORDER BY year ASC FETCH FIRST ROW ONLY",
          "SELECT p.paintingID FROM Paintings p ORDER BY p.year ASC LIMIT 1",
          "SELECT paintingID FROM Paintings ORDER BY year, paintingID ASC LIMIT 1",
          "SELECT FIRST(paintingID) FROM Paintings ORDER BY year",
          "SELECT paintingID FROM (SELECT paintingID FROM Paintings ORDER BY year ASC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT paintingID FROM Paintings ORDER BY year LIMIT 1",
          "SELECT MIN(year), paintingID FROM Paintings GROUP BY paintingID ORDER BY year LIMIT 1",
          "SELECT p.paintingID FROM Paintings p ORDER BY p.year ASC LIMIT 1",
          "SELECT TOP 1 paintingID FROM Paintings ORDER BY year",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT paintingID FROM Paintings ORDER BY year ASC FETCH FIRST ROW ONLY",
          "SELECT paintingID FROM (SELECT paintingID, year FROM Paintings ORDER BY year ASC) WHERE ROWNUM = 1",
          "SELECT paintingID FROM Paintings ORDER BY year ASC ROWS 1",
          "SELECT FIRST(paintingID) FROM Paintings ORDER BY year ASC"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT artist.fname, artist.lname FROM Artists artist INNER JOIN Sculptures sculpture ON artist.artistID = sculpture.sculptorID WHERE sculpture.title LIKE '%female%'",
          "SELECT A.fname, A.lname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT first_name, last_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT A.fname AS FirstName, A.lname AS LastName FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND title LIKE '%female%')",
          "SELECT Artists.fname, Artists.lname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title CONTAINS 'female'"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname || ' ' || lname AS full_name FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT CONCAT(fname, ' ', lname) FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT A.fname || ' ' || A.lname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.title LIKE '%female%'",
          "SELECT fname || ' ' || lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT CONCAT(artists.fname, ' ', artists.lname) AS full_name FROM artists JOIN sculptures ON artists.artistID = sculptures.sculptorID WHERE sculptures.title LIKE '%female%'",
          "SELECT fname || ' ' || lname AS artist_full_name FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT first_name || ' ' || last_name FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT CONCAT(artists.fname, ' ', artists.lname) FROM artists INNER JOIN sculptures ON artists.artistID = sculptures.sculptorID WHERE sculptures.title LIKE '%female%'",
          "SELECT fname || ' ' || lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT CONCAT(fname, ' ', lname) AS full_name FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY title",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC",
          "SELECT title FROM Paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title ASC",
          "SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC",
          "SELECT DISTINCT title AS PaintingName FROM Paintings ORDER BY PaintingName",
          "SELECT DISTINCT title FROM Paintings ORDER BY title COLLATE NOCASE",
          "SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY LOWER(title)",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASCENDING"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY title",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title",
          "SELECT title FROM Paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title ASC",
          "SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC",
          "SELECT DISTINCT title AS PaintingName FROM Paintings ORDER BY PaintingName",
          "SELECT title FROM (SELECT DISTINCT title FROM Paintings) AS UniquePaintings ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY title COLLATE NOCASE",
          "SELECT title FROM Paintings GROUP BY title HAVING COUNT(*) >= 1 ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY LOWER(title)"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY length(title)",
          "SELECT DISTINCT title FROM Paintings ORDER BY CHAR_LENGTH(title)",
          "SELECT DISTINCT title FROM Paintings ORDER BY LEN(title)",
          "SELECT DISTINCT title FROM Paintings ORDER BY LENGTH(title)",
          "SELECT title FROM Paintings GROUP BY title ORDER BY LENGTH(title)",
          "SELECT title FROM Paintings GROUP BY title ORDER BY CHAR_LENGTH(title)",
          "SELECT title FROM Paintings GROUP BY title ORDER BY LEN(title)",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY title"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY height_mm ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm",
          "SELECT title FROM Paintings ORDER BY height_mm ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASCENDING",
          "SELECT DISTINCT p.title FROM Paintings p ORDER BY p.height_mm ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC, title ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY MIN(height_mm) ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC, title",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC, title DESC"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT p.title FROM Paintings p WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT s.title FROM Sculptures s WHERE s.year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Combined WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION DISTINCT SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION DISTINCT SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION SELECT title, year FROM Sculptures) AS Artworks WHERE year BETWEEN 1900 AND 1950",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.year BETWEEN 1900 AND 1950 UNION SELECT Sculptures.title FROM Sculptures WHERE Sculptures.year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950 ORDER BY title"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT p.title FROM Paintings p WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT s.title FROM Sculptures s WHERE s.year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Combined WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT p.title FROM Paintings p WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT s.title FROM Sculptures s WHERE s.year BETWEEN 1900 AND 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION SELECT title, year FROM Sculptures) WHERE year BETWEEN 1900 AND 1950"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT title FROM Paintings UNION SELECT title FROM Sculptures WHERE sculptorID = 222 AND painterID = 222",
          "SELECT title FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.artistID = 222 UNION SELECT title FROM Sculptures AS s JOIN Artists AS a ON s.sculptorID = a.artistID WHERE a.artistID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT title FROM Paintings p WHERE p.painterID = 222 UNION SELECT title FROM Sculptures s WHERE s.sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT p.title FROM Paintings p WHERE p.painterID = 222 UNION SELECT s.title FROM Sculptures s WHERE s.sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222",
          "SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title",
          "SELECT title FROM Paintings UNION SELECT title FROM Sculptures WHERE sculptorID = 222 AND painterID = 222",
          "SELECT title FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.artistID = 222 UNION SELECT title FROM Sculptures AS S JOIN Artists AS A ON S.sculptorID = A.artistID WHERE A.artistID = 222",
          "SELECT title FROM Paintings AS P JOIN Artists AS A ON P.painterID = A.artistID WHERE A.artistID = 222 UNION ALL SELECT title FROM Sculptures AS S JOIN Artists AS A ON S.sculptorID = A.artistID WHERE A.artistID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(p.paintingID) DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC LIMIT 1",
          "SELECT TOP 1 painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC",
          "SELECT painterID FROM Paintings GROUP BY painterID HAVING year < 1900 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT painterID, COUNT(*) AS TotalPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY TotalPaintings DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT painterID, COUNT(paintingID) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY NumberOfPaintings DESC LIMIT 1",
          "SELECT painterID FROM (SELECT painterID, COUNT(*) AS Total FROM Paintings WHERE year < 1900 GROUP BY painterID) AS SubQuery ORDER BY Total DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC LIMIT 1",
          "SELECT TOP 1 painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paintings WHERE year < 1900 GROUP BY painterID) tmp)",
          "SELECT painterID FROM Paintings GROUP BY painterID HAVING year < 1900 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT painterID, COUNT(*) AS TotalPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY TotalPaintings DESC LIMIT 1",
          "SELECT A.painterID FROM (SELECT painterID, COUNT(*) AS Total FROM Paintings WHERE year < 1900 GROUP BY painterID) A ORDER BY A.Total DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC, painterID ASC LIMIT 1",
          "SELECT painterID FROM (SELECT painterID, COUNT(*) AS CountOfPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID) AS SubQuery ORDER BY CountOfPaintings DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.fname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID ORDER BY COUNT(S.sculptureID) DESC LIMIT 1",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)",
          "SELECT Artists.fname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID GROUP BY Artists.artistID ORDER BY COUNT(Sculptures.sculptureID) DESC LIMIT 1",
          "SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 A.fname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID ORDER BY COUNT(S.sculptureID) DESC",
          "SELECT fname FROM Artists WHERE artistID = (SELECT TOP 1 sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC)",
          "SELECT A.fname FROM Artists A WHERE A.artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT fname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID GROUP BY Artists.artistID ORDER BY COUNT(Sculptures.sculptureID) DESC LIMIT 1",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(COUNT(sculptureID)) FROM Sculptures GROUP BY sculptorID))"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)",
          "SELECT Artists.fname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID GROUP BY Artists.artistID ORDER BY COUNT(Sculptures.sculptureID) DESC LIMIT 1",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 Artists.fname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID GROUP BY Artists.artistID ORDER BY COUNT(Sculptures.sculptureID) DESC",
          "SELECT fname FROM Artists JOIN (SELECT sculptorID, COUNT(*) AS NumWorks FROM Sculptures GROUP BY sculptorID ORDER BY NumWorks DESC LIMIT 1) AS MostWorks ON Artists.artistID = MostWorks.sculptorID",
          "SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID HAVING COUNT(S.sculptureID) = (SELECT MAX(WorkCount) FROM (SELECT COUNT(*) AS WorkCount FROM Sculptures GROUP BY sculptorID) AS Counts)",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Sculptures GROUP BY sculptorID) AS Counts))",
          "SELECT (SELECT fname FROM Artists WHERE artistID = sculptorID) AS FirstName FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS TotalWorks FROM Sculptures GROUP BY sculptorID ORDER BY TotalWorks DESC LIMIT 1) AS Temp)"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800",
          "SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;",
          "SELECT title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800;",
          "SELECT `title` FROM `Paintings` WHERE `width_mm` < 600 OR `height_mm` > 800",
          "SELECT title FROM Paintings WHERE width_mm < '600' OR height_mm > '800'",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800);",
          "SELECT Paintings.title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800",
          "SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800);",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800;",
          "SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800;",
          "SELECT title FROM Paintings WHERE width_mm < '600' OR height_mm > '800'",
          "SELECT title FROM Paintings WHERE width_mm < '600' OR height_mm > '800';"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930",
          "SELECT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT p.location FROM Paintings p WHERE p.year NOT BETWEEN 1885 AND 1930",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.year NOT BETWEEN 1885 AND 1930"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT P.location FROM Paintings AS P WHERE P.year < 1885 OR P.year > 1930",
          "SELECT DISTINCT P.location FROM Paintings AS P WHERE P.year < 1885 OR P.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION ALL SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION ALL SELECT DISTINCT location FROM Paintings WHERE year > 1930"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999",
          "SELECT P.paintingID FROM Paintings AS P WHERE P.height_mm > 500 AND P.height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;",
          "SELECT paintingID FROM Paintings WHERE (height_mm > 500) AND (height_mm < 2000)",
          "SELECT paintingID FROM Paintings WHERE height_mm > '500' AND height_mm < '2000'",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingID",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY height_mm",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY year",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY title"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;",
          "SELECT paintingID FROM Paintings WHERE (height_mm > 500) AND (height_mm < 2000)",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingID",
          "SELECT DISTINCT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 LIMIT 100",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 GROUP BY paintingID",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 AND medium IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'on panel' OR mediumOn = 'on canvas'",
          "SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas') GROUP BY location",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.mediumOn = 'on panel' OR p.mediumOn = 'on canvas'",
          "SELECT location FROM Paintings WHERE mediumOn = 'on panel' UNION SELECT location FROM Paintings WHERE mediumOn = 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn LIKE 'on panel' OR mediumOn LIKE 'on canvas'",
          "SELECT location FROM Paintings WHERE mediumOn = 'on panel' OR mediumOn = 'on canvas' GROUP BY location HAVING COUNT(*) > 0",
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas')",
          "SELECT location FROM Paintings WHERE mediumOn = 'on panel' UNION ALL SELECT location FROM Paintings WHERE mediumOn = 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'on panel' OR mediumOn = 'on canvas' ORDER BY location",
          "SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas') DISTINCT"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE mediumOn IN ('panels', 'canvas')",
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'panels' OR mediumOn = 'canvas'",
          "SELECT location FROM Paintings WHERE mediumOn = 'panels' UNION SELECT location FROM Paintings WHERE mediumOn = 'canvas'",
          "SELECT P.location FROM Paintings AS P WHERE P.mediumOn = 'panels' OR P.mediumOn = 'canvas'",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.mediumOn IN ('panels', 'canvas')",
          "SELECT location FROM Paintings WHERE mediumOn LIKE 'panels' OR mediumOn LIKE 'canvas'",
          "SELECT location FROM Paintings WHERE mediumOn = 'panels' UNION ALL SELECT location FROM Paintings WHERE mediumOn = 'canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'panels' UNION DISTINCT SELECT location FROM Paintings WHERE mediumOn = 'canvas'",
          "SELECT location FROM Paintings WHERE mediumOn IN ('panels', 'canvas') GROUP BY location",
          "SELECT location FROM Paintings WHERE mediumOn = 'panels' OR mediumOn = 'canvas' GROUP BY location HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT P.location FROM Paintings P WHERE P.year < 1885 INTERSECT SELECT P.location FROM Paintings P WHERE P.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 AND location IN (SELECT location FROM Paintings WHERE year > 1930)",
          "SELECT location FROM Paintings a WHERE EXISTS (SELECT 1 FROM Paintings b WHERE b.year > 1930 AND a.location = b.location) AND a.year < 1885",
          "SELECT a.location FROM Paintings a JOIN Paintings b ON a.location = b.location WHERE a.year < 1885 AND b.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930 HAVING COUNT(*) > 1",
          "SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 AND MAX(year) > 1930",
          "SELECT location FROM (SELECT location, MIN(year) AS MinYear, MAX(year) AS MaxYear FROM Paintings GROUP BY location) WHERE MinYear < 1885 AND MaxYear > 1930",
          "WITH Early AS (SELECT location FROM Paintings WHERE year < 1885), Late AS (SELECT location FROM Paintings WHERE year > 1930) SELECT Early.location FROM Early JOIN Late ON Early.location = Late.location"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT P.location FROM Paintings AS P WHERE P.year < 1885 INTERSECT SELECT P.location FROM Paintings AS P WHERE P.year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 AND location IN (SELECT location FROM Paintings WHERE year > 1930)",
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT A.location FROM Paintings A WHERE A.year < 1885 INTERSECT SELECT B.location FROM Paintings B WHERE B.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.year < 1885 INTERSECT SELECT DISTINCT P.location FROM Paintings P WHERE P.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p WHERE p.medium = 'oil' AND p.location = 'gallery 241'",
          "SELECT AVG(height_mm) average_height, AVG(width_mm) average_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 241'",
          "SELECT AVG(height_mm) AS AvgHeight, AVG(width_mm) AS AvgWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) AS HeightAverage, AVG(width_mm) AS WidthAverage FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) AS Average_Height, AVG(width_mm) AS Average_Width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT average(height_mm) AS AvgHeight, average(width_mm) AS AvgWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) average_height, AVG(width_mm) average_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 241'",
          "SELECT AVG(height_mm) as AverageHeight, AVG(width_mm) as AverageWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) Average_Height, AVG(width_mm) Average_Width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) as HeightAverage, AVG(width_mm) as WidthAverage FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) Height_Avg, AVG(width_mm) Width_Avg FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) avgHeight, AVG(width_mm) avgWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900",
          "SELECT paintingID, MAX(height_mm) FROM Paintings WHERE year < 1900 GROUP BY paintingID",
          "SELECT paintingID, height_mm FROM Paintings WHERE height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT paintingID, MAX(height_mm) AS MaxHeight FROM Paintings WHERE year < 1900 GROUP BY paintingID ORDER BY MaxHeight DESC LIMIT 1",
          "SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 AND p.height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)",
          "SELECT MAX(p.height_mm), p.paintingID FROM Paintings p WHERE p.year < 1900 GROUP BY p.paintingID",
          "SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID ORDER BY height_mm DESC LIMIT 1",
          "SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC FETCH FIRST ROW ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT p.paintingID, p.height_mm FROM Paintings AS p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, max(height_mm) AS MaxHeight, max(width_mm) AS MaxWidth FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year",
          "SELECT Paintings.year, MAX(Paintings.height_mm) AS MaximumHeight, MAX(Paintings.width_mm) AS MaximumWidth FROM Paintings GROUP BY Paintings.year",
          "SELECT p.year, MAX(p.height_mm) AS MaxHeight, MAX(p.width_mm) AS MaxWidth FROM Paintings p GROUP BY p.year",
          "SELECT year AS PaintingYear, max(height_mm) AS MaxHeight, max(width_mm) AS MaxWidth FROM Paintings GROUP BY PaintingYear",
          "SELECT year, MAX(height_mm) max_height, MAX(width_mm) max_width FROM Paintings GROUP BY year",
          "SELECT Paintings.year, MAX(height_mm) AS 'Max Height', MAX(width_mm) AS 'Max Width' FROM Paintings GROUP BY Paintings.year",
          "SELECT year, GREATEST(MAX(height_mm), MAX(width_mm)) AS MaxDimension FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS MaximumHeight, MAX(width_mm) AS MaximumWidth FROM Paintings GROUP BY year ORDER BY year",
          "SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, max(height_mm) AS MaxHeight, max(width_mm) AS MaxWidth FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year",
          "SELECT Paintings.year, maximum(height_mm), maximum(width_mm) FROM Paintings GROUP BY Paintings.year",
          "SELECT p.year, MAX(p.height_mm) AS maxHeight, MAX(p.width_mm) AS maxWidth FROM Paintings p GROUP BY p.year",
          "SELECT year, greatest(height_mm), greatest(width_mm) FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year",
          "SELECT Paintings.year, MAX(Paintings.height_mm), MAX(Paintings.width_mm) FROM Paintings GROUP BY Paintings.year",
          "SELECT year AS PaintingYear, MAX(height_mm) AS MaxHeight, MAX(width_mm) AS MaxWidth FROM Paintings GROUP BY PaintingYear",
          "SELECT year, MAX(height_mm) max_height, MAX(width_mm) max_width FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS MaximumHeight, MAX(width_mm) AS MaximumWidth FROM Paintings GROUP BY year"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width, fname, lname FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY painterID ORDER BY lname, fname",
          "SELECT AVG(P.height_mm) AS Average_Height, AVG(P.width_mm) AS Average_Width, A.fname, A.lname FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT AVG(height_mm), AVG(width_mm), fname, lname FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Paintings.painterID ORDER BY Artists.lname, Artists.fname",
          "SELECT fname, lname, AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Paintings.painterID ORDER BY Artists.lname, Artists.fname",
          "SELECT fname || ' ' || lname AS full_name, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Paintings.painterID ORDER BY lname, fname",
          "SELECT Artists.fname, Artists.lname, AVG(Paintings.height_mm) AS HeightAverage, AVG(Paintings.width_mm) AS WidthAverage FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Paintings.painterID ORDER BY Artists.lname, Artists.fname",
          "SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth, fname, lname FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT fname, lname, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Paintings.painterID ORDER BY lname ASC, fname ASC",
          "SELECT AVG(P.height_mm) AS Height_Avg, AVG(P.width_mm) AS Width_Avg, A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT fname, lname, AVG(height_mm) AS HeightAverage, AVG(width_mm) AS WidthAverage FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Paintings.painterID ORDER BY lname, fname"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Paintings P JOIN Artists A ON P.painterID = A.artistID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT Artists.fname, Artists.lname, AVG(Paintings.height_mm) AS AverageHeight, AVG(Paintings.width_mm) AS AverageWidth FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Paintings.painterID ORDER BY Artists.lname, Artists.fname",
          "SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth, lname, fname FROM Paintings JOIN Artists ON painterID = artistID GROUP BY painterID ORDER BY lname, fname",
          "SELECT AVG(P.height_mm), AVG(P.width_mm), A.lname, A.fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT artistID, AVG(height_mm), AVG(width_mm) FROM Paintings GROUP BY painterID ORDER BY (SELECT lname FROM Artists WHERE artistID = painterID)",
          "SELECT A.lname, A.fname, AVG(height_mm) AS avgHeight, AVG(width_mm) AS avgWidth FROM Paintings JOIN Artists A ON painterID = A.artistID GROUP BY painterID ORDER BY A.lname, A.fname",
          "SELECT lname, fname, AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth FROM Artists JOIN Paintings ON artistID = painterID GROUP BY painterID ORDER BY lname, fname",
          "SELECT AVG(P.height_mm) AS HeightAverage, AVG(P.width_mm) AS WidthAverage, A.lname, A.fname FROM Paintings P LEFT JOIN Artists A ON P.painterID = A.artistID GROUP BY P.painterID ORDER BY A.lname, A.fname",
          "SELECT lname, fname, AVG(height_mm), AVG(width_mm) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY painterID ORDER BY lname ASC, fname ASC",
          "SELECT A.lname, A.fname, AVG(P.height_mm) AS HeightAvg, AVG(P.width_mm) AS WidthAvg FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, COUNT(*) AS num_paintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(*) >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2",
          "SELECT fname, COUNT(*) FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(*) >= 2",
          "SELECT Artists.fname, COUNT(Paintings.paintingID) AS NumberOfPaintings FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(Paintings.paintingID) >= 2",
          "SELECT fname, COUNT(paintingID) AS TotalPaintings FROM Artists, Paintings WHERE artistID = painterID GROUP BY artistID HAVING TotalPaintings >= 2",
          "SELECT A.fname, COUNT(P.paintingID) FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(*) AS PaintingsCount FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING PaintingsCount >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists INNER JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2",
          "SELECT A.fname, COUNT(*) FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(*) >= 2",
          "SELECT fname, COUNT(*) FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, COUNT(*) AS num_paintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(*) >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) > 1",
          "SELECT fname, COUNT(*) AS total_paintings FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(Paintings.paintingID) >= 2",
          "SELECT fname, COUNT(P.paintingID) AS paintings_count FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID GROUP BY A.artistID HAVING paintings_count > 1",
          "SELECT A.fname, COUNT(P.paintingID) FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) > 1",
          "SELECT fname, COUNT(*) FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(*) > 1",
          "SELECT fname, COUNT(paintingID) AS count_of_paintings FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING count_of_paintings > 1",
          "SELECT fname, COUNT(*) AS NumberOfPaintings FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.paintingID IS NOT NULL GROUP BY A.artistID HAVING NumberOfPaintings >= 2",
          "SELECT fname, COUNT(*) FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(P.paintingID) AS TotalPaintings FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING TotalPaintings > 1"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3)",
          "SELECT A.deathYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(P.paintingID) FROM Paintings P WHERE P.painterID = A.artistID) <= 3"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4)",
          "SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID) < 4",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) < 4)",
          "SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID NOT IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) >= 4)",
          "SELECT deathYear FROM Artists A WHERE NOT EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID GROUP BY P.painterID HAVING COUNT(P.paintingID) >= 4)",
          "SELECT A.deathYear FROM Artists A WHERE 4 > (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID)",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) < 4)",
          "SELECT A.deathYear FROM Artists A LEFT OUTER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(S.sculptureID) ASC LIMIT 1",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)",
          "SELECT TOP 1 A.deathYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(S.sculptureID)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID))",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A INNER JOIN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1) AS MinSculptures ON A.artistID = MinSculptures.sculptorID",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS NumSculptures FROM Sculptures GROUP BY sculptorID ORDER BY NumSculptures ASC LIMIT 1) AS Temp)",
          "SELECT A.deathYear FROM Artists A WHERE EXISTS (SELECT 1 FROM Sculptures S WHERE A.artistID = S.sculptorID GROUP BY S.sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID))"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID))",
          "SELECT TOP 1 A.deathYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(S.sculptureID)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(S.sculptureID) ASC LIMIT 1",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS NumSculptures FROM Sculptures GROUP BY sculptorID ORDER BY NumSculptures ASC LIMIT 1) AS Temp)",
          "SELECT A.deathYear FROM Artists A JOIN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1) AS LeastSculptures ON A.artistID = LeastSculptures.sculptorID",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1",
          "SELECT P.paintingID, P.height_mm FROM Paintings P WHERE P.location = 'gallery 240' ORDER BY P.width_mm DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT ROW ONLY"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT height_mm, paintingID FROM Paintings WHERE width_mm = (SELECT max(width_mm) FROM Paintings WHERE location = 'gallery 240') AND location = 'gallery 240'",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1",
          "SELECT P.height_mm, P.paintingID FROM Paintings P WHERE P.location = 'gallery 240' AND P.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.height_mm, P.paintingID FROM Paintings P INNER JOIN (SELECT MAX(width_mm) AS maxWidth FROM Paintings WHERE location = 'gallery 240') W ON P.width_mm = W.maxWidth WHERE P.location = 'gallery 240'",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' AND width_mm >= ALL (SELECT width_mm FROM Paintings WHERE location = 'gallery 240')",
          "SELECT TOP 1 height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240') LIMIT 1",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC FETCH FIRST 1 ROW ONLY",
          "SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240') FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(P.year) FROM Paintings P WHERE P.location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE NOT EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.location = 'gallery 240' AND P2.year <= P.year)",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(P2.year) FROM Paintings P2 WHERE P2.location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings P2 WHERE P2.location = 'gallery 240')"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE year < (SELECT min(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(P.year) FROM Paintings P WHERE P.location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location LIKE 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year IS NOT NULL)",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(P.year) FROM Paintings P WHERE P.location = 'gallery 240' AND P.year IS NOT NULL)",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings p1 WHERE p1.height_mm > ALL (SELECT p2.height_mm FROM Paintings p2 WHERE p2.year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings p WHERE p.year > 1900)",
          "SELECT paintingID FROM Paintings p1 WHERE p1.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(p.height_mm) FROM Paintings p WHERE p.year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname, COUNT(*) AS NumberOfPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY NumberOfPaintings DESC LIMIT 3",
          "SELECT A.lname, A.fname, COUNT(P.paintingID) AS OilPaintings FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY OilPaintings DESC LIMIT 3",
          "SELECT Artists.fname, Artists.lname, COUNT(Paintings.paintingID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Paintings.painterID ORDER BY COUNT(Paintings.paintingID) DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(*) FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT first_name, last_name, COUNT(paintingID) AS TotalOilPaintings FROM Artists JOIN Paintings ON artistID = painterID WHERE medium = 'oil' GROUP BY artistID ORDER BY TotalOilPaintings DESC LIMIT 3",
          "SELECT fname, lname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID WHERE medium = 'oil' GROUP BY artistID ORDER BY COUNT(paintingID) DESC LIMIT 3",
          "SELECT A.fname AS FirstName, A.lname AS LastName, COUNT(P.paintingID) AS OilPaintingCount FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY OilPaintingCount DESC LIMIT 3",
          "SELECT fname, lname, COUNT(*) AS CountOfOilPaintings FROM Artists JOIN Paintings ON artistID = painterID WHERE Paintings.medium = 'oil' GROUP BY artistID ORDER BY CountOfOilPaintings DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS OilWorks FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID ORDER BY OilWorks DESC LIMIT 3",
          "SELECT fname, lname, COUNT(*) AS TotalOilWorks FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.artistID ORDER BY TotalOilWorks DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE medium = 'oil' GROUP BY Artists.artistID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(paintingID) DESC LIMIT 1)",
          "SELECT TOP 1 fname, lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC",
          "SELECT fname, lname FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT fname, lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING P.medium = 'oil' ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') GROUP BY A.artistID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE artistID = (SELECT painterID FROM Paintings GROUP BY painterID, medium HAVING medium = 'oil' ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT fname, lname FROM Artists A INNER JOIN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1) P ON A.artistID = P.painterID"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT Paintings.paintingID, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.medium = 'oil' ORDER BY Paintings.year",
          "SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium LIKE 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC",
          "SELECT p.paintingID, p.location, p.title FROM Paintings AS p WHERE p.medium = 'oil' ORDER BY p.year ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year DESC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, title",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, paintingID",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, location"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium LIKE 'oil' ORDER BY year ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC",
          "SELECT p.paintingID, p.location, p.title FROM Paintings AS p WHERE p.medium = 'oil' ORDER BY p.year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title",
          "SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT `year`, `location`, `title` FROM `Paintings` WHERE `height_mm` > 1000 ORDER BY `title`",
          "SELECT Paintings.year AS Year, Paintings.location AS Location, Paintings.title AS Title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASCENDING",
          "SELECT p.year AS Year, p.location AS Location, p.title AS Title FROM Paintings AS p WHERE p.height_mm > 1000 ORDER BY p.title",
          "SELECT YEAR(year), location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title, year"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT Paintings.year AS Year, Paintings.location AS Location, Paintings.title AS Title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASCENDING",
          "SELECT `year`, `location`, `title` FROM `Paintings` WHERE `height_mm` > 1000 ORDER BY `title`",
          "SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title ASC",
          "SELECT p.year AS Year, p.location AS Location, p.title AS Name FROM Paintings AS p WHERE p.height_mm > 1000 ORDER BY p.title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE A.artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT fname, lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID LEFT JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.sculptorID IS NULL",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT * FROM Paintings WHERE Paintings.painterID = Artists.artistID) AND NOT EXISTS (SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID)",
          "SELECT Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID EXCEPT SELECT Artists.fname, Artists.lname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists AS A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND A.artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) EXCEPT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists LEFT JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Sculptures.sculptorID IS NULL"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.sculptorID IS NULL AND A.artistID IN (SELECT painterID FROM Paintings)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings EXCEPT SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) EXCEPT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.sculptorID IS NULL",
          "SELECT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings)",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND NOT A.artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists AS A WHERE EXISTS (SELECT * FROM Paintings AS P WHERE P.painterID = A.artistID) AND NOT EXISTS (SELECT * FROM Sculptures AS S WHERE S.sculptorID = A.artistID)",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT P.painterID FROM Paintings P) AND A.artistID NOT IN (SELECT S.sculptorID FROM Sculptures S)"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 EXCEPT SELECT location FROM Paintings WHERE mediumOn = 'canvas'",
          "SELECT P.location FROM Paintings P WHERE P.year < 1885 AND P.mediumOn <> 'canvas' GROUP BY P.location",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT LIKE 'canvas'",
          "SELECT DISTINCT P.location FROM Paintings P LEFT JOIN Paintings Q ON P.location = Q.location AND Q.mediumOn = 'canvas' WHERE P.year < 1885 AND Q.paintingID IS NULL",
          "SELECT location FROM Paintings WHERE year < 1885 AND NOT EXISTS (SELECT 1 FROM Paintings WHERE mediumOn = 'canvas' AND location = Paintings.location)",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas')",
          "SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 AND SUM(CASE WHEN mediumOn = 'canvas' THEN 1 ELSE 0 END) = 0",
          "SELECT location FROM Paintings AS P1 WHERE P1.year < 1885 AND NOT EXISTS (SELECT * FROM Paintings AS P2 WHERE P2.location = P1.location AND P2.mediumOn = 'canvas')",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.year < 1885 AND P.location NOT IN (SELECT location FROM Paintings WHERE mediumOn = 'canvas')"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 AND NOT mediumOn = 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn <> 'canvas'",
          "SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn NOT LIKE 'canvas')",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas')",
          "SELECT P.location FROM Paintings P WHERE P.year < 1885 AND P.mediumOn != 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn IS NOT 'canvas'",
          "SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn != 'canvas')",
          "SELECT location FROM Paintings WHERE year < 1885 AND (mediumOn NOT LIKE 'canvas')",
          "SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn NOT IN ('canvas'))"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT count(*) FROM race",
          "SELECT COUNT(*) AS TotalRaces FROM race",
          "SELECT COUNT(race.Road) FROM race",
          "SELECT COUNT(1) FROM race",
          "SELECT COUNT(race.*) FROM race",
          "SELECT COUNT(DISTINCT Road) FROM race",
          "SELECT COUNT(race.Road) AS NumberOfRaces FROM race",
          "SELECT COUNT(*) FROM race WHERE Road IS NOT NULL",
          "SELECT COUNT(*) FROM `race`",
          "SELECT COUNT(*) FROM (SELECT * FROM race) AS AllRaces"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT count(*) FROM race",
          "SELECT COUNT(*) AS NumberOfRaces FROM race",
          "SELECT COUNT(race.Road) FROM race",
          "SELECT COUNT(1) FROM race",
          "SELECT COUNT(race.*) FROM race",
          "SELECT COUNT(DISTINCT Road) FROM race",
          "SELECT COUNT(race.Road) AS TotalRaces FROM race",
          "SELECT COUNT(*) FROM race GROUP BY Race_Name",
          "SELECT COUNT(*) FROM (SELECT * FROM race) AS AllRaces",
          "SELECT COUNT(*) FROM race WHERE Road IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
          "SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC",
          "SELECT r.Winning_driver, r.Winning_team FROM race r ORDER BY r.Winning_team ASC",
          "SELECT Winning_driver AS Driver, Winning_team AS Team FROM race ORDER BY Winning_team ASC",
          "SELECT `Winning_driver`, `Winning_team` FROM `race` ORDER BY `Winning_team` ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASCENDING",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team COLLATE NOCASE ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY UPPER(Winning_team) ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver ASC"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
          "SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team",
          "SELECT r.Winning_driver, r.Winning_team FROM race r ORDER BY r.Winning_team ASC",
          "SELECT Winning_driver AS Driver, Winning_team AS Team FROM race ORDER BY Winning_team",
          "SELECT `Winning_driver`, `Winning_team` FROM `race` ORDER BY `Winning_team` ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASCENDING",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team, Winning_driver",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC LIMIT ALL",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver ASCENDING"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
          "SELECT DISTINCT Winning_driver FROM race WHERE NOT Pole_Position = 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous'",
          "SELECT r.Winning_driver FROM race r WHERE r.Pole_Position NOT IN ('Junior Strous')",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT LIKE 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position IS NOT 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE 'Junior Strous' <> Pole_Position",
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' AND Pole_Position IS NOT NULL",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT EQUAL TO 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT EQUALS 'Junior Strous'"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
          "SELECT r.Winning_driver FROM race r WHERE r.Pole_Position <> 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE NOT Pole_Position = 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT IN ('Junior Strous')",
          "SELECT r.Winning_driver FROM race AS r WHERE r.Pole_Position NOT LIKE 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position IS NOT 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' AND Winning_driver IS NOT NULL",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT LIKE 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous' AND Winning_driver <> ''",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT EQUAL TO 'Junior Strous'"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver ORDER BY Age ASC",
          "SELECT d.Constructor FROM driver d ORDER BY d.Age ASC",
          "SELECT `Constructor` FROM `driver` ORDER BY `Age` ASC",
          "SELECT Constructor FROM driver ORDER BY Age",
          "SELECT driver.Constructor FROM driver ORDER BY driver.Age ASC",
          "SELECT Constructor AS Constructors FROM driver ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC",
          "SELECT d.Constructor FROM driver AS d ORDER BY d.Age ASC",
          "SELECT Constructor FROM driver ORDER BY Age ASCENDING",
          "SELECT Constructor FROM driver ORDER BY Age ASC, Driver_Name ASC"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC",
          "SELECT DISTINCT d.Constructor FROM driver d ORDER BY d.Age ASC",
          "SELECT Constructor FROM (SELECT DISTINCT Constructor, Age FROM driver) ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver GROUP BY Constructor ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age",
          "SELECT DISTINCT d.Constructor FROM driver AS d ORDER BY d.Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASCENDING",
          "SELECT DISTINCT Constructor FROM driver d ORDER BY d.Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC, Constructor ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC, Constructor"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20",
          "SELECT UNIQUE Entrant FROM driver WHERE Age >= 20",
          "SELECT DISTINCT(Entrant) FROM driver WHERE Age >= 20",
          "SELECT DISTINCT driver.Entrant FROM driver WHERE driver.Age >= 20",
          "SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant IS NOT NULL",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant != ''",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant <> ''"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20",
          "SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant",
          "SELECT DISTINCT driver.Entrant FROM driver WHERE driver.Age >= 20",
          "SELECT DISTINCT `Entrant` FROM `driver` WHERE `Age` >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant",
          "SELECT DISTINCT d.Entrant FROM driver AS d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant IS NOT NULL",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant != ''",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant <> ''"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT max(Age), min(Age) FROM driver",
          "SELECT MAX(Age), MIN(Age) FROM driver",
          "SELECT maximum(Age), minimum(Age) FROM driver",
          "SELECT MAXIMUM(Age), MINIMUM(Age) FROM driver",
          "SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM driver",
          "SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM driver",
          "SELECT MAX(Age) max_age, MIN(Age) min_age FROM driver",
          "SELECT MAX(Age) highest_age, MIN(Age) lowest_age FROM driver",
          "SELECT MAX(Age) \"Maximum Age\", MIN(Age) \"Minimum Age\" FROM driver",
          "SELECT MAX(Age) 'Max Driver Age', MIN(Age) 'Min Driver Age' FROM driver"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT max(Age), min(Age) FROM driver",
          "SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM driver",
          "SELECT MAX(`Age`), MIN(`Age`) FROM `driver`",
          "SELECT maximum(Age), minimum(Age) FROM driver",
          "SELECT (SELECT MAX(Age) FROM driver) AS MaxAge, (SELECT MIN(Age) FROM driver) AS MinAge",
          "SELECT MAX(driver.Age), MIN(driver.Age) FROM driver",
          "SELECT MAX(d.Age), MIN(d.Age) FROM driver d",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM driver",
          "SELECT * FROM (SELECT MAX(Age) FROM driver) AS MaxAge, (SELECT MIN(Age) FROM driver) AS MinAge",
          "SELECT MAX(Age) max_age, MIN(Age) min_age FROM driver"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(UNIQUE Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age NOT BETWEEN 20 AND 30",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE (Age > 30) OR (Age < 20)",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 UNION SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age IN (SELECT Age FROM driver WHERE Age > 30 OR Age < 20)",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Engine",
          "SELECT DISTINCT COUNT(Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20) AS unique_engines"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(UNIQUE Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT driver.Engine) FROM driver WHERE driver.Age > 30 OR driver.Age < 20",
          "SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20) AS unique_engines",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age NOT BETWEEN 20 AND 30",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE (Age > 30) OR (Age < 20)",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age IN (SELECT Age FROM driver WHERE Age > 30 OR Age < 20)",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 UNION SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Engine"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
          "SELECT `Driver_Name` FROM `driver` ORDER BY `Driver_Name` DESC",
          "SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESCENDING",
          "SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC",
          "SELECT driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name COLLATE NOCASE DESC",
          "SELECT Driver_Name FROM driver ORDER BY LENGTH(Driver_Name) DESC, Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY ASCII(Driver_Name) DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
          "SELECT `Driver_Name` FROM `driver` ORDER BY `Driver_Name` DESC",
          "SELECT driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC",
          "SELECT D.Driver_Name FROM driver D ORDER BY D.Driver_Name DESC",
          "SELECT driver.Driver_Name AS Name FROM driver ORDER BY Name DESC",
          "SELECT Driver_Name AS Name FROM driver ORDER BY Name DESC",
          "SELECT driver.Driver_Name FROM driver ORDER BY Driver_Name DESCENDING",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESCENDING",
          "SELECT * FROM driver ORDER BY Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT driver.Driver_Name, race.Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name AS Driver, r.Race_Name AS Race FROM driver AS d INNER JOIN race AS r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver JOIN race USING (Driver_ID)",
          "SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver AS d INNER JOIN race AS r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT driver.Driver_Name, race.Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name AS Driver, r.Race_Name AS Race FROM driver AS d INNER JOIN race AS r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver JOIN race USING (Driver_ID)",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver AS d INNER JOIN race AS r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT d.Driver_Name, COUNT(*) FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(r.Road) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name",
          "SELECT Driver_Name, COUNT(Race_Name) AS Races_Count FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) AS Number_of_Races FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(*) AS Total_Races FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(r.Road) FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(DISTINCT r.Road) FROM driver JOIN race r ON driver.Driver_ID = r.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(*) FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(r.Road) FROM driver LEFT OUTER JOIN race r ON driver.Driver_ID = r.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(r.Road) FROM driver d RIGHT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name, COUNT(*) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT d.Driver_Name, COUNT(r.Road) AS Races_Participated FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID",
          "SELECT Driver_Name, COUNT(Road) FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY Driver_ID",
          "SELECT d.Driver_Name, COUNT(*) AS Race_Count FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID",
          "SELECT Driver_Name, COUNT(race.Driver_ID) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID",
          "SELECT Driver_Name, COUNT(*) FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID",
          "SELECT d.Driver_Name, COUNT(r.Road) FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID",
          "SELECT Driver_Name, COUNT(race.Road) FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT d.Driver_Name, COUNT(*) FROM driver d RIGHT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(Road) DESC LIMIT 1)",
          "SELECT driver.Age FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY COUNT(race.Road) DESC LIMIT 1",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Age FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Road) DESC LIMIT 1",
          "SELECT TOP 1 d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Road) DESC",
          "SELECT Age FROM (SELECT Driver_ID, COUNT(*) as RacesCount FROM race GROUP BY Driver_ID ORDER BY RacesCount DESC LIMIT 1) AS MostRaces JOIN driver ON MostRaces.Driver_ID = driver.Driver_ID",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(r.Road) DESC LIMIT 1)",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Road) AS Cnt FROM race GROUP BY Driver_ID) AS Counts))",
          "SELECT d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT driver.Age FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY COUNT(race.Driver_ID) DESC LIMIT 1",
          "SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM race GROUP BY Driver_ID)))",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(r.Driver_ID) DESC LIMIT 1)",
          "SELECT TOP 1 d.Age FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Driver_ID) DESC",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT TOP 1 Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC)",
          "SELECT d.Age FROM driver d JOIN (SELECT Driver_ID, COUNT(*) as Races FROM race GROUP BY Driver_ID ORDER BY Races DESC LIMIT 1) r ON d.Driver_ID = r.Driver_ID",
          "SELECT Age FROM (SELECT d.Age, COUNT(r.Driver_ID) as RaceCount FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY RaceCount DESC LIMIT 1) as MostRaces",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) >= 2)",
          "SELECT d.Driver_Name, d.Age FROM driver d JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2) r ON d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race WHERE Driver_ID = d.Driver_ID GROUP BY Driver_ID HAVING COUNT(Road) > 1)",
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(DISTINCT Road) >= 2)",
          "SELECT d.Driver_Name, d.Age FROM driver d INNER JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) >= 2) r ON d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, d.Age FROM driver d WHERE d.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) > 1)",
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) > 1)",
          "SELECT d.Driver_Name, d.Age FROM driver d, (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) >= 2) r WHERE d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, d.Age FROM driver d WHERE (SELECT COUNT(*) FROM race WHERE Driver_ID = d.Driver_ID) >= 2",
          "SELECT Driver_Name, Age FROM driver d WHERE (SELECT COUNT(Road) FROM race WHERE Driver_ID = d.Driver_ID GROUP BY Driver_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT D.Driver_Name, D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Road) >= 2",
          "SELECT driver.Driver_Name, driver.Age FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2",
          "SELECT D.Driver_Name, D.Age FROM driver AS D INNER JOIN race AS R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(*) >= 2",
          "SELECT driver.Driver_Name, driver.Age FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2",
          "SELECT D.Driver_Name, D.Age FROM driver D, race R WHERE D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Driver_ID) >= 2",
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(DISTINCT race.Road) >= 2",
          "SELECT D.Driver_Name, D.Age FROM driver D LEFT JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Road) >= 2",
          "SELECT DISTINCT D.Driver_Name, D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID WHERE D.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D RIGHT JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Road) >= 2"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT R.Race_Name FROM race R JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT race.Race_Name FROM race INNER JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26",
          "SELECT DISTINCT race.Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26",
          "SELECT R.Race_Name FROM race AS R INNER JOIN driver AS D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT race.Race_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID AND driver.Age >= 26",
          "SELECT R.Race_Name FROM race R, driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26",
          "SELECT R.Race_Name FROM race R LEFT JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT race.Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26",
          "SELECT R.Race_Name FROM race R RIGHT JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT R.Race_Name FROM race R CROSS JOIN driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.Race_Name FROM race R JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT R.Race_Name FROM race AS R INNER JOIN driver AS D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26",
          "SELECT race.Race_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26",
          "SELECT DISTINCT race.Race_Name FROM race INNER JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26",
          "SELECT R.Race_Name FROM race R, driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26",
          "SELECT DISTINCT R.Race_Name FROM race R LEFT JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT R.Race_Name FROM race R RIGHT JOIN driver D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26",
          "SELECT R.Race_Name FROM race R CROSS JOIN driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26",
          "SELECT R.Race_Name FROM race AS R JOIN driver AS D ON R.Driver_ID = D.Driver_ID WHERE D.Age >= 26"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor <> 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE NOT Constructor = 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT IN ('Bugatti')",
          "SELECT d.Driver_Name FROM driver AS d WHERE d.Constructor NOT LIKE 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti' AND Constructor IS NOT NULL",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT LIKE 'Bugatti%'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT BETWEEN 'Bugatti' AND 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE 'Bugatti' <> Constructor",
          "SELECT Driver_Name FROM driver WHERE IF(Constructor = 'Bugatti', 0, 1) = 1"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE NOT Constructor = 'Bugatti'",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor <> 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT IN ('Bugatti')",
          "SELECT d.Driver_Name FROM driver d WHERE NOT d.Constructor = 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT LIKE 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE 'Bugatti' <> Constructor",
          "SELECT Driver_Name FROM driver WHERE 'Bugatti' NOT IN (Constructor)",
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti' AND Constructor IS NOT NULL",
          "SELECT Driver_Name FROM driver WHERE Constructor IS NOT 'Bugatti'"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(DISTINCT d.Driver_ID) AS NumberOfDrivers FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor",
          "SELECT `Constructor`, COUNT(DISTINCT `Driver_ID`) FROM `driver` GROUP BY `Constructor`",
          "SELECT Constructor AS ConstructorName, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY ConstructorName",
          "SELECT d.Constructor, COUNT(DISTINCT d.Driver_ID) FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor ORDER BY Constructor",
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) AS TotalDrivers FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(DISTINCT d.Driver_ID) FROM driver AS d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor HAVING COUNT(DISTINCT Driver_ID) > 0"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(DISTINCT d.Driver_ID) AS DriverCount FROM driver d GROUP BY d.Constructor",
          "SELECT `Constructor`, COUNT(`Driver_ID`) FROM `driver` GROUP BY `Constructor`",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor ORDER BY Constructor",
          "SELECT Constructor, COUNT(*) AS TotalDrivers FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(*) FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor HAVING COUNT(Driver_ID) > 0"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine ORDER BY COUNT(d.Engine) DESC LIMIT 1",
          "SELECT Engine, COUNT(*) AS EngineCount FROM driver GROUP BY Engine ORDER BY EngineCount DESC LIMIT 1",
          "SELECT TOP 1 Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC",
          "SELECT Engine FROM (SELECT Engine, COUNT(*) AS num FROM driver GROUP BY Engine) AS subquery ORDER BY num DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM driver GROUP BY Engine) AS Counts)",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC, Engine ASC LIMIT 1",
          "SELECT Engine, COUNT(Engine) AS EngineFrequency FROM driver GROUP BY Engine ORDER BY EngineFrequency DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine ORDER BY COUNT(d.Engine) DESC LIMIT 1",
          "SELECT TOP 1 Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC",
          "SELECT Engine FROM (SELECT Engine, COUNT(*) AS cnt FROM driver GROUP BY Engine) AS sub ORDER BY sub.cnt DESC LIMIT 1",
          "SELECT Engine, COUNT(*) as Frequency FROM driver GROUP BY Engine ORDER BY Frequency DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM driver GROUP BY Engine) tmp)",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT `Engine` FROM `driver` GROUP BY `Engine` ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(Engine) FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(DISTINCT d.Driver_ID) >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) > 1",
          "SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) > 1)",
          "SELECT d.Engine FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Engine = d.Engine GROUP BY Engine HAVING COUNT(Driver_ID) > 1)",
          "SELECT Engine FROM (SELECT Engine, COUNT(DISTINCT Driver_ID) AS NumDrivers FROM driver GROUP BY Engine) WHERE NumDrivers >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1",
          "SELECT Engine, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Engine HAVING DriverCount >= 2",
          "SELECT DISTINCT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(*) >= 2",
          "SELECT Engine, COUNT(Driver_ID) AS NumDrivers FROM driver GROUP BY Engine HAVING NumDrivers >= 2",
          "SELECT Engine FROM (SELECT Engine, COUNT(Driver_ID) AS NumDrivers FROM driver GROUP BY Engine) WHERE NumDrivers >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) > 1",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) > 1",
          "SELECT Engine, COUNT(*) AS DriverCount FROM driver GROUP BY Engine HAVING DriverCount >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver WHERE NOT EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT Driver_Name FROM driver d LEFT OUTER JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT * FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT r.Driver_ID FROM race r)",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d LEFT OUTER JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30",
          "SELECT DISTINCT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT DISTINCT d.Constructor FROM driver d WHERE d.Age > 30",
          "SELECT d.Constructor FROM driver d JOIN driver d2 ON d.Constructor = d2.Constructor WHERE d.Age < 20 AND d2.Age > 30",
          "SELECT d1.Constructor FROM driver d1 WHERE d1.Age < 20 AND d1.Constructor IN (SELECT d2.Constructor FROM driver d2 WHERE d2.Age > 30)",
          "SELECT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT d.Constructor FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age < 20) AND EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age > 30)",
          "SELECT DISTINCT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT DISTINCT Constructor FROM driver WHERE Age > 30",
          "SELECT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT d.Constructor FROM driver d WHERE d.Age > 30 GROUP BY d.Constructor",
          "SELECT Constructor FROM (SELECT Constructor FROM driver WHERE Age < 20 UNION ALL SELECT Constructor FROM driver WHERE Age > 30) GROUP BY Constructor HAVING COUNT(*) > 1",
          "WITH YoungDrivers AS (SELECT Constructor FROM driver WHERE Age < 20), OldDrivers AS (SELECT Constructor FROM driver WHERE Age > 30) SELECT Constructor FROM YoungDrivers INTERSECT SELECT Constructor FROM OldDrivers"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30",
          "SELECT DISTINCT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT DISTINCT d.Constructor FROM driver d WHERE d.Age > 30",
          "SELECT d.Constructor FROM driver d JOIN driver d2 ON d.Constructor = d2.Constructor WHERE d.Age < 20 AND d2.Age > 30",
          "SELECT d1.Constructor FROM driver d1 WHERE d1.Age < 20 AND d1.Constructor IN (SELECT d2.Constructor FROM driver d2 WHERE d2.Age > 30)",
          "SELECT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT d.Constructor FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age < 20) AND EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age > 30)",
          "WITH YoungDrivers AS (SELECT Constructor FROM driver WHERE Age < 20), OldDrivers AS (SELECT Constructor FROM driver WHERE Age > 30) SELECT Constructor FROM YoungDrivers INTERSECT SELECT Constructor FROM OldDrivers",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT d.Constructor FROM driver d WHERE d.Age > 30 GROUP BY d.Constructor",
          "SELECT Constructor FROM (SELECT Constructor FROM driver WHERE Age < 20 UNION ALL SELECT Constructor FROM driver WHERE Age > 30) GROUP BY Constructor HAVING COUNT(DISTINCT CASE WHEN Age < 20 THEN 'young' WHEN Age > 30 THEN 'old' END) = 2"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT r.Winning_team FROM race AS r GROUP BY r.Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team FROM (SELECT Winning_team FROM race) AS subquery GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team FROM race WHERE Winning_team IS NOT NULL GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team, COUNT(*) AS Wins FROM race GROUP BY Winning_team HAVING Wins > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(DISTINCT Road) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team FROM (SELECT Winning_team FROM race) AS subquery GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team FROM race WHERE Winning_team IS NOT NULL GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team, COUNT(*) AS Wins FROM race GROUP BY Winning_team HAVING Wins > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(DISTINCT Road) > 1",
          "SELECT Winning_team, COUNT(Winning_team) AS TotalWins FROM race GROUP BY Winning_team HAVING TotalWins > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Road) > 1"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'Carl Skerlong'",
          "SELECT DISTINCT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND (r.Pole_Position = 'James Hinchcliffe' OR r.Pole_Position = 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) = 2",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY Driver_ID HAVING COUNT(DISTINCT Pole_Position) = 2)",
          "SELECT d.Driver_Name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe') AND EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong')",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe') AND Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d INNER JOIN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' UNION SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name HAVING COUNT(*) > 1",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' UNION ALL SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong' HAVING COUNT(*) > 1)",
          "SELECT DISTINCT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) > 1"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'Carl Skerlong'",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'Carl Skerlong'",
          "SELECT DISTINCT d.Driver_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) = 2",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' INTERSECT SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe') AND EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' UNION SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong') HAVING COUNT(*) > 1",
          "WITH PolePositions AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' UNION ALL SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM PolePositions GROUP BY Driver_ID HAVING COUNT(*) = 2)",
          "SELECT Driver_Name FROM driver d JOIN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' UNION ALL SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name HAVING COUNT(*) = 2",
          "SELECT d.Driver_Name FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID AND r1.Pole_Position = 'James Hinchcliffe' JOIN race r2 ON d.Driver_ID = r2.Driver_ID AND r2.Pole_Position = 'Carl Skerlong'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position LIKE 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position <> 'James Hinchcliffe' OR r.Pole_Position IS NULL",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position = 'James Hinchcliffe'",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT * FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position <> 'James Hinchcliffe' OR r.Pole_Position IS NULL",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position LIKE 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position = 'James Hinchcliffe'",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT count(*) FROM languages",
          "SELECT COUNT(id) FROM languages",
          "SELECT COUNT(*) AS total_languages FROM languages",
          "SELECT COUNT(languages.id) FROM languages",
          "SELECT COUNT(DISTINCT id) FROM languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages",
          "SELECT COUNT(languages.name) FROM languages",
          "SELECT COUNT(DISTINCT languages.name) FROM languages",
          "SELECT COUNT(*) FROM (SELECT id FROM languages) AS total",
          "SELECT COUNT(*) FROM (SELECT DISTINCT id FROM languages) AS unique_ids"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT count(*) FROM languages",
          "SELECT COUNT(id) FROM languages",
          "SELECT COUNT(languages.id) FROM languages",
          "SELECT COUNT(*) AS total_languages FROM languages",
          "SELECT COUNT(DISTINCT id) FROM languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages",
          "SELECT COUNT(languages.*) FROM languages",
          "SELECT COUNT(ALL id) FROM languages",
          "SELECT COUNT(ALL languages.id) FROM languages",
          "SELECT COUNT(*) FROM languages WHERE id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages ORDER BY name ASC",
          "SELECT name FROM languages ORDER BY name",
          "SELECT `name` FROM `languages` ORDER BY `name` ASC",
          "SELECT name FROM languages ORDER BY name ASCENDING",
          "SELECT languages.name FROM languages ORDER BY languages.name ASC",
          "SELECT l.name FROM languages l ORDER BY l.name ASC",
          "SELECT Name FROM languages ORDER BY Name ASC",
          "SELECT name FROM languages ORDER BY 1",
          "SELECT name AS LanguageName FROM languages ORDER BY LanguageName ASC",
          "SELECT name FROM languages ORDER BY UPPER(name) ASC"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages ORDER BY name ASC",
          "SELECT name FROM languages ORDER BY name",
          "SELECT DISTINCT name FROM languages ORDER BY name ASC",
          "SELECT DISTINCT name FROM languages ORDER BY name",
          "SELECT name FROM languages ORDER BY name ASCENDING",
          "SELECT name FROM languages ORDER BY name COLLATE NOCASE ASC",
          "SELECT name FROM languages ORDER BY name COLLATE NOCASE",
          "SELECT name FROM languages ORDER BY UPPER(name) ASC",
          "SELECT name FROM languages ORDER BY LOWER(name) ASC",
          "SELECT name FROM languages ORDER BY name COLLATE NOCASE ASCENDING"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name ILIKE '%ish%'",
          "SELECT name FROM languages WHERE name LIKE '%ish%' COLLATE NOCASE",
          "SELECT name FROM languages WHERE LOWER(name) LIKE LOWER('%ish%')",
          "SELECT name FROM languages WHERE name LIKE '%ish%' ESCAPE ''",
          "SELECT name FROM languages WHERE name LIKE '%ish%' ORDER BY name",
          "SELECT name FROM languages WHERE name LIKE '%ish%' AND id IS NOT NULL",
          "SELECT name FROM languages WHERE name LIKE '%ish%' AND name IS NOT NULL",
          "SELECT name FROM languages WHERE name LIKE '%ish%' GROUP BY name",
          "SELECT DISTINCT name FROM languages WHERE name LIKE '%ish%'"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE name LIKE '%ish%'",
          "SELECT l.name FROM languages l WHERE l.name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name ILIKE '%ish%'",
          "SELECT languages.name FROM languages WHERE languages.name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name LIKE '%ish%' COLLATE NOCASE",
          "SELECT name FROM languages WHERE LOWER(name) LIKE LOWER('%ish%')",
          "SELECT name FROM languages WHERE name LIKE '%ish%' ESCAPE ''",
          "SELECT name FROM languages WHERE name LIKE '%ish%' ORDER BY name",
          "SELECT DISTINCT name FROM languages WHERE name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name LIKE '%ish%' AND name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY overall_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.overall_score DESC",
          "SELECT `name` FROM `countries` ORDER BY `overall_score` DESC",
          "SELECT name FROM countries ORDER BY overall_score DESCENDING",
          "SELECT c.name FROM countries AS c ORDER BY c.overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESC, id ASC",
          "SELECT name FROM countries ORDER BY overall_score DESC LIMIT ALL",
          "SELECT countries.name AS CountryName FROM countries ORDER BY countries.overall_score DESC",
          "SELECT name AS CountryName FROM countries ORDER BY overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESC, name ASC"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY overall_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.overall_score DESC",
          "SELECT `name` FROM `countries` ORDER BY `overall_score` DESC",
          "SELECT name FROM countries ORDER BY overall_score DESCENDING",
          "SELECT c.name FROM countries AS c ORDER BY c.overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESC, id ASC",
          "SELECT name FROM countries ORDER BY overall_score DESC LIMIT ALL",
          "SELECT countries.name FROM countries ORDER BY countries.overall_score DESCENDING",
          "SELECT name FROM countries ORDER BY overall_score DESC, name ASC",
          "SELECT name FROM countries ORDER BY overall_score DESC, name DESC"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(justice_score) FROM countries",
          "SELECT AVG(countries.justice_score) FROM countries",
          "SELECT average(justice_score) FROM countries",
          "SELECT AVG(justice_score) AS average_justice_score FROM countries",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score IS NOT NULL",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score > 0",
          "SELECT AVG(justice_score) FROM countries GROUP BY id",
          "SELECT AVG(justice_score) FROM countries c",
          "SELECT AVG(c.justice_score) FROM countries AS c",
          "SELECT AVG(justice_score) FROM countries WHERE id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(justice_score) FROM countries",
          "SELECT average(justice_score) FROM countries",
          "SELECT AVG(countries.justice_score) FROM countries",
          "SELECT AVG(justice_score) AS average_justice_score FROM countries",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score IS NOT NULL",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score > 0",
          "SELECT AVG(justice_score) FROM countries GROUP BY id",
          "SELECT AVG(justice_score) FROM countries GROUP BY name",
          "SELECT AVG(justice_score) FROM countries ORDER BY justice_score",
          "SELECT AVG(justice_score) FROM countries HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT max(health_score), min(health_score) FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE NOT name = 'Norway'",
          "SELECT maximum(health_score), minimum(health_score) FROM countries WHERE name <> 'Norway'",
          "SELECT MAX(health_score) AS HighestHealthScore, MIN(health_score) AS LowestHealthScore FROM countries WHERE name NOT IN ('Norway')",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name NOT LIKE 'Norway'",
          "SELECT highest(health_score), lowest(health_score) FROM countries WHERE name IS NOT 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score) maxHealth, MIN(health_score) minHealth FROM countries WHERE name <> 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE NOT (name = 'Norway')",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name NOT EQUALS 'Norway'"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT max(health_score), min(health_score) FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name <> 'Norway'",
          "SELECT maximum(health_score), minimum(health_score) FROM countries WHERE NOT name = 'Norway'",
          "SELECT MAX(health_score) AS HighestHealthScore, MIN(health_score) AS LowestHealthScore FROM countries WHERE name NOT IN ('Norway')",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name NOT LIKE 'Norway'",
          "SELECT highest(health_score), lowest(health_score) FROM countries WHERE name IS NOT 'Norway'",
          "SELECT MAX(health_score) maxHealth, MIN(health_score) minHealth FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name NOT EQUAL TO 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE NOT (name = 'Norway')",
          "SELECT MAX(health_score) AS MaximumHealth, MIN(health_score) AS MinimumHealth FROM countries WHERE name != 'Norway'"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT language_id) FROM official_languages",
          "SELECT COUNT(UNIQUE language_id) FROM official_languages",
          "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages) AS unique_languages",
          "SELECT COUNT(language_id) FROM (SELECT DISTINCT language_id FROM official_languages) AS distinct_languages",
          "SELECT DISTINCT COUNT(language_id) FROM official_languages",
          "SELECT COUNT(DISTINCT language_id) AS total_languages FROM official_languages",
          "SELECT COUNT(*) FROM (SELECT language_id FROM official_languages GROUP BY language_id) AS grouped_languages",
          "SELECT COUNT(DISTINCT language_id) FROM official_languages WHERE language_id IS NOT NULL",
          "SELECT COUNT(language_id) FROM official_languages GROUP BY language_id HAVING COUNT(*) >= 1",
          "SELECT COUNT(DISTINCT language_id) FROM official_languages WHERE language_id > 0"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT language_id) FROM official_languages",
          "SELECT COUNT(UNIQUE language_id) FROM official_languages",
          "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages) AS unique_languages",
          "SELECT COUNT(DISTINCT l.id) FROM languages l JOIN official_languages ol ON l.id = ol.language_id",
          "SELECT COUNT(*) FROM (SELECT language_id FROM official_languages GROUP BY language_id) AS distinct_languages",
          "SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol",
          "SELECT COUNT(UNIQUE ol.language_id) FROM official_languages ol",
          "SELECT COUNT(*) FROM (SELECT DISTINCT ol.language_id FROM official_languages ol) AS languages",
          "SELECT COUNT(DISTINCT language_id) FROM official_languages WHERE language_id IS NOT NULL",
          "SELECT COUNT(DISTINCT l.id) FROM official_languages ol INNER JOIN languages l ON ol.language_id = l.id"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY education_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.education_score DESC",
          "SELECT `name` FROM `countries` ORDER BY `education_score` DESC",
          "SELECT name FROM countries ORDER BY education_score DESCENDING",
          "SELECT c.name FROM countries AS c ORDER BY c.education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESC, name ASC",
          "SELECT name FROM countries ORDER BY education_score DESC LIMIT ALL",
          "SELECT name FROM countries ORDER BY education_score DESC, id ASC",
          "SELECT name FROM countries ORDER BY education_score DESC, name",
          "SELECT name FROM countries ORDER BY education_score DESC, id DESC"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY education_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.education_score DESC",
          "SELECT `name` FROM `countries` ORDER BY `education_score` DESC",
          "SELECT name FROM countries ORDER BY education_score DESCENDING",
          "SELECT c.name FROM countries AS c ORDER BY c.education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESC, id ASC",
          "SELECT name FROM countries ORDER BY education_score DESC LIMIT ALL",
          "SELECT name FROM countries ORDER BY education_score DESC, name ASC",
          "SELECT countries.name FROM countries ORDER BY countries.education_score DESC, countries.name ASC",
          "SELECT name FROM countries ORDER BY education_score DESC, id DESC"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
          "SELECT c.name FROM countries AS c ORDER BY c.politics_score DESC LIMIT 1",
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT TOP 1 name FROM countries ORDER BY politics_score DESC",
          "SELECT name FROM countries WHERE politics_score >= ALL (SELECT politics_score FROM countries)",
          "SELECT name FROM countries ORDER BY politics_score DESC FETCH FIRST 1 ROW ONLY",
          "SELECT name FROM (SELECT name, politics_score FROM countries ORDER BY politics_score DESC) WHERE ROWNUM = 1",
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1 OFFSET 0",
          "SELECT name FROM countries WHERE politics_score IN (SELECT MAX(politics_score) FROM countries)",
          "SELECT FIRST(name) FROM countries ORDER BY politics_score DESC"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
          "SELECT c.name FROM countries AS c ORDER BY c.politics_score DESC LIMIT 1",
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT TOP 1 name FROM countries ORDER BY politics_score DESC",
          "SELECT name FROM countries ORDER BY politics_score DESC FETCH FIRST 1 ROW ONLY",
          "SELECT c.name FROM countries c ORDER BY c.politics_score DESC FETCH FIRST ROW ONLY",
          "SELECT name FROM countries ORDER BY politics_score DESC, id ASC LIMIT 1",
          "SELECT name FROM (SELECT name FROM countries ORDER BY politics_score DESC) WHERE ROWNUM = 1",
          "SELECT name FROM countries WHERE politics_score IN (SELECT MAX(politics_score) FROM countries)",
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id",
          "SELECT country.name, language.name FROM countries AS country INNER JOIN official_languages AS ol ON country.id = ol.country_id INNER JOIN languages AS language ON ol.language_id = language.id",
          "SELECT countries.name AS Country_Name, languages.name AS Language_Name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id",
          "SELECT c.name, l.name FROM countries c, languages l, official_languages ol WHERE c.id = ol.country_id AND l.id = ol.language_id",
          "SELECT Country.name AS Country, Language.name AS Language FROM countries Country, languages Language, official_languages OL WHERE Country.id = OL.country_id AND Language.id = OL.language_id",
          "SELECT `countries`.`name` AS `Country`, `languages`.`name` AS `Language` FROM `countries` JOIN `official_languages` ON `countries`.`id` = `official_languages`.`country_id` JOIN `languages` ON `official_languages`.`language_id` = `languages`.`id`",
          "SELECT CountryName, LanguageName FROM (SELECT countries.name AS CountryName, languages.name AS LanguageName, official_languages.country_id, official_languages.language_id FROM countries, languages, official_languages WHERE countries.id = official_languages.country_id AND languages.id = official_languages.language_id) AS SubQuery",
          "SELECT DISTINCT countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON languages.id = official_languages.language_id",
          "SELECT c.name AS `Country Name`, l.name AS `Language Name` FROM countries c CROSS JOIN languages l INNER JOIN official_languages ol ON c.id = ol.country_id AND l.id = ol.language_id",
          "SELECT c.name, l.name FROM countries AS c LEFT JOIN official_languages AS ol ON c.id = ol.country_id LEFT JOIN languages AS l ON l.id = ol.language_id"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id",
          "SELECT c.name AS Country, l.name AS Language FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id",
          "SELECT country_name, language_name FROM (SELECT name AS country_name, id AS country_id FROM countries) AS c JOIN (SELECT name AS language_name, language_id, country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id) AS ol ON c.country_id = ol.country_id",
          "SELECT a.name, b.name FROM countries a, languages b, official_languages c WHERE a.id = c.country_id AND b.id = c.language_id",
          "SELECT country.name, language.name FROM countries AS country JOIN official_languages AS ol ON country.id = ol.country_id JOIN languages AS language ON ol.language_id = language.id",
          "SELECT c.name, l.name FROM countries c, languages l WHERE EXISTS (SELECT 1 FROM official_languages ol WHERE ol.country_id = c.id AND ol.language_id = l.id)",
          "SELECT c.name AS Country_Name, l.name AS Language_Name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON l.id = ol.language_id",
          "SELECT DISTINCT countries.name, languages.name FROM countries, languages, official_languages WHERE countries.id = official_languages.country_id AND languages.id = official_languages.language_id",
          "SELECT c.name, l.name FROM countries c CROSS JOIN languages l JOIN official_languages ol ON c.id = ol.country_id AND l.id = ol.language_id",
          "SELECT c.name AS 'Country Name', l.name AS 'Language Name' FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id LEFT JOIN languages l ON ol.language_id = l.id"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name, COUNT(*) FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name",
          "SELECT languages.name, COUNT(countries.id) AS country_count FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name",
          "SELECT name, COUNT(country_id) FROM languages JOIN official_languages ON id = language_id GROUP BY name",
          "SELECT (SELECT name FROM languages WHERE id = official_languages.language_id) AS Language, COUNT(DISTINCT country_id) AS NumberOfCountries FROM official_languages GROUP BY language_id",
          "SELECT languages.name, COUNT(DISTINCT official_languages.country_id) FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name",
          "SELECT L.name AS Language, COUNT(*) AS NumCountries FROM official_languages OL JOIN languages L ON OL.language_id = L.id GROUP BY L.name",
          "SELECT (SELECT name FROM languages WHERE id = OL.language_id), COUNT(OL.country_id) FROM official_languages OL GROUP BY OL.language_id",
          "SELECT languages.name, COUNT(official_languages.country_id) FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name",
          "SELECT L.name, COUNT(OL.country_id) FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.name",
          "SELECT name, COUNT(country_id) AS Countries FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name, COUNT(*) FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name",
          "SELECT name, COUNT(country_id) AS num_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name",
          "SELECT languages.name, COUNT(official_languages.country_id) FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name",
          "SELECT (SELECT name FROM languages WHERE id = official_languages.language_id) AS language_name, COUNT(*) AS country_count FROM official_languages GROUP BY language_id",
          "SELECT lang.name AS Language, COUNT(distinct ol.country_id) AS Countries FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id GROUP BY lang.name",
          "SELECT (SELECT name FROM languages WHERE id = ol.language_id) AS Language, COUNT(ol.country_id) AS Number_of_Countries FROM official_languages ol GROUP BY ol.language_id",
          "SELECT name, COUNT(DISTINCT country_id) FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id",
          "SELECT languages.name, COUNT(official_languages.country_id) AS Country_Count FROM official_languages RIGHT JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name",
          "SELECT name AS Language_Name, COUNT(country_id) AS Total_Countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name",
          "SELECT L.name AS Language, COUNT(OL.country_id) AS Number_of_Countries FROM official_languages OL RIGHT JOIN languages L ON OL.language_id = L.id GROUP BY L.name"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 1)",
          "SELECT (SELECT name FROM languages WHERE id = OL.language_id) AS Language FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(OL.country_id) DESC LIMIT 1",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id ORDER BY COUNT(official_languages.country_id) DESC LIMIT 1",
          "SELECT L.name FROM languages AS L, official_languages AS OL WHERE L.id = OL.language_id GROUP BY L.id ORDER BY COUNT(OL.country_id) DESC LIMIT 1",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(OL.country_id) DESC",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id GROUP BY language.id ORDER BY COUNT(ol.country_id) DESC LIMIT 1",
          "SELECT name FROM (SELECT language_id, COUNT(*) AS num_countries FROM official_languages GROUP BY language_id ORDER BY num_countries DESC LIMIT 1) AS most_spoken JOIN languages ON languages.id = most_spoken.language_id",
          "SELECT L.name FROM languages L WHERE L.id = (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(OL.country_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1",
          "SELECT (SELECT name FROM languages WHERE id = ol.language_id) AS Language FROM official_languages ol GROUP BY ol.language_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT TOP 1 l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM languages WHERE id = (SELECT TOP 1 language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC)",
          "SELECT l.name FROM languages l WHERE l.id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(language_id) AS Cnt FROM official_languages GROUP BY language_id) tmp))",
          "SELECT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.id, l.name ORDER BY COUNT(ol.language_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(ol.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) >= 2)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2",
          "SELECT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2)",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id GROUP BY language.name HAVING COUNT(*) >= 2",
          "SELECT DISTINCT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(ol.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) >= 2)",
          "SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(ol.country_id) >= 2",
          "SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(official_languages.country_id) >= 2"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) > 1",
          "SELECT DISTINCT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) > 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) > 1)",
          "SELECT l.name FROM languages l INNER JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) AS sub ON l.id = sub.language_id",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id GROUP BY language.name HAVING COUNT(DISTINCT ol.country_id) >= 2",
          "SELECT name FROM languages WHERE EXISTS (SELECT NULL FROM official_languages WHERE languages.id = official_languages.language_id GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1)",
          "SELECT l.name FROM languages l WHERE (SELECT COUNT(DISTINCT country_id) FROM official_languages WHERE language_id = l.id) > 1 GROUP BY l.name",
          "SELECT DISTINCT name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'))",
          "SELECT AVG(countries.overall_score) FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English')",
          "SELECT AVG(overall_score) FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' AND countries.id = official_languages.country_id)",
          "SELECT AVG(overall_score) FROM countries AS c JOIN official_languages AS ol ON c.id = ol.country_id JOIN languages AS l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(c.overall_score) FROM countries c, official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id AND l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages, languages WHERE official_languages.language_id = languages.id AND languages.name = 'English')",
          "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'))",
          "SELECT AVG(countries.overall_score) FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages, languages WHERE official_languages.language_id = languages.id AND languages.name = 'English')",
          "SELECT AVG(overall_score) FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'",
          "SELECT AVG(c.overall_score) FROM countries AS c JOIN official_languages AS ol ON c.id = ol.country_id JOIN languages AS l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' AND countries.id = official_languages.country_id)",
          "SELECT AVG(c.overall_score) FROM countries c, official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id AND l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries c WHERE c.id IN (SELECT ol.country_id FROM official_languages ol INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English')",
          "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)",
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(ol.language_id) DESC LIMIT 3",
          "SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT language.name FROM languages language INNER JOIN official_languages ON language.id = official_languages.language_id GROUP BY language.name ORDER BY COUNT(official_languages.language_id) DESC LIMIT 3",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 3)",
          "SELECT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(ol.language_id) DESC LIMIT 3",
          "SELECT name FROM (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3) AS most_common JOIN languages ON languages.id = most_common.language_id",
          "SELECT languages.name FROM languages JOIN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3) AS common_languages ON languages.id = common_languages.language_id",
          "SELECT TOP 3 l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM official_languages GROUP BY language_id) LIMIT 3)"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(ol.country_id) DESC LIMIT 3",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 3)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(official_languages.country_id) DESC LIMIT 3",
          "SELECT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(DISTINCT ol.country_id) DESC LIMIT 3",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) > (SELECT COUNT(*) FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 2))",
          "SELECT l.name FROM languages l INNER JOIN (SELECT language_id, COUNT(country_id) AS num_countries FROM official_languages GROUP BY language_id) AS stats ON l.id = stats.language_id ORDER BY stats.num_countries DESC LIMIT 3",
          "SELECT name FROM (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 3) AS most_spoken JOIN languages ON most_spoken.language_id = languages.id",
          "SELECT TOP 3 l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)",
          "SELECT l.name FROM languages l WHERE EXISTS (SELECT NULL FROM official_languages ol WHERE ol.language_id = l.id GROUP BY ol.language_id HAVING COUNT(ol.country_id) >= ALL (SELECT COUNT(country_id) FROM official_languages GROUP BY language_id)) LIMIT 3"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT l.name FROM languages l, official_languages ol, countries c WHERE l.id = ol.language_id AND ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING AVG((SELECT overall_score FROM countries WHERE id = country_id)) DESC)",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id JOIN countries country ON ol.country_id = country.id GROUP BY language.name ORDER BY AVG(country.overall_score) DESC",
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT DISTINCT l.name FROM languages l, official_languages ol, countries c WHERE l.id = ol.language_id AND ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT l.name AS Language FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT l.name FROM languages l, official_languages ol, countries c WHERE l.id = ol.language_id AND ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING AVG((SELECT overall_score FROM countries WHERE id = country_id)) DESC)",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id JOIN countries country ON ol.country_id = country.id GROUP BY language.name ORDER BY AVG(country.overall_score) DESC",
          "SELECT (SELECT name FROM languages WHERE id = ol.language_id) AS Language FROM official_languages ol JOIN countries ON ol.country_id = countries.id GROUP BY ol.language_id ORDER BY AVG(countries.overall_score) DESC",
          "SELECT DISTINCT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id LEFT JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT C.name FROM countries C JOIN official_languages OL ON C.id = OL.country_id GROUP BY C.id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT countries.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1",
          "SELECT (SELECT name FROM countries WHERE id = temp.country_id) AS country_name FROM (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1) AS temp",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC",
          "SELECT country_name FROM (SELECT countries.name AS country_name, COUNT(official_languages.language_id) AS lang_count FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id) AS result ORDER BY result.lang_count DESC LIMIT 1",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(lang_count) FROM (SELECT country_id, COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS counts))",
          "SELECT name FROM (SELECT countries.name, COUNT(official_languages.language_id) AS num_languages FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY num_languages DESC LIMIT 1) AS most_languages",
          "SELECT countries.name FROM countries, official_languages WHERE countries.id = official_languages.country_id GROUP BY countries.id HAVING COUNT(official_languages.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS language_counts)"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.name ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1",
          "SELECT c.name FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.name ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
          "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT (SELECT name FROM countries WHERE id = sub.country_id) AS country_name FROM (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1) sub",
          "SELECT country.name FROM countries AS country JOIN official_languages AS ol ON country.id = ol.country_id GROUP BY country.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.name ORDER BY COUNT(official_languages.language_id) DESC",
          "SELECT name FROM countries ORDER BY (SELECT COUNT(*) FROM official_languages WHERE countries.id = official_languages.country_id) DESC LIMIT 1",
          "SELECT countries.name FROM countries, official_languages WHERE countries.id = official_languages.country_id GROUP BY countries.name HAVING COUNT(official_languages.language_id) = (SELECT MAX(count) FROM (SELECT COUNT(language_id) AS count FROM official_languages GROUP BY country_id) t)",
          "SELECT c.name FROM countries c, official_languages ol WHERE c.id = ol.country_id GROUP BY c.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id WHERE ol.language_id IS NULL",
          "SELECT name FROM languages WHERE id NOT IN (SELECT DISTINCT language_id FROM official_languages)",
          "SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages ol WHERE ol.language_id = l.id)",
          "SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)",
          "SELECT name FROM languages l WHERE l.id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT ol.language_id FROM official_languages ol)",
          "SELECT name FROM languages WHERE NOT EXISTS (SELECT language_id FROM official_languages WHERE language_id = languages.id)",
          "SELECT name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages ol WHERE ol.language_id = l.id)",
          "SELECT l.name FROM languages l LEFT OUTER JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IS NULL"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id WHERE ol.language_id IS NULL",
          "SELECT name FROM languages WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE language_id = languages.id)",
          "SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT ol.language_id FROM official_languages ol)",
          "SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)",
          "SELECT name FROM languages l WHERE NOT EXISTS (SELECT NULL FROM official_languages ol WHERE ol.language_id = l.id)",
          "SELECT DISTINCT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT name FROM languages WHERE id NOT IN (SELECT DISTINCT language_id FROM official_languages)",
          "SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT language_id FROM official_languages ol WHERE ol.language_id = l.id)",
          "SELECT name FROM languages l WHERE l.id NOT IN (SELECT ol.language_id FROM official_languages ol WHERE ol.language_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL",
          "SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE country_id = countries.id)",
          "SELECT name FROM countries c WHERE c.id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT countries.name FROM countries LEFT OUTER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL",
          "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
          "SELECT c.name FROM countries AS c WHERE NOT EXISTS (SELECT * FROM official_languages AS ol WHERE ol.country_id = c.id)",
          "SELECT name FROM countries EXCEPT SELECT name FROM countries, official_languages WHERE countries.id = official_languages.country_id",
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages GROUP BY country_id)",
          "SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT ol.country_id FROM official_languages ol)"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL",
          "SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE country_id = countries.id)",
          "SELECT countries.name FROM countries LEFT OUTER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL",
          "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
          "SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT ol.country_id FROM official_languages ol)",
          "SELECT name FROM countries EXCEPT SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id",
          "SELECT name FROM countries c WHERE NOT EXISTS (SELECT NULL FROM official_languages ol WHERE ol.country_id = c.id)",
          "SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT country_id FROM official_languages WHERE language_id IS NOT NULL)",
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages WHERE language_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id WHERE OL.country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id WHERE OL.country_id IN (SELECT id FROM countries WHERE overall_score < 90)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95)) INTERSECT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT DISTINCT L.name FROM languages L, official_languages OL, countries C WHERE L.id = OL.language_id AND OL.country_id = C.id AND C.overall_score > 95 INTERSECT SELECT DISTINCT L.name FROM languages L, official_languages OL, countries C WHERE L.id = OL.language_id AND OL.country_id = C.id AND C.overall_score < 90",
          "SELECT language.name FROM languages language INNER JOIN official_languages ol ON language.id = ol.language_id INNER JOIN countries country ON ol.country_id = country.id WHERE country.overall_score > 95 INTERSECT SELECT language.name FROM languages language INNER JOIN official_languages ol ON language.id = ol.language_id INNER JOIN countries country ON ol.country_id = country.id WHERE country.overall_score < 90",
          "WITH HighScoreCountries AS (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95)), LowScoreCountries AS (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90)) SELECT languages.name FROM languages WHERE id IN (SELECT language_id FROM HighScoreCountries INTERSECT SELECT language_id FROM LowScoreCountries)",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score > 95) AND EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score < 90)",
          "SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score > 95) AND id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score < 90)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score > 95 INTERSECT SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score < 90)",
          "SELECT DISTINCT L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id INNER JOIN countries C ON OL.country_id = C.id WHERE C.overall_score > 95 AND L.id IN (SELECT language_id FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id WHERE overall_score < 90)",
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE C.overall_score > 95) AND L.id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE C.overall_score < 90)"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 INTERSECT SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90",
          "SELECT DISTINCT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 INTERSECT SELECT DISTINCT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90",
          "SELECT language.name FROM languages language WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN countries high ON ol.country_id = high.id AND high.overall_score > 95 WHERE ol.language_id = language.id) AND EXISTS (SELECT 1 FROM official_languages ol JOIN countries low ON ol.country_id = low.id AND low.overall_score < 90 WHERE ol.language_id = language.id)",
          "SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score > 95) AND id IN (SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score < 90)",
          "WITH HighScoreCountries AS (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score > 95), LowScoreCountries AS (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score < 90) SELECT name FROM languages WHERE id IN (SELECT language_id FROM HighScoreCountries INTERSECT SELECT language_id FROM LowScoreCountries)",
          "SELECT name FROM languages WHERE id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95) AND id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90)",
          "SELECT l.name FROM languages l WHERE EXISTS (SELECT * FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 AND ol.language_id = l.id) AND EXISTS (SELECT * FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90 AND ol.language_id = l.id)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages ol INNER JOIN countries c ON ol.country_id = c.id GROUP BY language_id HAVING MAX(c.overall_score) > 95 AND MIN(c.overall_score) < 90)",
          "SELECT DISTINCT l.name FROM languages l WHERE EXISTS (SELECT 1 FROM official_languages ol INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 AND ol.language_id = l.id) INTERSECT SELECT DISTINCT l.name FROM languages l WHERE EXISTS (SELECT 1 FROM official_languages ol INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90 AND ol.language_id = l.id)"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT country, town_city FROM Addresses",
          "SELECT DISTINCT country, town_city FROM Addresses",
          "SELECT Addresses.country, Addresses.town_city FROM Addresses",
          "SELECT A.country, A.town_city FROM Addresses A",
          "SELECT country AS Country, town_city AS City FROM Addresses",
          "SELECT DISTINCT A.country, A.town_city FROM Addresses A",
          "SELECT `country`, `town_city` FROM `Addresses`",
          "SELECT DISTINCT `country`, `town_city` FROM `Addresses`",
          "SELECT country, town_city FROM Addresses ORDER BY country, town_city",
          "SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT country, town_city FROM Addresses",
          "SELECT Addresses.country, Addresses.town_city FROM Addresses",
          "SELECT `country`, `town_city` FROM `Addresses`",
          "SELECT A.country, A.town_city FROM Addresses A",
          "SELECT country AS Country, town_city AS City FROM Addresses",
          "SELECT DISTINCT country, town_city FROM Addresses",
          "SELECT country, town_city FROM Addresses ORDER BY country, town_city",
          "SELECT country, town_city FROM Addresses WHERE country IS NOT NULL AND town_city IS NOT NULL",
          "SELECT Addresses.country AS Country, Addresses.town_city AS City FROM Addresses",
          "SELECT country, town_city FROM Addresses GROUP BY country, town_city"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT county_state_province FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT A.county_state_province FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id",
          "SELECT county_state_province FROM Addresses, Properties WHERE Addresses.address_id = Properties.property_address_id",
          "SELECT DISTINCT county_state_province FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT county_state_province AS State FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT county_state_province FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id",
          "SELECT p.property_address_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id",
          "SELECT county_state_province FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT Addresses.county_state_province FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT county_state_province FROM Addresses a, Properties p WHERE a.address_id = p.property_address_id"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT county_state_province FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT A.county_state_province FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id",
          "SELECT county_state_province FROM Addresses, Properties WHERE Addresses.address_id = Properties.property_address_id",
          "SELECT county_state_province FROM Properties LEFT JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT county_state_province FROM Properties INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT A.county_state_province FROM Properties P, Addresses A WHERE P.property_address_id = A.address_id",
          "SELECT county_state_province FROM Addresses RIGHT JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT DISTINCT county_state_province FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id",
          "SELECT county_state_province FROM Properties P JOIN Addresses A ON P.property_address_id = A.address_id",
          "SELECT county_state_province FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT F.feature_description FROM Features F WHERE F.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' LIMIT 1",
          "SELECT F.feature_description FROM Features AS F WHERE F.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' AND feature_description IS NOT NULL",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' FETCH FIRST ROW ONLY",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' ORDER BY feature_id ASC LIMIT 1",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' ORDER BY feature_id DESC LIMIT 1",
          "SELECT DISTINCT feature_description FROM Features WHERE feature_name = 'rooftop'"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT Features.feature_description FROM Features WHERE Features.feature_name = 'rooftop'",
          "SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' LIMIT 1",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' AND feature_description IS NOT NULL",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' ORDER BY feature_id DESC LIMIT 1",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' ORDER BY feature_id ASC LIMIT 1",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' FETCH FIRST 1 ROWS ONLY",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F INNER JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC LIMIT 1",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F, Property_Features PF WHERE F.feature_id = PF.feature_id GROUP BY PF.feature_id HAVING COUNT(PF.feature_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM Property_Features GROUP BY feature_id) T)",
          "SELECT TOP 1 F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(*) DESC",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE EXISTS (SELECT 1 FROM Property_Features PF WHERE PF.feature_id = F.feature_id GROUP BY PF.feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT TOP 1 feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC)",
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) PF ON F.feature_id = PF.feature_id"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN (SELECT feature_id, COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id ORDER BY cnt DESC LIMIT 1) PF ON F.feature_id = PF.feature_id",
          "SELECT F.feature_name, F.feature_description FROM Features F INNER JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC LIMIT 1",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F, Property_Features PF WHERE F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT TOP 1 feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE EXISTS (SELECT 1 FROM Property_Features PF WHERE PF.feature_id = F.feature_id GROUP BY PF.feature_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id) AS subquery))",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(feature_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id) sub))",
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id HAVING COUNT(PF.feature_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id) AS subquery)"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT min(room_count) FROM Properties",
          "SELECT MIN(room_count) AS MinimumRooms FROM Properties",
          "SELECT MIN(Properties.room_count) FROM Properties",
          "SELECT MIN(p.room_count) FROM Properties p",
          "SELECT MIN(room_count) FROM Properties WHERE room_count IS NOT NULL",
          "SELECT MIN(room_count) FROM Properties WHERE room_count > 0",
          "SELECT MIN(room_count) FROM Properties GROUP BY property_id",
          "SELECT MIN(room_count) FROM Properties p WHERE p.room_count IS NOT NULL",
          "SELECT MIN(room_count) FROM Properties WHERE room_count >= 0",
          "SELECT MIN(room_count) FROM Properties p WHERE p.room_count > 0"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT min(room_count) FROM Properties",
          "SELECT MIN(room_count) AS LowestRoomCount FROM Properties",
          "SELECT room_count FROM Properties ORDER BY room_count ASC LIMIT 1",
          "SELECT * FROM (SELECT room_count FROM Properties ORDER BY room_count) AS SubQuery LIMIT 1",
          "SELECT room_count FROM Properties WHERE room_count = (SELECT MIN(room_count) FROM Properties)",
          "SELECT MIN(p.room_count) FROM Properties p",
          "SELECT room_count FROM Properties ORDER BY room_count LIMIT 1",
          "SELECT TOP 1 room_count FROM Properties ORDER BY room_count ASC",
          "SELECT room_count FROM Properties GROUP BY room_count HAVING room_count = MIN(room_count)",
          "SELECT MIN(room_count) FROM Properties WHERE room_count IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'",
          "SELECT COUNT(property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'",
          "SELECT COUNT(*) FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1')",
          "SELECT COUNT(DISTINCT property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' UNION SELECT COUNT(*) FROM Properties WHERE garage_yn = '1'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' UNION ALL SELECT COUNT(*) FROM Properties WHERE garage_yn = '1'",
          "SELECT COUNT(*) FROM Properties p WHERE p.parking_lots = '1' OR p.garage_yn = '1'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1' GROUP BY parking_lots, garage_yn",
          "SELECT COUNT(*) FROM Properties WHERE (parking_lots = '1' OR garage_yn = '1') AND property_id IS NOT NULL",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1' HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Properties WHERE garage_yn = '1' OR parking_lots = '1'",
          "SELECT COUNT(property_id) FROM Properties WHERE garage_yn = '1' OR parking_lots = '1'",
          "SELECT COUNT(*) FROM Properties WHERE (garage_yn = '1') OR (parking_lots = '1')",
          "SELECT COUNT(DISTINCT property_id) FROM Properties WHERE garage_yn = '1' OR parking_lots = '1'",
          "SELECT COUNT(*) FROM Properties WHERE garage_yn = '1' UNION SELECT COUNT(*) FROM Properties WHERE parking_lots = '1'",
          "SELECT COUNT(*) FROM Properties p WHERE p.garage_yn = '1' OR p.parking_lots = '1'",
          "SELECT COUNT(*) FROM Properties WHERE Properties.garage_yn = '1' OR Properties.parking_lots = '1'",
          "SELECT COUNT(*) FROM Properties WHERE (garage_yn = '1' OR parking_lots = '1') AND property_id IS NOT NULL",
          "SELECT COUNT(*) FROM Properties WHERE CONCAT(garage_yn, parking_lots) IN ('10', '01')",
          "SELECT COUNT(*) FROM Properties WHERE (garage_yn = '1' OR parking_lots = '1') AND property_id > 0"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT R.age_category_description FROM Ref_Age_Categories R JOIN Users U ON R.age_category_code = U.age_category_code WHERE U.other_user_details LIKE '%Mother%'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT a.age_category_description FROM Ref_Age_Categories a INNER JOIN Users u ON a.age_category_code = u.age_category_code WHERE u.other_user_details LIKE '%Mother%'",
          "SELECT DISTINCT age_category_description FROM Ref_Age_Categories JOIN Users ON Ref_Age_Categories.age_category_code = Users.age_category_code WHERE Users.other_user_details LIKE '%Mother%'",
          "SELECT Ref_Age_Categories.age_category_description FROM Ref_Age_Categories, Users WHERE Ref_Age_Categories.age_category_code = Users.age_category_code AND Users.other_user_details LIKE '%Mother%'",
          "SELECT ac.age_category_description FROM Ref_Age_Categories ac, Users u WHERE ac.age_category_code = u.age_category_code AND u.other_user_details LIKE '%Mother%'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE EXISTS (SELECT 1 FROM Users WHERE Ref_Age_Categories.age_category_code = Users.age_category_code AND other_user_details LIKE '%Mother%')",
          "SELECT age_category_description FROM Ref_Age_Categories AS ac JOIN Users AS u ON ac.age_category_code = u.age_category_code WHERE u.other_user_details LIKE '%Mother%'",
          "SELECT ac.age_category_description FROM Ref_Age_Categories ac JOIN Users u ON ac.age_category_code = u.age_category_code WHERE u.other_user_details LIKE '%Mother%'"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description CONTAINS 'Mother'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE INSTR(age_category_description, 'Mother') > 0",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description REGEXP 'Mother'",
          "SELECT R.age_category_description FROM Ref_Age_Categories R WHERE R.age_category_description LIKE '%Mother%'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' COLLATE NOCASE",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE LOWER(age_category_description) LIKE LOWER('%Mother%')",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%' ESCAPE '!'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description MATCH 'Mother'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description GLOB '*Mother*'"
        ]
      ]
    },
    {
      "id": 1412,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1",
          "SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(property_id) AS cnt FROM Properties GROUP BY owner_user_id) AS subquery))",
          "SELECT U.first_name FROM Users U INNER JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS P ON U.user_id = P.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT TOP 1 owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC)",
          "SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT U.first_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id GROUP BY U.user_id ORDER BY COUNT(P.property_id) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1",
          "SELECT first_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT first_name FROM Users WHERE user_id = (SELECT TOP 1 owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC)",
          "SELECT U.first_name FROM Users U INNER JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS P ON U.user_id = P.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Properties GROUP BY owner_user_id) AS Sub))",
          "SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Properties GROUP BY owner_user_id) AS Sub))",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM Properties WHERE property_description LIKE '%garden%'",
          "SELECT AVG(room_count) AS AverageRoomCount FROM Properties WHERE property_description LIKE '%garden%'",
          "SELECT AVG(Properties.room_count) FROM Properties WHERE Properties.property_description LIKE '%garden%'",
          "SELECT AVG(p.room_count) FROM Properties p WHERE p.property_description LIKE '%garden%'",
          "SELECT AVG(room_count) FROM Properties WHERE property_description REGEXP 'garden'",
          "SELECT AVG(room_count) FROM Properties WHERE INSTR(property_description, 'garden') > 0",
          "SELECT AVG(room_count) FROM Properties WHERE property_description CONTAINS 'garden'",
          "SELECT AVG(room_count) FROM Properties WHERE LOWER(property_description) LIKE '%garden%'",
          "SELECT AVG(room_count) FROM Properties WHERE property_description LIKE '%garden%' AND room_count IS NOT NULL",
          "SELECT AVG(room_count) FROM Properties WHERE property_description LIKE '%garden%' GROUP BY property_description"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name LIKE '%garden%'))",
          "SELECT AVG(room_count) AS AverageRooms FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name LIKE '%garden%'",
          "SELECT AVG(p.room_count) FROM Properties p INNER JOIN Property_Features pf ON p.property_id = pf.property_id INNER JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE '%garden%'",
          "SELECT AVG(Properties.room_count) FROM Properties, Property_Features, Features WHERE Properties.property_id = Property_Features.property_id AND Property_Features.feature_id = Features.feature_id AND Features.feature_name LIKE '%garden%'",
          "SELECT AVG(room_count) FROM Properties WHERE EXISTS (SELECT 1 FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Properties.property_id = Property_Features.property_id AND Features.feature_name LIKE '%garden%')",
          "SELECT AVG(room_count) FROM Properties p WHERE p.property_id IN (SELECT pf.property_id FROM Property_Features pf JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE '%garden%')",
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name LIKE '%garden%'))",
          "SELECT AVG(Properties.room_count) FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Property_Features.feature_id IN (SELECT feature_id FROM Features WHERE feature_name LIKE '%garden%')",
          "SELECT AVG(room_count) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_description LIKE '%garden%'",
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_description LIKE '%garden%'))"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.town_city FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')))",
          "SELECT DISTINCT town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'swimming pool'",
          "SELECT DISTINCT a.town_city FROM Addresses a INNER JOIN Properties p ON a.address_id = p.property_address_id INNER JOIN Property_Features pf ON p.property_id = pf.property_id INNER JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool'))",
          "SELECT DISTINCT a.town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name LIKE 'swimming pool'",
          "SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')",
          "SELECT DISTINCT a.town_city FROM Addresses a INNER JOIN Properties p ON a.address_id = p.property_address_id INNER JOIN Property_Features pf ON p.property_id = pf.property_id INNER JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE '%swimming pool%'",
          "SELECT DISTINCT a.town_city FROM Addresses a WHERE EXISTS (SELECT 1 FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool' AND p.property_address_id = a.address_id)",
          "SELECT DISTINCT a.town_city FROM Addresses a WHERE a.address_id IN (SELECT p.property_address_id FROM Properties p WHERE EXISTS (SELECT 1 FROM Property_Features pf JOIN Features f ON pf.feature_id = f.feature_id WHERE pf.property_id = p.property_id AND f.feature_name = 'swimming pool'))"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.town_city FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id JOIN Property_Features PF ON P.property_id = PF.property_id JOIN Features F ON PF.feature_id = F.feature_id WHERE F.feature_name = 'swimming pool'",
          "SELECT DISTINCT A.town_city FROM Addresses A, Properties P, Property_Features PF, Features F WHERE A.address_id = P.property_address_id AND P.property_id = PF.property_id AND PF.feature_id = F.feature_id AND F.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')))",
          "SELECT DISTINCT A.town_city FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id INNER JOIN Property_Features PF ON P.property_id = PF.property_id INNER JOIN Features F ON PF.feature_id = F.feature_id WHERE F.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool')",
          "SELECT DISTINCT A.town_city FROM Addresses A WHERE EXISTS (SELECT 1 FROM Properties P JOIN Property_Features PF ON P.property_id = PF.property_id JOIN Features F ON PF.feature_id = F.feature_id WHERE P.property_address_id = A.address_id AND F.feature_name = 'swimming pool')",
          "SELECT DISTINCT A.town_city FROM Addresses A, Properties P, Property_Features PF, Features F WHERE A.address_id = P.property_address_id AND P.property_id = PF.property_id AND PF.feature_id = F.feature_id AND F.feature_name LIKE 'swimming pool'",
          "SELECT DISTINCT A.town_city FROM Addresses A WHERE A.address_id IN (SELECT P.property_address_id FROM Properties P, Property_Features PF, Features F WHERE P.property_id = PF.property_id AND PF.feature_id = F.feature_id AND F.feature_name = 'swimming pool')",
          "SELECT DISTINCT A.town_city FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id WHERE P.property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool'))",
          "SELECT DISTINCT A.town_city FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id JOIN Property_Features PF ON P.property_id = PF.property_id WHERE PF.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC LIMIT 1",
          "SELECT property_id, MIN(vendor_requested_price) AS LowestPrice FROM Properties GROUP BY property_id ORDER BY LowestPrice ASC LIMIT 1",
          "SELECT TOP 1 property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT p.property_id, p.vendor_requested_price FROM Properties AS p ORDER BY p.vendor_requested_price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC, property_id ASC LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties WHERE vendor_requested_price IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT property_id, MIN(vendor_requested_price) AS LowestPrice FROM Properties GROUP BY property_id ORDER BY LowestPrice ASC LIMIT 1",
          "SELECT TOP 1 property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price",
          "SELECT p.property_id, p.vendor_requested_price FROM Properties p ORDER BY p.vendor_requested_price ASC FETCH FIRST ROW ONLY",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC, property_id ASC LIMIT 1",
          "SELECT FIRST(property_id), FIRST(vendor_requested_price) FROM Properties ORDER BY vendor_requested_price ASC",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IS NOT NULL ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC NULLS LAST LIMIT 1"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM Properties",
          "SELECT AVG(Properties.room_count) FROM Properties",
          "SELECT AVG(room_count) AS AverageRoomCount FROM Properties",
          "SELECT AVG(room_count) FROM Properties WHERE room_count IS NOT NULL",
          "SELECT AVG(p.room_count) FROM Properties p",
          "SELECT AVG(room_count) FROM Properties WHERE room_count > 0",
          "SELECT AVG(room_count) FROM Properties GROUP BY property_id",
          "SELECT AVG(room_count) FROM Properties p WHERE p.room_count IS NOT NULL",
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Properties)",
          "SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT property_id FROM Properties WHERE property_id = p.property_id)"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM Properties",
          "SELECT AVG(Properties.room_count) FROM Properties",
          "SELECT AVG(room_count) AS AverageRoomCount FROM Properties",
          "SELECT AVG(p.room_count) FROM Properties p",
          "SELECT AVG(room_count) FROM Properties WHERE room_count IS NOT NULL",
          "SELECT AVG(room_count) FROM Properties WHERE room_count > 0",
          "SELECT AVG(room_count) FROM Properties GROUP BY property_id",
          "SELECT AVG(room_count) FROM Properties p WHERE p.room_count IS NOT NULL",
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Properties)",
          "SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT property_id FROM Properties WHERE property_id = p.property_id)"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT Rooms.room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT r.room_size) FROM Rooms r",
          "SELECT COUNT(DISTINCT room_size) AS distinct_room_sizes FROM Rooms",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size IS NOT NULL",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms",
          "SELECT COUNT(UNIQUE room_size) FROM Rooms",
          "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM Rooms) AS unique_sizes",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size <> ''"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT Rooms.room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT r.room_size) FROM Rooms r",
          "SELECT COUNT(DISTINCT room_size) AS distinct_room_sizes FROM Rooms",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size IS NOT NULL",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size <> ''",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms HAVING room_size IS NOT NULL",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms ORDER BY room_size"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(*) >= 2",
          "SELECT U.user_id, U.search_string FROM User_Searches AS U GROUP BY U.user_id, U.search_string HAVING COUNT(U.search_seq) >= 2",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) >= 2",
          "SELECT DISTINCT U.user_id, U.search_string FROM User_Searches U WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = U.user_id AND search_string = U.search_string) >= 2",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) > 1",
          "SELECT user_id, search_string FROM (SELECT user_id, search_string, COUNT(*) as cnt FROM User_Searches GROUP BY user_id, search_string) AS SubQuery WHERE cnt >= 2",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(*) > 1",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) > 1",
          "SELECT U.user_id, U.search_string FROM User_Searches U GROUP BY U.user_id, U.search_string HAVING COUNT(*) >= 2",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) >= 2"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2",
          "SELECT U.user_id, U.search_seq FROM User_Searches AS U GROUP BY U.user_id HAVING COUNT(U.search_seq) >= 2",
          "SELECT DISTINCT user_id, search_seq FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
          "SELECT user_id, COUNT(search_seq) AS num_searches FROM User_Searches GROUP BY user_id HAVING num_searches >= 2",
          "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id, search_seq HAVING COUNT(*) >= 2",
          "SELECT US.user_id, US.search_seq FROM User_Searches US WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = US.user_id) >= 2",
          "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2",
          "SELECT user_id, search_seq FROM (SELECT user_id, search_seq, COUNT(*) AS cnt FROM User_Searches GROUP BY user_id) AS SubQuery WHERE cnt >= 2",
          "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) > 1",
          "SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(DISTINCT search_seq) >= 2"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT max(search_datetime) FROM User_Searches",
          "SELECT MAX(search_datetime) AS LatestSearchTime FROM User_Searches",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1",
          "SELECT TOP 1 search_datetime FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM User_Searches)",
          "SELECT MAX(U.search_datetime) FROM User_Searches U",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC FETCH FIRST ROW ONLY",
          "SELECT search_datetime FROM (SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC) WHERE ROWNUM = 1",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1 OFFSET 0",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime IN (SELECT MAX(search_datetime) FROM User_Searches)"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1",
          "SELECT MAX(search_datetime) AS MostRecentSearch FROM User_Searches",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM User_Searches)",
          "SELECT TOP 1 search_datetime FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC FETCH FIRST ROW ONLY",
          "SELECT search_datetime FROM (SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC) WHERE ROWNUM = 1",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(search_datetime) FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC ROWS 1",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC",
          "SELECT U.search_datetime, U.search_string FROM User_Searches U ORDER BY U.search_string DESC",
          "SELECT search_datetime AS Time, search_string AS Content FROM User_Searches ORDER BY Content DESC",
          "SELECT * FROM User_Searches ORDER BY search_string DESC",
          "SELECT `search_datetime`, `search_string` FROM `User_Searches` ORDER BY `search_string` DESC",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC, search_datetime DESC",
          "SELECT search_datetime AS SearchTime, search_string AS SearchContent FROM User_Searches ORDER BY SearchContent DESC",
          "SELECT US.search_datetime, US.search_string FROM User_Searches AS US ORDER BY US.search_string DESC",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;",
          "SELECT User_Searches.search_string, User_Searches.search_datetime FROM User_Searches ORDER BY User_Searches.search_string DESC",
          "SELECT US.search_string, US.search_datetime FROM User_Searches AS US ORDER BY US.search_string DESC",
          "SELECT search_string AS SearchString, search_datetime AS SearchTime FROM User_Searches ORDER BY SearchString DESC",
          "SELECT `search_string`, `search_datetime` FROM `User_Searches` ORDER BY `search_string` DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESCENDING",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC LIMIT ALL",
          "SELECT * FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC, search_datetime DESC"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2)",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
          "SELECT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_address_id = A.address_id AND P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT A.zip_postcode FROM Addresses A, Properties P WHERE A.address_id = P.property_address_id AND P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) > 2))",
          "SELECT zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) > 2",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT NULL FROM Properties P WHERE P.property_address_id = A.address_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) > 2)",
          "SELECT zip_postcode FROM Addresses A WHERE A.address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2))"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) > 2))",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A, Properties P WHERE A.address_id = P.property_address_id AND P.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) > 2",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_address_id = A.address_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) > 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses A WHERE A.address_id IN (SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING COUNT(DISTINCT property_id) > 2)",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id GROUP BY P.owner_user_id HAVING COUNT(DISTINCT P.property_id) > 2"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, U.user_category_code FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(US.search_seq) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT DISTINCT U.user_id, U.user_category_code FROM Users U, User_Searches US WHERE U.user_id = US.user_id GROUP BY US.user_id HAVING COUNT(US.search_seq) = 1",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE EXISTS (SELECT 1 FROM User_Searches US WHERE US.user_id = U.user_id GROUP BY US.user_id HAVING COUNT(*) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U INNER JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1) AS UniqueSearch ON U.user_id = UniqueSearch.user_id",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(US.search_seq) = 1",
          "SELECT U.user_id, U.user_category_code FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id, U.user_category_code HAVING COUNT(US.search_seq) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) = 1"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT u.user_id, u.user_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(us.search_seq) = 1",
          "SELECT Users.user_id, Users.user_category_code FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id GROUP BY Users.user_id HAVING COUNT(User_Searches.search_seq) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT DISTINCT u.user_id, u.user_category_code FROM Users u, User_Searches us WHERE u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(DISTINCT us.search_seq) = 1",
          "SELECT u.user_id, u.user_category_code FROM Users u WHERE EXISTS (SELECT user_id FROM User_Searches WHERE Users.user_id = User_Searches.user_id GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT u.user_id, u.user_category_code FROM Users u LEFT JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(us.search_seq) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT u.user_id, u.user_category_code FROM Users u JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1) us ON u.user_id = us.user_id",
          "SELECT u.user_id, u.user_category_code FROM Users u WHERE u.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT Users.user_id, Users.user_category_code FROM Users JOIN User_Searches ON Users.user_id = User_Searches.user_id GROUP BY Users.user_id, Users.user_category_code HAVING COUNT(User_Searches.search_seq) = 1"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1))",
          "SELECT description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))",
          "SELECT (SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = U.age_category_code) FROM Users U JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime LIMIT 1",
          "SELECT RAC.age_category_description FROM Users U INNER JOIN Ref_Age_Categories RAC ON U.age_category_code = RAC.age_category_code WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC, Users U, User_Searches US WHERE RAC.age_category_code = U.age_category_code AND U.user_id = US.user_id ORDER BY US.search_datetime ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 RAC.age_category_description FROM Ref_Age_Categories RAC INNER JOIN Users U ON RAC.age_category_code = U.age_category_code INNER JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC WHERE RAC.age_category_code = (SELECT U.age_category_code FROM Users U JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1)",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT MIN(user_id) FROM User_Searches WHERE search_datetime = (SELECT MIN(search_datetime) FROM User_Searches)))",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT R.age_category_description FROM Ref_Age_Categories R JOIN Users U ON R.age_category_code = U.age_category_code JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime ASC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1))",
          "SELECT R.age_category_description FROM Ref_Age_Categories AS R, Users AS U, User_Searches AS S WHERE R.age_category_code = U.age_category_code AND U.user_id = S.user_id ORDER BY S.search_datetime ASC FETCH FIRST 1 ROW ONLY",
          "SELECT (SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = S.user_id)) FROM User_Searches AS S ORDER BY S.search_datetime ASC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))",
          "SELECT TOP 1 R.age_category_description FROM Ref_Age_Categories R INNER JOIN Users U ON R.age_category_code = U.age_category_code INNER JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime",
          "SELECT R.age_category_description FROM Ref_Age_Categories R, Users U, User_Searches S WHERE R.age_category_code = U.age_category_code AND U.user_id = S.user_id ORDER BY S.search_datetime ASC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT U.age_category_code FROM Users U JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime ASC LIMIT 1)",
          "SELECT R.age_category_description FROM Ref_Age_Categories R JOIN Users U ON R.age_category_code = U.age_category_code JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime FETCH FIRST ROW ONLY",
          "SELECT R.age_category_description FROM Ref_Age_Categories R INNER JOIN Users U ON R.age_category_code = U.age_category_code INNER JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name",
          "SELECT U.login_name FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description LIKE '%Senior%' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE 'Senior%') ORDER BY first_name ASC",
          "SELECT login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen' ORDER BY first_name",
          "SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description LIKE 'Senior%' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE 'Senior%') ORDER BY first_name",
          "SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE R.age_category_code = U.age_category_code AND R.age_category_description LIKE 'Senior%') ORDER BY U.first_name",
          "SELECT login_name FROM Users AS U JOIN Ref_Age_Categories AS R ON U.age_category_code = R.age_category_code WHERE R.age_category_description LIKE '%Senior%' ORDER BY U.first_name ASC",
          "SELECT U.login_name FROM Users U LEFT JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizen' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name ASC"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name",
          "SELECT U.login_name FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizen' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Senior%') ORDER BY first_name",
          "SELECT login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen' ORDER BY first_name ASC",
          "SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description LIKE 'Senior%' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizen') ORDER BY first_name",
          "SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'Senior Citizen') ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name ASC",
          "SELECT login_name FROM Users AS U WHERE U.age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE 'Senior%') ORDER BY first_name",
          "SELECT U.login_name FROM Users U WHERE U.age_category_code = 'senior' ORDER BY U.first_name ASC"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')",
          "SELECT COUNT(search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches INNER JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'",
          "SELECT COUNT(User_Searches.search_seq) FROM User_Searches, Users WHERE User_Searches.user_id = Users.user_id AND Users.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = '1')",
          "SELECT COUNT(*) FROM User_Searches AS US JOIN Users AS U ON US.user_id = U.user_id WHERE U.is_buyer = '1'",
          "SELECT COUNT(*) FROM (SELECT * FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')) AS BuyerSearches",
          "SELECT COUNT(search_seq) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')",
          "SELECT COUNT(*) FROM User_Searches US INNER JOIN Users U ON US.user_id = U.user_id WHERE U.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')",
          "SELECT COUNT(us.search_seq) FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE u.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches INNER JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'",
          "SELECT COUNT(search_seq) FROM User_Searches, Users WHERE User_Searches.user_id = Users.user_id AND Users.is_buyer = '1'",
          "SELECT COUNT(*) FROM (SELECT * FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1') AS BuyerSearches",
          "SELECT COUNT(DISTINCT User_Searches.search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = '1')",
          "SELECT COUNT(*) FROM User_Searches AS US LEFT JOIN Users AS U ON US.user_id = U.user_id WHERE U.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1') GROUP BY user_id",
          "SELECT COUNT(*) FROM User_Searches US INNER JOIN Users U ON US.user_id = U.user_id WHERE U.is_buyer = '1'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT Users.date_registered FROM Users WHERE Users.login_name = 'ratione'",
          "SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' LIMIT 1",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' ORDER BY date_registered DESC LIMIT 1",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' AND date_registered IS NOT NULL",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' ORDER BY user_id ASC",
          "SELECT TOP 1 date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT Users.date_registered FROM Users WHERE Users.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione';",
          "SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' LIMIT 1",
          "SELECT `date_registered` FROM `Users` WHERE `login_name` = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' ORDER BY date_registered DESC LIMIT 1",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' AND date_registered IS NOT NULL",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' AND date_registered IS NOT NULL LIMIT 1"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer = '0'",
          "SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = '1'",
          "SELECT first_name AS FirstName, middle_name AS MiddleName, last_name AS LastName, login_name AS LoginName FROM Users WHERE is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer <> '1'",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users AS U WHERE U.is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer != '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer IS NULL",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer = ''"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = '1'",
          "SELECT first_name AS FirstName, middle_name AS MiddleName, last_name AS LastName, login_name AS LoginName FROM Users WHERE is_seller = '1'",
          "SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer = '0'",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users AS U WHERE U.is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer <> '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer != '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer IS NOT '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1' AND is_buyer IS NULL"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Addresses A JOIN Users U ON A.address_id = U.user_address_id WHERE U.user_category_code = (SELECT age_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%')",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE 'Senior Citizen'))",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Senior Citizen')",
          "SELECT line_1_number_building AS Building, line_2_number_street AS Street, town_city AS City FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description = 'Senior Citizen'",
          "SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Addresses A, Users U WHERE A.address_id = U.user_address_id AND U.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%')",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%'))",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%')",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%')",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Senior Citizen'))",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Senior Citizen')"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.age_category_code = 'senior'",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE age_category_code = 'senior')",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code = 'senior'",
          "SELECT building, street, city FROM (SELECT line_1_number_building AS building, line_2_number_street AS street, town_city AS city, user_address_id FROM Addresses) AS Addr JOIN Users ON Addr.user_address_id = Users.user_address_id WHERE Users.age_category_code = 'senior'",
          "SELECT A.line_1_number_building AS Building, A.line_2_number_street AS Street, A.town_city AS City FROM Addresses A, Users U WHERE A.address_id = U.user_address_id AND U.age_category_code = 'senior'",
          "SELECT `line_1_number_building`, `line_2_number_street`, `town_city` FROM `Addresses` WHERE `address_id` IN (SELECT `user_address_id` FROM `Users` WHERE `age_category_code` = 'senior')",
          "SELECT line_1_number_building AS Building, line_2_number_street AS Street, town_city AS City FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code = 'senior'",
          "SELECT building, street, city FROM (SELECT line_1_number_building AS building, line_2_number_street AS street, town_city AS city FROM Addresses) Addr JOIN (SELECT user_address_id FROM Users WHERE age_category_code = 'senior') Usr ON Addr.address_id = Usr.user_address_id",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id AND Users.age_category_code = 'senior'",
          "SELECT line_1_number_building AS 'Building', line_2_number_street AS 'Street', town_city AS 'City' FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code = 'senior'"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS subquery",
          "SELECT COUNT(unique_properties.property_id) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS unique_properties",
          "SELECT COUNT(DISTINCT pf.property_id) FROM Property_Features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2) AS result",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2)",
          "SELECT COUNT(*) FROM (SELECT COUNT(feature_id) AS feature_count, property_id FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS feature_counts",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id, COUNT(feature_id) AS num_features FROM Property_Features GROUP BY property_id HAVING num_features >= 2) AS feature_summary",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS subquery",
          "SELECT COUNT(property_id) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) temp",
          "SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id, COUNT(feature_id) AS feature_count FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS feature_counts",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2) AS feature_property",
          "SELECT COUNT(DISTINCT property_id) FROM (SELECT property_id, COUNT(feature_id) AS num_features FROM Property_Features GROUP BY property_id HAVING num_features >= 2) AS counted_features",
          "SELECT COUNT(*) FROM (SELECT property_id, COUNT(*) AS feature_count FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS result",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id",
          "SELECT p.property_id, COUNT(pp.photo_seq) AS total_photos FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT property_id, COUNT(*) AS NumberOfPhotos FROM Property_Photos GROUP BY property_id",
          "SELECT COUNT(photo_seq) AS PhotoCount, property_id FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(photo_seq) FROM Property_Photos GROUP BY property_id",
          "SELECT p.property_id, COUNT(*) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
          "SELECT property_id, COUNT(photo_seq) AS count_of_photos FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(*) AS total_photos FROM Property_Photos GROUP BY property_id"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id",
          "SELECT p.property_id, COUNT(p.photo_seq) AS num_photos FROM Property_Photos p GROUP BY p.property_id",
          "SELECT COUNT(photo_seq) AS total_photos, property_id FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(photo_seq) FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id",
          "SELECT COUNT(*) AS count_photos, property_id FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(photo_seq) AS count_of_photos FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(photo_seq) FROM Property_Photos GROUP BY property_id",
          "SELECT property_id, COUNT(*) AS total_photos FROM Property_Photos GROUP BY property_id",
          "SELECT COUNT(photo_seq), property_id FROM Property_Photos GROUP BY property_id"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT owner_user_id, COUNT(*) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT Users.user_id, COUNT(Property_Photos.photo_filename) FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id",
          "SELECT p.owner_user_id, COUNT(pp.photo_filename) FROM Properties p INNER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
          "SELECT owner_user_id AS user_id, COUNT(photo_filename) AS number_of_photos FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT u.user_id, COUNT(pp.photo_filename) FROM Users u LEFT JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id",
          "SELECT owner_user_id, COUNT(Property_Photos.photo_id) FROM Properties, Property_Photos WHERE Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT Users.user_id, COUNT(*) AS TotalPhotos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id",
          "SELECT owner_user_id, COUNT(*) AS photo_count FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT p.owner_user_id, COUNT(*) FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
          "SELECT owner_user_id, COUNT(photo_seq) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT owner_user_id, COUNT(*) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p INNER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
          "SELECT Properties.owner_user_id, COUNT(Property_Photos.photo_seq) FROM Properties, Property_Photos WHERE Properties.property_id = Property_Photos.property_id GROUP BY Properties.owner_user_id",
          "SELECT owner_user_id, COUNT(photo_seq) FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT Users.user_id, COUNT(Property_Photos.photo_seq) FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id",
          "SELECT owner_user_id AS user_id, COUNT(*) AS number_of_photos FROM Properties LEFT JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT owner_user_id, COUNT(Property_Photos.property_id) FROM Properties LEFT JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT Properties.owner_user_id, COUNT(*) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.owner_user_id",
          "SELECT owner_user_id, COUNT(Property_Photos.photo_seq) AS TotalPhotos FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT owner_user_id, COUNT(Property_Photos.property_id) AS PhotoCount FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT SUM(p.price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student'))",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student'))",
          "SELECT SUM(Properties.price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student')",
          "SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Single Mother%' OR user_category_description LIKE '%Student%')",
          "SELECT SUM(Properties.price_max) FROM Properties, Users, Ref_User_Categories WHERE Properties.owner_user_id = Users.user_id AND Users.user_category_code = Ref_User_Categories.user_category_code AND (Ref_User_Categories.user_category_description = 'Single Mother' OR Ref_User_Categories.user_category_description = 'Student')",
          "SELECT SUM(price_max) FROM Properties p INNER JOIN Users u ON p.owner_user_id = u.user_id INNER JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description IN ('Single Mother', 'Student')",
          "SELECT SUM(p.price_max) FROM Properties p, Users u WHERE p.owner_user_id = u.user_id AND u.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student'))",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student'))",
          "SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Single Mother' OR r.user_category_description = 'Student'",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student')))"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student')))",
          "SELECT SUM(p.price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Single Mother' OR r.user_category_description = 'Student'",
          "SELECT SUM(Properties.price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student')",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT Users.user_id FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description IN ('Single Mother', 'Student'))",
          "SELECT SUM(price_max) AS TotalMaxPrice FROM Properties WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = Properties.owner_user_id AND Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student')))",
          "SELECT SUM(price_max) FROM Properties p WHERE EXISTS (SELECT 1 FROM Users u JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE (r.user_category_description = 'Single Mother' OR r.user_category_description = 'Student') AND u.user_id = p.owner_user_id)",
          "SELECT SUM(price_max) FROM Properties p INNER JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('Single Mother', 'Student'))",
          "SELECT SUM(Properties.price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description IN ('Single Mother', 'Student')",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student'))",
          "SELECT SUM(price_max) FROM Properties, Users, Ref_User_Categories WHERE Properties.owner_user_id = Users.user_id AND Users.user_category_code = Ref_User_Categories.user_category_code AND (Ref_User_Categories.user_category_description = 'Single Mother' OR Ref_User_Categories.user_category_description = 'Student')"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp",
          "SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC",
          "SELECT uph.datestamp, p.property_name FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY uph.datestamp",
          "SELECT a.datestamp, b.property_name FROM User_Property_History a, Properties b WHERE a.property_id = b.property_id ORDER BY a.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY datestamp ASC",
          "SELECT UPH.datestamp, PR.property_name FROM User_Property_History UPH LEFT JOIN Properties PR ON UPH.property_id = PR.property_id ORDER BY UPH.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History UPH INNER JOIN Properties P ON UPH.property_id = P.property_id ORDER BY datestamp",
          "SELECT UPH.datestamp AS Date, P.property_name AS Property FROM User_Property_History UPH JOIN Properties P ON UPH.property_id = P.property_id ORDER BY Date",
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties USING(property_id) ORDER BY datestamp",
          "SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp",
          "SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC",
          "SELECT uph.datestamp, p.property_name FROM User_Property_History uph, Properties p WHERE uph.property_id = p.property_id ORDER BY uph.datestamp",
          "SELECT h.datestamp, pr.property_name FROM User_Property_History h JOIN Properties pr ON h.property_id = pr.property_id ORDER BY h.datestamp ASC",
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties USING(property_id) ORDER BY datestamp",
          "SELECT a.datestamp, b.property_name FROM User_Property_History a LEFT JOIN Properties b ON a.property_id = b.property_id ORDER BY a.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY datestamp",
          "SELECT datestamp, property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp ASC",
          "SELECT User_Property_History.datestamp AS EventDate, Properties.property_name AS PropertyName FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp",
          "SELECT h.datestamp AS HistoryDate, p.property_name AS Name FROM User_Property_History h INNER JOIN Properties p ON h.property_id = p.property_id ORDER BY h.datestamp"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY Properties.property_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R INNER JOIN Properties P ON R.property_type_code = P.property_type_code GROUP BY R.property_type_code ORDER BY COUNT(P.property_type_code) DESC LIMIT 1",
          "SELECT TOP 1 property_type_description, property_type_code FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_code, property_type_description ORDER BY COUNT(Properties.property_type_code) DESC",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)",
          "SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R, Properties P WHERE R.property_type_code = P.property_type_code GROUP BY R.property_type_code, R.property_type_description HAVING COUNT(P.property_type_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_type_code) AS Cnt FROM Properties GROUP BY property_type_code) AS SubQuery)",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types JOIN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON Ref_Property_Types.property_type_code = MostCommon.property_type_code",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)",
          "SELECT FIRST(property_type_description) AS property_type_description, FIRST(property_type_code) AS property_type_code FROM Ref_Property_Types INNER JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY Ref_Property_Types.property_type_code ORDER BY COUNT(Properties.property_type_code) DESC",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM (SELECT property_type_code, COUNT(*) AS count FROM Properties GROUP BY property_type_code ORDER BY count DESC LIMIT 1) AS Temp)"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT R.property_type_code, R.property_type_description FROM Ref_Property_Types R INNER JOIN Properties P ON R.property_type_code = P.property_type_code GROUP BY R.property_type_code ORDER BY COUNT(P.property_type_code) DESC LIMIT 1",
          "SELECT TOP 1 property_type_code, property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_code ORDER BY COUNT(Properties.property_type_code) DESC",
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.property_type_code, B.property_type_description FROM (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) A JOIN Ref_Property_Types B ON A.property_type_code = B.property_type_code",
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code HAVING COUNT(property_type_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_type_code) AS Cnt FROM Properties GROUP BY property_type_code) T))",
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types JOIN (SELECT property_type_code, COUNT(*) AS cnt FROM Properties GROUP BY property_type_code ORDER BY cnt DESC LIMIT 1) AS MostCommon ON Ref_Property_Types.property_type_code = MostCommon.property_type_code",
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)",
          "SELECT R.property_type_code, R.property_type_description FROM Properties P RIGHT JOIN Ref_Property_Types R ON P.property_type_code = R.property_type_code GROUP BY R.property_type_code, R.property_type_description ORDER BY COUNT(P.property_type_code) DESC LIMIT 1",
          "SELECT property_type_code, property_type_description FROM Ref_Property_Types ORDER BY (SELECT COUNT(*) FROM Properties WHERE Properties.property_type_code = Ref_Property_Types.property_type_code) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT Ref_Age_Categories.age_category_description FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(*), room_size FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) AS count FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(room_number), room_size FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) AS NumberOfRooms FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(*) AS Total FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) AS RoomCount FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) AS TotalRooms FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(*) AS CountOfRooms FROM Rooms GROUP BY room_size"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) AS count FROM Rooms GROUP BY room_size",
          "SELECT Rooms.room_size, COUNT(*) AS NumberOfRooms FROM Rooms GROUP BY Rooms.room_size",
          "SELECT r.room_size, COUNT(r.room_number) FROM Rooms r GROUP BY r.room_size",
          "SELECT COUNT(room_number), room_size FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(*) AS RoomCount FROM Rooms GROUP BY room_size ORDER BY COUNT(*) DESC",
          "SELECT room_size, COUNT(room_number) AS TotalRooms FROM Rooms GROUP BY room_size HAVING COUNT(room_number) > 0",
          "SELECT room_size, COUNT(*) FROM Rooms WHERE room_size IS NOT NULL GROUP BY room_size",
          "SELECT room_size, COUNT(room_number) FROM Rooms WHERE room_size <> '' GROUP BY room_size"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE first_name = 'Robbie'",
          "SELECT A.country FROM Addresses A, Users U WHERE A.address_id = U.user_address_id AND U.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT country FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'",
          "SELECT Addresses.country FROM Addresses, Users WHERE Addresses.address_id = Users.user_address_id AND Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT A.country FROM Addresses A INNER JOIN Users U ON A.address_id = U.user_address_id WHERE U.first_name = 'Robbie'",
          "SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id AND Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses a, Users u WHERE a.address_id = u.user_address_id AND u.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT A.country FROM Addresses A JOIN Users U ON A.address_id = U.user_address_id WHERE U.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT country FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'",
          "SELECT Addresses.country FROM Addresses, Users WHERE Addresses.address_id = Users.user_address_id AND Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT A.country FROM Addresses A, Users U WHERE A.address_id = U.user_address_id AND U.first_name = 'Robbie'",
          "SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie' LIMIT 1)",
          "SELECT country FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id AND Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE owner_user_id = user_id AND user_address_id = property_address_id)",
          "SELECT Users.first_name, Users.middle_name, Users.last_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id AND Users.user_address_id = Properties.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users AS U, Properties AS P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE EXISTS (SELECT 1 FROM Properties WHERE Properties.owner_user_id = Users.user_id AND Users.user_address_id = Properties.property_address_id)",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U WHERE U.user_id = (SELECT P.owner_user_id FROM Properties P WHERE P.owner_user_id = U.user_id AND U.user_address_id = P.property_address_id)",
          "SELECT first_name, middle_name, last_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Users.user_address_id = Properties.property_address_id",
          "SELECT DISTINCT U.first_name, U.middle_name, U.last_name FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE user_address_id = property_address_id)"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.first_name || ' ' || U.middle_name || ' ' || U.last_name AS full_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT CONCAT(U.first_name, ' ', U.middle_name, ' ', U.last_name) AS full_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name || ' ' || U.last_name AS full_name FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT CONCAT(U.first_name, ' ', U.last_name) AS full_name FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name || ' ' || U.middle_name || ' ' || U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT CONCAT(U.first_name, ' ', U.middle_name, ' ', U.last_name) FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name || ' ' || U.last_name FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT CONCAT(U.first_name, ' ', U.last_name) FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT U.first_name || ' ' || COALESCE(U.middle_name, '') || ' ' || U.last_name AS full_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT CONCAT(U.first_name, ' ', IFNULL(U.middle_name, ''), ' ', U.last_name) AS full_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches AS US LEFT JOIN Properties AS P ON US.user_id = P.owner_user_id WHERE P.property_id IS NULL",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT DISTINCT owner_user_id FROM Properties)",
          "SELECT U.search_string FROM User_Searches U WHERE NOT EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id)",
          "SELECT search_string FROM User_Searches WHERE NOT EXISTS (SELECT * FROM Properties WHERE Properties.owner_user_id = User_Searches.user_id)",
          "SELECT search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches US WHERE US.user_id NOT IN (SELECT P.owner_user_id FROM Properties P)",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id)",
          "SELECT search_string FROM User_Searches US WHERE NOT EXISTS (SELECT NULL FROM Properties P WHERE P.owner_user_id = US.user_id)",
          "SELECT US.search_string FROM User_Searches US LEFT OUTER JOIN Properties P ON US.user_id = P.owner_user_id WHERE P.property_id IS NULL"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT owner_user_id FROM Properties))",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches US LEFT JOIN Properties P ON US.user_id = P.owner_user_id WHERE P.property_id IS NULL",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users EXCEPT SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches US WHERE NOT EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = US.user_id)",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT U.user_id FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE P.property_id IS NULL)",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE NOT EXISTS (SELECT property_id FROM Properties WHERE owner_user_id = Users.user_id))",
          "SELECT search_string FROM User_Searches AS US WHERE NOT EXISTS (SELECT * FROM Properties AS P WHERE P.owner_user_id = US.user_id)",
          "SELECT US.search_string FROM User_Searches US WHERE US.user_id NOT IN (SELECT P.owner_user_id FROM Properties P)",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users MINUS SELECT owner_user_id FROM Properties)"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.last_name, U.user_id FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) <= 2",
          "SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AND user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2)",
          "SELECT U.last_name, U.user_id FROM Users U WHERE (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) >= 2) AND EXISTS (SELECT 1 FROM User_Searches US WHERE US.user_id = U.user_id GROUP BY US.user_id HAVING COUNT(US.search_seq) <= 2)",
          "SELECT U.last_name, U.user_id FROM Users U INNER JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) P ON U.user_id = P.owner_user_id INNER JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) S ON U.user_id = S.user_id",
          "SELECT U.last_name, U.user_id FROM Users U, Properties P, User_Searches US WHERE U.user_id = P.owner_user_id AND U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT US.search_seq) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT US.search_seq) <= 2",
          "SELECT DISTINCT U.last_name, U.user_id FROM Users U WHERE (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT US.search_seq) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2)"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.last_name, U.user_id FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT US.search_seq) <= 2 AND (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2",
          "SELECT last_name, user_id FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2)",
          "SELECT U.last_name, U.user_id FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2",
          "SELECT U.last_name, U.user_id FROM Users U LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(US.search_seq) <= 2 AND (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE EXISTS (SELECT 1 FROM User_Searches US WHERE US.user_id = U.user_id GROUP BY US.user_id HAVING COUNT(US.search_seq) <= 2) AND EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) >= 2)",
          "SELECT U.last_name, U.user_id FROM Users U INNER JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) US ON U.user_id = US.user_id INNER JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) P ON U.user_id = P.owner_user_id",
          "SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) >= 2)",
          "SELECT DISTINCT U.last_name, U.user_id FROM Users U JOIN User_Searches US ON U.user_id = US.user_id LEFT JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(DISTINCT US.search_seq) <= 2 AND COUNT(DISTINCT P.property_id) >= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id GROUP BY US.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id) >= 2",
          "SELECT U.last_name, U.user_id FROM Users U JOIN User_Searches US ON U.user_id = US.user_id LEFT JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(DISTINCT US.search_seq) <= 2 AND COUNT(DISTINCT P.property_id) >= 2"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM bike WHERE weight > 780",
          "SELECT COUNT(id) FROM bike WHERE weight > 780",
          "SELECT COUNT(*) AS NumberOfBikes FROM bike WHERE weight > 780",
          "SELECT COUNT(bike.id) FROM bike WHERE bike.weight > 780",
          "SELECT COUNT(*) FROM bike b WHERE b.weight > 780",
          "SELECT COUNT(*) FROM bike WHERE weight > 780 AND weight IS NOT NULL",
          "SELECT COUNT(DISTINCT id) FROM bike WHERE weight > 780",
          "SELECT COUNT(*) FROM bike WHERE weight > 780 GROUP BY weight",
          "SELECT COUNT(*) FROM bike WHERE weight > 780 ORDER BY weight",
          "SELECT COUNT(*) FROM bike WHERE weight > 780 LIMIT 1000000"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT product_name, weight FROM bike ORDER BY price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price",
          "SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price ASCENDING",
          "SELECT `product_name`, `weight` FROM `bike` ORDER BY `price` ASC",
          "SELECT bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC",
          "SELECT product_name AS BikeName, weight AS BikeWeight FROM bike ORDER BY price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price ASC LIMIT ALL",
          "SELECT product_name, weight FROM bike ORDER BY price ASC, id ASC",
          "SELECT product_name, weight FROM bike ORDER BY price ASC, weight DESC"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT heat, name, nation FROM cyclist",
          "SELECT `heat`, `name`, `nation` FROM `cyclist`",
          "SELECT c.heat, c.name, c.nation FROM cyclist c",
          "SELECT heat AS Heat, name AS Name, nation AS Nation FROM cyclist",
          "SELECT cyclist.heat, cyclist.name, cyclist.nation FROM cyclist",
          "SELECT heat, name, nation FROM cyclist ORDER BY name",
          "SELECT DISTINCT heat, name, nation FROM cyclist",
          "SELECT heat, name, nation FROM cyclist WHERE heat IS NOT NULL",
          "SELECT * FROM cyclist WHERE heat IS NOT NULL AND name IS NOT NULL AND nation IS NOT NULL",
          "SELECT heat, name, nation FROM cyclist GROUP BY heat, name, nation"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT max(weight), min(weight) FROM bike",
          "SELECT MAX(weight), MIN(weight) FROM bike",
          "SELECT maximum(weight), minimum(weight) FROM bike",
          "SELECT MAXIMUM(weight), MINIMUM(weight) FROM bike",
          "SELECT greatest(weight), least(weight) FROM bike",
          "SELECT GREATEST(weight), LEAST(weight) FROM bike",
          "SELECT top(weight), bottom(weight) FROM bike",
          "SELECT TOP(weight), BOTTOM(weight) FROM bike",
          "SELECT highest(weight), lowest(weight) FROM bike",
          "SELECT HIGHEST(weight), LOWEST(weight) FROM bike"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'",
          "SELECT AVG(b.price) FROM bike b WHERE b.material = 'Carbon CC'",
          "SELECT AVG(price) AS AveragePrice FROM bike WHERE material = 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material LIKE 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' GROUP BY material",
          "SELECT AVG(b.price) FROM bike AS b WHERE b.material = 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price IS NOT NULL",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price > 0",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price >= 0",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price <> 'NULL'"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT name, result FROM cyclist WHERE nation != 'Russia'",
          "SELECT c.name, c.result FROM cyclist c WHERE c.nation <> 'Russia'",
          "SELECT `name`, `result` FROM `cyclist` WHERE `nation` NOT IN ('Russia')",
          "SELECT name, result FROM cyclist WHERE NOT (nation = 'Russia')",
          "SELECT name, result FROM cyclist WHERE nation NOT LIKE 'Russia'",
          "SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation != 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation IS NOT 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation != 'Russia' AND nation IS NOT NULL",
          "SELECT name, result FROM cyclist WHERE nation NOT IN (SELECT nation FROM cyclist WHERE nation = 'Russia')",
          "SELECT name, result FROM cyclist WHERE nation != 'Russia' ORDER BY name"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
          "SELECT DISTINCT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015",
          "SELECT DISTINCT bike.id AS BikeID, bike.product_name AS BikeName FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015",
          "SELECT DISTINCT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
          "SELECT DISTINCT b.id, b.product_name FROM bike AS b INNER JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id AND cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015)",
          "SELECT DISTINCT b.id, b.product_name FROM bike b LEFT JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b RIGHT JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b CROSS JOIN cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT b.id, b.product_name FROM bike AS b JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
          "SELECT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4",
          "SELECT b.id, b.product_name FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
          "SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id HAVING COUNT(cob.cyclist_id) >= 4",
          "SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE b.id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(DISTINCT cyclist_id) >= 4)",
          "SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id, bike.product_name HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4",
          "SELECT b.id, b.product_name FROM bike AS b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes AS cob WHERE b.id = cob.bike_id GROUP BY cob.bike_id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4)",
          "SELECT b.id, b.product_name FROM bike b WHERE b.id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(DISTINCT cyclist_id) >= 4)",
          "SELECT b.id, b.product_name FROM bike AS b INNER JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
          "SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT cyclist_id, name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist_id ORDER BY COUNT(bike_id) DESC LIMIT 1",
          "SELECT c.id, c.name FROM cyclist c INNER JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(cob.bike_id) DESC LIMIT 1",
          "SELECT c.id, c.name FROM cyclist c, cyclists_own_bikes cob WHERE c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY COUNT(cyclists_own_bikes.bike_id) DESC LIMIT 1",
          "SELECT c.id, c.name FROM cyclist AS c JOIN cyclists_own_bikes AS cob ON c.id = cob.cyclist_id GROUP BY c.id HAVING COUNT(cob.bike_id) = (SELECT MAX(count) FROM (SELECT COUNT(bike_id) AS count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery)",
          "SELECT id, name FROM (SELECT cyclist_id AS id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS counts JOIN cyclist ON cyclist.id = counts.id ORDER BY bike_count DESC LIMIT 1",
          "SELECT c.id, c.name FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(cob.bike_id) DESC LIMIT 1",
          "SELECT TOP 1 c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(cob.bike_id) DESC",
          "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(DISTINCT cob.bike_id) DESC LIMIT 1",
          "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY COUNT(cob.bike_id) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain'))",
          "SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclist_id = id WHERE nation = 'Russia' OR nation = 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation = 'Russia' OR cyclist.nation = 'Great Britain'",
          "SELECT DISTINCT product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation IN ('Russia', 'Great Britain')))",
          "SELECT DISTINCT b.product_name FROM bike b, cyclist c, cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE cob.bike_id = bike.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain'))",
          "SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation = 'Russia' UNION SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation = 'Great Britain'"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT count(DISTINCT heat) FROM cyclist",
          "SELECT COUNT(UNIQUE heat) FROM cyclist",
          "SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist)",
          "SELECT DISTINCT COUNT(heat) FROM cyclist",
          "SELECT COUNT(DISTINCT heat) AS HeatVariety FROM cyclist",
          "SELECT COUNT(*) FROM (SELECT heat FROM cyclist GROUP BY heat)",
          "SELECT COUNT(DISTINCT c.heat) FROM cyclist c",
          "SELECT COUNT(heat) FROM (SELECT DISTINCT heat FROM cyclist) AS unique_heats",
          "SELECT COUNT(DISTINCT heat) FROM cyclist GROUP BY heat HAVING COUNT(heat) > 0",
          "SELECT COUNT(DISTINCT `heat`) FROM `cyclist`"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
          "SELECT count(DISTINCT id) FROM cyclist WHERE id NOT IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
          "SELECT count(*) FROM cyclist c WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.cyclist_id = c.id AND cob.purchase_year > 2015)",
          "SELECT count(c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id AND cob.purchase_year > 2015 WHERE cob.cyclist_id IS NULL",
          "SELECT count(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015 GROUP BY cyclist_id)",
          "SELECT count(*) FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
          "SELECT count(DISTINCT c.id) FROM cyclist c LEFT OUTER JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.purchase_year <= 2015 OR cob.purchase_year IS NULL",
          "SELECT count(*) FROM cyclist WHERE NOT EXISTS (SELECT * FROM cyclists_own_bikes WHERE cyclist_id = cyclist.id AND purchase_year > 2015)",
          "SELECT count(DISTINCT cyclist.id) FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id AND cyclists_own_bikes.purchase_year > 2015 WHERE cyclists_own_bikes.cyclist_id IS NULL",
          "SELECT count(*) FROM cyclist c WHERE NOT EXISTS (SELECT NULL FROM cyclists_own_bikes cob WHERE cob.cyclist_id = c.id AND cob.purchase_year > 2015)"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558'))",
          "SELECT DISTINCT product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558'",
          "SELECT DISTINCT b.product_name FROM bike AS b, cyclists_own_bikes AS cob, cyclist AS c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE result < '4:21.558')",
          "SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'",
          "SELECT DISTINCT b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclists_own_bikes.bike_id = bike.id AND cyclist.result < '4:21.558')",
          "SELECT DISTINCT b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE cob.bike_id = b.id AND c.result < '4:21.558')"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins')) AND id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
          "SELECT b.product_name, b.price FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY b.id HAVING COUNT(DISTINCT c.name) = 2",
          "SELECT DISTINCT b.product_name, b.price FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' OR c.name = 'Antonio Tauler' GROUP BY b.id HAVING COUNT(DISTINCT c.name) = 2",
          "WITH OwnedBikes AS (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name IN ('Bradley Wiggins', 'Antonio Tauler')) GROUP BY bike_id HAVING COUNT(DISTINCT cyclist_id) = 2) SELECT b.product_name, b.price FROM bike b JOIN OwnedBikes ob ON b.id = ob.bike_id",
          "SELECT b.product_name, b.price FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' AND cob.bike_id = b.id) AND EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Antonio Tauler' AND cob.bike_id = b.id)",
          "SELECT b.product_name, b.price FROM bike b WHERE b.id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
          "SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' INTERSECT SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Antonio Tauler'",
          "SELECT b.product_name, b.price FROM bike b WHERE b.id IN (SELECT bike_id FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' UNION SELECT bike_id FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Antonio Tauler' GROUP BY bike_id HAVING COUNT(*) > 1)",
          "SELECT b.product_name, b.price FROM bike b WHERE b.id IN (SELECT bike_id FROM cyclists_own_bikes cob WHERE cob.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND bike_id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')))"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)",
          "SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.cyclist_id IS NULL",
          "SELECT name, nation, result FROM cyclist WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes WHERE cyclist_id = cyclist.id)",
          "SELECT name, nation, result FROM cyclist c WHERE c.id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)",
          "SELECT c.name, c.nation, c.result FROM cyclist c WHERE c.id NOT IN (SELECT b.cyclist_id FROM cyclists_own_bikes b)",
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IS NOT NULL)",
          "SELECT c.name, c.nation, c.result FROM cyclist c WHERE NOT EXISTS (SELECT * FROM cyclists_own_bikes cob WHERE cob.cyclist_id = c.id)",
          "SELECT name, nation, result FROM cyclist AS c WHERE c.id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes AS cob)",
          "SELECT c.name, c.nation, c.result FROM cyclist c LEFT OUTER JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.bike_id IS NULL",
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes)"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material ILIKE '%fiber%'",
          "SELECT b.product_name FROM bike b WHERE b.material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE INSTR(material, 'fiber') > 0",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%' COLLATE NOCASE",
          "SELECT product_name FROM bike WHERE LOWER(material) LIKE LOWER('%fiber%')",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%' ESCAPE ''",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%' ESCAPE '\\'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%' AND material IS NOT NULL",
          "SELECT product_name FROM bike WHERE EXISTS (SELECT 1 FROM bike WHERE material LIKE '%fiber%')"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT cyclist_id, COUNT(bike_id) AS number_of_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
          "SELECT c.id, COUNT(b.bike_id) AS bike_count FROM cyclist AS c LEFT JOIN cyclists_own_bikes AS b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id AS cyclist_id, COUNT(cb.bike_id) AS total_bikes FROM cyclist c JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id ORDER BY c.id ASC",
          "SELECT cyclist_id, COUNT(*) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id ASC",
          "SELECT c.id, IFNULL(COUNT(b.bike_id), 0) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id, COUNT(b.bike_id) FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT cyclist_id, COUNT(bike_id) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
          "SELECT c.id AS cyclist_id, COUNT(cb.bike_id) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id, (SELECT COUNT(*) FROM cyclists_own_bikes WHERE cyclist_id = c.id) AS bike_count FROM cyclist c ORDER BY c.id",
          "SELECT cyclist_id, COUNT(bike_id) AS number_of_bikes_owned FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id ASC"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1",
          "SELECT g.Flavor, g.Food FROM goods g WHERE g.Food = 'cake' ORDER BY g.Price DESC LIMIT 1",
          "SELECT Flavor, Food FROM goods WHERE Food LIKE 'cake' ORDER BY Price DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC",
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 OFFSET 0",
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT * FROM (SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC) WHERE ROWNUM = 1",
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 ROWS ONLY",
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 ROWS FETCH FIRST ROW ONLY",
          "SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 ROWS FETCH NEXT ROW ONLY"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1",
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cake' ORDER BY g.Price DESC FETCH FIRST ROW ONLY",
          "SELECT Id, Flavor FROM goods WHERE Food LIKE 'cake' ORDER BY Price DESC LIMIT 1",
          "SELECT TOP 1 Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 OFFSET 0",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(Id), FIRST(Flavor) FROM goods WHERE Food = 'cake' ORDER BY Price DESC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'cookie' ORDER BY g.Price ASC LIMIT 1",
          "SELECT Flavor FROM goods WHERE Food LIKE 'cookie' ORDER BY Price LIMIT 1",
          "SELECT TOP 1 Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price, Flavor LIMIT 1",
          "SELECT Flavor, MIN(Price) AS MinPrice FROM goods WHERE Food = 'cookie' GROUP BY Flavor ORDER BY MinPrice ASC LIMIT 1",
          "SELECT Flavor FROM (SELECT Flavor, Price FROM goods WHERE Food = 'cookie' ORDER BY Price ASC) WHERE ROWNUM = 1",
          "SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC, Id ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1",
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cookie' ORDER BY g.Price LIMIT 1",
          "SELECT Id, Flavor FROM goods WHERE Food LIKE 'cookie' ORDER BY Price LIMIT 1",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC ROWS 1",
          "SELECT * FROM (SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price) WHERE ROWNUM = 1",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1 OFFSET 0",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor LIKE 'apple'",
          "SELECT DISTINCT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT goods.Id FROM goods WHERE Flavor LIKE 'apple'",
          "SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE",
          "SELECT Id FROM goods WHERE LOWER(Flavor) = 'apple'",
          "SELECT Id FROM goods WHERE UPPER(Flavor) = 'APPLE'",
          "SELECT * FROM goods WHERE Flavor = 'apple'"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'",
          "SELECT `Id` FROM `goods` WHERE `Flavor` = 'apple'",
          "SELECT Id FROM goods WHERE Flavor LIKE 'apple'",
          "SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE",
          "SELECT DISTINCT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor = 'apple' AND Food IS NOT NULL",
          "SELECT Id FROM goods WHERE Flavor = 'apple' ORDER BY Id",
          "SELECT Id FROM goods WHERE LOWER(Flavor) = 'apple'"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price < 3",
          "SELECT g.Id FROM goods g WHERE g.Price < 3",
          "SELECT `Id` FROM `goods` WHERE `Price` < 3",
          "SELECT goods.Id FROM goods WHERE goods.Price < 3",
          "SELECT Id FROM goods WHERE Price < 3.0",
          "SELECT Id FROM goods WHERE Price < $3",
          "SELECT Id FROM goods WHERE Price < '3'",
          "SELECT Id FROM goods WHERE Price < 3.00",
          "SELECT Id FROM goods WHERE Price < (3)",
          "SELECT Id FROM goods WHERE Price < (SELECT 3)"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price < 3",
          "SELECT goods.Id FROM goods WHERE goods.Price < 3",
          "SELECT `Id` FROM `goods` WHERE `Price` < 3",
          "SELECT Id FROM goods WHERE Price < 3.0",
          "SELECT g.Id FROM goods g WHERE g.Price < 3",
          "SELECT Id FROM goods WHERE Price < $3",
          "SELECT Id FROM goods WHERE Price < '3'",
          "SELECT goods.Id FROM goods WHERE Price < 3.00",
          "SELECT Id FROM goods WHERE Price < 3 AND Food IS NOT NULL",
          "SELECT Id FROM goods WHERE Price < 3 ORDER BY Id"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Flavor = 'lemon'",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'cake' AND goods.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food LIKE 'cake' AND g.Flavor LIKE 'lemon'",
          "SELECT DISTINCT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Flavor LIKE 'lemon'",
          "SELECT DISTINCT c.Id FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food LIKE 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'lemon' AND goods.Food = 'cake'",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'lemon' AND goods.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c RIGHT JOIN receipts r ON c.Id = r.CustomerId RIGHT JOIN items i ON r.ReceiptNumber = i.Receipt RIGHT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c CROSS JOIN receipts r ON c.Id = r.CustomerId CROSS JOIN items i ON r.ReceiptNumber = i.Receipt CROSS JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c FULL OUTER JOIN receipts r ON c.Id = r.CustomerId FULL OUTER JOIN items i ON r.ReceiptNumber = i.Receipt FULL OUTER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c NATURAL JOIN receipts r NATURAL JOIN items i NATURAL JOIN goods g WHERE g.Flavor = 'lemon' AND g.Food = 'cake'"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g INNER JOIN items i ON g.Id = i.Item INNER JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS CustomerCount FROM goods g, items i, receipts r WHERE g.Id = i.Item AND i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(UNIQUE CustomerId) FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item LEFT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods g RIGHT JOIN items i ON g.Id = i.Item RIGHT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g CROSS JOIN items i ON g.Id = i.Item CROSS JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS CustomerCount FROM goods g INNER JOIN items i ON g.Id = i.Item INNER JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g, items i, receipts r WHERE g.Id = i.Item AND i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(UNIQUE CustomerId) FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item LEFT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods RIGHT JOIN items ON goods.Id = items.Item RIGHT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g RIGHT JOIN items i ON g.Id = i.Item RIGHT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Food = 'bakery') GROUP BY c.Id HAVING COUNT(DISTINCT r.ReceiptNumber) >= 15",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT Id FROM goods WHERE Food = 'bakery') GROUP BY customers.Id HAVING COUNT(DISTINCT receipts.ReceiptNumber) >= 15",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'bakery' GROUP BY customers.Id HAVING COUNT(DISTINCT receipts.ReceiptNumber) >= 15",
          "SELECT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food = 'bakery' GROUP BY c.Id HAVING COUNT(DISTINCT r.ReceiptNumber) >= 15",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'bakery'))) GROUP BY Id HAVING COUNT(DISTINCT ReceiptNumber) >= 15",
          "SELECT CustomerId AS Id FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY CustomerId HAVING COUNT(DISTINCT ReceiptNumber) >= 15",
          "SELECT DISTINCT c.Id FROM customers c WHERE (SELECT COUNT(DISTINCT r.ReceiptNumber) FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Food = 'bakery') >= 15",
          "SELECT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(DISTINCT r.ReceiptNumber) >= 15)",
          "SELECT c.Id FROM customers c WHERE 15 <= (SELECT COUNT(DISTINCT r.ReceiptNumber) FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Food = 'bakery')",
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY c.Id HAVING COUNT(DISTINCT r.ReceiptNumber) >= 15"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT T2.CustomerId FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(*) >= 15",
          "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15",
          "SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(*) >= 15",
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT DISTINCT r.CustomerId FROM receipts r WHERE (SELECT COUNT(*) FROM receipts WHERE CustomerId = r.CustomerId) >= 15",
          "SELECT CustomerId FROM (SELECT CustomerId, COUNT(*) AS NumReceipts FROM receipts GROUP BY CustomerId) AS ReceiptCounts WHERE NumReceipts >= 15",
          "SELECT r.CustomerId FROM receipts r INNER JOIN customers c ON r.CustomerId = c.Id GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15",
          "SELECT CustomerId, COUNT(*) AS TotalReceipts FROM receipts GROUP BY CustomerId HAVING TotalReceipts >= 15"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)",
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(*) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(*) > 10)",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)",
          "SELECT customers.LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(receipts.ReceiptNumber) > 10",
          "SELECT LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT c.LastName FROM customers c INNER JOIN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10) AS frequent_visitors ON c.Id = frequent_visitors.CustomerId",
          "SELECT DISTINCT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id, c.LastName HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING COUNT(*) > 10)",
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(DISTINCT r.ReceiptNumber) > 10",
          "SELECT LastName FROM (SELECT c.LastName, COUNT(r.ReceiptNumber) AS visits FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id) WHERE visits > 10",
          "SELECT c.LastName FROM customers c WHERE (SELECT COUNT(*) FROM receipts WHERE CustomerId = c.Id) > 10"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Id FROM goods WHERE Food = 'Cake')",
          "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(*) FROM goods WHERE Food = 'Cake' GROUP BY Flavor",
          "SELECT COUNT(UNIQUE Id) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(*) FROM goods WHERE Food LIKE 'Cake'",
          "SELECT COUNT(*) FROM goods g WHERE g.Food = 'Cake'",
          "SELECT COUNT(DISTINCT g.Id) FROM goods g WHERE g.Food = 'Cake'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake') AS UniqueCakes",
          "SELECT COUNT(DISTINCT Flavor) AS CakeTypes FROM goods WHERE Food = 'Cake'"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Id FROM goods WHERE Food = 'cake')",
          "SELECT COUNT(DISTINCT goods.Id) FROM goods WHERE goods.Food = 'cake'",
          "SELECT COUNT(UNIQUE Id) FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(*) FROM goods WHERE Food = 'cake' GROUP BY Id",
          "SELECT COUNT(DISTINCT Id) FROM goods WHERE Food LIKE 'cake'",
          "SELECT COUNT(*) FROM goods WHERE Food = 'cake' AND Flavor IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Id FROM goods WHERE Food = 'cake' GROUP BY Id)",
          "SELECT COUNT(DISTINCT Id) FROM goods g WHERE g.Food = 'cake'",
          "SELECT COUNT(*) FROM goods g WHERE g.Food = 'cake' GROUP BY g.Id"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'Croissant'",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant'",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food LIKE 'Croissant'",
          "SELECT goods.Flavor FROM goods WHERE goods.Food = 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor IS NOT NULL",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' ORDER BY Flavor",
          "SELECT DISTINCT g.Flavor FROM goods AS g WHERE g.Food = 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor <> ''"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'croissant'",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant'",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'croissant'",
          "SELECT Flavor FROM goods WHERE Food LIKE 'croissant'",
          "SELECT DISTINCT g.Flavor FROM goods AS g WHERE g.Food = 'croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' AND Flavor IS NOT NULL",
          "SELECT Flavor FROM goods WHERE LOWER(Food) = 'croissant'",
          "SELECT DISTINCT Flavor FROM goods WHERE LOWER(Food) = 'croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' ORDER BY Flavor"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT goods.Id FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15",
          "SELECT DISTINCT g.Id FROM goods g INNER JOIN items i ON g.Id = i.Item INNER JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15",
          "SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15)",
          "SELECT DISTINCT g.Id FROM goods g, items i, receipts r WHERE g.Id = i.Item AND i.Receipt = r.ReceiptNumber AND r.CustomerId = 15",
          "SELECT DISTINCT goods.Id FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT g.Id FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber AND r.CustomerId = 15",
          "SELECT DISTINCT Item FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15",
          "SELECT DISTINCT g.Id FROM goods g WHERE EXISTS (SELECT 1 FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE i.Item = g.Id AND r.CustomerId = 15)",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Id IN (SELECT i.Item FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15)",
          "SELECT DISTINCT g.Id FROM goods g INNER JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15)"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT G.Id FROM goods G JOIN items I ON G.Id = I.Item JOIN receipts R ON I.Receipt = R.ReceiptNumber WHERE R.CustomerId = 15",
          "SELECT DISTINCT goods.Id FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15",
          "SELECT DISTINCT goods.Id FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT G.Id FROM goods G, items I, receipts R WHERE G.Id = I.Item AND I.Receipt = R.ReceiptNumber AND R.CustomerId = 15",
          "SELECT DISTINCT I.Item FROM items I JOIN receipts R ON I.Receipt = R.ReceiptNumber WHERE R.CustomerId = 15",
          "SELECT DISTINCT I.Item FROM items I, receipts R WHERE I.Receipt = R.ReceiptNumber AND R.CustomerId = 15",
          "SELECT DISTINCT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15)",
          "SELECT DISTINCT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE items.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15)",
          "SELECT DISTINCT Item FROM items INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15",
          "SELECT DISTINCT G.Id FROM goods AS G JOIN items AS I ON G.Id = I.Item JOIN receipts AS R ON I.Receipt = R.ReceiptNumber WHERE R.CustomerId = 15"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AveragePrice, MAX(g.Price) AS MaximumPrice, MIN(g.Price) AS MinimumPrice FROM goods g GROUP BY g.Food",
          "SELECT Food, average(Price), maximum(Price), minimum(Price) FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) Average, MAX(Price) Maximum, MIN(Price) Minimum FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) as AvgPrice, MAX(Price) as MaxPrice, MIN(Price) as MinPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) 'Average Price', MAX(Price) 'Maximum Price', MIN(Price) 'Minimum Price' FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) average_price, MAX(Price) max_price, MIN(Price) min_price FROM goods GROUP BY Food",
          "SELECT 'Food' AS FoodType, AVG(Price) AS AvgPrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY FoodType",
          "SELECT Food, AVG(Price) AS Average_Price, MAX(Price) AS Max_Price, MIN(Price) AS Min_Price FROM goods GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price), MIN(Price), MAX(Price) FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS MinimumPrice, MAX(g.Price) AS MaximumPrice FROM goods g GROUP BY g.Food",
          "SELECT Food, average(Price), minimum(Price), maximum(Price) FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) average_price, MIN(Price) minimum_price, MAX(Price) maximum_price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AvgPrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Average_Price, MIN(Price) AS Minimum_Price, MAX(Price) AS Maximum_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS \"Average Price\", MIN(Price) AS \"Minimum Price\", MAX(Price) AS \"Maximum Price\" FROM goods GROUP BY Food",
          "SELECT 'Food' AS FoodType, AVG(Price) AS AvgPrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Food = 'Cake') AND r.ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie'))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' AND i.Receipt = r.ReceiptNumber) AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie' AND i.Receipt = r.ReceiptNumber)",
          "SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake') INTERSECT SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie')",
          "SELECT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT CASE WHEN g.Food = 'Cookie' THEN i.Item END) > 0",
          "SELECT DISTINCT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Food = 'Cake' AND EXISTS (SELECT 1 FROM items i2, goods g2 WHERE i2.Item = g2.Id AND g2.Food = 'Cookie' AND i2.Receipt = i.Receipt)",
          "SELECT DISTINCT i1.Receipt FROM items i1 JOIN goods g1 ON i1.Item = g1.Id JOIN items i2 ON i1.Receipt = i2.Receipt JOIN goods g2 ON i2.Item = g2.Id WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie'",
          "SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('Cake', 'Cookie') GROUP BY i.Receipt HAVING COUNT(DISTINCT g.Food) = 2",
          "SELECT DISTINCT Receipt FROM (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake') UNION ALL SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie')) AS subquery GROUP BY Receipt HAVING COUNT(*) > 1",
          "SELECT DISTINCT i.Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' AND i.Receipt IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie'))",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake')) AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie'))"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Food = 'cake') AND r.ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookies'))",
          "SELECT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food IN ('cake', 'cookies') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) = 2",
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cake')) AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookies'))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' INTERSECT SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies'",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND i.Receipt = r.ReceiptNumber) AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies' AND i.Receipt = r.ReceiptNumber)",
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' OR g.Food = 'cookies' GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) > 1",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND (g.Food = 'cake' OR g.Food = 'cookies') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) = 2",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake') AND r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies')",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' UNION SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.ReceiptNumber HAVING SUM(CASE WHEN g.Food = 'cake' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN g.Food = 'cookies' THEN 1 ELSE 0 END) > 0"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT receipts.ReceiptNumber FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE customers.LastName = 'LOGAN' AND items.Item IN (SELECT Id FROM goods WHERE Food = 'Croissant')",
          "SELECT R.ReceiptNumber FROM receipts R INNER JOIN customers C ON R.CustomerId = C.Id INNER JOIN items I ON R.ReceiptNumber = I.Receipt WHERE C.LastName = 'LOGAN' AND I.Item IN (SELECT Id FROM goods WHERE Food = 'Croissant')",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts AS R, customers AS C, items AS I, goods AS G WHERE R.CustomerId = C.Id AND I.Receipt = R.ReceiptNumber AND I.Item = G.Id AND C.LastName = 'LOGAN' AND G.Food = 'Croissant'",
          "SELECT R.ReceiptNumber FROM receipts AS R JOIN customers AS C ON R.CustomerId = C.Id JOIN items AS I ON R.ReceiptNumber = I.Receipt JOIN goods AS G ON I.Item = G.Id WHERE C.LastName = 'LOGAN' AND G.Food = 'Croissant'",
          "SELECT R.ReceiptNumber FROM receipts R, customers C, items I WHERE R.CustomerId = C.Id AND I.Receipt = R.ReceiptNumber AND C.LastName = 'LOGAN' AND I.Item IN (SELECT Id FROM goods WHERE Food = 'Croissant')",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts, customers, items, goods WHERE receipts.CustomerId = customers.Id AND items.Receipt = receipts.ReceiptNumber AND items.Item = goods.Id AND customers.LastName = 'LOGAN' AND goods.Food = 'Croissant'",
          "SELECT R.ReceiptNumber FROM receipts R LEFT JOIN customers C ON R.CustomerId = C.Id LEFT JOIN items I ON R.ReceiptNumber = I.Receipt LEFT JOIN goods G ON I.Item = G.Id WHERE C.LastName = 'LOGAN' AND G.Food = 'Croissant'",
          "SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE customers.LastName = 'LOGAN' AND items.Item IN (SELECT goods.Id FROM goods WHERE goods.Food = 'Croissant')",
          "SELECT R.ReceiptNumber FROM receipts R JOIN customers C ON R.CustomerId = C.Id JOIN items I ON R.ReceiptNumber = I.Receipt WHERE C.LastName = 'LOGAN' AND EXISTS (SELECT 1 FROM goods G WHERE G.Id = I.Item AND G.Food = 'Croissant')",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R, customers C, items I, goods G WHERE R.CustomerId = C.Id AND I.Receipt = R.ReceiptNumber AND I.Item = G.Id AND C.LastName = 'LOGAN' AND G.Food = 'Croissant'"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt WHERE c.LastName = 'Logan' AND i.Item IN (SELECT Id FROM goods WHERE Food = 'croissant')",
          "SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE customers.LastName = 'Logan' AND items.Item IN (SELECT Id FROM goods WHERE Food = 'croissant')",
          "SELECT r.ReceiptNumber FROM receipts AS r, customers AS c, items AS i, goods AS g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'croissant'))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND c.LastName = 'Logan' AND i.Item IN (SELECT Id FROM goods WHERE Food = 'croissant')",
          "SELECT r.ReceiptNumber FROM receipts r INNER JOIN customers c ON r.CustomerId = c.Id INNER JOIN items i ON r.ReceiptNumber = i.Receipt WHERE c.LastName = 'Logan' AND EXISTS (SELECT 1 FROM goods g WHERE g.Id = i.Item AND g.Food = 'croissant')",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Food LIKE 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt WHERE c.LastName = 'Logan' AND i.Item IN (SELECT Id FROM goods g WHERE g.Food LIKE 'croissant')"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT R.ReceiptNumber, R.Date FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id ORDER BY G.Price DESC LIMIT 1",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id ORDER BY g.Price DESC LIMIT 1",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id ORDER BY goods.Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT R.ReceiptNumber, R.Date FROM receipts AS R JOIN items AS I ON R.ReceiptNumber = I.Receipt JOIN goods AS G ON I.Item = G.Id ORDER BY G.Price DESC LIMIT 1",
          "SELECT TOP 1 receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC LIMIT 1",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id ORDER BY G.Price DESC LIMIT 1",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R INNER JOIN items I ON R.ReceiptNumber = I.Receipt INNER JOIN goods G ON I.Item = G.Id ORDER BY G.Price DESC LIMIT 1",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.ReceiptNumber, r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r, items AS i, goods AS g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id ORDER BY g.Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber = (SELECT Receipt FROM items WHERE Item = (SELECT Id FROM goods ORDER BY Price DESC LIMIT 1) LIMIT 1)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id ORDER BY g.Price DESC LIMIT 1",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods ORDER BY Price DESC LIMIT 1)) LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber = (SELECT Receipt FROM items WHERE Item = (SELECT Id FROM goods ORDER BY Price DESC) LIMIT 1) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) ASC LIMIT 1",
          "SELECT i.Item FROM items i GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY COUNT(items.Item) ASC LIMIT 1",
          "SELECT i.Item, COUNT(*) as Total FROM items i GROUP BY i.Item ORDER BY Total ASC LIMIT 1",
          "SELECT Item, COUNT(Item) as ItemCount FROM items GROUP BY Item ORDER BY ItemCount ASC LIMIT 1",
          "SELECT TOP 1 i.Item FROM items i GROUP BY i.Item ORDER BY COUNT(*) ASC",
          "SELECT goods.Id FROM goods INNER JOIN items ON goods.Id = items.Item GROUP BY goods.Id HAVING COUNT(items.Item) = (SELECT MIN(COUNT(Item)) FROM items GROUP BY Item)",
          "SELECT i.Item FROM items i LEFT JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1",
          "SELECT Item FROM (SELECT Item, COUNT(*) as Count FROM items GROUP BY Item) AS ItemCounts ORDER BY Count ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT goods.Id, goods.Food FROM goods INNER JOIN items ON goods.Id = items.Item GROUP BY items.Item ORDER BY COUNT(items.Item) ASC LIMIT 1",
          "SELECT g.Id, g.Food FROM goods g, items i WHERE g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1",
          "SELECT Id, Food FROM goods WHERE Id IN (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT goods.Id, goods.Food FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY COUNT(items.Item) ASC LIMIT 1",
          "SELECT g.Id, g.Food FROM goods g LEFT JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1",
          "SELECT TOP 1 g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item)",
          "SELECT g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item HAVING COUNT(i.Item) = (SELECT MIN(COUNT(*)) FROM items GROUP BY Item)",
          "SELECT g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) AS NumberOfGoods FROM goods GROUP BY Food",
          "SELECT g.Food, COUNT(g.Id) FROM goods g GROUP BY g.Food",
          "SELECT Food, COUNT(*) AS CountOfGoods FROM goods GROUP BY Food",
          "SELECT Food, COUNT(DISTINCT Id) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(DISTINCT Id) AS UniqueGoodsCount FROM goods GROUP BY Food",
          "SELECT g.Food, COUNT(g.Id) AS TotalGoods FROM goods g GROUP BY g.Food",
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, COUNT(*) AS Total FROM goods GROUP BY Food ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) AS NumberOfGoods FROM goods GROUP BY Food",
          "SELECT g.Food, COUNT(g.Id) FROM goods g GROUP BY g.Food",
          "SELECT Food, COUNT(*) AS CountOfGoods FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, COUNT(*) AS Total FROM goods GROUP BY Food",
          "SELECT 'Food' AS FoodType, COUNT(*) AS TotalGoods FROM goods GROUP BY Food",
          "SELECT Food AS TypeOfFood, COUNT(*) FROM goods GROUP BY TypeOfFood",
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AveragePrice FROM goods g GROUP BY g.Food",
          "SELECT AVG(Price), Food FROM goods GROUP BY Food",
          "SELECT 'Food' AS FoodType, AVG(Price) AS AveragePrice FROM goods GROUP BY FoodType",
          "SELECT Food, AVG(Price) AS AvgPrice FROM goods GROUP BY Food",
          "SELECT AVG(Price) AS AveragePrice, Food FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food",
          "SELECT AVG(Price) AS AveragePrice, Food AS TypeOfFood FROM goods GROUP BY TypeOfFood",
          "SELECT Food AS Type, AVG(Price) AS AveragePrice FROM goods GROUP BY Type"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AvgPrice FROM goods g GROUP BY g.Food",
          "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
          "SELECT AVG(Price), Food FROM goods GROUP BY Food",
          "SELECT 'Food' AS Type, AVG(Price) AS Average_Price FROM goods GROUP BY Food",
          "SELECT Food AS Type, AVG(Price) AS AveragePrice FROM goods GROUP BY Type",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food ORDER BY Food",
          "SELECT AVG(Price) AS AveragePrice, Food FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food HAVING AVG(Price) IS NOT NULL",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods WHERE Price IS NOT NULL GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5",
          "SELECT g.Id FROM goods AS g WHERE g.Flavor = 'Apricot' AND g.Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00",
          "SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5",
          "SELECT goods.Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price <= 4.99",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < $5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5 AND Flavor IS NOT NULL",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5 ORDER BY Price ASC"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0",
          "SELECT g.Id FROM goods AS g WHERE g.Flavor = 'Apricot' AND g.Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00",
          "SELECT goods.Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00",
          "SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < $5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.000",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0000"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.0",
          "SELECT g.Flavor FROM goods AS g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 ORDER BY Price DESC",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 ORDER BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.00",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT g.Flavor FROM goods AS g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.00",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 ORDER BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.0",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods AS g)",
          "SELECT DISTINCT Id, Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id AS Id, g.Price AS Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods g WHERE g.Id = goods.Id)",
          "SELECT DISTINCT Id, Price FROM goods g1 WHERE g1.Price < (SELECT AVG(g2.Price) FROM goods g2)"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods AS g)",
          "SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT Id, Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods AS g)"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT min(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT min(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT min(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart')",
          "SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT min(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE EXISTS (SELECT 1 FROM goods g2 WHERE g2.Flavor = 'Tart' AND g.Price < g2.Price)",
          "SELECT DISTINCT Id FROM goods g1 WHERE g1.Price < (SELECT min(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT min(Price) FROM goods WHERE Flavor = 'Tart' GROUP BY Flavor)",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT min(Price) FROM goods g WHERE g.Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT Price FROM goods WHERE Flavor = 'Tart' ORDER BY Price ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < ALL (SELECT Price FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < ANY (SELECT Price FROM goods WHERE Food = 'Tart' AND Price IS NOT NULL)",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE EXISTS (SELECT 1 FROM goods t WHERE t.Food = 'Tart' AND g.Price < t.Price)",
          "SELECT DISTINCT Id FROM goods g1 WHERE NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Tart' AND g1.Price >= g2.Price)",
          "SELECT DISTINCT g.Id FROM goods g LEFT JOIN goods t ON t.Food = 'Tart' WHERE g.Price < t.Price",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods t WHERE t.Food = 'Tart' AND t.Price IS NOT NULL)",
          "SELECT DISTINCT g.Id FROM goods g, (SELECT MIN(Price) AS MinPrice FROM goods WHERE Food = 'Tart') t WHERE g.Price < t.MinPrice",
          "SELECT DISTINCT Id FROM goods g WHERE g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart' GROUP BY Food)"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13",
          "SELECT DISTINCT i.Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT Receipt FROM items, goods WHERE items.Item = goods.Id AND goods.Price > 13",
          "SELECT DISTINCT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT Receipt FROM items INNER JOIN goods ON items.Item = goods.Id AND goods.Price > 13",
          "SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT i.Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT Receipt FROM items LEFT JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13",
          "SELECT DISTINCT i.Receipt FROM items i LEFT JOIN goods g ON i.Item = g.Id WHERE g.Price > 13"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Price > 13",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT OUTER JOIN items i ON r.ReceiptNumber = i.Receipt LEFT OUTER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))",
          "SELECT receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT r.Date FROM receipts AS r, items AS i, goods AS g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15",
          "SELECT Date FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE receipts.ReceiptNumber = items.Receipt AND goods.Price > 15)",
          "SELECT DISTINCT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 ORDER BY r.Date",
          "SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 GROUP BY receipts.Date",
          "SELECT r.Date FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 15)",
          "SELECT Date FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 15)"
        ]
      ]
    },
    {
      "id": 1534,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15",
          "SELECT receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 15",
          "SELECT Date FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id WHERE Price > 15",
          "SELECT DISTINCT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 ORDER BY r.Date",
          "SELECT receipts.Date FROM receipts LEFT JOIN items ON receipts.ReceiptNumber = items.Receipt LEFT JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 15"
        ]
      ]
    },
    {
      "id": 1535,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT `Id` FROM `goods` WHERE `Id` LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE \"%APP%\"",
          "SELECT Id FROM goods WHERE goods.Id LIKE \"%APP%\"",
          "SELECT goods.Id FROM goods WHERE `Id` LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%' COLLATE NOCASE",
          "SELECT Id FROM goods WHERE UPPER(Id) LIKE UPPER('%APP%')",
          "SELECT Id FROM goods WHERE LOWER(Id) LIKE LOWER('%APP%')",
          "SELECT Id FROM goods WHERE Id COLLATE UTF8_GENERAL_CI LIKE '%APP%'"
        ]
      ]
    },
    {
      "id": 1536,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT `Id` FROM `goods` WHERE `Id` LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE \"%APP%\"",
          "SELECT Id FROM goods WHERE Id COLLATE NOCASE LIKE '%APP%'",
          "SELECT Id FROM goods WHERE UPPER(Id) LIKE UPPER('%APP%')",
          "SELECT Id FROM goods WHERE LOWER(Id) LIKE LOWER('%APP%')",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%' ESCAPE '\\'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%' ORDER BY Id",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%' AND Id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1537,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT g.Flavor, g.Price FROM goods AS g WHERE g.Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'"
        ]
      ]
    },
    {
      "id": 1538,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT goods.Id, goods.Price FROM goods WHERE goods.Id LIKE '%70%'",
          "SELECT g.Id, g.Price FROM goods g WHERE g.Id LIKE '%70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '_70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '70%' OR Id LIKE '%70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70%' OR Id LIKE '70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70' OR Id LIKE '70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70%' OR Id LIKE '_70%'"
        ]
      ]
    },
    {
      "id": 1539,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName",
          "SELECT `LastName` FROM `customers` ORDER BY `LastName` ASC",
          "SELECT customers.LastName FROM customers ORDER BY customers.LastName ASC",
          "SELECT c.LastName FROM customers c ORDER BY c.LastName ASC",
          "SELECT LastName AS CustomerLastName FROM customers ORDER BY CustomerLastName",
          "SELECT LastName FROM customers ORDER BY LastName ASCENDING",
          "SELECT LastName FROM customers ORDER BY 1",
          "SELECT LastName FROM customers ORDER BY LastName COLLATE NOCASE",
          "SELECT LastName FROM customers ORDER BY UPPER(LastName)"
        ]
      ]
    },
    {
      "id": 1540,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName",
          "SELECT customers.LastName FROM customers ORDER BY customers.LastName",
          "SELECT c.LastName FROM customers c ORDER BY c.LastName ASC",
          "SELECT `LastName` FROM `customers` ORDER BY `LastName` ASC",
          "SELECT LastName AS CustomerLastName FROM customers ORDER BY CustomerLastName",
          "SELECT LastName FROM customers ORDER BY LastName ASCENDING",
          "SELECT LastName FROM customers ORDER BY 1",
          "SELECT customers.LastName FROM customers ORDER BY customers.LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 1541,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods ORDER BY Id ASC",
          "SELECT goods.Id FROM goods ORDER BY goods.Id ASC",
          "SELECT `Id` FROM `goods` ORDER BY `Id` ASC",
          "SELECT Id FROM goods ORDER BY Id",
          "SELECT goods.Id FROM goods ORDER BY Id",
          "SELECT Id AS GoodID FROM goods ORDER BY GoodID ASC",
          "SELECT Id FROM goods ORDER BY Id ASCENDING",
          "SELECT Id FROM goods ORDER BY 1",
          "SELECT * FROM goods ORDER BY Id ASC",
          "SELECT Id FROM goods ORDER BY Id ASC, Flavor ASC"
        ]
      ]
    },
    {
      "id": 1542,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id FROM goods ORDER BY Id",
          "SELECT DISTINCT goods.Id FROM goods ORDER BY goods.Id",
          "SELECT DISTINCT g.Id FROM goods g ORDER BY g.Id",
          "SELECT DISTINCT Id FROM goods ORDER BY Id ASC",
          "SELECT DISTINCT goods.Id FROM goods ORDER BY goods.Id ASC",
          "SELECT DISTINCT g.Id FROM goods g ORDER BY g.Id ASC",
          "SELECT DISTINCT Id AS GoodID FROM goods ORDER BY GoodID",
          "SELECT DISTINCT goods.Id AS GoodID FROM goods ORDER BY GoodID",
          "SELECT DISTINCT g.Id AS GoodID FROM goods g ORDER BY GoodID",
          "SELECT DISTINCT Id FROM goods ORDER BY 1"
        ]
      ]
    },
    {
      "id": 1543,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR r.CustomerId = 12",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 UNION SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie')",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND (g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12)",
          "SELECT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 OR EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Flavor = 'apple' AND g.Food = 'pie')",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 OR r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie')",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie'))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 OR r.ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie'))"
        ]
      ]
    },
    {
      "id": 1544,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt WHERE (SELECT Flavor FROM goods WHERE Id = i.Item) = 'apple' AND (SELECT Food FROM goods WHERE Id = i.Item) = 'pie' OR r.CustomerId = 12",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId = 12 UNION SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie')",
          "SELECT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND (g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i WHERE r.ReceiptNumber = i.Receipt AND (i.Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie') OR r.CustomerId = 12)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 UNION SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie'",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId = 12 UNION SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie')"
        ]
      ]
    },
    {
      "id": 1545,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT * FROM receipts WHERE Date IN (SELECT MAX(Date) FROM receipts)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts ORDER BY Date DESC LIMIT 1)",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT Date FROM receipts ORDER BY Date DESC LIMIT 1)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT Date FROM receipts ORDER BY Date DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1546,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1",
          "SELECT TOP 1 ReceiptNumber, Date FROM receipts ORDER BY Date DESC",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC FETCH FIRST ROW ONLY",
          "SELECT * FROM (SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC) WHERE ROWNUM = 1",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT MAX(Date) FROM receipts AS r2)",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC, ReceiptNumber DESC LIMIT 1",
          "SELECT ReceiptNumber, MAX(Date) AS LatestDate FROM receipts GROUP BY ReceiptNumber ORDER BY LatestDate DESC LIMIT 1",
          "SELECT FIRST(ReceiptNumber), FIRST(Date) FROM receipts ORDER BY Date DESC"
        ]
      ]
    },
    {
      "id": 1547,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT * FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Price > 10)",
          "SELECT receipts.* FROM receipts LEFT JOIN items ON receipts.ReceiptNumber = items.Receipt LEFT JOIN goods ON items.Item = goods.Id WHERE receipts.Date = (SELECT MIN(Date) FROM receipts) OR goods.Price > 10",
          "SELECT R.* FROM receipts R WHERE R.Date = (SELECT MIN(Date) FROM receipts) OR EXISTS (SELECT 1 FROM items I JOIN goods G ON I.Item = G.Id WHERE G.Price > 10 AND I.Receipt = R.ReceiptNumber)",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE receipts.Date = (SELECT MIN(Date) FROM receipts) OR goods.Price > 10",
          "SELECT R.ReceiptNumber FROM receipts R WHERE R.Date = (SELECT MIN(Date) FROM receipts UNION SELECT Receipt FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10)",
          "SELECT * FROM receipts WHERE Date IN (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10))",
          "SELECT receipts.ReceiptNumber, receipts.Date, receipts.CustomerId FROM receipts LEFT JOIN items ON receipts.ReceiptNumber = items.Receipt LEFT JOIN goods ON items.Item = goods.Id WHERE receipts.Date = (SELECT MIN(Date) FROM receipts) OR goods.Price > 10",
          "SELECT R.ReceiptNumber FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE R.Date = (SELECT MIN(Date) FROM receipts) OR G.Price > 10",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND (R.Date = (SELECT MIN(Date) FROM receipts) OR G.Price > 10)",
          "SELECT R.ReceiptNumber FROM receipts R WHERE EXISTS (SELECT 1 FROM items I JOIN goods G ON I.Item = G.Id WHERE G.Price > 10 AND I.Receipt = R.ReceiptNumber) OR R.Date = (SELECT MIN(Date) FROM receipts)"
        ]
      ]
    },
    {
      "id": 1548,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items WHERE Receipt = ReceiptNumber AND Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) UNION SELECT i.Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 10",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) UNION SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id AND g.Price > 10",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) UNION SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 10)",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 10)"
        ]
      ]
    },
    {
      "id": 1549,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3 AND 7",
          "SELECT g.Id FROM goods g WHERE g.Food IN ('Cookie', 'Cake') AND g.Price >= 3 AND g.Price <= 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price >= 3 AND Price <= 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND (Price >= 3 AND Price <= 7)",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cookie' OR goods.Food = 'Cake' HAVING Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price > 2.99 AND Price < 7.01",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price > 2 AND Price < 8",
          "SELECT Id FROM goods WHERE Food = 'Cookie' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cake' AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3.00 AND 7.00",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7 ORDER BY Price"
        ]
      ]
    },
    {
      "id": 1550,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price BETWEEN 3 AND 7",
          "SELECT g.Id FROM goods g WHERE g.Food IN ('Cookies', 'Cakes') AND g.Price >= 3 AND g.Price <= 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price >= 3 AND Price <= 7",
          "SELECT goods.Id FROM goods WHERE (goods.Food = 'Cookies' OR goods.Food = 'Cakes') AND goods.Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cakes' AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND (Price >= 3 AND Price <= 7)",
          "SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price > 2.99 AND Price < 7.01",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price > 2 AND Price < 8",
          "SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price BETWEEN 3.00 AND 7.00"
        ]
      ]
    },
    {
      "id": 1551,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date ASC LIMIT 1",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts ORDER BY Date ASC LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId ORDER BY r.Date ASC LIMIT 1",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC FETCH FIRST ROW ONLY)",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date FETCH FIRST ROW ONLY",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT MIN(CustomerId) FROM receipts GROUP BY CustomerId ORDER BY MIN(Date) LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c WHERE c.Id = (SELECT r.CustomerId FROM receipts r ORDER BY r.Date LIMIT 1)",
          "SELECT TOP 1 c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC, ReceiptNumber ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1552,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1",
          "SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY receipts.Date ASC LIMIT 1",
          "SELECT customers.FirstName || ' ' || customers.LastName FROM customers, receipts WHERE customers.Id = receipts.CustomerId ORDER BY receipts.Date ASC FETCH FIRST 1 ROW ONLY",
          "SELECT FirstName || ' ' || LastName AS FullName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date LIMIT 1",
          "SELECT c.FirstName || ' ' || c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date ASC LIMIT 1",
          "SELECT FirstName || ' ' || LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1",
          "SELECT c.FirstName || ' ' || c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId ORDER BY r.Date ASC LIMIT 1",
          "SELECT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY receipts.Date ASC LIMIT 1",
          "SELECT c.FirstName || ' ' || c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date ASC LIMIT 1",
          "SELECT FirstName || ' ' || LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY receipts.Date FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1553,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) AS AveragePrice FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'",
          "SELECT AVG(g.Price) FROM goods g WHERE g.Flavor = 'blackberry' OR g.Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor LIKE 'blackberry' OR Flavor LIKE 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN (SELECT Flavor FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry')",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor",
          "SELECT AVG(Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION ALL SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN (SELECT DISTINCT Flavor FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry')"
        ]
      ]
    },
    {
      "id": 1554,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(g.Price) AS AveragePrice FROM goods g WHERE g.Flavor = 'blackberry' OR g.Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'",
          "SELECT AVG(Price) AS AvgPrice FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) FROM goods WHERE Flavor LIKE 'blackberry' OR Flavor LIKE 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION ALL SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor HAVING COUNT(*) > 0",
          "SELECT AVG(Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry')"
        ]
      ]
    },
    {
      "id": 1555,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1",
          "SELECT MIN(g.Price) AS CheapestPrice FROM goods g WHERE g.Flavor = 'cheese'",
          "SELECT Price AS Cheapest FROM goods WHERE Flavor = 'cheese' ORDER BY Price LIMIT 1",
          "SELECT * FROM (SELECT Price FROM goods WHERE Flavor = 'cheese') ORDER BY Price LIMIT 1",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC ROWS 1",
          "SELECT MIN(Price) FROM goods WHERE Flavor LIKE 'cheese'",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING"
        ]
      ]
    },
    {
      "id": 1556,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1",
          "SELECT Id FROM goods WHERE Flavor LIKE 'cheese' ORDER BY Price LIMIT 1",
          "SELECT TOP 1 Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'cheese' ORDER BY g.Price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT * FROM (SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC) WHERE ROWNUM = 1",
          "SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC ROWS 1",
          "SELECT FIRST(Id) FROM goods WHERE Flavor = 'cheese' ORDER BY Price",
          "SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC, Id DESC LIMIT 1",
          "SELECT Id FROM (SELECT Id, Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC) AS Cheapest LIMIT 1"
        ]
      ]
    },
    {
      "id": 1557,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MAX(Price) AS HighestPrice, MIN(Price) AS LowestPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT g.Flavor, MAX(g.Price) AS MaxPrice, MIN(g.Price) AS MinPrice, AVG(g.Price) AS AvgPrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor",
          "SELECT Flavor, MAX(Price) AS High, MIN(Price) AS Low, AVG(Price) AS Average FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) AS Highest, MIN(Price) AS Lowest, AVG(Price) AS Average FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) AS Max_Price, MIN(Price) AS Min_Price, AVG(Price) AS Avg_Price FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS Highest_Price, MIN(Price) AS Lowest_Price, AVG(Price) AS Average_Price FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS 'Highest Price', MIN(Price) AS 'Lowest Price', AVG(Price) AS 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS 'Max Price', MIN(Price) AS 'Min Price', AVG(Price) AS 'Avg Price' FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS 'Highest Price', MIN(Price) AS 'Lowest Price', AVG(Price) AS 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor ASC"
        ]
      ]
    },
    {
      "id": 1558,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT g.Flavor, MAX(g.Price) AS MaxPrice, MIN(g.Price) AS MinPrice, AVG(g.Price) AS AvgPrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor",
          "SELECT Flavor, MAX(Price) AS MaximumPrice, MIN(Price) AS MinimumPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) Maximum, MIN(Price) Minimum, AVG(Price) Average FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as 'Max Price', MIN(Price) as 'Min Price', AVG(Price) as 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) max_price, MIN(Price) min_price, AVG(Price) avg_price FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) MaxPrice, MIN(Price) MinPrice, AVG(Price) AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as MaximumPrice, MIN(Price) as MinimumPrice, AVG(Price) as AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as Max_Price, MIN(Price) as Min_Price, AVG(Price) as Avg_Price FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) as Maximum_Price, MIN(Price) as Minimum_Price, AVG(Price) as Average_Price FROM goods GROUP BY Flavor ORDER BY Flavor ASC"
        ]
      ]
    },
    {
      "id": 1559,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT min(Price), max(Price), Food FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, min(Price) AS LowestPrice, max(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) Lowest, MAX(Price) Highest FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) as MinPrice, MAX(Price) as MaxPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) as MinimumPrice, MAX(Price) as MaximumPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) as LowestPrice, MAX(Price) as HighestPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) as Min_Price, MAX(Price) as Max_Price FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) as Minimum_Price, MAX(Price) as Maximum_Price FROM goods GROUP BY Food ORDER BY Food ASC"
        ]
      ]
    },
    {
      "id": 1560,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT min(Price), max(Price), Food FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, min(Price) AS MinPrice, max(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price), MAX(Price) FROM goods WHERE Food IS NOT NULL GROUP BY Food ORDER BY Food ASC",
          "SELECT g.Food, MIN(g.Price) AS MinPrice, MAX(g.Price) AS MaxPrice FROM goods g GROUP BY g.Food ORDER BY g.Food",
          "SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods WHERE Food <> '' GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food HAVING Food IS NOT NULL ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods WHERE Food IS NOT NULL GROUP BY Food ORDER BY Food ASC"
        ]
      ]
    },
    {
      "id": 1561,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT r.Date FROM receipts r GROUP BY r.Date ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 3",
          "SELECT Date, COUNT(ReceiptNumber) AS TotalReceipts FROM receipts GROUP BY Date ORDER BY TotalReceipts DESC LIMIT 3",
          "SELECT receipts.Date FROM receipts GROUP BY receipts.Date ORDER BY COUNT(receipts.ReceiptNumber) DESC LIMIT 3",
          "SELECT Date FROM receipts GROUP BY Date HAVING COUNT(ReceiptNumber) > 0 ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3",
          "SELECT Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC LIMIT 3",
          "SELECT Date FROM (SELECT Date, COUNT(*) AS NumReceipts FROM receipts GROUP BY Date) AS DateCounts ORDER BY NumReceipts DESC LIMIT 3",
          "SELECT TOP 3 Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT Date, COUNT(ReceiptNumber) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1562,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT r.Date FROM receipts r GROUP BY r.Date ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 3",
          "SELECT Date, COUNT(ReceiptNumber) AS Total FROM receipts GROUP BY Date ORDER BY Total DESC LIMIT 3",
          "SELECT receipts.Date FROM receipts GROUP BY receipts.Date ORDER BY COUNT(receipts.ReceiptNumber) DESC LIMIT 3",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3",
          "SELECT r.Date FROM receipts AS r GROUP BY r.Date ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC LIMIT 3",
          "SELECT Date FROM (SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC) WHERE ROWNUM <= 3",
          "SELECT TOP 3 Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC",
          "SELECT Date FROM receipts GROUP BY Date HAVING COUNT(ReceiptNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(ReceiptNumber) AS Count FROM receipts GROUP BY Date))"
        ]
      ]
    },
    {
      "id": 1563,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS NumberOfVisits FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY NumberOfVisits DESC LIMIT 1",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS Visits FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY Visits DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(*) AS TotalVisits FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY TotalVisits DESC LIMIT 1",
          "SELECT customers.FirstName, customers.LastName, COUNT(*) AS ShoppingVisits FROM customers, receipts WHERE customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY ShoppingVisits DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(ReceiptNumber) AS CountOfVisits FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY CountOfVisits DESC LIMIT 1",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS TotalShoppingTrips FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id ORDER BY TotalShoppingTrips DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(receipts.ReceiptNumber) AS NumberOfReceipts FROM customers LEFT JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY NumberOfReceipts DESC LIMIT 1",
          "SELECT customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS TotalPurchases FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY TotalPurchases DESC LIMIT 1",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(ReceiptNumber) FROM customers JOIN receipts ON Id = CustomerId GROUP BY Id ORDER BY COUNT(ReceiptNumber) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1564,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.CustomerId, COUNT(*) AS NumberOfPurchases FROM receipts AS r GROUP BY r.CustomerId ORDER BY NumberOfPurchases DESC LIMIT 1",
          "SELECT CustomerId, COUNT(ReceiptNumber) AS TotalPurchases FROM receipts GROUP BY CustomerId ORDER BY TotalPurchases DESC LIMIT 1",
          "SELECT receipts.CustomerId, COUNT(*) AS PurchaseCount FROM receipts GROUP BY receipts.CustomerId ORDER BY PurchaseCount DESC LIMIT 1",
          "SELECT r.CustomerId, COUNT(r.ReceiptNumber) AS Purchases FROM receipts r GROUP BY r.CustomerId ORDER BY Purchases DESC LIMIT 1",
          "SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT r.CustomerId, COUNT(r.ReceiptNumber) FROM receipts r GROUP BY r.CustomerId ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1",
          "SELECT CustomerId, COUNT(ReceiptNumber) FROM receipts GROUP BY CustomerId ORDER BY COUNT(ReceiptNumber) DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 CustomerId, COUNT(*) AS NumPurchases FROM receipts GROUP BY CustomerId ORDER BY NumPurchases DESC",
          "SELECT CustomerId, COUNT(*) AS Total FROM receipts GROUP BY CustomerId ORDER BY Total DESC LIMIT 1",
          "SELECT r.CustomerId, COUNT(r.ReceiptNumber) AS TotalReceipts FROM receipts r GROUP BY r.CustomerId ORDER BY TotalReceipts DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1565,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) AS unique_customers FROM receipts r GROUP BY r.Date",
          "SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) FROM receipts GROUP BY receipts.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS DistinctCustomers FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT CustomerId) FROM receipts AS r GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date ORDER BY Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date HAVING COUNT(DISTINCT CustomerId) > 0",
          "SELECT Date AS VisitDate, COUNT(DISTINCT CustomerId) AS NumberOfDistinctCustomers FROM receipts GROUP BY Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date WITH ROLLUP",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date WITH CUBE"
        ]
      ]
    },
    {
      "id": 1566,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) AS NumberOfCustomers FROM receipts r GROUP BY r.Date",
          "SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) FROM receipts GROUP BY receipts.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS Visitors FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT CustomerId) FROM receipts AS r GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date ORDER BY Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS TotalCustomers FROM receipts GROUP BY Date",
          "SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) AS CustomerCount FROM receipts GROUP BY receipts.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date HAVING COUNT(DISTINCT CustomerId) > 0",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) FROM receipts r GROUP BY r.Date ORDER BY r.Date"
        ]
      ]
    },
    {
      "id": 1567,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart')))",
          "SELECT customers.FirstName, customers.LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart'",
          "SELECT DISTINCT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts INNER JOIN items ON ReceiptNumber = Receipt WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))",
          "SELECT c.FirstName, c.LastName FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'Tart')",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'"
        ]
      ]
    },
    {
      "id": 1568,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.FirstName || ' ' || c.LastName AS FullName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT CONCAT(customers.FirstName, ' ', customers.LastName) AS FullName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT customers.FirstName || ' ' || customers.LastName FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT DISTINCT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'Tarts'",
          "SELECT FirstName || ' ' || LastName AS CustomerName FROM customers JOIN receipts ON Id = CustomerId JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id WHERE Flavor = 'apple' AND Food = 'Tarts'",
          "SELECT c.FirstName || ' ' || c.LastName AS FullName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT DISTINCT c.FirstName || ' ' || c.LastName AS FullName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT FirstName || ' ' || LastName AS FullName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT customers.FirstName || ' ' || customers.LastName AS FullName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT FirstName || ' ' || LastName AS FullName FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'Tarts'"
        ]
      ]
    },
    {
      "id": 1569,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant' AND Price IS NOT NULL)",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cookies' AND goods.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < ANY (SELECT Price FROM goods WHERE Food = 'Croissant')",
          "SELECT g.Id FROM goods AS g WHERE g.Food = 'Cookies' AND g.Price < (SELECT MIN(p.Price) FROM goods p WHERE p.Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(g.Price) FROM goods g WHERE g.Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'Croissant' AND Price > 0)",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cookies' AND goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant' AND Price > 0)"
        ]
      ]
    },
    {
      "id": 1570,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'cookies' AND goods.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'croissant')",
          "SELECT g.Id FROM goods AS g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(g2.Price) FROM goods AS g2 WHERE g2.Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(g.Price) FROM goods g WHERE g.Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods g WHERE g.Food = 'croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'cookies' AND goods.Price < ALL (SELECT Price FROM goods WHERE Food = 'croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(Price) FROM goods g2 WHERE g2.Food = 'croissant')"
        ]
      ]
    },
    {
      "id": 1571,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT g.Id FROM goods AS g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods AS t WHERE t.Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods t WHERE t.Food = 'Tart')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cake' AND goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods t WHERE t.Flavor = 'Tart')",
          "SELECT Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(p.Price) FROM goods p WHERE p.Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(t.Price) FROM goods t WHERE t.Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor LIKE 'Tart')"
        ]
      ]
    },
    {
      "id": 1572,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT avg(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'cake' AND goods.Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor LIKE 'Tart')",
          "SELECT g.Id FROM goods AS g WHERE g.Food = 'cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart' AND Food = 'Tart')",
          "SELECT goods.Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(g.Price) FROM goods g WHERE g.Flavor = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(Price) FROM goods g WHERE g.Flavor = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(g.Price) FROM goods g WHERE g.Flavor = 'Tart' AND g.Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart' AND Food = 'Tart')"
        ]
      ]
    },
    {
      "id": 1573,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT g.Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)",
          "SELECT goods.Id FROM goods WHERE goods.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT g.Id FROM goods AS g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods AS g2)",
          "SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods)",
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(g.Price) FROM goods g)",
          "SELECT goods.Id FROM goods WHERE Price > (SELECT AVG(goods.Price) * 2 FROM goods)",
          "SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2"
        ]
      ]
    },
    {
      "id": 1574,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT g.Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)",
          "SELECT goods.Id FROM goods WHERE goods.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods AS g)",
          "SELECT g.Id FROM goods AS g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT goods.Id FROM goods WHERE Price > (2 * (SELECT AVG(g.Price) FROM goods g))",
          "SELECT Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(g.Price) FROM goods g)"
        ]
      ]
    },
    {
      "id": 1575,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price",
          "SELECT `Id`, `Flavor`, `Food` FROM `goods` ORDER BY `Price` ASC",
          "SELECT Id AS ItemID, Flavor AS Taste, Food AS Type FROM goods ORDER BY Price ASC",
          "SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASCENDING",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY Price ASCENDING",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASC, Id ASC",
          "SELECT * FROM goods ORDER BY Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price, Id"
        ]
      ]
    },
    {
      "id": 1576,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price",
          "SELECT `Id`, `Flavor`, `Food` FROM `goods` ORDER BY `Price` ASC",
          "SELECT Id AS ItemID, Flavor AS Taste, Food AS FoodType FROM goods ORDER BY Price ASC",
          "SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASCENDING",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASC, Id ASC",
          "SELECT * FROM goods ORDER BY Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price, Id",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price, Flavor"
        ]
      ]
    },
    {
      "id": 1577,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'Cake' ORDER BY g.Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASC",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'Cake' ORDER BY goods.Flavor ASC",
          "SELECT Id AS ItemID, Flavor AS CakeFlavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor",
          "SELECT `Id`, `Flavor` FROM `goods` WHERE `Food` = 'Cake' ORDER BY `Flavor`",
          "SELECT Id, Flavor FROM goods WHERE Food LIKE 'Cake' ORDER BY Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food LIKE 'Cake' ORDER BY goods.Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASCENDING",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor DESCENDING",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor ASC, Id ASC"
        ]
      ]
    },
    {
      "id": 1578,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor",
          "SELECT g.Id, g.Flavor FROM goods AS g WHERE g.Food = 'cake' ORDER BY g.Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cake' ORDER BY goods.Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food LIKE 'cake' ORDER BY Flavor ASC",
          "SELECT goods.Id AS CakeID, goods.Flavor AS CakeFlavor FROM goods WHERE goods.Food = 'cake' ORDER BY goods.Flavor ASC",
          "SELECT `Id`, `Flavor` FROM `goods` WHERE `Food` = 'cake' ORDER BY `Flavor`",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor ASC",
          "SELECT Id AS CakeId, Flavor AS CakeFlavor FROM goods WHERE Food = 'cake' ORDER BY Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cake' ORDER BY Flavor ASC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor"
        ]
      ]
    },
    {
      "id": 1579,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.Item = g.Id) <= 10",
          "SELECT g.Id FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) > 10)",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'chocolate' GROUP BY goods.Id HAVING COUNT(*) <= 10",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND (SELECT COUNT(*) FROM items WHERE Item = goods.Id) <= 10",
          "SELECT DISTINCT g.Id FROM goods g, items i WHERE g.Id = i.Item AND g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(i.Item) <= 10",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(SELECT i.Item FROM items i WHERE i.Item = g.Id) <= 10",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND g.Id IN (SELECT i.Item FROM items i GROUP BY i.Item HAVING COUNT(i.Item) <= 10)",
          "SELECT goods.Id FROM goods WHERE Flavor = 'chocolate' AND goods.Id IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) <= 10)",
          "SELECT g.Id FROM goods g LEFT JOIN (SELECT Item, COUNT(*) as ItemCount FROM items GROUP BY Item) i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' AND (i.ItemCount IS NULL OR i.ItemCount <= 10)"
        ]
      ]
    },
    {
      "id": 1580,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(*) <= 10",
          "SELECT Item FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'chocolate' GROUP BY Item HAVING COUNT(Item) <= 10",
          "SELECT goods.Id FROM goods INNER JOIN items ON goods.Id = items.Item WHERE Flavor = 'chocolate' GROUP BY goods.Id HAVING COUNT(items.Item) <= 10",
          "SELECT g.Id FROM goods AS g, items AS i WHERE g.Id = i.Item AND g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10",
          "SELECT DISTINCT i.Item FROM items i, goods g WHERE i.Item = g.Id AND g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(*) <= 10",
          "SELECT Item FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'chocolate' GROUP BY Item HAVING COUNT(DISTINCT Receipt) <= 10",
          "SELECT g.Id FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item AND goods.Flavor = 'chocolate' GROUP BY goods.Id HAVING COUNT(*) <= 10",
          "SELECT i.Item FROM items i LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(i.Receipt) <= 10",
          "SELECT g.Id FROM goods g LEFT OUTER JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10"
        ]
      ]
    },
    {
      "id": 1581,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Flavor NOT IN (SELECT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart')",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT g.Flavor FROM goods g LEFT JOIN goods t ON g.Flavor = t.Flavor AND t.Food = 'Tart' WHERE g.Food = 'Cake' AND t.Id IS NULL",
          "SELECT DISTINCT Flavor FROM goods WHERE Flavor IN (SELECT Flavor FROM goods WHERE Food = 'Cake') AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT c.Flavor FROM (SELECT Flavor FROM goods WHERE Food = 'Cake') c WHERE c.Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods t WHERE t.Food = 'Tart' AND t.Flavor = g.Flavor)",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT Flavor FROM goods AS Cake WHERE Cake.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods AS Tart WHERE Tart.Food = 'Tart' AND Tart.Flavor = Cake.Flavor)",
          "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' MINUS SELECT DISTINCT Flavor FROM goods WHERE Food = 'Tart'"
        ]
      ]
    },
    {
      "id": 1582,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Flavor NOT IN (SELECT g2.Flavor FROM goods g2 WHERE g2.Food = 'Tart')",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT g.Flavor FROM goods g LEFT JOIN goods t ON g.Flavor = t.Flavor AND t.Food = 'Tart' WHERE g.Food = 'Cake' AND t.Id IS NULL",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT Flavor FROM goods AS g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods AS g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)",
          "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN (SELECT t.Flavor FROM goods t WHERE t.Food = 'Tart')",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' MINUS SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT * FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)",
          "SELECT DISTINCT Flavor FROM goods g WHERE g.Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g.Flavor FROM goods g LEFT OUTER JOIN goods t ON g.Flavor = t.Flavor AND t.Food = 'Tart' WHERE g.Food = 'Cake' AND t.Flavor IS NULL"
        ]
      ]
    },
    {
      "id": 1583,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY COUNT(i.Item) DESC LIMIT 3",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY COUNT(items.Item) DESC LIMIT 3",
          "SELECT i.Item, COUNT(*) AS Popularity FROM items i GROUP BY i.Item ORDER BY Popularity DESC LIMIT 3",
          "SELECT Item, COUNT(Item) AS Total FROM items GROUP BY Item ORDER BY Total DESC LIMIT 3",
          "SELECT g.Id, COUNT(*) AS TotalSold FROM goods g INNER JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY TotalSold DESC LIMIT 3",
          "SELECT TOP 3 Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC",
          "SELECT goods.Id FROM goods INNER JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY COUNT(*) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT i.Item FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY COUNT(i.Item) DESC LIMIT 3",
          "SELECT Item FROM (SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item) AS Popularity ORDER BY Count DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1584,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Flavor, g.Food, COUNT(*) AS TotalPurchased FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY TotalPurchased DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS Quantity FROM goods g INNER JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY Quantity DESC LIMIT 3",
          "SELECT g.Food || ' - ' || g.Flavor AS Product, COUNT(*) AS TotalOrders FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY TotalOrders DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS TotalSold FROM items i, goods g WHERE i.Item = g.Id GROUP BY i.Item ORDER BY TotalSold DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) FROM goods g, items i WHERE g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(*) AS Total FROM items i LEFT JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY Total DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS TotalCount FROM items i RIGHT JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY TotalCount DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS CountOfItems FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY CountOfItems DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS Popularity FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY Popularity DESC LIMIT 3",
          "SELECT g.Food, g.Flavor, COUNT(i.Item) AS NumberOfPurchases FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY NumberOfPurchases DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1585,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150",
          "SELECT c.Id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods GROUP BY Id HAVING SUM(Price) > 150)))",
          "SELECT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150)",
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150",
          "SELECT CustomerId FROM (SELECT CustomerId, SUM(Price) AS TotalSpent FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId) AS Spending WHERE TotalSpent > 150",
          "SELECT c.Id FROM customers c WHERE (SELECT SUM(g.Price) FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id) > 150",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150"
        ]
      ]
    },
    {
      "id": 1586,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150",
          "SELECT c.Id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods GROUP BY Id HAVING SUM(Price) > 150)))",
          "SELECT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150)",
          "SELECT c.Id FROM customers c WHERE (SELECT SUM(g.Price) FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id) > 150",
          "SELECT CustomerId AS Id FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId HAVING SUM(Price) > 150",
          "SELECT c.Id FROM customers c JOIN (SELECT r.CustomerId, SUM(g.Price) AS TotalSpent FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId) AS Spending ON c.Id = Spending.CustomerId WHERE Spending.TotalSpent > 150",
          "SELECT DISTINCT c.Id FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150"
        ]
      ]
    },
    {
      "id": 1587,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods GROUP BY Id HAVING AVG(Price) > 5)))",
          "SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5",
          "SELECT c.Id FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT DISTINCT c.Id FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id GROUP BY g.Id HAVING AVG(g.Price) > 5)",
          "SELECT c.Id FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5)"
        ]
      ]
    },
    {
      "id": 1588,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5",
          "SELECT c.Id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods GROUP BY Id HAVING AVG(Price) > 5)))",
          "SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5",
          "SELECT DISTINCT c.Id FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5"
        ]
      ]
    },
    {
      "id": 1589,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id GROUP BY r.Date HAVING sum(g.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt HAVING SUM(Price) > 100)",
          "SELECT receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date HAVING SUM(goods.Price) > 100",
          "SELECT Date FROM (SELECT r.Date, SUM(g.Price) AS TotalSales FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date) WHERE TotalSales > 100",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT DISTINCT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id GROUP BY Receipt HAVING SUM(g.Price) > 100)",
          "SELECT r.Date FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber GROUP BY i.Receipt HAVING SUM(g.Price) > 100)",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100"
        ]
      ]
    },
    {
      "id": 1590,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt HAVING SUM(Price) > 100)",
          "SELECT receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date HAVING SUM(goods.Price) > 100",
          "SELECT Date FROM receipts r INNER JOIN (SELECT Receipt, SUM(Price) AS TotalPrice FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt) AS TotalSales ON r.ReceiptNumber = TotalSales.Receipt WHERE TotalSales.TotalPrice > 100",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT DISTINCT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM (SELECT r.Date, SUM(g.Price) AS TotalSales FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date) AS Sales WHERE Sales.TotalSales > 100",
          "SELECT r.Date FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber GROUP BY i.Receipt HAVING SUM(g.Price) > 100)",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id GROUP BY Receipt HAVING SUM(g.Price) > 100)"
        ]
      ]
    },
    {
      "id": 1591,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver",
          "SELECT COUNT(Driver_ID) FROM driver",
          "SELECT COUNT(*) AS NumberOfDrivers FROM driver",
          "SELECT COUNT(1) FROM driver",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver",
          "SELECT COUNT(Driver_ID) AS TotalDrivers FROM driver",
          "SELECT COUNT(*) FROM `driver`",
          "SELECT COUNT(Driver_ID) FROM `driver`",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID > 0"
        ]
      ]
    },
    {
      "id": 1592,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver",
          "SELECT COUNT(Driver_ID) FROM driver",
          "SELECT COUNT(*) AS TotalDrivers FROM driver",
          "SELECT COUNT(1) FROM driver",
          "SELECT COUNT(Driver_ID) AS DriverCount FROM driver",
          "SELECT COUNT(*) FROM `driver`",
          "SELECT COUNT(Driver_ID) FROM `driver`",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID IS NOT NULL",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID > 0",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID > 0"
        ]
      ]
    },
    {
      "id": 1593,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS NumberOfDrivers FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT COUNT(*), Make FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) AS DriverCount FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(*) FROM driver AS d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT COUNT(Driver_ID), Make FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make HAVING Points > 150",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Make HAVING d.Points > 150"
        ]
      ]
    },
    {
      "id": 1594,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS NumberOfDrivers FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT driver.Make, COUNT(driver.Driver_ID) FROM driver WHERE driver.Points > 150 GROUP BY driver.Make",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(*) AS TotalDrivers FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make HAVING Points > 150",
          "SELECT driver.Make, COUNT(*) FROM driver WHERE driver.Points > 150 GROUP BY driver.Make",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make HAVING SUM(Points) > 150",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d WHERE d.Points > 150 GROUP BY d.Make"
        ]
      ]
    },
    {
      "id": 1595,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make",
          "SELECT d.Make, AVG(d.Age) AS Average_Age FROM driver d GROUP BY d.Make",
          "SELECT Make, AVG(Age) AS AvgAge FROM driver GROUP BY Make",
          "SELECT driver.Make, AVG(driver.Age) FROM driver GROUP BY driver.Make",
          "SELECT `Make`, AVG(`Age`) FROM `driver` GROUP BY `Make`",
          "SELECT Make, AVG(Age) AverageAge FROM driver GROUP BY Make",
          "SELECT d.Make, AVG(d.Age) FROM driver AS d GROUP BY d.Make",
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make ORDER BY Make",
          "SELECT Make, AVG(Age) AS AverageAge FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make HAVING AVG(Age) IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1596,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make",
          "SELECT d.Make, AVG(d.Age) AS Average_Age FROM driver d GROUP BY d.Make",
          "SELECT AVG(Age), Make FROM driver GROUP BY Make",
          "SELECT driver.Make, AVG(driver.Age) FROM driver GROUP BY driver.Make",
          "SELECT Make, AVG(Age) AS Avg_Age FROM driver GROUP BY Make",
          "SELECT AVG(driver.Age) AS AverageAge, driver.Make FROM driver GROUP BY driver.Make",
          "SELECT `Make`, AVG(`Age`) FROM `driver` GROUP BY `Make`",
          "SELECT AVG(Age) Average_Age, Make FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) AverageAge FROM driver GROUP BY Make",
          "SELECT driver.Make, AVG(driver.Age) AS AvgDriverAge FROM driver GROUP BY driver.Make"
        ]
      ]
    },
    {
      "id": 1597,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20",
          "SELECT AVG(driver.Laps) FROM driver WHERE driver.Age < 20",
          "SELECT AVG(Laps) AS AverageLaps FROM driver WHERE Age < 20",
          "SELECT AVG(d.Laps) AS AvgLaps FROM driver AS d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE driver.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 GROUP BY Age",
          "SELECT AVG(Laps) FROM driver GROUP BY Age HAVING Age < 20",
          "SELECT AVG(Laps) FROM driver d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1598,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(Laps) FROM driver WHERE Age < 20",
          "SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 GROUP BY Age",
          "SELECT AVG(Laps) AS AverageLaps FROM driver WHERE Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps IS NOT NULL",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps > 0",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps >= 0",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps <> NULL",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps != NULL",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps > -1"
        ]
      ]
    },
    {
      "id": 1599,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner ASC",
          "SELECT `Manager`, `Sponsor` FROM `team` ORDER BY `Car_Owner` ASC",
          "SELECT Manager AS ManagerName, Sponsor AS SponsorName FROM team ORDER BY Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASCENDING",
          "SELECT team.Manager, team.Sponsor FROM team ORDER BY team.Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner, Team_ID",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner, Team_ID ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC, Team_ID ASC"
        ]
      ]
    },
    {
      "id": 1600,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner",
          "SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner",
          "SELECT Manager AS Team_Manager, Sponsor AS Team_Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT `Manager`, `Sponsor` FROM `team` ORDER BY `Car_Owner` ASC",
          "SELECT team.Manager, team.Sponsor FROM team ORDER BY team.Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASCENDING",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner",
          "SELECT t.Manager, t.Sponsor FROM team AS t ORDER BY t.Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC"
        ]
      ]
    },
    {
      "id": 1601,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(t.Team_ID) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
          "SELECT t.Make FROM team AS t GROUP BY t.Make HAVING COUNT(DISTINCT t.Team_ID) > 1",
          "SELECT Make FROM (SELECT Make, COUNT(*) AS NumTeams FROM team GROUP BY Make) AS subquery WHERE NumTeams > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(DISTINCT Team_ID) > 1",
          "SELECT DISTINCT t1.Make FROM team t1 JOIN team t2 ON t1.Make = t2.Make AND t1.Team_ID != t2.Team_ID",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1 ORDER BY Make",
          "SELECT Make, COUNT(*) AS TeamCount FROM team GROUP BY Make HAVING TeamCount > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1602,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(t.Team_ID) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
          "SELECT `Make` FROM `team` GROUP BY `Make` HAVING COUNT(`Team_ID`) > 1",
          "SELECT team.Make FROM team GROUP BY team.Make HAVING COUNT(team.Team_ID) > 1",
          "SELECT t.Make FROM team AS t GROUP BY t.Make HAVING COUNT(DISTINCT t.Team_ID) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(DISTINCT Team_ID) > 1",
          "SELECT Make, COUNT(*) AS TeamCount FROM team GROUP BY Make HAVING TeamCount > 1",
          "SELECT Make FROM (SELECT Make, COUNT(*) AS NumTeams FROM team GROUP BY Make) AS subquery WHERE NumTeams > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1603,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner LIKE 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'",
          "SELECT `Make` FROM `team` WHERE `Car_Owner` = 'Buddy Arrington'",
          "SELECT DISTINCT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT t.Make FROM team AS t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' AND Make IS NOT NULL",
          "SELECT team.Make FROM team WHERE team.Car_Owner LIKE 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' ORDER BY Make"
        ]
      ]
    },
    {
      "id": 1604,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner LIKE 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'",
          "SELECT `Make` FROM `team` WHERE `Car_Owner` = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = \"Buddy Arrington\"",
          "SELECT team.Make FROM team WHERE team.Car_Owner LIKE 'Buddy Arrington'",
          "SELECT t.Make FROM team AS t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' LIMIT 1",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' AND Car_Owner IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1605,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT max(Points), min(Points) FROM driver",
          "SELECT MAX(Points) AS Maximum_Points, MIN(Points) AS Minimum_Points FROM driver",
          "SELECT MAX(driver.Points), MIN(driver.Points) FROM driver",
          "SELECT maximum(Points), minimum(Points) FROM driver",
          "SELECT MAX(Points) maximum, MIN(Points) minimum FROM driver",
          "SELECT MAX(`Points`), MIN(`Points`) FROM `driver`",
          "SELECT MAX(Points) MaxPoints, MIN(Points) MinPoints FROM driver",
          "SELECT MAX(Points) as Max_Points, MIN(Points) as Min_Points FROM driver",
          "SELECT MAX(Points) Highest_Points, MIN(Points) Lowest_Points FROM driver",
          "SELECT MAX(Points) MaxDriverPoints, MIN(Points) MinDriverPoints FROM driver"
        ]
      ]
    },
    {
      "id": 1606,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(Points), MIN(Points) FROM driver",
          "SELECT MAX(d.Points) AS HighestPoints, MIN(d.Points) AS LowestPoints FROM driver d",
          "SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver",
          "SELECT MAX(Points) max_points, MIN(Points) min_points FROM driver",
          "SELECT MAX(driver.Points), MIN(driver.Points) FROM driver",
          "SELECT MAX(Points) highest, MIN(Points) lowest FROM driver",
          "SELECT (SELECT MAX(Points) FROM driver) AS MaxPoints, (SELECT MIN(Points) FROM driver) AS MinPoints",
          "SELECT MAX(Points) FROM driver UNION SELECT MIN(Points) FROM driver",
          "SELECT MAX(Points) 'Maximum Points', MIN(Points) 'Minimum Points' FROM driver",
          "SELECT MAX(Points) maxP, MIN(Points) minP FROM driver"
        ]
      ]
    },
    {
      "id": 1607,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(1) FROM driver WHERE Points < 150",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Points < 150",
          "SELECT count(*) FROM driver WHERE Points < 150.0",
          "SELECT COUNT(*) FROM driver AS drv WHERE drv.Points < 150",
          "SELECT COUNT(*) FROM `driver` WHERE `Points` < 150",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points < '150'"
        ]
      ]
    },
    {
      "id": 1608,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT count(*) FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points < 150.0",
          "SELECT count(Driver_ID) FROM driver WHERE Points < '150'",
          "SELECT COUNT(*) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(1) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points < 150 AND Driver_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver WHERE CAST(Points AS INTEGER) < 150",
          "SELECT COUNT(*) FROM driver WHERE Points < 150 AND Driver_ID > 0"
        ]
      ]
    },
    {
      "id": 1609,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Age ASC",
          "SELECT d.Driver FROM driver d ORDER BY d.Age ASC",
          "SELECT `Driver` FROM `driver` ORDER BY `Age` ASC",
          "SELECT Driver FROM driver ORDER BY Age",
          "SELECT driver.Driver FROM driver ORDER BY driver.Age ASC",
          "SELECT Driver FROM driver ORDER BY Age ASCENDING",
          "SELECT d.Driver FROM driver AS d ORDER BY d.Age ASC",
          "SELECT Driver FROM driver ORDER BY driver.Age ASC",
          "SELECT Driver FROM driver ORDER BY Age ASC, Driver_ID ASC",
          "SELECT Driver FROM driver ORDER BY Age ASC, Driver ASC"
        ]
      ]
    },
    {
      "id": 1610,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Age ASC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Age ASC",
          "SELECT D.Driver FROM driver D ORDER BY D.Age ASC",
          "SELECT `Driver` FROM `driver` ORDER BY `Age` ASC",
          "SELECT Driver FROM driver ORDER BY Age",
          "SELECT driver.Driver FROM driver ORDER BY Age",
          "SELECT D.Driver FROM driver AS D ORDER BY D.Age ASC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Age",
          "SELECT `Driver` FROM `driver` ORDER BY `Age`",
          "SELECT Driver FROM driver ORDER BY Age ASCENDING"
        ]
      ]
    },
    {
      "id": 1611,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Points DESC",
          "SELECT d.Driver FROM driver d ORDER BY d.Points DESC",
          "SELECT `Driver` FROM `driver` ORDER BY `Points` DESC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Points DESC",
          "SELECT D.Driver FROM driver AS D ORDER BY D.Points DESC",
          "SELECT driver.Driver FROM driver ORDER BY Points DESCENDING",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver_ID ASC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Points DESC, driver.Driver_ID ASC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver ASC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver_ID DESC"
        ]
      ]
    },
    {
      "id": 1612,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Points DESC",
          "SELECT d.Driver FROM driver d ORDER BY d.Points DESC",
          "SELECT `Driver` FROM `driver` ORDER BY `Points` DESC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESCENDING",
          "SELECT d.Driver FROM driver AS d ORDER BY d.Points DESC",
          "SELECT Driver FROM driver ORDER BY driver.Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver_ID ASC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver ASC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver_ID DESC"
        ]
      ]
    },
    {
      "id": 1613,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT d.Driver, c.Country FROM driver AS d JOIN country AS c ON d.Country = c.Country_Id",
          "SELECT driver.Driver, country.Country FROM driver INNER JOIN country ON driver.Country = country.Country_Id",
          "SELECT D.Driver, C.Country FROM driver D, country C WHERE D.Country = C.Country_Id",
          "SELECT `Driver`, `Country` FROM driver JOIN country ON driver.Country = country.Country_Id",
          "SELECT driver.Driver AS DriverName, country.Country AS CountryName FROM driver, country WHERE driver.Country = country.Country_Id",
          "SELECT d.Driver, c.Country FROM driver d INNER JOIN country c ON d.Country = c.Country_Id",
          "SELECT Driver.Driver, Country.Country FROM Driver JOIN Country ON Driver.Country = Country.Country_Id",
          "SELECT d.Driver, c.Country FROM driver d, country c WHERE d.Country = c.Country_Id",
          "SELECT `driver`.`Driver`, `country`.`Country` FROM `driver` INNER JOIN `country` ON `driver`.`Country` = `country`.`Country_Id`",
          "SELECT Driver, Country FROM driver JOIN country ON driver.Country = country.Country_Id"
        ]
      ]
    },
    {
      "id": 1614,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT D.Driver, C.Country FROM driver AS D JOIN country AS C ON D.Country = C.Country_Id",
          "SELECT driver.Driver, country.Country FROM driver INNER JOIN country ON driver.Country = country.Country_Id",
          "SELECT D.Driver, C.Country FROM driver D, country C WHERE D.Country = C.Country_Id",
          "SELECT driver.Driver AS DriverName, country.Country AS CountryName FROM driver, country WHERE driver.Country = country.Country_Id",
          "SELECT `Driver`, `Country` FROM driver JOIN country ON driver.Country = country.Country_Id",
          "SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id",
          "SELECT D.Driver, C.Country FROM driver D INNER JOIN country C ON D.Country = C.Country_Id",
          "SELECT `Driver`, `Country` FROM driver, country WHERE driver.Country = country.Country_Id",
          "SELECT driver.Driver, country.Country FROM driver, country WHERE driver.Country = country.Country_Id",
          "SELECT D.Driver AS DriverName, C.Country AS CountryName FROM driver D JOIN country C ON D.Country = C.Country_Id"
        ]
      ]
    },
    {
      "id": 1615,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(driver.Points) FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(d.Points) FROM driver AS d INNER JOIN country AS c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d JOIN country c ON d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(d.Points) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')"
        ]
      ]
    },
    {
      "id": 1616,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT max(d.Points) FROM driver AS d JOIN country AS c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT max(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT max(d.Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(d.Points) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(d.Points) FROM driver AS d INNER JOIN country AS c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1617,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English')",
          "SELECT AVG(driver.Age) AS AverageAge FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'",
          "SELECT AVG(d.Age) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver AS d JOIN country AS c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(d.Age) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'"
        ]
      ]
    },
    {
      "id": 1618,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English')",
          "SELECT AVG(driver.Age) AS Average_Age FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'",
          "SELECT AVG(d.Age) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English')",
          "SELECT AVG(d.Age) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver AS d JOIN country AS c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'"
        ]
      ]
    },
    {
      "id": 1619,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Country FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Points > 150",
          "SELECT C.Country FROM country C, driver D WHERE C.Country_Id = D.Country AND D.Points > 150",
          "SELECT DISTINCT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150",
          "SELECT country.Country FROM country, driver WHERE country.Country_Id = driver.Country AND driver.Points > 150 GROUP BY country.Country",
          "SELECT DISTINCT C.Country FROM country AS C INNER JOIN driver AS D ON C.Country_Id = D.Country WHERE D.Points > 150",
          "SELECT C.Country FROM country AS C, driver AS D WHERE C.Country_Id = D.Country AND D.Points > 150",
          "SELECT DISTINCT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country AND driver.Points > 150",
          "SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150",
          "SELECT DISTINCT C.Country FROM country C JOIN driver D ON C.Country_Id = D.Country AND D.Points > 150",
          "SELECT C.Country FROM country C INNER JOIN driver D ON C.Country_Id = D.Country WHERE D.Points > 150"
        ]
      ]
    },
    {
      "id": 1620,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Country FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Points > 150",
          "SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150",
          "SELECT DISTINCT country.Country FROM country, driver WHERE country.Country_Id = driver.Country AND driver.Points > 150",
          "SELECT C.Country FROM country AS C, driver AS D WHERE C.Country_Id = D.Country AND D.Points > 150 GROUP BY C.Country",
          "SELECT DISTINCT C.Country FROM country C, driver D WHERE C.Country_Id = D.Country AND D.Points > 150",
          "SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country AND driver.Points > 150",
          "SELECT DISTINCT C.Country FROM country C INNER JOIN driver D ON C.Country_Id = D.Country AND D.Points > 150",
          "SELECT C.Country FROM country C WHERE EXISTS (SELECT 1 FROM driver D WHERE D.Country = C.Country_Id AND D.Points > 150)",
          "SELECT DISTINCT C.Country FROM country C WHERE C.Country_Id IN (SELECT D.Country FROM driver D WHERE D.Points > 150)",
          "SELECT DISTINCT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country AND driver.Points > 150"
        ]
      ]
    },
    {
      "id": 1621,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT country.Capital FROM country INNER JOIN driver ON country.Country_Id = driver.Country ORDER BY driver.Points DESC FETCH FIRST 1 ROW ONLY",
          "SELECT (SELECT Capital FROM country WHERE Country_Id = driver.Country) AS Capital FROM driver ORDER BY Points DESC LIMIT 1",
          "SELECT c.Capital FROM country AS c, driver AS d WHERE c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1",
          "SELECT Capital FROM country WHERE Country_Id IN (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT country.Capital FROM country, driver WHERE country.Country_Id = driver.Country ORDER BY driver.Points DESC LIMIT 1",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM (SELECT Country FROM driver ORDER BY Points DESC) AS subquery LIMIT 1)",
          "SELECT c.Capital FROM country c JOIN (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1) d ON c.Country_Id = d.Country",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1622,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT country.Capital FROM country INNER JOIN driver ON country.Country_Id = driver.Country ORDER BY driver.Points DESC LIMIT 1",
          "SELECT c.Capital FROM country AS c, driver AS d WHERE c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1",
          "SELECT Capital FROM country WHERE Country_Id IN (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT (SELECT Capital FROM country WHERE Country_Id = d.Country) FROM driver d ORDER BY d.Points DESC LIMIT 1",
          "SELECT c.Capital FROM country c WHERE c.Country_Id = (SELECT Country FROM driver ORDER BY Points DESC FETCH FIRST ROW ONLY)",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country ORDER BY d.Points DESC FETCH FIRST ROW ONLY",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT d.Country FROM driver d ORDER BY d.Points DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1623,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Make",
          "SELECT driver.Make, COUNT(*) AS DriverCount FROM driver GROUP BY driver.Make",
          "SELECT d.Make, COUNT(*) FROM driver AS d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make",
          "SELECT driver.Make, COUNT(driver.Driver_ID) FROM driver GROUP BY driver.Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS TotalDrivers FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(*) AS TotalDrivers FROM driver GROUP BY Make",
          "SELECT driver.Make, COUNT(*) FROM driver GROUP BY driver.Make"
        ]
      ]
    },
    {
      "id": 1624,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make",
          "SELECT driver.Make, COUNT(*) AS NumberOfDrivers FROM driver GROUP BY driver.Make",
          "SELECT `Make`, COUNT(`Driver_ID`) FROM `driver` GROUP BY `Make`",
          "SELECT d.Make, COUNT(*) FROM driver AS d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make",
          "SELECT driver.Make, COUNT(driver.Driver_ID) FROM driver GROUP BY driver.Make",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make ORDER BY Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make HAVING COUNT(Driver_ID) > 0"
        ]
      ]
    },
    {
      "id": 1625,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT d.Make FROM driver d GROUP BY d.Make ORDER BY COUNT(DISTINCT d.Driver_ID) DESC LIMIT 1",
          "SELECT Make FROM (SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make) AS MakeCounts ORDER BY MakeCounts.DriverCount DESC LIMIT 1",
          "SELECT d.Make FROM driver d INNER JOIN team_driver td ON d.Driver_ID = td.Driver_ID GROUP BY d.Make ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1",
          "SELECT d.Make, COUNT(*) AS TotalDrivers FROM driver d GROUP BY d.Make ORDER BY TotalDrivers DESC LIMIT 1",
          "SELECT TOP 1 Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(*) AS DriverCount FROM driver GROUP BY Make) AS Counts)",
          "SELECT d.Make FROM driver d JOIN team_driver td ON d.Driver_ID = td.Driver_ID GROUP BY d.Make ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Make, COUNT(*) AS NumDrivers FROM driver GROUP BY Make ORDER BY NumDrivers DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1626,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT d.Make FROM driver d GROUP BY d.Make ORDER BY COUNT(d.Driver_ID) DESC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1",
          "SELECT d.Make, COUNT(*) AS DriverCount FROM driver d GROUP BY d.Make ORDER BY DriverCount DESC LIMIT 1",
          "SELECT Make, COUNT(Driver_ID) AS TotalDrivers FROM driver GROUP BY Make ORDER BY TotalDrivers DESC LIMIT 1",
          "SELECT Make FROM (SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make) AS subquery ORDER BY num_drivers DESC LIMIT 1",
          "SELECT TOP 1 Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM driver GROUP BY Make) tmp)",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1627,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3",
          "SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3",
          "SELECT d.Make FROM driver AS d GROUP BY d.Make HAVING COUNT(*) >= 3",
          "SELECT driver.Make FROM driver GROUP BY driver.Make HAVING COUNT(driver.Driver_ID) >= 3",
          "SELECT Make FROM (SELECT Make FROM driver) AS DerivedTable GROUP BY Make HAVING COUNT(*) >= 3",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3",
          "SELECT d.Make FROM driver d WHERE d.Make IS NOT NULL GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3",
          "SELECT DISTINCT d.Make FROM driver d JOIN (SELECT Make, COUNT(*) AS Cnt FROM driver GROUP BY Make) t ON d.Make = t.Make WHERE t.Cnt >= 3",
          "SELECT Make FROM driver WHERE Make IN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3)"
        ]
      ]
    },
    {
      "id": 1628,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3",
          "SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) >= 3",
          "SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(*) >= 3",
          "SELECT Make FROM (SELECT Make, COUNT(Driver_ID) AS NumDrivers FROM driver GROUP BY Make) WHERE NumDrivers >= 3",
          "SELECT d.Make FROM (SELECT Make, COUNT(Driver_ID) AS NumDrivers FROM driver GROUP BY Make) d WHERE d.NumDrivers >= 3",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3",
          "SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3",
          "SELECT Make FROM (SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3) AS SubQuery",
          "SELECT d.Make FROM (SELECT Make, COUNT(*) AS DriverCount FROM driver GROUP BY Make) d WHERE d.DriverCount >= 3"
        ]
      ]
    },
    {
      "id": 1629,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT T.Team FROM team T LEFT JOIN team_driver TD ON T.Team_ID = TD.Team_ID WHERE TD.Driver_ID IS NULL",
          "SELECT Team FROM team WHERE NOT EXISTS (SELECT 1 FROM team_driver WHERE team.Team_ID = team_driver.Team_ID)",
          "SELECT T.Team FROM team T WHERE T.Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT Team FROM team EXCEPT SELECT Team FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID",
          "SELECT DISTINCT Team FROM team WHERE Team_ID NOT IN (SELECT DISTINCT Team_ID FROM team_driver)",
          "SELECT Team FROM team t WHERE NOT EXISTS (SELECT NULL FROM team_driver td WHERE t.Team_ID = td.Team_ID)",
          "SELECT T.Team FROM team T WHERE NOT EXISTS (SELECT * FROM team_driver TD WHERE T.Team_ID = TD.Team_ID)",
          "SELECT Team FROM team t1 WHERE t1.Team_ID NOT IN (SELECT t2.Team_ID FROM team_driver t2)",
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT DISTINCT Team_ID FROM team_driver)"
        ]
      ]
    },
    {
      "id": 1630,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT T.Team FROM team T LEFT JOIN team_driver TD ON T.Team_ID = TD.Team_ID WHERE TD.Driver_ID IS NULL",
          "SELECT T.Team FROM team T WHERE NOT EXISTS (SELECT 1 FROM team_driver TD WHERE TD.Team_ID = T.Team_ID)",
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT DISTINCT Team_ID FROM team_driver)",
          "SELECT T.Team FROM team AS T WHERE T.Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT Team FROM team EXCEPT SELECT Team FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID",
          "SELECT Team FROM team T WHERE NOT EXISTS (SELECT NULL FROM team_driver TD WHERE TD.Team_ID = T.Team_ID)",
          "SELECT DISTINCT T.Team FROM team T LEFT OUTER JOIN team_driver TD ON T.Team_ID = TD.Team_ID WHERE TD.Driver_ID IS NULL",
          "SELECT T.Team FROM team T WHERE T.Team_ID NOT IN (SELECT TD.Team_ID FROM team_driver TD)",
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver WHERE Driver_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1631,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' INTERSECT SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Chevrolet'",
          "SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Make = 'Dodge' INTERSECT SELECT country.Country FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Make = 'Chevrolet'",
          "SELECT DISTINCT c1.Country FROM country c1, driver d1 WHERE c1.Country_Id = d1.Country AND d1.Make = 'Dodge' INTERSECT SELECT DISTINCT c2.Country FROM country c2, driver d2 WHERE c2.Country_Id = d2.Country AND d2.Make = 'Chevrolet'",
          "SELECT c.Country FROM country c, driver d WHERE c.Country_Id = d.Country AND d.Make IN ('Dodge', 'Chevrolet') GROUP BY c.Country HAVING COUNT(DISTINCT d.Make) = 2",
          "SELECT Country FROM (SELECT Country FROM country JOIN driver ON Country_Id = Country WHERE Make = 'Dodge') AS DodgeDrivers INTERSECT SELECT Country FROM (SELECT Country FROM country JOIN driver ON Country_Id = Country WHERE Make = 'Chevrolet') AS ChevroletDrivers",
          "SELECT c.Country FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Dodge') AND EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Chevrolet')",
          "SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' AND c.Country_Id IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT c.Country FROM country c WHERE c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Dodge') AND c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Chevrolet')",
          "SELECT Country FROM country WHERE Country_Id IN (SELECT Country FROM driver WHERE Make = 'Dodge') INTERSECT SELECT Country FROM country WHERE Country_Id IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country AND d.Make = 'Dodge' JOIN driver d2 ON c.Country_Id = d2.Country AND d2.Make = 'Chevrolet'"
        ]
      ]
    },
    {
      "id": 1632,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' INTERSECT SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Chevrolet'",
          "SELECT c.Country FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Dodge') AND EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Chevrolet')",
          "SELECT Country FROM country WHERE Country_Id IN (SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT DISTINCT c.Country FROM country c, driver d WHERE c.Country_Id = d.Country AND d.Make IN ('Dodge', 'Chevrolet') GROUP BY c.Country HAVING COUNT(DISTINCT d.Make) = 2",
          "SELECT DISTINCT c.Country FROM country c INNER JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' INTERSECT SELECT DISTINCT c.Country FROM country c INNER JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Chevrolet'",
          "SELECT c.Country FROM country c WHERE c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Dodge') AND c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Chevrolet')",
          "SELECT DISTINCT c.Country FROM country c WHERE EXISTS (SELECT * FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Dodge') INTERSECT SELECT DISTINCT c.Country FROM country c WHERE EXISTS (SELECT * FROM driver d WHERE d.Country = c.Country_Id AND d.Make = 'Chevrolet')",
          "SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country AND d.Make = 'Dodge' JOIN driver d2 ON c.Country_Id = d2.Country AND d2.Make = 'Chevrolet'",
          "SELECT DISTINCT c.Country FROM country c WHERE c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Dodge' INTERSECT SELECT d.Country FROM driver d WHERE d.Make = 'Chevrolet')",
          "SELECT DISTINCT c.Country FROM country c WHERE (SELECT COUNT(DISTINCT d.Make) FROM driver d WHERE d.Country = c.Country_Id AND d.Make IN ('Dodge', 'Chevrolet')) = 2"
        ]
      ]
    },
    {
      "id": 1633,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT SUM(Points), AVG(Points) FROM driver",
          "SELECT SUM(d.Points) AS Total_Points, AVG(d.Points) AS Average_Points FROM driver d",
          "SELECT SUM(Points) TotalPoints, AVG(Points) AveragePoints FROM driver",
          "SELECT SUM(driver.Points) Total, AVG(driver.Points) Average FROM driver",
          "SELECT SUM(Points) as TotalPoints, AVG(Points) as AvgPoints FROM driver",
          "SELECT total(Points), avg(Points) FROM driver",
          "SELECT SUM(Points) Total_Points, AVG(Points) Avg_Points FROM driver",
          "SELECT SUM(Points) as TotalPoints, AVG(Points) as AveragePoints FROM driver",
          "SELECT SUM(Points) 'Total Points', AVG(Points) 'Average Points' FROM driver",
          "SELECT SUM(Points) TotalPointsSum, AVG(Points) AveragePoints FROM driver"
        ]
      ]
    },
    {
      "id": 1634,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT SUM(Points), AVG(Points) FROM driver",
          "SELECT AVG(Points) AS AveragePoints, SUM(Points) AS TotalPoints FROM driver",
          "SELECT SUM(d.Points), AVG(d.Points) FROM driver d",
          "SELECT AVG(Points) average_points, SUM(Points) total_points FROM driver",
          "SELECT SUM(driver.Points), AVG(driver.Points) FROM driver",
          "SELECT AVG(driver.Points) as AvgPoints, SUM(driver.Points) as SumPoints FROM driver",
          "SELECT AVG(Points) as AveragePoints, SUM(Points) as TotalPoints FROM driver",
          "SELECT SUM(Points) TotalPoints, AVG(Points) AveragePoints FROM driver",
          "SELECT AVG(Points) Average_Points, SUM(Points) Total_Points FROM driver",
          "SELECT SUM(Points) as TotalPoints, AVG(Points) as AveragePoints FROM driver"
        ]
      ]
    },
    {
      "id": 1635,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)",
          "SELECT Country FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Country_Id)",
          "SELECT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Driver_ID IS NULL",
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT DISTINCT Country FROM driver)",
          "SELECT c.Country FROM country c WHERE c.Country_Id NOT IN (SELECT d.Country FROM driver d)",
          "SELECT Country FROM country c WHERE NOT EXISTS (SELECT NULL FROM driver d WHERE d.Country = c.Country_Id)",
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver GROUP BY Country)",
          "SELECT c.Country FROM country c WHERE c.Country_Id NOT IN (SELECT Country FROM driver d WHERE d.Country IS NOT NULL)",
          "SELECT Country FROM country AS c WHERE NOT EXISTS (SELECT * FROM driver AS d WHERE d.Country = c.Country_Id)",
          "SELECT c.Country FROM country c LEFT OUTER JOIN driver d ON c.Country_Id = d.Country WHERE d.Country IS NULL"
        ]
      ]
    },
    {
      "id": 1636,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)",
          "SELECT Country FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Country_Id)",
          "SELECT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Driver_ID IS NULL",
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT DISTINCT Country FROM driver)",
          "SELECT c.Country FROM country c WHERE NOT EXISTS (SELECT NULL FROM driver d WHERE d.Country = c.Country_Id)",
          "SELECT Country FROM country c WHERE c.Country_Id NOT IN (SELECT Country FROM driver d)",
          "SELECT c.Country FROM country c WHERE c.Country_Id NOT IN (SELECT d.Country FROM driver d)",
          "SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver GROUP BY Country)",
          "SELECT c.Country FROM country c LEFT OUTER JOIN driver d ON c.Country_Id = d.Country WHERE d.Country IS NULL",
          "SELECT Country FROM country EXCEPT SELECT Country FROM country JOIN driver ON country.Country_Id = driver.Country"
        ]
      ]
    },
    {
      "id": 1637,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT T.manager, T.sponsor FROM team T JOIN team_driver TD ON T.Team_ID = TD.Team_ID GROUP BY T.Team_ID ORDER BY COUNT(TD.Driver_ID) DESC LIMIT 1",
          "SELECT manager, sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT manager, sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT (SELECT manager FROM team WHERE Team_ID = TD.Team_ID) AS manager, (SELECT sponsor FROM team WHERE Team_ID = TD.Team_ID) AS sponsor FROM team_driver TD GROUP BY TD.Team_ID ORDER BY COUNT(TD.Driver_ID) DESC LIMIT 1",
          "SELECT manager, sponsor FROM team INNER JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1) AS MostDrivers ON team.Team_ID = MostDrivers.Team_ID",
          "SELECT team.manager, team.sponsor FROM team, team_driver WHERE team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID) AS Counts)",
          "SELECT T.manager, T.sponsor FROM team AS T WHERE T.Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = MAX(COUNT(Driver_ID)))",
          "SELECT manager, sponsor FROM team WHERE Team_ID = (SELECT TOP 1 Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC)",
          "SELECT manager, sponsor FROM team JOIN (SELECT Team_ID, COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID ORDER BY DriverCount DESC LIMIT 1) AS MostDrivers ON team.Team_ID = MostDrivers.Team_ID",
          "SELECT T.manager, T.sponsor FROM team T JOIN (SELECT Team_ID, COUNT(*) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1) TD ON T.Team_ID = TD.Team_ID"
        ]
      ]
    },
    {
      "id": 1638,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT T.Manager, T.Sponsor FROM team AS T JOIN team_driver AS TD ON T.Team_ID = TD.Team_ID GROUP BY T.Team_ID ORDER BY COUNT(TD.Driver_ID) DESC LIMIT 1",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT team.Manager, team.Sponsor FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID ORDER BY COUNT(team_driver.Driver_ID) DESC LIMIT 1",
          "SELECT Manager, Sponsor FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Driver_ID) AS Cnt FROM team_driver GROUP BY Team_ID) tmp)",
          "SELECT t.Manager, t.Sponsor FROM team t JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(*) DESC LIMIT 1) td ON t.Team_ID = td.Team_ID",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT t.Manager, t.Sponsor FROM team t, team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY t.Team_ID ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM (SELECT Team_ID, COUNT(Driver_ID) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1) AS subquery)",
          "SELECT Manager, Sponsor FROM team JOIN (SELECT Team_ID, COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID ORDER BY DriverCount DESC LIMIT 1) AS MostDrivers ON team.Team_ID = MostDrivers.Team_ID",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID) AS Counts))"
        ]
      ]
    },
    {
      "id": 1639,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT T.manager, T.car_owner FROM team T JOIN team_driver TD ON T.Team_ID = TD.Team_ID GROUP BY T.Team_ID HAVING COUNT(TD.Driver_ID) >= 2",
          "SELECT manager, car_owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT team.manager, team.car_owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) >= 2",
          "SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2",
          "SELECT manager, car_owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2)",
          "SELECT t.manager, t.car_owner FROM team t, team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2",
          "SELECT manager, car_owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2",
          "SELECT t.manager, t.car_owner FROM team t WHERE EXISTS (SELECT NULL FROM team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) >= 2)",
          "SELECT t.manager, t.car_owner FROM team t WHERE t.Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT manager, car_owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) >= 2)"
        ]
      ]
    },
    {
      "id": 1640,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT t.Manager, t.Car_Owner FROM team AS t JOIN team_driver AS td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) > 1)",
          "SELECT Manager, Car_Owner FROM team t INNER JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2) AS sub ON t.Team_ID = sub.Team_ID",
          "SELECT t.Manager, t.Car_Owner FROM team t, team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2)",
          "SELECT t.Manager, t.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) > 1",
          "SELECT Manager, Car_Owner FROM team t WHERE EXISTS (SELECT NULL FROM team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) > 1)",
          "SELECT t.Manager, t.Car_Owner FROM team t WHERE t.Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) > 1)",
          "SELECT Manager, Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) > 1",
          "SELECT t.Manager, t.Car_Owner FROM team t INNER JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1641,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT count(*) FROM institution",
          "SELECT COUNT(Institution_ID) FROM institution",
          "SELECT COUNT(*) AS TotalInstitutions FROM institution",
          "SELECT COUNT(1) FROM institution",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution",
          "SELECT COUNT(*) FROM `institution`",
          "SELECT COUNT(*) FROM (SELECT * FROM institution) AS Temp",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT COUNT(*) FROM institution WHERE 1=1",
          "SELECT COUNT(*) FROM institution GROUP BY 'all'"
        ]
      ]
    },
    {
      "id": 1642,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT count(*) FROM institution",
          "SELECT COUNT(Institution_ID) FROM institution",
          "SELECT COUNT(1) FROM institution",
          "SELECT COUNT(*) AS TotalInstitutions FROM institution",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution",
          "SELECT COUNT(*) FROM `institution`",
          "SELECT COUNT(*) FROM (SELECT * FROM institution) AS Temp",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT COUNT(*) FROM institution WHERE 1=1",
          "SELECT COUNT(*) FROM institution GROUP BY Province"
        ]
      ]
    },
    {
      "id": 1643,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Name ASC",
          "SELECT Name FROM institution ORDER BY Name",
          "SELECT institution.Name FROM institution ORDER BY institution.Name ASC",
          "SELECT `Name` FROM `institution` ORDER BY `Name` ASC",
          "SELECT Name FROM institution ORDER BY Name ASCENDING",
          "SELECT institution.Name FROM institution ORDER BY Name",
          "SELECT Name FROM `institution` ORDER BY `Name`",
          "SELECT Name FROM institution ORDER BY Name ASC;",
          "SELECT Name FROM institution ORDER BY institution.Name ASC",
          "SELECT Name FROM institution ORDER BY Name ASCENDING;"
        ]
      ]
    },
    {
      "id": 1644,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Name ASC",
          "SELECT Name FROM institution ORDER BY Name",
          "SELECT institution.Name FROM institution ORDER BY institution.Name ASC",
          "SELECT `Name` FROM `institution` ORDER BY `Name` ASC",
          "SELECT Name FROM institution ORDER BY Name COLLATE NOCASE ASC",
          "SELECT institution.Name FROM institution ORDER BY Name",
          "SELECT Name AS InstitutionName FROM institution ORDER BY InstitutionName ASC",
          "SELECT Name FROM institution ORDER BY UPPER(Name)",
          "SELECT Name FROM institution ORDER BY LOWER(Name) ASC",
          "SELECT DISTINCT Name FROM institution ORDER BY Name ASC"
        ]
      ]
    },
    {
      "id": 1645,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Founded ASC",
          "SELECT Name FROM institution ORDER BY Founded",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded ASC",
          "SELECT `Name` FROM `institution` ORDER BY `Founded` ASC",
          "SELECT Name FROM institution ORDER BY Founded ASCENDING",
          "SELECT Name FROM institution ORDER BY institution.Founded",
          "SELECT Name FROM institution ORDER BY Founded ASC, Institution_ID ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Name ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Capacity ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Enrollment ASC"
        ]
      ]
    },
    {
      "id": 1646,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Founded ASC",
          "SELECT Name FROM institution ORDER BY Founded",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded ASC",
          "SELECT `Name` FROM `institution` ORDER BY `Founded` ASC",
          "SELECT Name FROM institution ORDER BY Founded ASCENDING",
          "SELECT Name FROM institution ORDER BY institution.Founded",
          "SELECT Name FROM institution ORDER BY Founded ASC, Institution_ID ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Name ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Capacity DESC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Enrollment DESC"
        ]
      ]
    },
    {
      "id": 1647,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution",
          "SELECT `City`, `Province` FROM `institution`",
          "SELECT City AS CityName, Province AS ProvinceName FROM institution",
          "SELECT i.City, i.Province FROM institution i",
          "SELECT City, Province FROM institution ORDER BY City",
          "SELECT DISTINCT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution WHERE City IS NOT NULL",
          "SELECT * FROM institution WHERE City IS NOT NULL AND Province IS NOT NULL",
          "SELECT City, Province FROM institution GROUP BY City, Province"
        ]
      ]
    },
    {
      "id": 1648,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution",
          "SELECT `City`, `Province` FROM `institution`",
          "SELECT City AS CityName, Province AS ProvinceName FROM institution",
          "SELECT i.City, i.Province FROM institution i",
          "SELECT City, Province FROM institution ORDER BY City",
          "SELECT DISTINCT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution ORDER BY Province",
          "SELECT * FROM institution WHERE City IS NOT NULL AND Province IS NOT NULL",
          "SELECT City, Province FROM institution WHERE City <> '' AND Province <> ''"
        ]
      ]
    },
    {
      "id": 1649,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT max(Enrollment), min(Enrollment) FROM institution",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM institution",
          "SELECT MAX(`Enrollment`), MIN(`Enrollment`) FROM `institution`",
          "SELECT MAX(institution.Enrollment), MIN(institution.Enrollment) FROM institution",
          "SELECT (SELECT MAX(Enrollment) FROM institution) AS MaxEnrollment, (SELECT MIN(Enrollment) FROM institution) AS MinEnrollment",
          "SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution",
          "SELECT MAX(Enrollment) max_enrollment, MIN(Enrollment) min_enrollment FROM institution",
          "SELECT institution.Enrollment FROM institution ORDER BY Enrollment DESC LIMIT 1, SELECT institution.Enrollment FROM institution ORDER BY Enrollment ASC LIMIT 1",
          "SELECT TOP 1 Enrollment AS MaxEnrollment FROM institution ORDER BY Enrollment DESC, TOP 1 Enrollment AS MinEnrollment FROM institution ORDER BY Enrollment ASC",
          "SELECT GREATEST(Enrollment) AS MaxEnrollment, LEAST(Enrollment) AS MinEnrollment FROM institution"
        ]
      ]
    },
    {
      "id": 1650,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT max(Enrollment), min(Enrollment) FROM institution",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM institution",
          "SELECT MAX(`Enrollment`), MIN(`Enrollment`) FROM `institution`",
          "SELECT MAX(institution.Enrollment), MIN(institution.Enrollment) FROM institution",
          "SELECT (SELECT MAX(Enrollment) FROM institution) AS MaxEnrollment, (SELECT MIN(Enrollment) FROM institution) AS MinEnrollment",
          "SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution",
          "SELECT MAX(Enrollment) max_enrollment, MIN(Enrollment) min_enrollment FROM institution",
          "SELECT institution.Enrollment FROM institution ORDER BY Enrollment DESC LIMIT 1, SELECT institution.Enrollment FROM institution ORDER BY Enrollment ASC LIMIT 1",
          "SELECT TOP 1 Enrollment AS MaxEnrollment FROM institution ORDER BY Enrollment DESC, TOP 1 Enrollment AS MinEnrollment FROM institution ORDER BY Enrollment ASC",
          "SELECT MAX(Enrollment) AS HighestEnrollment, MIN(Enrollment) AS LowestEnrollment FROM institution"
        ]
      ]
    },
    {
      "id": 1651,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution WHERE City != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT City = 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City <> 'Vancouver'",
          "SELECT i.Affiliation FROM institution AS i WHERE i.City != 'Vancouver'",
          "SELECT DISTINCT Affiliation FROM institution WHERE City != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')",
          "SELECT Affiliation FROM institution WHERE City NOT LIKE 'Vancouver'",
          "SELECT i.Affiliation FROM institution i WHERE i.City <> 'Vancouver'",
          "SELECT DISTINCT i.Affiliation FROM institution i WHERE i.City != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT (City = 'Vancouver')"
        ]
      ]
    },
    {
      "id": 1652,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution WHERE City != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT City = 'Vancouver'",
          "SELECT i.Affiliation FROM institution i WHERE i.City <> 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')",
          "SELECT Affiliation FROM institution WHERE City NOT LIKE 'Vancouver'",
          "SELECT `Affiliation` FROM `institution` WHERE `City` != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City IS NOT 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT (City = 'Vancouver')",
          "SELECT Affiliation FROM institution WHERE City != 'Vancouver' AND City IS NOT NULL",
          "SELECT Affiliation FROM institution WHERE City <> 'Vancouver' AND City IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1653,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Capacity DESC",
          "SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `Capacity` DESC",
          "SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC;",
          "SELECT Stadium AS Venue FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY institution.Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `institution`.`Capacity` DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC LIMIT 100",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC, Name ASC"
        ]
      ]
    },
    {
      "id": 1654,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Capacity DESC",
          "SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `Capacity` DESC",
          "SELECT i.Stadium FROM institution AS i ORDER BY i.Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESCENDING",
          "SELECT Stadium AS Venue FROM institution ORDER BY Capacity DESC",
          "SELECT institution.Stadium FROM institution ORDER BY Capacity DESCENDING",
          "SELECT Stadium FROM institution ORDER BY institution.Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `Capacity` DESCENDING",
          "SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC"
        ]
      ]
    },
    {
      "id": 1655,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
          "SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1",
          "SELECT `Stadium` FROM `institution` ORDER BY `Enrollment` DESC LIMIT 1",
          "SELECT TOP 1 Stadium FROM institution ORDER BY Enrollment DESC",
          "SELECT institution.Stadium FROM institution ORDER BY institution.Enrollment DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT i.Stadium FROM institution AS i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT Stadium FROM (SELECT Stadium, Enrollment FROM institution ORDER BY Enrollment DESC) WHERE ROWNUM = 1",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC FETCH FIRST ROW ONLY",
          "SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)"
        ]
      ]
    },
    {
      "id": 1656,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
          "SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1",
          "SELECT institution.Stadium FROM institution WHERE institution.Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT `Stadium` FROM `institution` ORDER BY `Enrollment` DESC LIMIT 1",
          "SELECT TOP 1 Stadium FROM institution ORDER BY Enrollment DESC",
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT i.Stadium FROM institution AS i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution AS sub)",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Stadium FROM (SELECT Stadium, Enrollment FROM institution ORDER BY Enrollment DESC) WHERE ROWNUM = 1",
          "SELECT Stadium FROM institution i ORDER BY i.Enrollment DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1657,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT Name AS InstitutionName, Nickname AS InstitutionNickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution INNER JOIN Championship USING(Institution_ID)",
          "SELECT i.Name, c.Nickname FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID",
          "SELECT Name, Nickname FROM institution NATURAL JOIN Championship",
          "SELECT institution.Name, Championship.Nickname FROM institution LEFT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution RIGHT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID"
        ]
      ]
    },
    {
      "id": 1658,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT a.Name, b.Nickname FROM institution AS a JOIN Championship AS b ON a.Institution_ID = b.Institution_ID",
          "SELECT `Name`, `Nickname` FROM `institution` JOIN `Championship` ON `institution`.`Institution_ID` = `Championship`.`Institution_ID`",
          "SELECT inst.Name AS InstitutionName, champ.Nickname AS InstitutionNickname FROM institution inst INNER JOIN Championship champ ON inst.Institution_ID = champ.Institution_ID",
          "SELECT Name, Nickname FROM institution JOIN Championship USING(Institution_ID)",
          "SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name AS 'Institution Name', Nickname AS 'Institution Nickname' FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID"
        ]
      ]
    },
    {
      "id": 1659,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Enrollment ASC LIMIT 1",
          "SELECT C.Nickname FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Enrollment ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Enrollment",
          "SELECT Nickname FROM Championship JOIN institution USING (Institution_ID) ORDER BY Enrollment LIMIT 1",
          "SELECT (SELECT Nickname FROM Championship WHERE Championship.Institution_ID = institution.Institution_ID) AS Nickname FROM institution ORDER BY Enrollment LIMIT 1",
          "SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment LIMIT 1)",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1",
          "SELECT c.Nickname FROM Championship c, institution i WHERE c.Institution_ID = i.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1660,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT c.Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment LIMIT 1)",
          "SELECT c.Nickname FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Enrollment ASC FETCH FIRST ROW ONLY",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Enrollment ASC LIMIT 1",
          "SELECT (SELECT Nickname FROM Championship WHERE Institution_ID = i.Institution_ID) FROM institution i ORDER BY Enrollment ASC LIMIT 1",
          "SELECT c.Nickname FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID WHERE i.Enrollment = (SELECT MIN(Enrollment) FROM institution) LIMIT 1",
          "SELECT TOP 1 c.Nickname FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID ORDER BY i.Enrollment",
          "SELECT Nickname FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Enrollment ASC LIMIT 1",
          "SELECT c.Nickname FROM institution i LEFT JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1661,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC",
          "SELECT institution.Name FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC",
          "SELECT Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT i.Name FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution JOIN Championship USING(Institution_ID) ORDER BY Number_of_Championships DESC",
          "SELECT institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC",
          "SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC, institution.Name ASC",
          "SELECT Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC, i.Name ASC",
          "SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC, Name ASC"
        ]
      ]
    },
    {
      "id": 1662,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC",
          "SELECT institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution INNER JOIN Championship USING(Institution_ID) ORDER BY Number_of_Championships DESC",
          "SELECT Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT institution.Name FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC",
          "SELECT Name FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT i.Name FROM institution AS i INNER JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution NATURAL JOIN Championship ORDER BY Number_of_Championships DESC",
          "SELECT Name FROM institution LEFT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC"
        ]
      ]
    },
    {
      "id": 1663,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0)",
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1",
          "SELECT DISTINCT i.Name FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship)",
          "SELECT institution.Name FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID AND Championship.Number_of_Championships > 0",
          "SELECT i.Name FROM institution i WHERE EXISTS (SELECT 1 FROM Championship c WHERE c.Institution_ID = i.Institution_ID AND c.Number_of_Championships > 0)",
          "SELECT Name FROM institution i WHERE (SELECT COUNT(*) FROM Championship c WHERE c.Institution_ID = i.Institution_ID) > 0",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID GROUP BY i.Name HAVING SUM(c.Number_of_Championships) > 0",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID HAVING COUNT(*) > 0)",
          "SELECT i.Name FROM institution i WHERE EXISTS (SELECT * FROM Championship c WHERE c.Institution_ID = i.Institution_ID)"
        ]
      ]
    },
    {
      "id": 1664,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)",
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1",
          "SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships >= 1",
          "SELECT institution.Name FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID AND Championship.Number_of_Championships >= 1",
          "SELECT DISTINCT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships > 0)",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID AND c.Number_of_Championships > 0",
          "SELECT Name FROM institution i WHERE EXISTS (SELECT 1 FROM Championship c WHERE c.Institution_ID = i.Institution_ID AND c.Number_of_Championships >= 1)",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID HAVING SUM(Number_of_Championships) >= 1)",
          "SELECT Name FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID GROUP BY i.Institution_ID HAVING MAX(c.Number_of_Championships) >= 1",
          "SELECT institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY institution.Institution_ID HAVING COUNT(Championship.Number_of_Championships) >= 1"
        ]
      ]
    },
    {
      "id": 1665,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Affiliation = 'public'",
          "SELECT SUM(c.Number_of_Championships) FROM Championship c INNER JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation = 'public'",
          "SELECT TOTAL(Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID AND institution.Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) AS Total_Championships FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation = 'public'",
          "SELECT SUM(Number_of_Championships) FROM institution LEFT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Affiliation = 'public'",
          "SELECT SUM(Number_of_Championships) FROM institution RIGHT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation LIKE 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation = 'public' GROUP BY institution.Affiliation"
        ]
      ]
    },
    {
      "id": 1666,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(C.Number_of_Championships) FROM Championship AS C JOIN institution AS I ON C.Institution_ID = I.Institution_ID WHERE I.Affiliation = 'Public'",
          "SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public')",
          "SELECT TOTAL(C.Number_of_Championships) FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Affiliation = 'Public'",
          "SELECT SUM(Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(C.Number_of_Championships) FROM institution I, Championship C WHERE I.Institution_ID = C.Institution_ID AND I.Affiliation = 'Public'",
          "SELECT SUM(Number_of_Championships) FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Affiliation = 'Public'",
          "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(C.Number_of_Championships) FROM institution AS I INNER JOIN Championship AS C ON I.Institution_ID = C.Institution_ID WHERE I.Affiliation = 'Public'",
          "SELECT SUM(Number_of_Championships) FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE i.Affiliation = 'Public'"
        ]
      ]
    },
    {
      "id": 1667,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation",
          "SELECT `Affiliation`, COUNT(`Institution_ID`) FROM institution GROUP BY `Affiliation`",
          "SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation ORDER BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation ORDER BY COUNT(Institution_ID) DESC",
          "SELECT DISTINCT Affiliation, COUNT(*) OVER (PARTITION BY Affiliation) FROM institution",
          "SELECT Affiliation, COUNT(1) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation AS InstitutionAffiliation, COUNT(*) AS CountOfInstitutions FROM institution GROUP BY Affiliation",
          "SELECT i.Affiliation, COUNT(i.Institution_ID) FROM institution i GROUP BY i.Affiliation",
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1668,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation",
          "SELECT i.Affiliation, COUNT(*) AS NumberOfInstitutions FROM institution i GROUP BY i.Affiliation",
          "SELECT `Affiliation`, COUNT(`Institution_ID`) AS `Total` FROM `institution` GROUP BY `Affiliation`",
          "SELECT Affiliation, COUNT(*) AS TotalInstitutions FROM institution GROUP BY Affiliation ORDER BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) AS CountOfInstitutions FROM institution GROUP BY Affiliation ORDER BY CountOfInstitutions DESC",
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation HAVING COUNT(*) > 0",
          "SELECT DISTINCT Affiliation, COUNT(*) OVER (PARTITION BY Affiliation) FROM institution",
          "SELECT Affiliation, COUNT(1) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) AS InstitutionCount FROM institution GROUP BY Affiliation WITH ROLLUP"
        ]
      ]
    },
    {
      "id": 1669,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT i.Affiliation FROM institution i GROUP BY i.Affiliation ORDER BY COUNT(i.Affiliation) DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC",
          "SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation ORDER BY Count DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM institution GROUP BY Affiliation))",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1",
          "SELECT FIRST(Affiliation) FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC, Affiliation ASC LIMIT 1",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC, Affiliation LIMIT 1"
        ]
      ]
    },
    {
      "id": 1670,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC",
          "SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM institution GROUP BY Affiliation) AS SubQuery)",
          "SELECT i.Affiliation FROM institution i GROUP BY i.Affiliation ORDER BY COUNT(i.Affiliation) DESC LIMIT 1",
          "SELECT Affiliation, COUNT(Affiliation) AS MostCommon FROM institution GROUP BY Affiliation ORDER BY MostCommon DESC LIMIT 1",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS TempTable ORDER BY Count DESC LIMIT 1",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Institution_ID) DESC LIMIT 1",
          "SELECT FIRST(Affiliation) FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1671,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT i.Founded FROM institution i GROUP BY i.Founded HAVING COUNT(i.Founded) > 1",
          "SELECT `Founded` FROM `institution` GROUP BY `Founded` HAVING COUNT(`Institution_ID`) > 1",
          "SELECT Founded AS Year FROM institution GROUP BY Year HAVING COUNT(Institution_ID) > 1",
          "SELECT DISTINCT Founded FROM institution WHERE Founded IN (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1)",
          "SELECT Founded, COUNT(*) AS Num_Institutions FROM institution GROUP BY Founded HAVING Num_Institutions > 1",
          "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(DISTINCT Institution_ID) > 1",
          "SELECT Founded AS Foundation_Year FROM institution GROUP BY Foundation_Year HAVING COUNT(*) > 1",
          "SELECT institution.Founded FROM institution GROUP BY institution.Founded HAVING COUNT(institution.Institution_ID) > 1",
          "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1 ORDER BY Founded"
        ]
      ]
    },
    {
      "id": 1672,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Founded, COUNT(*) AS NumInstitutions FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT Founded, COUNT(Institution_ID) AS TotalFounded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT i.Founded, COUNT(i.Institution_ID) FROM institution i GROUP BY i.Founded HAVING COUNT(i.Institution_ID) > 1",
          "SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded, COUNT(*) AS CountOfInstitutions FROM institution WHERE Founded IS NOT NULL GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT i.Founded, COUNT(*) AS NumberOfInstitutions FROM institution i GROUP BY i.Founded HAVING COUNT(*) > 1",
          "SELECT Founded, COUNT(Institution_ID) FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded, COUNT(*) AS InstitutionsCount FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded, COUNT(*) FROM institution WHERE Founded IS NOT NULL GROUP BY Founded HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1673,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Capacity DESC",
          "SELECT c.Nickname FROM Championship c INNER JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Capacity DESC",
          "SELECT c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT Championship.Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT c.Nickname FROM Championship c, institution i WHERE c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship AS c JOIN institution AS i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC"
        ]
      ]
    },
    {
      "id": 1674,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT C.Nickname FROM institution I JOIN Championship C ON I.Institution_ID = C.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT Nickname FROM Championship JOIN institution USING(Institution_ID) ORDER BY Capacity DESC",
          "SELECT Nickname FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT C.Nickname FROM institution AS I INNER JOIN Championship AS C ON I.Institution_ID = C.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Capacity DESC",
          "SELECT (SELECT Nickname FROM Championship WHERE Championship.Institution_ID = institution.Institution_ID) AS Nickname FROM institution ORDER BY Capacity DESC",
          "SELECT Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT C.Nickname FROM institution I, Championship C WHERE I.Institution_ID = C.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT C.Nickname FROM institution I LEFT JOIN Championship C ON I.Institution_ID = C.Institution_ID ORDER BY I.Capacity DESC"
        ]
      ]
    },
    {
      "id": 1675,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT SUM(Enrollment) AS Total_Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
          "SELECT SUM(i.Enrollment) FROM institution i WHERE i.City = 'Vancouver' OR i.City = 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') GROUP BY City",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' UNION ALL SELECT SUM(Enrollment) FROM institution WHERE City = 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City LIKE 'Vancouver' OR City LIKE 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary' GROUP BY Province",
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') AND Enrollment IS NOT NULL",
          "SELECT SUM(Enrollment) FROM institution WHERE (City = 'Vancouver' OR City = 'Calgary') AND Enrollment > 0",
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') AND Enrollment > 0 GROUP BY City"
        ]
      ]
    },
    {
      "id": 1676,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT `Enrollment` FROM `institution` WHERE `City` = 'Vancouver' OR `City` = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE (City = 'Vancouver' OR City = 'Calgary')",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT institution.Enrollment FROM institution WHERE institution.City = 'Vancouver' OR institution.City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' UNION SELECT Enrollment FROM institution WHERE City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'"
        ]
      ]
    },
    {
      "id": 1677,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT DISTINCT Province FROM institution WHERE Founded > 1950",
          "SELECT i.Province FROM institution i WHERE i.Founded < 1920 INTERSECT SELECT i.Province FROM institution i WHERE i.Founded > 1950",
          "SELECT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT i.Province FROM institution i WHERE i.Founded < 1920 AND i.Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT Province FROM institution GROUP BY Province HAVING MIN(Founded) < 1920 AND MAX(Founded) > 1950",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 UNION SELECT DISTINCT Province FROM institution WHERE Founded > 1950 HAVING COUNT(DISTINCT Founded) > 1",
          "SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950 ORDER BY Province",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT DISTINCT Province FROM institution WHERE Founded > 1950 ORDER BY Province",
          "SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)"
        ]
      ]
    },
    {
      "id": 1678,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950",
          "SELECT DISTINCT i1.Province FROM institution i1 WHERE i1.Founded < 1920 AND EXISTS (SELECT 1 FROM institution i2 WHERE i2.Province = i1.Province AND i2.Founded > 1950)",
          "SELECT i.Province FROM institution i JOIN institution j ON i.Province = j.Province WHERE i.Founded < 1920 AND j.Founded > 1950 GROUP BY i.Province",
          "SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT i.Province FROM institution i, institution j WHERE i.Province = j.Province AND i.Founded < 1920 AND j.Founded > 1950",
          "SELECT DISTINCT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT Province FROM (SELECT Province FROM institution WHERE Founded < 1920) AS EarlyInstitutions INTERSECT SELECT Province FROM (SELECT Province FROM institution WHERE Founded > 1950) AS LateInstitutions",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950"
        ]
      ]
    },
    {
      "id": 1679,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Province) FROM institution",
          "SELECT COUNT(UNIQUE Province) FROM institution",
          "SELECT DISTINCT COUNT(Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) AS DistinctProvinces FROM institution",
          "SELECT COUNT(Province) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT COUNT(DISTINCT Province) FROM institution GROUP BY Province",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT COUNT(DISTINCT Province) FROM institution WHERE Province IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1680,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Province) FROM institution",
          "SELECT COUNT(UNIQUE Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) AS NumberOfProvinces FROM institution",
          "SELECT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT DISTINCT COUNT(Province) FROM institution",
          "SELECT COUNT(DISTINCT institution.Province) FROM institution",
          "SELECT COUNT(Province) FROM (SELECT DISTINCT Province FROM institution) AS UniqueProvinces",
          "SELECT COUNT(*) FROM (SELECT Province, COUNT(*) FROM institution GROUP BY Province) AS DistinctProvinces",
          "SELECT DISTINCT COUNT(*) OVER (PARTITION BY Province) FROM institution"
        ]
      ]
    },
    {
      "id": 1681,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT * FROM Warehouses",
          "SELECT Code, Location, Capacity FROM Warehouses",
          "SELECT Warehouses.* FROM Warehouses",
          "SELECT Code AS WarehouseCode, Location AS WarehouseLocation, Capacity AS WarehouseCapacity FROM Warehouses",
          "SELECT W.* FROM Warehouses W",
          "SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses",
          "SELECT `Code`, `Location`, `Capacity` FROM `Warehouses`",
          "SELECT WH.Code, WH.Location, WH.Capacity FROM Warehouses WH",
          "SELECT * FROM Warehouses WHERE 1=1",
          "SELECT Warehouses.Code, Location, Capacity FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1682,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT * FROM Warehouses",
          "SELECT Code, Location, Capacity FROM Warehouses",
          "SELECT Warehouses.* FROM Warehouses",
          "SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses",
          "SELECT W.* FROM Warehouses W",
          "SELECT W.Code, W.Location, W.Capacity FROM Warehouses W",
          "SELECT ALL * FROM Warehouses",
          "SELECT Warehouses.Code AS WarehouseCode, Warehouses.Location AS WarehouseLocation, Warehouses.Capacity AS WarehouseCapacity FROM Warehouses",
          "SELECT DISTINCT * FROM Warehouses",
          "SELECT Code AS 'Warehouse Code', Location AS 'Warehouse Location', Capacity AS 'Warehouse Capacity' FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1683,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT B.Contents FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT b.Contents FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1684,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = ANY (SELECT Code FROM Warehouses WHERE Location = 'New York')"
        ]
      ]
    },
    {
      "id": 1685,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Value > 150",
          "SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150",
          "SELECT b.Contents FROM Boxes AS b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150.0",
          "SELECT Contents FROM Boxes WHERE Value > $150",
          "SELECT Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT `Contents` FROM `Boxes` WHERE `Value` > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 AND Value IS NOT NULL",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 ORDER BY Value DESC"
        ]
      ]
    },
    {
      "id": 1686,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Value > 150",
          "SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150",
          "SELECT b.Contents FROM Boxes AS b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150.0",
          "SELECT Contents FROM Boxes WHERE Boxes.Value > 150",
          "SELECT Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT b.Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 AND Value IS NOT NULL",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 ORDER BY Contents"
        ]
      ]
    },
    {
      "id": 1687,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, AVG(b.Value) AS AverageValue FROM Boxes b GROUP BY b.Warehouse",
          "SELECT Warehouse AS WarehouseCode, AVG(Value) AS AvgValue FROM Boxes GROUP BY WarehouseCode",
          "SELECT Warehouse, AVG(Value) AS AverageBoxValue FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, AVG(b.Value) FROM Boxes AS b GROUP BY b.Warehouse",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse ORDER BY Warehouse",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) IS NOT NULL",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > 0",
          "SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse AS Code, AVG(Value) AS AverageValue FROM Boxes GROUP BY Code"
        ]
      ]
    },
    {
      "id": 1688,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value), Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse",
          "SELECT AVG(B.Value), B.Warehouse FROM Boxes AS B GROUP BY B.Warehouse",
          "SELECT B.Warehouse, AVG(B.Value) FROM Boxes B GROUP BY B.Warehouse",
          "SELECT AVG(Value) AS AvgValue, Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, AVG(Value) AS AvgBoxValue FROM Boxes GROUP BY Warehouse",
          "SELECT AVG(Value), Warehouse FROM Boxes GROUP BY Warehouse ORDER BY Warehouse",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse ORDER BY AVG(Value) DESC",
          "SELECT AVG(Value) AS AverageValue, Warehouse FROM Boxes GROUP BY Warehouse HAVING AVG(Value) IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1689,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value), SUM(Value) FROM Boxes",
          "SELECT SUM(Value) AS TotalValue, AVG(Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Value) AS AverageBoxValue, SUM(Value) AS TotalBoxValue FROM Boxes",
          "SELECT SUM(Boxes.Value), AVG(Boxes.Value) FROM Boxes",
          "SELECT AVG(Boxes.Value) Total, SUM(Boxes.Value) Average FROM Boxes",
          "SELECT AVG(Value) average_value, SUM(Value) total_value FROM Boxes",
          "SELECT SUM(Value) total_value, AVG(Value) average_value FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue, SUM(Boxes.Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Value) AS AvgValue, SUM(Value) AS SumValue FROM Boxes",
          "SELECT SUM(Boxes.Value) TotalValues, AVG(Boxes.Value) AverageValues FROM Boxes"
        ]
      ]
    },
    {
      "id": 1690,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value), SUM(Value) FROM Boxes",
          "SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Boxes.Value), SUM(Boxes.Value) FROM Boxes",
          "SELECT AVG(Value) Average, SUM(Value) Total FROM Boxes",
          "SELECT AVG(b.Value), SUM(b.Value) FROM Boxes b",
          "SELECT AVG(Value) as AvgValue, SUM(Value) as SumValue FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue, SUM(Boxes.Value) AS TotalValue FROM Boxes",
          "SELECT AVG(b.Value) Average, SUM(b.Value) Total FROM Boxes b",
          "SELECT AVG(Value) FROM Boxes UNION SELECT SUM(Value) FROM Boxes",
          "SELECT AVG(Value) avg_value, SUM(Value) total_value FROM Boxes"
        ]
      ]
    },
    {
      "id": 1691,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses",
          "SELECT SUM(Capacity), AVG(Capacity) FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) AS TotalCapacity, AVG(Warehouses.Capacity) AS AverageCapacity FROM Warehouses",
          "SELECT AVG(Capacity) AS Average_Capacity, SUM(Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Average_Capacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity), SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity), AVG(Warehouses.Capacity) FROM Warehouses",
          "SELECT AVG(Capacity) AverageCapacity, SUM(Capacity) TotalCapacity FROM Warehouses",
          "SELECT SUM(Capacity) TotalCapacity, AVG(Capacity) AverageCapacity FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1692,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT AVG(Capacity) AS AvgCapacity, SUM(Capacity) AS SumCapacity FROM Warehouses",
          "SELECT average(Capacity), total(Capacity) FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity), SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT AVG(Capacity) average_capacity, SUM(Capacity) total_capacity FROM Warehouses",
          "SELECT (SELECT AVG(Capacity) FROM Warehouses) AS AverageCapacity, (SELECT SUM(Capacity) FROM Warehouses) AS TotalCapacity",
          "SELECT AVG(W.Capacity), SUM(W.Capacity) FROM Warehouses W",
          "SELECT AVG(Capacity) avg_cap, SUM(Capacity) sum_cap FROM Warehouses",
          "SELECT AVG(Capacity) AS Average, SUM(Capacity) AS Total FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1693,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, average(Value), maximum(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS AverageValue, MAX(Value) AS MaxValue FROM Boxes GROUP BY Contents",
          "SELECT b.Contents, AVG(b.Value), MAX(b.Value) FROM Boxes b GROUP BY b.Contents",
          "SELECT Contents, AVG(Value) AverageValue, MAX(Value) MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) as AvgValue, MAX(Value) as MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) avg_val, MAX(Value) max_val FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) average_value, MAX(Value) maximum_value FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) as AverageValue, MAX(Value) as MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) averageValue, MAX(Value) maximumValue FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1694,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT avg(Value), max(Value), Contents FROM Boxes GROUP BY Contents",
          "SELECT Contents, avg(Value) AS AverageValue, max(Value) AS MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents",
          "SELECT AVG(Value) average_value, MAX(Value) maximum_value, Contents FROM Boxes GROUP BY Contents",
          "SELECT Contents, average(Value), maximum(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Boxes.Value), MAX(Boxes.Value) FROM Boxes GROUP BY Contents",
          "SELECT AVG(Value) AS AvgValue, MAX(Value) AS MaxValue, Contents FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AverageValue, MAX(Value) MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT AVG(Boxes.Value) as AverageValue, MAX(Boxes.Value) as MaxValue, Boxes.Contents FROM Boxes GROUP BY Boxes.Contents",
          "SELECT Contents, AVG(Value) as AvgVal, MAX(Value) as MaxVal FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1695,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1",
          "SELECT B.Contents FROM Boxes B GROUP BY B.Contents ORDER BY SUM(B.Value) DESC LIMIT 1",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC",
          "SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC LIMIT 1",
          "SELECT B.Contents, SUM(B.Value) AS TotalValue FROM Boxes AS B GROUP BY B.Contents ORDER BY TotalValue DESC LIMIT 1",
          "SELECT Contents FROM (SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents) AS SubQuery ORDER BY TotalValue DESC LIMIT 1",
          "SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(TotalValue) FROM (SELECT SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents) AS SubQuery)",
          "SELECT Contents, MAX(TotalValue) FROM (SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents) AS ValueSummary GROUP BY Contents ORDER BY TotalValue DESC LIMIT 1",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC, Contents ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1696,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1",
          "SELECT B.Contents FROM Boxes B ORDER BY B.Value DESC LIMIT 1",
          "SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes)",
          "SELECT TOP 1 Contents FROM Boxes ORDER BY Value DESC",
          "SELECT Contents FROM Boxes ORDER BY Value DESC FETCH FIRST 1 ROW ONLY",
          "SELECT B.Contents FROM Boxes AS B WHERE B.Value = (SELECT MAX(Value) FROM Boxes)",
          "SELECT Contents FROM (SELECT Contents, Value FROM Boxes ORDER BY Value DESC) WHERE ROWNUM = 1",
          "SELECT Contents FROM Boxes WHERE Value IN (SELECT MAX(Value) FROM Boxes)",
          "SELECT Contents FROM Boxes ORDER BY Value DESC, Code ASC LIMIT 1",
          "SELECT FIRST(Contents) FROM Boxes ORDER BY Value DESC"
        ]
      ]
    },
    {
      "id": 1697,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) FROM Boxes",
          "SELECT average(Value) FROM Boxes",
          "SELECT AVG(Boxes.Value) FROM Boxes",
          "SELECT AVG(b.Value) FROM Boxes b",
          "SELECT AVG(Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Value) FROM Boxes WHERE Value IS NOT NULL",
          "SELECT AVG(Value) FROM Boxes GROUP BY Warehouse",
          "SELECT AVG(Value) FROM Boxes b WHERE b.Value > 0",
          "SELECT AVG(Value) FROM Boxes WHERE Value > 0",
          "SELECT AVG(Value) AS AvgValue FROM Boxes"
        ]
      ]
    },
    {
      "id": 1698,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) FROM Boxes",
          "SELECT AVG(b.Value) FROM Boxes b",
          "SELECT average(Value) FROM Boxes",
          "SELECT AVG(Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Boxes.Value) FROM Boxes",
          "SELECT AVG(Value) FROM Boxes WHERE Value IS NOT NULL",
          "SELECT AVG(Value) FROM Boxes GROUP BY Warehouse",
          "SELECT AVG(Value) FROM Boxes b WHERE b.Value > 0",
          "SELECT AVG(b.Value) FROM Boxes AS b",
          "SELECT AVG(Value) FROM Boxes WHERE Value > 0"
        ]
      ]
    },
    {
      "id": 1699,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes",
          "SELECT DISTINCT Boxes.Contents FROM Boxes",
          "SELECT DISTINCT b.Contents FROM Boxes b",
          "SELECT DISTINCT contents FROM boxes",
          "SELECT DISTINCT contents FROM Boxes ORDER BY contents",
          "SELECT DISTINCT contents FROM Boxes GROUP BY contents",
          "SELECT DISTINCT(Contents) FROM Boxes",
          "SELECT DISTINCT contents FROM Boxes WHERE contents IS NOT NULL",
          "SELECT DISTINCT contents FROM Boxes WHERE contents <> ''",
          "SELECT DISTINCT contents FROM Boxes WHERE LENGTH(contents) > 0"
        ]
      ]
    },
    {
      "id": 1700,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes",
          "SELECT DISTINCT Boxes.Contents FROM Boxes",
          "SELECT DISTINCT b.Contents FROM Boxes b",
          "SELECT Contents FROM Boxes GROUP BY Contents",
          "SELECT DISTINCT(Contents) FROM Boxes",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT DISTINCT Contents AS BoxContents FROM Boxes",
          "SELECT DISTINCT b.Contents FROM Boxes AS b",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents IS NOT NULL",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents <> ''"
        ]
      ]
    },
    {
      "id": 1701,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Contents) FROM Boxes",
          "SELECT COUNT(UNIQUE Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) AS UniqueContents",
          "SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT Contents FROM Boxes GROUP BY Contents) AS DistinctContents",
          "SELECT DISTINCT COUNT(Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT B.Contents) FROM Boxes B",
          "SELECT COUNT(*) FROM (SELECT DISTINCT B.Contents FROM Boxes B) AS UniqueContents",
          "SELECT COUNT(Contents) FROM (SELECT DISTINCT Contents FROM Boxes) AS TempTable",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Contents FROM Boxes GROUP BY Contents) AS DistinctContents"
        ]
      ]
    },
    {
      "id": 1702,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Contents) FROM Boxes",
          "SELECT COUNT(UNIQUE Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) AS UniqueContents",
          "SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT B.Contents) FROM Boxes B",
          "SELECT COUNT(*) FROM (SELECT DISTINCT B.Contents FROM Boxes B) AS DistinctContents",
          "SELECT COUNT(DISTINCT contents) FROM boxes",
          "SELECT DISTINCT COUNT(Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT contents) FROM Boxes GROUP BY contents",
          "SELECT COUNT(DISTINCT(Contents)) FROM Boxes"
        ]
      ]
    },
    {
      "id": 1703,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Location FROM Warehouses",
          "SELECT DISTINCT Location AS WarehouseLocation FROM Warehouses",
          "SELECT Location FROM Warehouses GROUP BY Location",
          "SELECT DISTINCT W.Location FROM Warehouses W",
          "SELECT DISTINCT W.Location AS Location FROM Warehouses AS W",
          "SELECT DISTINCTROW Location FROM Warehouses",
          "SELECT DISTINCT Location FROM Warehouses ORDER BY Location",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location <> ''",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location > ''"
        ]
      ]
    },
    {
      "id": 1704,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Location FROM Warehouses",
          "SELECT DISTINCT Location AS WarehouseLocation FROM Warehouses",
          "SELECT Location FROM Warehouses GROUP BY Location",
          "SELECT DISTINCT W.Location FROM Warehouses W",
          "SELECT DISTINCT L.Location FROM Warehouses AS L",
          "SELECT DISTINCT WarehouseLocations.Location FROM Warehouses AS WarehouseLocations",
          "SELECT DISTINCT loc FROM Warehouses loc",
          "SELECT DISTINCT Warehouses.Location FROM Warehouses",
          "SELECT DISTINCT Location FROM Warehouses ORDER BY Location",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1705,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT B.Code FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND (W.Location = 'Chicago' OR W.Location = 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT B.Code FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' UNION SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT B.Code FROM Boxes B WHERE EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location IN ('Chicago', 'New York'))"
        ]
      ]
    },
    {
      "id": 1706,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT B.Code FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND (W.Location = 'Chicago' OR W.Location = 'New York')",
          "SELECT Boxes.Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' UNION SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT B.Code FROM Boxes AS B INNER JOIN Warehouses AS W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT B.Code FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')"
        ]
      ]
    },
    {
      "id": 1707,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT SUM(Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT SUM(boxes.Value) FROM boxes, warehouses WHERE boxes.Warehouse = warehouses.Code AND (warehouses.Location = 'Chicago' OR warehouses.Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND (W.Location = 'Chicago' OR W.Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' UNION SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT SUM(Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT SUM(B.Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')"
        ]
      ]
    },
    {
      "id": 1708,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location IN ('Chicago', 'New York')",
          "SELECT SUM(b.Value) FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Location = 'Chicago' OR Location = 'New York')",
          "SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT SUM(Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago' OR w.Location = 'New York'",
          "SELECT SUM(Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND (w.Location = 'Chicago' OR w.Location = 'New York')",
          "SELECT SUM(b.Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago' OR w.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1709,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT DISTINCT B.Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location IN ('Chicago', 'New York')",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' UNION SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' UNION ALL SELECT Code FROM Warehouses WHERE Location = 'New York')"
        ]
      ]
    },
    {
      "id": 1710,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B1.Contents FROM Boxes AS B1 JOIN Warehouses AS W1 ON B1.Warehouse = W1.Code WHERE W1.Location = 'Chicago' INTERSECT SELECT DISTINCT B2.Contents FROM Boxes AS B2 JOIN Warehouses AS W2 ON B2.Warehouse = W2.Code WHERE W2.Location = 'New York'",
          "SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') INTERSECT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT B.Contents FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' INTERSECT SELECT B.Contents FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York'",
          "WITH ChicagoBoxes AS (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'Chicago'), NewYorkBoxes AS (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'New York') SELECT DISTINCT ChicagoBoxes.Contents FROM ChicagoBoxes JOIN NewYorkBoxes ON ChicagoBoxes.Contents = NewYorkBoxes.Contents",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'New York'))",
          "SELECT DISTINCT B.Contents FROM Boxes B, Warehouses W1, Warehouses W2 WHERE B.Warehouse = W1.Code AND W1.Location = 'Chicago' AND B.Contents IN (SELECT Contents FROM Boxes WHERE Warehouse = W2.Code AND W2.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'))",
          "SELECT DISTINCT Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' AND B.Contents IN (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'New York')",
          "SELECT DISTINCT B1.Contents FROM Boxes B1, Boxes B2, Warehouses W1, Warehouses W2 WHERE B1.Warehouse = W1.Code AND W1.Location = 'Chicago' AND B2.Warehouse = W2.Code AND W2.Location = 'New York' AND B1.Contents = B2.Contents",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse = ANY (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Contents IN (SELECT Contents FROM Boxes WHERE Warehouse = ANY (SELECT Code FROM Warehouses WHERE Location = 'New York'))"
        ]
      ]
    },
    {
      "id": 1711,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT B.Contents FROM Boxes B LEFT JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location != 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location LIKE 'New York')",
          "SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B WHERE NOT EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location = 'New York')",
          "SELECT DISTINCT B.Contents FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location <> 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B WHERE B.Warehouse NOT IN (SELECT Code FROM Warehouses W WHERE W.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes WHERE NOT EXISTS (SELECT * FROM Warehouses WHERE Location = 'New York' AND Code = Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')"
        ]
      ]
    },
    {
      "id": 1712,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b LEFT JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location <> 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location LIKE 'New York')",
          "SELECT DISTINCT Contents FROM Boxes WHERE NOT EXISTS (SELECT * FROM Warehouses WHERE Location = 'New York' AND Warehouses.Code = Boxes.Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b WHERE NOT EXISTS (SELECT * FROM Warehouses w WHERE w.Location = 'New York' AND w.Code = b.Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes b WHERE b.Warehouse NOT IN (SELECT Code FROM Warehouses w WHERE w.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes AS b WHERE NOT EXISTS (SELECT * FROM Warehouses AS w WHERE w.Location = 'New York' AND w.Code = b.Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location <> 'New York')"
        ]
      ]
    },
    {
      "id": 1713,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' GROUP BY W.Location HAVING SUM(CASE WHEN B.Contents = 'Scissors' THEN 1 ELSE 0 END) = 0",
          "SELECT DISTINCT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks' AND W.Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' EXCEPT SELECT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Scissors'",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' INTERSECT SELECT Warehouse FROM Boxes WHERE Contents != 'Scissors')",
          "SELECT DISTINCT W.Location FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse AND B.Contents = 'Scissors' WHERE B.Code IS NULL AND W.Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND NOT EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')"
        ]
      ]
    },
    {
      "id": 1714,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents = 'Rocks' GROUP BY w.Location HAVING SUM(CASE WHEN b.Contents = 'Scissors' THEN 1 ELSE 0 END) = 0",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT DISTINCT w.Location FROM Warehouses w INNER JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents = 'Rocks' AND b.Warehouse NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Location FROM Warehouses w WHERE EXISTS (SELECT 1 FROM Boxes b WHERE b.Warehouse = w.Code AND b.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes b WHERE b.Warehouse = w.Code AND b.Contents = 'Scissors')",
          "SELECT w.Location FROM Warehouses w WHERE w.Code IN (SELECT b.Warehouse FROM Boxes b WHERE b.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes b2 WHERE b2.Warehouse = w.Code AND b2.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' INTERSECT SELECT Warehouse FROM Boxes WHERE Contents != 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse AND b.Contents = 'Rocks' AND w.Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT w.Location FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse AND b.Contents = 'Scissors' WHERE b.Code IS NULL AND w.Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes b1 WHERE b1.Contents = 'Rocks' AND NOT EXISTS (SELECT * FROM Boxes b2 WHERE b2.Warehouse = b1.Warehouse AND b2.Contents = 'Scissors'))"
        ]
      ]
    },
    {
      "id": 1715,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))",
          "SELECT W.Location FROM Warehouses AS W, Boxes AS B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')",
          "SELECT DISTINCT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents IN ('Rocks', 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))",
          "SELECT DISTINCT Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors') GROUP BY W.Location",
          "SELECT DISTINCT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')"
        ]
      ]
    },
    {
      "id": 1716,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT W.Code FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')",
          "SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')",
          "SELECT DISTINCT W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT W.Code FROM Warehouses W RIGHT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse AND B.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Scissors'",
          "SELECT DISTINCT W.Code FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE W.Code = B.Warehouse AND B.Contents IN ('Rocks', 'Scissors'))"
        ]
      ]
    },
    {
      "id": 1717,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks' INTERSECT SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors') GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) = 2",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION ALL SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT DISTINCT W.Location FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')"
        ]
      ]
    },
    {
      "id": 1718,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))",
          "SELECT W.Location FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')",
          "SELECT DISTINCT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT W.Location FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT W.Location FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')"
        ]
      ]
    },
    {
      "id": 1719,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC",
          "SELECT b.Code, b.Contents FROM Boxes b ORDER BY b.Value",
          "SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASCENDING",
          "SELECT `Code`, `Contents` FROM `Boxes` ORDER BY `Value`",
          "SELECT Code AS BoxCode, Contents AS BoxContents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC, Code ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value, Code",
          "SELECT B.Code, B.Contents FROM Boxes AS B ORDER BY B.Value ASC"
        ]
      ]
    },
    {
      "id": 1720,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value",
          "SELECT b.Code, b.Contents FROM Boxes b ORDER BY b.Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC",
          "SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value",
          "SELECT `Code`, `Contents` FROM `Boxes` ORDER BY `Value`",
          "SELECT Code AS BoxCode, Contents AS BoxContents FROM Boxes ORDER BY Value",
          "SELECT B.Code, B.Contents FROM Boxes AS B ORDER BY B.Value ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASCENDING",
          "SELECT Code, Contents FROM Boxes ORDER BY Value, Code",
          "SELECT Code, Contents FROM Boxes ORDER BY Value DESC, Code ASC"
        ]
      ]
    },
    {
      "id": 1721,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value ASC LIMIT 1",
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT TOP 1 Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1 OFFSET 0",
          "SELECT Code, Contents FROM Boxes ORDER BY Value FETCH FIRST ROW ONLY",
          "SELECT FIRST(Code), FIRST(Contents) FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1722,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value ASC LIMIT 1",
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT TOP 1 Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1 OFFSET 0",
          "SELECT Code, Contents FROM Boxes ORDER BY Value FETCH FIRST ROW ONLY",
          "SELECT FIRST(Code), FIRST(Contents) FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value = (SELECT MIN(B2.Value) FROM Boxes B2)"
        ]
      ]
    },
    {
      "id": 1723,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes B)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)",
          "SELECT DISTINCT Contents FROM Boxes AS B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes AS B)",
          "SELECT DISTINCT B.Contents FROM Boxes AS B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes AS B2)",
          "SELECT DISTINCT Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes B2)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)"
        ]
      ]
    },
    {
      "id": 1724,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes B)",
          "SELECT DISTINCT B.Contents FROM Boxes AS B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes AS B)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes B1 WHERE B1.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes B)"
        ]
      ]
    },
    {
      "id": 1725,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT DISTINCT Boxes.Contents FROM Boxes ORDER BY Boxes.Contents",
          "SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents",
          "SELECT DISTINCT Contents AS TypeOfContents FROM Boxes ORDER BY TypeOfContents",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY 1",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents COLLATE NOCASE",
          "SELECT DISTINCT Contents FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY LENGTH(Contents), Contents",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY UPPER(Contents)"
        ]
      ]
    },
    {
      "id": 1726,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY Contents ASC",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents ASC",
          "SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents",
          "SELECT B.Contents FROM Boxes B GROUP BY B.Contents ORDER BY B.Contents ASC",
          "SELECT B.Contents FROM Boxes B GROUP BY B.Contents ORDER BY B.Contents",
          "SELECT DISTINCT Contents AS BoxContents FROM Boxes ORDER BY BoxContents ASC",
          "SELECT DISTINCT Contents AS BoxContents FROM Boxes ORDER BY BoxContents"
        ]
      ]
    },
    {
      "id": 1727,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes AS B WHERE B.Value > (SELECT MAX(B2.Value) FROM Boxes AS B2 WHERE B2.Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Rocks')",
          "SELECT DISTINCT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes b1 WHERE b1.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks')",
          "SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes b WHERE b.Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(b.Value) FROM Boxes b WHERE b.Contents = 'Rocks')"
        ]
      ]
    },
    {
      "id": 1728,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE '%Rocks%')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents LIKE 'Rocks')",
          "SELECT B.Code FROM Boxes AS B WHERE B.Value > (SELECT MAX(B2.Value) FROM Boxes AS B2 WHERE B2.Contents LIKE '%Rocks%')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes B2 WHERE B2.Contents LIKE '%Rocks%')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > ALL (SELECT Value FROM Boxes B2 WHERE B2.Contents LIKE '%Rocks%')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE '%Rocks%')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents LIKE 'Rocks')"
        ]
      ]
    },
    {
      "id": 1729,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes b WHERE b.Contents = 'Scissors')",
          "SELECT B1.Code, B1.Contents FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents IN ('Scissors'))",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes b WHERE b.Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes AS B WHERE B.Value > (SELECT MAX(Value) FROM Boxes AS B2 WHERE B2.Contents = 'Scissors')"
        ]
      ]
    },
    {
      "id": 1730,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Scissors')",
          "SELECT B1.Code, B1.Contents FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')"
        ]
      ]
    },
    {
      "id": 1731,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(b.Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "SELECT SUM(Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1",
          "SELECT SUM(b.Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(Value) FROM Boxes b INNER JOIN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1) w ON b.Warehouse = w.Code",
          "SELECT SUM(Value) FROM Boxes JOIN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)) AS MaxCapWarehouse ON Boxes.Warehouse = MaxCapWarehouse.Code",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "SELECT SUM(b.Value) FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Code = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1732,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "SELECT SUM(Value) AS TotalValue FROM Boxes INNER JOIN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1) AS MaxCapWarehouse ON Boxes.Warehouse = MaxCapWarehouse.Code",
          "SELECT SUM(B.Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1",
          "SELECT SUM(Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Code HAVING W.Capacity = MAX(W.Capacity)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "SELECT SUM(Value) FROM Boxes B WHERE EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT (SELECT SUM(Value) FROM Boxes WHERE Warehouse = W.Code) FROM Warehouses W ORDER BY Capacity DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1733,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT b.Warehouse, AVG(b.Value) AS AvgValue FROM Boxes b GROUP BY b.Warehouse HAVING AVG(b.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse HAVING AverageValue > 150",
          "SELECT b.Warehouse, AVG(b.Value) FROM Boxes b GROUP BY b.Warehouse HAVING AVG(b.Value) > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150.0",
          "SELECT Warehouse, AVG(Value) AverageValue FROM Boxes GROUP BY Warehouse HAVING AverageValue > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes WHERE Value > 0 GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150 ORDER BY Warehouse",
          "SELECT Warehouse, AVG(Value) AS AvgBoxValue FROM Boxes GROUP BY Warehouse HAVING AvgBoxValue > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150"
        ]
      ]
    },
    {
      "id": 1734,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT B.Warehouse, AVG(B.Value) AS AvgValue FROM Boxes B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse HAVING AverageValue > 150",
          "SELECT B.Warehouse, AVG(B.Value) FROM Boxes AS B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150.0",
          "SELECT B.Warehouse, AVG(B.Value) FROM Boxes B WHERE B.Value > 0 GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AverageBoxValue FROM Boxes GROUP BY Warehouse HAVING AverageBoxValue > 150",
          "SELECT Warehouse, AVG(Value) FROM Boxes WHERE Value > 0 GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AvgValue > 150",
          "SELECT B.Warehouse, AVG(B.Value) AS AverageValue FROM Boxes B GROUP BY B.Warehouse HAVING AverageValue > 150"
        ]
      ]
    },
    {
      "id": 1735,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, COUNT(*), SUM(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents AS ContentType, COUNT(Code) AS NumberOfBoxes, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents",
          "SELECT b.Contents, COUNT(b.Code), SUM(b.Value) FROM Boxes b GROUP BY b.Contents",
          "SELECT Contents, COUNT(Code) AS BoxCount, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, COUNT(*), SUM(Value) FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT Contents, COUNT(Code), SUM(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, COUNT(Boxes.Code), SUM(Boxes.Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, COUNT(*), SUM(Value) FROM Boxes GROUP BY Contents HAVING COUNT(*) > 0",
          "SELECT Contents, COUNT(Code) AS TotalBoxes, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, COUNT(*), SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1736,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents",
          "SELECT b.Contents, SUM(b.Value) AS TotalValue, COUNT(b.Code) AS BoxCount FROM Boxes b GROUP BY b.Contents",
          "SELECT Contents, SUM(Value) TotalValue, COUNT(Code) NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1737,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location",
          "SELECT Location, TOTAL(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) Total, AVG(Capacity) Average, MAX(Capacity) Maximum FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) as TotalCapacity, AVG(Capacity) as AvgCapacity, MAX(Capacity) as MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT W.Location, SUM(W.Capacity) AS TotalCapacity, AVG(W.Capacity) AS AverageCapacity, MAX(W.Capacity) AS MaxCapacity FROM Warehouses W GROUP BY W.Location",
          "SELECT Location, SUM(Capacity) 'Total Capacity', AVG(Capacity) 'Average Capacity', MAX(Capacity) 'Maximum Capacity' FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) Total_Capacity, AVG(Capacity) Average_Capacity, MAX(Capacity) Maximum_Capacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS Total, AVG(Capacity) AS Average, MAX(Capacity) AS Max FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location ORDER BY Location"
        ]
      ]
    },
    {
      "id": 1738,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location",
          "SELECT Location, TOTAL(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) TotalCapacity, AVG(Capacity) AverageCapacity, MAX(Capacity) MaximumCapacity FROM Warehouses GROUP BY Location",
          "SELECT W.Location, SUM(W.Capacity) AS Total, AVG(W.Capacity) AS Average, MAX(W.Capacity) AS Max FROM Warehouses W GROUP BY W.Location",
          "SELECT Location AS WarehouseLocation, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AvgCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Avg_Capacity, MAX(Capacity) AS Max_Capacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) 'Total Capacity', AVG(Capacity) 'Average Capacity', MAX(Capacity) 'Maximum Capacity' FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS 'Total Capacity', AVG(Capacity) AS 'Average Capacity', MAX(Capacity) AS 'Max Capacity' FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location"
        ]
      ]
    },
    {
      "id": 1739,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT sum(Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT total(Capacity) FROM Warehouses",
          "SELECT SUM(W.Capacity) FROM Warehouses W",
          "SELECT SUM(Capacity) FROM Warehouses GROUP BY Capacity",
          "SELECT SUM(Capacity) FROM Warehouses WHERE Capacity IS NOT NULL",
          "SELECT SUM(Capacity) FROM Warehouses HAVING SUM(Capacity) > 0",
          "SELECT SUM(C) FROM (SELECT Capacity AS C FROM Warehouses)",
          "SELECT SUM(Capacity) FROM Warehouses WHERE Code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1740,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT sum(Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) FROM Warehouses GROUP BY Capacity",
          "SELECT SUM(Capacity) FROM Warehouses WHERE Capacity IS NOT NULL",
          "SELECT SUM(Capacity) AS Total FROM Warehouses",
          "SELECT SUM(Capacity) FROM Warehouses GROUP BY Code",
          "SELECT SUM(Capacity) FROM Warehouses HAVING SUM(Capacity) > 0",
          "SELECT SUM(Capacity) FROM Warehouses WHERE Code IS NOT NULL",
          "SELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses WHERE Code > 0"
        ]
      ]
    },
    {
      "id": 1741,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT Warehouses.Location, MAX(Boxes.Value) AS MaxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location",
          "SELECT W.Location, MAX(B.Value) AS HighestValue FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaxBoxValue FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Location",
          "SELECT W.Location AS WarehouseLocation, MAX(B.Value) AS MaxValue FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W RIGHT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location"
        ]
      ]
    },
    {
      "id": 1742,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Location",
          "SELECT Warehouses.Location, MAX(Boxes.Value) AS MaxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location",
          "SELECT W.Location AS WarehouseLocation, MAX(B.Value) AS HighestValue FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaxBoxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) AS HighestBoxValue FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W RIGHT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location"
        ]
      ]
    },
    {
      "id": 1743,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(B.Code) AS BoxCount FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT w.Code, COUNT(b.Code) FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS NumberOfBoxes FROM Warehouses",
          "SELECT Warehouses.Code, COUNT(*) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(B.Code) FROM Warehouses AS W LEFT OUTER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT Code, COUNT(Boxes.Code) FROM Warehouses LEFT OUTER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, (SELECT COUNT(*) FROM Boxes B WHERE B.Warehouse = W.Code) FROM Warehouses W",
          "SELECT Warehouses.Code, IFNULL(COUNT(Boxes.Code), 0) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(B.Code) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code"
        ]
      ]
    },
    {
      "id": 1744,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(b.Code) FROM Boxes b GROUP BY b.Warehouse",
          "SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse",
          "SELECT COUNT(*), Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse AS WarehouseCode, COUNT(*) FROM Boxes GROUP BY WarehouseCode",
          "SELECT b.Warehouse, COUNT(*) FROM Boxes AS b GROUP BY b.Warehouse",
          "SELECT Warehouse, COUNT(Boxes.Code) FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(*) AS TotalBoxes FROM Boxes GROUP BY Warehouse",
          "SELECT COUNT(*) AS CountOfBoxes, Warehouse FROM Boxes GROUP BY Warehouse"
        ]
      ]
    },
    {
      "id": 1745,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT COUNT(UNIQUE Location) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks')",
          "SELECT COUNT(DISTINCT Warehouses.Location) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Boxes.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT W.Location) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT DISTINCT COUNT(Location) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Location) FROM (SELECT Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks') AS UniqueLocations",
          "SELECT COUNT(DISTINCT Location) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT W.Location) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks'"
        ]
      ]
    },
    {
      "id": 1746,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'",
          "SELECT COUNT(UNIQUE Warehouse) FROM Boxes WHERE Contents LIKE 'Rocks'",
          "SELECT DISTINCT COUNT(Warehouse) FROM Boxes WHERE Contents = 'Rocks'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents LIKE '%Rocks%'",
          "SELECT COUNT(DISTINCT b.Warehouse) FROM Boxes b WHERE b.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents IN ('Rocks')",
          "SELECT DISTINCT COUNT(Warehouse) FROM Boxes WHERE Contents LIKE '%Rocks%'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents LIKE 'Rocks') AS UniqueWarehouses",
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks' GROUP BY Warehouse"
        ]
      ]
    },
    {
      "id": 1747,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT code, location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT b.Code, w.Location FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code",
          "SELECT Boxes.Code AS BoxCode, Warehouses.Location AS WarehouseLocation FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT Code, Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse",
          "SELECT b.Code, w.Location FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code",
          "SELECT Boxes.Code, Location FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT Code, Location FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse",
          "SELECT b.Code AS Box_Code, w.Location AS Warehouse_Location FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code"
        ]
      ]
    },
    {
      "id": 1748,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT code, location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT b.Code, w.Location FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code",
          "SELECT Boxes.Code AS BoxCode, Warehouses.Location AS WarehouseLocation FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT `Code`, `Location` FROM Boxes JOIN Warehouses ON Warehouse = Code",
          "SELECT Boxes.Code, Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse",
          "SELECT b.Code, w.Location FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code",
          "SELECT Code, Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse"
        ]
      ]
    },
    {
      "id": 1749,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'Chicago'",
          "SELECT Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Location = 'Chicago'",
          "SELECT b.Code FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE EXISTS (SELECT Code FROM Warehouses WHERE Code = Boxes.Warehouse AND Location = 'Chicago')",
          "SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1750,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT B.Code FROM Boxes AS B, Warehouses AS W WHERE B.Warehouse = W.Code AND W.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location LIKE 'Chicago')",
          "SELECT B.Code FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location LIKE 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse = ANY (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT B.Code FROM Boxes B WHERE EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location = 'Chicago')"
        ]
      ]
    },
    {
      "id": 1751,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse AS Warehouse_Code, COUNT(Code) AS Box_Count FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(b.Code) FROM Boxes b GROUP BY b.Warehouse",
          "SELECT COUNT(*) AS TotalBoxes, Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(*) AS NumberOfBoxes FROM Boxes GROUP BY Warehouse",
          "SELECT COUNT(Boxes.Code), Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse",
          "SELECT Warehouse, COUNT(Boxes.Code) FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse ORDER BY Warehouse",
          "SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse",
          "SELECT COUNT(*) AS Total, Warehouse FROM Boxes GROUP BY Warehouse"
        ]
      ]
    },
    {
      "id": 1752,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(b.Code) FROM Boxes b GROUP BY b.Warehouse",
          "SELECT COUNT(*), Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(*) FROM Boxes AS b GROUP BY b.Warehouse",
          "SELECT COUNT(b.Code), b.Warehouse FROM Boxes AS b GROUP BY b.Warehouse",
          "SELECT Warehouse, COUNT(Boxes.Code) FROM Boxes GROUP BY Warehouse",
          "SELECT COUNT(*) AS TotalBoxes, Warehouse FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse ORDER BY Warehouse"
        ]
      ]
    },
    {
      "id": 1753,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS TypesOfContents FROM Boxes b GROUP BY b.Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS UniqueContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse AS WarehouseCode, COUNT(DISTINCT Contents) FROM Boxes GROUP BY WarehouseCode",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS DistinctContentsCount FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(DISTINCT b.Contents) FROM Boxes b GROUP BY b.Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS CountOfDistinctContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS NumberOfUniqueContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS DifferentContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS VarietyOfContents FROM Boxes GROUP BY Warehouse"
        ]
      ]
    },
    {
      "id": 1754,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse",
          "SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS TypesOfContents FROM Boxes b GROUP BY b.Warehouse",
          "SELECT Warehouse AS WarehouseCode, COUNT(DISTINCT Contents) AS UniqueContents FROM Boxes GROUP BY WarehouseCode",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS DifferentContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse ORDER BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS ContentVariety FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS ContentCount FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS NumberOfContents FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS DistinctContentsCount FROM Boxes GROUP BY Warehouse",
          "SELECT Warehouse, COUNT(DISTINCT Contents) AS VarietyOfContents FROM Boxes GROUP BY Warehouse"
        ]
      ]
    },
    {
      "id": 1755,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code FROM Warehouses W WHERE (SELECT COUNT(*) FROM Boxes B WHERE B.Warehouse = W.Code) > W.Capacity",
          "SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))",
          "SELECT Warehouses.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Capacity HAVING COUNT(Boxes.Code) > Warehouses.Capacity",
          "SELECT w.Code FROM Warehouses w WHERE EXISTS (SELECT 1 FROM Boxes b WHERE b.Warehouse = w.Code GROUP BY b.Warehouse HAVING COUNT(b.Code) > w.Capacity)",
          "SELECT Code FROM Warehouses AS W WHERE (SELECT COUNT(*) FROM Boxes WHERE Warehouse = W.Code) > Capacity",
          "SELECT W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code, W.Capacity HAVING COUNT(B.Code) > W.Capacity",
          "SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Code HAVING COUNT(B.Code) > W.Capacity",
          "SELECT W.Code FROM Warehouses W INNER JOIN (SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse) AS B ON W.Code = B.Warehouse WHERE B.BoxCount > W.Capacity",
          "SELECT Code FROM Warehouses WHERE (SELECT COUNT(*) FROM Boxes GROUP BY Warehouse HAVING Warehouse = Code) > Capacity",
          "SELECT W.Code FROM Warehouses W WHERE (SELECT COUNT(B.Code) FROM Boxes B WHERE B.Warehouse = W.Code) > W.Capacity"
        ]
      ]
    },
    {
      "id": 1756,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING COUNT(B.Code) > W.Capacity",
          "SELECT Warehouses.Code FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING COUNT(Boxes.Code) > Warehouses.Capacity",
          "SELECT w.Code FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code HAVING COUNT(b.Code) > w.Capacity",
          "SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))",
          "SELECT wh.Code FROM Warehouses wh WHERE (SELECT COUNT(*) FROM Boxes WHERE Warehouse = wh.Code) > wh.Capacity",
          "SELECT wh.Code FROM Warehouses AS wh JOIN Boxes AS bx ON wh.Code = bx.Warehouse GROUP BY wh.Code HAVING COUNT(bx.Code) > wh.Capacity",
          "SELECT Code FROM Warehouses WHERE (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code) > Capacity",
          "SELECT wh.Code FROM Warehouses wh LEFT JOIN Boxes bx ON wh.Code = bx.Warehouse GROUP BY wh.Code HAVING COUNT(bx.Code) > wh.Capacity",
          "SELECT DISTINCT Warehouses.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Capacity HAVING COUNT(Boxes.Code) > Warehouses.Capacity",
          "SELECT wh.Code FROM Warehouses wh WHERE EXISTS (SELECT 1 FROM Boxes bx WHERE bx.Warehouse = wh.Code GROUP BY bx.Warehouse HAVING COUNT(bx.Code) > wh.Capacity)"
        ]
      ]
    },
    {
      "id": 1757,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT SUM(b.Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago'",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location <> 'Chicago')",
          "SELECT SUM(Value) FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code AND w.Location NOT LIKE 'Chicago'",
          "SELECT SUM(b.Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location NOT IN ('Chicago')",
          "SELECT SUM(Value) FROM Boxes WHERE NOT EXISTS (SELECT 1 FROM Warehouses WHERE Location = 'Chicago' AND Code = Warehouse)",
          "SELECT SUM(Value) FROM Boxes b WHERE NOT EXISTS (SELECT * FROM Warehouses w WHERE w.Location = 'Chicago' AND w.Code = b.Warehouse)",
          "SELECT SUM(b.Value) FROM Boxes b LEFT JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago'",
          "SELECT SUM(Value) FROM Boxes b WHERE b.Warehouse NOT IN (SELECT Code FROM Warehouses w WHERE w.Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location NOT LIKE 'Chicago')"
        ]
      ]
    },
    {
      "id": 1758,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location <> 'Chicago'",
          "SELECT SUM(B.Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location != 'Chicago'",
          "SELECT SUM(Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location NOT IN ('Chicago')",
          "SELECT SUM(boxes.Value) FROM boxes INNER JOIN warehouses ON boxes.Warehouse = warehouses.Code WHERE NOT (warehouses.Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code AND Warehouses.Location <> 'Chicago'",
          "SELECT SUM(Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location NOT LIKE 'Chicago'",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location <> 'Chicago')",
          "SELECT SUM(Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location <> 'Chicago'",
          "SELECT SUM(Value) FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago'",
          "SELECT SUM(Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location NOT IN ('Chicago')"
        ]
      ]
    },
    {
      "id": 1759,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name",
          "SELECT U.University_Name, U.City, U.State FROM university AS U ORDER BY U.University_Name ASC",
          "SELECT `University_Name`, `City`, `State` FROM `university` ORDER BY `University_Name` ASC",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY University_Name ASC",
          "SELECT U.University_Name, U.City, U.State FROM university U ORDER BY U.University_Name ASC",
          "SELECT university.University_Name AS Name, university.City AS City, university.State AS State FROM university ORDER BY university.University_Name ASC",
          "SELECT * FROM university ORDER BY University_Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY University_Name"
        ]
      ]
    },
    {
      "id": 1760,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name, City, State FROM university ORDER BY University_Name",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name",
          "SELECT `University_Name`, `City`, `State` FROM `university` ORDER BY `University_Name` ASC",
          "SELECT U.University_Name, U.City, U.State FROM university AS U ORDER BY U.University_Name ASC",
          "SELECT university.University_Name AS Name, university.City AS City, university.State AS State FROM university ORDER BY Name",
          "SELECT U.University_Name AS University, U.City AS Location_City, U.State AS Location_State FROM university U ORDER BY University",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY University_Name ASC",
          "SELECT * FROM university ORDER BY University_Name",
          "SELECT University_Name, City, State FROM university ORDER BY 1",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name ASC"
        ]
      ]
    },
    {
      "id": 1761,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION ALL SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State LIKE 'Illinois' OR State LIKE 'Ohio'",
          "SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State = 'IL' OR State = 'OH'",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'IL' OR State = 'OH'",
          "SELECT COUNT(*) FROM university WHERE State IN ('IL', 'OH')",
          "SELECT COUNT(*) FROM university WHERE State = 'IL' UNION ALL SELECT COUNT(*) FROM university WHERE State = 'OH'"
        ]
      ]
    },
    {
      "id": 1762,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION ALL SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State LIKE 'Illinois' OR State LIKE 'Ohio'",
          "SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State = 'IL' OR State = 'OH'",
          "SELECT COUNT(*) FROM university WHERE State IN ('IL', 'OH')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'IL' OR State = 'OH'",
          "SELECT COUNT(*) FROM university WHERE State LIKE 'IL' OR State LIKE 'OH'"
        ]
      ]
    },
    {
      "id": 1763,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university",
          "SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university",
          "SELECT maximum(Enrollment), average(Enrollment), minimum(Enrollment) FROM university",
          "SELECT MAXIMUM(Enrollment), AVERAGE(Enrollment), MINIMUM(Enrollment) FROM university",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, AVG(Enrollment) AS AverageEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM university",
          "SELECT MAX(Enrollment) Maximum, AVG(Enrollment) Average, MIN(Enrollment) Minimum FROM university",
          "SELECT MAX(Enrollment) \"Maximum Enrollment\", AVG(Enrollment) \"Average Enrollment\", MIN(Enrollment) \"Minimum Enrollment\" FROM university",
          "SELECT MAX(Enrollment) as 'Max Enrollment', AVG(Enrollment) as 'Avg Enrollment', MIN(Enrollment) as 'Min Enrollment' FROM university",
          "SELECT MAX(Enrollment) max_enrollment, AVG(Enrollment) avg_enrollment, MIN(Enrollment) min_enrollment FROM university",
          "SELECT MAX(Enrollment) Maximum_Enrollment, AVG(Enrollment) Average_Enrollment, MIN(Enrollment) Minimum_Enrollment FROM university"
        ]
      ]
    },
    {
      "id": 1764,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university",
          "SELECT max(Enrollment), avg(Enrollment), min(Enrollment) FROM university",
          "SELECT MAX(`Enrollment`), AVG(`Enrollment`), MIN(`Enrollment`) FROM `university`",
          "SELECT MAX(u.Enrollment), AVG(u.Enrollment), MIN(u.Enrollment) FROM university u",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, AVG(Enrollment) AS AverageEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM university",
          "SELECT MAX(Enrollment) Maximum, AVG(Enrollment) Average, MIN(Enrollment) Minimum FROM university",
          "SELECT MAX(Enrollment) \"Max Enrollment\", AVG(Enrollment) \"Average Enrollment\", MIN(Enrollment) \"Min Enrollment\" FROM university",
          "SELECT MAX(Enrollment) MaxEnroll, AVG(Enrollment) AvgEnroll, MIN(Enrollment) MinEnroll FROM university",
          "SELECT MAX(Enrollment) as MaxEnrollment, AVG(Enrollment) as AvgEnrollment, MIN(Enrollment) as MinEnrollment FROM university",
          "SELECT MAX(Enrollment) Max_Enrollment, AVG(Enrollment) Avg_Enrollment, MIN(Enrollment) Min_Enrollment FROM university"
        ]
      ]
    },
    {
      "id": 1765,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university AS U)",
          "SELECT U.Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university AS U)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(university.Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(U.Enrollment) FROM university U)",
          "SELECT Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(U2.Enrollment) FROM university AS U2)",
          "SELECT U.Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university GROUP BY University_ID)"
        ]
      ]
    },
    {
      "id": 1766,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT u.Team_Name FROM university u WHERE u.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university AS uni)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(u.Enrollment) FROM university u)",
          "SELECT u.Team_Name FROM university AS u WHERE u.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(uni.Enrollment) FROM university uni)",
          "SELECT Team_Name FROM university u WHERE u.Enrollment > (SELECT AVG(university.Enrollment) FROM university)",
          "SELECT u.Team_Name FROM university u WHERE u.Enrollment > (SELECT AVG(university.Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university GROUP BY University_ID)"
        ]
      ]
    },
    {
      "id": 1767,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT DISTINCT Home_Conference FROM university",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT UNIQUE Home_Conference FROM university",
          "SELECT Home_Conference FROM university WHERE Home_Conference IS NOT NULL",
          "SELECT DISTINCT u.Home_Conference FROM university u",
          "SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference <> ''",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL AND Home_Conference <> ''",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL ORDER BY Home_Conference",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL AND Home_Conference <> '' ORDER BY Home_Conference"
        ]
      ]
    },
    {
      "id": 1768,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT DISTINCT Home_Conference FROM university",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT DISTINCT u.Home_Conference FROM university u",
          "SELECT DISTINCT `Home_Conference` FROM `university`",
          "SELECT Home_Conference FROM university WHERE Home_Conference IS NOT NULL GROUP BY Home_Conference",
          "SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference",
          "SELECT DISTINCT university.Home_Conference FROM university",
          "SELECT DISTINCT Home_Conference AS Conference FROM university",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference <> ''",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1769,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS NumberOfUniversities FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(u.University_ID) FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(*) AS UniversityCount FROM university GROUP BY Home_Conference",
          "SELECT `Home_Conference`, COUNT(`University_ID`) FROM `university` GROUP BY `Home_Conference`",
          "SELECT u.Home_Conference, COUNT(*) FROM university AS u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference ORDER BY Home_Conference",
          "SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference HAVING COUNT(*) > 0",
          "SELECT Home_Conference AS Conference, COUNT(*) AS TotalUniversities FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Total FROM university GROUP BY Home_Conference ORDER BY COUNT(University_ID) DESC"
        ]
      ]
    },
    {
      "id": 1770,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(u.University_ID) AS University_Count FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Num_Universities FROM university GROUP BY Home_Conference",
          "SELECT `Home_Conference`, COUNT(*) AS `Total_Universities` FROM `university` GROUP BY `Home_Conference`",
          "SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(*) FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference ORDER BY Home_Conference",
          "SELECT Home_Conference, COUNT(*) AS Count_of_Universities FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(u.University_ID) FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Total_Universities FROM university GROUP BY Home_Conference"
        ]
      ]
    },
    {
      "id": 1771,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT u.State FROM university u GROUP BY u.State ORDER BY COUNT(u.University_ID) DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 State FROM university GROUP BY State ORDER BY COUNT(*) DESC",
          "SELECT State, COUNT(*) AS UniversityCount FROM university GROUP BY State ORDER BY UniversityCount DESC LIMIT 1",
          "SELECT State FROM (SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State) AS StateCounts ORDER BY num_universities DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM university GROUP BY State) AS Counts)",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1",
          "SELECT u.State FROM university AS u GROUP BY u.State ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC, State ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1772,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT u.State FROM university u GROUP BY u.State ORDER BY COUNT(u.University_ID) DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1",
          "SELECT u.State FROM university AS u GROUP BY u.State ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 State FROM university GROUP BY State ORDER BY COUNT(*) DESC",
          "SELECT State FROM (SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State) AS subquery ORDER BY num_universities DESC LIMIT 1",
          "SELECT State, COUNT(*) AS UniversityCount FROM university GROUP BY State ORDER BY UniversityCount DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM university GROUP BY State) AS subquery)",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC FETCH FIRST ROW ONLY",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1773,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT `Home_Conference` FROM `university` GROUP BY `Home_Conference` HAVING AVG(`Enrollment`) > 2000",
          "SELECT university.Home_Conference FROM university GROUP BY university.Home_Conference HAVING AVG(university.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING average(Enrollment) > 2000",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IN (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000)",
          "SELECT Home_Conference, AVG(Enrollment) AS AvgEnrollment FROM university GROUP BY Home_Conference HAVING AvgEnrollment > 2000",
          "SELECT u.Home_Conference FROM university AS u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000"
        ]
      ]
    },
    {
      "id": 1774,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT university.Home_Conference FROM university GROUP BY university.Home_Conference HAVING AVG(university.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university AS u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT university.Home_Conference FROM university GROUP BY university.Home_Conference HAVING AVG(university.Enrollment) > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university AS u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000"
        ]
      ]
    },
    {
      "id": 1775,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference ORDER BY SUM(u.Enrollment) ASC LIMIT 1",
          "SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1",
          "SELECT u.Home_Conference, SUM(u.Enrollment) AS Total_Enrollment FROM university AS u GROUP BY u.Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC FETCH FIRST 1 ROW ONLY",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference ORDER BY SUM(u.Enrollment) ASC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC",
          "SELECT TOP 1 u.Home_Conference FROM university u GROUP BY u.Home_Conference ORDER BY SUM(u.Enrollment) ASC",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(Total_Enrollment) FROM (SELECT SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference) AS SubQuery)",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING SUM(u.Enrollment) = (SELECT MIN(Total_Enrollment) FROM (SELECT SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference) AS SubQuery)"
        ]
      ]
    },
    {
      "id": 1776,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference ORDER BY SUM(u.Enrollment) ASC",
          "SELECT Home_Conference, SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference ORDER BY TotalEnrollment ASC",
          "SELECT university.Home_Conference FROM university GROUP BY university.Home_Conference ORDER BY SUM(university.Enrollment) ASC",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(SUM(Enrollment)) FROM university GROUP BY Home_Conference)",
          "SELECT u.Home_Conference, SUM(u.Enrollment) AS TotalEnrollment FROM university u GROUP BY u.Home_Conference ORDER BY TotalEnrollment",
          "SELECT Home_Conference, MIN(TotalEnrollment) FROM (SELECT Home_Conference, SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference) AS SubQuery GROUP BY Home_Conference ORDER BY MIN(TotalEnrollment) ASC",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1",
          "SELECT TOP 1 Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC",
          "SELECT Home_Conference, TotalEnrollment FROM (SELECT Home_Conference, SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference) AS EnrollmentTotals ORDER BY TotalEnrollment ASC"
        ]
      ]
    },
    {
      "id": 1777,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code",
          "SELECT major.Major_Name, major.Major_Code FROM major ORDER BY Major_Code ASC",
          "SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASCENDING",
          "SELECT `Major_Name`, `Major_Code` FROM `major` ORDER BY `Major_Code` ASC",
          "SELECT Major_Name AS Name, Major_Code AS Code FROM major ORDER BY Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code",
          "SELECT m.Major_Name, m.Major_Code FROM major m ORDER BY m.Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC"
        ]
      ]
    },
    {
      "id": 1778,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code",
          "SELECT major.Major_Name, major.Major_Code FROM major ORDER BY Major_Code",
          "SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC",
          "SELECT `Major_Name`, `Major_Code` FROM `major` ORDER BY `Major_Code`",
          "SELECT Major_Name AS Name, Major_Code AS Code FROM major ORDER BY Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASCENDING",
          "SELECT Major_Name, Major_Code FROM major ORDER BY 2",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC, Major_Name ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code, Major_Name"
        ]
      ]
    },
    {
      "id": 1779,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM university u, major m, major_ranking mr WHERE u.University_ID = mr.University_ID AND m.Major_ID = mr.Major_ID AND u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major, major_ranking, university WHERE major.Major_ID = major_ranking.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'",
          "SELECT Major_Name AS Major, Rank AS Ranking FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major JOIN major_ranking USING (Major_ID) JOIN university USING (University_ID) WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major AS m JOIN major_ranking AS mr ON m.Major_ID = mr.Major_ID JOIN university AS u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM major m, major_ranking mr, university u WHERE m.Major_ID = mr.Major_ID AND mr.University_ID = u.University_ID AND u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major CROSS JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID CROSS JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'"
        ]
      ]
    },
    {
      "id": 1780,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT major_ranking.Rank, major.Major_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE university.University_Name = 'Augustana College'",
          "SELECT mr.Rank, m.Major_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND u.University_Name = 'Augustana College'",
          "SELECT R.Rank, M.Major_Name FROM university AS U INNER JOIN major_ranking AS R ON U.University_ID = R.University_ID INNER JOIN major AS M ON R.Major_ID = M.Major_ID WHERE U.University_Name = 'Augustana College'",
          "SELECT major_ranking.Rank, major.Major_Name FROM major_ranking INNER JOIN major ON major_ranking.Major_ID = major.Major_ID INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.University_Name = 'Augustana College'",
          "SELECT R.Rank, M.Major_Name FROM university U JOIN major_ranking R ON U.University_ID = R.University_ID JOIN major M ON R.Major_ID = M.Major_ID WHERE U.University_Name = 'Augustana College'",
          "SELECT Rank, Major_Name FROM major_ranking, major, university WHERE major_ranking.University_ID = university.University_ID AND major_ranking.Major_ID = major.Major_ID AND university.University_Name = 'Augustana College'",
          "SELECT mr.Rank, m.Major_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT major_ranking.Rank, major.Major_Name FROM major_ranking JOIN major ON major_ranking.Major_ID = major.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.University_Name = 'Augustana College'",
          "SELECT R.Rank, M.Major_Name FROM university AS U, major_ranking AS R, major AS M WHERE U.University_ID = R.University_ID AND R.Major_ID = M.Major_ID AND U.University_Name = 'Augustana College'",
          "SELECT major_ranking.Rank, major.Major_Name FROM major_ranking, major, university WHERE major_ranking.Major_ID = major.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'"
        ]
      ]
    },
    {
      "id": 1781,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT university.University_Name, university.City, university.State FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major_ranking.Rank = 1 AND major.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university AS U, major_ranking AS MR, major AS M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U LEFT JOIN major_ranking MR ON U.University_ID = MR.University_ID LEFT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U RIGHT JOIN major_ranking MR ON U.University_ID = MR.University_ID RIGHT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U CROSS JOIN major_ranking MR ON U.University_ID = MR.University_ID CROSS JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U NATURAL JOIN major_ranking MR NATURAL JOIN major M WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR USING (University_ID) JOIN major M USING (Major_ID) WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting' ORDER BY U.University_Name"
        ]
      ]
    },
    {
      "id": 1782,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1",
          "SELECT University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1)",
          "SELECT u.University_Name, u.City, u.State FROM university AS u INNER JOIN major_ranking AS mr ON u.University_ID = mr.University_ID INNER JOIN major AS m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1",
          "SELECT u.University_Name, u.City, u.State FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND mr.Rank = 1",
          "SELECT University_Name, City, State FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank = 1)",
          "SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr.Rank = 1",
          "SELECT u.University_Name, u.City, u.State FROM university u, major_ranking mr WHERE u.University_ID = mr.University_ID AND mr.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr.Rank = 1",
          "SELECT u.University_Name, u.City, u.State FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1 AND mr.University_ID = u.University_ID)",
          "SELECT u.University_Name, u.City, u.State FROM university u WHERE u.University_ID = (SELECT mr.University_ID FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1)",
          "SELECT University_Name, City, State FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 AND Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting'))"
        ]
      ]
    },
    {
      "id": 1783,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN major_ranking M ON U.University_ID = M.University_ID WHERE M.Rank = 1 GROUP BY U.University_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.University_Name FROM university AS U INNER JOIN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1) AS Ranked ON U.University_ID = Ranked.University_ID",
          "SELECT TOP 1 U.University_Name FROM university U, major_ranking M WHERE U.University_ID = M.University_ID AND M.Rank = 1 GROUP BY U.University_ID ORDER BY COUNT(M.Major_ID) DESC",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking GROUP BY University_ID HAVING Rank = 1 ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.University_Name FROM university U JOIN major_ranking M ON U.University_ID = M.University_ID AND M.Rank = 1 GROUP BY U.University_ID ORDER BY COUNT(M.Major_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking M WHERE M.University_ID = U.University_ID AND M.Rank = 1 GROUP BY M.University_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID))",
          "SELECT U.University_Name FROM university U INNER JOIN major_ranking M ON U.University_ID = M.University_ID WHERE M.Rank = 1 GROUP BY U.University_ID HAVING COUNT(M.Major_ID) = (SELECT MAX(COUNT(*)) FROM major_ranking WHERE Rank = 1 GROUP BY University_ID)",
          "SELECT U.University_Name FROM (SELECT University_ID, COUNT(*) AS MajorCount FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY MajorCount DESC LIMIT 1) AS SubQuery JOIN university U ON SubQuery.University_ID = U.University_ID"
        ]
      ]
    },
    {
      "id": 1784,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u, major_ranking mr WHERE u.University_ID = mr.University_ID AND mr.Rank = 1 GROUP BY u.University_ID ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1",
          "SELECT TOP 1 u.University_Name FROM university u INNER JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_ID ORDER BY COUNT(mr.Major_ID) DESC",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(Major_ID) DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID = (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1 GROUP BY mr.University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1) AS ranked ON u.University_ID = ranked.University_ID",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.University_ID = u.University_ID AND mr.Rank = 1 GROUP BY mr.University_ID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS counts))",
          "SELECT u.University_Name FROM university u JOIN (SELECT University_ID, COUNT(*) AS cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY cnt DESC LIMIT 1) mr ON u.University_ID = mr.University_ID",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1 GROUP BY mr.University_ID HAVING COUNT(mr.Major_ID) = (SELECT MAX(c) FROM (SELECT COUNT(Major_ID) AS c FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS max_count))"
        ]
      ]
    },
    {
      "id": 1785,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT JOIN major_ranking m ON u.University_ID = m.University_ID WHERE m.Rank != 1 OR m.Rank IS NULL",
          "SELECT University_Name FROM university WHERE NOT EXISTS (SELECT 1 FROM major_ranking WHERE University_ID = university.University_ID AND Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT University_Name FROM university EXCEPT SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT OUTER JOIN major_ranking m ON u.University_ID = m.University_ID AND m.Rank = 1 WHERE m.University_ID IS NULL",
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT DISTINCT University_ID FROM major_ranking WHERE Rank = 1)"
        ]
      ]
    },
    {
      "id": 1786,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT JOIN major_ranking m ON u.University_ID = m.University_ID WHERE m.Rank != 1 OR m.Rank IS NULL",
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT University_Name FROM university EXCEPT SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)",
          "SELECT University_Name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT OUTER JOIN major_ranking m ON u.University_ID = m.University_ID AND m.Rank = 1 WHERE m.University_ID IS NULL",
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)"
        ]
      ]
    },
    {
      "id": 1787,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' INTERSECT SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education'",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')) AND University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.University_ID = u.University_ID) AND EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' AND mr.University_ID = u.University_ID)",
          "SELECT DISTINCT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name IN ('Accounting', 'Urban Education') GROUP BY u.University_Name HAVING COUNT(DISTINCT m.Major_Name) = 2",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting') INTERSECT SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education')",
          "SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') INTERSECT SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) AS mr ON u.University_ID = mr.University_ID",
          "SELECT u.University_Name FROM university u WHERE (SELECT COUNT(DISTINCT m.Major_Name) FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name IN ('Accounting', 'Urban Education') AND mr.University_ID = u.University_ID) = 2",
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' UNION SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' HAVING COUNT(DISTINCT m.Major_Name) = 2",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Accounting') AND mr.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Urban Education')))",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT * FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.University_ID = u.University_ID) AND EXISTS (SELECT * FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' AND mr.University_ID = u.University_ID)"
        ]
      ]
    },
    {
      "id": 1788,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' INTERSECT SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education'",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')) INTERSECT SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "SELECT DISTINCT U.University_Name FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND (M.Major_Name = 'Accounting' OR M.Major_Name = 'Urban Education') GROUP BY U.University_Name HAVING COUNT(DISTINCT M.Major_Name) = 2",
          "SELECT U1.University_Name FROM university U1 JOIN major_ranking MR1 ON U1.University_ID = MR1.University_ID JOIN major M1 ON MR1.Major_ID = M1.Major_ID WHERE M1.Major_Name = 'Accounting' AND EXISTS (SELECT 1 FROM major_ranking MR2 JOIN major M2 ON MR2.Major_ID = M2.Major_ID WHERE M2.Major_Name = 'Urban Education' AND MR2.University_ID = MR1.University_ID)",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.University_ID = U.University_ID) AND EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education' AND MR.University_ID = U.University_ID)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting') AND U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education')",
          "SELECT DISTINCT U.University_Name FROM university U INNER JOIN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' UNION SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education') AS MR ON U.University_ID = MR.University_ID",
          "SELECT U.University_Name FROM university U JOIN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name IN ('Accounting', 'Urban Education') GROUP BY MR.University_ID HAVING COUNT(DISTINCT M.Major_Name) = 2) AS J ON U.University_ID = J.University_ID",
          "SELECT U.University_Name FROM university U WHERE (SELECT COUNT(DISTINCT M.Major_Name) FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name IN ('Accounting', 'Urban Education')) = 2",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR WHERE MR.Major_ID = (SELECT M.Major_ID FROM major M WHERE M.Major_Name = 'Accounting')) AND U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR WHERE MR.Major_ID = (SELECT M.Major_ID FROM major M WHERE M.Major_Name = 'Urban Education'))"
        ]
      ]
    },
    {
      "id": 1789,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Rank FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'",
          "SELECT U.University_Name AS Name, O.Rank AS Ranking FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U FULL OUTER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1790,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT university.University_Name, overall_ranking.Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND university.State = 'Wisconsin'",
          "SELECT U.University_Name AS Name, O.Rank AS Rank FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university AS U JOIN overall_ranking AS O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT University_Name, Rank FROM university INNER JOIN overall_ranking USING(University_ID) WHERE State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1791,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1",
          "SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1",
          "SELECT u.University_Name FROM university AS u, overall_ranking AS r WHERE u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1",
          "SELECT TOP 1 University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT (SELECT University_Name FROM university WHERE University_ID = r.University_ID) AS University_Name FROM overall_ranking r ORDER BY r.Research_point DESC LIMIT 1",
          "SELECT University_Name FROM university u WHERE EXISTS (SELECT 1 FROM overall_ranking r WHERE r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1)",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC FETCH FIRST ROW ONLY)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1792,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT u.University_Name FROM university u, overall_ranking r WHERE u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1",
          "SELECT TOP 1 u.University_Name FROM university u INNER JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Research_point DESC",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT TOP 1 University_ID FROM overall_ranking ORDER BY Research_point DESC)",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM overall_ranking r WHERE r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1)",
          "SELECT University_Name FROM university u JOIN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1) r ON u.University_ID = r.University_ID",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1) r ON u.University_ID = r.University_ID"
        ]
      ]
    },
    {
      "id": 1793,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT University_Name FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC",
          "SELECT U.University_Name FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point",
          "SELECT U.University_Name FROM university AS U INNER JOIN overall_ranking AS O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point",
          "SELECT U.University_Name FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U LEFT OUTER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC"
        ]
      ]
    },
    {
      "id": 1794,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT University_Name FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point ASC",
          "SELECT U.University_Name FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university JOIN overall_ranking USING (University_ID) ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT U.University_Name FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC"
        ]
      ]
    },
    {
      "id": 1795,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)",
          "SELECT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)",
          "SELECT u.University_Name FROM university u INNER JOIN major_ranking mr ON u.University_ID = mr.University_ID INNER JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking, major WHERE major_ranking.Major_ID = major.Major_ID AND Major_Name = 'Accounting' AND Rank <= 3)",
          "SELECT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND mr.Rank <= 3",
          "SELECT u.University_Name FROM university u INNER JOIN major_ranking mr ON u.University_ID = mr.University_ID INNER JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)"
        ]
      ]
    },
    {
      "id": 1796,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)",
          "SELECT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank <= 3",
          "SELECT u.University_Name FROM university AS u JOIN major_ranking AS mr ON u.University_ID = mr.University_ID JOIN major AS m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT DISTINCT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3 AND mr.University_ID = u.University_ID)",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE Major_Name = 'Accounting' AND Rank <= 3)",
          "SELECT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND mr.Rank <= 3",
          "SELECT University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3"
        ]
      ]
    },
    {
      "id": 1797,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(Enrollment) FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT SUM(u.Enrollment) FROM university u, overall_ranking o WHERE u.University_ID = o.University_ID AND o.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university u INNER JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)"
        ]
      ]
    },
    {
      "id": 1798,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(Enrollment) FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT TOTAL(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university u, overall_ranking r WHERE u.University_ID = r.University_ID AND r.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5 GROUP BY University_ID)",
          "SELECT SUM(Enrollment) FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID AND r.Rank <= 5",
          "SELECT SUM(u.Enrollment) FROM university AS u JOIN overall_ranking AS r ON u.University_ID = r.University_ID WHERE r.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE EXISTS (SELECT 1 FROM overall_ranking WHERE University_ID = university.University_ID AND Rank <= 5)",
          "SELECT SUM(Enrollment) FROM university u WHERE u.University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)"
        ]
      ]
    },
    {
      "id": 1799,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT university.University_Name, overall_ranking.Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS SubQuery)",
          "SELECT U.University_Name, O.Citation_point FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND O.Reputation_point >= (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 1 OFFSET 2)",
          "SELECT U.University_Name, O.Citation_point FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Reputation_point IN (SELECT TOP 3 Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC)",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= ALL (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC FETCH FIRST 3 ROWS ONLY)",
          "SELECT U.University_Name, O.Citation_point FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U CROSS JOIN overall_ranking O WHERE U.University_ID = O.University_ID AND O.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT Reputation_point FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC) AS TempTable LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT DISTINCT TOP 3 Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC)"
        ]
      ]
    },
    {
      "id": 1800,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT u.University_Name, o.Citation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC LIMIT 3",
          "SELECT University_Name, Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point DESC LIMIT 3",
          "SELECT university.University_Name, overall_ranking.Citation_point FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point DESC LIMIT 3",
          "SELECT u.University_Name AS Name, o.Citation_point AS Citation FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT u.University_Name, o.Citation_point FROM university u, overall_ranking o WHERE u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC LIMIT 3",
          "SELECT `University_Name`, `Citation_point` FROM `university` JOIN `overall_ranking` USING (`University_ID`) ORDER BY `Reputation_point` DESC LIMIT 3",
          "SELECT TOP 3 u.University_Name, o.Citation_point FROM university u INNER JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC",
          "SELECT u.University_Name, o.Citation_point FROM university u LEFT JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC LIMIT 3",
          "SELECT u.University_Name, o.Citation_point FROM university u RIGHT JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC LIMIT 3",
          "SELECT u.University_Name, o.Citation_point FROM university u CROSS JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Reputation_point IS NOT NULL ORDER BY o.Reputation_point DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1801,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2;",
          "SELECT State FROM university GROUP BY State HAVING COUNT(University_ID) > 2 AND MIN(Enrollment) < 3000;",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2;",
          "SELECT u.State FROM university AS u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(*) > 2;",
          "SELECT State FROM (SELECT State, Enrollment FROM university) AS sub WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;",
          "SELECT State FROM university GROUP BY State HAVING SUM(CASE WHEN Enrollment < 3000 THEN 1 ELSE 0 END) > 2;",
          "SELECT u.State FROM university u GROUP BY u.State HAVING SUM(CASE WHEN u.Enrollment < 3000 THEN 1 ELSE 0 END) > 2;",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2;",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(DISTINCT u.University_ID) > 2;"
        ]
      ]
    },
    {
      "id": 1802,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2",
          "SELECT State FROM university GROUP BY State HAVING COUNT(University_ID) > 2 AND MIN(Enrollment) < 3000",
          "SELECT State FROM (SELECT State, Enrollment FROM university) AS sub WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2",
          "SELECT u.State FROM university AS u GROUP BY u.State HAVING SUM(CASE WHEN u.Enrollment < 3000 THEN 1 ELSE 0 END) > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(*) > 2",
          "SELECT State FROM university GROUP BY State HAVING COUNT(University_ID) WHERE Enrollment < 3000 > 2",
          "SELECT State, COUNT(*) AS UniCount FROM university WHERE Enrollment < 3000 GROUP BY State HAVING UniCount > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2"
        ]
      ]
    },
    {
      "id": 1803,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating IS NULL",
          "SELECT Title FROM Movies WHERE Rating = ''",
          "SELECT M.Title FROM Movies M WHERE M.Rating IS NULL",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE M.Rating IS NULL",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Code AND Rating IS NOT NULL)",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Rating IS NOT NULL)",
          "SELECT Title FROM Movies WHERE LENGTH(Rating) = 0",
          "SELECT Title FROM Movies WHERE Rating = 'UNRATED'",
          "SELECT Title FROM Movies WHERE UPPER(Rating) = 'NONE'",
          "SELECT Title FROM Movies WHERE TRIM(Rating) = ''"
        ]
      ]
    },
    {
      "id": 1804,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating IS NULL",
          "SELECT Title FROM Movies WHERE Rating = ''",
          "SELECT Title FROM Movies m WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters mt WHERE mt.Movie = m.Code AND mt.Movie IS NOT NULL)",
          "SELECT Title FROM Movies WHERE Rating IS NULL OR Rating = ''",
          "SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Movie IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies m WHERE m.Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Code)",
          "SELECT Title FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1805,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating LIKE 'G'",
          "SELECT M.Title FROM Movies M WHERE M.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL",
          "SELECT Title FROM Movies WHERE Rating = 'G' ORDER BY Title",
          "SELECT Title FROM Movies WHERE Rating = 'G' GROUP BY Title",
          "SELECT DISTINCT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' LIMIT 100",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Code > 0",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Title <> ''"
        ]
      ]
    },
    {
      "id": 1806,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating LIKE 'G'",
          "SELECT M.Title FROM Movies M WHERE M.Rating = 'G'",
          "SELECT M.Title FROM Movies AS M WHERE M.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND 1=1",
          "SELECT Title FROM Movies WHERE Rating IN ('G')",
          "SELECT Title FROM Movies WHERE Rating = 'G' ORDER BY Title",
          "SELECT Title FROM Movies WHERE Rating = 'G' GROUP BY Title",
          "SELECT Title FROM Movies WHERE Rating = 'G' LIMIT 100",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1807,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon'",
          "SELECT (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie) AS MovieTitle FROM MovieTheaters WHERE Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon'",
          "SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' LIMIT 1)",
          "SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'"
        ]
      ]
    },
    {
      "id": 1808,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon'",
          "SELECT movie_title.Title FROM Movies AS movie_title JOIN MovieTheaters ON movie_title.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie) AS MovieTitle FROM MovieTheaters WHERE Name = 'Odeon'",
          "SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon'",
          "SELECT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE Movies.Code = Movie AND Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1809,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie",
          "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT title AS MovieName, name AS TheaterName FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title, t.Name FROM Movies m, MovieTheaters t WHERE m.Code = t.Movie",
          "SELECT Title, Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT MovieTheaters.Name, Movies.Title FROM Movies JOIN MovieTheaters ON MovieTheaters.Movie = Movies.Code",
          "SELECT Title AS Movie_Title, Name AS Theater_Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT DISTINCT Movies.Title, MovieTheaters.Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title AS 'Movie Title', t.Name AS 'Theater Name' FROM Movies m INNER JOIN MovieTheaters t ON m.Code = t.Movie",
          "SELECT Title, Name FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie"
        ]
      ]
    },
    {
      "id": 1810,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie",
          "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT title AS MovieTitle, name AS TheaterName FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie), Name FROM MovieTheaters",
          "SELECT Movies.Title, MovieTheaters.Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT (SELECT Title FROM Movies WHERE Code = MT.Movie) AS MovieName, MT.Name AS TheaterName FROM MovieTheaters MT",
          "SELECT M.Title, T.Name FROM Movies AS M, MovieTheaters AS T WHERE M.Code = T.Movie",
          "SELECT Title, Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT MovieTheaters.Name, (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT Title AS Movie_Name, Name AS Theater_Name FROM Movies JOIN MovieTheaters ON Code = Movie"
        ]
      ]
    },
    {
      "id": 1811,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(1) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating LIKE 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' COLLATE NOCASE",
          "SELECT COUNT(*) FROM Movies WHERE UPPER(Rating) = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE LOWER(Rating) = 'g'",
          "SELECT COUNT(*) FROM Movies WHERE TRIM(Rating) = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating IN ('G')",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' AND Rating IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1812,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(1) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating LIKE 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' COLLATE NOCASE",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE UPPER(Rating) = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE LOWER(Rating) = 'g'",
          "SELECT COUNT(*) FROM Movies WHERE Rating IN ('G')",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' AND Code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1813,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters)",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT Movie FROM MovieTheaters GROUP BY Movie)",
          "SELECT COUNT(DISTINCT m.Code) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie",
          "SELECT COUNT(UNIQUE mt.Movie) FROM MovieTheaters mt",
          "SELECT COUNT(*) FROM (SELECT DISTINCT mt.Movie FROM MovieTheaters mt)",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1814,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING Movie IS NOT NULL)",
          "SELECT COUNT(DISTINCT m.Code) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie",
          "SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters) AS UniqueMovies",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie > 0",
          "SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code"
        ]
      ]
    },
    {
      "id": 1815,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT m.Code) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters) AS distinct_movies",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL) AS distinct_movies",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie > 0",
          "SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code"
        ]
      ]
    },
    {
      "id": 1816,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT m.Code) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters) AS UniqueMovies",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie > 0",
          "SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters GROUP BY Movie",
          "SELECT DISTINCT COUNT(Movie) FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1817,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Code) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
          "SELECT COUNT(1) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MovieTheaters.Name) FROM MovieTheaters",
          "SELECT COUNT(MovieTheaters.Code) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Code FROM MovieTheaters) AS UniqueTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Name FROM MovieTheaters) AS UniqueTheaterNames",
          "SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1818,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Code) FROM MovieTheaters",
          "SELECT COUNT(Code) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
          "SELECT COUNT(1) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Code FROM MovieTheaters) AS unique_theaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Name FROM MovieTheaters) AS unique_theater_names",
          "SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters",
          "SELECT COUNT(*) FROM MovieTheaters GROUP BY Code",
          "SELECT COUNT(DISTINCT MovieTheaters.Name) FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1819,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Rating FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE M.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title CONTAINS 'Citizen'",
          "SELECT Rating FROM Movies WHERE INSTR(Title, 'Citizen') > 0",
          "SELECT M.Rating FROM Movies AS M WHERE M.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Rating IS NOT NULL",
          "SELECT DISTINCT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT M.Rating FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND M.Title LIKE '%Citizen%')",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' ORDER BY Code"
        ]
      ]
    },
    {
      "id": 1820,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Rating FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE M.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters)",
          "SELECT M.Rating FROM Movies M WHERE M.Title LIKE '%Citizen%' AND EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code)",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT M.Rating FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie AND M.Title LIKE '%Citizen%'",
          "SELECT DISTINCT Movies.Rating FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name IS NOT NULL)",
          "SELECT M.Rating FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE M.Title LIKE '%Citizen%'"
        ]
      ]
    },
    {
      "id": 1821,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G' OR Movies.Rating = 'PG'",
          "SELECT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND (M.Rating = 'G' OR M.Rating = 'PG')",
          "SELECT DISTINCT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters AS MT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating IN ('G', 'PG'))",
          "SELECT Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')"
        ]
      ]
    },
    {
      "id": 1822,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G' OR Movies.Rating = 'PG'",
          "SELECT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND (M.Rating = 'G' OR M.Rating = 'PG')",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters AS MT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND (Movies.Rating = 'G' OR Movies.Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')"
        ]
      ]
    },
    {
      "id": 1823,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND (MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial')",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND (MT.Name = 'Odeon' OR MT.Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))",
          "SELECT DISTINCT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name IN ('Odeon', 'Imperial'))",
          "SELECT Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
          "SELECT DISTINCT Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name = 'Odeon' OR mt.Name = 'Imperial'"
        ]
      ]
    },
    {
      "id": 1824,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND (MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial')",
          "SELECT DISTINCT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND (MT.Name = 'Odeon' OR MT.Name = 'Imperial')",
          "SELECT Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name IN ('Odeon', 'Imperial')",
          "SELECT DISTINCT Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code AND Name IN ('Odeon', 'Imperial'))"
        ]
      ]
    },
    {
      "id": 1825,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon' AND M.Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon' UNION SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Imperial' HAVING COUNT(*) > 1",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' UNION ALL SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial' HAVING COUNT(*) > 1)",
          "SELECT M.Title FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon') AND EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Imperial')",
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT1 ON M.Code = MT1.Movie JOIN MovieTheaters MT2 ON M.Code = MT2.Movie WHERE MT1.Name = 'Odeon' AND MT2.Name = 'Imperial'",
          "SELECT DISTINCT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')"
        ]
      ]
    },
    {
      "id": 1826,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT1, MovieTheaters MT2 WHERE M.Code = MT1.Movie AND M.Code = MT2.Movie AND MT1.Name = 'Odeon' AND MT2.Name = 'Imperial'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon' OR MT.Name = 'Imperial' GROUP BY M.Title HAVING COUNT(*) > 1",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial') GROUP BY Movie HAVING COUNT(*) > 1)",
          "SELECT M.Title FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon') AND EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters MT GROUP BY Movie HAVING SUM(CASE WHEN MT.Name IN ('Odeon', 'Imperial') THEN 1 ELSE 0 END) = 2)",
          "SELECT M.Title FROM Movies M WHERE 2 = (SELECT COUNT(DISTINCT MT.Name) FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name IN ('Odeon', 'Imperial'))"
        ]
      ]
    },
    {
      "id": 1827,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name != 'Odeon' OR MT.Movie IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name LIKE 'Odeon')",
          "SELECT M.Title FROM Movies M WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')",
          "SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT * FROM MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon')",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon')",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Title FROM Movies AS M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters AS MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' AND Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1828,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code AND Name = 'Odeon')",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name = 'Odeon' WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name LIKE 'Odeon')",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' AND Movie IS NOT NULL)",
          "SELECT M.Title FROM Movies M LEFT OUTER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name <> 'Odeon' OR MT.Name IS NULL"
        ]
      ]
    },
    {
      "id": 1829,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Title ASC",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC",
          "SELECT Title FROM Movies ORDER BY Title ASCENDING",
          "SELECT Title AS MovieTitle FROM Movies ORDER BY MovieTitle",
          "SELECT Title FROM Movies ORDER BY Title COLLATE NOCASE",
          "SELECT m.Title FROM Movies m ORDER BY m.Title ASC",
          "SELECT Title FROM Movies ORDER BY UPPER(Title)",
          "SELECT Title FROM Movies ORDER BY LOWER(Title) ASC",
          "SELECT Title FROM Movies ORDER BY Title ASC, Code ASC"
        ]
      ]
    },
    {
      "id": 1830,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Title FROM Movies ORDER BY Title ASC",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Title",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC",
          "SELECT Title FROM Movies ORDER BY Title ASCENDING",
          "SELECT m.Title FROM Movies m ORDER BY m.Title",
          "SELECT m.Title FROM Movies AS m ORDER BY m.Title ASC",
          "SELECT Title FROM Movies ORDER BY Title COLLATE NOCASE",
          "SELECT Title FROM Movies ORDER BY UPPER(Title)",
          "SELECT Title FROM Movies ORDER BY LOWER(Title) ASC"
        ]
      ]
    },
    {
      "id": 1831,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Rating",
          "SELECT Title FROM Movies ORDER BY Rating ASC",
          "SELECT M.Title FROM Movies M ORDER BY M.Rating",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Rating",
          "SELECT Title FROM Movies ORDER BY Rating ASCENDING",
          "SELECT Title FROM Movies ORDER BY Rating, Code",
          "SELECT Title FROM Movies ORDER BY Rating, Title",
          "SELECT Title FROM Movies ORDER BY Rating ASC, Code ASC",
          "SELECT Title FROM Movies ORDER BY Rating ASC, Title ASC",
          "SELECT Title FROM Movies ORDER BY Rating, Code ASC"
        ]
      ]
    },
    {
      "id": 1832,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Rating",
          "SELECT M.Title FROM Movies M ORDER BY M.Rating",
          "SELECT Title FROM Movies ORDER BY Rating ASC",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Rating",
          "SELECT Title FROM Movies ORDER BY Rating, Title",
          "SELECT DISTINCT Title FROM Movies ORDER BY Rating",
          "SELECT Title FROM Movies WHERE Rating IS NOT NULL ORDER BY Rating",
          "SELECT Title FROM Movies ORDER BY Rating DESC",
          "SELECT Title AS MovieTitle FROM Movies ORDER BY Rating",
          "SELECT Title FROM Movies ORDER BY Rating ASC, Code DESC"
        ]
      ]
    },
    {
      "id": 1833,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT T2.Name FROM MovieTheaters AS T2 JOIN Movies AS T1 ON T2.Movie = T1.Code GROUP BY T2.Name ORDER BY COUNT(T2.Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name, Movie HAVING COUNT(Movie) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Movie) AS Cnt FROM MovieTheaters GROUP BY Name) AS SubQuery)",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code GROUP BY MT.Name ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Name FROM (SELECT Name, COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name ORDER BY MovieCount DESC) AS RankedTheaters LIMIT 1",
          "SELECT TOP 1 Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE MT.Movie = M.Code) GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC LIMIT 1",
          "SELECT Name, COUNT(Movie) AS TotalMovies FROM MovieTheaters GROUP BY Name ORDER BY TotalMovies DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) >= ALL (SELECT COUNT(Movie) FROM MovieTheaters GROUP BY Name)"
        ]
      ]
    },
    {
      "id": 1834,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1",
          "SELECT MT.Name FROM MovieTheaters MT GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT MT.Name FROM MovieTheaters MT WHERE MT.Movie IS NOT NULL GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Movie HAVING COUNT(Movie) > 0 ORDER BY COUNT(Movie) DESC LIMIT 1",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies) GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1",
          "SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE MT.Movie = M.Code) GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Name FROM (SELECT Name, COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Movie) AS SubQuery ORDER BY MovieCount DESC LIMIT 1",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1835,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Title ORDER BY COUNT(MovieTheaters.Name) DESC LIMIT 1",
          "SELECT (SELECT Title FROM Movies WHERE Code = T.Movie) AS MovieName FROM MovieTheaters T GROUP BY T.Movie ORDER BY COUNT(T.Name) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)",
          "SELECT M.Title FROM Movies M, MovieTheaters T WHERE M.Code = T.Movie GROUP BY M.Title HAVING COUNT(T.Name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Name) AS Cnt FROM MovieTheaters GROUP BY Movie) AS SubQuery)",
          "SELECT Title FROM Movies WHERE Code = (SELECT TOP 1 Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC)",
          "SELECT TOP 1 Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Title ORDER BY COUNT(MovieTheaters.Code) DESC",
          "SELECT Title FROM Movies M WHERE EXISTS (SELECT NULL FROM MovieTheaters T WHERE T.Movie = M.Code GROUP BY T.Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Title FROM (SELECT Movies.Title, COUNT(MovieTheaters.Movie) AS TheaterCount FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Title) AS RankedMovies ORDER BY TheaterCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1836,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Movies.Title ORDER BY COUNT(MovieTheaters.Name) DESC LIMIT 1",
          "SELECT (SELECT Title FROM Movies WHERE Code = Movie) AS FilmName FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)",
          "SELECT M.Title FROM Movies M, MovieTheaters T WHERE M.Code = T.Movie GROUP BY M.Title HAVING COUNT(T.Name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM MovieTheaters GROUP BY Movie) AS SubQuery)",
          "SELECT Title FROM Movies JOIN (SELECT Movie, COUNT(*) AS TheaterCount FROM MovieTheaters GROUP BY Movie ORDER BY TheaterCount DESC LIMIT 1) AS MostPlayed ON Movies.Code = MostPlayed.Movie",
          "SELECT TOP 1 Title FROM Movies WHERE Code = (SELECT TOP 1 Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC)",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM MovieTheaters GROUP BY Movie) TempTable))",
          "SELECT Title FROM Movies AS M JOIN (SELECT Movie, COUNT(*) AS Count FROM MovieTheaters GROUP BY Movie) AS T ON M.Code = T.Movie ORDER BY T.Count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1837,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
          "SELECT COUNT(*), Rating FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) FROM Movies GROUP BY Rating",
          "SELECT COUNT(Code), Rating FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(*) AS NumberOfMovies FROM Movies GROUP BY Rating",
          "SELECT COUNT(*) AS MovieCount, Rating FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(*) AS TotalMovies FROM Movies GROUP BY Rating",
          "SELECT COUNT(*) AS Total, Rating FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Movies.Code) FROM Movies GROUP BY Rating",
          "SELECT COUNT(Movies.Code), Rating FROM Movies GROUP BY Rating"
        ]
      ]
    },
    {
      "id": 1838,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) AS MovieCount FROM Movies GROUP BY Rating",
          "SELECT m.Rating, COUNT(m.Code) FROM Movies m GROUP BY m.Rating",
          "SELECT Rating, COUNT(*) AS TotalMovies FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(1) FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Movies.Code) FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(*) FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating",
          "SELECT Rating, COUNT(*) AS CountOfMovies FROM Movies GROUP BY Rating HAVING COUNT(*) > 0",
          "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating ORDER BY COUNT(*) DESC",
          "SELECT Rating, COUNT(*) AS NumberOfMovies FROM Movies GROUP BY Rating ORDER BY Rating"
        ]
      ]
    },
    {
      "id": 1839,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT count(Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(1) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Code) AS NumberOfMoviesWithRating FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) AS Total FROM Movies WHERE NOT Rating IS NULL",
          "SELECT COUNT(*) FROM Movies WHERE Rating <> ''",
          "SELECT COUNT(*) FROM Movies WHERE Rating > ''",
          "SELECT count(*) FROM Movies WHERE Rating IS NOT NULL AND Rating <> ''",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE LENGTH(Rating) > 0"
        ]
      ]
    },
    {
      "id": 1840,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(1) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) AS NumberOfMoviesWithRating FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE NOT Rating IS NULL",
          "SELECT COUNT(*) FROM Movies WHERE Rating <> ''",
          "SELECT COUNT(*) FROM Movies WHERE Rating > ''",
          "SELECT COUNT(*) FROM Movies WHERE LENGTH(Rating) > 0",
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL AND Rating <> ''"
        ]
      ]
    },
    {
      "id": 1841,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie > 0",
          "SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE M.Code = MT.Movie)",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies)",
          "SELECT Name FROM MovieTheaters AS MT WHERE MT.Movie IS NOT NULL",
          "SELECT MT.Name FROM MovieTheaters MT WHERE MT.Movie IS NOT NULL",
          "SELECT Name FROM MovieTheaters WHERE NOT Movie IS NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie <> ''",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL AND Movie <> 0"
        ]
      ]
    },
    {
      "id": 1842,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT MT.Name FROM MovieTheaters MT WHERE MT.Movie IS NOT NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie > 0",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT Code FROM Movies WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE M.Code = MT.Movie)",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies)",
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Code IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1843,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Code FROM Movies)",
          "SELECT Name FROM MovieTheaters LEFT JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Code IS NULL",
          "SELECT MovieTheaters.Name FROM MovieTheaters LEFT OUTER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Code IS NULL",
          "SELECT Name FROM MovieTheaters WHERE NOT EXISTS (SELECT Code FROM Movies WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Code FROM Movies WHERE Code IS NOT NULL)",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT EXISTS (SELECT Code FROM Movies WHERE MovieTheaters.Movie = Movies.Code)",
          "SELECT Name FROM MovieTheaters AS MT LEFT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Code IS NULL",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Code IS NULL"
        ]
      ]
    },
    {
      "id": 1844,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Code FROM Movies)",
          "SELECT Name FROM MovieTheaters LEFT JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Code IS NULL",
          "SELECT M.Name FROM MovieTheaters AS M WHERE M.Movie IS NULL",
          "SELECT M.Name FROM MovieTheaters M LEFT JOIN Movies Mo ON M.Movie = Mo.Code WHERE Mo.Code IS NULL",
          "SELECT Name FROM MovieTheaters WHERE NOT EXISTS (SELECT Code FROM Movies WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Code FROM Movies WHERE Code IS NOT NULL)",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL OR Movie = ''",
          "SELECT Name FROM MovieTheaters WHERE Movie NOT IN (SELECT Code FROM Movies)"
        ]
      ]
    },
    {
      "id": 1845,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND M.Rating = 'G'",
          "SELECT MovieTheaters.Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters AS MT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters AS MT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'"
        ]
      ]
    },
    {
      "id": 1846,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating = 'G'",
          "SELECT MovieTheaters.Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters AS MT LEFT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters AS MT INNER JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G'"
        ]
      ]
    },
    {
      "id": 1847,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies",
          "SELECT Movies.Title FROM Movies",
          "SELECT title FROM Movies",
          "SELECT movies.title FROM movies",
          "SELECT Title AS MovieTitle FROM Movies",
          "SELECT `Title` FROM `Movies`",
          "SELECT Title FROM Movies;",
          "SELECT m.Title FROM Movies m",
          "SELECT Title FROM Movies WHERE Title IS NOT NULL",
          "SELECT DISTINCT Title FROM Movies"
        ]
      ]
    },
    {
      "id": 1848,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies",
          "SELECT M.Title FROM Movies M",
          "SELECT Movies.Title FROM Movies",
          "SELECT `Title` FROM `Movies`",
          "SELECT Title AS MovieName FROM Movies",
          "SELECT DISTINCT Title FROM Movies",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Title FROM Movies WHERE Title IS NOT NULL",
          "SELECT Movies.Title AS MovieName FROM Movies",
          "SELECT Title FROM Movies GROUP BY Title"
        ]
      ]
    },
    {
      "id": 1849,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Rating FROM Movies",
          "SELECT DISTINCT m.Rating FROM Movies m",
          "SELECT Rating FROM Movies GROUP BY Rating",
          "SELECT DISTINCT(Movies.Rating) FROM Movies",
          "SELECT DISTINCT Movies.Rating FROM Movies",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL",
          "SELECT DISTINCT m.Rating FROM Movies AS m",
          "SELECT DISTINCT Rating FROM Movies ORDER BY Rating",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating <> ''",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL ORDER BY Rating"
        ]
      ]
    },
    {
      "id": 1850,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Rating FROM Movies",
          "SELECT Rating FROM Movies GROUP BY Rating",
          "SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating",
          "SELECT DISTINCT(Rating) FROM Movies",
          "SELECT DISTINCT Movies.Rating FROM Movies",
          "SELECT DISTINCT M.Rating FROM Movies M",
          "SELECT DISTINCT M.Rating FROM Movies AS M",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL",
          "SELECT DISTINCT Rating FROM Movies ORDER BY Rating",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating <> ''"
        ]
      ]
    },
    {
      "id": 1851,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT * FROM Movies WHERE Rating IS NULL",
          "SELECT Movies.* FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL",
          "SELECT M.* FROM Movies M WHERE M.Rating IS NULL",
          "SELECT * FROM Movies WHERE Rating = ''",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL",
          "SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating IS NULL",
          "SELECT * FROM Movies WHERE NOT EXISTS (SELECT Movie FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating IS NOT NULL)",
          "SELECT * FROM Movies m WHERE m.Rating IS NULL",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL OR Rating = ''",
          "SELECT * FROM Movies WHERE Rating IS NULL OR Rating = ''"
        ]
      ]
    },
    {
      "id": 1852,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT * FROM Movies WHERE Rating IS NULL",
          "SELECT Movies.* FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL",
          "SELECT M.* FROM Movies M WHERE M.Rating IS NULL",
          "SELECT * FROM Movies WHERE Rating = ''",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL",
          "SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating IS NULL",
          "SELECT * FROM Movies WHERE NOT EXISTS (SELECT Movie FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating IS NOT NULL)",
          "SELECT * FROM Movies AS M WHERE M.Rating IS NULL",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL OR Rating = ''",
          "SELECT * FROM Movies WHERE Rating IS NULL OR Rating = ''"
        ]
      ]
    },
    {
      "id": 1853,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT Title FROM Movies m WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters mt WHERE mt.Movie = m.Code)",
          "SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Movie IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT mt.Movie FROM MovieTheaters mt)",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT * FROM MovieTheaters WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT Title FROM Movies m LEFT OUTER JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Movie IS NULL",
          "SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1854,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT M.Title FROM Movies M WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code)",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT Movie FROM MovieTheaters WHERE Movies.Code = Movie)",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT)",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL AND Movie <> '')"
        ]
      ]
    },
    {
      "id": 1855,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient WHERE p.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient WHERE Package.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT (SELECT Name FROM Client WHERE AccountNumber = p.Recipient) AS RecipientName FROM Package p WHERE p.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT c.Name FROM Client c, Package p WHERE c.AccountNumber = p.Recipient AND p.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1)",
          "SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC LIMIT 1",
          "SELECT TOP 1 Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package WHERE Weight >= ALL (SELECT Weight FROM Package))"
        ]
      ]
    },
    {
      "id": 1856,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient ORDER BY P.Weight DESC LIMIT 1",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1)",
          "SELECT (SELECT Name FROM Client WHERE AccountNumber = P.Recipient) AS RecipientName FROM Package P ORDER BY P.Weight DESC LIMIT 1",
          "SELECT Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC LIMIT 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1)",
          "SELECT TOP 1 Client.Name FROM Client, Package WHERE Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT TOP 1 Recipient FROM Package ORDER BY Weight DESC)",
          "SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package ORDER BY Weight DESC FETCH FIRST ROW ONLY)",
          "SELECT C.Name FROM Client AS C, Package AS P WHERE C.AccountNumber = P.Recipient ORDER BY P.Weight DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1857,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT SUM(Package.Weight) FROM Package LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) AS TotalWeight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT SUM(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1858,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Client AS C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P LEFT JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Weight) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1859,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT e.Position FROM Employee e WHERE e.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name LIKE 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' LIMIT 1",
          "SELECT e.Position FROM Employee AS e WHERE e.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND Position IS NOT NULL",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' ORDER BY EmployeeID ASC LIMIT 1",
          "SELECT TOP 1 Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' FETCH FIRST 1 ROWS ONLY",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND EmployeeID = (SELECT EmployeeID FROM Employee WHERE Name = 'Amy Wong')"
        ]
      ]
    },
    {
      "id": 1860,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name LIKE 'Amy Wong'",
          "SELECT e.Position FROM Employee e WHERE e.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND Position IS NOT NULL",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' ORDER BY EmployeeID ASC LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' ORDER BY EmployeeID DESC LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND EmployeeID = (SELECT EmployeeID FROM Employee WHERE Name = 'Amy Wong')",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND EmployeeID IN (SELECT EmployeeID FROM Employee WHERE Name = 'Amy Wong')",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND EmployeeID = (SELECT MIN(EmployeeID) FROM Employee WHERE Name = 'Amy Wong')"
        ]
      ]
    },
    {
      "id": 1861,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT e.Salary, e.Position FROM Employee e WHERE e.Name = 'Turanga Leela'",
          "SELECT Position AS JobTitle, Salary AS Income FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT `Position`, `Salary` FROM `Employee` WHERE `Name` = 'Turanga Leela'",
          "SELECT Employee.Position, Employee.Salary FROM Employee WHERE Employee.Name = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name LIKE 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name = 'Turanga Leela' AND Position IS NOT NULL",
          "SELECT e.Position, e.Salary FROM Employee AS e WHERE e.Name = 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name = 'Turanga Leela' LIMIT 1"
        ]
      ]
    },
    {
      "id": 1862,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT e.Salary, e.Position FROM Employee e WHERE e.Name = 'Turanga Leela'",
          "SELECT Employee.Salary, Employee.Position FROM Employee WHERE Employee.Name = 'Turanga Leela'",
          "SELECT `Salary`, `Position` FROM `Employee` WHERE `Name` = 'Turanga Leela'",
          "SELECT Position AS JobTitle, Salary AS Pay FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT emp.Position, emp.Salary FROM Employee emp WHERE emp.Name = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name LIKE 'Turanga Leela'",
          "SELECT Employee.Position, Employee.Salary FROM Employee WHERE Employee.Name LIKE 'Turanga Leela'",
          "SELECT e.Position, e.Salary FROM Employee AS e WHERE e.Name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1863,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position LIKE 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE LOWER(Position) = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE UPPER(Position) = 'INTERN'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' GROUP BY Position",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary > 0",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary IS NOT NULL",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND EmployeeID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1864,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position LIKE 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'",
          "SELECT AVG(Salary) FROM Employee WHERE LOWER(Position) = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE UPPER(Position) = 'INTERN'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' OR Position = 'Intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position IN ('intern', 'Intern')",
          "SELECT AVG(Salary) FROM Employee WHERE Position COLLATE NOCASE = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 1865,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'",
          "SELECT Level FROM Has_Clearance, Employee WHERE Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'Physician'",
          "SELECT H.Level FROM Has_Clearance AS H INNER JOIN Employee AS E ON H.Employee = E.EmployeeID WHERE E.Position = 'Physician'",
          "SELECT clearance.Level FROM Has_Clearance AS clearance INNER JOIN Employee AS emp ON clearance.Employee = emp.EmployeeID WHERE emp.Position = 'Physician'",
          "SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'Physician')",
          "SELECT h.Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position = 'Physician'",
          "SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Position = 'Physician')",
          "SELECT Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'Physician'",
          "SELECT Has_Clearance.Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'",
          "SELECT h.Level FROM Has_Clearance h, Employee e WHERE h.Employee = e.EmployeeID AND e.Position = 'Physician'"
        ]
      ]
    },
    {
      "id": 1866,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Position = 'physician'",
          "SELECT H.Level FROM Has_Clearance AS H INNER JOIN Employee AS E ON H.Employee = E.EmployeeID WHERE E.Position = 'physician'",
          "SELECT Level FROM Has_Clearance, Employee WHERE Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'physician'",
          "SELECT Has_Clearance.Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'physician'",
          "SELECT Level FROM Has_Clearance WHERE Employee IN (SELECT EmployeeID FROM Employee WHERE Position = 'physician')",
          "SELECT h.Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position = 'physician'",
          "SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Position = 'physician')",
          "SELECT h.Level FROM Has_Clearance h, Employee e WHERE h.Employee = e.EmployeeID AND e.Position = 'physician'",
          "SELECT Level FROM Has_Clearance JOIN Employee ON EmployeeID = Employee WHERE Position = 'physician'",
          "SELECT Level FROM Has_Clearance h INNER JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position LIKE 'physician'"
        ]
      ]
    },
    {
      "id": 1867,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT pkg.PackageNumber FROM Package AS pkg JOIN Client AS clt ON pkg.Sender = clt.AccountNumber WHERE clt.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT DISTINCT Package.PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1868,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT COUNT(Package.PackageNumber) FROM Package LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM (SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')) AS LeoPackages",
          "SELECT COUNT(*) FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT COUNT(DISTINCT PackageNumber) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE EXISTS (SELECT 1 FROM Client WHERE Client.AccountNumber = Package.Sender AND Client.Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1869,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Client C ON P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name LIKE 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong' ORDER BY p.PackageNumber",
          "SELECT p.PackageNumber FROM Package p WHERE p.Recipient = (SELECT c.AccountNumber FROM Client c WHERE c.Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1870,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT p.PackageNumber FROM Package p WHERE p.Recipient = (SELECT c.AccountNumber FROM Client c WHERE c.Name = 'Leo Wong')",
          "SELECT Package.PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1871,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT Package.* FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT P.* FROM Package P, Client C WHERE (P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber) AND C.Name = 'Leo Wong'",
          "SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT P.Contents, P.Weight FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT Contents, Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT * FROM Package WHERE EXISTS (SELECT 1 FROM Client WHERE (Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber) AND Client.Name = 'Leo Wong')",
          "SELECT PackageNumber, Contents, Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT P.PackageNumber, P.Contents, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') UNION SELECT * FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1872,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT P.PackageNumber FROM Package P JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') UNION SELECT DISTINCT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p, Client c WHERE (p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber) AND c.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Leo Wong')",
          "SELECT DISTINCT p.PackageNumber FROM Package p WHERE EXISTS (SELECT 1 FROM Client c WHERE (p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber) AND c.Name = 'Leo Wong')",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') UNION SELECT DISTINCT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT p.PackageNumber FROM Package p WHERE p.Sender = (SELECT AccountNumber FROM Client c WHERE c.Name = 'Leo Wong') OR p.Recipient = (SELECT AccountNumber FROM Client c WHERE c.Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1873,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Package AS P JOIN Client AS C1 ON P.Sender = C1.AccountNumber JOIN Client AS C2 ON P.Recipient = C2.AccountNumber WHERE C1.Name = 'Ogden Wernstrom' AND C2.Name = 'Leo Wong'",
          "SELECT count(*) FROM Package JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT count(P.PackageNumber) FROM Package P, Client S, Client R WHERE P.Sender = S.AccountNumber AND P.Recipient = R.AccountNumber AND S.Name = 'Ogden Wernstrom' AND R.Name = 'Leo Wong'",
          "SELECT count(*) FROM Package INNER JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber INNER JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM (SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong'))",
          "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(PackageNumber) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p INNER JOIN Client s ON p.Sender = s.AccountNumber INNER JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1874,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(PackageNumber) FROM Package JOIN Client AS C1 ON Package.Sender = C1.AccountNumber JOIN Client AS C2 ON Package.Recipient = C2.AccountNumber WHERE C1.Name = 'Ogden Wernstrom' AND C2.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package, Client AS Sender, Client AS Recipient WHERE Package.Sender = Sender.AccountNumber AND Package.Recipient = Recipient.AccountNumber AND Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p INNER JOIN Client s ON p.Sender = s.AccountNumber INNER JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) FROM Package p, Client s, Client r WHERE p.Sender = s.AccountNumber AND p.Recipient = r.AccountNumber AND s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name LIKE 'Ogden Wernstrom' AND r.Name LIKE 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE EXISTS (SELECT * FROM Client WHERE Client.AccountNumber = Package.Sender AND Client.Name = 'Ogden Wernstrom') AND EXISTS (SELECT * FROM Client WHERE Client.AccountNumber = Package.Recipient AND Client.Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM Package p LEFT JOIN Client s ON p.Sender = s.AccountNumber LEFT JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1875,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Contents FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT Package.Contents FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'"
        ]
      ]
    },
    {
      "id": 1876,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Contents FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT Package.Contents FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT Contents FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'"
        ]
      ]
    },
    {
      "id": 1877,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, MAX(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%'",
          "SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT TOP 1 PackageNumber, Weight FROM Package INNER JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%' ORDER BY Weight DESC",
          "SELECT Package.PackageNumber, MAX(Package.Weight) AS MaxWeight FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name LIKE '%John%' GROUP BY Package.PackageNumber ORDER BY MaxWeight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package AS P INNER JOIN Client AS C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC FETCH FIRST 1 ROW ONLY",
          "SELECT PackageNumber, Weight FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, MAX(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' GROUP BY P.PackageNumber ORDER BY MAX(P.Weight) DESC LIMIT 1",
          "SELECT PackageNumber, Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT FIRST(PackageNumber), FIRST(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%' ORDER BY Weight DESC"
        ]
      ]
    },
    {
      "id": 1878,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE 'John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT TOP 1 PackageNumber, Weight FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE 'John%' ORDER BY Weight DESC",
          "SELECT Package.PackageNumber, Package.Weight FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name LIKE 'John%' ORDER BY Package.Weight DESC FETCH FIRST 1 ROW ONLY",
          "SELECT p.PackageNumber, p.Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name LIKE 'John%' ORDER BY p.Weight DESC LIMIT 1",
          "SELECT first 1 PackageNumber, Weight FROM Package INNER JOIN Client ON Sender = AccountNumber WHERE Name LIKE 'John%' ORDER BY Weight DESC",
          "SELECT PackageNumber, MAX(Weight) AS MaxWeight FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE 'John%' GROUP BY PackageNumber ORDER BY MaxWeight DESC LIMIT 1",
          "SELECT p.PackageNumber, p.Weight FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name LIKE 'John%' ORDER BY p.Weight DESC LIMIT 1",
          "SELECT PackageNumber, Weight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1",
          "SELECT Package.PackageNumber, Package.Weight FROM Package LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Package.Weight DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1879,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3",
          "SELECT P.PackageNumber, P.Weight FROM Package P ORDER BY P.Weight ASC LIMIT 3",
          "SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3",
          "SELECT p.PackageNumber, p.Weight FROM Package AS p ORDER BY p.Weight ASC LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3",
          "SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight LIMIT 3",
          "SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC FETCH FIRST 3 ROWS ONLY",
          "SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC FETCH FIRST 3 ROWS ONLY",
          "SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC FETCH FIRST 3 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1880,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3",
          "SELECT P.PackageNumber, P.Weight FROM Package P ORDER BY P.Weight ASC LIMIT 3",
          "SELECT package.PackageNumber, package.Weight FROM package ORDER BY package.Weight ASC FETCH FIRST 3 ROWS ONLY",
          "SELECT TOP 3 PackageNumber, Weight FROM Package ORDER BY Weight",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC, PackageNumber ASC LIMIT 3",
          "SELECT p.PackageNumber, p.Weight FROM Package AS p ORDER BY p.Weight ASC LIMIT 3",
          "SELECT `PackageNumber`, `Weight` FROM `Package` ORDER BY `Weight` ASC LIMIT 3",
          "SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3 OFFSET 0",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1881,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Client.Name, COUNT(*) AS NumberOfPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY NumberOfPackages DESC LIMIT 1",
          "SELECT C.Name, COUNT(P.PackageNumber) AS TotalPackages FROM Client C INNER JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY TotalPackages DESC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) FROM Client JOIN Package ON AccountNumber = Sender GROUP BY AccountNumber ORDER BY COUNT(PackageNumber) DESC LIMIT 1",
          "SELECT Name, COUNT(*) FROM Client, Package WHERE Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT (SELECT Name FROM Client WHERE AccountNumber = Sender) AS SenderName, COUNT(*) AS PackageCount FROM Package GROUP BY Sender ORDER BY PackageCount DESC LIMIT 1",
          "SELECT C.Name, COUNT(*) AS PackagesSent FROM Client AS C JOIN Package AS P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY PackagesSent DESC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) AS TotalSentPackages FROM Client INNER JOIN Package ON AccountNumber = Sender GROUP BY AccountNumber ORDER BY TotalSentPackages DESC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.Sender) AS TotalPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY TotalPackages DESC LIMIT 1",
          "SELECT Name, COUNT(*) AS PackageCount FROM Client LEFT JOIN Package ON AccountNumber = Sender GROUP BY AccountNumber ORDER BY PackageCount DESC LIMIT 1",
          "SELECT C.Name, COUNT(P.PackageNumber) FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY COUNT(P.PackageNumber) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1882,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(*) AS PackageCount FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY PackageCount DESC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) AS TotalPackages FROM Client JOIN Package ON AccountNumber = Sender GROUP BY AccountNumber ORDER BY TotalPackages DESC LIMIT 1",
          "SELECT Client.Name, COUNT(*) FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT (SELECT Name FROM Client WHERE AccountNumber = P.Sender) AS ClientName, COUNT(*) AS NumPackages FROM Package P GROUP BY P.Sender ORDER BY NumPackages DESC LIMIT 1",
          "SELECT Name, MAX(PackageCount) FROM (SELECT Sender, COUNT(*) AS PackageCount FROM Package GROUP BY Sender) AS PackageSummary JOIN Client ON AccountNumber = Sender",
          "SELECT TOP 1 Client.Name, COUNT(Package.PackageNumber) AS TotalSentPackages FROM Client, Package WHERE Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY TotalSentPackages DESC",
          "SELECT Name, COUNT(*) AS TotalPackagesSent FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY TotalPackagesSent DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name, COUNT(PackageNumber) FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY COUNT(PackageNumber) DESC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.Sender) AS SentPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY SentPackages DESC LIMIT 1",
          "SELECT Name, COUNT(*) FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1883,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(*) AS NumPackages FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient GROUP BY C.AccountNumber ORDER BY NumPackages ASC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.PackageNumber) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber ORDER BY PackageCount ASC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) FROM Client INNER JOIN Package ON AccountNumber = Recipient GROUP BY AccountNumber ORDER BY COUNT(PackageNumber) ASC LIMIT 1",
          "SELECT C.Name, MIN(PackageCount) FROM Client C LEFT JOIN (SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient) AS P ON C.AccountNumber = P.Recipient",
          "SELECT Name, MIN(NumPackages) FROM (SELECT Client.Name AS Name, COUNT(Package.PackageNumber) AS NumPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber) AS SubQuery",
          "SELECT TOP 1 Client.Name, COUNT(*) AS TotalPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber ORDER BY TotalPackages ASC",
          "SELECT Name, COUNT(PackageNumber) AS ReceivedPackages FROM Client LEFT JOIN Package ON AccountNumber = Recipient GROUP BY AccountNumber ORDER BY ReceivedPackages ASC FETCH FIRST ROW ONLY",
          "SELECT C.Name, IFNULL(P.CountPackages, 0) AS PackagesReceived FROM Client C LEFT JOIN (SELECT Recipient, COUNT(*) AS CountPackages FROM Package GROUP BY Recipient) P ON C.AccountNumber = P.Recipient ORDER BY PackagesReceived ASC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.Recipient) AS NumberOfPackages FROM Client LEFT OUTER JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber ORDER BY NumberOfPackages ASC LIMIT 1",
          "SELECT C.Name, COUNT(P.PackageNumber) AS TotalReceived FROM Client C LEFT JOIN Package P ON C.AccountNumber = P.Recipient GROUP BY C.AccountNumber ORDER BY TotalReceived ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1884,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Recipient, MIN(count) FROM (SELECT Recipient, COUNT(*) AS count FROM Package GROUP BY Recipient) AS SubQuery GROUP BY Recipient ORDER BY count ASC LIMIT 1",
          "SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient ORDER BY PackageCount ASC LIMIT 1",
          "SELECT P.Recipient, COUNT(P.PackageNumber) AS NumPackages FROM Package P GROUP BY P.Recipient ORDER BY NumPackages ASC LIMIT 1",
          "SELECT R.Name, COUNT(*) AS TotalPackages FROM Package AS P JOIN Client AS R ON P.Recipient = R.AccountNumber GROUP BY P.Recipient ORDER BY TotalPackages ASC LIMIT 1",
          "SELECT TOP 1 Recipient, COUNT(*) FROM Package GROUP BY Recipient ORDER BY COUNT(*) ASC",
          "SELECT Recipient, COUNT(PackageNumber) AS PackageCount FROM Package GROUP BY Recipient HAVING COUNT(PackageNumber) = (SELECT MIN(COUNT(PackageNumber)) FROM Package GROUP BY Recipient)",
          "SELECT C.Name, COUNT(*) AS PackagesReceived FROM Package JOIN Client C ON Package.Recipient = C.AccountNumber GROUP BY Package.Recipient ORDER BY PackagesReceived ASC LIMIT 1",
          "SELECT Recipient, COUNT(*) AS TotalReceivedPackages FROM Package GROUP BY Recipient ORDER BY TotalReceivedPackages ASC FETCH FIRST 1 ROW ONLY",
          "SELECT C.Name, MIN(PackageCount) FROM Client C JOIN (SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient) AS SubQuery ON C.AccountNumber = SubQuery.Recipient",
          "SELECT Recipient, COUNT(*) AS NumberOfPackages FROM Package GROUP BY Recipient ORDER BY NumberOfPackages ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1885,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(*) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(PackageNumber) > 1)",
          "SELECT DISTINCT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY P.Sender HAVING COUNT(P.PackageNumber) > 1",
          "SELECT client.Name FROM Client client INNER JOIN Package package ON client.AccountNumber = package.Sender GROUP BY client.AccountNumber HAVING COUNT(package.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)",
          "SELECT C.Name FROM Client AS C INNER JOIN Package AS P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(DISTINCT PackageNumber) > 1)",
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(DISTINCT P.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Shipment) > 1)",
          "SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.Sender) > 1"
        ]
      ]
    },
    {
      "id": 1886,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(*) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(PackageNumber) > 1)",
          "SELECT DISTINCT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(DISTINCT P.PackageNumber) > 1",
          "SELECT client.Name FROM Client client INNER JOIN Package package ON client.AccountNumber = package.Sender GROUP BY client.AccountNumber HAVING COUNT(package.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)",
          "SELECT C.Name FROM Client AS C JOIN Package AS P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(Shipment) > 1)",
          "SELECT Name FROM (SELECT C.Name, COUNT(*) AS PackageCount FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber) AS SubQuery WHERE PackageCount > 1",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Sender = C.AccountNumber GROUP BY P.Sender HAVING COUNT(P.PackageNumber) > 1)",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(DISTINCT PackageNumber) > 1)"
        ]
      ]
    },
    {
      "id": 1887,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars'",
          "SELECT P.Coordinates FROM Planet P WHERE P.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name LIKE 'Mars'",
          "SELECT Planet.Coordinates FROM Planet WHERE Planet.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' LIMIT 1",
          "SELECT p.Coordinates FROM Planet AS p WHERE p.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND PlanetID IS NOT NULL",
          "SELECT Coordinates FROM Planet WHERE UPPER(Name) = 'MARS'",
          "SELECT Coordinates FROM Planet WHERE Name COLLATE NOCASE = 'mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' ORDER BY PlanetID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1888,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars'",
          "SELECT P.Coordinates FROM Planet P WHERE P.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name LIKE 'Mars'",
          "SELECT planet.Coordinates FROM Planet planet WHERE planet.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' LIMIT 1",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND PlanetID IS NOT NULL",
          "SELECT Coordinates FROM Planet WHERE UPPER(Name) = UPPER('Mars')",
          "SELECT Coordinates FROM Planet WHERE Name COLLATE NOCASE = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' ORDER BY PlanetID ASC LIMIT 1",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND Coordinates IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1889,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name, Coordinates FROM Planet ORDER BY Name",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC",
          "SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC",
          "SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY Name ASC",
          "SELECT `Name`, `Coordinates` FROM `Planet` ORDER BY `Name` ASC",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC, Coordinates ASC",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name, Coordinates",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 1890,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name",
          "SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC",
          "SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name",
          "SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY Name ASC",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT `Name`, `Coordinates` FROM `Planet` ORDER BY `Name` ASC",
          "SELECT Planet.Name AS PlanetName, Planet.Coordinates AS PlanetCoordinates FROM Planet ORDER BY Planet.Name ASC",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASCENDING"
        ]
      ]
    },
    {
      "id": 1891,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J. Fry'",
          "SELECT ShipmentID FROM Shipment, Employee WHERE Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'",
          "SELECT DISTINCT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name LIKE 'Phillip J. Fry'",
          "SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')",
          "SELECT s.ShipmentID FROM Shipment s, Employee e WHERE s.Manager = e.EmployeeID AND e.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry' AND Employee.Position = 'Manager'",
          "SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT * FROM Employee WHERE Employee.EmployeeID = Shipment.Manager AND Employee.Name = 'Phillip J. Fry')"
        ]
      ]
    },
    {
      "id": 1892,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment, Employee WHERE Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J Fry')",
          "SELECT s.ShipmentID FROM Shipment s, Employee e WHERE s.Manager = e.EmployeeID AND e.Name = 'Phillip J Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name LIKE 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT 1 FROM Employee WHERE Employee.EmployeeID = Shipment.Manager AND Employee.Name = 'Phillip J Fry')",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry' AND Employee.Position = 'Manager'"
        ]
      ]
    },
    {
      "id": 1893,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Date FROM Shipment",
          "SELECT shipment.Date FROM Shipment shipment",
          "SELECT `Date` FROM Shipment",
          "SELECT Shipment.Date FROM Shipment",
          "SELECT s.Date FROM Shipment s",
          "SELECT Date FROM Shipment AS s",
          "SELECT shipment.Date FROM Shipment AS shipment",
          "SELECT Shipment.Date AS ShipmentDate FROM Shipment",
          "SELECT Date AS ShipmentDate FROM Shipment",
          "SELECT * FROM Shipment"
        ]
      ]
    },
    {
      "id": 1894,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Date FROM Shipment",
          "SELECT Shipment.Date FROM Shipment",
          "SELECT `Date` FROM Shipment",
          "SELECT Shipment.`Date` FROM Shipment",
          "SELECT DISTINCT Date FROM Shipment",
          "SELECT DISTINCT Shipment.Date FROM Shipment",
          "SELECT s.Date FROM Shipment s",
          "SELECT s.`Date` FROM Shipment s",
          "SELECT Date FROM Shipment ORDER BY Date",
          "SELECT Shipment.Date FROM Shipment ORDER BY Date ASC"
        ]
      ]
    },
    {
      "id": 1895,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars';",
          "SELECT Shipment.ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars';",
          "SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars');",
          "SELECT DISTINCT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars';",
          "SELECT ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars';",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';",
          "SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT 1 FROM Planet WHERE Planet.PlanetID = Shipment.Planet AND Planet.Name = 'Mars');",
          "SELECT s.ShipmentID FROM Shipment s, Planet p WHERE s.Planet = p.PlanetID AND p.Name = 'Mars';",
          "SELECT ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars';"
        ]
      ]
    },
    {
      "id": 1896,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT DISTINCT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT s.ShipmentID FROM Shipment s, Planet p WHERE s.Planet = p.PlanetID AND p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name LIKE 'Mars'",
          "SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT 1 FROM Planet WHERE Planet.PlanetID = Shipment.Planet AND Planet.Name = 'Mars')",
          "SELECT s.ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1897,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment, Employee, Planet WHERE Shipment.Manager = Employee.EmployeeID AND Shipment.Planet = Planet.PlanetID AND Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s, Employee e, Planet p WHERE s.Manager = e.EmployeeID AND s.Planet = p.PlanetID AND e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name LIKE 'Turanga Leela' AND Planet.Name LIKE 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT Shipment.ShipmentID FROM Shipment, Employee, Planet WHERE Shipment.Manager = Employee.EmployeeID AND Shipment.Planet = Planet.PlanetID AND Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s LEFT JOIN Employee e ON s.Manager = e.EmployeeID LEFT JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1898,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment, Employee, Planet WHERE Shipment.Manager = Employee.EmployeeID AND Shipment.Planet = Planet.PlanetID AND Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s, Employee e, Planet p WHERE s.Manager = e.EmployeeID AND s.Planet = p.PlanetID AND e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Turanga Leela' AND Shipment.Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Turanga Leela' AND s.Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT DISTINCT ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s, Employee e, Planet p WHERE s.Manager = e.EmployeeID AND s.Planet = p.PlanetID AND e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT s.ShipmentID FROM Shipment s WHERE s.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND s.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1899,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela'",
          "SELECT DISTINCT ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND (Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela')",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')",
          "SELECT s.ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND (p.Name = 'Mars' OR e.Name = 'Turanga Leela')",
          "SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name LIKE 'Mars' OR Employee.Name LIKE 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1900,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment, Employee, Planet WHERE Shipment.Manager = Employee.EmployeeID AND Shipment.Planet = Planet.PlanetID AND Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name LIKE 'Turanga Leela' AND Planet.Name LIKE 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s, Employee e, Planet p WHERE s.Manager = e.EmployeeID AND s.Planet = p.PlanetID AND e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela') AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')",
          "SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet p ON s.Planet = p.PlanetID WHERE e.Name = 'Turanga Leela' AND p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1901,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, COUNT(S.ShipmentID) AS TotalShipments FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.PlanetID",
          "SELECT Planet.Name, COUNT(*) AS ShipmentsCount FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.PlanetID",
          "SELECT P.Name AS PlanetName, COUNT(S.ShipmentID) AS NumberOfShipments FROM Planet AS P JOIN Shipment AS S ON P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT P.Name, COUNT(*) FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Planet.Name, COUNT(Shipment.ShipmentID) FROM Planet LEFT JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name",
          "SELECT Name, COUNT(ShipmentID) AS TotalShipments FROM Planet LEFT OUTER JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT P.Name, COUNT(S.ShipmentID) FROM Planet P INNER JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS Shipments FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name, Planet.PlanetID",
          "SELECT P.Name AS Planet, COUNT(*) AS Shipments FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name"
        ]
      ]
    },
    {
      "id": 1902,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, COUNT(*) FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.PlanetID",
          "SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS NumberOfShipments FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.PlanetID",
          "SELECT P.Name, COUNT(S.ShipmentID) FROM Planet AS P INNER JOIN Shipment AS S ON P.PlanetID = S.Planet GROUP BY P.PlanetID",
          "SELECT Name, COUNT(*) FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY PlanetID",
          "SELECT P.Name, COUNT(*) AS ShipmentsCount FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.PlanetID",
          "SELECT Name, COUNT(ShipmentID) FROM Planet LEFT JOIN Shipment ON PlanetID = Planet GROUP BY PlanetID",
          "SELECT Planet.Name, COUNT(*) FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID",
          "SELECT P.Name AS PlanetName, COUNT(*) AS TotalShipments FROM Shipment S RIGHT JOIN Planet P ON S.Planet = P.PlanetID GROUP BY P.PlanetID",
          "SELECT Name, COUNT(ShipmentID) AS Shipments FROM Planet LEFT OUTER JOIN Shipment ON PlanetID = Planet GROUP BY PlanetID",
          "SELECT P.Name, COUNT(S.ShipmentID) AS Shipments FROM Shipment S RIGHT OUTER JOIN Planet P ON S.Planet = P.PlanetID GROUP BY P.PlanetID"
        ]
      ]
    },
    {
      "id": 1903,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY COUNT(Shipment.Planet) DESC LIMIT 1",
          "SELECT (SELECT Name FROM Planet WHERE PlanetID = S.Planet) AS PlanetName FROM Shipment S GROUP BY S.Planet ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT TOP 1 Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(ShipmentID) DESC)",
          "SELECT Name FROM Planet ORDER BY (SELECT COUNT(*) FROM Shipment WHERE Shipment.Planet = Planet.PlanetID) DESC LIMIT 1",
          "SELECT P.Name FROM Planet AS P, Shipment AS S WHERE P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(S.Planet) DESC LIMIT 1",
          "SELECT Name FROM Planet P JOIN (SELECT Planet, COUNT(*) AS TotalShipments FROM Shipment GROUP BY Planet) AS S ON P.PlanetID = S.Planet ORDER BY S.TotalShipments DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Shipment GROUP BY Planet) AS Counts)) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1904,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.PlanetID ORDER BY COUNT(Shipment.Planet) DESC LIMIT 1",
          "SELECT (SELECT Name FROM Planet WHERE PlanetID = S.Planet) AS PlanetName FROM Shipment S GROUP BY S.Planet ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT TOP 1 Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(ShipmentID) DESC)",
          "SELECT Name FROM Planet AS P JOIN (SELECT Planet, COUNT(*) AS Shipments FROM Shipment GROUP BY Planet ORDER BY Shipments DESC LIMIT 1) AS S ON P.PlanetID = S.Planet",
          "SELECT P.Name FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(S.ShipmentID) DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Shipment GROUP BY Planet) AS Counts))",
          "SELECT Name FROM (SELECT Planet.Name, COUNT(Shipment.Planet) AS TotalShipments FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY TotalShipments DESC LIMIT 1) AS Result"
        ]
      ]
    },
    {
      "id": 1905,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name, COUNT(*) FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID",
          "SELECT Name, COUNT(ShipmentID) AS NumberOfShipments FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY EmployeeID",
          "SELECT Employee.Name, COUNT(Shipment.Manager) FROM Employee INNER JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID",
          "SELECT Name, COUNT(*) AS ShipmentsCount FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID",
          "SELECT E.Name AS ManagerName, COUNT(S.Manager) AS TotalShipments FROM Employee E, Shipment S WHERE E.EmployeeID = S.Manager GROUP BY E.EmployeeID",
          "SELECT Name, COUNT(ShipmentID) FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name",
          "SELECT Employee.Name, COUNT(*) FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.EmployeeID",
          "SELECT E.Name, COUNT(S.Manager) FROM Shipment S LEFT JOIN Employee E ON S.Manager = E.EmployeeID GROUP BY E.EmployeeID",
          "SELECT Name, COUNT(Shipment.Manager) FROM Employee LEFT JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID",
          "SELECT E.Name AS ManagerName, COUNT(*) AS ShipmentCount FROM Employee E LEFT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name"
        ]
      ]
    },
    {
      "id": 1906,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name, COUNT(S.ShipmentID) FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID",
          "SELECT Name, COUNT(*) AS NumberOfShipments FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY EmployeeID",
          "SELECT Name, COUNT(ShipmentID) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Employee.EmployeeID",
          "SELECT E.Name, COUNT(*) FROM Employee E, Shipment S WHERE E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name, COUNT(ShipmentID) AS ShipmentsManaged FROM Employee INNER JOIN Shipment ON EmployeeID = Manager GROUP BY Name",
          "SELECT E.Name AS ManagerName, COUNT(S.ShipmentID) AS TotalShipments FROM Employee E INNER JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name, COUNT(*) FROM Employee E LEFT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID",
          "SELECT E.Name, COUNT(S.Manager) FROM Employee E LEFT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Employee JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name",
          "SELECT E.Name, COUNT(*) AS ShipmentsCount FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID, E.Name"
        ]
      ]
    },
    {
      "id": 1907,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT sum(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT sum(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT sum(Package.Weight) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT sum(Weight) FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT sum(P.Weight) FROM Package P, Shipment S, Planet Pl WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND Pl.Name = 'Mars'",
          "SELECT sum(Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT sum(P.Weight) FROM Package AS P JOIN Shipment AS S ON P.Shipment = S.ShipmentID JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT sum(Package.Weight) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT sum(P.Weight) FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT sum(Weight) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1908,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Weight) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT SUM(Weight) FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT SUM(P.Weight) AS TotalWeight FROM Package P, Shipment S, Planet Pl WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Shipment AS S ON P.Shipment = S.ShipmentID JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P LEFT JOIN Shipment S ON P.Shipment = S.ShipmentID LEFT JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Weight) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1909,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, SUM(Pa.Weight) FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name",
          "SELECT Name, SUM(Weight) FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Name",
          "SELECT p.Name AS PlanetName, SUM(pk.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT p.Name, SUM(pk.Weight) FROM Planet p, Shipment s, Package pk WHERE p.PlanetID = s.Planet AND s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT Planet.Name, TotalWeight FROM Planet JOIN (SELECT Shipment.Planet, SUM(Package.Weight) AS TotalWeight FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Shipment.Planet) AS WeightData ON Planet.PlanetID = WeightData.Planet",
          "SELECT Name, TotalWeight FROM Planet LEFT JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet) AS ShipWeight ON Planet.PlanetID = ShipWeight.Planet",
          "SELECT p.Name, SUM(w.Weight) AS TotalWeight FROM Planet p LEFT JOIN (SELECT s.Planet, pk.Weight FROM Shipment s JOIN Package pk ON s.ShipmentID = pk.Shipment) w ON p.PlanetID = w.Planet GROUP BY p.Name",
          "SELECT Name, SUM(Weight) FROM Planet JOIN Shipment ON PlanetID = Planet JOIN Package ON ShipmentID = Shipment GROUP BY Name",
          "SELECT p.Name, SUM(w.Weight) FROM Planet p INNER JOIN (SELECT s.Planet, pk.Weight FROM Shipment s INNER JOIN Package pk ON s.ShipmentID = pk.Shipment) w ON p.PlanetID = w.Planet GROUP BY p.Name"
        ]
      ]
    },
    {
      "id": 1910,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT p.Name, SUM(pk.Weight) FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name",
          "SELECT p.Name, SUM(pk.Weight) AS TotalWeight FROM Planet p, Shipment s, Package pk WHERE p.PlanetID = s.Planet AND s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT Name, SUM(Weight) FROM Planet JOIN Shipment ON PlanetID = Planet JOIN Package ON ShipmentID = Shipment GROUP BY Name",
          "SELECT Name, TotalWeight FROM (SELECT Planet.Name AS Name, SUM(Package.Weight) AS TotalWeight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name) AS WeightSummary",
          "SELECT p.Name AS PlanetName, SUM(pk.Weight) AS TotalPackageWeight FROM Planet p INNER JOIN Shipment s ON p.PlanetID = s.Planet INNER JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT Name, SUM(Weight) AS TotalWeight FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Name",
          "SELECT p.Name, SUM(pk.Weight) FROM Planet p LEFT JOIN Shipment s ON p.PlanetID = s.Planet LEFT JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name",
          "SELECT Name, SUM(Weight) FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY Name",
          "SELECT p.Name AS PlanetName, SUM(pk.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name"
        ]
      ]
    },
    {
      "id": 1911,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Weight) > 30)",
          "SELECT P.Name FROM Planet AS P, Shipment AS S, Package AS PK WHERE P.PlanetID = S.Planet AND S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT DISTINCT P.Name FROM Planet P, Shipment S, Package PK WHERE P.PlanetID = S.Planet AND S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Shipment S JOIN Package PK ON S.ShipmentID = PK.Shipment WHERE S.Planet = P.PlanetID GROUP BY S.Planet HAVING SUM(PK.Weight) > 30)",
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT S.Planet FROM Shipment S JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY S.Planet HAVING SUM(PK.Weight) > 30)",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT S.Planet FROM Shipment S JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY S.Planet HAVING SUM(PK.Weight) > 30)",
          "SELECT P.Name FROM Planet AS P INNER JOIN Shipment AS S ON P.PlanetID = S.Planet INNER JOIN Package AS PK ON S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30"
        ]
      ]
    },
    {
      "id": 1912,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Weight) > 30)",
          "SELECT DISTINCT P.Name FROM Planet P, Shipment S, Package PK WHERE P.PlanetID = S.Planet AND S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30",
          "SELECT p.Name FROM Planet p WHERE EXISTS (SELECT 1 FROM Shipment s JOIN Package pk ON s.ShipmentID = pk.Shipment WHERE s.Planet = p.PlanetID GROUP BY s.Planet HAVING SUM(pk.Weight) > 30)",
          "SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.PlanetID HAVING SUM(pk.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment, Package WHERE Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Package.Weight) > 30)",
          "SELECT p.Name FROM Planet p WHERE p.PlanetID IN (SELECT s.Planet FROM Shipment s JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY s.Planet HAVING SUM(pk.Weight) > 30)",
          "SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30",
          "SELECT DISTINCT Planet.Name FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30"
        ]
      ]
    },
    {
      "id": 1913,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package AS p, Shipment AS s, Planet AS pl, Client AS c WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND p.Sender = c.AccountNumber AND pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package p, Shipment s, Planet pl, Client c WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND p.Sender = c.AccountNumber AND pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name LIKE 'Omicron Persei 8' AND c.Name LIKE 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT p.PackageNumber FROM Package p WHERE EXISTS (SELECT 1 FROM Shipment s JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE s.ShipmentID = p.Shipment AND pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan')"
        ]
      ]
    },
    {
      "id": 1914,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(PackageNumber) FROM Package, Shipment, Client, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Package.Sender = Client.AccountNumber AND Shipment.Planet = Planet.PlanetID AND Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Client c ON p.Sender = c.AccountNumber INNER JOIN Planet pl ON s.Planet = pl.PlanetID WHERE c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(DISTINCT p.PackageNumber) FROM Package p, Shipment s, Client c, Planet pl WHERE p.Shipment = s.ShipmentID AND p.Sender = c.AccountNumber AND s.Planet = pl.PlanetID AND c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package AS p JOIN Shipment AS s ON p.Shipment = s.ShipmentID JOIN Client AS c ON p.Sender = c.AccountNumber JOIN Planet AS pl ON s.Planet = pl.PlanetID WHERE c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Client c ON p.Sender = c.AccountNumber JOIN Planet pl ON s.Planet = pl.PlanetID WHERE c.Name LIKE 'Zapp Brannigan' AND pl.Name LIKE 'Omicron Persei 8'",
          "SELECT COUNT(Package.PackageNumber) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Client ON Package.Sender = Client.AccountNumber INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p, Shipment s, Client c, Planet pl WHERE p.Shipment = s.ShipmentID AND p.Sender = c.AccountNumber AND s.Planet = pl.PlanetID AND c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Client c ON p.Sender = c.AccountNumber INNER JOIN Planet pl ON s.Planet = pl.PlanetID WHERE c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Client ON Package.Sender = Client.AccountNumber LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'"
        ]
      ]
    },
    {
      "id": 1915,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT p.PackageNumber FROM Package AS p JOIN Shipment AS s ON p.Shipment = s.ShipmentID JOIN Planet AS pl ON s.Planet = pl.PlanetID JOIN Client AS c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package p, Shipment s, Planet pl, Client c WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND p.Sender = c.AccountNumber AND (pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan')",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT p.PackageNumber FROM Package p WHERE EXISTS (SELECT 1 FROM Shipment s JOIN Planet pl ON s.Planet = pl.PlanetID WHERE s.ShipmentID = p.Shipment AND pl.Name = 'Omicron Persei 8') OR EXISTS (SELECT 1 FROM Client c WHERE c.AccountNumber = p.Sender AND c.Name = 'Zapp Brannigan')",
          "SELECT p.PackageNumber FROM Package p WHERE p.Shipment IN (SELECT s.ShipmentID FROM Shipment s JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Omicron Persei 8') OR p.Sender IN (SELECT c.AccountNumber FROM Client c WHERE c.Name = 'Zapp Brannigan')",
          "SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment JOIN Planet ON Planet.PlanetID = Shipment.Planet WHERE Name = 'Omicron Persei 8') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT p.PackageNumber FROM Package p, Shipment s, Planet pl WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND (pl.Name = 'Omicron Persei 8' OR p.Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan'))",
          "SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Omicron Persei 8' UNION SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1916,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Sender.Name = 'Zapp Brannigan'",
          "SELECT COUNT(PackageNumber) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND (Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan')",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(Package.PackageNumber) FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND (Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan')",
          "SELECT COUNT(*) FROM Package AS p INNER JOIN Shipment AS s ON p.Shipment = s.ShipmentID INNER JOIN Planet AS pl ON s.Planet = pl.PlanetID INNER JOIN Client AS c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package p, Shipment s, Planet pl, Client c WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND p.Sender = c.AccountNumber AND (pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan')"
        ]
      ]
    },
    {
      "id": 1917,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight >= 10 AND p.Weight <= 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9.99 AND Weight < 30.01",
          "SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30",
          "SELECT p.PackageNumber, p.Weight FROM Package AS p WHERE p.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight >= 10 AND Weight <= 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9 AND Weight < 31",
          "SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight > 10 AND p.Weight < 30",
          "SELECT PackageNumber AS PackageNo, Weight AS PackageWeight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT p.PackageNumber, p.Weight FROM Package AS p WHERE p.Weight >= 10 AND p.Weight <= 30"
        ]
      ]
    },
    {
      "id": 1918,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT P.PackageNumber, P.Weight FROM Package AS P WHERE P.Weight >= 10 AND P.Weight <= 30",
          "SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight > 9 AND Package.Weight < 31",
          "SELECT packageNumber, weight FROM Package WHERE weight BETWEEN 10 AND 30",
          "SELECT `PackageNumber`, `Weight` FROM `Package` WHERE `Weight` BETWEEN 10 AND 30",
          "SELECT pkg.PackageNumber, pkg.Weight FROM Package pkg WHERE pkg.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight >= 10 AND Weight <= 30",
          "SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30",
          "SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9.99 AND Weight < 30.01"
        ]
      ]
    },
    {
      "id": 1919,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars' AND HC.Employee IS NULL",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE HC.Employee = E.EmployeeID AND P.Name = 'Mars')",
          "SELECT Name FROM Employee EXCEPT SELECT Employee.Name FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT HC.Employee FROM Has_Clearance HC INNER JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars')",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT E.Name FROM Employee E LEFT OUTER JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee AND HC.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE HC.Employee IS NULL",
          "SELECT Name FROM Employee WHERE NOT EXISTS (SELECT * FROM Has_Clearance WHERE Employee = Employee.EmployeeID AND Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT HC.Employee FROM Has_Clearance HC, Planet P WHERE HC.Planet = P.PlanetID AND P.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1920,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars' AND HC.Employee = E.EmployeeID)",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee LEFT JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars' AND HC.Employee IS NULL",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT HC.Employee FROM Has_Clearance HC INNER JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars')",
          "SELECT Name FROM Employee EXCEPT SELECT E.Name FROM Employee E, Has_Clearance HC, Planet P WHERE E.EmployeeID = HC.Employee AND HC.Planet = P.PlanetID AND P.Name = 'Mars'",
          "SELECT Name FROM Employee WHERE NOT EXISTS (SELECT * FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE HC.Employee = Employee.EmployeeID AND P.Name = 'Mars')",
          "SELECT Name FROM Employee E WHERE NOT EXISTS (SELECT NULL FROM Has_Clearance HC, Planet P WHERE HC.Employee = E.EmployeeID AND HC.Planet = P.PlanetID AND P.Name = 'Mars')",
          "SELECT E.Name FROM Employee E LEFT OUTER JOIN (SELECT Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Mars') AS MarsClearance ON E.EmployeeID = MarsClearance.Employee WHERE MarsClearance.Employee IS NULL"
        ]
      ]
    },
    {
      "id": 1921,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))",
          "SELECT E.Name FROM Employee E JOIN Has_Clearance H ON E.EmployeeID = H.Employee JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT E.Name FROM Employee E, Has_Clearance H, Planet P WHERE E.EmployeeID = H.Employee AND H.Planet = P.PlanetID AND P.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III')",
          "SELECT E.Name FROM Employee E INNER JOIN Has_Clearance H ON E.EmployeeID = H.Employee INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name LIKE 'Omega III'))",
          "SELECT E.Name FROM Employee E WHERE EXISTS (SELECT 1 FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE H.Employee = E.EmployeeID AND P.Name = 'Omega III')",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Omega III')",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID IN (SELECT H.Employee FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Omega III')",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT * FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Employee.EmployeeID = Has_Clearance.Employee AND Planet.Name = 'Omega III')"
        ]
      ]
    },
    {
      "id": 1922,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))",
          "SELECT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III')",
          "SELECT Employee.Name FROM Employee INNER JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee INNER JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III'",
          "SELECT e.Name FROM Employee e, Has_Clearance hc, Planet p WHERE e.EmployeeID = hc.Employee AND hc.Planet = p.PlanetID AND p.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Omega III')",
          "SELECT Name FROM Employee e WHERE EXISTS (SELECT * FROM Has_Clearance hc JOIN Planet p ON hc.Planet = p.PlanetID WHERE hc.Employee = e.EmployeeID AND p.Name = 'Omega III')",
          "SELECT DISTINCT Name FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance hc INNER JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III')",
          "SELECT e.Name FROM Employee e WHERE EXISTS (SELECT * FROM Has_Clearance hc INNER JOIN Planet p ON hc.Planet = p.PlanetID WHERE hc.Employee = e.EmployeeID AND p.Name = 'Omega III')"
        ]
      ]
    },
    {
      "id": 1923,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1)",
          "SELECT p.Name FROM Planet p JOIN Has_Clearance h ON p.PlanetID = h.Planet GROUP BY p.PlanetID HAVING COUNT(h.Employee) = 1",
          "SELECT p.Name FROM Planet p WHERE EXISTS (SELECT 1 FROM Has_Clearance h WHERE h.Planet = p.PlanetID GROUP BY h.Planet HAVING COUNT(*) = 1)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1)",
          "SELECT p.Name FROM Planet p INNER JOIN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1) AS h ON p.PlanetID = h.Planet",
          "SELECT Name FROM Planet p WHERE (SELECT COUNT(*) FROM Has_Clearance h WHERE h.Planet = p.PlanetID) = 1",
          "SELECT p.Name FROM Planet p WHERE 1 = (SELECT COUNT(*) FROM Has_Clearance h WHERE h.Planet = p.PlanetID GROUP BY h.Planet)",
          "SELECT p.Name FROM Planet p, Has_Clearance h WHERE p.PlanetID = h.Planet GROUP BY p.PlanetID, p.Name HAVING COUNT(h.Employee) = 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(Employee) = 1)",
          "SELECT p.Name FROM Planet p WHERE EXISTS (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1 AND Planet = p.PlanetID)"
        ]
      ]
    },
    {
      "id": 1924,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY P.PlanetID HAVING COUNT(DISTINCT H.Employee) = 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1)",
          "SELECT DISTINCT P.Name FROM Planet P, Has_Clearance H WHERE P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1",
          "SELECT P.Name FROM Planet P INNER JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY P.PlanetID HAVING COUNT(DISTINCT H.Employee) = 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1)",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Has_Clearance H WHERE H.Planet = P.PlanetID GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1)",
          "SELECT P.Name FROM Planet P WHERE (SELECT COUNT(DISTINCT Employee) FROM Has_Clearance WHERE Planet = P.PlanetID) = 1",
          "SELECT P.Name FROM Planet P JOIN (SELECT Planet, COUNT(DISTINCT Employee) AS EmpCount FROM Has_Clearance GROUP BY Planet) AS H ON P.PlanetID = H.Planet WHERE H.EmpCount = 1",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1 AND COUNT(Employee) = 1)"
        ]
      ]
    },
    {
      "id": 1925,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000",
          "SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001",
          "SELECT Employee.Name FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Salary",
          "SELECT Name FROM Employee WHERE Salary > 4999.99 AND Salary < 10000.01",
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000 AND Position IS NOT NULL",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 AND Remarks IS NOT NULL",
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000 AND Remarks <> ''"
        ]
      ]
    },
    {
      "id": 1926,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000",
          "SELECT Employee.Name FROM Employee WHERE Employee.Salary >= 5000 AND Employee.Salary <= 10000",
          "SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Salary",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Name",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY EmployeeID",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Name DESC",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Salary DESC"
        ]
      ]
    },
    {
      "id": 1927,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT E.Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT E.Name FROM Employee E WHERE E.Salary > (SELECT AVG(Salary) FROM Employee) OR E.Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 UNION SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee UNION SELECT 5000)",
          "SELECT Name FROM Employee WHERE Salary > GREATEST((SELECT AVG(Salary) FROM Employee), 5000)",
          "SELECT Name FROM Employee WHERE Salary > ALL (SELECT AVG(Salary) FROM Employee UNION SELECT 5000)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT MAX(AVG(Salary), 5000) FROM Employee)",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Employee E WHERE Employee.Salary > E.AVG(Salary) OR Employee.Salary > 5000)"
        ]
      ]
    },
    {
      "id": 1928,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > 5000 UNION SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > GREATEST((SELECT AVG(Salary) FROM Employee), 5000)",
          "SELECT Name FROM Employee HAVING Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee GROUP BY EmployeeID)",
          "SELECT Name FROM Employee WHERE Salary > ALL (SELECT AVG(Salary) FROM Employee UNION SELECT 5000)",
          "SELECT Name FROM Employee WHERE Salary > COALESCE((SELECT AVG(Salary) FROM Employee), 5000)",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Employee AS E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)) AND Employee.EmployeeID = E.EmployeeID",
          "SELECT Name FROM Employee WHERE Salary > IF((SELECT AVG(Salary) FROM Employee) > 5000, (SELECT AVG(Salary) FROM Employee), 5000)"
        ]
      ]
    },
    {
      "id": 1929,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT COUNT(DISTINCT Employee.EmployeeID) FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name != 'Mars' OR Has_Clearance.Planet IS NULL",
          "SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Mars')",
          "SELECT COUNT(EmployeeID) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee EXCEPT SELECT COUNT(*) FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT COUNT(*) FROM (SELECT EmployeeID FROM Employee EXCEPT SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AS NoClearance",
          "SELECT COUNT(*) FROM Employee e WHERE NOT EXISTS (SELECT * FROM Has_Clearance hc JOIN Planet p ON hc.Planet = p.PlanetID WHERE hc.Employee = e.EmployeeID AND p.Name = 'Mars')",
          "SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN (SELECT * FROM Has_Clearance hc INNER JOIN Planet p ON hc.Planet = p.PlanetID AND p.Name = 'Mars') AS MarsClearance ON e.EmployeeID = MarsClearance.Employee WHERE MarsClearance.Employee IS NULL",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance INNER JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT COUNT(*) FROM (SELECT e.EmployeeID FROM Employee e LEFT OUTER JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee LEFT OUTER JOIN Planet p ON hc.Planet = p.PlanetID AND p.Name = 'Mars' WHERE hc.Employee IS NULL OR p.PlanetID IS NULL) AS NoMarsClearance"
        ]
      ]
    },
    {
      "id": 1930,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee LEFT JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Mars' AND hc.Employee IS NULL",
          "SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee e WHERE e.EmployeeID NOT IN (SELECT hc.Employee FROM Has_Clearance hc JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT COUNT(*) FROM (SELECT EmployeeID FROM Employee EXCEPT SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars')) AS Result",
          "SELECT COUNT(*) FROM Employee e WHERE NOT EXISTS (SELECT * FROM Has_Clearance hc INNER JOIN Planet p ON hc.Planet = p.PlanetID WHERE hc.Employee = e.EmployeeID AND p.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee e WHERE e.EmployeeID NOT IN (SELECT hc.Employee FROM Has_Clearance hc, Planet p WHERE hc.Planet = p.PlanetID AND p.Name = 'Mars')",
          "SELECT COUNT(EmployeeID) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')",
          "SELECT COUNT(DISTINCT EmployeeID) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance hc INNER JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1931,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT count(*) FROM game",
          "SELECT COUNT(Game_ID) FROM game",
          "SELECT COUNT(*) AS TotalGames FROM game",
          "SELECT COUNT(1) FROM game",
          "SELECT COUNT(DISTINCT Game_ID) FROM game",
          "SELECT COUNT(game.Game_ID) FROM game",
          "SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT * FROM game) AS AllGames",
          "SELECT COUNT(*) FROM game GROUP BY Platform_ID",
          "SELECT COUNT(*) FROM game WHERE '1'='1'"
        ]
      ]
    },
    {
      "id": 1932,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT count(*) FROM game",
          "SELECT COUNT(Game_ID) FROM game",
          "SELECT COUNT(*) AS NumberOfGames FROM game",
          "SELECT COUNT(1) FROM game",
          "SELECT COUNT(game.Game_ID) FROM game",
          "SELECT COUNT(DISTINCT Game_ID) FROM game",
          "SELECT COUNT(DISTINCT game.Game_ID) FROM game",
          "SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL",
          "SELECT COUNT(game.*) FROM game",
          "SELECT COUNT(*) FROM game GROUP BY Game_ID"
        ]
      ]
    },
    {
      "id": 1933,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC",
          "SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESCENDING",
          "SELECT game.Title AS GameTitle, game.Developers AS GameDevelopers FROM game ORDER BY game.Units_sold_Millions DESC",
          "SELECT Title AS 'Game Title', Developers AS 'Game Developers' FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT `Title`, `Developers` FROM `game` ORDER BY `Units_sold_Millions` DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Title ASC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Developers ASC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Game_ID ASC"
        ]
      ]
    },
    {
      "id": 1934,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC",
          "SELECT game.Title AS GameTitle, game.Developers AS GameDevelopers FROM game ORDER BY game.Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESCENDING",
          "SELECT game.Title, game.Developers FROM game ORDER BY Units_sold_Millions DESCENDING",
          "SELECT `Title`, `Developers` FROM `game` ORDER BY `Units_sold_Millions` DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Title ASC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Developers ASC",
          "SELECT Title AS GameTitle, Developers AS GameDevelopers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC, game.Title ASC"
        ]
      ]
    },
    {
      "id": 1935,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers <> 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE NOT Developers = 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) AS Average_Sales FROM game WHERE Developers NOT LIKE 'Nintendo'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g WHERE g.Developers NOT IN ('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers IS NOT 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE UPPER(Developers) <> UPPER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE LOWER(Developers) != LOWER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT IN (SELECT Developers FROM game WHERE Developers = 'Nintendo')"
        ]
      ]
    },
    {
      "id": 1936,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE NOT Developers = 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers <> 'Nintendo'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g WHERE g.Developers != 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT IN ('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE UPPER(Developers) != UPPER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE LOWER(Developers) <> LOWER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers IS NOT 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT EQUALS 'Nintendo'"
        ]
      ]
    },
    {
      "id": 1937,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Market_district FROM platform",
          "SELECT platform.Platform_name, platform.Market_district FROM platform",
          "SELECT p.Platform_name, p.Market_district FROM platform AS p",
          "SELECT `Platform_name`, `Market_district` FROM `platform`",
          "SELECT Platform_name AS Name, Market_district AS District FROM platform",
          "SELECT DISTINCT Platform_name, Market_district FROM platform",
          "SELECT platform.* FROM platform WHERE Platform_name IS NOT NULL AND Market_district IS NOT NULL",
          "SELECT Platform_name, Market_district FROM platform ORDER BY Platform_name",
          "SELECT Platform_name, Market_district FROM platform WHERE Platform_name <> ''",
          "SELECT Platform_name, Market_district FROM platform GROUP BY Platform_name, Market_district"
        ]
      ]
    },
    {
      "id": 1938,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Market_district FROM platform",
          "SELECT platform.Platform_name, platform.Market_district FROM platform",
          "SELECT p.Platform_name, p.Market_district FROM platform AS p",
          "SELECT `Platform_name`, `Market_district` FROM `platform`",
          "SELECT Platform_name AS Name, Market_district AS District FROM platform",
          "SELECT DISTINCT Platform_name, Market_district FROM platform",
          "SELECT platform.Platform_name AS Platform, platform.Market_district AS Market FROM platform",
          "SELECT Platform_name, Market_district FROM platform WHERE Platform_name IS NOT NULL",
          "SELECT Platform_name, Market_district FROM platform ORDER BY Platform_name",
          "SELECT Platform_name, Market_district FROM platform GROUP BY Platform_name, Market_district"
        ]
      ]
    },
    {
      "id": 1939,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1",
          "SELECT platform.Platform_name, platform.Platform_ID FROM platform WHERE platform.Download_rank = 1",
          "SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1",
          "SELECT `Platform_name`, `Platform_ID` FROM `platform` WHERE `Download_rank` = 1",
          "SELECT Platform_name AS Name, Platform_ID AS ID FROM platform WHERE Download_rank = 1",
          "SELECT platform.Platform_name AS Name, platform.Platform_ID AS ID FROM platform WHERE platform.Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = '1'",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 ORDER BY Platform_ID",
          "SELECT DISTINCT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1940,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1",
          "SELECT platform.Platform_name, platform.Platform_ID FROM platform WHERE platform.Download_rank = 1",
          "SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1",
          "SELECT Platform_name AS Name, Platform_ID AS ID FROM platform WHERE Download_rank = 1",
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1",
          "SELECT `Platform_name`, `Platform_ID` FROM `platform` WHERE `Download_rank` = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 ORDER BY Platform_ID",
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1 ORDER BY Platform_name",
          "SELECT DISTINCT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1941,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player",
          "SELECT MAX(Rank_of_the_year) AS HighestRank, MIN(Rank_of_the_year) AS LowestRank FROM player",
          "SELECT maximum(Rank_of_the_year), minimum(Rank_of_the_year) FROM player",
          "SELECT MAX(Rank_of_the_year) max_rank, MIN(Rank_of_the_year) min_rank FROM player",
          "SELECT TOP 1 Rank_of_the_year AS MaxRank FROM player ORDER BY Rank_of_the_year DESC, Rank_of_the_year ASC",
          "SELECT Rank_of_the_year FROM player ORDER BY Rank_of_the_year DESC LIMIT 1, Rank_of_the_year ASC LIMIT 1",
          "SELECT (SELECT MAX(Rank_of_the_year) FROM player), (SELECT MIN(Rank_of_the_year) FROM player)",
          "SELECT GREATEST(Rank_of_the_year), LEAST(Rank_of_the_year) FROM player",
          "SELECT FIRST(Rank_of_the_year) ORDER BY Rank_of_the_year DESC, FIRST(Rank_of_the_year) ORDER BY Rank_of_the_year ASC FROM player",
          "SELECT MAX(Rank_of_the_year) AS MaximumRank, MIN(Rank_of_the_year) AS MinimumRank FROM player"
        ]
      ]
    },
    {
      "id": 1942,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player",
          "SELECT MAX(Rank_of_the_year) AS Maximum_Rank, MIN(Rank_of_the_year) AS Minimum_Rank FROM player",
          "SELECT MAX(player.Rank_of_the_year), MIN(player.Rank_of_the_year) FROM player",
          "SELECT maximum(Rank_of_the_year), minimum(Rank_of_the_year) FROM player",
          "SELECT highest(Rank_of_the_year), lowest(Rank_of_the_year) FROM player",
          "SELECT MAX(Rank_of_the_year) max_rank, MIN(Rank_of_the_year) min_rank FROM player",
          "SELECT TOP 1 Rank_of_the_year AS Max_Rank FROM player ORDER BY Rank_of_the_year DESC, Rank_of_the_year ASC",
          "SELECT Rank_of_the_year FROM player ORDER BY Rank_of_the_year DESC LIMIT 1, Rank_of_the_year ASC LIMIT 1",
          "SELECT (SELECT MAX(Rank_of_the_year) FROM player) AS Max_Rank, (SELECT MIN(Rank_of_the_year) FROM player) AS Min_Rank",
          "SELECT MAX(p.Rank_of_the_year) AS Highest_Rank, MIN(p.Rank_of_the_year) AS Lowest_Rank FROM player p"
        ]
      ]
    },
    {
      "id": 1943,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3",
          "SELECT count(Player_ID) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(1) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(*) FROM player p WHERE p.Rank_of_the_year < 3",
          "SELECT count(DISTINCT p.Player_ID) FROM player p WHERE p.Rank_of_the_year < 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3 GROUP BY Rank_of_the_year",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3 GROUP BY Rank_of_the_year"
        ]
      ]
    },
    {
      "id": 1944,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT count(*) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(1) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player p WHERE p.Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 GROUP BY Rank_of_the_year",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 AND Player_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT p.Player_ID) FROM player p WHERE p.Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 HAVING COUNT(*) > 0",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 ORDER BY Rank_of_the_year"
        ]
      ]
    },
    {
      "id": 1945,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player ORDER BY Player_name ASC",
          "SELECT player.Player_name FROM player ORDER BY player.Player_name ASC",
          "SELECT p.Player_name FROM player p ORDER BY p.Player_name ASC",
          "SELECT Player_name FROM player ORDER BY Player_name",
          "SELECT Player_name FROM player ORDER BY 1",
          "SELECT `Player_name` FROM `player` ORDER BY `Player_name` ASC",
          "SELECT Player_name FROM player ORDER BY UPPER(Player_name)",
          "SELECT Player_name FROM player ORDER BY LOWER(Player_name) ASC",
          "SELECT DISTINCT Player_name FROM player ORDER BY Player_name ASC",
          "SELECT Player_name AS Name FROM player ORDER BY Name ASC"
        ]
      ]
    },
    {
      "id": 1946,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player ORDER BY Player_name",
          "SELECT player.Player_name FROM player ORDER BY player.Player_name",
          "SELECT p.Player_name FROM player p ORDER BY p.Player_name",
          "SELECT Player_name FROM player ORDER BY Player_name ASC",
          "SELECT DISTINCT Player_name FROM player ORDER BY Player_name",
          "SELECT player.Player_name FROM player ORDER BY player.Player_name ASC",
          "SELECT p.Player_name FROM player AS p ORDER BY p.Player_name ASC",
          "SELECT Player_name FROM player ORDER BY 1",
          "SELECT Player_name FROM player ORDER BY Player_name COLLATE NOCASE",
          "SELECT Player_name FROM player ORDER BY UPPER(Player_name)"
        ]
      ]
    },
    {
      "id": 1947,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC",
          "SELECT player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC",
          "SELECT `Player_name`, `College` FROM `player` ORDER BY `Rank_of_the_year` DESC",
          "SELECT Player_name AS Name, College AS University FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT player.Player_name AS Name, player.College AS University FROM player ORDER BY player.Rank_of_the_year DESC",
          "SELECT p.Player_name AS PlayerName, p.College AS CollegeName FROM player p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESCENDING",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, Player_name ASC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, College ASC"
        ]
      ]
    },
    {
      "id": 1948,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC",
          "SELECT player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC",
          "SELECT `Player_name`, `College` FROM `player` ORDER BY `Rank_of_the_year` DESC",
          "SELECT player.Player_name AS Name, player.College AS College FROM player ORDER BY player.Rank_of_the_year DESC",
          "SELECT Player_name AS Name, College AS University FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT p.Player_name, p.College FROM player AS p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESCENDING",
          "SELECT Name, College FROM (SELECT Player_name AS Name, College FROM player) ORDER BY Rank_of_the_year DESC",
          "SELECT player.Player_name, player.College FROM player ORDER BY Rank_of_the_year DESCENDING"
        ]
      ]
    },
    {
      "id": 1949,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World'))",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID INNER JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title = 'Super Mario World'",
          "SELECT DISTINCT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON g.Game_ID = gp.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player AS p JOIN game_player AS gp ON p.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title LIKE 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p WHERE EXISTS (SELECT 1 FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID WHERE gp.Player_ID = p.Player_ID AND g.Title = 'Super Mario World')",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p WHERE p.Player_ID IN (SELECT gp.Player_ID FROM game_player gp JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World')",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p INNER JOIN game_player gp ON p.Player_ID = gp.Player_ID INNER JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1950,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT P.Player_name, P.Rank_of_the_year FROM player P JOIN game_player GP ON P.Player_ID = GP.Player_ID JOIN game G ON GP.Game_ID = G.Game_ID WHERE G.Title = 'Super Mario World'",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID INNER JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'",
          "SELECT P.Player_name, P.Rank_of_the_year FROM player AS P, game_player AS GP, game AS G WHERE P.Player_ID = GP.Player_ID AND GP.Game_ID = G.Game_ID AND G.Title = 'Super Mario World'",
          "SELECT DISTINCT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT P.Player_name, P.Rank_of_the_year FROM player P, game_player GP, game G WHERE P.Player_ID = GP.Player_ID AND GP.Game_ID = G.Game_ID AND G.Title = 'Super Mario World'",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player USING (Player_ID) JOIN game USING (Game_ID) WHERE game.Title = 'Super Mario World'",
          "SELECT P.Player_name, P.Rank_of_the_year FROM player P INNER JOIN game_player GP ON P.Player_ID = GP.Player_ID INNER JOIN game G ON GP.Game_ID = G.Game_ID WHERE G.Title = 'Super Mario World'",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'",
          "SELECT P.Player_name, P.Rank_of_the_year FROM player P JOIN game_player GP ON P.Player_ID = GP.Player_ID JOIN game G ON G.Game_ID = GP.Game_ID WHERE G.Title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1951,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT DISTINCT game.Developers FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'",
          "SELECT DISTINCT d.Developers FROM game AS d JOIN game_player AS gp ON d.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn')",
          "SELECT DISTINCT game.Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1952,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT DISTINCT game.Developers FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn'",
          "SELECT DISTINCT game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn')",
          "SELECT DISTINCT Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1953,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT AVG(g.Units_sold_Millions) FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
          "SELECT AVG(Units_sold_Millions) FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g INNER JOIN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')) gp ON g.Game_ID = gp.Game_ID",
          "SELECT AVG(Units_sold_Millions) FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT AVG(Units_sold_Millions) FROM (SELECT g.Units_sold_Millions FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard') AS GuardGames",
          "SELECT AVG(Units_sold_Millions) FROM game g WHERE g.Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT AVG(g.Units_sold_Millions) FROM game g JOIN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard')) gp ON g.Game_ID = gp.Game_ID"
        ]
      ]
    },
    {
      "id": 1954,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT AVG(game.Units_sold_Millions) FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard')",
          "SELECT AVG(g.Units_sold_Millions) FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON p.Player_ID = gp.Player_ID WHERE p.Position = 'Guard' GROUP BY p.Position",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE EXISTS (SELECT 1 FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard' AND game.Game_ID = game_player.Game_ID)",
          "SELECT AVG(Units_sold_Millions) FROM (SELECT g.Units_sold_Millions FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard') AS subquery",
          "SELECT AVG(Units_sold_Millions) FROM game g WHERE g.Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1955,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT Title, Platform_name FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT game.Title AS GameTitle, platform.Platform_name AS PlatformName FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game AS g INNER JOIN platform AS p ON g.Platform_ID = p.Platform_ID",
          "SELECT Title, Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT g.Title AS Game_Title, p.Platform_name AS Platform_Name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT Title AS GameTitle, Platform_name AS PlatformName FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID"
        ]
      ]
    },
    {
      "id": 1956,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT a.Title, b.Platform_name FROM game AS a JOIN platform AS b ON a.Platform_ID = b.Platform_ID",
          "SELECT Title AS Game_Title, Platform_name AS Platform_Name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game JOIN platform USING(Platform_ID)"
        ]
      ]
    },
    {
      "id": 1957,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district = 'Asia' OR Market_district = 'USA')",
          "SELECT game.Title FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA'",
          "SELECT DISTINCT g.Title FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID AND (p.Market_district = 'Asia' OR p.Market_district = 'USA')",
          "SELECT Title FROM game WHERE EXISTS (SELECT 1 FROM platform WHERE game.Platform_ID = platform.Platform_ID AND Market_district IN ('Asia', 'USA'))",
          "SELECT g.Title FROM game AS g JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' UNION SELECT g.Title FROM game AS g JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'USA'",
          "SELECT Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID AND p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA'))",
          "SELECT g.Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT DISTINCT Title FROM game g LEFT JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'"
        ]
      ]
    },
    {
      "id": 1958,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district = 'Asia' OR Market_district = 'USA')",
          "SELECT game.Title FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA'",
          "SELECT Title FROM game, platform WHERE game.Platform_ID = platform.Platform_ID AND (platform.Market_district = 'Asia' OR platform.Market_district = 'USA')",
          "SELECT g.Title FROM game AS g, platform AS p WHERE g.Platform_ID = p.Platform_ID AND (p.Market_district = 'Asia' OR p.Market_district = 'USA')",
          "SELECT Title FROM game WHERE Platform_ID IN (SELECT Platform_ID FROM platform WHERE Market_district IN ('Asia', 'USA'))",
          "SELECT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT g.Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'",
          "SELECT Title FROM game WHERE EXISTS (SELECT 1 FROM platform WHERE platform.Platform_ID = game.Platform_ID AND platform.Market_district IN ('Asia', 'USA'))"
        ]
      ]
    },
    {
      "id": 1959,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise",
          "SELECT g.Franchise, COUNT(g.Game_ID) FROM game g GROUP BY g.Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise",
          "SELECT Franchise AS GameFranchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise",
          "SELECT game.Franchise, COUNT(*) FROM game GROUP BY game.Franchise",
          "SELECT `Franchise`, COUNT(`Game_ID`) FROM `game` GROUP BY `Franchise`",
          "SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise ORDER BY Franchise",
          "SELECT Franchise, COUNT(*) AS GameCount FROM game GROUP BY Franchise HAVING COUNT(*) > 0",
          "SELECT DISTINCT Franchise, COUNT(Game_ID) OVER (PARTITION BY Franchise) FROM game",
          "SELECT Franchise, COUNT(1) FROM game GROUP BY Franchise"
        ]
      ]
    },
    {
      "id": 1960,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise",
          "SELECT g.Franchise, COUNT(g.Game_ID) FROM game g GROUP BY g.Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise ORDER BY Franchise",
          "SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC",
          "SELECT `Franchise`, COUNT(`Game_ID`) FROM `game` GROUP BY `Franchise`",
          "SELECT Franchise AS GameFranchise, COUNT(*) AS GameCount FROM game GROUP BY GameFranchise",
          "SELECT Franchise, COUNT(1) FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise HAVING COUNT(*) > 0",
          "SELECT Franchise, COUNT(Game_ID) FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise"
        ]
      ]
    },
    {
      "id": 1961,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT g.Franchise FROM game AS g GROUP BY g.Franchise ORDER BY COUNT(g.Game_ID) DESC LIMIT 1",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(*) AS NumGames FROM game GROUP BY Franchise) AS FranchiseCount ORDER BY NumGames DESC LIMIT 1",
          "SELECT TOP 1 Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) AS Counts)",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Franchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise ORDER BY TotalGames DESC LIMIT 1",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise ORDER BY GameCount DESC LIMIT 1",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1962,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise ORDER BY COUNT(g.Game_ID) DESC LIMIT 1",
          "SELECT Franchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise ORDER BY TotalGames DESC LIMIT 1",
          "SELECT TOP 1 Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) tmp)",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(*) as GameCount FROM game GROUP BY Franchise) AS SubQuery ORDER BY GameCount DESC LIMIT 1",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise ORDER BY NumberOfGames DESC LIMIT 1",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1963,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2",
          "SELECT g.Franchise FROM game AS g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1)",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(*) AS NumGames FROM game GROUP BY Franchise) AS FranchiseCount WHERE NumGames >= 2",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(*) > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(DISTINCT Game_ID) >= 2",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2",
          "SELECT g.Franchise FROM game g WHERE EXISTS (SELECT 1 FROM game WHERE Franchise = g.Franchise GROUP BY Franchise HAVING COUNT(*) > 1)",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 1964,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) > 1",
          "SELECT DISTINCT g.Franchise FROM game g JOIN (SELECT Franchise, COUNT(*) as cnt FROM game GROUP BY Franchise) as sub ON g.Franchise = sub.Franchise WHERE sub.cnt >= 2",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(*) as TotalGames FROM game GROUP BY Franchise) WHERE TotalGames > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1",
          "SELECT g.Franchise FROM game g WHERE (SELECT COUNT(*) FROM game WHERE Franchise = g.Franchise) > 1 GROUP BY g.Franchise",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(DISTINCT Game_ID) >= 2",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(DISTINCT g.Game_ID) > 1",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1965,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Game_ID IS NULL",
          "SELECT Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player WHERE player.Player_ID = game_player.Player_ID)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT gp.Player_ID FROM game_player gp)",
          "SELECT Player_name FROM player EXCEPT SELECT Player_name FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID",
          "SELECT DISTINCT Player_name FROM player WHERE Player_ID NOT IN (SELECT DISTINCT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = true)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active)",
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active IS TRUE)"
        ]
      ]
    },
    {
      "id": 1966,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player EXCEPT SELECT p.Player_name FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID",
          "SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL",
          "SELECT DISTINCT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT gp.Player_ID FROM game_player gp)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT DISTINCT gp.Player_ID FROM game_player gp)",
          "SELECT Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT p.Player_name FROM player p LEFT OUTER JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Game_ID IS NULL",
          "SELECT DISTINCT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active = true)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT gp.Player_ID FROM game_player gp WHERE gp.If_active = true)"
        ]
      ]
    },
    {
      "id": 1967,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' INTERSECT SELECT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT g.Title FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College = 'Oklahoma') AND EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College = 'Auburn')",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma')) AND Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' INTERSECT SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn')",
          "WITH OklahomaGames AS (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Oklahoma'), AuburnGames AS (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn') SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM OklahomaGames INTERSECT SELECT Game_ID FROM AuburnGames)",
          "SELECT g.Title FROM game g WHERE g.Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma') INTERSECT SELECT g.Title FROM game g WHERE g.Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn')",
          "SELECT DISTINCT g.Title FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College IN ('Oklahoma', 'Auburn') GROUP BY g.Title HAVING COUNT(DISTINCT p.College) > 1",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' UNION SELECT Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn')",
          "SELECT Title FROM game WHERE EXISTS (SELECT * FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = game.Game_ID AND p.College = 'Oklahoma') AND EXISTS (SELECT * FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = game.Game_ID AND p.College = 'Auburn')",
          "SELECT g.Title FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' INTERSECT SELECT g.Title FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1968,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' OR p.College = 'Auburn'",
          "SELECT g.Title FROM game AS g INNER JOIN game_player AS gp ON g.Game_ID = gp.Game_ID INNER JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn')",
          "SELECT DISTINCT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma' OR College = 'Auburn'))",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' OR p.College = 'Auburn')",
          "SELECT DISTINCT g.Title FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND (p.College = 'Oklahoma' OR p.College = 'Auburn')",
          "SELECT Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn') GROUP BY g.Title",
          "SELECT DISTINCT Title FROM game WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = game.Game_ID AND (p.College = 'Oklahoma' OR p.College = 'Auburn'))",
          "SELECT g.Title FROM game g WHERE EXISTS (SELECT * FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College IN ('Oklahoma', 'Auburn'))",
          "SELECT DISTINCT Title FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' OR p.College = 'Auburn'",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College IN ('Oklahoma', 'Auburn')))"
        ]
      ]
    },
    {
      "id": 1969,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT Franchise FROM game",
          "SELECT DISTINCT g.Franchise FROM game g",
          "SELECT Franchise FROM game GROUP BY Franchise",
          "SELECT DISTINCT game.Franchise FROM game",
          "SELECT Franchise FROM (SELECT DISTINCT Franchise FROM game) AS UniqueFranchises",
          "SELECT DISTINCT Franchise FROM game ORDER BY Franchise",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IS NOT NULL",
          "SELECT DISTINCT Franchise AS GameFranchise FROM game",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise <> ''",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IS NOT NULL AND Franchise <> ''"
        ]
      ]
    },
    {
      "id": 1970,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT Franchise FROM game",
          "SELECT DISTINCT game.Franchise FROM game",
          "SELECT Franchise FROM game GROUP BY Franchise",
          "SELECT DISTINCT g.Franchise FROM game AS g",
          "SELECT DISTINCT Franchise FROM game ORDER BY Franchise",
          "SELECT Franchise FROM (SELECT DISTINCT Franchise FROM game) AS UniqueFranchises",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IS NOT NULL",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise <> ''",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise != ''",
          "SELECT DISTINCT Franchise FROM game WHERE LENGTH(Franchise) > 0"
        ]
      ]
    },
    {
      "id": 1971,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
          "SELECT g.Title FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard' AND gp.Player_ID IS NULL",
          "SELECT Title FROM game EXCEPT SELECT Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT Title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT DISTINCT Title FROM game WHERE Game_ID NOT IN (SELECT DISTINCT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp, player p WHERE gp.Player_ID = p.Player_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position LIKE 'Guard'))"
        ]
      ]
    },
    {
      "id": 1972,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
          "SELECT g.Title FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard' AND gp.Player_ID IS NULL",
          "SELECT Title FROM game EXCEPT SELECT Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard'",
          "SELECT Title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game AS g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player AS gp JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT DISTINCT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1973,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC",
          "SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC",
          "SELECT `Name` FROM `press` ORDER BY `Year_Profits_billion` DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Press_ID ASC",
          "SELECT Name AS PressName FROM press ORDER BY Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC LIMIT ALL",
          "SELECT press.Name FROM press ORDER BY Year_Profits_billion DESC, Press_ID",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Name ASC"
        ]
      ]
    },
    {
      "id": 1974,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC",
          "SELECT `Name` FROM `press` ORDER BY `Year_Profits_billion` DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY press.Year_Profits_billion DESC",
          "SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Press_ID",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC LIMIT ALL",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Name",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Month_Profits_billion DESC"
        ]
      ]
    },
    {
      "id": 1975,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1",
          "SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE (Year_Profits_billion > 15) OR (Month_Profits_billion > 1)",
          "SELECT DISTINCT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT p.Name FROM press AS p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 UNION SELECT Name FROM press WHERE Month_Profits_billion > 1",
          "SELECT press.Name FROM press WHERE (press.Year_Profits_billion > 15) OR (press.Month_Profits_billion > 1)",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 ORDER BY Name",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 GROUP BY Name"
        ]
      ]
    },
    {
      "id": 1976,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1.0",
          "SELECT `Name` FROM `press` WHERE `Year_Profits_billion` > 15 OR `Month_Profits_billion` > 1",
          "SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15.0 OR Month_Profits_billion > 1.0",
          "SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE (Year_Profits_billion > 15) OR (Month_Profits_billion > 1)",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1.0",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1"
        ]
      ]
    },
    {
      "id": 1977,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT avg(Year_Profits_billion), max(Year_Profits_billion) FROM press",
          "SELECT AVG(Year_Profits_billion) AS Average_Yearly_Profit, MAX(Year_Profits_billion) AS Maximum_Yearly_Profit FROM press",
          "SELECT average(Year_Profits_billion), maximum(Year_Profits_billion) FROM press",
          "SELECT AVG(p.Year_Profits_billion), MAX(p.Year_Profits_billion) FROM press p",
          "SELECT AVG(`Year_Profits_billion`), MAX(`Year_Profits_billion`) FROM `press`",
          "SELECT AVG(Year_Profits_billion) average_profit, MAX(Year_Profits_billion) max_profit FROM press",
          "SELECT AVG(Year_Profits_billion) as AvgProfit, MAX(Year_Profits_billion) as MaxProfit FROM press",
          "SELECT AVG(Year_Profits_billion) AverageYearlyProfit, MAX(Year_Profits_billion) MaximumYearlyProfit FROM press",
          "SELECT AVG(Year_Profits_billion) \"Average Annual Profit\", MAX(Year_Profits_billion) \"Maximum Annual Profit\" FROM press",
          "SELECT AVG(Year_Profits_billion) avg_yearly_profit, MAX(Year_Profits_billion) max_yearly_profit FROM press"
        ]
      ]
    },
    {
      "id": 1978,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Press_ID, AVG(Year_Profits_billion) AS Average_Yearly_Profit, MAX(Year_Profits_billion) AS Maximum_Yearly_Profit FROM press GROUP BY Press_ID",
          "SELECT p.Press_ID, AVG(p.Year_Profits_billion), MAX(p.Year_Profits_billion) FROM press p GROUP BY p.Press_ID",
          "SELECT Name, AVG(Year_Profits_billion) AS AvgProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press GROUP BY Press_ID",
          "SELECT Press_ID, AVG(Year_Profits_billion) AS AverageProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press GROUP BY Press_ID",
          "SELECT p.Name, AVG(p.Year_Profits_billion) AS AverageYearlyProfit, MAX(p.Year_Profits_billion) AS MaxYearlyProfit FROM press p GROUP BY p.Press_ID",
          "SELECT Press_ID, AVG(Year_Profits_billion) AS AvgYearlyProfit, MAX(Year_Profits_billion) AS MaxYearlyProfit FROM press GROUP BY Press_ID",
          "SELECT p.Press_ID, AVG(p.Year_Profits_billion) AS Average_Yearly_Profit, MAX(p.Year_Profits_billion) AS Maximum_Yearly_Profit FROM press p GROUP BY p.Press_ID",
          "SELECT Press_ID, AVG(Year_Profits_billion) AS AverageAnnualProfit, MAX(Year_Profits_billion) AS MaximumAnnualProfit FROM press GROUP BY Press_ID",
          "SELECT p.Press_ID, AVG(p.Year_Profits_billion) AS AvgYearlyProfit, MAX(p.Year_Profits_billion) AS MaxYearlyProfit FROM press p GROUP BY p.Press_ID",
          "SELECT Press_ID, AVG(Year_Profits_billion) AS AvgProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press GROUP BY Press_ID"
        ]
      ]
    },
    {
      "id": 1979,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
          "SELECT p.Name FROM press p ORDER BY p.Month_Profits_billion DESC LIMIT 1",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC",
          "SELECT p.Name FROM press AS p ORDER BY p.Month_Profits_billion DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC FETCH FIRST ROW ONLY",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) LIMIT 1",
          "SELECT Name FROM (SELECT Name, Month_Profits_billion FROM press ORDER BY Month_Profits_billion DESC) AS subquery LIMIT 1",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC, Press_ID ASC LIMIT 1",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1980,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
          "SELECT `Name` FROM `press` ORDER BY `Month_Profits_billion` DESC LIMIT 1",
          "SELECT p.Name FROM press p ORDER BY p.Month_Profits_billion DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT press.Name FROM press ORDER BY press.Month_Profits_billion DESC LIMIT 1",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC, Press_ID ASC LIMIT 1",
          "SELECT Name FROM press AS p ORDER BY p.Month_Profits_billion DESC LIMIT 1",
          "SELECT Name FROM (SELECT Name FROM press ORDER BY Month_Profits_billion DESC) AS subquery LIMIT 1",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1981,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 UNION SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1",
          "SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION ALL SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press p WHERE p.Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION ALL SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC UNION SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion ASC",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)"
        ]
      ]
    },
    {
      "id": 1982,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 UNION SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1;",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION ALL SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);",
          "SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press);"
        ]
      ]
    },
    {
      "id": 1983,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM author WHERE Age < 30",
          "SELECT COUNT(Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age <= 29",
          "SELECT COUNT(*) FROM author WHERE `Age` < 30",
          "SELECT COUNT(`Author_ID`) FROM `author` WHERE `Age` < 30",
          "SELECT COUNT(*) FROM `author` WHERE `Age` <= 29",
          "SELECT COUNT(Author_ID) FROM author WHERE Age <= 29",
          "SELECT COUNT(*) FROM author WHERE Age BETWEEN 0 AND 29",
          "SELECT COUNT(*) FROM author WHERE Age < 30 AND Age > 0",
          "SELECT COUNT(*) FROM author WHERE Age < 30 AND Gender IN ('Male', 'Female')"
        ]
      ]
    },
    {
      "id": 1984,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT count(*) FROM author WHERE Age < 30",
          "SELECT COUNT(Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age < 30",
          "SELECT count(Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(*) AS NumberOfYoungAuthors FROM author WHERE Age < 30",
          "SELECT COUNT(1) FROM author WHERE Age < 30",
          "SELECT count(*) FROM author WHERE `Age` < 30",
          "SELECT COUNT(*) FROM `author` WHERE `Age` < 30",
          "SELECT COUNT(*) FROM author a WHERE a.Age < 30",
          "SELECT COUNT(Author_ID) FROM `author` WHERE `Age` < 30"
        ]
      ]
    },
    {
      "id": 1985,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender",
          "SELECT author.Gender, AVG(author.Age) AS Average_Age FROM author GROUP BY author.Gender",
          "SELECT a.Gender, AVG(a.Age) AS Avg_Age FROM author a GROUP BY a.Gender",
          "SELECT `Gender`, AVG(`Age`) AS `AverageAge` FROM `author` GROUP BY `Gender`",
          "SELECT Gender, AVG(Age) AS AverageAge FROM author GROUP BY Gender",
          "SELECT Gender, average(Age) FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) average_age FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender ORDER BY Gender",
          "SELECT Gender AS Author_Gender, AVG(Age) AS Average_Author_Age FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) AS AvgAge FROM author GROUP BY Gender"
        ]
      ]
    },
    {
      "id": 1986,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender",
          "SELECT a.Gender, AVG(a.Age) AS Average_Age FROM author a GROUP BY a.Gender",
          "SELECT `Gender`, AVG(`Age`) AS `AverageAge` FROM `author` GROUP BY `Gender`",
          "SELECT author.Gender, average(author.Age) FROM author GROUP BY author.Gender",
          "SELECT Gender, average(Age) average_age FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) average_age FROM author GROUP BY Gender",
          "SELECT a.Gender, AVG(a.Age) FROM author AS a GROUP BY a.Gender",
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender ORDER BY Gender",
          "SELECT Gender, AVG(Age) AS Avg_Age FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) AS AverageAge FROM author GROUP BY Gender"
        ]
      ]
    },
    {
      "id": 1987,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT COUNT(*), Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) AS Total FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(Author_ID), Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) FROM author GROUP BY Gender HAVING Age > 30",
          "SELECT a.Gender, COUNT(*) FROM author a WHERE a.Age > 30 GROUP BY a.Gender",
          "SELECT COUNT(Author_ID) AS NumberOfAuthors, Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) AS CountOfAuthors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(*) AS TotalAuthors, Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender"
        ]
      ]
    },
    {
      "id": 1988,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT a.Gender, COUNT(a.Author_ID) FROM author a WHERE a.Age > 30 GROUP BY a.Gender",
          "SELECT `Gender`, COUNT(*) AS `Count` FROM `author` WHERE `Age` > 30 GROUP BY `Gender`",
          "SELECT Gender, COUNT(Author_ID) AS NumberOfAuthors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender ORDER BY Gender",
          "SELECT Gender, COUNT(*) AS TotalAuthors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT a.Gender, COUNT(*) FROM author a WHERE a.Age > 30 GROUP BY a.Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender HAVING COUNT(Author_ID) > 0",
          "SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1989,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Release_date DESC",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESC",
          "SELECT `Title` FROM `book` ORDER BY `Release_date` DESC",
          "SELECT b.Title FROM book AS b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESCENDING",
          "SELECT Title FROM book ORDER BY Release_date DESC, Book_ID DESC",
          "SELECT Title FROM book ORDER BY Release_date DESC LIMIT ALL",
          "SELECT Title FROM book ORDER BY Release_date DESC, Book_ID ASC",
          "SELECT Title FROM book ORDER BY Release_date DESC, Sale_Amount DESC"
        ]
      ]
    },
    {
      "id": 1990,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Release_date DESC",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESC",
          "SELECT `Title` FROM `book` ORDER BY `Release_date` DESC",
          "SELECT b.Title FROM book AS b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY book.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESCENDING",
          "SELECT Title FROM `book` ORDER BY `Release_date` DESC",
          "SELECT Title FROM book b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESC"
        ]
      ]
    },
    {
      "id": 1991,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series",
          "SELECT b.Book_Series, COUNT(b.Book_ID) AS NumberOfBooks FROM book b GROUP BY b.Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series",
          "SELECT `Book_Series`, COUNT(*) AS `TotalBooks` FROM `book` GROUP BY `Book_Series`",
          "SELECT Book_Series, COUNT(*) AS Total FROM book GROUP BY Book_Series",
          "SELECT Book_Series AS Series, COUNT(Book_ID) AS BookCount FROM book GROUP BY Series",
          "SELECT b.Book_Series, COUNT(*) FROM book AS b GROUP BY b.Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) AS CountOfBooks FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(*) AS NumberOfBooks FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series"
        ]
      ]
    },
    {
      "id": 1992,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series",
          "SELECT b.Book_Series, COUNT(b.Book_ID) AS NumberOfBooks FROM book b GROUP BY b.Book_Series",
          "SELECT `Book_Series`, COUNT(`Book_ID`) FROM `book` GROUP BY `Book_Series`",
          "SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(*) AS TotalBooks FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) AS BookCount FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series ORDER BY Book_Series",
          "SELECT Book_Series AS Series, COUNT(Book_ID) AS BooksInSeries FROM book GROUP BY Series",
          "SELECT `Book_Series`, COUNT(*) AS `Count` FROM `book` GROUP BY `Book_Series`",
          "SELECT Book_Series, COUNT(*) AS CountOfBooks FROM book GROUP BY Book_Series"
        ]
      ]
    },
    {
      "id": 1993,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5",
          "SELECT book.Title, book.Release_date FROM book ORDER BY book.Sale_Amount DESC LIMIT 5",
          "SELECT b.Title, b.Release_date FROM book AS b ORDER BY b.Sale_Amount DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;",
          "SELECT `Title`, `Release_date` FROM `book` ORDER BY `Sale_Amount` DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Book_ID ASC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Release_date DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Title ASC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Author_ID ASC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1994,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5",
          "SELECT book.Title, book.Release_date FROM book ORDER BY book.Sale_Amount DESC LIMIT 5",
          "SELECT b.Title, b.Release_date FROM book AS b ORDER BY b.Sale_Amount DESC LIMIT 5",
          "SELECT `Title`, `Release_date` FROM `book` ORDER BY `Sale_Amount` DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;",
          "SELECT book.Title, book.Release_date FROM book ORDER BY Sale_Amount DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Book_ID ASC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Title ASC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Release_date DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1995,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500",
          "SELECT DISTINCT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 INTERSECT SELECT DISTINCT b.Book_Series FROM book b WHERE b.Sale_Amount < 500",
          "SELECT b.Book_Series FROM book b JOIN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AS HighSales ON b.Book_Series = HighSales.Book_Series JOIN (SELECT Book_Series FROM book WHERE Sale_Amount < 500) AS LowSales ON b.Book_Series = LowSales.Book_Series",
          "SELECT b1.Book_Series FROM book b1 WHERE EXISTS (SELECT 1 FROM book b2 WHERE b2.Book_Series = b1.Book_Series AND b2.Sale_Amount > 1000) AND EXISTS (SELECT 1 FROM book b3 WHERE b3.Book_Series = b1.Book_Series AND b3.Sale_Amount < 500)",
          "SELECT DISTINCT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 AND b.Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)",
          "SELECT b.Book_Series FROM book b GROUP BY b.Book_Series HAVING MAX(b.Sale_Amount) > 1000 AND MIN(b.Sale_Amount) < 500",
          "WITH HighSales AS (SELECT Book_Series FROM book WHERE Sale_Amount > 1000), LowSales AS (SELECT Book_Series FROM book WHERE Sale_Amount < 500) SELECT Book_Series FROM HighSales INTERSECT SELECT Book_Series FROM LowSales",
          "SELECT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 INTERSECT SELECT b.Book_Series FROM book b WHERE b.Sale_Amount < 500 GROUP BY b.Book_Series",
          "SELECT DISTINCT b.Book_Series FROM book b WHERE (SELECT MAX(Sale_Amount) FROM book WHERE Book_Series = b.Book_Series) > 1000 AND (SELECT MIN(Sale_Amount) FROM book WHERE Book_Series = b.Book_Series) < 500",
          "SELECT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 AND b.Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500) GROUP BY b.Book_Series"
        ]
      ]
    },
    {
      "id": 1996,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500",
          "SELECT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 INTERSECT SELECT b.Book_Series FROM book b WHERE b.Sale_Amount < 500",
          "SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount < 500",
          "SELECT b1.Book_Series FROM book b1 JOIN book b2 ON b1.Book_Series = b2.Book_Series WHERE b1.Sale_Amount > 1000 AND b2.Sale_Amount < 500",
          "SELECT Book_Series FROM book GROUP BY Book_Series HAVING MAX(Sale_Amount) > 1000 AND MIN(Sale_Amount) < 500",
          "SELECT DISTINCT b.Book_Series FROM book b JOIN book b2 ON b.Book_Series = b2.Book_Series WHERE b.Sale_Amount > 1000 AND b2.Sale_Amount < 500",
          "SELECT Book_Series FROM (SELECT Book_Series FROM book WHERE Sale_Amount > 1000 UNION ALL SELECT Book_Series FROM book WHERE Sale_Amount < 500) AS subquery GROUP BY Book_Series HAVING COUNT(*) > 1",
          "SELECT b.Book_Series FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount > 1000) AND EXISTS (SELECT 1 FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount < 500)",
          "SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500 ORDER BY Book_Series",
          "SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount > 1000 AND Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)"
        ]
      ]
    },
    {
      "id": 1997,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' INTERSECT SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' INTERSECT SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT'",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Book_Series IN ('MM', 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING SUM(CASE WHEN Book_Series = 'MM' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Book_Series = 'LT' THEN 1 ELSE 0 END) > 0)",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')",
          "SELECT a.Name FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') AND a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM' UNION SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT' HAVING COUNT(*) > 1)",
          "SELECT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' UNION SELECT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT' HAVING COUNT(DISTINCT b.Book_Series) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') INTERSECT SELECT Name FROM author WHERE Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')",
          "SELECT DISTINCT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') HAVING COUNT(DISTINCT b.Book_Series) = 2"
        ]
      ]
    },
    {
      "id": 1998,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' INTERSECT SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT'",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' INTERSECT SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')",
          "SELECT DISTINCT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_Series = 'MM' AND author.Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Book_Series = 'MM' AND a.Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') AND a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')",
          "SELECT a.Name FROM author a JOIN book b1 ON a.Author_ID = b1.Author_ID JOIN book b2 ON a.Author_ID = b2.Author_ID WHERE b1.Book_Series = 'MM' AND b2.Book_Series = 'LT'",
          "SELECT DISTINCT a.Name FROM author a WHERE EXISTS (SELECT * FROM book WHERE Author_ID = a.Author_ID AND Book_Series = 'MM') AND EXISTS (SELECT * FROM book WHERE Author_ID = a.Author_ID AND Book_Series = 'LT')",
          "SELECT DISTINCT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING SUM(CASE WHEN Book_Series = 'MM' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Book_Series = 'LT' THEN 1 ELSE 0 END) > 0)",
          "SELECT DISTINCT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2"
        ]
      ]
    },
    {
      "id": 1999,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)",
          "SELECT a.Name, a.Age FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_ID IS NULL",
          "SELECT Name, Age FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID)",
          "SELECT author.Name, author.Age FROM author LEFT OUTER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL",
          "SELECT Name, Age FROM author a WHERE a.Author_ID NOT IN (SELECT Author_ID FROM book)",
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT DISTINCT Author_ID FROM book)",
          "SELECT a.Name, a.Age FROM author a WHERE NOT EXISTS (SELECT * FROM book b WHERE b.Author_ID = a.Author_ID)",
          "SELECT Name, Age FROM author EXCEPT SELECT Name, Age FROM author JOIN book ON author.Author_ID = book.Author_ID",
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b)",
          "SELECT Name, Age FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b WHERE b.Author_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2000,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_ID IS NULL",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT DISTINCT Author_ID FROM book)",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID)",
          "SELECT Name FROM author EXCEPT SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book)",
          "SELECT author.Name FROM author LEFT OUTER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL",
          "SELECT Name FROM author WHERE NOT EXISTS (SELECT * FROM book WHERE book.Author_ID = author.Author_ID)",
          "SELECT Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT Author_ID FROM book WHERE Author_ID IS NOT NULL)",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Author_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2001,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID HAVING COUNT(*) > 1)",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1)",
          "SELECT a.Name FROM author a JOIN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1) b ON a.Author_ID = b.Author_ID",
          "SELECT Name FROM (SELECT author.Name, COUNT(book.Book_ID) AS Books_Count FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID) AS subquery WHERE Books_Count > 1",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(DISTINCT book.Book_ID) > 1",
          "SELECT a.Name FROM author a WHERE (SELECT COUNT(*) FROM book b WHERE b.Author_ID = a.Author_ID) > 1"
        ]
      ]
    },
    {
      "id": 2002,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(book.Book_ID) > 1",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1)",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID HAVING COUNT(b.Book_ID) > 1)",
          "SELECT Name FROM (SELECT author.Name, COUNT(book.Book_ID) AS BooksPublished FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID) AS SubQuery WHERE BooksPublished > 1",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(DISTINCT book.Book_ID) > 1",
          "SELECT a.Name FROM author a JOIN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1) b ON a.Author_ID = b.Author_ID",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(DISTINCT Book_ID) > 1)"
        ]
      ]
    },
    {
      "id": 2003,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT b.Title, a.Name, p.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT b.Title AS BookTitle, a.Name AS AuthorName, p.Name AS PublisherName FROM book b, author a, press p WHERE b.Author_ID = a.Author_ID AND b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Name, Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT book.Title, author.Name, press.Name FROM book, author, press WHERE book.Author_ID = author.Author_ID AND book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Author.Name, Press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3",
          "SELECT b.Title, a.Name AS Author, p.Name AS Publisher FROM book b LEFT JOIN author a ON b.Author_ID = a.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT TOP 3 book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC",
          "SELECT b.Title AS Book_Title, a.Name AS Author_Name, p.Name AS Press_Name FROM book b CROSS JOIN author a ON b.Author_ID = a.Author_ID CROSS JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Name, Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 2004,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT b.Title, a.Name, p.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Name, Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3",
          "SELECT b.Title AS BookTitle, a.Name AS AuthorName, p.Name AS PressName FROM book b, author a, press p WHERE b.Author_ID = a.Author_ID AND b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT Title, author.Name, press.Name FROM book, author, press WHERE book.Author_ID = author.Author_ID AND book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3",
          "SELECT b.Title, a.Name AS AuthorName, p.Name AS PressName FROM book b LEFT JOIN author a ON b.Author_ID = a.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Name, Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT b.Title, a.Name, p.Name FROM book b CROSS JOIN author a ON b.Author_ID = a.Author_ID CROSS JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3",
          "SELECT Title, Name, Name FROM book JOIN author USING (Author_ID) JOIN press USING (Press_ID) ORDER BY Sale_Amount DESC LIMIT 3",
          "SELECT b.Title AS Book_Title, a.Name AS Author_Name, p.Name AS Press_Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 2005,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID",
          "SELECT Name, SUM(Sale_Amount) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID",
          "SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID",
          "SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sales FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Press_ID",
          "SELECT Name, SUM(Sale_Amount) FROM press, book WHERE press.Press_ID = book.Press_ID GROUP BY press.Press_ID",
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press AS p JOIN book AS b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press JOIN book ON Press_ID = book.Press_ID GROUP BY Press_ID",
          "SELECT press.Name, SUM(book.Sale_Amount) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID",
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p INNER JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID",
          "SELECT Name, SUM(Sale_Amount) FROM press JOIN book USING (Press_ID) GROUP BY Press_ID"
        ]
      ]
    },
    {
      "id": 2006,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT Name, SUM(Sale_Amount) FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY Name",
          "SELECT p.Name, SUM(b.Sale_Amount) AS TotalSales FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press, book WHERE press.Press_ID = book.Press_ID GROUP BY Name",
          "SELECT press.Name, SUM(book.Sale_Amount) FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT p.Name AS Press_Name, SUM(b.Sale_Amount) AS Total_Book_Sales FROM press p INNER JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, SUM(Sale_Amount) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, Total_Sales FROM (SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name) AS SalesSummary"
        ]
      ]
    },
    {
      "id": 2007,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, COUNT(*) FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT p.Name, COUNT(b.Book_ID) AS NumberOfBooks FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY press.Press_ID",
          "SELECT press.Name, COUNT(*) AS BooksSold FROM book INNER JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name",
          "SELECT Name, COUNT(*) FROM book, press WHERE book.Press_ID = press.Press_ID AND Sale_Amount > 1000 GROUP BY press.Press_ID",
          "SELECT p.Name AS PublisherName, COUNT(b.Book_ID) AS TotalBooks FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT Name, COUNT(Book_ID) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name",
          "SELECT p.Name, COUNT(b.Book_ID) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(*) AS Total FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT p.Name, COUNT(*) FROM book b RIGHT JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name"
        ]
      ]
    },
    {
      "id": 2008,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, COUNT(*) FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT press.Name, COUNT(book.Book_ID) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Press_ID",
          "SELECT p.Name, COUNT(b.Book_ID) AS NumberOfBooks FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT Name, COUNT(*) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Press_ID",
          "SELECT Name, COUNT(Book_ID) FROM press JOIN book USING (Press_ID) WHERE Sale_Amount > 1000 GROUP BY Press_ID",
          "SELECT p.Name, COUNT(*) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT Name, COUNT(*) AS BookCount FROM press INNER JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY press.Press_ID",
          "SELECT p.Name, COUNT(b.Book_ID) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID",
          "SELECT Name, COUNT(Book_ID) FROM press, book WHERE press.Press_ID = book.Press_ID AND Sale_Amount > 1000 GROUP BY Press_ID",
          "SELECT p.Name, COUNT(b.Book_ID) FROM press p INNER JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Press_ID"
        ]
      ]
    },
    {
      "id": 2009,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1",
          "SELECT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT TOP 1 author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC FETCH FIRST ROW ONLY)",
          "SELECT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC, Book_ID ASC LIMIT 1)",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC, book.Book_ID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2010,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1)",
          "SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC, Release_date ASC LIMIT 1)",
          "SELECT a.Name FROM author a INNER JOIN (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1) b ON a.Author_ID = b.Author_ID"
        ]
      ]
    },
    {
      "id": 2011,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(Book_ID) DESC LIMIT 1)",
          "SELECT author.Name, author.Gender FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC LIMIT 1",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT a.Name, a.Gender FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1",
          "SELECT TOP 1 a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM (SELECT Author_ID, COUNT(*) AS TotalBooks FROM book GROUP BY Author_ID ORDER BY TotalBooks DESC) AS SubQuery LIMIT 1)",
          "SELECT a.Name, a.Gender FROM author a WHERE a.Author_ID = (SELECT b.Author_ID FROM book b GROUP BY b.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1)",
          "SELECT Name, Gender FROM author JOIN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(Book_ID) DESC LIMIT 1) AS MostBooks ON author.Author_ID = MostBooks.Author_ID",
          "SELECT a.Name, a.Gender FROM author a JOIN (SELECT Author_ID, COUNT(*) AS BookCount FROM book GROUP BY Author_ID ORDER BY BookCount DESC LIMIT 1) b ON a.Author_ID = b.Author_ID"
        ]
      ]
    },
    {
      "id": 2012,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(Book_ID) DESC LIMIT 1)",
          "SELECT author.Name, author.Gender FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC LIMIT 1",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT a.Name, a.Gender FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1",
          "SELECT TOP 1 author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM (SELECT Author_ID, COUNT(*) AS TotalBooks FROM book GROUP BY Author_ID ORDER BY TotalBooks DESC) AS SubQuery LIMIT 1)",
          "SELECT author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) = (SELECT MAX(Counted) FROM (SELECT COUNT(Book_ID) AS Counted FROM book GROUP BY Author_ID) AS Counts)",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) = MAX((SELECT COUNT(Book_ID) FROM book GROUP BY Author_ID)))",
          "SELECT a.Name, a.Gender FROM author a WHERE EXISTS (SELECT NULL FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2013,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Book_ID IS NULL",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author a WHERE NOT EXISTS (SELECT * FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND a.Author_ID = b.Author_ID)",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b WHERE b.Press_ID IN (SELECT p.Press_ID FROM press p WHERE p.Name = 'Accor'))",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Author_ID IS NULL OR b.Press_ID NOT IN (SELECT Press_ID FROM press WHERE Name = 'Accor')",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = 'Accor'))"
        ]
      ]
    },
    {
      "id": 2014,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = 'Accor'))",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Book_ID IS NULL",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author a WHERE NOT EXISTS (SELECT * FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND a.Author_ID = b.Author_ID)",
          "SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b WHERE b.Press_ID IN (SELECT p.Press_ID FROM press p WHERE p.Name = 'Accor'))",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b WHERE EXISTS (SELECT 1 FROM press p WHERE p.Press_ID = b.Press_ID AND p.Name = 'Accor'))",
          "SELECT Name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND a.Author_ID = b.Author_ID)"
        ]
      ]
    },
    {
      "id": 2015,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2",
          "SELECT press.Name, press.Year_Profits_billion FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(b.Book_ID) > 2)",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.Name, p.Year_Profits_billion HAVING COUNT(DISTINCT b.Book_ID) > 2",
          "SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name, press.Year_Profits_billion HAVING COUNT(DISTINCT book.Book_ID) > 2",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE p.Press_ID IN (SELECT b.Press_ID FROM book b GROUP BY b.Press_ID HAVING COUNT(*) > 2)",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p INNER JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(*) > 2"
        ]
      ]
    },
    {
      "id": 2016,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2",
          "SELECT press.Name, press.Year_Profits_billion FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(b.Book_ID) > 2)",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p INNER JOIN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2) AS sub ON p.Press_ID = sub.Press_ID",
          "SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(DISTINCT book.Book_ID) > 2",
          "SELECT p.Name, p.Year_Profits_billion FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.Name, p.Year_Profits_billion HAVING COUNT(b.Book_ID) > 2"
        ]
      ]
    },
    {
      "id": 2017,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Authors",
          "SELECT COUNT(author_name) FROM Authors",
          "SELECT COUNT(DISTINCT author_name) FROM Authors",
          "SELECT COUNT(*) AS TotalAuthors FROM Authors",
          "SELECT COUNT(1) FROM Authors",
          "SELECT COUNT(A.author_name) FROM Authors A",
          "SELECT COUNT(*) FROM (SELECT author_name FROM Authors) AS AuthorCount",
          "SELECT COUNT(DISTINCT A.author_name) FROM Authors A",
          "SELECT COUNT(author_name) AS AuthorTotal FROM Authors",
          "SELECT COUNT(*) FROM Authors WHERE author_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2018,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Authors",
          "SELECT Authors.author_name FROM Authors",
          "SELECT a.author_name FROM Authors a",
          "SELECT DISTINCT author_name FROM Authors",
          "SELECT author_name FROM Authors ORDER BY author_name",
          "SELECT author_name FROM Authors GROUP BY author_name",
          "SELECT author_name AS AuthorNames FROM Authors",
          "SELECT UPPER(author_name) FROM Authors",
          "SELECT author_name FROM Authors WHERE author_name IS NOT NULL",
          "SELECT author_name FROM Authors LIMIT 100"
        ]
      ]
    },
    {
      "id": 2019,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name, other_details FROM Authors",
          "SELECT Authors.author_name, Authors.other_details FROM Authors",
          "SELECT a.author_name, a.other_details FROM Authors a",
          "SELECT author_name AS Name, other_details AS Details FROM Authors",
          "SELECT `author_name`, `other_details` FROM `Authors`",
          "SELECT author_name, other_details FROM Authors ORDER BY author_name",
          "SELECT DISTINCT author_name, other_details FROM Authors",
          "SELECT author_name, other_details FROM Authors WHERE author_name IS NOT NULL",
          "SELECT Authors.author_name, Authors.other_details FROM Authors WHERE author_name <> ''",
          "SELECT * FROM Authors"
        ]
      ]
    },
    {
      "id": 2020,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT A.other_details FROM Authors A WHERE A.author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name LIKE 'Addison Denesik'",
          "SELECT Authors.other_details FROM Authors WHERE Authors.author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'"
        ]
      ]
    },
    {
      "id": 2021,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Documents",
          "SELECT COUNT(document_id) FROM Documents",
          "SELECT COUNT(DISTINCT document_id) FROM Documents",
          "SELECT COUNT(1) FROM Documents",
          "SELECT COUNT(*) AS NumberOfDocuments FROM Documents",
          "SELECT COUNT(document_id) AS DocumentCount FROM Documents",
          "SELECT COUNT(DISTINCT document_id) AS UniqueDocumentCount FROM Documents",
          "SELECT COUNT(*) FROM Documents WHERE document_id IS NOT NULL",
          "SELECT COUNT(document_id) FROM Documents WHERE document_id > 0",
          "SELECT COUNT(*) FROM Documents WHERE document_description IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2022,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Documents WHERE document_id = 4",
          "SELECT D.author_name FROM Documents D WHERE D.document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = '4'",
          "SELECT Documents.author_name FROM Documents WHERE Documents.document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = 4;",
          "SELECT A.author_name FROM Documents AS A WHERE A.document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = (4)",
          "SELECT author_name FROM Documents WHERE document_id = (SELECT document_id FROM Documents WHERE document_id = 4)",
          "SELECT author_name FROM Documents WHERE document_id IN (4)",
          "SELECT author_name FROM Documents WHERE document_id = 4 LIMIT 1"
        ]
      ]
    },
    {
      "id": 2023,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'",
          "SELECT a.author_name FROM Documents a WHERE a.document_name = 'Travel to Brazil'",
          "SELECT Documents.author_name FROM Documents WHERE Documents.document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name LIKE 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' LIMIT 1",
          "SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_description LIKE '%Travel to Brazil%'",
          "SELECT author_name FROM Documents WHERE document_name IN ('Travel to Brazil')",
          "SELECT DISTINCT author_name FROM Documents WHERE document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' AND document_description IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2024,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(*) FROM Documents d WHERE d.author_name = 'Era Kerluke'",
          "SELECT COUNT(1) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(document_id) AS DocumentCount FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(*) FROM Documents WHERE author_name LIKE 'Era Kerluke'",
          "SELECT COUNT(*) FROM Documents d WHERE d.author_name LIKE 'Era Kerluke'",
          "SELECT COUNT(DISTINCT document_id) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(document_id) FROM Documents d WHERE d.author_name = 'Era Kerluke'",
          "SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke' GROUP BY author_name"
        ]
      ]
    },
    {
      "id": 2025,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_name, document_description FROM Documents",
          "SELECT Documents.document_name, Documents.document_description FROM Documents",
          "SELECT d.document_name, d.document_description FROM Documents d",
          "SELECT document_name AS Name, document_description AS Description FROM Documents",
          "SELECT document_name, document_description FROM Documents ORDER BY document_name",
          "SELECT document_name, document_description FROM Documents WHERE document_description IS NOT NULL",
          "SELECT DISTINCT document_name, document_description FROM Documents",
          "SELECT document_name, document_description FROM Documents GROUP BY document_id",
          "SELECT document_name, document_description FROM Documents LIMIT 100",
          "SELECT document_name, document_description FROM Documents WHERE document_id > 0"
        ]
      ]
    },
    {
      "id": 2026,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'",
          "SELECT d.document_id, d.document_name FROM Documents d WHERE d.author_name = 'Bianka Cummings'",
          "SELECT Documents.document_id, Documents.document_name FROM Documents WHERE Documents.author_name = 'Bianka Cummings'",
          "SELECT document_id AS ID, document_name AS Name FROM Documents WHERE author_name = 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name LIKE 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' ORDER BY document_id",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' AND document_id IS NOT NULL",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' AND document_name IS NOT NULL",
          "SELECT d.document_id, d.document_name FROM Documents AS d WHERE d.author_name = 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' GROUP BY document_id, document_name"
        ]
      ]
    },
    {
      "id": 2027,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name, other_details FROM Authors WHERE author_name = (SELECT author_name FROM Documents WHERE document_name = 'Travel to China')",
          "SELECT a.author_name, a.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
          "SELECT Authors.author_name, Authors.other_details FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name WHERE Documents.document_name = 'Travel to China'",
          "SELECT author_name, other_details FROM Authors WHERE author_name IN (SELECT author_name FROM Documents WHERE document_name = 'Travel to China')",
          "SELECT a.author_name, a.other_details FROM Authors a, Documents d WHERE a.author_name = d.author_name AND d.document_name = 'Travel to China'",
          "SELECT author_name, other_details FROM Authors WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.author_name = Authors.author_name AND document_name = 'Travel to China')",
          "SELECT DISTINCT a.author_name, a.other_details FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
          "SELECT author_name, other_details FROM Authors WHERE author_name = (SELECT author_name FROM Documents WHERE document_name LIKE 'Travel to China')",
          "SELECT a.author_name, a.other_details FROM Authors a WHERE a.author_name = (SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to China')",
          "SELECT Authors.author_name, Authors.other_details FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name AND Documents.document_name = 'Travel to China'"
        ]
      ]
    },
    {
      "id": 2028,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name, COUNT(*) FROM Documents GROUP BY author_name",
          "SELECT author_name, COUNT(document_id) AS NumberOfDocuments FROM Documents GROUP BY author_name",
          "SELECT Authors.author_name, COUNT(Documents.document_id) FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name",
          "SELECT a.author_name, COUNT(d.document_id) FROM Authors a INNER JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name",
          "SELECT d.author_name, COUNT(*) AS doc_count FROM Documents d GROUP BY d.author_name",
          "SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name ORDER BY author_name",
          "SELECT author_name, COUNT(*) AS total_documents FROM Documents GROUP BY author_name HAVING COUNT(*) > 0",
          "SELECT Documents.author_name, COUNT(Documents.document_id) FROM Documents GROUP BY Documents.author_name",
          "SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name WITH ROLLUP",
          "SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name HAVING COUNT(document_id) > 0"
        ]
      ]
    },
    {
      "id": 2029,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.author_name FROM Documents A GROUP BY A.author_name ORDER BY COUNT(A.document_id) DESC LIMIT 1",
          "SELECT author_name FROM (SELECT author_name, COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) AS subquery ORDER BY doc_count DESC LIMIT 1",
          "SELECT TOP 1 author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC",
          "SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) AS counts)",
          "SELECT D.author_name FROM Documents D GROUP BY D.author_name ORDER BY COUNT(D.document_id) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT author_name, COUNT(*) AS num_documents FROM Documents GROUP BY author_name ORDER BY num_documents DESC LIMIT 1",
          "SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1",
          "SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC, author_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2030,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT a.author_name FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2",
          "SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) > 1)",
          "SELECT Authors.author_name FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name HAVING COUNT(Documents.document_id) > 1",
          "SELECT DISTINCT a.author_name FROM Authors a, Documents d WHERE a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2",
          "SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2",
          "SELECT a.author_name FROM Authors a WHERE EXISTS (SELECT 1 FROM Documents d WHERE d.author_name = a.author_name GROUP BY d.author_name HAVING COUNT(d.document_id) > 1)",
          "SELECT a.author_name FROM Authors a INNER JOIN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) > 1) d ON a.author_name = d.author_name",
          "SELECT author_name FROM (SELECT author_name, COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) AS subquery WHERE doc_count >= 2",
          "SELECT Authors.author_name FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name HAVING COUNT(DISTINCT Documents.document_id) > 1",
          "SELECT author_name FROM Documents d GROUP BY author_name HAVING COUNT(document_id) >= 2"
        ]
      ]
    },
    {
      "id": 2031,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Business_Processes",
          "SELECT COUNT(process_id) FROM Business_Processes",
          "SELECT COUNT(DISTINCT process_id) FROM Business_Processes",
          "SELECT COUNT(*) AS total_processes FROM Business_Processes",
          "SELECT COUNT(process_id) AS total_processes FROM Business_Processes",
          "SELECT COUNT(DISTINCT process_id) AS total_processes FROM Business_Processes",
          "SELECT COUNT(1) FROM Business_Processes",
          "SELECT COUNT(1) AS total_processes FROM Business_Processes",
          "SELECT COUNT(*) FROM Business_Processes WHERE process_id IS NOT NULL",
          "SELECT COUNT(process_id) FROM Business_Processes WHERE process_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2032,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9",
          "SELECT bp.next_process_id, bp.process_name, bp.process_description FROM Business_Processes AS bp WHERE bp.process_id = 9",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;",
          "SELECT Business_Processes.next_process_id, Business_Processes.process_name, Business_Processes.process_description FROM Business_Processes WHERE Business_Processes.process_id = 9",
          "SELECT `next_process_id`, `process_name`, `process_description` FROM `Business_Processes` WHERE `process_id` = 9",
          "SELECT next_process_id AS NextID, process_name AS Name, process_description AS Description FROM Business_Processes WHERE process_id = 9",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = '9'",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (SELECT process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT p.next_process_id, p.process_name, p.process_description FROM Business_Processes p WHERE p.process_id = 9",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (9)"
        ]
      ]
    },
    {
      "id": 2033,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT BP.process_name FROM Business_Processes BP JOIN Business_Processes BP2 ON BP.process_id = BP2.next_process_id WHERE BP2.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT BP.process_name FROM Business_Processes BP, Business_Processes BP2 WHERE BP.process_id = BP2.next_process_id AND BP2.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9 LIMIT 1)",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT B.next_process_id FROM Business_Processes B WHERE B.process_id = 9)",
          "SELECT P.process_name FROM Business_Processes P INNER JOIN Business_Processes Q ON P.process_id = Q.next_process_id WHERE Q.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9 AND next_process_id IS NOT NULL)",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9) AND next_process_id IS NOT NULL",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9) ORDER BY process_id DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2034,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Process_Outcomes",
          "SELECT COUNT(process_outcome_code) FROM Process_Outcomes",
          "SELECT COUNT(DISTINCT process_outcome_code) FROM Process_Outcomes",
          "SELECT COUNT(*) AS NumberOfProcessOutcomes FROM Process_Outcomes",
          "SELECT COUNT(process_outcome_description) FROM Process_Outcomes",
          "SELECT COUNT(DISTINCT process_outcome_description) FROM Process_Outcomes",
          "SELECT COUNT(1) FROM Process_Outcomes",
          "SELECT COUNT(*) FROM (SELECT process_outcome_code FROM Process_Outcomes) AS Temp",
          "SELECT COUNT(*) FROM Process_Outcomes WHERE process_outcome_code IS NOT NULL",
          "SELECT COUNT(process_outcome_code) FROM Process_Outcomes WHERE process_outcome_code <> ''"
        ]
      ]
    },
    {
      "id": 2035,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes",
          "SELECT process_outcome_code AS Code, process_outcome_description AS Description FROM Process_Outcomes",
          "SELECT p.process_outcome_code, p.process_outcome_description FROM Process_Outcomes p",
          "SELECT * FROM Process_Outcomes",
          "SELECT Process_Outcomes.process_outcome_code, Process_Outcomes.process_outcome_description FROM Process_Outcomes",
          "SELECT `process_outcome_code`, `process_outcome_description` FROM `Process_Outcomes`",
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes ORDER BY process_outcome_code",
          "SELECT DISTINCT process_outcome_code, process_outcome_description FROM Process_Outcomes",
          "SELECT process_outcome_code AS OutcomeCode, process_outcome_description AS OutcomeDescription FROM Process_Outcomes",
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2036,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'",
          "SELECT description FROM Process_Outcomes WHERE code = 'working'",
          "SELECT Process_Outcomes.process_outcome_description FROM Process_Outcomes WHERE Process_Outcomes.process_outcome_code = 'working'",
          "SELECT po.process_outcome_description FROM Process_Outcomes po WHERE po.process_outcome_code = 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code LIKE 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = \"working\"",
          "SELECT description FROM Process_Outcomes WHERE outcome_code = 'working'",
          "SELECT * FROM Process_Outcomes WHERE process_outcome_code = 'working' FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IN ('working')"
        ]
      ]
    },
    {
      "id": 2037,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Process_Status",
          "SELECT COUNT(process_status_code) FROM Process_Status",
          "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status",
          "SELECT COUNT(process_status_description) FROM Process_Status",
          "SELECT COUNT(DISTINCT process_status_description) FROM Process_Status",
          "SELECT COUNT(*) FROM (SELECT DISTINCT process_status_code FROM Process_Status) AS unique_statuses",
          "SELECT COUNT(*) FROM (SELECT process_status_code FROM Process_Status GROUP BY process_status_code) AS grouped_statuses",
          "SELECT COUNT(*) FROM (SELECT * FROM Process_Status) AS all_statuses",
          "SELECT COUNT(process_status_code) FROM Process_Status WHERE process_status_code IS NOT NULL",
          "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status WHERE process_status_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2038,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_status_code, process_status_description FROM Process_Status",
          "SELECT process_status_code AS Code, process_status_description AS Description FROM Process_Status",
          "SELECT p.process_status_code, p.process_status_description FROM Process_Status p",
          "SELECT Process_Status.process_status_code, Process_Status.process_status_description FROM Process_Status",
          "SELECT * FROM Process_Status",
          "SELECT process_status_code, process_status_description FROM Process_Status ORDER BY process_status_code",
          "SELECT DISTINCT process_status_code, process_status_description FROM Process_Status",
          "SELECT process_status_description, process_status_code FROM Process_Status",
          "SELECT process_status_code, process_status_description FROM Process_Status WHERE process_status_code IS NOT NULL",
          "SELECT process_status_code, process_status_description FROM Process_Status GROUP BY process_status_code, process_status_description"
        ]
      ]
    },
    {
      "id": 2039,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code LIKE 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' LIMIT 1",
          "SELECT PS.process_status_description FROM Process_Status AS PS WHERE PS.process_status_code = 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code IN ('ct')",
          "SELECT process_status_description FROM Process_Status WHERE TRIM(process_status_code) = 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' COLLATE NOCASE",
          "SELECT process_status_description FROM Process_Status WHERE LOWER(process_status_code) = 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' ORDER BY process_status_code",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' AND process_status_description IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2040,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(*) AS TotalStaff FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(1) FROM Staff",
          "SELECT COUNT(staff_id) AS StaffCount FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(DISTINCT staff_id) AS UniqueStaffCount FROM Staff",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff) AS StaffTable",
          "SELECT COUNT(*) FROM Staff WHERE staff_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2041,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_id, staff_details FROM Staff",
          "SELECT s.staff_id, s.staff_details FROM Staff s",
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff",
          "SELECT * FROM Staff",
          "SELECT staff_id AS ID, staff_details AS Details FROM Staff",
          "SELECT `staff_id`, `staff_details` FROM `Staff`",
          "SELECT Staff.staff_id AS StaffID, Staff.staff_details AS StaffDetails FROM Staff",
          "SELECT DISTINCT staff_id, staff_details FROM Staff",
          "SELECT staff_id, staff_details FROM Staff ORDER BY staff_id",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2042,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT * FROM Staff WHERE staff_id = 100",
          "SELECT staff_details FROM Staff WHERE staff_id = 100",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100",
          "SELECT S.* FROM Staff AS S WHERE S.staff_id = 100",
          "SELECT staff_details FROM Staff WHERE staff_id = 100",
          "SELECT S.staff_details FROM Staff S WHERE S.staff_id = 100",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100",
          "SELECT * FROM Staff WHERE staff_id = 100",
          "SELECT staff_details FROM Staff WHERE staff_id = 100",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100"
        ]
      ]
    },
    {
      "id": 2043,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Ref_Staff_Roles",
          "SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles",
          "SELECT COUNT(*) AS NumberOfStaffRoles FROM Ref_Staff_Roles",
          "SELECT COUNT(DISTINCT staff_role_code) AS UniqueStaffRoles FROM Ref_Staff_Roles",
          "SELECT COUNT(staff_role_code) AS TotalStaffRoles FROM Ref_Staff_Roles",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles) AS UniqueRoles",
          "SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL",
          "SELECT COUNT(*) FROM Ref_Staff_Roles WHERE staff_role_code <> ''",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2044,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles",
          "SELECT staff_role_code AS Code, staff_role_description AS Description FROM Ref_Staff_Roles",
          "SELECT Ref_Staff_Roles.staff_role_code, Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles",
          "SELECT r.staff_role_code, r.staff_role_description FROM Ref_Staff_Roles r",
          "SELECT * FROM Ref_Staff_Roles",
          "SELECT `staff_role_code`, `staff_role_description` FROM `Ref_Staff_Roles`",
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles ORDER BY staff_role_code",
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL",
          "SELECT DISTINCT staff_role_code, staff_role_description FROM Ref_Staff_Roles",
          "SELECT staff_role_code AS 'Role Code', staff_role_description AS 'Role Description' FROM Ref_Staff_Roles"
        ]
      ]
    },
    {
      "id": 2045,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'"
        ]
      ]
    },
    {
      "id": 2046,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes",
          "SELECT COUNT(UNIQUE document_id) FROM Documents_Processes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT document_id FROM Documents_Processes)",
          "SELECT COUNT(document_id) FROM (SELECT DISTINCT document_id FROM Documents_Processes dp)",
          "SELECT COUNT(DISTINCT dp.document_id) FROM Documents_Processes dp",
          "SELECT COUNT(*) FROM (SELECT document_id FROM Documents_Processes GROUP BY document_id)",
          "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes WHERE document_id IS NOT NULL",
          "SELECT COUNT(document_id) FROM Documents_Processes GROUP BY document_id HAVING COUNT(process_id) > 0",
          "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes WHERE process_id IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT document_id FROM Documents_Processes dp GROUP BY dp.document_id HAVING COUNT(dp.process_id) > 0)"
        ]
      ]
    },
    {
      "id": 2047,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_id FROM Documents_Processes",
          "SELECT DISTINCT process_id FROM Documents_Processes",
          "SELECT process_id FROM Documents_Processes GROUP BY process_id",
          "SELECT dp.process_id FROM Documents_Processes dp",
          "SELECT DISTINCT dp.process_id FROM Documents_Processes dp",
          "SELECT process_id FROM Documents_Processes ORDER BY process_id",
          "SELECT DISTINCT process_id FROM Documents_Processes ORDER BY process_id",
          "SELECT dp.process_id FROM Documents_Processes dp GROUP BY dp.process_id",
          "SELECT dp.process_id FROM Documents_Processes dp ORDER BY dp.process_id",
          "SELECT DISTINCT dp.process_id FROM Documents_Processes dp ORDER BY dp.process_id"
        ]
      ]
    },
    {
      "id": 2048,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_Processes",
          "SELECT D.document_id FROM Documents D LEFT JOIN Documents_Processes DP ON D.document_id = DP.document_id WHERE DP.document_id IS NULL",
          "SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)",
          "SELECT D.document_id FROM Documents D WHERE NOT EXISTS (SELECT 1 FROM Documents_Processes DP WHERE D.document_id = DP.document_id)",
          "SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT DISTINCT document_id FROM Documents_Processes)",
          "SELECT document_id FROM Documents D WHERE D.document_id NOT IN (SELECT DP.document_id FROM Documents_Processes DP)",
          "SELECT D.document_id FROM Documents D WHERE NOT EXISTS (SELECT NULL FROM Documents_Processes DP WHERE DP.document_id = D.document_id)",
          "SELECT document_id FROM Documents AS D WHERE NOT EXISTS (SELECT * FROM Documents_Processes AS DP WHERE D.document_id = DP.document_id)",
          "SELECT DISTINCT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)",
          "SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT DP.document_id FROM Documents_Processes DP WHERE DP.document_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2049,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)",
          "SELECT BP.process_id FROM Business_Processes BP LEFT JOIN Documents_Processes DP ON BP.process_id = DP.process_id WHERE DP.process_id IS NULL",
          "SELECT process_id FROM Business_Processes EXCEPT SELECT process_id FROM Documents_Processes",
          "SELECT BP.process_id FROM Business_Processes BP WHERE NOT EXISTS (SELECT 1 FROM Documents_Processes DP WHERE BP.process_id = DP.process_id)",
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes)",
          "SELECT DISTINCT BP.process_id FROM Business_Processes BP WHERE BP.process_id NOT IN (SELECT process_id FROM Documents_Processes)",
          "SELECT process_id FROM Business_Processes BP WHERE NOT EXISTS (SELECT NULL FROM Documents_Processes DP WHERE DP.process_id = BP.process_id)",
          "SELECT BP.process_id FROM Business_Processes BP LEFT OUTER JOIN Documents_Processes DP ON BP.process_id = DP.process_id WHERE DP.document_id IS NULL",
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes WHERE document_id IS NOT NULL)",
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DP.process_id FROM Documents_Processes DP)"
        ]
      ]
    },
    {
      "id": 2050,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_outcome_description, process_status_description FROM Process_Outcomes JOIN Documents_Processes ON Process_Outcomes.process_outcome_code = Documents_Processes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE document_id = 0",
          "SELECT po.process_outcome_description, ps.process_status_description FROM Process_Outcomes po, Process_Status ps, Documents_Processes dp WHERE dp.document_id = 0 AND dp.process_outcome_code = po.process_outcome_code AND dp.process_status_code = ps.process_status_code",
          "SELECT P.process_outcome_description, S.process_status_description FROM Documents_Processes AS DP INNER JOIN Process_Outcomes AS P ON DP.process_outcome_code = P.process_outcome_code INNER JOIN Process_Status AS S ON DP.process_status_code = S.process_status_code WHERE DP.document_id = 0",
          "SELECT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes INNER JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code INNER JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0",
          "SELECT (SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = (SELECT process_outcome_code FROM Documents_Processes WHERE document_id = 0)), (SELECT process_status_description FROM Process_Status WHERE process_status_code = (SELECT process_status_code FROM Documents_Processes WHERE document_id = 0))",
          "SELECT outcome.process_outcome_description, status.process_status_description FROM Documents_Processes dp JOIN Process_Outcomes outcome ON dp.process_outcome_code = outcome.process_outcome_code JOIN Process_Status status ON dp.process_status_code = status.process_status_code WHERE dp.document_id = 0",
          "SELECT A.process_outcome_description, B.process_status_description FROM Process_Outcomes A, Process_Status B, Documents_Processes C WHERE C.document_id = 0 AND C.process_outcome_code = A.process_outcome_code AND C.process_status_code = B.process_status_code",
          "SELECT process_outcome_description, process_status_description FROM Process_Outcomes, Process_Status, Documents_Processes WHERE Documents_Processes.document_id = 0 AND Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code AND Documents_Processes.process_status_code = Process_Status.process_status_code",
          "SELECT po.process_outcome_description, ps.process_status_description FROM Documents_Processes dp INNER JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code INNER JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0",
          "SELECT (SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IN (SELECT process_outcome_code FROM Documents_Processes WHERE document_id = 0)), (SELECT process_status_description FROM Process_Status WHERE process_status_code IN (SELECT process_status_code FROM Documents_Processes WHERE document_id = 0))"
        ]
      ]
    },
    {
      "id": 2051,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT BP.process_name FROM Business_Processes BP JOIN Documents_Processes DP ON BP.process_id = DP.process_id JOIN Documents D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))",
          "SELECT BP.process_name FROM Business_Processes AS BP INNER JOIN Documents_Processes AS DP ON BP.process_id = DP.process_id INNER JOIN Documents AS D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))",
          "SELECT BP.process_name FROM Business_Processes BP, Documents_Processes DP, Documents D WHERE BP.process_id = DP.process_id AND DP.document_id = D.document_id AND D.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT DP.process_id FROM Documents_Processes DP JOIN Documents D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil')",
          "SELECT BP.process_name FROM Business_Processes BP JOIN Documents_Processes DP ON BP.process_id = DP.process_id WHERE DP.document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT DP.process_id FROM Documents_Processes DP INNER JOIN Documents D ON DP.document_id = D.document_id WHERE D.document_name = 'Travel to Brazil')",
          "SELECT BP.process_name FROM Business_Processes BP INNER JOIN Documents_Processes DP ON BP.process_id = DP.process_id INNER JOIN Documents D ON D.document_id = DP.document_id WHERE D.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))"
        ]
      ]
    },
    {
      "id": 2052,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id",
          "SELECT process_id, COUNT(*) AS document_count FROM Documents_Processes GROUP BY process_id",
          "SELECT DP.process_id, COUNT(DP.document_id) AS NumOfDocuments FROM Documents_Processes DP GROUP BY DP.process_id",
          "SELECT process_id, COUNT(document_id) AS TotalDocuments FROM Documents_Processes GROUP BY process_id",
          "SELECT DP.process_id, COUNT(*) FROM Documents_Processes DP GROUP BY DP.process_id",
          "SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id ORDER BY process_id",
          "SELECT process_id, COUNT(DISTINCT document_id) FROM Documents_Processes GROUP BY process_id",
          "SELECT DP.process_id, COUNT(DP.document_id) FROM Documents_Processes DP GROUP BY DP.process_id ORDER BY DP.process_id",
          "SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id HAVING COUNT(document_id) > 0",
          "SELECT process_id, COUNT(*) FROM Documents_Processes GROUP BY process_id HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2053,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
          "SELECT COUNT(staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
          "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 GROUP BY staff_id",
          "SELECT COUNT(staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 GROUP BY staff_id",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 GROUP BY staff_id",
          "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 AND staff_id IS NOT NULL",
          "SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 AND staff_id IS NOT NULL GROUP BY staff_id",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 AND staff_id IS NOT NULL",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 AND staff_id IS NOT NULL GROUP BY staff_id"
        ]
      ]
    },
    {
      "id": 2054,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_id, COUNT(*) FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT S.staff_id, COUNT(*) AS process_count FROM Staff_in_Processes AS S GROUP BY S.staff_id",
          "SELECT staff_id, COUNT(document_id) FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT staff_id, COUNT(DISTINCT document_id) FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT S.staff_id, COUNT(DP.document_id) FROM Staff_in_Processes AS S JOIN Documents_Processes AS DP ON S.document_id = DP.document_id AND S.process_id = DP.process_id GROUP BY S.staff_id",
          "SELECT staff_id, COUNT(DISTINCT document_id, process_id) FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT staff_id, COUNT(process_id) FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT S.staff_id, COUNT(*) FROM Staff_in_Processes S GROUP BY S.staff_id",
          "SELECT staff_id, COUNT(*) AS total_processes FROM Staff_in_Processes GROUP BY staff_id",
          "SELECT S.staff_id, COUNT(P.process_id) FROM Staff_in_Processes S INNER JOIN Business_Processes P ON S.process_id = P.process_id GROUP BY S.staff_id"
        ]
      ]
    },
    {
      "id": 2055,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_role_code, COUNT(*) FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT S.staff_role_code, COUNT(*) AS process_count FROM Staff_in_Processes AS S GROUP BY S.staff_role_code",
          "SELECT staff_role_code, COUNT(document_id) FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT staff_role_code, COUNT(DISTINCT document_id) FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT staff_role_code, COUNT(DISTINCT document_id, process_id) FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT S.staff_role_code, COUNT(DP.document_id) FROM Staff_in_Processes AS S JOIN Documents_Processes AS DP ON S.document_id = DP.document_id AND S.process_id = DP.process_id GROUP BY S.staff_role_code",
          "SELECT staff_role_code, COUNT(*) AS NumberOfProcesses FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT S.staff_role_code, COUNT(P.process_id) FROM Staff_in_Processes AS S JOIN Business_Processes AS P ON S.process_id = P.process_id GROUP BY S.staff_role_code",
          "SELECT staff_role_code, COUNT(process_id) FROM Staff_in_Processes GROUP BY staff_role_code",
          "SELECT S.staff_role_code, COUNT(*) FROM Staff_in_Processes AS S GROUP BY S.staff_role_code"
        ]
      ]
    },
    {
      "id": 2056,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3",
          "SELECT COUNT(UNIQUE staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3)",
          "SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_id",
          "SELECT DISTINCT COUNT(staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3",
          "SELECT COUNT(*) FROM (SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_role_code)",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3 AND staff_role_code IS NOT NULL",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3 HAVING COUNT(staff_role_code) > 0",
          "SELECT COUNT(DISTINCT staff_role_code) FROM (SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3) AS roles"
        ]
      ]
    },
    {
      "id": 2057,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Agencies",
          "SELECT COUNT(agency_id) FROM Agencies",
          "SELECT COUNT(*) AS total_agencies FROM Agencies",
          "SELECT COUNT(1) FROM Agencies",
          "SELECT COUNT(DISTINCT agency_id) FROM Agencies",
          "SELECT COUNT(ALL agency_id) FROM Agencies",
          "SELECT COUNT(agency_id) AS NumberOfAgencies FROM Agencies",
          "SELECT COUNT(*) FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT agency_id FROM Agencies) AS total",
          "SELECT COUNT(*) FROM Agencies GROUP BY agency_id HAVING agency_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2058,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Agencies",
          "SELECT COUNT(agency_id) FROM Agencies",
          "SELECT COUNT(*) AS NumberOfAgencies FROM Agencies",
          "SELECT COUNT(1) FROM Agencies",
          "SELECT COUNT(DISTINCT agency_id) FROM Agencies",
          "SELECT COUNT(ALL agency_id) FROM Agencies",
          "SELECT COUNT(agency_id) AS TotalAgencies FROM Agencies",
          "SELECT COUNT(*) FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT COUNT(*) FROM Agencies GROUP BY agency_id",
          "SELECT COUNT(*) FROM (SELECT agency_id FROM Agencies) AS SubQuery"
        ]
      ]
    },
    {
      "id": 2059,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies",
          "SELECT `agency_id`, `agency_details` FROM `Agencies`",
          "SELECT A.agency_id, A.agency_details FROM Agencies A",
          "SELECT agency_id AS AgencyID, agency_details AS AgencyDetails FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies ORDER BY agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id, agency_details",
          "SELECT * FROM Agencies"
        ]
      ]
    },
    {
      "id": 2060,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies",
          "SELECT `agency_id`, `agency_details` FROM `Agencies`",
          "SELECT A.agency_id, A.agency_details FROM Agencies A",
          "SELECT agency_id AS AgencyID, agency_details AS AgencyDetails FROM Agencies",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies ORDER BY agency_id",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id, agency_details",
          "SELECT * FROM Agencies"
        ]
      ]
    },
    {
      "id": 2061,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Clients",
          "SELECT COUNT(client_id) FROM Clients",
          "SELECT COUNT(*) AS NumberOfClients FROM Clients",
          "SELECT COUNT(1) FROM Clients",
          "SELECT COUNT(client_id) AS TotalClients FROM Clients",
          "SELECT COUNT(DISTINCT client_id) FROM Clients",
          "SELECT COUNT(DISTINCT client_id) AS UniqueClients FROM Clients",
          "SELECT COUNT(*) FROM Clients WHERE client_id IS NOT NULL",
          "SELECT COUNT(*) FROM Clients WHERE client_id > 0",
          "SELECT COUNT(*) FROM Clients WHERE '1'='1'"
        ]
      ]
    },
    {
      "id": 2062,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Clients",
          "SELECT COUNT(client_id) FROM Clients",
          "SELECT COUNT(*) AS total_clients FROM Clients",
          "SELECT COUNT(DISTINCT client_id) FROM Clients",
          "SELECT COUNT(1) FROM Clients",
          "SELECT COUNT(client_id) AS NumberOfClients FROM Clients",
          "SELECT COUNT(*) FROM Clients WHERE client_id IS NOT NULL",
          "SELECT COUNT(DISTINCT client_id) AS TotalClients FROM Clients",
          "SELECT COUNT(*) FROM Clients WHERE client_id > 0",
          "SELECT COUNT(*) FROM Clients WHERE client_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2063,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients",
          "SELECT Clients.client_id, Clients.client_details FROM Clients",
          "SELECT `client_id`, `client_details` FROM `Clients`",
          "SELECT c.client_id, c.client_details FROM Clients AS c",
          "SELECT client_id AS ClientID, client_details AS ClientDetails FROM Clients",
          "SELECT Clients.client_id AS ID, Clients.client_details AS Details FROM Clients",
          "SELECT client_id, client_details FROM Clients WHERE client_id IS NOT NULL",
          "SELECT DISTINCT client_id, client_details FROM Clients",
          "SELECT client_id, client_details FROM Clients ORDER BY client_id",
          "SELECT * FROM Clients WHERE client_id IS NOT NULL AND client_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2064,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients",
          "SELECT Clients.client_id, Clients.client_details FROM Clients",
          "SELECT `client_id`, `client_details` FROM `Clients`",
          "SELECT c.client_id, c.client_details FROM Clients AS c",
          "SELECT client_id AS ID, client_details AS Details FROM Clients",
          "SELECT client_id, client_details FROM Clients ORDER BY client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients",
          "SELECT client_id, client_details FROM Clients WHERE client_id IS NOT NULL",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.client_id > 0",
          "SELECT client_id, client_details FROM Clients GROUP BY client_id, client_details"
        ]
      ]
    },
    {
      "id": 2065,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, COUNT(*) FROM Clients GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) AS NumberOfClients FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(c.client_id) FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id",
          "SELECT agency_id, COUNT(*) AS client_count FROM Clients GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(*) FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(c.client_id) AS total_clients FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id",
          "SELECT agency_id, COUNT(DISTINCT client_id) FROM Clients GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.agency_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2066,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, COUNT(*) FROM Clients GROUP BY agency_id",
          "SELECT agency_id, COUNT(client_id) AS NumberOfClients FROM Clients GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(c.client_id) FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(*) AS client_count FROM Clients GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(*) FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(DISTINCT client_id) FROM Clients GROUP BY agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id ORDER BY agency_id",
          "SELECT Agencies.agency_id, IFNULL(COUNT(Clients.client_id), 0) AS total_clients FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Clients WHERE agency_id IS NOT NULL GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2067,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id ORDER BY COUNT(C.client_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies, Clients WHERE Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Clients.client_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(client_id) AS cnt FROM Clients GROUP BY agency_id) AS subquery)",
          "SELECT agency_id, agency_details FROM Agencies JOIN (SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id) AS ClientCounts ON Agencies.agency_id = ClientCounts.agency_id ORDER BY ClientCounts.num_clients DESC LIMIT 1",
          "SELECT TOP 1 agency_id, agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id ORDER BY COUNT(Clients.client_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) = MAX(COUNT(client_id)))",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT TOP 1 agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC)"
        ]
      ]
    },
    {
      "id": 2068,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Clients.client_id) DESC LIMIT 1",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) = (SELECT MAX(COUNT(client_id)) FROM Clients GROUP BY agency_id)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(client_id) AS cnt FROM Clients GROUP BY agency_id) AS counts)) LIMIT 1",
          "SELECT TOP 1 Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Clients.client_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id ORDER BY COUNT(C.client_id) DESC LIMIT 1",
          "SELECT agency_details, agency_id FROM (SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id ORDER BY num_clients DESC LIMIT 1) AS Subquery JOIN Agencies ON Agencies.agency_id = Subquery.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2069,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT NULL FROM Clients WHERE Clients.agency_id = Agencies.agency_id GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(DISTINCT client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 2070,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Agencies.agency_id = Clients.agency_id GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT agency_id, agency_details FROM Agencies A JOIN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2) C ON A.agency_id = C.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(DISTINCT client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE (SELECT COUNT(*) FROM Clients C WHERE C.agency_id = A.agency_id) >= 2 GROUP BY A.agency_id"
        ]
      ]
    },
    {
      "id": 2071,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details = 'Mac'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac')",
          "SELECT agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients WHERE client_details LIKE 'Mac')",
          "SELECT A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id AND C.client_details = 'Mac'",
          "SELECT agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.client_details = 'Mac'",
          "SELECT Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id AND Clients.client_details = 'Mac'",
          "SELECT agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients WHERE client_details = 'Mac')",
          "SELECT A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE 'Mac'",
          "SELECT agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id AND client_details = 'Mac')",
          "SELECT agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')"
        ]
      ]
    },
    {
      "id": 2072,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id = ANY (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT agency_details FROM Agencies, Clients WHERE Agencies.agency_id = Clients.agency_id AND Clients.client_details LIKE '%Mac%'",
          "SELECT A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id AND C.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id AND client_details LIKE '%Mac%')",
          "SELECT DISTINCT agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')"
        ]
      ]
    },
    {
      "id": 2073,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT C.client_details, A.agency_details FROM Clients C JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT client_details, agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_details AS ClientDetails, Agencies.agency_details AS AgencyDetails FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT `client_details`, `agency_details` FROM `Clients` JOIN `Agencies` ON `Clients`.`agency_id` = `Agencies`.`agency_id`",
          "SELECT client_details, agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT C.client_details, A.agency_details FROM Clients AS C INNER JOIN Agencies AS A ON C.agency_id = A.agency_id",
          "SELECT client_details AS ClientDetails, agency_details AS AgencyDetails FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_details, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT C.client_details, A.agency_details FROM Clients C, Agencies A WHERE C.agency_id = A.agency_id",
          "SELECT client_details, agency_details FROM Clients CROSS JOIN Agencies WHERE Clients.agency_id = Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2074,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Clients.client_details, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT c.client_details, a.agency_details FROM Clients c INNER JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT client_details AS ClientDetails, agency_details AS AgencyDetails FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_details, Agencies.agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT A.agency_details, C.client_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT client_details, agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Agencies.agency_details, Clients.client_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id",
          "SELECT client_details, agency_details FROM Clients LEFT JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT agency_details, client_details FROM Agencies RIGHT JOIN Clients ON Agencies.agency_id = Clients.agency_id"
        ]
      ]
    },
    {
      "id": 2075,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
          "SELECT Clients.sic_code, COUNT(Clients.client_id) AS NumberOfClients FROM Clients GROUP BY Clients.sic_code",
          "SELECT sic_code, COUNT(client_id) AS ClientCount FROM Clients GROUP BY sic_code",
          "SELECT c.sic_code, COUNT(*) AS Total FROM Clients c GROUP BY c.sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(DISTINCT client_id) FROM Clients GROUP BY sic_code",
          "SELECT Clients.sic_code, COUNT(*) FROM Clients GROUP BY Clients.sic_code",
          "SELECT c.sic_code, COUNT(c.client_id) FROM Clients c GROUP BY c.sic_code",
          "SELECT sic_code, COUNT(*) AS count_of_clients FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) AS total_clients FROM Clients GROUP BY sic_code"
        ]
      ]
    },
    {
      "id": 2076,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code",
          "SELECT C.sic_code, COUNT(C.client_id) FROM Clients C GROUP BY C.sic_code",
          "SELECT sic_code, COUNT(DISTINCT client_id) FROM Clients GROUP BY sic_code",
          "SELECT Clients.sic_code, COUNT(*) FROM Clients GROUP BY Clients.sic_code",
          "SELECT Clients.sic_code, COUNT(Clients.client_id) FROM Clients GROUP BY Clients.sic_code",
          "SELECT sic_code, COUNT(client_id) AS NumberOfClients FROM Clients GROUP BY sic_code",
          "SELECT C.sic_code, COUNT(*) AS ClientCount FROM Clients AS C GROUP BY C.sic_code",
          "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code ORDER BY sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code ORDER BY COUNT(client_id) DESC"
        ]
      ]
    },
    {
      "id": 2077,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.sic_code = 'Bad'",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = \"Bad\"",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.sic_code LIKE 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' AND client_id IS NOT NULL",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' ORDER BY client_id",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' LIMIT 100",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' GROUP BY client_id"
        ]
      ]
    },
    {
      "id": 2078,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.sic_code = 'Bad'",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code = 'Bad'",
          "SELECT client_id AS ClientID, client_details AS Details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT `client_id`, `client_details` FROM `Clients` WHERE `sic_code` = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' ORDER BY client_id",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' AND client_id IS NOT NULL",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' LIMIT 100"
        ]
      ]
    },
    {
      "id": 2079,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT * FROM Clients WHERE Clients.agency_id = Agencies.agency_id)"
        ]
      ]
    },
    {
      "id": 2080,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id",
          "SELECT a.agency_id, a.agency_details FROM Agencies a WHERE EXISTS (SELECT 1 FROM Clients c WHERE c.agency_id = a.agency_id)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT a.agency_id, a.agency_details FROM Agencies a, Clients c WHERE a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details",
          "SELECT DISTINCT a.agency_id, a.agency_details FROM Agencies a, Clients c WHERE a.agency_id = c.agency_id",
          "SELECT a.agency_id, a.agency_details FROM Agencies a WHERE a.agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT DISTINCT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id",
          "SELECT a.agency_id, a.agency_details FROM Agencies a INNER JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details"
        ]
      ]
    },
    {
      "id": 2081,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)",
          "SELECT A.agency_id FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_id IS NULL",
          "SELECT agency_id FROM Agencies WHERE NOT EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT A.agency_id FROM Agencies A WHERE NOT EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT agency_id FROM Agencies A WHERE A.agency_id NOT IN (SELECT agency_id FROM Clients)",
          "SELECT DISTINCT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT agency_id FROM Agencies AS A WHERE NOT EXISTS (SELECT NULL FROM Clients AS C WHERE C.agency_id = A.agency_id)",
          "SELECT A.agency_id FROM Agencies A WHERE A.agency_id NOT IN (SELECT C.agency_id FROM Clients C)",
          "SELECT DISTINCT A.agency_id FROM Agencies A LEFT OUTER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_id IS NULL"
        ]
      ]
    },
    {
      "id": 2082,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)",
          "SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.agency_id IS NULL",
          "SELECT agency_id FROM Agencies WHERE NOT EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT a.agency_id FROM Agencies a WHERE NOT EXISTS (SELECT NULL FROM Clients c WHERE c.agency_id = a.agency_id)",
          "SELECT Agencies.agency_id FROM Agencies LEFT OUTER JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.agency_id IS NULL",
          "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
          "SELECT agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT DISTINCT a.agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT c.agency_id FROM Clients c)",
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients WHERE agency_id IS NOT NULL)",
          "SELECT a.agency_id FROM Agencies a WHERE NOT EXISTS (SELECT 1 FROM Clients c WHERE c.agency_id = a.agency_id AND c.client_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2083,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Invoices",
          "SELECT COUNT(invoice_id) FROM Invoices",
          "SELECT COUNT(*) AS TotalInvoices FROM Invoices",
          "SELECT COUNT(1) FROM Invoices",
          "SELECT COUNT(DISTINCT invoice_id) FROM Invoices",
          "SELECT COUNT(invoice_id) AS InvoiceCount FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_status IS NOT NULL",
          "SELECT COUNT(DISTINCT invoice_id) AS UniqueInvoices FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_details <> ''"
        ]
      ]
    },
    {
      "id": 2084,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Invoices",
          "SELECT COUNT(invoice_id) FROM Invoices",
          "SELECT COUNT(*) AS total_invoices FROM Invoices",
          "SELECT COUNT(1) FROM Invoices",
          "SELECT COUNT(DISTINCT invoice_id) FROM Invoices",
          "SELECT COUNT(invoice_id) AS InvoiceCount FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_status IS NOT NULL",
          "SELECT COUNT(*) FROM Invoices GROUP BY invoice_status",
          "SELECT COUNT(*) FROM (SELECT invoice_id FROM Invoices) AS temp"
        ]
      ]
    },
    {
      "id": 2085,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices",
          "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i",
          "SELECT Invoices.invoice_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices",
          "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM `Invoices`",
          "SELECT invoice_id AS id, invoice_status AS status, invoice_details AS details FROM Invoices",
          "SELECT inv.invoice_id, inv.invoice_status, inv.invoice_details FROM Invoices inv",
          "SELECT invoice_id, invoice_status AS status_code, invoice_details FROM Invoices",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_status IS NOT NULL",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices ORDER BY invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_details <> ''"
        ]
      ]
    },
    {
      "id": 2086,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices",
          "SELECT Invoices.invoice_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices",
          "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM `Invoices`",
          "SELECT invoice_id AS ID, invoice_status AS Status, invoice_details AS Details FROM Invoices",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices ORDER BY invoice_id",
          "SELECT * FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_status IS NOT NULL",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices LIMIT 100",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices GROUP BY invoice_id"
        ]
      ]
    },
    {
      "id": 2087,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id",
          "SELECT Clients.client_id, COUNT(Invoices.invoice_id) AS NumberOfInvoices FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id",
          "SELECT I.client_id, COUNT(I.invoice_id) FROM Invoices I GROUP BY I.client_id",
          "SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id",
          "SELECT Clients.client_id, COUNT(*) FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT client_id, COUNT(invoice_id) AS total_invoices FROM Invoices GROUP BY client_id",
          "SELECT I.client_id, COUNT(*) FROM Invoices AS I GROUP BY I.client_id",
          "SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id HAVING COUNT(*) > 0",
          "SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id ORDER BY client_id"
        ]
      ]
    },
    {
      "id": 2088,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id",
          "SELECT Clients.client_id, COUNT(Invoices.invoice_id) FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT I.client_id, COUNT(I.invoice_id) AS NumberOfInvoices FROM Invoices I GROUP BY I.client_id",
          "SELECT client_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id",
          "SELECT Invoices.client_id, COUNT(*) FROM Invoices GROUP BY Invoices.client_id",
          "SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id ORDER BY client_id",
          "SELECT client_id AS ClientID, COUNT(*) AS InvoiceCount FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(*) AS TotalInvoices FROM Invoices GROUP BY client_id"
        ]
      ]
    },
    {
      "id": 2089,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.client_id, C.client_details FROM Clients C INNER JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
          "SELECT Clients.client_id, Clients.client_details FROM Clients, Invoices WHERE Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY COUNT(Invoices.invoice_id) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1)",
          "SELECT Clients.client_id, client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id, Clients.client_details ORDER BY COUNT(Invoices.invoice_id) DESC LIMIT 1",
          "SELECT TOP 1 Clients.client_id, Clients.client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id, Clients.client_details ORDER BY COUNT(*) DESC",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.client_id, C.client_details FROM Clients C LEFT JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients ORDER BY (SELECT COUNT(*) FROM Invoices WHERE Invoices.client_id = Clients.client_id) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(COUNT(invoice_id)) FROM Invoices GROUP BY client_id)) LIMIT 1"
        ]
      ]
    },
    {
      "id": 2090,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1)",
          "SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY COUNT(Invoices.invoice_id) DESC LIMIT 1",
          "SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY COUNT(i.invoice_id) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY client_id) sub)) LIMIT 1",
          "SELECT Clients.client_id, Clients.client_details FROM Clients, Invoices WHERE Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(Invoices.invoice_id) = (SELECT MAX(COUNT(Invoices.invoice_id)) FROM Invoices GROUP BY client_id)",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT TOP 1 client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC)",
          "SELECT TOP 1 Clients.client_id, Clients.client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY COUNT(Invoices.invoice_id) DESC",
          "SELECT client_id, client_details FROM Clients ORDER BY (SELECT COUNT(*) FROM Invoices WHERE Invoices.client_id = Clients.client_id) DESC LIMIT 1",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 2091,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2",
          "SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(I.invoice_id) >= 2",
          "SELECT DISTINCT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT client_id FROM (SELECT client_id, COUNT(*) as num_invoices FROM Invoices GROUP BY client_id) AS subquery WHERE num_invoices >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT I.client_id FROM Invoices AS I GROUP BY I.client_id HAVING COUNT(*) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) > 1",
          "SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(I.invoice_id) > 1",
          "SELECT DISTINCT I.client_id FROM Invoices I WHERE (SELECT COUNT(*) FROM Invoices WHERE client_id = I.client_id) >= 2"
        ]
      ]
    },
    {
      "id": 2092,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2",
          "SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) > 1",
          "SELECT DISTINCT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT client_id FROM (SELECT client_id, COUNT(*) as num_invoices FROM Invoices GROUP BY client_id) as invoice_counts WHERE num_invoices >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) > 1",
          "SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(*) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2",
          "SELECT client_id, COUNT(*) as InvoiceCount FROM Invoices GROUP BY client_id HAVING InvoiceCount >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) > 1",
          "SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(DISTINCT i.invoice_id) > 1"
        ]
      ]
    },
    {
      "id": 2093,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status AS Status, COUNT(*) AS NumberOfInvoices FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) AS InvoiceCount FROM Invoices GROUP BY invoice_status",
          "SELECT I.invoice_status, COUNT(I.invoice_id) AS Total FROM Invoices I GROUP BY I.invoice_status",
          "SELECT `invoice_status`, COUNT(`invoice_id`) FROM `Invoices` GROUP BY `invoice_status`",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status ORDER BY invoice_status",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status HAVING COUNT(*) > 0",
          "SELECT DISTINCT invoice_status, COUNT(*) OVER (PARTITION BY invoice_status) FROM Invoices",
          "SELECT invoice_status, COUNT(1) FROM Invoices GROUP BY invoice_status"
        ]
      ]
    },
    {
      "id": 2094,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(1) FROM Invoices GROUP BY invoice_status",
          "SELECT COUNT(*), invoice_status FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) AS NumberOfInvoices FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) AS InvoiceCount FROM Invoices GROUP BY invoice_status",
          "SELECT I.invoice_status, COUNT(I.invoice_id) FROM Invoices I GROUP BY I.invoice_status",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status ORDER BY invoice_status",
          "SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2095,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT I.invoice_status FROM Invoices I GROUP BY I.invoice_status ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
          "SELECT invoice_status, COUNT(*) AS total FROM Invoices GROUP BY invoice_status ORDER BY total DESC LIMIT 1",
          "SELECT invoice_status FROM (SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS SubQuery ORDER BY count DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS SubCounts)",
          "SELECT invoice_status, COUNT(invoice_id) AS count FROM Invoices GROUP BY invoice_status ORDER BY count DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_id) = (SELECT MAX(COUNT(invoice_id)) FROM Invoices GROUP BY invoice_status)"
        ]
      ]
    },
    {
      "id": 2096,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status) AS subquery)",
          "SELECT I.invoice_status FROM Invoices I GROUP BY I.invoice_status ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
          "SELECT invoice_status FROM (SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS InvoiceCounts ORDER BY count DESC LIMIT 1",
          "SELECT invoice_status, COUNT(*) AS total FROM Invoices GROUP BY invoice_status ORDER BY total DESC FETCH FIRST 1 ROW ONLY",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1",
          "SELECT FIRST(invoice_status) FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 2097,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT inv.invoice_status, inv.invoice_details, cli.client_id, cli.client_details, ag.agency_id, ag.agency_details FROM Invoices inv INNER JOIN Clients cli ON inv.client_id = cli.client_id INNER JOIN Agencies ag ON cli.agency_id = ag.agency_id",
          "SELECT Invoices.invoice_status AS Status, Invoices.invoice_details AS Details, Clients.client_id AS ClientID, Clients.client_details AS ClientDetails, Agencies.agency_id AS AgencyID, Agencies.agency_details AS AgencyDetails FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT status.invoice_status, status.invoice_details, client.client_id, client.client_details, agency.agency_id, agency.agency_details FROM Invoices AS status JOIN Clients AS client ON status.client_id = client.client_id JOIN Agencies AS agency ON client.agency_id = agency.agency_id",
          "SELECT I.invoice_status AS 'Invoice Status', I.invoice_details AS 'Invoice Details', C.client_id AS 'Client ID', C.client_details AS 'Client Details', A.agency_id AS 'Agency ID', A.agency_details AS 'Agency Details' FROM Invoices I, Clients C, Agencies A WHERE I.client_id = C.client_id AND C.agency_id = A.agency_id",
          "SELECT `invoice_status`, `invoice_details`, `client_id`, `client_details`, `agency_id`, `agency_details` FROM `Invoices`, `Clients`, `Agencies` WHERE `Invoices`.`client_id` = `Clients`.`client_id` AND `Clients`.`agency_id` = `Agencies`.`agency_id`",
          "SELECT inv_status.invoice_status, inv_status.invoice_details, client_info.client_id, client_info.client_details, agency_info.agency_id, agency_info.agency_details FROM Invoices AS inv_status INNER JOIN Clients AS client_info ON inv_status.client_id = client_info.client_id INNER JOIN Agencies AS agency_info ON client_info.agency_id = agency_info.agency_id",
          "SELECT invoice_status, invoice_details, Clients.client_id, client_details, agency_id, agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices, Clients, Agencies WHERE Invoices.client_id = Clients.client_id AND Clients.agency_id = Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2098,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT inv.invoice_status, inv.invoice_details, cli.client_id, cli.client_details, ag.agency_id, ag.agency_details FROM Invoices inv, Clients cli, Agencies ag WHERE inv.client_id = cli.client_id AND cli.agency_id = ag.agency_id",
          "SELECT i.invoice_status AS Status, i.invoice_details AS Details, c.client_id AS ClientID, c.client_details AS ClientDetails, a.agency_id AS AgencyID, a.agency_details AS AgencyDetails FROM Invoices i, Clients c, Agencies a WHERE i.client_id = c.client_id AND c.agency_id = a.agency_id",
          "SELECT invoice_status, invoice_details, Clients.client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices AS i JOIN Clients AS c ON i.client_id = c.client_id JOIN Agencies AS a ON c.agency_id = a.agency_id",
          "SELECT invoice_status, invoice_details, client_id, Clients.client_details, Clients.agency_id, Agencies.agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i INNER JOIN Clients c ON i.client_id = c.client_id INNER JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices, Clients, Agencies WHERE Invoices.client_id = Clients.client_id AND Clients.agency_id = Agencies.agency_id",
          "SELECT i.invoice_status AS 'Invoice Status', i.invoice_details AS 'Invoice Details', c.client_id AS 'Client ID', c.client_details AS 'Client Details', a.agency_id AS 'Agency ID', a.agency_details AS 'Agency Details' FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id"
        ]
      ]
    },
    {
      "id": 2099,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, other_details FROM Meetings",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings",
          "SELECT meeting_type AS TypeCode, other_details AS Details FROM Meetings",
          "SELECT `meeting_type`, `other_details` FROM `Meetings`",
          "SELECT M.meeting_type, M.other_details FROM Meetings M",
          "SELECT meeting_type, other_details FROM Meetings GROUP BY meeting_type, other_details",
          "SELECT DISTINCT M.meeting_type, M.other_details FROM Meetings M",
          "SELECT meeting_type, other_details FROM Meetings ORDER BY meeting_type",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings ORDER BY meeting_type",
          "SELECT meeting_type, other_details FROM Meetings WHERE meeting_type IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2100,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, other_details FROM Meetings",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings",
          "SELECT M.meeting_type, M.other_details FROM Meetings M",
          "SELECT meeting_type AS Type, other_details AS Details FROM Meetings",
          "SELECT `meeting_type`, `other_details` FROM `Meetings`",
          "SELECT meeting_type, other_details FROM Meetings ORDER BY meeting_type",
          "SELECT meeting_type, other_details FROM Meetings GROUP BY meeting_type, other_details",
          "SELECT * FROM (SELECT meeting_type, other_details FROM Meetings) AS SubQuery",
          "SELECT meeting_type, other_details FROM Meetings WHERE meeting_type IS NOT NULL",
          "SELECT meeting_type, other_details FROM Meetings LIMIT 100"
        ]
      ]
    },
    {
      "id": 2101,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT Meetings.meeting_outcome, Meetings.purpose_of_meeting FROM Meetings",
          "SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m",
          "SELECT `meeting_outcome`, `purpose_of_meeting` FROM `Meetings`",
          "SELECT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM Meetings",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings ORDER BY meeting_outcome",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings GROUP BY meeting_outcome, purpose_of_meeting",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings LIMIT 100"
        ]
      ]
    },
    {
      "id": 2102,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m",
          "SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m",
          "SELECT Meetings.meeting_outcome, Meetings.purpose_of_meeting FROM Meetings",
          "SELECT DISTINCT Meetings.meeting_outcome, Meetings.purpose_of_meeting FROM Meetings",
          "SELECT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM Meetings",
          "SELECT DISTINCT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM Meetings",
          "SELECT `meeting_outcome`, `purpose_of_meeting` FROM `Meetings`",
          "SELECT DISTINCT `meeting_outcome`, `purpose_of_meeting` FROM `Meetings`"
        ]
      ]
    },
    {
      "id": 2103,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
          "SELECT p.payment_id, p.payment_details FROM Payments p WHERE EXISTS (SELECT 1 FROM Invoices i WHERE i.invoice_id = p.invoice_id AND i.invoice_status = 'Working')",
          "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
          "SELECT p.payment_id, p.payment_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2104,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
          "SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN (SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working')",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments LEFT JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2105,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I LEFT JOIN Payments P ON I.invoice_id = P.invoice_id WHERE P.invoice_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices EXCEPT SELECT invoice_id, invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE NOT EXISTS (SELECT 1 FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id)",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I WHERE I.invoice_id NOT IN (SELECT P.invoice_id FROM Payments P)",
          "SELECT invoice_id, invoice_status FROM Invoices AS I WHERE NOT EXISTS (SELECT * FROM Payments AS P WHERE P.invoice_id = I.invoice_id)",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I LEFT JOIN Payments P ON I.invoice_id = P.invoice_id WHERE P.payment_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT DISTINCT invoice_id FROM Payments)",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I WHERE I.invoice_id NOT IN (SELECT invoice_id FROM Payments WHERE Payments.invoice_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2106,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE NOT EXISTS (SELECT 1 FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id)",
          "SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p)",
          "SELECT invoice_id, invoice_status FROM Invoices EXCEPT SELECT invoice_id, invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT invoice_id, invoice_status FROM Invoices i WHERE NOT EXISTS (SELECT NULL FROM Payments p WHERE p.invoice_id = i.invoice_id)",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT DISTINCT invoice_id FROM Payments)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT DISTINCT p.invoice_id FROM Payments p)"
        ]
      ]
    },
    {
      "id": 2107,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments",
          "SELECT COUNT(*) AS TotalPayments FROM Payments",
          "SELECT COUNT(1) FROM Payments",
          "SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments",
          "SELECT COUNT(DISTINCT payment_id) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT COUNT(*) FROM Payments WHERE payment_id > 0",
          "SELECT COUNT(*) FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT COUNT(*) FROM Payments GROUP BY payment_id HAVING payment_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2108,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments",
          "SELECT COUNT(*) AS total_payments FROM Payments",
          "SELECT COUNT(1) FROM Payments",
          "SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments",
          "SELECT COUNT(*) FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT COUNT(DISTINCT payment_id) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments WHERE payment_id > 0",
          "SELECT COUNT(*) FROM Payments WHERE payment_id > 0",
          "SELECT COUNT(*) FROM Payments WHERE payment_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2109,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT payment_id, invoice_id, payment_details FROM Payments",
          "SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments",
          "SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p",
          "SELECT payment_id AS PaymentID, invoice_id AS InvoiceID, payment_details AS PaymentDetails FROM Payments",
          "SELECT `payment_id`, `invoice_id`, `payment_details` FROM `Payments`",
          "SELECT payment_id, invoice_id, payment_details FROM Payments ORDER BY payment_id",
          "SELECT payment_id, invoice_id, payment_details FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT payment_id, invoice_id, payment_details FROM Payments GROUP BY payment_id, invoice_id",
          "SELECT DISTINCT payment_id, invoice_id, payment_details FROM Payments",
          "SELECT payment_id, invoice_id, payment_details FROM Payments LIMIT 100"
        ]
      ]
    },
    {
      "id": 2110,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT payment_id, invoice_id, payment_details FROM Payments",
          "SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments",
          "SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p",
          "SELECT payment_id AS PaymentID, invoice_id AS InvoiceID, payment_details AS PaymentDetails FROM Payments",
          "SELECT `payment_id`, `invoice_id`, `payment_details` FROM `Payments`",
          "SELECT payment_id, invoice_id, payment_details FROM Payments ORDER BY payment_id",
          "SELECT payment_id, invoice_id, payment_details FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT * FROM Payments WHERE payment_id IS NOT NULL AND invoice_id IS NOT NULL AND payment_details IS NOT NULL",
          "SELECT payment_id, invoice_id, payment_details FROM Payments GROUP BY payment_id, invoice_id, payment_details",
          "SELECT payment_id, invoice_id, payment_details FROM Payments LIMIT 100"
        ]
      ]
    },
    {
      "id": 2111,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I",
          "SELECT DISTINCT I.invoice_id, I.invoice_status FROM Invoices AS I",
          "SELECT invoice_id AS InvoiceID, invoice_status AS Status FROM Invoices",
          "SELECT DISTINCT invoice_id AS InvoiceID, invoice_status AS Status FROM Invoices",
          "SELECT `invoice_id`, `invoice_status` FROM `Invoices`",
          "SELECT DISTINCT `invoice_id`, `invoice_status` FROM `Invoices`",
          "SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices"
        ]
      ]
    },
    {
      "id": 2112,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i, Payments p WHERE i.invoice_id = p.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments)",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices WHERE EXISTS (SELECT 1 FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id)",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id IN (SELECT invoice_id FROM Payments)",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i INNER JOIN Payments p ON i.invoice_id = p.invoice_id",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices, Payments WHERE Invoices.invoice_id = Payments.invoice_id"
        ]
      ]
    },
    {
      "id": 2113,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, COUNT(*) FROM Payments GROUP BY invoice_id",
          "SELECT invoice_id, COUNT(payment_id) AS number_of_payments FROM Payments GROUP BY invoice_id",
          "SELECT p.invoice_id, COUNT(p.payment_id) FROM Payments p GROUP BY p.invoice_id",
          "SELECT Payments.invoice_id, COUNT(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id",
          "SELECT invoice_id, COUNT(*) AS payment_count FROM Payments GROUP BY invoice_id",
          "SELECT Payments.invoice_id, COUNT(*) FROM Payments GROUP BY Payments.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id",
          "SELECT p.invoice_id, COUNT(*) FROM Payments AS p GROUP BY p.invoice_id",
          "SELECT Payments.invoice_id, COUNT(Payments.payment_id) AS NumberOfPayments FROM Payments GROUP BY Payments.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) AS TotalPayments FROM Payments GROUP BY invoice_id"
        ]
      ]
    },
    {
      "id": 2114,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, COUNT(*) FROM Payments GROUP BY invoice_id",
          "SELECT invoice_id, COUNT(payment_id) AS NumberOfPayments FROM Payments GROUP BY invoice_id",
          "SELECT Payments.invoice_id, COUNT(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id",
          "SELECT p.invoice_id, COUNT(*) AS total_payments FROM Payments p GROUP BY p.invoice_id",
          "SELECT p.invoice_id, COUNT(p.payment_id) FROM Payments p GROUP BY p.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id ORDER BY invoice_id",
          "SELECT invoice_id, COUNT(*) AS payment_count FROM Payments GROUP BY invoice_id",
          "SELECT Payments.invoice_id, COUNT(*) FROM Payments GROUP BY Payments.invoice_id",
          "SELECT p.invoice_id, COUNT(*) FROM Payments AS p GROUP BY p.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) > 0"
        ]
      ]
    },
    {
      "id": 2115,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC LIMIT 1",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices AS I INNER JOIN Payments AS P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC LIMIT 1",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery)) LIMIT 1",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I, Payments P WHERE I.invoice_id = P.invoice_id GROUP BY I.invoice_id HAVING COUNT(P.payment_id) = (SELECT MAX(COUNT(P.payment_id)) FROM Payments P GROUP BY P.invoice_id)",
          "SELECT TOP 1 I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I LEFT JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT TOP 1 invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2116,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id ORDER BY COUNT(P.payment_id) DESC LIMIT 1",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT TOP 1 invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I INNER JOIN (SELECT invoice_id, COUNT(*) AS cnt FROM Payments GROUP BY invoice_id ORDER BY cnt DESC LIMIT 1) P ON I.invoice_id = P.invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE EXISTS (SELECT 1 FROM Payments P WHERE P.invoice_id = I.invoice_id GROUP BY P.invoice_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Payments GROUP BY invoice_id))",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I, Payments P WHERE I.invoice_id = P.invoice_id GROUP BY I.invoice_id, I.invoice_status, I.invoice_details HAVING COUNT(P.payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) sub))",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id = (SELECT P.invoice_id FROM Payments P GROUP BY P.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2117,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(*) AS total_staff FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(1) FROM Staff",
          "SELECT COUNT(staff_id) AS NumberOfStaff FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(DISTINCT staff_id) AS TotalStaff FROM Staff",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff) AS StaffCount",
          "SELECT COUNT(*) FROM Staff WHERE 1=1"
        ]
      ]
    },
    {
      "id": 2118,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(*) AS NumberOfStaff FROM Staff",
          "SELECT COUNT(1) FROM Staff",
          "SELECT COUNT(staff_id) AS StaffCount FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff) AS Temp",
          "SELECT COUNT(*) FROM Staff WHERE 1=1",
          "SELECT COUNT(*) FROM Staff GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2119,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS NumberOfStaff FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(s.staff_id) AS staff_count FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(*) AS total_staff FROM Staff GROUP BY agency_id",
          "SELECT agency_id, COUNT(staff_id) AS staff_total FROM Staff GROUP BY agency_id",
          "SELECT S.agency_id, COUNT(*) FROM Staff S GROUP BY S.agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id ORDER BY agency_id",
          "SELECT agency_id, COUNT(staff_id) AS num_staff FROM Staff GROUP BY agency_id HAVING COUNT(staff_id) > 0",
          "SELECT agency_id, COUNT(DISTINCT staff_id) FROM Staff GROUP BY agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Staff WHERE agency_id IS NOT NULL GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2120,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS NumberOfStaff FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(*) AS staff_count FROM Staff GROUP BY agency_id",
          "SELECT S.agency_id, COUNT(S.staff_id) FROM Staff S GROUP BY S.agency_id",
          "SELECT agency_id, COUNT(staff_id) AS total_staff FROM Staff GROUP BY agency_id",
          "SELECT a.agency_id, COUNT(s.staff_id) FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id ORDER BY agency_id",
          "SELECT agency_id, COUNT(*) FROM Staff GROUP BY agency_id HAVING COUNT(staff_id) > 0",
          "SELECT agency_id, COUNT(staff_id) FROM Staff WHERE agency_id IS NOT NULL GROUP BY agency_id",
          "SELECT agency_id, COUNT(staff_id) AS 'Number of Staff' FROM Staff GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2121,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id HAVING COUNT(S.staff_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(staff_id) AS COUNT FROM Staff GROUP BY agency_id) AS Counts)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Staff.staff_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(staff_id) AS Cnt FROM Staff GROUP BY agency_id) AS SubQuery)",
          "SELECT TOP 1 agency_id, agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id ORDER BY COUNT(staff_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(staff_id) = MAX(COUNT(staff_id)))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies ORDER BY (SELECT COUNT(*) FROM Staff WHERE Staff.agency_id = Agencies.agency_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2122,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Staff.staff_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Staff.staff_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(staff_id) AS Cnt FROM Staff GROUP BY agency_id) AS SubQuery)",
          "SELECT TOP 1 Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Staff.staff_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT TOP 1 agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN (SELECT agency_id, COUNT(staff_id) AS staff_count FROM Staff GROUP BY agency_id) AS S ON A.agency_id = S.agency_id ORDER BY S.staff_count DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2123,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(1) FROM Meetings GROUP BY meeting_outcome",
          "SELECT M.meeting_outcome, COUNT(*) AS total FROM Meetings M GROUP BY M.meeting_outcome",
          "SELECT meeting_outcome AS OutcomeCode, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY OutcomeCode",
          "SELECT meeting_outcome, COUNT(meeting_id) AS MeetingCount FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_outcome",
          "SELECT DISTINCT meeting_outcome, COUNT(*) OVER (PARTITION BY meeting_outcome) FROM Meetings",
          "SELECT meeting_outcome, COUNT(*) AS CountOfMeetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2124,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) AS TotalMeetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT M.meeting_outcome, COUNT(*) FROM Meetings M GROUP BY M.meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) AS MeetingCount FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) AS CountOfMeetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT M.meeting_outcome, COUNT(M.meeting_id) FROM Meetings M GROUP BY M.meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome HAVING COUNT(*) > 0",
          "SELECT meeting_outcome, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY meeting_outcome"
        ]
      ]
    },
    {
      "id": 2125,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) AS number_of_meetings FROM Meetings GROUP BY client_id",
          "SELECT Meetings.client_id, COUNT(Meetings.meeting_id) FROM Meetings GROUP BY Meetings.client_id",
          "SELECT m.client_id, COUNT(m.meeting_id) FROM Meetings m GROUP BY m.client_id",
          "SELECT client_id, COUNT(*) AS total_meetings FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id ORDER BY client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id ORDER BY COUNT(meeting_id) DESC",
          "SELECT client_id, COUNT(*) AS meeting_count FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2126,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) AS total_meetings FROM Meetings GROUP BY client_id",
          "SELECT M.client_id, COUNT(M.meeting_id) FROM Meetings M GROUP BY M.client_id",
          "SELECT client_id, COUNT(*) AS meeting_count FROM Meetings GROUP BY client_id",
          "SELECT Meetings.client_id, COUNT(Meetings.meeting_id) FROM Meetings GROUP BY Meetings.client_id",
          "SELECT client_id, COUNT(1) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id ORDER BY client_id",
          "SELECT client_id, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) > 0",
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2127,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, client_id, COUNT(*) FROM Meetings GROUP BY meeting_type, client_id",
          "SELECT M.meeting_type, M.client_id, COUNT(M.meeting_id) AS meeting_count FROM Meetings M GROUP BY M.meeting_type, M.client_id",
          "SELECT meeting_type, client_id, COUNT(meeting_id) AS TotalMeetings FROM Meetings GROUP BY meeting_type, client_id",
          "SELECT client_id, meeting_type, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT M.client_id, M.meeting_type, COUNT(*) FROM Meetings M GROUP BY M.client_id, M.meeting_type",
          "SELECT meeting_type, client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT client_id, meeting_type, COUNT(meeting_id) FROM Meetings GROUP BY meeting_type, client_id",
          "SELECT M.client_id, M.meeting_type, COUNT(M.meeting_id) FROM Meetings M GROUP BY M.client_id, M.meeting_type",
          "SELECT meeting_type, client_id, COUNT(*) AS count FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT client_id, meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type, client_id"
        ]
      ]
    },
    {
      "id": 2128,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT M.meeting_type, COUNT(*) FROM Meetings M GROUP BY M.meeting_type",
          "SELECT meeting_type, COUNT(1) FROM Meetings GROUP BY meeting_type",
          "SELECT COUNT(*), meeting_type FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) AS count_of_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type ORDER BY meeting_type",
          "SELECT 'Meeting Type: ' || meeting_type AS Type, COUNT(*) AS 'Total Meetings' FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 2129,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings, Clients WHERE Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m INNER JOIN Clients c ON m.client_id = c.client_id",
          "SELECT meeting_id AS 'Meeting ID', meeting_outcome AS 'Outcome', meeting_type AS 'Type', client_details AS 'Client Details' FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT a.meeting_id, a.meeting_outcome, a.meeting_type, b.client_details FROM Meetings a JOIN Clients b ON a.client_id = b.client_id",
          "SELECT `meeting_id`, `meeting_outcome`, `meeting_type`, `client_details` FROM `Meetings` JOIN `Clients` ON `Meetings`.`client_id` = `Clients`.`client_id`",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT DISTINCT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id"
        ]
      ]
    },
    {
      "id": 2130,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m, Clients c WHERE m.client_id = c.client_id",
          "SELECT a.meeting_id, a.meeting_outcome, a.meeting_type, b.client_details FROM Meetings a INNER JOIN Clients b ON a.client_id = b.client_id",
          "SELECT Meetings.meeting_id AS 'Meeting ID', Meetings.meeting_outcome AS 'Outcome', Meetings.meeting_type AS 'Type', Clients.client_details AS 'Client Details' FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT `meeting_id`, `meeting_outcome`, `meeting_type`, `client_details` FROM `Meetings` JOIN `Clients` ON `Meetings`.`client_id` = `Clients`.`client_id`",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id"
        ]
      ]
    },
    {
      "id": 2131,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(*) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT SIM.meeting_id, COUNT(SIM.staff_id) AS NumberOfStaff FROM Staff_in_Meetings SIM GROUP BY SIM.meeting_id",
          "SELECT meeting_id, COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT M.meeting_id, COUNT(SIM.staff_id) FROM Meetings M JOIN Staff_in_Meetings SIM ON M.meeting_id = SIM.meeting_id GROUP BY M.meeting_id",
          "SELECT meeting_id, COUNT(staff_id) AS total_staff FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT M.meeting_id, COUNT(SIM.staff_id) FROM Staff_in_Meetings SIM RIGHT JOIN Meetings M ON SIM.meeting_id = M.meeting_id GROUP BY M.meeting_id",
          "SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY meeting_id",
          "SELECT M.meeting_id, IFNULL(COUNT(SIM.staff_id), 0) AS staff_count FROM Meetings M LEFT JOIN Staff_in_Meetings SIM ON M.meeting_id = SIM.meeting_id GROUP BY M.meeting_id",
          "SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id HAVING COUNT(staff_id) > 0"
        ]
      ]
    },
    {
      "id": 2132,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(*) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) AS num_staff FROM Staff_in_Meetings s JOIN Meetings m ON s.meeting_id = m.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(*) FROM Meetings m JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m INNER JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m, Staff_in_Meetings s WHERE m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m RIGHT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m FULL OUTER JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id"
        ]
      ]
    },
    {
      "id": 2133,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id ORDER BY num_meetings ASC LIMIT 1",
          "SELECT s.staff_id, COUNT(m.meeting_id) AS meetings_count FROM Staff_in_Meetings s JOIN Meetings m ON s.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY meetings_count ASC LIMIT 1",
          "SELECT staff_id, COUNT(meeting_id) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) ASC LIMIT 1",
          "SELECT s.staff_id, MIN(c.meeting_count) FROM Staff s JOIN (SELECT staff_id, COUNT(meeting_id) AS meeting_count FROM Staff_in_Meetings GROUP BY staff_id) c ON s.staff_id = c.staff_id GROUP BY s.staff_id ORDER BY 2 ASC LIMIT 1",
          "SELECT s.staff_id, COUNT(*) AS total_meetings FROM Staff_in_Meetings s INNER JOIN Meetings m ON s.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY total_meetings ASC LIMIT 1",
          "SELECT TOP 1 staff_id, COUNT(*) AS meeting_count FROM Staff_in_Meetings GROUP BY staff_id ORDER BY meeting_count ASC",
          "SELECT staff_id, COUNT(*) AS attended_meetings FROM Staff_in_Meetings GROUP BY staff_id ORDER BY attended_meetings ASC FETCH FIRST 1 ROW ONLY",
          "SELECT s.staff_id, COUNT(m.meeting_id) AS meeting_attendance FROM Staff_in_Meetings s LEFT JOIN Meetings m ON s.meeting_id = m.meeting_id WHERE m.meeting_id IS NOT NULL GROUP BY s.staff_id ORDER BY meeting_attendance ASC LIMIT 1",
          "SELECT staff_id, COUNT(meeting_id) AS meeting_participation FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY meeting_participation ASC LIMIT 1",
          "SELECT s.staff_id, COUNT(m.meeting_id) FROM Staff_in_Meetings s, Meetings m WHERE s.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY COUNT(m.meeting_id) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2134,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(c) FROM (SELECT COUNT(meeting_id) AS c FROM Staff_in_Meetings GROUP BY staff_id) AS subquery)",
          "SELECT S.staff_id FROM Staff_in_Meetings AS S GROUP BY S.staff_id ORDER BY COUNT(S.meeting_id) ASC LIMIT 1",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT MIN(staff_id) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings GROUP BY staff_id)",
          "SELECT staff_id FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS T WHERE num_meetings = (SELECT MIN(num_meetings) FROM (SELECT COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery)",
          "SELECT TOP 1 staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(meeting_id)",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT COUNT(meeting_id) FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC LIMIT 1)",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT staff_id, COUNT(meeting_id) AS meeting_count FROM Staff_in_Meetings GROUP BY staff_id ORDER BY meeting_count ASC LIMIT 1",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2135,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(UNIQUE staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Meetings s",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id)",
          "SELECT DISTINCT COUNT(staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT Staff_in_Meetings.staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings s)",
          "SELECT COUNT(DISTINCT s_id) FROM (SELECT staff_id AS s_id FROM Staff_in_Meetings)",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings WHERE staff_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2136,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(UNIQUE staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Meetings s",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id)",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings WHERE staff_id IS NOT NULL",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Meetings s WHERE s.staff_id > 0",
          "SELECT DISTINCT COUNT(staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(staff_id) > 0",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings WHERE staff_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2137,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE Staff.staff_id = Staff_in_Meetings.staff_id)",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff AS s LEFT JOIN Staff_in_Meetings AS sim ON s.staff_id = sim.staff_id WHERE sim.staff_id IS NULL",
          "SELECT COUNT(*) FROM Staff s WHERE s.staff_id NOT IN (SELECT sim.staff_id FROM Staff_in_Meetings sim)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Staff LEFT JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.staff_id IS NULL"
        ]
      ]
    },
    {
      "id": 2138,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT count(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE Staff.staff_id = Staff_in_Meetings.staff_id)",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT count(*) FROM Staff LEFT JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.staff_id IS NULL",
          "SELECT COUNT(*) FROM Staff s LEFT OUTER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE sim.staff_id IS NULL",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2139,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.client_details FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id UNION SELECT Clients.client_id, Clients.client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id UNION SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id",
          "SELECT C.client_id, C.client_details FROM Clients C WHERE EXISTS (SELECT 1 FROM Meetings M WHERE M.client_id = C.client_id) OR EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices)",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION ALL SELECT client_id FROM Invoices)",
          "SELECT client_id, client_details FROM Clients WHERE EXISTS (SELECT * FROM Meetings WHERE Meetings.client_id = Clients.client_id) UNION SELECT client_id, client_details FROM Clients WHERE EXISTS (SELECT * FROM Invoices WHERE Invoices.client_id = Clients.client_id)",
          "SELECT DISTINCT C.client_id, C.client_details FROM Clients C LEFT JOIN Meetings M ON C.client_id = M.client_id LEFT JOIN Invoices I ON C.client_id = I.client_id WHERE M.client_id IS NOT NULL OR I.client_id IS NOT NULL",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) UNION SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices)",
          "SELECT C.client_id, C.client_details FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id OR C.client_id = I.client_id GROUP BY C.client_id"
        ]
      ]
    },
    {
      "id": 2140,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.client_details FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id UNION SELECT Clients.client_id, Clients.client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE EXISTS (SELECT 1 FROM Meetings WHERE Meetings.client_id = Clients.client_id) OR EXISTS (SELECT 1 FROM Invoices WHERE Invoices.client_id = Clients.client_id)",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices)",
          "SELECT DISTINCT C.client_id, C.client_details FROM Clients C LEFT JOIN Meetings M ON C.client_id = M.client_id LEFT JOIN Invoices I ON C.client_id = I.client_id WHERE M.client_id IS NOT NULL OR I.client_id IS NOT NULL",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients, Meetings WHERE Clients.client_id = Meetings.client_id UNION SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients, Invoices WHERE Clients.client_id = Invoices.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION ALL SELECT client_id FROM Invoices)",
          "SELECT DISTINCT client_id, client_details FROM Clients INNER JOIN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices) AS Combined ON Clients.client_id = Combined.client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT DISTINCT client_id FROM Meetings) UNION SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT DISTINCT client_id FROM Invoices)",
          "SELECT client_id, client_details FROM Clients WHERE EXISTS (SELECT * FROM Meetings WHERE Meetings.client_id = Clients.client_id UNION SELECT * FROM Invoices WHERE Invoices.client_id = Clients.client_id)"
        ]
      ]
    },
    {
      "id": 2141,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM Staff_in_Meetings sim) AND s.staff_details LIKE '%s%'",
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings sim)",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND EXISTS (SELECT NULL FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)"
        ]
      ]
    },
    {
      "id": 2142,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM Staff_in_Meetings sim) AND s.staff_details LIKE '%s%'",
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff.staff_details LIKE '%s%' GROUP BY Staff.staff_id",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id AND s.staff_details LIKE '%s%' GROUP BY s.staff_id",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND s.staff_details LIKE '%s%'",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT * FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) >= 1"
        ]
      ]
    },
    {
      "id": 2143,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN Meetings M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.sic_code, Clients.agency_id FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(DISTINCT Meetings.meeting_id) = 1",
          "SELECT DISTINCT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id AND C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(M.meeting_id) = 1",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M WHERE C.client_id = M.client_id GROUP BY C.client_id HAVING COUNT(M.meeting_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C LEFT JOIN Meetings M ON C.client_id = M.client_id LEFT JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1 AND COUNT(DISTINCT I.invoice_id) >= 1",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE EXISTS (SELECT 1 FROM Meetings M WHERE M.client_id = C.client_id GROUP BY M.client_id HAVING COUNT(M.meeting_id) = 1) AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C INNER JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AS M ON C.client_id = M.client_id WHERE EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND C.client_id IN (SELECT client_id FROM Invoices)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id"
        ]
      ]
    },
    {
      "id": 2144,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN Meetings M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.sic_code, Clients.agency_id FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(DISTINCT Meetings.meeting_id) = 1",
          "SELECT DISTINCT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id AND C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(M.meeting_id) = 1",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE EXISTS (SELECT 1 FROM Meetings M WHERE M.client_id = C.client_id GROUP BY M.client_id HAVING COUNT(*) = 1) AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C INNER JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AS M ON C.client_id = M.client_id INNER JOIN Invoices I ON C.client_id = I.client_id",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1 INTERSECT SELECT client_id FROM Invoices)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id AND C.client_id = I.client_id GROUP BY C.client_id, C.sic_code, C.agency_id HAVING COUNT(DISTINCT M.meeting_id) = 1"
        ]
      ]
    },
    {
      "id": 2145,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time AS 'Meeting Start', M.end_date_time AS 'Meeting End', C.client_details AS 'Client Details', S.staff_details AS 'Staff Details' FROM Meetings M, Clients C, Staff S, Staff_in_Meetings SM WHERE M.client_id = C.client_id AND SM.meeting_id = M.meeting_id AND SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings, Clients, Staff, Staff_in_Meetings WHERE Meetings.client_id = Clients.client_id AND Meetings.meeting_id = Staff_in_Meetings.meeting_id AND Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT start_date_time AS Start, end_date_time AS End, client_details AS Client, staff_details AS Staff FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff_in_Meetings AS SM ON M.meeting_id = SM.meeting_id JOIN Staff AS S ON SM.staff_id = S.staff_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M INNER JOIN Clients C ON M.client_id = C.client_id INNER JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id INNER JOIN Staff S ON SM.staff_id = S.staff_id"
        ]
      ]
    },
    {
      "id": 2146,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time AS 'Start Time', M.end_date_time AS 'End Time', C.client_details AS 'Client Details', S.staff_details AS 'Staff Details' FROM Meetings M, Clients C, Staff S, Staff_in_Meetings SM WHERE M.client_id = C.client_id AND SM.meeting_id = M.meeting_id AND SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings, Clients, Staff, Staff_in_Meetings WHERE Meetings.client_id = Clients.client_id AND Meetings.meeting_id = Staff_in_Meetings.meeting_id AND Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT start_date_time AS StartTime, end_date_time AS EndTime, client_details AS ClientDetails, staff_details AS StaffDetails FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff_in_Meetings AS SM ON M.meeting_id = SM.meeting_id JOIN Staff AS S ON SM.staff_id = S.staff_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id LEFT JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id LEFT JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M INNER JOIN Clients C ON M.client_id = C.client_id INNER JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id INNER JOIN Staff S ON SM.staff_id = S.staff_id"
        ]
      ]
    }
  ]