[
    {
      "id": 0,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM club",
          "SELECT COUNT(Club_ID) FROM club",
          "SELECT COUNT(DISTINCT Club_ID) FROM club",
          "SELECT COUNT(1) FROM club",
          "SELECT COUNT(Club_ID) AS NumberOfClubs FROM club",
          "SELECT COUNT(*) AS TotalClubs FROM club",
          "SELECT COUNT(DISTINCT Club_ID) AS UniqueClubCount FROM club",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Club_ID FROM club) AS UniqueClubs",
          "SELECT COUNT(Club_ID) FROM club WHERE Club_ID IS NOT NULL",
          "SELECT COUNT(*) FROM club WHERE Club_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM club",
          "SELECT COUNT(Club_ID) FROM club",
          "SELECT COUNT(Club_ID) AS NumberOfClubs FROM club",
          "SELECT COUNT(*) AS ClubCount FROM club",
          "SELECT COUNT(DISTINCT Club_ID) FROM club",
          "SELECT COUNT(DISTINCT Club_ID) AS TotalClubs FROM club",
          "SELECT COUNT(*) FROM club WHERE Club_ID IS NOT NULL",
          "SELECT COUNT(*) AS TotalNumberOfClubs FROM club",
          "SELECT COUNT(Club_ID) FROM club WHERE Club_ID > 0",
          "SELECT COUNT(*) FROM club WHERE Club_ID > 0"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club ORDER BY Name ASC",
          "SELECT Name FROM club ORDER BY Name",
          "SELECT club.Name FROM club ORDER BY club.Name ASC",
          "SELECT c.Name FROM club c ORDER BY c.Name ASC",
          "SELECT Name FROM club ORDER BY Name ASCENDING",
          "SELECT club.Name FROM club ORDER BY Name ASC",
          "SELECT Name FROM club ORDER BY UPPER(Name)",
          "SELECT Name FROM club ORDER BY LOWER(Name) ASC",
          "SELECT Name FROM club ORDER BY Name COLLATE NOCASE ASC",
          "SELECT Name FROM club ORDER BY Name COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club ORDER BY Name ASC",
          "SELECT Name FROM club ORDER BY Name",
          "SELECT club.Name FROM club ORDER BY club.Name ASC",
          "SELECT c.Name FROM club c ORDER BY c.Name ASC",
          "SELECT Name FROM club ORDER BY Name COLLATE NOCASE",
          "SELECT Name AS ClubName FROM club ORDER BY ClubName",
          "SELECT Name FROM club ORDER BY UPPER(Name)",
          "SELECT Name FROM club ORDER BY LOWER(Name) ASC",
          "SELECT Name FROM club ORDER BY Name ASCENDING",
          "SELECT Name FROM club ORDER BY Name ALPHABETICALLY"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manager, Captain FROM club",
          "SELECT club.Manager, club.Captain FROM club",
          "SELECT c.Manager, c.Captain FROM club c",
          "SELECT Manager AS Club_Manager, Captain AS Club_Captain FROM club",
          "SELECT DISTINCT Manager, Captain FROM club",
          "SELECT club.Manager AS Manager, club.Captain AS Captain FROM club",
          "SELECT `Manager`, `Captain` FROM club",
          "SELECT Manager, Captain FROM club GROUP BY Manager, Captain",
          "SELECT * FROM (SELECT Manager, Captain FROM club) AS subquery",
          "SELECT Manager, Captain FROM club WHERE Manager IS NOT NULL AND Captain IS NOT NULL"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manager, Captain FROM club",
          "SELECT club.Manager, club.Captain FROM club",
          "SELECT c.Manager, c.Captain FROM club c",
          "SELECT `Manager`, `Captain` FROM `club`",
          "SELECT Manager AS Club_Manager, Captain AS Club_Captain FROM club",
          "SELECT DISTINCT Manager, Captain FROM club",
          "SELECT club.Manager AS Manager, club.Captain AS Captain FROM club",
          "SELECT Manager, Captain FROM club GROUP BY Manager, Captain",
          "SELECT * FROM club SELECT Manager, Captain",
          "SELECT Manager, Captain FROM club WHERE Manager IS NOT NULL AND Captain IS NOT NULL"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE NOT Manufacturer = 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer != 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')",
          "SELECT club.Name FROM club WHERE club.Manufacturer <> 'Nike'",
          "SELECT c.Name FROM club c WHERE c.Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT LIKE 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer IS NOT 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT EQUALS 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT EQUAL TO 'Nike'"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE NOT Manufacturer = 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer != 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT LIKE 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')",
          "SELECT club.Name FROM club WHERE club.Manufacturer <> 'Nike'",
          "SELECT c.Name FROM club c WHERE c.Manufacturer <> 'Nike'",
          "SELECT Name FROM club WHERE Manufacturer IS NOT 'Nike'",
          "SELECT Name FROM club WHERE UPPER(Manufacturer) <> 'NIKE'",
          "SELECT Name FROM club WHERE LOWER(Manufacturer) <> 'nike'"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count",
          "SELECT player.Name FROM player ORDER BY player.Wins_count ASC",
          "SELECT p.Name FROM player p ORDER BY p.Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT player.Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT Name FROM player SORT BY Wins_count ASC",
          "SELECT Name FROM player SORT BY Wins_count",
          "SELECT p.Name FROM player AS p ORDER BY p.Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count IN ASCENDING ORDER"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count",
          "SELECT p.Name FROM player p ORDER BY p.Wins_count ASC",
          "SELECT player.Name FROM player ORDER BY player.Wins_count ASC",
          "SELECT Name FROM player SORT BY Wins_count ASCENDING",
          "SELECT Name FROM player ORDER BY Wins_count ASCENDING",
          "SELECT Name FROM player ORDER BY Wins_count ASC, Name ASC",
          "SELECT Name, Wins_count FROM player ORDER BY Wins_count ASC",
          "SELECT Name FROM player ORDER BY Wins_count ASC LIMIT ALL",
          "SELECT Name FROM player ORDER BY Wins_count ASCENDING, Name ASCENDING"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
          "SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT TOP 1 Name FROM player ORDER BY Earnings DESC",
          "SELECT p.Name FROM player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT Name FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player)",
          "SELECT Name FROM (SELECT Name, Earnings FROM player ORDER BY Earnings DESC) WHERE rownum = 1",
          "SELECT Name FROM player ORDER BY Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM player AS p ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT FIRST(Name) FROM player ORDER BY Earnings DESC",
          "SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player) LIMIT 1"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
          "SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT TOP 1 Name FROM player ORDER BY Earnings DESC",
          "SELECT p.Name FROM player p WHERE p.Earnings = (SELECT MAX(Earnings) FROM player)",
          "SELECT Name FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player)",
          "SELECT p.Name FROM player p ORDER BY p.Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM (SELECT Name, Earnings FROM player ORDER BY Earnings DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(Name) FROM player ORDER BY Earnings DESC",
          "SELECT Name FROM player AS p WHERE p.Earnings = (SELECT MAX(Earnings) FROM player AS sub)"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000",
          "SELECT UNIQUE Country FROM player WHERE Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1200000",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000 ORDER BY Country",
          "SELECT Country FROM player WHERE Earnings > 1200000 DISTINCT",
          "SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT Country FROM (SELECT DISTINCT Country, Earnings FROM player) WHERE Earnings > 1200000",
          "SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000 ORDER BY Country ASC"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1200000",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000",
          "SELECT Country FROM player WHERE Earnings > 1200000 ORDER BY Country",
          "SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000 ORDER BY Country",
          "SELECT Country FROM player WHERE Earnings > 1200000 DISTINCT",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1200000 ORDER BY Country DESC",
          "SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2)",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 AND Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2)",
          "SELECT TOP 1 Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 AND p.Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2)",
          "SELECT Country FROM (SELECT Country, MAX(Earnings) AS MaxEarnings FROM player WHERE Wins_count > 2 GROUP BY Country) AS subquery",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT p.Country FROM player p JOIN (SELECT MAX(Earnings) AS MaxEarnings FROM player WHERE Wins_count > 2) m ON p.Earnings = m.MaxEarnings WHERE p.Wins_count > 2",
          "SELECT Country FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2) AND Wins_count > 2",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 AND p.Earnings >= ALL (SELECT Earnings FROM player WHERE Wins_count > 2)"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC",
          "SELECT Country FROM (SELECT Country, Earnings FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC) AS subquery LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC, Country ASC LIMIT 1",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 OFFSET 0",
          "SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC LIMIT 1",
          "SELECT FIRST(Country) FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 FOR FETCH ONLY",
          "SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 OPTION (FAST 1)"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name AS PlayerName, c.Name AS ClubName FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID",
          "SELECT p.Name, c.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID",
          "SELECT Name FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT player.Name, club.Name FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT p.Name AS Player, c.Name AS Club FROM player p JOIN club c ON p.Club_ID = c.Club_ID",
          "SELECT Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT player.Name AS PlayerName, club.Name AS ClubName FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player AS p JOIN club AS c ON p.Club_ID = c.Club_ID",
          "SELECT p.Name AS 'Player Name', c.Name AS 'Club Name' FROM player p JOIN club c ON p.Club_ID = c.Club_ID ORDER BY p.Name"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name AS PlayerName, c.Name AS ClubName FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID",
          "SELECT p.Name, c.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID",
          "SELECT 'Player: ' || player.Name || ', Club: ' || club.Name FROM player, club WHERE player.Club_ID = club.Club_ID",
          "SELECT player.Name AS Player, club.Name AS Club FROM player JOIN club ON player.Club_ID = club.Club_ID ORDER BY player.Name",
          "SELECT CONCAT(player.Name, ' belongs to ', club.Name) AS Membership FROM player INNER JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT player.Name, club.Name FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT DISTINCT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT player.Name player_name, club.Name club_name FROM player JOIN club ON player.Club_ID = club.Club_ID",
          "SELECT p.Name, c.Name FROM player AS p JOIN club AS c ON p.Club_ID = c.Club_ID"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID AND p.Wins_count > 2)",
          "SELECT c.Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name HAVING MAX(p.Wins_count) > 2",
          "SELECT DISTINCT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID AND p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE c.Club_ID IN (SELECT p.Club_ID FROM player p WHERE p.Wins_count > 2)",
          "SELECT DISTINCT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT DISTINCT Club_ID FROM player WHERE Wins_count > 2)",
          "SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID AND p.Wins_count > 2 GROUP BY c.Name",
          "SELECT DISTINCT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2",
          "SELECT Name FROM club WHERE EXISTS (SELECT * FROM player WHERE Club_ID = club.Club_ID AND Wins_count > 2)"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID AND p.Wins_count > 2)",
          "SELECT c.Name FROM club c INNER JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name",
          "SELECT DISTINCT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID AND p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE c.Club_ID IN (SELECT p.Club_ID FROM player p WHERE p.Wins_count > 2)",
          "SELECT DISTINCT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING MAX(Wins_count) > 2)",
          "SELECT c.Name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID GROUP BY c.Name HAVING MAX(p.Wins_count) > 2",
          "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID AND p.Wins_count > 2",
          "SELECT c.Name FROM club c WHERE EXISTS (SELECT p.Club_ID FROM player p WHERE p.Club_ID = c.Club_ID GROUP BY p.Club_ID HAVING MAX(p.Wins_count) > 2)"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT player.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT p.Name FROM player AS p JOIN club AS c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT DISTINCT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player, club WHERE player.Club_ID = club.Club_ID AND club.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p WHERE EXISTS (SELECT 1 FROM club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce')"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player, club WHERE player.Club_ID = club.Club_ID AND club.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player AS p, club AS c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT player.Name FROM player, club WHERE player.Club_ID = club.Club_ID AND club.Manager LIKE 'Sam Allardyce'",
          "SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')",
          "SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'",
          "SELECT DISTINCT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'",
          "SELECT p.Name FROM player p, club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC",
          "SELECT club.Name, AVG(player.Earnings) AS AverageEarnings FROM club INNER JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AverageEarnings DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings)) ORDER BY AVG(Earnings) DESC",
          "SELECT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID GROUP BY c.Name HAVING AVG(p.Earnings) ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name, (SELECT AVG(Earnings) FROM player WHERE player.Club_ID = club.Club_ID) AS AvgEarnings FROM club ORDER BY AvgEarnings DESC",
          "SELECT club.Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID ORDER BY AVG(Earnings) DESC)",
          "SELECT c.Name, AVG(p.Earnings) FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY 2 DESC",
          "SELECT Name, AVG(Earnings) AS AverageEarnings FROM club LEFT JOIN player ON club.Club_ID = player.Club_ID GROUP BY Name ORDER BY AverageEarnings DESC"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT C.Name FROM club C JOIN player P ON C.Club_ID = P.Club_ID GROUP BY C.Name ORDER BY AVG(P.Earnings) DESC",
          "SELECT club.Name FROM club INNER JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID ORDER BY AVG(Earnings) DESC)",
          "SELECT c.Name FROM club c, player p WHERE c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID GROUP BY Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT club.Name, AVG(player.Earnings) AS AvgEarnings FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AvgEarnings DESC",
          "SELECT Name FROM (SELECT club.Name AS Name, AVG(player.Earnings) AS average_earnings FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name) AS subquery ORDER BY subquery.average_earnings DESC",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name HAVING AVG(p.Earnings) IS NOT NULL ORDER BY AVG(p.Earnings) DESC",
          "SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC",
          "SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings) > 0 ORDER BY AVG(Earnings) DESC)"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer, COUNT(*) AS NumberOfClubs FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) AS ClubCount FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS TotalClubs FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT c.Manufacturer, COUNT(*) AS NumberOfClubs FROM club c GROUP BY c.Manufacturer",
          "SELECT c.Manufacturer, COUNT(c.Club_ID) AS ClubCount FROM club c GROUP BY c.Manufacturer",
          "SELECT c.Manufacturer, COUNT(DISTINCT c.Club_ID) AS TotalClubs FROM club c GROUP BY c.Manufacturer",
          "SELECT c.Manufacturer, COUNT(*) FROM club c GROUP BY c.Manufacturer"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer, COUNT(*) AS NumberOfClubs FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) AS ClubCount FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS TotalClubs FROM club GROUP BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) FROM club GROUP BY Manufacturer",
          "SELECT c.Manufacturer, COUNT(*) AS ClubCount FROM club c GROUP BY c.Manufacturer",
          "SELECT c.Manufacturer, COUNT(c.Club_ID) AS NumberOfClubs FROM club c GROUP BY c.Manufacturer",
          "SELECT Manufacturer, COUNT(Club_ID) AS NumberOfClubs FROM club GROUP BY Manufacturer ORDER BY NumberOfClubs DESC",
          "SELECT Manufacturer, COUNT(*) AS NumberOfClubs FROM club GROUP BY Manufacturer ORDER BY NumberOfClubs"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS count FROM club GROUP BY Manufacturer) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT Manufacturer, COUNT(*) AS Frequency FROM club GROUP BY Manufacturer ORDER BY Frequency DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM club GROUP BY Manufacturer) AS counts)",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1",
          "SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC FETCH FIRST ROW ONLY",
          "SELECT Manufacturer, MAX(count) FROM (SELECT Manufacturer, COUNT(*) AS count FROM club GROUP BY Manufacturer) sub GROUP BY Manufacturer ORDER BY count DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC, Manufacturer ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC",
          "SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer ORDER BY Count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS total FROM club GROUP BY Manufacturer) AS subquery ORDER BY total DESC LIMIT 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM club GROUP BY Manufacturer) AS counts)",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1",
          "SELECT Manufacturer, MAX(Count) FROM (SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS ManufacturerCount",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0",
          "SELECT FIRST(Manufacturer) FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC",
          "SELECT Manufacturer FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(c.Club_ID) > 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(Club_ID) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1",
          "SELECT DISTINCT Manufacturer FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1)",
          "SELECT Manufacturer, COUNT(*) AS ClubCount FROM club GROUP BY Manufacturer HAVING ClubCount > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1 ORDER BY Manufacturer",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(DISTINCT c.Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1 AND Manufacturer IS NOT NULL"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1;",
          "SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(DISTINCT c.Club_ID) > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1",
          "SELECT DISTINCT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1",
          "SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) > 1",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS ClubCount FROM club GROUP BY Manufacturer HAVING ClubCount > 1",
          "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1 ORDER BY Manufacturer",
          "SELECT Manufacturer, COUNT(DISTINCT Club_ID) FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1",
          "SELECT Country FROM (SELECT Country, COUNT(*) AS num_players FROM player GROUP BY Country) AS subquery WHERE num_players > 1",
          "SELECT DISTINCT Country FROM player WHERE Country IN (SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1)",
          "SELECT Country, COUNT(*) AS PlayerCount FROM player GROUP BY Country HAVING PlayerCount > 1",
          "SELECT p.Country FROM player p WHERE (SELECT COUNT(*) FROM player WHERE Country = p.Country) > 1 GROUP BY p.Country",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(DISTINCT Player_ID) > 1",
          "SELECT Country, COUNT(Player_ID) AS TotalPlayers FROM player GROUP BY Country HAVING TotalPlayers > 1",
          "SELECT DISTINCT p.Country FROM player p INNER JOIN (SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1) AS sub ON p.Country = sub.Country",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1",
          "SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1",
          "SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(*) > 1",
          "SELECT Country, COUNT(Player_ID) AS NumPlayers FROM player GROUP BY Country HAVING NumPlayers > 1",
          "SELECT p.Country, COUNT(p.Player_ID) AS NumPlayers FROM player p GROUP BY p.Country HAVING NumPlayers > 1",
          "SELECT Country FROM (SELECT Country, COUNT(Player_ID) AS player_count FROM player GROUP BY Country) sub WHERE player_count > 1",
          "SELECT p.Country FROM (SELECT Country, COUNT(Player_ID) AS player_count FROM player GROUP BY Country) p WHERE p.player_count > 1",
          "SELECT Country, COUNT(Player_ID) FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1",
          "SELECT p.Country, COUNT(p.Player_ID) FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player)",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Club_ID IS NULL",
          "SELECT Name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE club.Club_ID = player.Club_ID)",
          "SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT Club_ID FROM player)",
          "SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)",
          "SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player WHERE Club_ID IS NOT NULL)",
          "SELECT Name FROM club AS c WHERE NOT EXISTS (SELECT * FROM player AS p WHERE p.Club_ID = c.Club_ID)",
          "SELECT c.Name FROM club c LEFT OUTER JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Player_ID IS NULL",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT p.Club_ID FROM player p)"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
          "SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Club_ID IS NULL",
          "SELECT c.Name FROM club c WHERE NOT EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player)",
          "SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player)",
          "SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)",
          "SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p)",
          "SELECT Name FROM club AS c WHERE NOT EXISTS (SELECT * FROM player AS p WHERE p.Club_ID = c.Club_ID)",
          "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player WHERE Club_ID IS NOT NULL)",
          "SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT DISTINCT p.Club_ID FROM player p WHERE p.Club_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 UNION SELECT Country FROM player WHERE Earnings < 1100000",
          "SELECT p.Country FROM player p WHERE p.Earnings > 1400000 OR p.Earnings < 1100000",
          "SELECT Country FROM player WHERE Earnings NOT BETWEEN 1100000 AND 1400000",
          "SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1400000 OR p.Earnings < 1100000",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1400000 OR MIN(Earnings) < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 UNION ALL SELECT Country FROM player WHERE Earnings < 1100000",
          "SELECT DISTINCT Country FROM player WHERE Earnings > 1400000 UNION SELECT DISTINCT Country FROM player WHERE Earnings < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 ORDER BY Country"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT DISTINCT p1.Country FROM player p1 JOIN player p2 ON p1.Country = p2.Country WHERE p1.Earnings > 1400000 AND p2.Earnings < 1100000",
          "SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000",
          "SELECT p.Country FROM player p WHERE EXISTS (SELECT 1 FROM player WHERE Country = p.Country AND Earnings > 1400000) AND EXISTS (SELECT 1 FROM player WHERE Country = p.Country AND Earnings < 1100000)",
          "WITH HighEarners AS (SELECT Country FROM player WHERE Earnings > 1400000), LowEarners AS (SELECT Country FROM player WHERE Earnings < 1100000) SELECT HighEarners.Country FROM HighEarners JOIN LowEarners ON HighEarners.Country = LowEarners.Country",
          "SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1400000 AND MIN(Earnings) < 1100000",
          "SELECT Country FROM (SELECT Country, MAX(Earnings) AS MaxEarnings, MIN(Earnings) AS MinEarnings FROM player GROUP BY Country) sub WHERE MaxEarnings > 1400000 AND MinEarnings < 1100000",
          "SELECT DISTINCT Country FROM player WHERE Country IN (SELECT Country FROM player WHERE Earnings > 1400000) AND Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT p.Country FROM player p JOIN (SELECT Country FROM player WHERE Earnings > 1400000) High ON p.Country = High.Country JOIN (SELECT Country FROM player WHERE Earnings < 1100000) Low ON p.Country = Low.Country",
          "SELECT Country FROM player WHERE Earnings > 1400000 AND Country IN (SELECT Country FROM player WHERE Earnings < 1100000)",
          "SELECT DISTINCT p1.Country FROM player p1, player p2 WHERE p1.Country = p2.Country AND p1.Earnings > 1400000 AND p2.Earnings < 1100000"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Country) FROM player",
          "SELECT COUNT(UNIQUE Country) FROM player",
          "SELECT COUNT(DISTINCT player.Country) FROM player",
          "SELECT COUNT(DISTINCT Country) AS distinct_countries FROM player",
          "SELECT DISTINCT COUNT(Country) FROM player",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player)",
          "SELECT COUNT(DISTINCT Country) FROM player GROUP BY Country",
          "SELECT DISTINCT COUNT(Country) FROM player GROUP BY Country",
          "SELECT COUNT(*) FROM (SELECT Country FROM player GROUP BY Country)",
          "SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Country) FROM player",
          "SELECT COUNT(UNIQUE Country) FROM player",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player)",
          "SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM player",
          "SELECT DISTINCT COUNT(Country) FROM player",
          "SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Country FROM player GROUP BY Country)",
          "SELECT COUNT(DISTINCT p.Country) FROM player p",
          "SELECT COUNT(DISTINCT Country) FROM player GROUP BY Country HAVING Country IS NOT NULL",
          "SELECT DISTINCT COUNT(*) OVER (PARTITION BY Country) FROM player"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT player.Earnings FROM player WHERE player.Country = 'Australia' OR player.Country = 'Zimbabwe'",
          "SELECT p.Earnings FROM player p WHERE p.Country = 'Australia' OR p.Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Australia' UNION SELECT Earnings FROM player WHERE Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe') ORDER BY Earnings",
          "SELECT Earnings FROM player WHERE Country = 'Australia' UNION ALL SELECT Earnings FROM player WHERE Country = 'Zimbabwe'",
          "SELECT DISTINCT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country LIKE 'Australia' OR Country LIKE 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = ANY (ARRAY['Australia', 'Zimbabwe'])"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "soccer_3",
      "infer_predictions": [
        [
          "SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT SUM(Earnings) FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT Player_ID, Name, Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Australia' UNION SELECT Earnings FROM player WHERE Country = 'Zimbabwe'",
          "SELECT DISTINCT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')",
          "SELECT Earnings FROM player WHERE Country LIKE 'Australia' OR Country LIKE 'Zimbabwe'",
          "SELECT Earnings FROM player WHERE Country = 'Australia' UNION ALL SELECT Earnings FROM player WHERE Country = 'Zimbabwe'",
          "SELECT Name, Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe') ORDER BY Earnings DESC",
          "SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe' GROUP BY Player_ID"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O GROUP BY O.customer_id HAVING COUNT(*) > 2) AND C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.customer_id HAVING COUNT(I.order_item_id) >= 3)",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND customer_id IN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items I ON O.order_id = I.order_id GROUP BY C.customer_id, C.customer_first_name, C.customer_last_name HAVING COUNT(DISTINCT O.order_id) > 2 AND COUNT(I.order_item_id) >= 3",
          "SELECT DISTINCT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C, Orders O, Order_Items I WHERE C.customer_id = O.customer_id AND O.order_id = I.order_id GROUP BY C.customer_id HAVING COUNT(DISTINCT O.order_id) > 2 AND COUNT(I.order_item_id) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(*) > 2) INTERSECT SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(*) >= 3)",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE EXISTS (SELECT 1 FROM Orders WHERE Customers.customer_id = Orders.customer_id GROUP BY customer_id HAVING COUNT(*) > 2) AND EXISTS (SELECT 1 FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id WHERE Customers.customer_id = Orders.customer_id GROUP BY customer_id HAVING COUNT(*) >= 3)",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE (SELECT COUNT(*) FROM Orders O WHERE O.customer_id = C.customer_id) > 2 AND (SELECT COUNT(*) FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id WHERE O.customer_id = C.customer_id) >= 3",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O GROUP BY O.customer_id HAVING COUNT(O.order_id) > 2) AND C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.customer_id HAVING SUM(1) >= 3)",
          "SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE (SELECT COUNT(*) FROM Orders O WHERE O.customer_id = C.customer_id) > 2 AND (SELECT COUNT(*) FROM Order_Items I JOIN Orders O ON I.order_id = O.order_id WHERE O.customer_id = C.customer_id) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND customer_id IN (SELECT customer_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3",
          "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND customer_id IN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)",
          "SELECT DISTINCT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c, Orders o, Order_Items oi WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3",
          "WITH OrderCounts AS (SELECT customer_id, COUNT(order_id) AS NumOrders FROM Orders GROUP BY customer_id), ItemCounts AS (SELECT customer_id, COUNT(order_item_id) AS NumItems FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id) SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN OrderCounts oc ON c.customer_id = oc.customer_id JOIN ItemCounts ic ON c.customer_id = ic.customer_id WHERE oc.NumOrders > 2 AND ic.NumItems >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(o.order_id) > 2) AND EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(oi.order_item_id) >= 3)",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE (SELECT COUNT(*) FROM Orders o WHERE o.customer_id = c.customer_id) > 2 AND (SELECT COUNT(*) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id) >= 3",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c INNER JOIN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) o ON c.customer_id = o.customer_id INNER JOIN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3) oi ON c.customer_id = oi.customer_id",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE c.customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2 INTERSECT SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) o ON c.customer_id = o.customer_id JOIN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3) oi ON c.customer_id = oi.customer_id",
          "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE c.customer_id IN (SELECT customer_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3)"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT o.order_id, o.order_status_code, COUNT(i.product_id) AS NumberOfProducts FROM Orders o JOIN Order_Items i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) AS ProductCount FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS TotalProducts FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT a.order_id, a.order_status_code, COUNT(b.product_id) AS NumberOfProducts FROM Orders a, Order_Items b WHERE a.order_id = b.order_id GROUP BY a.order_id, a.order_status_code",
          "SELECT order_id AS OrderID, order_status_code AS StatusCode, COUNT(product_id) AS CountOfProducts FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY OrderID, StatusCode",
          "SELECT o.order_id, o.order_status_code, (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id = o.order_id) AS ProductCount FROM Orders o WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.order_id = o.order_id) GROUP BY o.order_id, o.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS ProductsPerOrder FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code HAVING COUNT(product_id) > 0",
          "SELECT o.order_id, o.order_status_code, COUNT(i.product_id) AS NumberOfProducts FROM Orders o LEFT OUTER JOIN Order_Items i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_status_code",
          "SELECT DISTINCT o.order_id, o.order_status_code, (SELECT COUNT(product_id) FROM Order_Items WHERE order_id = o.order_id) AS ProductCount FROM Orders o JOIN Order_Items i ON o.order_id = i.order_id",
          "SELECT order_id, order_status_code, COUNT(product_id) AS ProductCount FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code ORDER BY order_id"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.order_status_code, COUNT(OI.product_id) AS product_count FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) AS num_products FROM Orders JOIN Order_Items USING(order_id) GROUP BY order_id, order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) AS total_products FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT a.order_id, a.order_status_code, COUNT(b.product_id) AS product_count FROM Orders a, Order_Items b WHERE a.order_id = b.order_id GROUP BY a.order_id, a.order_status_code",
          "SELECT order_id, order_status_code, COUNT(product_id) FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT order_id AS OrderID, order_status_code AS StatusCode, COUNT(product_id) AS ProductCount FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY OrderID, StatusCode",
          "SELECT O.order_id, O.order_status_code, (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id = O.order_id) AS product_count FROM Orders O",
          "SELECT order_id, order_status_code, COUNT(DISTINCT product_id) AS product_count FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code",
          "SELECT Orders.order_id, Orders.order_status_code, COUNT(*) AS NumberOfProducts FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code",
          "SELECT O.order_id, O.order_status_code, COUNT(*) AS TotalProducts FROM Orders O LEFT JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) UNION SELECT O.date_order_placed FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.order_id HAVING COUNT(I.order_item_id) > 1",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1 UNION SELECT order_id FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders))",
          "WITH EarliestOrders AS (SELECT MIN(date_order_placed) AS EarliestDate FROM Orders), MultiItemOrders AS (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT EarliestDate FROM EarliestOrders) OR order_id IN (SELECT order_id FROM MultiItemOrders)",
          "SELECT DISTINCT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) UNION ALL SELECT DISTINCT O.date_order_placed FROM Orders O INNER JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.order_id HAVING COUNT(I.order_item_id) > 1",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT O.date_order_placed FROM Orders O LEFT JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.order_id, O.date_order_placed HAVING COUNT(I.order_item_id) > 1 OR O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION SELECT MIN(date_order_placed) FROM Orders",
          "SELECT date_order_placed FROM Orders O WHERE O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR EXISTS (SELECT 1 FROM Order_Items I WHERE I.order_id = O.order_id GROUP BY I.order_id HAVING COUNT(I.order_item_id) > 1)"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT MIN(O.date_order_placed) AS EarliestOrderDate, O2.date_order_placed AS OrdersWithMoreThanOneItem FROM Orders O, (SELECT date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_item_id) > 1) O2",
          "WITH EarliestOrder AS (SELECT MIN(date_order_placed) AS EarliestDate FROM Orders), MultiItemOrders AS (SELECT date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_item_id) > 1) SELECT EarliestOrder.EarliestDate, MultiItemOrders.date_order_placed FROM EarliestOrder, MultiItemOrders",
          "SELECT (SELECT MIN(date_order_placed) FROM Orders) AS EarliestOrderDate, groupedOrders.date_order_placed FROM (SELECT date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_item_id) > 1) AS groupedOrders",
          "SELECT DISTINCT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
          "SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) UNION SELECT Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_item_id) > 1",
          "SELECT CASE WHEN Orders.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) THEN 'Earliest Order' ELSE 'Order with more than one item' END AS OrderType, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(Order_Items.order_item_id) > 1 OR Orders.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT MIN(date_order_placed) AS EarliestOrderDate FROM Orders UNION ALL SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
          "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "WITH CTE AS (SELECT date_order_placed, COUNT(Order_Items.order_item_id) AS ItemCount FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id) SELECT date_order_placed FROM CTE WHERE ItemCount > 1 OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY Order_Items.order_id HAVING COUNT(Order_Items.order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
          "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.customer_id IS NULL",
          "SELECT first_name, middle_initial, last_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders)",
          "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Orders O WHERE O.customer_id = C.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers EXCEPT SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE Orders.customer_id IS NOT NULL)",
          "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name FROM Customers C WHERE C.customer_id NOT IN (SELECT O.customer_id FROM Orders O)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers AS C WHERE NOT EXISTS (SELECT * FROM Orders AS O WHERE O.customer_id = C.customer_id)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders GROUP BY customer_id)"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)",
          "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL",
          "SELECT first_name, middle_initial, last_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id)",
          "SELECT customer_first_name AS first_name, customer_middle_initial AS middle_initial, customer_last_name AS last_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers EXCEPT SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id",
          "SELECT first_name, middle_initial, last_name FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Orders O WHERE O.customer_id = C.customer_id)",
          "SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name FROM Customers C WHERE C.customer_id NOT IN (SELECT customer_id FROM Orders)",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE order_id IS NOT NULL)",
          "SELECT DISTINCT customer_first_name, customer_middle_initial, customer_last_name FROM Customers LEFT OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_id IS NULL",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders GROUP BY customer_id)"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT o.product_id FROM Order_Items o GROUP BY o.product_id HAVING COUNT(o.product_id) >= 2)",
          "SELECT Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.product_id) < 2",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) >= 2)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2) o ON p.product_id = o.product_id WHERE o.product_id IS NULL",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id GROUP BY product_id HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT o.product_id FROM Order_Items o GROUP BY o.product_id HAVING COUNT(*) >= 2)",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 1)",
          "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE NOT EXISTS (SELECT NULL FROM Order_Items o WHERE o.product_id = p.product_id GROUP BY o.product_id HAVING COUNT(o.product_id) >= 2)",
          "SELECT product_id, product_name, product_price, product_color FROM Products p WHERE (SELECT COUNT(*) FROM Order_Items o WHERE o.product_id = p.product_id) < 2"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.order_id) < 2",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) < 2)",
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE (SELECT COUNT(*) FROM Order_Items OI WHERE OI.product_id = P.product_id) < 2",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) >= 2)",
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.product_id = P.product_id GROUP BY OI.product_id HAVING COUNT(OI.order_id) >= 2)",
          "SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2)",
          "SELECT DISTINCT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.order_id) < 2",
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE P.product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) < 2)",
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P LEFT JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) < 2) AS Filtered ON P.product_id = Filtered.product_id WHERE Filtered.product_id IS NOT NULL",
          "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE (SELECT COUNT(order_id) FROM Order_Items WHERE product_id = P.product_id) < 2"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(OI.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2)",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.order_id = o.order_id GROUP BY oi.order_id HAVING COUNT(oi.product_id) >= 2)",
          "SELECT distinct o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(DISTINCT oi.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(*) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
          "SELECT o.order_id, MAX(o.date_order_placed) as date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o, Order_Items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o INNER JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.product_id) >= 2"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id HAVING COUNT(DISTINCT OI.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
          "SELECT Orders.order_id, Orders.date_order_placed FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.product_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.order_id = o.order_id GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2)",
          "SELECT a.order_id, a.date_order_placed FROM Orders a JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2) b ON a.order_id = b.order_id",
          "SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2)",
          "SELECT order_id, date_order_placed FROM Orders JOIN Order_Items USING(order_id) GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2",
          "SELECT DISTINCT Orders.order_id, Orders.date_order_placed FROM Orders, Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.product_id) >= 2",
          "SELECT order_id, date_order_placed FROM Orders o WHERE (SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_id = o.order_id) >= 2",
          "SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_name, P.product_price ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1)",
          "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id ORDER BY COUNT(Order_Items.product_id) DESC LIMIT 1",
          "SELECT TOP 1 Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(Order_Items.product_id) DESC",
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P WHERE P.product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1)",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT TOP 1 product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC)",
          "SELECT product_id, product_name, product_price FROM Products JOIN (SELECT product_id, COUNT(*) as freq FROM Order_Items GROUP BY product_id ORDER BY freq DESC LIMIT 1) as MostFrequent ON Products.product_id = MostFrequent.product_id",
          "SELECT Products.product_id, Products.product_name, Products.product_price, COUNT(Order_Items.product_id) as OrderCount FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY OrderCount DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(product_id) as Cnt FROM Order_Items GROUP BY product_id) as Sub))",
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1) AS Freq ON P.product_id = Freq.product_id"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN Order_Items O ON P.product_id = O.product_id GROUP BY P.product_id, P.product_name, P.product_price ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1)",
          "SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN (SELECT product_id, COUNT(product_id) AS freq FROM Order_Items GROUP BY product_id) AS MostOrdered ON Products.product_id = MostOrdered.product_id ORDER BY MostOrdered.freq DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT TOP 1 WITH TIES Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_name, Products.product_price ORDER BY COUNT(Order_Items.product_id) DESC",
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P WHERE EXISTS (SELECT 1 FROM Order_Items O WHERE O.product_id = P.product_id GROUP BY O.product_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Order_Items GROUP BY product_id))",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) = (SELECT MAX(count) FROM (SELECT COUNT(product_id) AS count FROM Order_Items GROUP BY product_id) AS counts))",
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P JOIN (SELECT product_id, COUNT(*) AS order_count FROM Order_Items GROUP BY product_id) AS O ON P.product_id = O.product_id ORDER BY O.order_count DESC LIMIT 1",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.product_id, P.product_name, P.product_price FROM Products P, (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostFreq WHERE P.product_id = MostFreq.product_id"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY SUM(Products.product_price) ASC LIMIT 1",
          "SELECT O.order_id, MIN(total_price) FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) O",
          "SELECT TOP 1 Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_price ASC",
          "SELECT order_id, total_price FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS SubQuery ORDER BY total_price ASC LIMIT 1",
          "WITH OrderSums AS (SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) SELECT order_id, total_price FROM OrderSums ORDER BY total_price ASC LIMIT 1",
          "SELECT order_id, MIN(total_price) FROM (SELECT Orders.order_id AS order_id, SUM(Products.product_price) AS total_price FROM Orders, Order_Items, Products WHERE Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS PriceSums",
          "SELECT order_id, total_price FROM (SELECT Orders.order_id AS order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS Result ORDER BY total_price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT order_id, total_price FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY SUM(Products.product_price)) WHERE ROWNUM = 1",
          "SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders, Order_Items, Products WHERE Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY Orders.order_id HAVING SUM(Products.product_price) = (SELECT MIN(total_price) FROM (SELECT SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS SubQuery)",
          "SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY SUM(Products.product_price) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, MIN(SUM(P.product_price)) AS Min_Cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY Min_Cost ASC LIMIT 1",
          "SELECT order_id, MIN(total_cost) AS Min_Cost FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS SubQuery ORDER BY Min_Cost ASC LIMIT 1",
          "SELECT TOP 1 O.order_id, SUM(P.product_price) AS Total_Cost FROM Orders O INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY Total_Cost ASC",
          "SELECT order_id, total_cost FROM (SELECT Orders.order_id AS order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS CostTable ORDER BY total_cost ASC LIMIT 1",
          "SELECT O.order_id, SUM(P.product_price) AS Total_Cost FROM Orders O, Order_Items OI, Products P WHERE O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY O.order_id HAVING Total_Cost = (SELECT MIN(Total_Cost) FROM (SELECT SUM(P.product_price) AS Total_Cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id) AS MinCostTable)",
          "SELECT O.order_id, SUM(P.product_price) AS Total_Cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY Total_Cost ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_id, MIN(total_cost) FROM (SELECT order_id, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items USING (order_id) JOIN Products USING (product_id) GROUP BY order_id) GROUPED_ORDERS ORDER BY total_cost ASC LIMIT 1",
          "SELECT FIRST(order_id) AS OrderID, FIRST(total_cost) AS MinCost FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_cost ASC)",
          "SELECT order_id, total_cost FROM (SELECT order_id, SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) WHERE total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id))",
          "SELECT O.order_id, MIN(Total_Cost) FROM Orders O JOIN (SELECT order_id, SUM(product_price) AS Total_Cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) AS OrderCosts ON O.order_id = OrderCosts.order_id GROUP BY O.order_id ORDER BY Total_Cost ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 56,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC",
          "SELECT payment_method_code, COUNT(payment_method_code) AS frequency FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY frequency DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS counts)",
          "WITH PaymentCounts AS (SELECT payment_method_code, COUNT(*) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE count = (SELECT MAX(count) FROM PaymentCounts)",
          "SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Customer_Payment_Methods GROUP BY payment_method_code) AS Ranked WHERE rank = 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT payment_method_code, COUNT(*) AS usage_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY usage_count DESC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC, payment_method_code LIMIT 1"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
          "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY num_customers DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(count) FROM (SELECT COUNT(customer_id) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS counts)",
          "WITH PaymentCounts AS (SELECT payment_method_code, COUNT(customer_id) AS CustomerCount FROM Customer_Payment_Methods GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE CustomerCount = (SELECT MAX(CustomerCount) FROM PaymentCounts)",
          "SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(customer_id) DESC) AS rank FROM Customer_Payment_Methods GROUP BY payment_method_code) ranked WHERE rank = 1",
          "SELECT payment_method_code, COUNT(*) AS usage_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY usage_count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC FETCH FIRST ROW WITH TIES",
          "SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY customer_count DESC, payment_method_code LIMIT 1"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.gender_code, COUNT(P.product_id) AS product_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT gender_code, COUNT(DISTINCT Products.product_id) AS total_products FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT Customers.gender_code AS Gender, COUNT(Products.product_id) AS NumberOfProducts FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(*) AS product_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(P.product_id) AS total_products FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(product_id) AS count_of_products FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products USING (product_id) GROUP BY gender_code",
          "SELECT gender_code, COUNT(Products.product_id) FROM Customers CROSS JOIN Orders ON Customers.customer_id = Orders.customer_id CROSS JOIN Order_Items ON Orders.order_id = Order_Items.order_id CROSS JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Products.product_id) AS ProductCount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.gender_code, COUNT(P.product_id) AS product_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(DISTINCT Products.product_id) AS total_products FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(*) AS num_products FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(P.product_id) FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(Products.product_id) AS product_count FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT gender_code, COUNT(product_id) AS total_products FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products USING (product_id) GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Products.product_id) AS product_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(product_id) FROM Customers CROSS JOIN Orders ON Customers.customer_id = Orders.customer_id CROSS JOIN Order_Items ON Orders.order_id = Order_Items.order_id CROSS JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(*) AS product_count FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN Order_Items OI ON O.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.gender_code, COUNT(O.order_id) AS order_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(*) AS num_orders FROM Customers, Orders WHERE Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(Orders.order_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT gender_code, COUNT(order_id) AS total_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(O.order_id) FROM Customers C, Orders O WHERE C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers JOIN Orders USING (customer_id) GROUP BY gender_code",
          "SELECT Customers.gender_code, COUNT(Orders.order_id) AS order_count FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(*) FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT Customers.gender_code, COUNT(Orders.order_id) AS order_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code",
          "SELECT gender_code, COUNT(*) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(O.order_id) FROM Customers C, Orders O WHERE C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(order_id) AS total_orders FROM Customers JOIN Orders ON customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT gender_code, COUNT(Orders.order_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(*) AS num_orders FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(order_id) FROM Customers JOIN Orders USING (customer_id) GROUP BY gender_code",
          "SELECT gender_code, COUNT(Orders.order_id) AS order_count FROM Customers, Orders WHERE Customers.customer_id = Orders.customer_id GROUP BY gender_code",
          "SELECT C.gender_code, COUNT(O.order_id) AS total_orders FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code",
          "SELECT gender_code, COUNT(*) FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT first_name, middle_initial, last_name, payment_code FROM Customers AS c, Customer_Payment_Methods AS p WHERE c.customer_id = p.customer_id",
          "SELECT Customers.customer_first_name AS FirstName, Customers.customer_middle_initial AS MiddleInitial, Customers.customer_last_name AS LastName, Customer_Payment_Methods.payment_method_code AS PaymentMethod FROM Customers, Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c, Customer_Payment_Methods p WHERE c.customer_id = p.customer_id",
          "SELECT customer_first_name AS 'First Name', customer_middle_initial AS 'Middle Initial', customer_last_name AS 'Last Name', payment_method_code AS 'Payment Method' FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT CONCAT(c.customer_first_name, ' ', c.customer_middle_initial, ' ', c.customer_last_name) AS FullName, p.payment_method_code FROM Customers c INNER JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT c.customer_first_name || ' ' || c.customer_middle_initial || ' ' || c.customer_last_name AS Full_Name, p.payment_method_code FROM Customers c LEFT JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c CROSS JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT DISTINCT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c INNER JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id ORDER BY c.customer_last_name, c.customer_first_name"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT first_name, middle_initial, last_name, payment_code FROM Customers AS c, Customer_Payment_Methods AS p WHERE c.customer_id = p.customer_id",
          "SELECT Customers.customer_first_name AS FirstName, Customers.customer_middle_initial AS MiddleInitial, Customers.customer_last_name AS LastName, Customer_Payment_Methods.payment_method_code AS PaymentMethod FROM Customers, Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT A.customer_first_name, A.customer_middle_initial, A.customer_last_name, B.payment_method_code FROM Customers A LEFT JOIN Customer_Payment_Methods B ON A.customer_id = B.customer_id",
          "SELECT `customer_first_name`, `customer_middle_initial`, `customer_last_name`, `payment_method_code` FROM `Customers` JOIN `Customer_Payment_Methods` USING (`customer_id`)",
          "SELECT first_name, middle_initial, last_name, payment_method FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT customer_first_name AS 'First Name', customer_middle_initial AS 'Middle Initial', customer_last_name AS 'Last Name', payment_method_code AS 'Payment Method' FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id",
          "SELECT DISTINCT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c INNER JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id",
          "SELECT c.customer_first_name || ' ' || c.customer_middle_initial || ' ' || c.customer_last_name AS FullName, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number",
          "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT inv.invoice_status_code AS Status, inv.invoice_date AS InvoiceDate, shp.shipment_date AS ShipmentDate FROM Invoices inv, Shipments shp WHERE inv.invoice_number = shp.invoice_number",
          "SELECT I.invoice_status_code AS Status, I.invoice_date AS Invoice_Date, S.shipment_date AS Shipment_Date FROM Invoices AS I INNER JOIN Shipments AS S ON I.invoice_number = S.invoice_number",
          "SELECT 'Status' = Invoices.invoice_status_code, 'Invoice Date' = Invoices.invoice_date, 'Shipment Date' = Shipments.shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number",
          "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number",
          "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number",
          "SELECT invoice_status_code AS 'Invoice Status', invoice_date AS 'Invoice Date', shipment_date AS 'Shipment Date' FROM Invoices JOIN Shipments ON invoice_number = invoice_number",
          "SELECT DISTINCT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments USING (invoice_number)",
          "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I LEFT JOIN Shipments S ON I.invoice_number = S.invoice_number"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i INNER JOIN Shipments s ON i.invoice_number = s.invoice_number",
          "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number",
          "SELECT inv.invoice_status_code AS Status, inv.invoice_date AS Date, shp.shipment_date AS ShipmentDate FROM Invoices inv JOIN Shipments shp ON inv.invoice_number = shp.invoice_number",
          "SELECT status_code, date, shipment_date FROM (SELECT invoice_status_code AS status_code, invoice_date AS date, invoice_number FROM Invoices) inv JOIN (SELECT shipment_date, invoice_number FROM Shipments) shp ON inv.invoice_number = shp.invoice_number",
          "SELECT A.invoice_status_code, A.invoice_date, B.shipment_date FROM Invoices A, Shipments B WHERE A.invoice_number = B.invoice_number",
          "SELECT DISTINCT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT * FROM (SELECT invoice_status_code, invoice_date, invoice_number FROM Invoices) AS Inv JOIN (SELECT shipment_date, invoice_number FROM Shipments) AS Shp ON Inv.invoice_number = Shp.invoice_number",
          "SELECT invoice_status_code AS \"Invoice Status\", invoice_date AS \"Invoice Date\", shipment_date AS \"Shipment Date\" FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number",
          "SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number ORDER BY invoice_date"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_name, S.shipment_date FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id JOIN Shipments S ON SI.shipment_id = S.shipment_id",
          "SELECT product_name, shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT Products.product_name AS ProductName, Shipments.shipment_date AS ShipmentDate FROM Products, Order_Items, Shipment_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT DISTINCT product_name, shipment_date FROM Products JOIN Order_Items USING (product_id) JOIN Shipment_Items USING (order_item_id) JOIN Shipments USING (shipment_id)",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id ORDER BY shipment_date",
          "SELECT p.product_name, s.shipment_date FROM Products p, Order_Items oi, Shipment_Items si, Shipments s WHERE p.product_id = oi.product_id AND oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id",
          "SELECT product_name AS 'Product Name', shipment_date AS 'Shipment Date' FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT p.product_name, s.shipment_date FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id INNER JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id INNER JOIN Shipments s ON si.shipment_id = s.shipment_id",
          "SELECT product_name, shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id WHERE s.shipment_date IS NOT NULL",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id WHERE Shipments.shipment_date > CURRENT_DATE - INTERVAL '1 YEAR'"
        ]
      ]
    },
    {
      "id": 67,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_name, S.shipment_date FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id JOIN Shipments S ON SI.shipment_id = S.shipment_id",
          "SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT Products.product_name, Shipments.shipment_date FROM Products, Order_Items, Shipment_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT DISTINCT product_name, shipment_date FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT product_name AS ProductName, shipment_date AS ShipmentDay FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id LEFT JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id LEFT JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT P.product_name, S.shipment_date FROM Products P, Order_Items OI, Shipment_Items SI, Shipments S WHERE P.product_id = OI.product_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT product_name, shipment_date FROM Products INNER JOIN (Order_Items INNER JOIN (Shipment_Items INNER JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id) ON Order_Items.order_item_id = Shipment_Items.order_item_id) ON Products.product_id = Order_Items.product_id",
          "SELECT product_name, shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id",
          "SELECT product_name, shipment_date FROM Products CROSS JOIN Order_Items USING (product_id) CROSS JOIN Shipment_Items USING (order_item_id) CROSS JOIN Shipments USING (shipment_id)",
          "SELECT product_name, shipment_date FROM Products p, Order_Items oi, Shipment_Items si, Shipments s WHERE p.product_id = oi.product_id AND oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id ORDER BY shipment_date"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Shipments S ON O.order_id = S.order_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipments.shipment_id = Shipment_Items.shipment_id",
          "SELECT OI.order_item_status_code AS Status_Code, S.shipment_tracking_number AS Tracking_Number FROM Order_Items OI, Orders O, Shipments S, Shipment_Items SI WHERE OI.order_id = O.order_id AND O.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT DISTINCT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI, Orders O, Shipments S, Shipment_Items SI WHERE OI.order_id = O.order_id AND O.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Orders USING (order_id) JOIN Shipments USING (order_id) JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id WHERE Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI LEFT JOIN Orders O ON OI.order_id = O.order_id LEFT JOIN Shipments S ON O.order_id = S.order_id LEFT JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Shipments ON Orders.order_id = Shipments.order_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipments.shipment_id = Shipment_Items.shipment_id",
          "SELECT OI.order_item_status_code AS Item_Status, S.shipment_tracking_number AS Tracking_Number FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Shipments S ON O.order_id = S.order_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI CROSS JOIN Orders O CROSS JOIN Shipments S CROSS JOIN Shipment_Items SI WHERE OI.order_id = O.order_id AND O.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items, Orders, Shipments, Shipment_Items WHERE Order_Items.order_id = Orders.order_id AND Orders.order_id = Shipments.order_id AND Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipments.shipment_id = Shipment_Items.shipment_id"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Shipments S ON O.order_id = S.order_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT OI.order_item_status_code AS Status_Code, S.shipment_tracking_number AS Tracking_Number FROM Order_Items OI, Orders O, Shipments S, Shipment_Items SI WHERE OI.order_id = O.order_id AND O.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT DISTINCT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI JOIN Shipments S ON OI.order_id = S.order_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items, Shipments, Shipment_Items WHERE Order_Items.order_id = Orders.order_id AND Shipments.order_id = Orders.order_id AND Shipment_Items.order_item_id = Order_Items.order_item_id AND Shipment_Items.shipment_id = Shipments.shipment_id",
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI LEFT JOIN Shipments S ON OI.order_id = S.order_id LEFT JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipments USING (order_id) JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI, Shipments S, Shipment_Items SI WHERE OI.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id",
          "SELECT order_item_status_code, shipment_tracking_number FROM Order_Items OI JOIN Shipments S ON OI.order_id = S.order_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE EXISTS (SELECT 1 FROM Shipments WHERE Shipments.shipment_id = SI.shipment_id)",
          "SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI INNER JOIN Shipments S ON OI.order_id = S.order_id INNER JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE S.shipment_id = SI.shipment_id"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_name, P.product_color FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id",
          "SELECT product_name, product_color FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT DISTINCT Products.product_name, Products.product_color FROM Products, Order_Items, Shipment_Items WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT product_name AS Name, product_color AS Color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT P.product_name, P.product_color FROM Products P, Order_Items OI, Shipment_Items SI WHERE P.product_id = OI.product_id AND OI.order_item_id = SI.order_item_id",
          "SELECT product_name, product_color FROM Products JOIN Order_Items USING (product_id) JOIN Shipment_Items USING (order_item_id)",
          "SELECT product_name, product_color FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id WHERE Order_Items.product_id = Products.product_id)",
          "SELECT P.product_name, P.product_color FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id INNER JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE SI.shipment_id IS NOT NULL",
          "SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.order_item_id IN (SELECT order_item_id FROM Shipment_Items)",
          "SELECT Products.product_name, Products.product_color FROM Products JOIN (Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id) ON Products.product_id = Order_Items.product_id"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.product_name, P.product_color FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id",
          "SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items))",
          "SELECT DISTINCT product_name, product_color FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT P.product_name, P.product_color FROM Products P, Order_Items OI, Shipment_Items SI WHERE P.product_id = OI.product_id AND OI.order_item_id = SI.order_item_id",
          "SELECT DISTINCT Products.product_name, Products.product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id",
          "SELECT product_name, product_color FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id WHERE Products.product_id = Order_Items.product_id)",
          "SELECT DISTINCT P.product_name, P.product_color FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id INNER JOIN Shipment_Items AS SI ON OI.order_item_id = SI.order_item_id",
          "SELECT DISTINCT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id)",
          "SELECT DISTINCT P.product_name, P.product_color FROM Products P WHERE EXISTS (SELECT 1 FROM Order_Items OI JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE OI.product_id = P.product_id)",
          "SELECT DISTINCT product_name, product_color FROM Products, Order_Items, Shipment_Items WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'female')))",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'",
          "SELECT DISTINCT name, price, description FROM (SELECT product_name AS name, product_price AS price, product_description AS description, Customers.gender_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id) AS SubQuery WHERE gender_code = 'female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'",
          "SELECT DISTINCT P.product_name AS Name, P.product_price AS Price, P.product_description AS Description FROM Products P, Order_Items OI, Orders O, Customers C WHERE P.product_id = OI.product_id AND OI.order_id = O.order_id AND O.customer_id = C.customer_id AND C.gender_code = 'female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female' AND Order_Items.product_id = Products.product_id)",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN (SELECT product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'female')) AS FilteredProducts ON Products.product_id = FilteredProducts.product_id",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT Order_Items.product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female')",
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id LEFT JOIN Orders O ON OI.order_id = O.order_id LEFT JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'female'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE gender_code = 'female')))",
          "SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'",
          "SELECT DISTINCT name, price, description FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.gender_code = 'female'",
          "SELECT DISTINCT P.product_name AS Name, P.product_price AS Price, P.product_description AS Description FROM Products P, Order_Items OI, Orders O, Customers C WHERE P.product_id = OI.product_id AND OI.order_id = O.order_id AND O.customer_id = C.customer_id AND C.gender_code = 'female'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'",
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'F'",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female' AND Order_Items.product_id = Products.product_id)",
          "SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'female' ORDER BY P.product_name",
          "SELECT DISTINCT product_name, product_price, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female')"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT invoice_status_code FROM Invoices WHERE order_id NOT IN (SELECT order_id FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I LEFT JOIN Shipments S ON I.order_id = S.order_id WHERE S.order_id IS NULL",
          "SELECT invoice_status_code FROM Invoices WHERE order_id NOT IN (SELECT DISTINCT order_id FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I WHERE NOT EXISTS (SELECT 1 FROM Shipments S WHERE S.order_id = I.order_id)",
          "SELECT invoice_status_code FROM Invoices EXCEPT SELECT invoice_status_code FROM Invoices JOIN Shipments ON Invoices.order_id = Shipments.order_id",
          "SELECT invoice_status_code FROM Invoices AS I WHERE I.order_id NOT IN (SELECT order_id FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I WHERE I.order_id NOT IN (SELECT S.order_id FROM Shipments S)",
          "SELECT invoice_status_code FROM Invoices WHERE order_id NOT IN (SELECT order_id FROM Shipments WHERE shipment_id IS NOT NULL)",
          "SELECT DISTINCT invoice_status_code FROM Invoices WHERE order_id NOT IN (SELECT order_id FROM Shipments)",
          "SELECT invoice_status_code FROM Invoices WHERE NOT EXISTS (SELECT order_id FROM Shipments WHERE Shipments.order_id = Invoices.order_id)"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Orders WHERE order_id NOT IN (SELECT order_id FROM Shipments))",
          "SELECT I.invoice_status_code FROM Invoices I JOIN Orders O ON I.invoice_number = O.invoice_number LEFT JOIN Shipments S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL",
          "SELECT DISTINCT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT O.invoice_number FROM Orders O LEFT JOIN Shipments S ON O.order_id = S.order_id WHERE S.shipment_id IS NULL)",
          "SELECT I.invoice_status_code FROM Invoices I WHERE NOT EXISTS (SELECT 1 FROM Shipments S JOIN Orders O ON S.order_id = O.order_id WHERE O.invoice_number = I.invoice_number)",
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT O.invoice_number FROM Orders O WHERE NOT EXISTS (SELECT 1 FROM Shipments S WHERE S.order_id = O.order_id))",
          "SELECT I.invoice_status_code FROM Invoices I WHERE I.invoice_number IN (SELECT O.invoice_number FROM Orders O WHERE O.order_id NOT IN (SELECT S.order_id FROM Shipments S))",
          "SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Orders EXCEPT SELECT order_id FROM Shipments)",
          "SELECT I.invoice_status_code FROM Invoices I INNER JOIN Orders O ON I.invoice_number = O.invoice_number WHERE O.order_id NOT IN (SELECT order_id FROM Shipments)",
          "SELECT invoice_status_code FROM Invoices WHERE EXISTS (SELECT * FROM Orders WHERE Orders.invoice_number = Invoices.invoice_number AND Orders.order_id NOT IN (SELECT order_id FROM Shipments))",
          "SELECT invoice_status_code FROM Invoices I WHERE NOT EXISTS (SELECT * FROM Shipments S WHERE S.invoice_number = I.invoice_number)"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed, SUM(P.product_price * OI.product_quantity) AS total_cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price * product_quantity) AS total_cost FROM Orders JOIN Order_Items USING(order_id) JOIN Products USING(product_id) GROUP BY order_id, date_order_placed",
          "SELECT a.order_id, a.date_order_placed, SUM(b.product_price * b.product_quantity) AS total_cost FROM Orders a, Order_Items b, Products c WHERE a.order_id = b.order_id AND b.product_id = c.product_id GROUP BY a.order_id, a.date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price * Order_Items.product_quantity) AS TotalCost FROM Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT o.order_id, o.date_order_placed, SUM(p.product_price * oi.product_quantity) AS total_cost FROM Orders o INNER JOIN Order_Items oi ON o.order_id = oi.order_id INNER JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price * product_quantity) AS total_cost FROM Orders NATURAL JOIN Order_Items NATURAL JOIN Products GROUP BY order_id, date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price * product_quantity) AS total_cost FROM (SELECT * FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id) AS OrderDetails JOIN Products ON OrderDetails.product_id = Products.product_id GROUP BY order_id, date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price * Order_Items.product_quantity) AS total_cost FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(product_price * product_quantity) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed, SUM(Products.product_price * Order_Items.product_quantity) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed"
        ]
      ]
    },
    {
      "id": 77,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.order_id, O.date_order_placed, SUM(I.amount) AS total_paid FROM Orders O JOIN Invoices I ON O.order_id = I.order_id WHERE I.invoice_status_code IN ('Paid', 'Completed') GROUP BY O.order_id, O.date_order_placed",
          "SELECT order_id, date_order_placed, SUM(amount) AS total_amount_paid FROM Orders JOIN Invoices ON Orders.order_id = Invoices.order_id WHERE invoice_status_code IN ('Paid', 'Completed') GROUP BY order_id, date_order_placed",
          "SELECT Orders.order_id, Orders.date_order_placed, SUM(Invoices.amount) FROM Orders INNER JOIN Invoices ON Orders.order_id = Invoices.order_id WHERE Invoices.invoice_status_code = 'Paid' OR Invoices.invoice_status_code = 'Completed' GROUP BY Orders.order_id, Orders.date_order_placed",
          "SELECT o.order_id, o.date_order_placed, SUM(i.amount) AS TotalPaid FROM Orders o, Invoices i WHERE o.order_id = i.order_id AND i.invoice_status_code IN ('Paid', 'Completed') GROUP BY o.order_id, o.date_order_placed",
          "SELECT a.order_id, a.date_order_placed, SUM(b.amount) AS total_paid FROM Orders a LEFT JOIN Invoices b ON a.order_id = b.order_id WHERE b.invoice_status_code = 'Paid' OR b.invoice_status_code = 'Completed' GROUP BY a.order_id, a.date_order_placed",
          "SELECT order_id, date_order_placed, total_amount FROM (SELECT Orders.order_id, Orders.date_order_placed, Invoices.amount FROM Orders JOIN Invoices ON Orders.order_id = Invoices.order_id WHERE Invoices.invoice_status_code IN ('Paid', 'Completed')) AS SubQuery GROUP BY order_id, date_order_placed",
          "SELECT order_id, date_order_placed, SUM(amount) AS total_paid FROM Orders INNER JOIN Invoices ON Orders.order_id = Invoices.order_id WHERE invoice_status_code = 'Paid' OR invoice_status_code = 'Completed' GROUP BY order_id, date_order_placed",
          "SELECT DISTINCT Orders.order_id, Orders.date_order_placed, (SELECT SUM(amount) FROM Invoices WHERE Invoices.order_id = Orders.order_id AND invoice_status_code IN ('Paid', 'Completed')) AS total_paid FROM Orders",
          "SELECT order_id, date_order_placed, SUM(amount) AS total_paid FROM Orders o JOIN Invoices i ON o.order_id = i.order_id WHERE i.invoice_status_code IN ('Paid', 'Completed') GROUP BY order_id, date_order_placed",
          "SELECT o.order_id, o.date_order_placed, SUM(i.amount) AS total_paid FROM Orders o INNER JOIN Invoices i ON o.order_id = i.order_id WHERE i.invoice_status_code IN ('Paid', 'Completed') GROUP BY o.order_id, o.date_order_placed"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS UniqueCustomers",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id",
          "SELECT COUNT(UNIQUE customer_id) FROM Orders",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id)",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Orders GROUP BY customer_id) AS DistinctCustomers",
          "SELECT COUNT(DISTINCT Orders.customer_id) FROM Orders",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers c WHERE c.customer_id IN (SELECT o.customer_id FROM Orders o)"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Orders",
          "SELECT COUNT(UNIQUE customer_id) FROM Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT Orders.customer_id) FROM Orders",
          "SELECT COUNT(DISTINCT O.customer_id) FROM Orders O",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Orders GROUP BY customer_id) AS distinct_customers",
          "SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Orders",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders WHERE customer_id > 0",
          "SELECT COUNT(DISTINCT customer_id) FROM Orders ORDER BY customer_id"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
          "SELECT COUNT(UNIQUE order_item_status_code) FROM Order_Items",
          "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)",
          "SELECT COUNT(DISTINCT order_item_status_code) AS NumberOfItemStates FROM Order_Items",
          "SELECT DISTINCT COUNT(order_item_status_code) FROM Order_Items",
          "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM Order_Items GROUP BY order_item_status_code)",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items WHERE order_item_status_code IS NOT NULL",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items GROUP BY order_item_status_code",
          "SELECT COUNT(DISTINCT O.order_item_status_code) FROM Order_Items O",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items ORDER BY order_item_status_code"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items",
          "SELECT COUNT(UNIQUE order_item_status_code) FROM Order_Items",
          "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)",
          "SELECT COUNT(DISTINCT order_item_status_code) AS distinct_status_codes FROM Order_Items",
          "SELECT DISTINCT COUNT(order_item_status_code) FROM Order_Items",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items GROUP BY order_item_status_code",
          "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM Order_Items GROUP BY order_item_status_code)",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items WHERE order_item_status_code IS NOT NULL",
          "SELECT DISTINCT COUNT(*) OVER (PARTITION BY order_item_status_code) FROM Order_Items",
          "SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items ORDER BY order_item_status_code"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(UNIQUE payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)",
          "SELECT COUNT(payment_method_code) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods AS PM)",
          "SELECT DISTINCT COUNT(payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(DISTINCT payment_method_code) AS NumberOfPaymentMethods FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code)",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods GROUP BY payment_method_code",
          "SELECT COUNT(payment_method_code) FROM Customer_Payment_Methods GROUP BY payment_method_code",
          "SELECT DISTINCT COUNT(*) FROM (SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code)"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(UNIQUE payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)",
          "SELECT COUNT(payment_method_code) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)",
          "SELECT DISTINCT COUNT(payment_method_code) FROM Customer_Payment_Methods",
          "SELECT COUNT(DISTINCT payment_method_code) AS NumberOfPaymentMethods FROM Customer_Payment_Methods",
          "SELECT COUNT(*) FROM (SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code)",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods WHERE payment_method_code IS NOT NULL",
          "SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods GROUP BY payment_method_code",
          "SELECT DISTINCT COUNT(*) OVER () FROM Customer_Payment_Methods GROUP BY payment_method_code"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%%'",
          "SELECT login_name, login_password FROM Customers WHERE LEFT(phone_number, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE SUBSTRING(phone_number, 1, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE CONCAT('+12', '%')",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' ESCAPE '+'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number IS NOT NULL",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND LENGTH(phone_number) > 3",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number <> ''",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number IS NOT NULL AND phone_number <> ''"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%%'",
          "SELECT login_name, login_password FROM Customers WHERE LEFT(phone_number, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE SUBSTRING(phone_number, 1, 3) = '+12'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE CONCAT('+12', '%')",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' ESCAPE '+'",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number IS NOT NULL",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND LENGTH(phone_number) > 2",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number <> ''",
          "SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND phone_number IS NOT NULL AND phone_number <> ''"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT DISTINCT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name CONTAINS 'Dell'",
          "SELECT product_size FROM Products WHERE INSTR(product_name, 'Dell') > 0",
          "SELECT P.product_size FROM Products P WHERE P.product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name ILIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE LOWER(product_name) LIKE LOWER('%Dell%')",
          "SELECT DISTINCT P.product_size FROM Products P WHERE P.product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE CHARINDEX('Dell', product_name) > 0",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' ORDER BY product_size"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT DISTINCT product_size FROM Products WHERE product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE product_name CONTAINS 'Dell'",
          "SELECT product_size FROM Products WHERE INSTR(product_name, 'Dell') > 0",
          "SELECT Products.product_size FROM Products WHERE Products.product_name LIKE '%Dell%'",
          "SELECT p.product_size FROM Products p WHERE p.product_name LIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE LOWER(product_name) LIKE '%dell%'",
          "SELECT product_size FROM Products WHERE product_name ILIKE '%Dell%'",
          "SELECT product_size FROM Products WHERE CHARINDEX('Dell', product_name) > 0",
          "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' ORDER BY product_size"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT P.product_price, P.product_size FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products AS P)",
          "SELECT P.product_price, P.product_size FROM Products AS P WHERE P.product_price > (SELECT AVG(P2.product_price) FROM Products AS P2)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_id)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_size)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price > 0)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_size IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT P.product_price, P.product_size FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products AS P)",
          "SELECT P.product_price, P.product_size FROM Products AS P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_id)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P GROUP BY P.product_id)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products P GROUP BY P.product_id)",
          "SELECT P.product_price, P.product_size FROM Products P WHERE P.product_price > (SELECT AVG(P.product_price) FROM Products P GROUP BY P.product_id)",
          "SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products P)"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT COUNT(product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items O WHERE O.product_id = P.product_id)",
          "SELECT COUNT(product_id) FROM Products WHERE NOT EXISTS (SELECT NULL FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT COUNT(DISTINCT P.product_id) FROM Products P LEFT JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Products P WHERE P.product_id NOT IN (SELECT O.product_id FROM Order_Items O)",
          "SELECT COUNT(*) FROM (SELECT product_id FROM Products EXCEPT SELECT product_id FROM Order_Items) AS UnsoldProducts",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE product_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(product_id) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items O WHERE O.product_id = P.product_id)",
          "SELECT COUNT(product_id) AS UnorderedProducts FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE product_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Products P LEFT JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL",
          "SELECT COUNT(*) FROM Products WHERE NOT EXISTS (SELECT product_id FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT COUNT(*) FROM Products P WHERE P.product_id NOT IN (SELECT O.product_id FROM Order_Items O)",
          "SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id)"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers AS C WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods AS P WHERE P.customer_id = C.customer_id)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers C LEFT JOIN Customer_Payment_Methods P ON C.customer_id = P.customer_id WHERE P.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT * FROM Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT EXISTS (SELECT customer_id FROM Customer_Payment_Methods WHERE Customers.customer_id = Customer_Payment_Methods.customer_id)",
          "SELECT COUNT(*) FROM Customers C WHERE C.customer_id NOT IN (SELECT P.customer_id FROM Customer_Payment_Methods P)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods WHERE customer_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers LEFT JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customer_Payment_Methods.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods WHERE Customer_Payment_Methods.customer_id = Customers.customer_id)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Payment_Methods p WHERE p.customer_id = c.customer_id)",
          "SELECT COUNT(*) FROM Customers AS c WHERE c.customer_id NOT IN (SELECT p.customer_id FROM Customer_Payment_Methods AS p)",
          "SELECT COUNT(1) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)",
          "SELECT COUNT(*) FROM Customers c WHERE c.customer_id NOT IN (SELECT p.customer_id FROM Customer_Payment_Methods p)",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id WHERE p.customer_id IS NULL",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Payment_Methods) AS subquery"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code, date_order_placed FROM Orders",
          "SELECT DISTINCT order_status_code, date_order_placed FROM Orders",
          "SELECT Orders.order_status_code, Orders.date_order_placed FROM Orders",
          "SELECT order_status_code AS Status, date_order_placed AS Date FROM Orders",
          "SELECT o.order_status_code, o.date_order_placed FROM Orders o",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY date_order_placed",
          "SELECT * FROM Orders ORDER BY order_status_code, date_order_placed",
          "SELECT order_status_code, date_order_placed FROM Orders GROUP BY order_status_code, date_order_placed",
          "SELECT DISTINCT o.order_status_code, o.date_order_placed FROM Orders o",
          "SELECT order_status_code, date_order_placed FROM Orders WHERE order_status_code IS NOT NULL AND date_order_placed IS NOT NULL"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code, date_order_placed FROM Orders",
          "SELECT Orders.order_status_code, Orders.date_order_placed FROM Orders",
          "SELECT o.order_status_code, o.date_order_placed FROM Orders o",
          "SELECT order_status_code AS Status, date_order_placed AS Date FROM Orders",
          "SELECT DISTINCT order_status_code, date_order_placed FROM Orders",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY date_order_placed",
          "SELECT * FROM Orders WHERE order_status_code IS NOT NULL AND date_order_placed IS NOT NULL",
          "SELECT order_status_code, date_order_placed FROM Orders WHERE order_status_code IS NOT NULL",
          "SELECT order_status_code, date_order_placed FROM Orders GROUP BY order_status_code, date_order_placed",
          "SELECT order_status_code, date_order_placed FROM Orders ORDER BY order_status_code, date_order_placed DESC"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'",
          "SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'USA'",
          "SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'USA'",
          "SELECT address_line_1 AS Address, town_city AS Town, county AS County FROM Customers WHERE country = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' ORDER BY town_city",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' AND address_line_1 IS NOT NULL",
          "SELECT DISTINCT address_line_1, town_city, county FROM Customers WHERE country = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE UPPER(country) = 'USA'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA' GROUP BY address_line_1, town_city, county"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States'",
          "SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'United States'",
          "SELECT address_line_1 AS Address, town_city AS City, county AS County FROM Customers WHERE country = 'United States'",
          "SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'United States'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'United States'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'US'",
          "SELECT * FROM Customers WHERE country = 'United States' AND address_line_1 IS NOT NULL",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States' ORDER BY town_city",
          "SELECT DISTINCT address_line_1, town_city, county FROM Customers WHERE country = 'United States'",
          "SELECT address_line_1, town_city, county FROM Customers WHERE country IN ('United States')"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT first_name, name FROM (SELECT customer_first_name AS first_name, customer_id FROM Customers) AS C JOIN (SELECT product_name AS name, product_id FROM Products) AS P ON C.customer_id IN (SELECT customer_id FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = P.product_id))",
          "SELECT DISTINCT Customers.customer_first_name AS BuyerFirstName, Products.product_name AS ProductName FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT C.customer_first_name AS Buyer, P.product_name AS Product FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id",
          "SELECT first_name, product_name FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products USING (product_id)",
          "SELECT customer_first_name, product_name FROM Customers CROSS JOIN Products WHERE EXISTS (SELECT 1 FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id WHERE Orders.customer_id = Customers.customer_id AND Order_Items.product_id = Products.product_id)",
          "SELECT C.customer_first_name, P.product_name FROM Customers C CROSS JOIN Products P WHERE C.customer_id IN (SELECT customer_id FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = P.product_id))",
          "SELECT buyer, product FROM (SELECT customer_first_name AS buyer FROM Customers) C JOIN (SELECT product_name AS product FROM Products) P ON EXISTS (SELECT * FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id AND OI.product_id = P.product_id)",
          "SELECT C.customer_first_name AS FirstName, P.product_name AS ProductName FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id LEFT JOIN Order_Items OI ON O.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id",
          "SELECT first_name, name FROM (SELECT customer_first_name AS first_name, customer_id FROM Customers) AS C JOIN (SELECT product_name AS name, product_id FROM Products) AS P ON C.customer_id = P.product_id",
          "SELECT Customers.customer_first_name AS BuyerFirstName, Products.product_name AS ProductPurchased FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id",
          "SELECT DISTINCT customer_first_name, product_name FROM Customers JOIN Orders USING (customer_id) JOIN Order_Items USING (order_id) JOIN Products USING (product_id)",
          "SELECT C.customer_first_name AS FirstName, P.product_name AS ProductName FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id",
          "SELECT first_name, product FROM (SELECT customer_first_name AS first_name, customer_id FROM Customers) C JOIN (SELECT product_name AS product, product_id FROM Products) P ON C.customer_id = P.product_id",
          "SELECT customer_first_name, product_name FROM Customers CROSS JOIN Products ON Customers.customer_id = Products.product_id WHERE EXISTS (SELECT 1 FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id WHERE Orders.customer_id = Customers.customer_id AND Order_Items.product_id = Products.product_id)",
          "SELECT A.customer_first_name, B.product_name FROM Customers A LEFT JOIN (Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id) B ON A.customer_id = B.customer_id",
          "SELECT first_name, product_name FROM Customers LEFT JOIN (Orders INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id) ON Customers.customer_id = Orders.customer_id"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Shipment_Items",
          "SELECT COUNT(order_item_id) FROM Shipment_Items",
          "SELECT COUNT(*) AS TotalShippedItems FROM Shipment_Items",
          "SELECT COUNT(order_item_id) AS ShippedItemCount FROM Shipment_Items",
          "SELECT COUNT(*) FROM Shipment_Items WHERE order_item_id IS NOT NULL",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items",
          "SELECT COUNT(DISTINCT order_item_id) AS UniqueShippedItems FROM Shipment_Items",
          "SELECT COUNT(order_item_id) FROM Shipment_Items WHERE order_item_id > 0",
          "SELECT COUNT(*) FROM Shipment_Items WHERE order_item_id IN (SELECT order_item_id FROM Order_Items)",
          "SELECT COUNT(*) AS TotalItemsShipped FROM Shipment_Items WHERE order_item_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT order_item_id) AS shipped_products_count FROM Shipment_Items",
          "SELECT COUNT(DISTINCT si.order_item_id) AS total_shipped FROM Shipment_Items si",
          "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_id FROM Shipment_Items) AS unique_shipments",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items WHERE order_item_id IS NOT NULL",
          "SELECT COUNT(DISTINCT Shipment_Items.order_item_id) FROM Shipment_Items",
          "SELECT COUNT(UNIQUE order_item_id) FROM Shipment_Items",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id",
          "SELECT COUNT(*) FROM (SELECT order_item_id FROM Shipment_Items GROUP BY order_item_id) AS shipped_items",
          "SELECT COUNT(DISTINCT order_item_id) FROM Shipment_Items WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Shipment_Items.order_item_id = Order_Items.order_item_id)",
          "SELECT COUNT(DISTINCT si.order_item_id) FROM Shipment_Items si INNER JOIN Order_Items oi ON si.order_item_id = oi.order_item_id"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) AS AveragePrice FROM Products",
          "SELECT AVG(product_price) FROM Products",
          "SELECT AVG(Products.product_price) AS AveragePrice FROM Products",
          "SELECT AVG(p.product_price) FROM Products p",
          "SELECT AVG(p.product_price) AS AveragePrice FROM Products p",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL",
          "SELECT AVG(product_price) AS Average_Price FROM Products",
          "SELECT AVG(product_price) AS AvgPrice FROM Products",
          "SELECT AVG(product_price) FROM Products WHERE product_price > 0",
          "SELECT AVG(product_price) AS AverageProductPrice FROM Products"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products",
          "SELECT AVG(product_price) AS AveragePrice FROM Products",
          "SELECT AVG(Products.product_price) FROM Products",
          "SELECT AVG(Products.product_price) AS Average_Product_Price FROM Products",
          "SELECT AVG(p.product_price) FROM Products p",
          "SELECT AVG(p.product_price) AS AveragePrice FROM Products p",
          "SELECT AVG(product_price) FROM Products GROUP BY product_id",
          "SELECT AVG(product_price) AS AverageCost FROM Products",
          "SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL",
          "SELECT AVG(product_price) AS AvgPrice FROM Products WHERE product_price > 0"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(P.product_price) AS AveragePrice FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
          "SELECT AVG(product_price) AS AvgPrice FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(Products.product_price) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id",
          "SELECT AVG(product_price) FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT AVG(product_price) FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id",
          "SELECT AVG(P.product_price) FROM Products P, Order_Items OI WHERE P.product_id = OI.product_id",
          "SELECT AVG(product_price) FROM (SELECT product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id) AS SubQuery",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT AVG(P.product_price) FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.product_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT AVG(P.product_price) AS average_price FROM Products P JOIN Order_Items O ON P.product_id = O.product_id",
          "SELECT AVG(product_price) FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items)",
          "SELECT AVG(product_price) AS AvgPrice FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT AVG(Products.product_price) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id",
          "SELECT AVG(product_price) FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)",
          "SELECT AVG(P.product_price) FROM Products P WHERE P.product_id IN (SELECT product_id FROM Order_Items)",
          "SELECT AVG(product_price) FROM (SELECT product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id) AS OrderedProducts",
          "SELECT AVG(product_price) FROM Products JOIN Order_Items USING (product_id)",
          "SELECT AVG(product_price) FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id",
          "SELECT AVG(P.product_price) FROM Products P, Order_Items O WHERE P.product_id = O.product_id"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT TOP 1 gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(gender_code))",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C JOIN (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1) G ON C.gender_code = G.gender_code",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers GROUP BY gender_code))",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) AS cnt FROM Customers GROUP BY gender_code ORDER BY cnt ASC) AS subquery LIMIT 1)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers WHERE gender_code = C.gender_code GROUP BY gender_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers GROUP BY gender_code))",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code = (SELECT gender_code FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code IN (SELECT gender_code FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1)",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT TOP 1 gender_code FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(*) ASC)",
          "WITH GenderOrderCounts AS (SELECT gender_code, COUNT(*) AS order_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code) SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM GenderOrderCounts ORDER BY order_count ASC LIMIT 1)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C JOIN (SELECT gender_code FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1) G ON C.gender_code = G.gender_code",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) AS num_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code) AS OrderCounts ORDER BY num_orders ASC LIMIT 1)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE C.gender_code = (SELECT gender_code FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code HAVING COUNT(Orders.order_id) = (SELECT MIN(order_count) FROM (SELECT COUNT(Orders.order_id) AS order_count FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code) AS SubQuery))",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1)",
          "SELECT C.email_address, C.town_city, C.county FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id GROUP BY C.gender_code HAVING COUNT(O.order_id) = (SELECT MIN(order_count) FROM (SELECT COUNT(*) AS order_count FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY Customers.gender_code) AS Counts))",
          "SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O JOIN Customer_Payment_Methods CPM ON O.customer_id = CPM.customer_id GROUP BY O.customer_id HAVING COUNT(CPM.payment_method_code) >= 2",
          "SELECT O.date_order_placed FROM Orders O WHERE EXISTS (SELECT 1 FROM Customer_Payment_Methods CPM WHERE CPM.customer_id = O.customer_id GROUP BY CPM.customer_id HAVING COUNT(CPM.payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)",
          "SELECT Orders.date_order_placed FROM Orders INNER JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) AS SubQuery ON Orders.customer_id = SubQuery.customer_id",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT customer_id FROM Customer_Payment_Methods WHERE Orders.customer_id = Customer_Payment_Methods.customer_id GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O INNER JOIN Customer_Payment_Methods CPM ON O.customer_id = CPM.customer_id GROUP BY O.customer_id, O.date_order_placed HAVING COUNT(CPM.payment_method_code) >= 2",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) ORDER BY date_order_placed"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT C.customer_id FROM Customer_Payment_Methods C GROUP BY C.customer_id HAVING COUNT(C.payment_method_code) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT Orders.date_order_placed FROM Orders JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) AS SubQuery ON Orders.customer_id = SubQuery.customer_id",
          "SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT 1 FROM Customer_Payment_Methods WHERE Customer_Payment_Methods.customer_id = Orders.customer_id GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O INNER JOIN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) CPM ON O.customer_id = CPM.customer_id",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)",
          "SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)",
          "SELECT Orders.date_order_placed FROM Orders JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id GROUP BY Orders.customer_id, Orders.date_order_placed HAVING COUNT(Customer_Payment_Methods.payment_method_code) >= 2",
          "SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) ORDER BY date_order_placed"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Orders GROUP BY order_status_code) as counts)",
          "WITH StatusFrequency AS (SELECT order_status_code, COUNT(*) AS Frequency FROM Orders GROUP BY order_status_code) SELECT order_status_code FROM StatusFrequency WHERE Frequency = (SELECT MIN(Frequency) FROM StatusFrequency)",
          "SELECT TOP 1 order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*)",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(*) as count FROM Orders GROUP BY order_status_code ORDER BY count ASC LIMIT 1",
          "SELECT order_status_code FROM (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(*) ASC) as rank FROM Orders GROUP BY order_status_code) sub WHERE rank = 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1 OFFSET 0 ROWS",
          "SELECT order_status_code, COUNT(*) AS TotalOrders FROM Orders GROUP BY order_status_code ORDER BY TotalOrders ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Orders GROUP BY order_status_code)"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT order_status_code, COUNT(*) AS frequency FROM Orders GROUP BY order_status_code ORDER BY frequency ASC LIMIT 1",
          "SELECT TOP 1 order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Orders GROUP BY order_status_code) AS counts)",
          "WITH OrderCounts AS (SELECT order_status_code, COUNT(*) AS Count FROM Orders GROUP BY order_status_code) SELECT order_status_code FROM OrderCounts WHERE Count = (SELECT MIN(Count) FROM OrderCounts)",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code), order_status_code ASC LIMIT 1",
          "SELECT order_status_code, MIN(count) FROM (SELECT order_status_code, COUNT(*) AS count FROM Orders GROUP BY order_status_code) AS OrderStatusCounts GROUP BY order_status_code ORDER BY count ASC LIMIT 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code FROM (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(*) ASC) AS rank FROM Orders GROUP BY order_status_code) WHERE rank = 1",
          "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_description HAVING COUNT(OI.product_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)",
          "SELECT Products.product_id, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.product_id) > 3",
          "SELECT p.product_id, p.product_description FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(oi.product_id) > 3)",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) > 3)",
          "SELECT DISTINCT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.product_id) > 3",
          "SELECT p.product_id, p.product_description FROM Products p, Order_Items oi WHERE p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.product_id) > 3",
          "SELECT p.product_id, p.product_description FROM Products p JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3) AS sub ON p.product_id = sub.product_id",
          "SELECT p.product_id, p.product_description FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(*) > 3)",
          "SELECT product_id, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_description HAVING COUNT(Order_Items.product_id) > 3"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_description HAVING COUNT(OI.product_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)",
          "SELECT Products.product_id, Products.product_description FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id HAVING COUNT(Order_Items.product_id) > 3",
          "SELECT p.product_id, p.product_description FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(oi.product_id) > 3)",
          "SELECT DISTINCT p.product_id, p.product_description FROM Products p, Order_Items oi WHERE p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.product_id) > 3",
          "SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) > 3)",
          "SELECT p.product_id, p.product_description FROM Products p JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3) AS sub ON p.product_id = sub.product_id",
          "SELECT product_id, product_description FROM Products WHERE EXISTS (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(product_id) > 3 AND product_id = Products.product_id)",
          "SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.product_id) > 3",
          "SELECT Products.product_id, Products.product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id, Products.product_description HAVING COUNT(Order_Items.product_id) > 3"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE EXISTS (SELECT 1 FROM Shipments S WHERE S.invoice_number = I.invoice_number GROUP BY S.invoice_number HAVING COUNT(*) >= 2)",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I INNER JOIN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2) S ON I.invoice_number = S.invoice_number",
          "SELECT DISTINCT I.invoice_date, I.invoice_number FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(S.shipment_id) >= 2",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE (SELECT COUNT(*) FROM Shipments S WHERE S.invoice_number = I.invoice_number) >= 2",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(DISTINCT S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(DISTINCT shipment_id) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE I.invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE (SELECT COUNT(*) FROM Shipments S WHERE S.invoice_number = I.invoice_number) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I INNER JOIN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2) S ON I.invoice_number = S.invoice_number",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(S.shipment_id) >= 2",
          "SELECT invoice_date, invoice_number FROM Invoices WHERE EXISTS (SELECT 1 FROM Shipments WHERE Shipments.invoice_number = Invoices.invoice_number GROUP BY invoice_number HAVING COUNT(*) >= 2)",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE I.invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(DISTINCT shipment_id) >= 2)",
          "SELECT DISTINCT I.invoice_date, I.invoice_number FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(*) >= 2",
          "SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE (SELECT COUNT(S.shipment_id) FROM Shipments S WHERE S.invoice_number = I.invoice_number) >= 2"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT Shipments.shipment_tracking_number, Shipments.shipment_date FROM Shipments",
          "SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s",
          "SELECT shipment_date, shipment_tracking_number FROM Shipments",
          "SELECT shipment_tracking_number AS TrackingNumber, shipment_date AS Date FROM Shipments",
          "SELECT * FROM Shipments SELECT shipment_tracking_number, shipment_date",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments ORDER BY shipment_date",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL",
          "SELECT DISTINCT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments GROUP BY shipment_tracking_number, shipment_date"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s",
          "SELECT Shipments.shipment_tracking_number AS TrackingNumber, Shipments.shipment_date AS Date FROM Shipments",
          "SELECT shipment_tracking_number AS TrackingNumber, shipment_date AS Date FROM Shipments",
          "SELECT DISTINCT shipment_tracking_number, shipment_date FROM Shipments",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments ORDER BY shipment_date",
          "SELECT shipment_tracking_number, shipment_date FROM Shipments ORDER BY shipment_tracking_number",
          "SELECT * FROM Shipments SELECT shipment_tracking_number, shipment_date",
          "SELECT shipment_date, shipment_tracking_number FROM Shipments",
          "SELECT Shipments.shipment_tracking_number, Shipments.shipment_date FROM Shipments ORDER BY Shipments.shipment_date DESC"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT color, description, size FROM Products WHERE price < (SELECT MAX(price) FROM Products)",
          "SELECT product_color AS Color, product_description AS Description, product_size AS Size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT * FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products) SELECT product_color, product_description, product_size",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < ALL (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price IN (SELECT product_price FROM Products GROUP BY product_price HAVING product_price < MAX(product_price))",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products WHERE product_price > 0)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products EXCEPT SELECT MIN(product_price) FROM Products)"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "e_commerce",
      "infer_predictions": [
        [
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)",
          "SELECT color, description, size FROM Products WHERE price < (SELECT MAX(price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price NOT IN (SELECT MAX(product_price) FROM Products)",
          "SELECT P.product_color, P.product_description, P.product_size FROM Products AS P WHERE P.product_price < (SELECT MAX(P2.product_price) FROM Products P2)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price != (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < ALL (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE NOT product_price = (SELECT MAX(product_price) FROM Products)",
          "SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products WHERE product_price IS NOT NULL)",
          "SELECT color AS product_color, description AS product_description, size AS product_size FROM Products WHERE price < (SELECT MAX(price) FROM Products)"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director)",
          "SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director AS d)",
          "SELECT director.Name FROM director WHERE director.Age > (SELECT AVG(director.Age) FROM director)",
          "SELECT d.Name FROM director AS d WHERE d.Age > (SELECT AVG(Age) FROM director AS sub)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director GROUP BY Age)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(d.Age) FROM director d)",
          "SELECT Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director d1)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director d GROUP BY d.Age)",
          "SELECT Name FROM director WHERE Age > (SELECT AVG(d.Age) FROM director d WHERE d.Age IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director)",
          "SELECT Name FROM director ORDER BY Age DESC LIMIT 1",
          "SELECT TOP 1 Name FROM director ORDER BY Age DESC",
          "SELECT d.Name FROM director d WHERE d.Age = (SELECT MAX(Age) FROM director)",
          "SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director LIMIT 1)",
          "SELECT Name FROM (SELECT Name, Age FROM director ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM director WHERE Age IN (SELECT MAX(Age) FROM director)",
          "SELECT Name FROM director ORDER BY Age DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM director AS d WHERE d.Age = (SELECT MAX(Age) FROM director AS sub)",
          "SELECT FIRST(Name) FROM director ORDER BY Age DESC"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(Channel_ID) FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(*) AS NumberOfChannels FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(DISTINCT Channel_ID) FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE LOWER(Internet) LIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE Internet ILIKE '%bbc%'",
          "SELECT COUNT(Channel_ID) AS TotalChannels FROM channel WHERE Internet LIKE '%bbc%'",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' COLLATE NOCASE",
          "SELECT COUNT(*) FROM channel WHERE POSITION('bbc' IN Internet) > 0",
          "SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' ESCAPE ''"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(UNIQUE Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Digital_terrestrial_channel FROM channel) AS unique_channels",
          "SELECT COUNT(DISTINCT channel.Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) AS NumberOfUniqueChannels FROM channel",
          "SELECT COUNT(*) FROM (SELECT Digital_terrestrial_channel FROM channel GROUP BY Digital_terrestrial_channel) AS distinct_channels",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel IS NOT NULL",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel <> ''",
          "SELECT DISTINCT COUNT(Digital_terrestrial_channel) FROM channel",
          "SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel GROUP BY Digital_terrestrial_channel HAVING Digital_terrestrial_channel IS NOT NULL"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Title FROM program ORDER BY Start_Year DESC",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC",
          "SELECT p.Title FROM program p ORDER BY p.Start_Year DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESCENDING",
          "SELECT program.Title FROM program ORDER BY Start_Year DESCENDING",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Title ASC",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Title",
          "SELECT p.Title FROM program AS p ORDER BY p.Start_Year DESC",
          "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT ALL",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Title DESC"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT D.Name FROM director D JOIN program P ON D.Director_ID = P.Director_ID GROUP BY D.Director_ID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT director.Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY COUNT(program.Program_ID) DESC LIMIT 1",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(Program_ID) DESC LIMIT 1)",
          "SELECT TOP 1 director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Name ORDER BY COUNT(program.Program_ID) DESC",
          "SELECT Name FROM (SELECT director.Name, COUNT(program.Program_ID) AS NumPrograms FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Name) AS Result ORDER BY NumPrograms DESC LIMIT 1",
          "SELECT director.Name FROM director, program WHERE director.Director_ID = program.Director_ID GROUP BY director.Director_ID HAVING COUNT(program.Program_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(program.Program_ID) AS Count FROM program GROUP BY Director_ID) AS SubQuery)",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Name FROM director d, program p WHERE d.Director_ID = p.Director_ID GROUP BY d.Director_ID, d.Name ORDER BY COUNT(p.Program_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM (SELECT Director_ID, COUNT(*) AS TotalPrograms FROM program GROUP BY Director_ID ORDER BY TotalPrograms DESC) AS TempTable LIMIT 1)",
          "SELECT d.Name FROM director d INNER JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID HAVING COUNT(p.Program_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Program_ID) AS Count FROM program GROUP BY Director_ID) AS Counts)"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT D.Name, D.Age FROM director D WHERE D.Director_ID = (SELECT P.Director_ID FROM program P GROUP BY P.Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT director.Name, director.Age FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY COUNT(program.Program_ID) DESC LIMIT 1",
          "SELECT Name, Age FROM director WHERE Director_ID IN (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(Program_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Program_ID) AS cnt FROM program GROUP BY Director_ID) tmp))",
          "SELECT D.Name, D.Age FROM director D INNER JOIN (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1) AS P ON D.Director_ID = P.Director_ID",
          "SELECT Name, Age FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT D.Name, D.Age FROM director D, (SELECT Director_ID, COUNT(*) AS TotalPrograms FROM program GROUP BY Director_ID) AS P WHERE D.Director_ID = P.Director_ID AND P.TotalPrograms = (SELECT MAX(TotalPrograms) FROM (SELECT COUNT(*) AS TotalPrograms FROM program GROUP BY Director_ID) AS subquery)",
          "SELECT TOP 1 director.Name, director.Age FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID, director.Name, director.Age ORDER BY COUNT(program.Program_ID) DESC",
          "SELECT D.Name, D.Age FROM director D WHERE D.Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM program GROUP BY Director_ID) AS Counts))",
          "SELECT Name, Age FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM program GROUP BY Director_ID))",
          "SELECT D.Name, D.Age FROM director D JOIN (SELECT Director_ID, COUNT(*) AS ProgramCount FROM program GROUP BY Director_ID) AS P ON D.Director_ID = P.Director_ID WHERE P.ProgramCount = (SELECT MAX(ProgramCount) FROM (SELECT COUNT(*) AS ProgramCount FROM program GROUP BY Director_ID) AS subquery)"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1",
          "SELECT Title FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program)",
          "SELECT p.Title FROM program p WHERE p.Start_Year = (SELECT MAX(Start_Year) FROM program)",
          "SELECT TOP 1 Title FROM program ORDER BY Start_Year DESC",
          "SELECT Title FROM program WHERE Start_Year IN (SELECT MAX(Start_Year) FROM program)",
          "SELECT program.Title FROM program ORDER BY program.Start_Year DESC LIMIT 1",
          "SELECT Title FROM (SELECT Title, Start_Year FROM program ORDER BY Start_Year DESC) AS recent_program LIMIT 1",
          "SELECT Title FROM program ORDER BY Start_Year DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Title FROM program AS p WHERE p.Start_Year = (SELECT MAX(Start_Year) FROM program AS sub_p)",
          "SELECT Title FROM program ORDER BY Start_Year DESC, Program_ID DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(p.Program_ID) > 1",
          "SELECT channel.Name, channel.Internet FROM channel INNER JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID HAVING COUNT(program.Program_ID) > 1",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(*) > 1)",
          "SELECT ch.Name, ch.Internet FROM channel ch, program pr WHERE ch.Channel_ID = pr.Channel_ID GROUP BY ch.Channel_ID HAVING COUNT(pr.Program_ID) > 1",
          "SELECT Name, Internet FROM channel AS c JOIN program AS p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(p.Program_ID) > 1",
          "SELECT c.Name, c.Internet FROM channel c WHERE EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID GROUP BY p.Channel_ID HAVING COUNT(p.Program_ID) > 1)",
          "SELECT channel.Name, channel.Internet FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID HAVING COUNT(DISTINCT program.Program_ID) > 1",
          "SELECT c.Name, c.Internet FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(p.Program_ID) > 1",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1)",
          "SELECT DISTINCT c.Name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name, c.Internet HAVING COUNT(p.Program_ID) > 1"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT c.Name, COUNT(p.Program_ID) AS ProgramCount FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name",
          "SELECT channel.Name, COUNT(program.Program_ID) AS NumberOfPrograms FROM channel INNER JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Name",
          "SELECT Name, COUNT(Program_ID) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Name",
          "SELECT ch.Name AS ChannelName, COUNT(pr.Program_ID) AS TotalPrograms FROM channel ch, program pr WHERE ch.Channel_ID = pr.Channel_ID GROUP BY ch.Name",
          "SELECT Name, (SELECT COUNT(*) FROM program WHERE Channel_ID = channel.Channel_ID) AS ProgramCount FROM channel",
          "SELECT c.Name, (SELECT COUNT(p.Program_ID) FROM program p WHERE p.Channel_ID = c.Channel_ID) AS NumPrograms FROM channel c",
          "SELECT Name, COUNT(*) FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID",
          "SELECT channel.Name, COUNT(program.Program_ID) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Name ORDER BY channel.Name",
          "SELECT c.Name AS ChannelName, COUNT(p.Program_ID) AS ProgramCount FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Name ORDER BY ProgramCount DESC",
          "SELECT Name, COUNT(Program_ID) AS TotalPrograms FROM channel JOIN program ON Channel_ID = channel.Channel_ID GROUP BY Name HAVING COUNT(Program_ID) > 0"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)",
          "SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID)",
          "SELECT COUNT(Channel_ID) FROM channel WHERE Channel_ID NOT IN (SELECT DISTINCT Channel_ID FROM program)",
          "SELECT COUNT(*) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID WHERE program.Channel_ID IS NULL",
          "SELECT COUNT(*) FROM (SELECT Channel_ID FROM channel EXCEPT SELECT Channel_ID FROM program) AS subquery",
          "SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program WHERE Channel_ID IS NOT NULL)",
          "SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT NULL FROM program p WHERE p.Channel_ID = c.Channel_ID)",
          "SELECT COUNT(DISTINCT c.Channel_ID) FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Channel_ID IS NULL",
          "SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program GROUP BY Channel_ID)",
          "SELECT COUNT(*) FROM channel AS c WHERE NOT EXISTS (SELECT p.Channel_ID FROM program AS p WHERE p.Channel_ID = c.Channel_ID)"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID WHERE p.Title = 'Dracula'",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title = 'Dracula')",
          "SELECT director.Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title = 'Dracula'",
          "SELECT d.Name FROM director AS d, program AS p WHERE d.Director_ID = p.Director_ID AND p.Title = 'Dracula'",
          "SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program WHERE Title = 'Dracula')",
          "SELECT d.Name FROM director d WHERE EXISTS (SELECT 1 FROM program p WHERE p.Director_ID = d.Director_ID AND p.Title = 'Dracula')",
          "SELECT Name FROM director WHERE Director_ID IN (SELECT Director_ID FROM program WHERE Title LIKE 'Dracula')",
          "SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID AND p.Title = 'Dracula'",
          "SELECT Name FROM director d WHERE d.Director_ID = ANY (SELECT Director_ID FROM program WHERE Title = 'Dracula')",
          "SELECT director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title LIKE 'Dracula'"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name, Internet FROM channel WHERE Channel_ID = (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1)",
          "SELECT c.Name, c.Internet FROM channel c JOIN director_admin d ON c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID ORDER BY COUNT(d.Director_ID) DESC LIMIT 1",
          "SELECT c.Name, c.Internet FROM channel c WHERE c.Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID HAVING COUNT(Director_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Director_ID) AS cnt FROM director_admin GROUP BY Channel_ID) t))",
          "SELECT Name, Internet FROM channel WHERE Channel_ID = (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID HAVING COUNT(Director_ID) >= ALL (SELECT COUNT(Director_ID) FROM director_admin GROUP BY Channel_ID))",
          "SELECT c.Name, c.Internet FROM channel c INNER JOIN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1) d ON c.Channel_ID = d.Channel_ID",
          "SELECT Name, Internet FROM channel WHERE Channel_ID = (SELECT TOP 1 Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC)",
          "SELECT c.Name, c.Internet FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin d WHERE c.Channel_ID = d.Channel_ID GROUP BY d.Channel_ID HAVING COUNT(d.Director_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Director_ID) AS cnt FROM director_admin GROUP BY Channel_ID) t))",
          "SELECT c.Name, c.Internet FROM channel c WHERE c.Channel_ID = (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Name, Internet FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC FETCH FIRST ROW ONLY)",
          "SELECT c.Name, c.Internet FROM channel c JOIN (SELECT Channel_ID, COUNT(*) AS cnt FROM director_admin GROUP BY Channel_ID ORDER BY cnt DESC LIMIT 1) d ON c.Channel_ID = d.Channel_ID"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM director WHERE Age BETWEEN 30 AND 60",
          "SELECT director.Name FROM director WHERE director.Age >= 30 AND director.Age <= 60",
          "SELECT Name FROM director WHERE Age > 29 AND Age < 61",
          "SELECT d.Name FROM director d WHERE d.Age BETWEEN 30 AND 60",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60",
          "SELECT Name FROM director WHERE (Age >= 30) AND (Age <= 60)",
          "SELECT director.Name FROM director WHERE Age BETWEEN 30 AND 60",
          "SELECT Name FROM director WHERE Age > 29 AND Age < 61 ORDER BY Age",
          "SELECT Name FROM director WHERE Age IN (SELECT Age FROM director WHERE Age BETWEEN 30 AND 60)",
          "SELECT Name FROM director WHERE Age >= 30 AND Age <= 60 ORDER BY Name"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age < 40) AND Channel_ID IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age > 60)",
          "SELECT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 AND da.Channel_ID = c.Channel_ID) AND EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60 AND da.Channel_ID = c.Channel_ID)",
          "SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 INTERSECT SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60",
          "SELECT DISTINCT c.Name FROM channel c, director_admin da, director d WHERE c.Channel_ID = da.Channel_ID AND da.Director_ID = d.Director_ID AND d.Age < 40 AND c.Channel_ID IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age > 60)",
          "SELECT c.Name FROM channel c WHERE c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da, director d WHERE da.Director_ID = d.Director_ID AND d.Age < 40) AND c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da, director d WHERE da.Director_ID = d.Director_ID AND d.Age > 60)",
          "WITH YoungDirectors AS (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age < 40), OldDirectors AS (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age > 60) SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM YoungDirectors) AND Channel_ID IN (SELECT Channel_ID FROM OldDirectors)",
          "SELECT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 AND da.Channel_ID = c.Channel_ID) AND EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60 AND da.Channel_ID = c.Channel_ID)",
          "SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID GROUP BY c.Name HAVING SUM(CASE WHEN d.Age < 40 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN d.Age > 60 THEN 1 ELSE 0 END) > 0",
          "SELECT c.Name FROM channel c WHERE (SELECT COUNT(*) FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 AND da.Channel_ID = c.Channel_ID) > 0 AND (SELECT COUNT(*) FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60 AND da.Channel_ID = c.Channel_ID) > 0",
          "SELECT c.Name FROM channel c WHERE c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40) INTERSECT SELECT c.Name FROM channel c WHERE c.Channel_ID IN (SELECT da.Channel_ID FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60)"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "bbc_channels",
      "infer_predictions": [
        [
          "SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.director_id = director.director_id WHERE director.name = 'Hank Baskett')",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE NOT EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett' AND da.Channel_ID = c.Channel_ID)",
          "SELECT c.Channel_ID, c.Name FROM channel c LEFT JOIN director_admin da ON c.Channel_ID = da.Channel_ID LEFT JOIN director d ON da.director_id = d.director_id WHERE d.name <> 'Hank Baskett' OR d.name IS NULL",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT da.Channel_ID FROM director_admin da INNER JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett')",
          "SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT da.Channel_ID FROM director_admin da, director d WHERE da.director_id = d.director_id AND d.name = 'Hank Baskett')",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT da.Channel_ID FROM director_admin da JOIN director d ON da.director_id = d.director_id AND d.name = 'Hank Baskett')",
          "SELECT Channel_ID, Name FROM channel AS c WHERE NOT EXISTS (SELECT * FROM director_admin AS da JOIN director AS d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett' AND da.Channel_ID = c.Channel_ID)",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT Channel_ID FROM director_admin WHERE director_id IN (SELECT director_id FROM director WHERE name = 'Hank Baskett'))",
          "SELECT c.Channel_ID, c.Name FROM channel c WHERE NOT EXISTS (SELECT * FROM director_admin da INNER JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett' AND da.Channel_ID = c.Channel_ID)",
          "SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM director_admin WHERE director_id = (SELECT director_id FROM director WHERE name = 'Hank Baskett'))"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM radio",
          "SELECT COUNT(Radio_ID) FROM radio",
          "SELECT COUNT(DISTINCT Radio_ID) FROM radio",
          "SELECT COUNT(Radio_ID) AS TotalRadios FROM radio",
          "SELECT COUNT(DISTINCT Radio_ID) AS TotalRadios FROM radio",
          "SELECT COUNT(*) AS NumberOfRadios FROM radio",
          "SELECT COUNT(Radio_ID) FROM radio WHERE Radio_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT Radio_ID) FROM radio WHERE Radio_ID IS NOT NULL",
          "SELECT COUNT(*) FROM radio WHERE Radio_ID IS NOT NULL",
          "SELECT COUNT(*) AS RadioCount FROM radio"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC",
          "SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW",
          "SELECT Transmitter FROM radio AS r ORDER BY r.ERP_kW ASC",
          "SELECT radio.Transmitter FROM radio ORDER BY radio.ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASCENDING",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC, Transmitter ASC",
          "SELECT Transmitter, ERP_kW FROM radio ORDER BY ERP_kW ASC",
          "SELECT * FROM radio ORDER BY ERP_kW ASC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT tv_show_name, Original_Airdate FROM tv_show",
          "SELECT name AS tv_show_name, airdate AS Original_Airdate FROM tv_show",
          "SELECT tv_show.tv_show_name, tv_show.Original_Airdate FROM tv_show",
          "SELECT `tv_show_name`, `Original_Airdate` FROM `tv_show`",
          "SELECT tv_show_name AS ShowName, Original_Airdate AS AirDate FROM tv_show",
          "SELECT Name, Original_Airdate FROM tv_show AS t",
          "SELECT t.tv_show_name, t.Original_Airdate FROM tv_show t",
          "SELECT tv_show_name, Original_Airdate FROM tv_show ORDER BY Original_Airdate",
          "SELECT DISTINCT tv_show_name, Original_Airdate FROM tv_show",
          "SELECT tv_show_name AS 'TV Show Name', Original_Airdate AS 'Air Date' FROM tv_show"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Station_name FROM city_channel WHERE Affiliation <> 'ABC'",
          "SELECT Station_name FROM city_channel WHERE NOT Affiliation = 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC'",
          "SELECT c.Station_name FROM city_channel AS c WHERE c.Affiliation <> 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation NOT IN ('ABC')",
          "SELECT Station_name FROM city_channel WHERE Affiliation NOT LIKE 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation IS NOT 'ABC'",
          "SELECT Station_name FROM city_channel WHERE Affiliation NOT EQUALS 'ABC'",
          "SELECT Station_name FROM city_channel WHERE 'ABC' <> Affiliation",
          "SELECT Station_name FROM city_channel WHERE 'ABC' != Affiliation"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30",
          "SELECT radio.Transmitter FROM radio WHERE radio.ERP_kW > 150 OR radio.ERP_kW < 30",
          "SELECT r.Transmitter FROM radio r WHERE r.ERP_kW > 150 OR r.ERP_kW < 30",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 UNION SELECT Transmitter FROM radio WHERE ERP_kW < 30",
          "SELECT DISTINCT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30",
          "SELECT Transmitter FROM radio WHERE ERP_kW NOT BETWEEN 30 AND 150",
          "SELECT Transmitter FROM radio WHERE (ERP_kW > 150) OR (ERP_kW < 30)",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 UNION ALL SELECT Transmitter FROM radio WHERE ERP_kW < 30",
          "SELECT Transmitter FROM radio r WHERE r.ERP_kW > 150 OR r.ERP_kW < 30 ORDER BY Transmitter",
          "SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30 ORDER BY Transmitter ASC"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio)",
          "SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW DESC LIMIT 1",
          "SELECT Transmitter FROM radio WHERE ERP_kW IN (SELECT MAX(ERP_kW) FROM radio)",
          "SELECT r.Transmitter FROM radio r WHERE r.ERP_kW = (SELECT MAX(ERP_kW) FROM radio r)",
          "SELECT TOP 1 Transmitter FROM radio ORDER BY ERP_kW DESC",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC FETCH FIRST ROW ONLY",
          "SELECT Transmitter FROM radio r WHERE r.ERP_kW >= ALL (SELECT ERP_kW FROM radio)",
          "SELECT Transmitter FROM radio AS r WHERE r.ERP_kW = (SELECT MAX(ERP_kW) FROM radio AS sub)",
          "SELECT r.Transmitter FROM radio r WHERE r.ERP_kW = (SELECT MAX(ERP_kW) FROM radio) LIMIT 1",
          "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT AVG(ERP_kW) FROM radio",
          "SELECT AVG(ERP_kW) AS Average_ERP FROM radio",
          "SELECT AVG(radio.ERP_kW) FROM radio",
          "SELECT AVG(radio.ERP_kW) AS Average_ERP FROM radio",
          "SELECT AVG(ERP_kW) AS AveragePower FROM radio",
          "SELECT AVG(ERP_kW) FROM radio AS AverageERP",
          "SELECT AVG(ERP_kW) AS AvgERP FROM radio",
          "SELECT AVG(ERP_kW) AS Average_Effective_Radiated_Power FROM radio",
          "SELECT AVG(ERP_kW) FROM radio GROUP BY ERP_kW",
          "SELECT AVG(ERP_kW) AS AverageERP FROM radio GROUP BY ERP_kW"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(*) AS NumberOfChannels FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(ID) AS ChannelCount FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(ID) FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Affiliation) AS TotalChannels FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Affiliation) FROM city_channel GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) AS CountOfChannels FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC",
          "SELECT Affiliation, COUNT(ID) AS NumberOfChannels FROM city_channel GROUP BY Affiliation ORDER BY COUNT(ID) DESC",
          "SELECT Affiliation, COUNT(*) AS Total FROM city_channel GROUP BY Affiliation ORDER BY Total DESC",
          "SELECT Affiliation, COUNT(*) AS ChannelCount FROM city_channel GROUP BY Affiliation ORDER BY ChannelCount DESC"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation ORDER BY Count DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) as Total FROM city_channel GROUP BY Affiliation) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT Affiliation, MAX(Count) FROM (SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation) AS Counts",
          "WITH AffiliationCounts AS (SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation) SELECT Affiliation FROM AffiliationCounts WHERE Count = (SELECT MAX(Count) FROM AffiliationCounts)",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM city_channel GROUP BY Affiliation) AS MaxCount)",
          "SELECT Affiliation, COUNT(*) AS Frequency FROM city_channel GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Affiliation) AS Cnt FROM city_channel GROUP BY Affiliation) AS MaxAffiliation)",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) > 3",
          "SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation HAVING Count > 3",
          "SELECT c.Affiliation FROM city_channel c GROUP BY c.Affiliation HAVING COUNT(c.Affiliation) > 3",
          "SELECT Affiliation FROM city_channel WHERE Affiliation IS NOT NULL GROUP BY Affiliation HAVING COUNT(ID) > 3",
          "SELECT Affiliation, COUNT(ID) AS ChannelCount FROM city_channel GROUP BY Affiliation HAVING ChannelCount > 3",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Total FROM city_channel GROUP BY Affiliation) AS SubQuery WHERE Total > 3",
          "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3",
          "SELECT DISTINCT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3",
          "SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC",
          "SELECT city_channel.City, city_channel.Station_name FROM city_channel ORDER BY city_channel.Station_name ASC",
          "SELECT c.City, c.Station_name FROM city_channel AS c ORDER BY c.Station_name ASC",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASCENDING",
          "SELECT city_channel.City, city_channel.Station_name FROM city_channel ORDER BY Station_name",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC, City ASC",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name, City",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC LIMIT ALL",
          "SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC, City"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT r.Transmitter, cc.City FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID",
          "SELECT radio.Transmitter, city_channel.City FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT Transmitter, City FROM radio, city_channel, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID AND city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT r.Transmitter AS Radio_Transmitter, cc.City AS Channel_City FROM radio r, city_channel cc, city_channel_radio ccr WHERE r.Radio_ID = ccr.Radio_ID AND cc.ID = ccr.City_channel_ID",
          "SELECT DISTINCT r.Transmitter, cc.City FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID",
          "SELECT r.Transmitter, cc.City FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.Radio_ID = ccr.Radio_ID AND ccr.City_channel_ID = cc.ID",
          "SELECT Transmitter, City FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID",
          "SELECT r.Transmitter AS Transmitter, cc.City AS City FROM radio AS r INNER JOIN city_channel_radio AS ccr ON r.Radio_ID = ccr.Radio_ID INNER JOIN city_channel AS cc ON ccr.City_channel_ID = cc.ID",
          "SELECT r.Transmitter, cc.City FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID LEFT JOIN city_channel cc ON ccr.City_channel_ID = cc.ID",
          "SELECT r.Transmitter, cc.City FROM radio r RIGHT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID RIGHT JOIN city_channel cc ON ccr.City_channel_ID = cc.ID"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT r.Transmitter, cc.Station_name FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT radio.Transmitter, city_channel.Station_name FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio, city_channel, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID AND city_channel_radio.City_channel_ID = city_channel.ID ORDER BY ERP_kW DESC",
          "SELECT r.Transmitter AS Transmitter, cc.Station_name AS Station FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.Radio_ID = ccr.Radio_ID AND ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio JOIN city_channel_radio USING (Radio_ID) JOIN city_channel USING (ID) ORDER BY ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio AS r JOIN city_channel_radio AS ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel AS cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID LEFT JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC",
          "SELECT Transmitter, Station_name FROM radio r INNER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID INNER JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY ERP_kW DESC",
          "SELECT r.Transmitter, cc.Station_name FROM radio r RIGHT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID RIGHT JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT r.Transmitter, COUNT(c.City_channel_ID) AS Channel_Count FROM radio r JOIN city_channel_radio c ON r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(City_channel_ID) AS Num_Channels FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT radio.Transmitter, COUNT(city_channel_radio.City_channel_ID) FROM radio, city_channel_radio WHERE radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY radio.Transmitter",
          "SELECT r.Transmitter, COUNT(*) AS Channel_Count FROM radio r, city_channel_radio c WHERE r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(city_channel_radio.City_channel_ID) AS Channel_Count FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(c.City_channel_ID) FROM radio r LEFT JOIN city_channel_radio c ON r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter",
          "SELECT Transmitter, COUNT(DISTINCT City_channel_ID) AS Channel_Count FROM radio JOIN city_channel_radio USING (Radio_ID) GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(c.City_channel_ID) AS Total_Channels FROM radio r INNER JOIN city_channel_radio c ON r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter ORDER BY r.Transmitter",
          "SELECT Transmitter, COUNT(*) FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID GROUP BY Transmitter",
          "SELECT r.Transmitter, COUNT(c.City_channel_ID) AS Channel_Count FROM radio r LEFT OUTER JOIN city_channel_radio c ON r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "tv_shows",
      "infer_predictions": [
        [
          "SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
          "SELECT DISTINCT r.Transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.Radio_ID IS NULL",
          "SELECT DISTINCT Transmitter FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE Radio_ID = radio.Radio_ID)",
          "SELECT DISTINCT r.Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
          "SELECT Transmitter FROM radio GROUP BY Transmitter HAVING COUNT(Radio_ID) = 0",
          "SELECT DISTINCT Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT ccr.Radio_ID FROM city_channel_radio ccr)",
          "SELECT DISTINCT r.Transmitter FROM radio r WHERE NOT EXISTS (SELECT NULL FROM city_channel_radio ccr WHERE ccr.Radio_ID = r.Radio_ID)",
          "SELECT DISTINCT Transmitter FROM radio EXCEPT SELECT Transmitter FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID",
          "SELECT DISTINCT r.Transmitter FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.Radio_ID IS NULL",
          "SELECT DISTINCT Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT DISTINCT Radio_ID FROM city_channel_radio)"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000)",
          "SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC LIMIT 1",
          "SELECT Model FROM (SELECT Model, Top_Speed FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC) AS subquery LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Model ASC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Model DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000)",
          "SELECT TOP 1 Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM (SELECT Model, MAX(Top_Speed) AS Speed FROM vehicle WHERE Power > 6000 GROUP BY Model) AS subquery ORDER BY Speed DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Model ASC LIMIT 1",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT first(Model) FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC",
          "SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT driver.Name FROM driver WHERE driver.Citizenship = 'United States'",
          "SELECT d.Name FROM driver d WHERE d.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship LIKE 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States' AND Citizenship IS NOT NULL",
          "SELECT driver.Name FROM driver WHERE Citizenship = 'United States' AND Citizenship IS NOT NULL",
          "SELECT d.Name FROM driver AS d WHERE d.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship IN ('United States')",
          "SELECT Name FROM driver WHERE Citizenship = 'United States' ORDER BY Name",
          "SELECT Name FROM driver WHERE Citizenship = 'United States' GROUP BY Name"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT driver.Name FROM driver WHERE driver.Citizenship = 'United States'",
          "SELECT d.Name FROM driver d WHERE d.Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship LIKE 'United States'",
          "SELECT Name FROM driver WHERE Citizenship = 'United States' ORDER BY Name",
          "SELECT DISTINCT Name FROM driver WHERE Citizenship = 'United States'",
          "SELECT Name FROM driver WHERE Citizenship IN ('United States')",
          "SELECT driver.Name FROM driver WHERE Citizenship = 'United States' AND Name IS NOT NULL",
          "SELECT Name FROM driver WHERE Citizenship = 'United States' GROUP BY Name",
          "SELECT Name AS DriverName FROM driver WHERE Citizenship = 'United States'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Driver_ID, MAX(vehicle_count) FROM (SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) AS subquery GROUP BY Driver_ID ORDER BY vehicle_count DESC LIMIT 1",
          "SELECT TOP 1 Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID ORDER BY vehicle_count DESC",
          "SELECT Driver_ID, vehicle_count FROM (SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) sub WHERE vehicle_count = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) sub2)",
          "SELECT Driver_ID, COUNT(*) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(*) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) subquery)",
          "SELECT a.Driver_ID, a.vehicle_count FROM (SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) a WHERE a.vehicle_count = (SELECT MAX(b.vehicle_count) FROM (SELECT COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) b)",
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID ORDER BY vehicle_count DESC FETCH FIRST 1 ROW ONLY",
          "WITH VehicleCounts AS (SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) SELECT Driver_ID, vehicle_count FROM VehicleCounts WHERE vehicle_count = (SELECT MAX(vehicle_count) FROM VehicleCounts)",
          "SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) subquery)",
          "SELECT Driver_ID FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1",
          "SELECT Driver_ID, vehicle_count FROM (SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID ORDER BY vehicle_count DESC) subquery LIMIT 1"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Driver_ID, COUNT(DISTINCT Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID ORDER BY Vehicle_Count DESC LIMIT 1",
          "SELECT D.Driver_ID, COUNT(V.Vehicle_ID) AS Num_Vehicles FROM driver D JOIN vehicle_driver VD ON D.Driver_ID = VD.Driver_ID JOIN vehicle V ON VD.Vehicle_ID = V.Vehicle_ID GROUP BY D.Driver_ID ORDER BY Num_Vehicles DESC LIMIT 1",
          "SELECT TOP 1 Driver_ID, COUNT(Vehicle_ID) AS Total_Vehicles FROM vehicle_driver GROUP BY Driver_ID ORDER BY Total_Vehicles DESC",
          "SELECT driver.Driver_ID, COUNT(vehicle.Vehicle_ID) AS VehicleCount FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID GROUP BY driver.Driver_ID ORDER BY VehicleCount DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(vd.Vehicle_ID) DESC LIMIT 1",
          "SELECT d.Driver_ID, MAX(vcount.VehicleCount) FROM driver d LEFT JOIN (SELECT Driver_ID, COUNT(*) AS VehicleCount FROM vehicle_driver GROUP BY Driver_ID) vcount ON d.Driver_ID = vcount.Driver_ID",
          "SELECT Driver_ID, MAX(Vehicle_Count) FROM (SELECT Driver_ID, COUNT(DISTINCT Vehicle_ID) AS Vehicle_Count FROM vehicle_driver GROUP BY Driver_ID) AS SubQuery",
          "SELECT d.Driver_ID, COUNT(*) AS TotalVehicles FROM driver d, vehicle_driver vd WHERE d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY TotalVehicles DESC LIMIT 1",
          "SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(VehicleCount) FROM (SELECT COUNT(*) AS VehicleCount FROM vehicle_driver GROUP BY Driver_ID) AS SubQuery)",
          "SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS VehicleCount FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY VehicleCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) AS MaximumPower, AVG(Power) AS AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(vehicle.Power) AS MaxPower, AVG(vehicle.Power) AS AvgPower FROM vehicle WHERE vehicle.Builder = 'Zhuzhou'",
          "SELECT MAX(Power) Maximum, AVG(Power) Average FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(Power) AS MaxPower, AVG(Power) AS AveragePower FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder",
          "SELECT Builder, MAX(Power), AVG(Power) FROM vehicle GROUP BY Builder HAVING Builder = 'Zhuzhou'",
          "SELECT MAX(v.Power), AVG(v.Power) FROM vehicle v WHERE v.Builder = 'Zhuzhou'",
          "SELECT MAX(Power) max_power, AVG(Power) avg_power FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(Power) max_power, AVG(Power) avg_power FROM vehicle GROUP BY Builder HAVING Builder = 'Zhuzhou'",
          "SELECT MAX(Power) as MaximumPower, AVG(Power) as AveragePower FROM vehicle v WHERE v.Builder = 'Zhuzhou'"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(Power) AS MaxPower, AVG(Power) AS AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(Power) AS MaximumPower, AVG(Power) AS AveragePower FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder",
          "SELECT Builder, MAX(Power), AVG(Power) FROM vehicle GROUP BY Builder HAVING Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(vehicle.Power) AS MaxPower, AVG(vehicle.Power) AS AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT MAX(vehicle.Power) AS MaximumPower, AVG(vehicle.Power) AS AveragePower FROM vehicle WHERE vehicle.Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(Power) AS 'Maximum Power', AVG(Power) AS 'Average Power' FROM vehicle WHERE Builder = 'Zhuzhou'",
          "SELECT Builder, MAX(Power) AS 'Max Power', AVG(Power) AS 'Avg Power' FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder",
          "SELECT Builder, MAX(Power) AS Maximum_Power, AVG(Power) AS Average_Power FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder",
          "SELECT Builder, MAX(Power) AS Max_Power, AVG(Power) AS Avg_Power FROM vehicle WHERE Builder = 'Zhuzhou' GROUP BY Builder"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(counts) FROM (SELECT COUNT(*) AS counts FROM vehicle_driver GROUP BY Vehicle_ID) AS subquery)",
          "SELECT V.Vehicle_ID FROM vehicle_driver V GROUP BY V.Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT TOP 1 Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT Vehicle_ID FROM (SELECT Vehicle_ID, COUNT(*) AS usage_count FROM vehicle_driver GROUP BY Vehicle_ID) AS Usage ORDER BY usage_count ASC LIMIT 1",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(usage_count) FROM (SELECT COUNT(*) AS usage_count FROM vehicle_driver GROUP BY Vehicle_ID) tmp)",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC LIMIT 1",
          "WITH VehicleUsage AS (SELECT Vehicle_ID, COUNT(*) AS Count FROM vehicle_driver GROUP BY Vehicle_ID) SELECT Vehicle_ID FROM VehicleUsage WHERE Count = (SELECT MIN(Count) FROM VehicleUsage)",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID)",
          "SELECT v.Vehicle_ID FROM vehicle_driver v GROUP BY v.Vehicle_ID HAVING COUNT(v.Vehicle_ID) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID)"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT V.Vehicle_ID FROM vehicle_driver V GROUP BY V.Vehicle_ID HAVING COUNT(V.Driver_ID) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM vehicle_driver GROUP BY Vehicle_ID) AS counts)",
          "SELECT TOP 1 Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*)",
          "SELECT Vehicle_ID FROM (SELECT Vehicle_ID, COUNT(*) AS DriveCount FROM vehicle_driver GROUP BY Vehicle_ID) AS SubQuery ORDER BY DriveCount ASC LIMIT 1",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "WITH VehicleCounts AS (SELECT Vehicle_ID, COUNT(*) AS NumTimesDriven FROM vehicle_driver GROUP BY Vehicle_ID) SELECT Vehicle_ID FROM VehicleCounts WHERE NumTimesDriven = (SELECT MIN(NumTimesDriven) FROM VehicleCounts)",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver GROUP BY Vehicle_ID)",
          "SELECT v.Vehicle_ID FROM vehicle_driver v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Vehicle_ID) ASC LIMIT 1",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1 FOR FETCH ONLY"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996",
          "SELECT v.Top_Speed, v.Power FROM vehicle v WHERE v.Build_Year = 1996",
          "SELECT vehicle.Top_Speed AS Speed, vehicle.Power AS Horsepower FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT MAX(Top_Speed), MAX(Power) FROM vehicle WHERE Build_Year = 1996",
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'",
          "SELECT * FROM vehicle WHERE Build_Year = 1996 SELECT Top_Speed, Power",
          "SELECT Top_Speed, Power FROM vehicle v WHERE v.Build_Year = '1996'",
          "SELECT Top_Speed, Power FROM vehicle GROUP BY Build_Year HAVING Build_Year = 1996",
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996 LIMIT 1",
          "SELECT DISTINCT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996",
          "SELECT v.Top_Speed, v.Power FROM vehicle v WHERE v.Build_Year = 1996",
          "SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'",
          "SELECT Power, Top_Speed FROM vehicle WHERE Build_Year = 1996",
          "SELECT v.Power, v.Top_Speed FROM vehicle AS v WHERE v.Build_Year = 1996",
          "SELECT vehicle.Power, vehicle.Top_Speed FROM vehicle WHERE vehicle.Build_Year = 1996",
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996 ORDER BY Top_Speed DESC LIMIT 1",
          "SELECT Power, Top_Speed FROM vehicle WHERE Build_Year = 1996 ORDER BY Power DESC LIMIT 1",
          "SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996 AND Top_Speed IS NOT NULL AND Power IS NOT NULL"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle",
          "SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v",
          "SELECT Build_Year AS YearBuilt, Model AS ModelName, Builder AS Manufacturer FROM vehicle",
          "SELECT Model, Build_Year, Builder FROM vehicle ORDER BY Build_Year",
          "SELECT * FROM vehicle SELECT Build_Year, Model, Builder",
          "SELECT Builder, Model, Build_Year FROM vehicle WHERE Build_Year IS NOT NULL",
          "SELECT DISTINCT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year AS 'Year of Manufacture', vehicle.Model AS 'Model Name', vehicle.Builder AS 'Builder' FROM vehicle",
          "SELECT Build_Year, Model, Builder FROM vehicle GROUP BY Build_Year, Model, Builder"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Build_Year, Model, Builder FROM vehicle",
          "SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle",
          "SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v",
          "SELECT Build_Year AS Year_Built, Model AS Vehicle_Model, Builder AS Manufacturer FROM vehicle",
          "SELECT * FROM (SELECT Build_Year, Model, Builder FROM vehicle) AS subquery",
          "SELECT Build_Year, Model, Builder FROM vehicle WHERE Build_Year IS NOT NULL",
          "SELECT DISTINCT Build_Year, Model, Builder FROM vehicle",
          "SELECT Build_Year, Model, Builder FROM vehicle ORDER BY Build_Year",
          "SELECT Build_Year, Model, Builder FROM vehicle GROUP BY Build_Year, Model, Builder",
          "SELECT Build_Year, Model, Builder FROM vehicle WHERE Model LIKE '%'"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd, vehicle v WHERE vd.Vehicle_ID = v.Vehicle_ID AND v.Build_Year = 2012",
          "SELECT COUNT(UNIQUE vehicle_driver.Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver AS vd JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT DISTINCT COUNT(Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012 GROUP BY vehicle_driver.Driver_ID",
          "SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver vd INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012",
          "SELECT COUNT(UNIQUE driver.Driver_ID) FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT driver.Driver_ID) AS NumberOfDrivers FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Build_Year = 2012",
          "SELECT DISTINCT COUNT(driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012",
          "SELECT COUNT(*) FROM (SELECT DISTINCT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012) AS unique_drivers",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012 GROUP BY d.Driver_ID",
          "SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Build_Year = 2012 GROUP BY driver.Driver_ID",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d CROSS JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID CROSS JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series LIKE 'NASCAR'",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series LIKE '%NASCAR%'",
          "SELECT COUNT(*) FROM (SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series IN ('NASCAR')",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Racing_Series",
          "SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Racing_Series",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR' AND Driver_ID IS NOT NULL",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR' AND Driver_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM driver WHERE Racing_Series LIKE 'NASCAR'",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(1) FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(DISTINCT Driver_ID) AS NumberOfDrivers FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) AS TotalDrivers FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(Driver_ID) AS DriverCount FROM driver WHERE Racing_Series = 'NASCAR'",
          "SELECT COUNT(*) FROM (SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR' GROUP BY Driver_ID) AS UniqueDrivers",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Racing_Series = 'NASCAR'",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series IN ('NASCAR')"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT AVG(Top_Speed) AS Average_Top_Speed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS AverageSpeed FROM vehicle",
          "SELECT AVG(Top_Speed) FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) FROM vehicle",
          "SELECT AVG(Top_Speed) AS AvgSpeed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle",
          "SELECT AVG(Top_Speed) AS AverageTopSpeed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS Avg_Top_Speed FROM vehicle",
          "SELECT AVG(Top_Speed) AS Average_Speed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS Average_Speed FROM vehicle"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT AVG(Top_Speed) AS Average_Top_Speed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) FROM vehicle",
          "SELECT AVG(Top_Speed) FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS AverageSpeed FROM vehicle",
          "SELECT AVG(Top_Speed) AS Average_Speed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS AvgTopSpeed FROM vehicle",
          "SELECT AVG(Top_Speed) AS Avg_Speed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle",
          "SELECT AVG(Top_Speed) AS AverageTopSpeed FROM vehicle",
          "SELECT AVG(vehicle.Top_Speed) FROM vehicle AS AverageTopSpeed"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))",
          "SELECT DISTINCT driver.Name FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT DISTINCT d.Name FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Power > 5000)",
          "SELECT DISTINCT d.Name FROM driver d WHERE d.Driver_ID IN (SELECT vd.Driver_ID FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000)",
          "SELECT DISTINCT Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000)",
          "SELECT DISTINCT d.Name FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON v.Vehicle_ID = vd.Vehicle_ID AND v.Power > 5000",
          "SELECT DISTINCT d.Name FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver vd INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000)"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000",
          "SELECT d.Name FROM driver AS d, vehicle AS v, vehicle_driver AS vd WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))",
          "SELECT DISTINCT driver.Name FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT d.Name FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000",
          "SELECT driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Power > 5000",
          "SELECT DISTINCT Name FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Power > 5000)",
          "SELECT d.Name FROM driver d WHERE EXISTS (SELECT 1 FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE vd.Driver_ID = d.Driver_ID AND v.Power > 5000)",
          "SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000)",
          "SELECT DISTINCT d.Name FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000 ORDER BY d.Name"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT DISTINCT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 GROUP BY Model",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150",
          "SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE (Total_Production > 100) OR (Top_Speed > 150)",
          "SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > '150'",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 ORDER BY Model",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 UNION SELECT Model FROM vehicle WHERE Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 LIMIT 1000"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT DISTINCT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 ORDER BY Model",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150",
          "SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE (Total_Production > 100) OR (Top_Speed > 150)",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 UNION SELECT Model FROM vehicle WHERE Top_Speed > 150",
          "SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > '150'",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 GROUP BY Model",
          "SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150 LIMIT 1000"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%'",
          "SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' ORDER BY Build_Year",
          "SELECT DISTINCT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT Model AS CarModel, Build_Year AS YearBuilt FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE INSTR(Model, 'DJ') > 0",
          "SELECT Model, Build_Year FROM vehicle WHERE Model CONTAINS 'DJ'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model ILIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE CHARINDEX('DJ', Model) > 0"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%'",
          "SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' ORDER BY Build_Year",
          "SELECT DISTINCT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT Model AS CarModel, Build_Year AS YearBuilt FROM vehicle WHERE Model LIKE '%DJ%'",
          "SELECT Model, Build_Year FROM vehicle WHERE Model CONTAINS 'DJ'",
          "SELECT Model, Build_Year FROM vehicle WHERE INSTR(Model, 'DJ') > 0",
          "SELECT Model, Build_Year FROM vehicle WHERE CHARINDEX('DJ', Model) > 0",
          "SELECT Model, Build_Year FROM vehicle WHERE POSITION('DJ' IN Model) > 0"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT Model FROM vehicle WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID)",
          "SELECT Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT v.Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT DISTINCT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd)",
          "SELECT Model FROM vehicle EXCEPT SELECT Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID",
          "SELECT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT DISTINCT Vehicle_ID FROM vehicle_driver)",
          "SELECT DISTINCT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT DISTINCT Vehicle_ID FROM vehicle_driver)",
          "SELECT Model FROM vehicle v WHERE NOT EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IS NULL",
          "SELECT Model FROM vehicle WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID)",
          "SELECT vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)",
          "SELECT DISTINCT Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd)",
          "SELECT Model FROM vehicle EXCEPT SELECT Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID",
          "SELECT Model FROM vehicle v WHERE NOT EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)",
          "SELECT DISTINCT v.Model FROM vehicle v LEFT OUTER JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IS NULL"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 LEFT JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING COUNT(DISTINCT T2.Driver_ID) = 2 OR T1.Builder = 'Ziyang'",
          "SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) OR Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Builder = 'Ziyang' UNION SELECT vd.Vehicle_ID, v.Model FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v, vehicle_driver vd WHERE v.Vehicle_ID = vd.Vehicle_ID AND v.Builder = 'Ziyang' OR (SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) = 2",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'",
          "SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang' UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2)",
          "SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Builder = 'Ziyang' OR v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2)"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V LEFT JOIN vehicle_driver D ON V.Vehicle_ID = D.Vehicle_ID GROUP BY V.Vehicle_ID HAVING COUNT(D.Driver_ID) = 2 OR V.Builder = 'Ziyang'",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(vehicle_driver.Driver_ID) = 2 OR vehicle.Builder = 'Ziyang'",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE V.Builder = 'Ziyang' OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) = 2)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE Builder = 'Ziyang' UNION SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(vehicle_driver.Driver_ID) = 2",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V JOIN vehicle_driver D ON V.Vehicle_ID = D.Vehicle_ID GROUP BY V.Vehicle_ID HAVING (COUNT(D.Driver_ID) = 2 OR V.Builder = 'Ziyang')",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE V.Builder = 'Ziyang' UNION ALL SELECT V.Vehicle_ID, V.Model FROM vehicle V JOIN vehicle_driver D ON V.Vehicle_ID = D.Vehicle_ID GROUP BY V.Vehicle_ID HAVING COUNT(D.Driver_ID) = 2",
          "SELECT DISTINCT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Builder = 'Ziyang' OR COUNT(vehicle_driver.Driver_ID) = 2 GROUP BY vehicle.Vehicle_ID",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE EXISTS (SELECT 1 FROM vehicle_driver D WHERE V.Vehicle_ID = D.Vehicle_ID GROUP BY D.Vehicle_ID HAVING COUNT(D.Driver_ID) = 2) OR V.Builder = 'Ziyang'",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Builder = 'Ziyang' GROUP BY vehicle.Vehicle_ID HAVING COUNT(vehicle_driver.Driver_ID) = 2",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V LEFT JOIN vehicle_driver D ON V.Vehicle_ID = D.Vehicle_ID WHERE V.Builder = 'Ziyang' OR COUNT(D.Driver_ID) = 2 GROUP BY V.Vehicle_ID"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')",
          "SELECT DISTINCT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID LEFT JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2)",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V JOIN vehicle_driver D ON V.Vehicle_ID = D.Vehicle_ID GROUP BY V.Vehicle_ID, V.Model HAVING COUNT(DISTINCT D.Driver_ID) > 2 OR 'Jeff Gordon' IN (SELECT Name FROM driver WHERE Driver_ID = D.Driver_ID)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR EXISTS (SELECT 1 FROM driver WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND driver.Name = 'Jeff Gordon')",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR EXISTS (SELECT 1 FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'))",
          "SELECT DISTINCT V.Vehicle_ID, V.Model FROM vehicle V, vehicle_driver D, driver DR WHERE V.Vehicle_ID = D.Vehicle_ID AND D.Driver_ID = DR.Driver_ID AND (DR.Name = 'Jeff Gordon' OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2))",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver, driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND driver.Name = 'Jeff Gordon')",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE EXISTS (SELECT 1 FROM vehicle_driver D WHERE D.Vehicle_ID = V.Vehicle_ID GROUP BY D.Vehicle_ID HAVING COUNT(DISTINCT D.Driver_ID) > 2) OR EXISTS (SELECT 1 FROM vehicle_driver D JOIN driver DR ON D.Driver_ID = DR.Driver_ID WHERE DR.Name = 'Jeff Gordon' AND D.Vehicle_ID = V.Vehicle_ID)"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver JOIN driver D ON vehicle_driver.Driver_ID = D.Driver_ID WHERE D.Name = 'Jeff Gordon')",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2 UNION SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2)",
          "SELECT DISTINCT vehicle.Vehicle_ID, vehicle.Model FROM vehicle, vehicle_driver, driver WHERE vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID AND vehicle_driver.Driver_ID = driver.Driver_ID AND (driver.Name = 'Jeff Gordon' OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2))",
          "SELECT V.Vehicle_ID, V.Model FROM vehicle V LEFT JOIN vehicle_driver VD ON V.Vehicle_ID = VD.Vehicle_ID LEFT JOIN driver D ON VD.Driver_ID = D.Driver_ID WHERE D.Name = 'Jeff Gordon' OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR EXISTS (SELECT 1 FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID)",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle_driver.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'))",
          "SELECT DISTINCT V.Vehicle_ID, V.Model FROM vehicle V, vehicle_driver VD, driver D WHERE V.Vehicle_ID = VD.Vehicle_ID AND VD.Driver_ID = D.Driver_ID AND (D.Name = 'Jeff Gordon' OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2))",
          "SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(Vehicle_ID) FROM vehicle WHERE Top_Speed IN (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle GROUP BY Top_Speed)",
          "SELECT COUNT(DISTINCT Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle AS v)",
          "SELECT COUNT(*) FROM vehicle v1 WHERE v1.Top_Speed = (SELECT MAX(v2.Top_Speed) FROM vehicle v2)",
          "SELECT COUNT(Vehicle_ID) AS Total FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle v2 WHERE v2.Top_Speed = v.Top_Speed)",
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Top_Speed IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed IN (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(Vehicle_ID) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle AS V)",
          "SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)",
          "SELECT COUNT(Vehicle_ID) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(v2.Top_Speed) FROM vehicle v2)",
          "SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle GROUP BY Top_Speed)",
          "SELECT COUNT(Vehicle_ID) FROM vehicle v1 WHERE v1.Top_Speed = (SELECT MAX(v2.Top_Speed) FROM vehicle v2 WHERE v1.Top_Speed = v2.Top_Speed)",
          "SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle v2 WHERE v2.Top_Speed = v.Top_Speed)",
          "SELECT COUNT(Vehicle_ID) FROM vehicle GROUP BY Top_Speed HAVING Top_Speed = MAX(Top_Speed)",
          "SELECT COUNT(*) FROM vehicle v1 WHERE EXISTS (SELECT 1 FROM vehicle v2 GROUP BY Top_Speed HAVING v1.Top_Speed = MAX(Top_Speed))"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver ORDER BY Name ASC",
          "SELECT Name FROM driver ORDER BY Name",
          "SELECT driver.Name FROM driver ORDER BY driver.Name ASC",
          "SELECT d.Name FROM driver d ORDER BY d.Name ASC",
          "SELECT Name FROM driver ORDER BY Name ASCENDING",
          "SELECT driver.Name FROM driver ORDER BY Name",
          "SELECT Name FROM driver ORDER BY UPPER(Name)",
          "SELECT Name FROM driver ORDER BY LOWER(Name) ASC",
          "SELECT Name FROM driver ORDER BY Name COLLATE NOCASE",
          "SELECT Name FROM driver ORDER BY Name COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Name FROM driver ORDER BY Name ASC",
          "SELECT Name FROM driver ORDER BY Name",
          "SELECT driver.Name FROM driver ORDER BY driver.Name ASC",
          "SELECT d.Name FROM driver d ORDER BY d.Name ASC",
          "SELECT Name FROM driver ORDER BY Name ASCENDING",
          "SELECT driver.Name FROM driver ORDER BY Name",
          "SELECT Name FROM driver ORDER BY Name COLLATE NOCASE ASC",
          "SELECT Name AS DriverName FROM driver ORDER BY DriverName",
          "SELECT Name FROM driver ORDER BY UPPER(Name)",
          "SELECT Name FROM driver ORDER BY LOWER(Name) ASC"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Racing_Series, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(*) AS DriverCount FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(Driver_ID) FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(*), Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(Driver_ID) AS TotalDrivers FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(Driver_ID) AS TotalDrivers, Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(Driver_ID) AS DriversInSeries FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(*) AS CountOfDrivers, Racing_Series FROM driver GROUP BY Racing_Series"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT Racing_Series, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(*) AS DriverCount FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(Driver_ID) FROM driver GROUP BY Racing_Series",
          "SELECT COUNT(*), Racing_Series FROM driver GROUP BY Racing_Series",
          "SELECT Racing_Series, COUNT(Driver_ID) AS TotalDrivers FROM driver GROUP BY Racing_Series ORDER BY Racing_Series",
          "SELECT Racing_Series, COUNT(*) FROM driver GROUP BY Racing_Series ORDER BY COUNT(*) DESC",
          "SELECT Racing_Series, COUNT(Driver_ID) AS DriversInSeries FROM driver GROUP BY Racing_Series ORDER BY DriversInSeries",
          "SELECT Racing_Series, COUNT(Driver_ID) AS CountOfDrivers FROM driver GROUP BY Racing_Series HAVING COUNT(Driver_ID) > 0",
          "SELECT Racing_Series, COUNT(*) AS TotalDrivers FROM driver WHERE Racing_Series IS NOT NULL GROUP BY Racing_Series"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1'))",
          "SELECT driver.Name, driver.Citizenship FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Model = 'DJ1')",
          "SELECT DISTINCT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver AS d JOIN vehicle_driver AS vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle AS v ON vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1')",
          "SELECT d.Name, d.Citizenship FROM driver d WHERE EXISTS (SELECT * FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE vd.Driver_ID = d.Driver_ID AND v.Model = 'DJ1')",
          "SELECT Name, Citizenship FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1' ORDER BY Name"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1'))",
          "SELECT driver.Name, driver.Citizenship FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'",
          "SELECT d.Name, d.Citizenship FROM driver AS d, vehicle_driver AS vd, vehicle AS v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Model = 'DJ1')",
          "SELECT d.Name, d.Citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT Name, Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID AND v.Model = 'DJ1'",
          "SELECT DISTINCT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'",
          "SELECT driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle_driver.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1')",
          "SELECT d.Name, d.Citizenship FROM driver d WHERE EXISTS (SELECT * FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE vd.Driver_ID = d.Driver_ID AND v.Model = 'DJ1')"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Driver_ID IS NULL",
          "SELECT COUNT(Driver_ID) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Driver_ID IS NULL",
          "SELECT COUNT(*) FROM driver WHERE NOT EXISTS (SELECT Driver_ID FROM vehicle_driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE NOT EXISTS (SELECT Driver_ID FROM vehicle_driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID)"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "vehicle_driver",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver LEFT JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle_driver.Driver_ID IS NULL",
          "SELECT COUNT(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver)",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver WHERE Driver_ID IS NOT NULL)",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)",
          "SELECT COUNT(*) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Driver_ID IS NULL",
          "SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d LEFT OUTER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Driver_ID IS NULL",
          "SELECT COUNT(*) FROM (SELECT Driver_ID FROM driver EXCEPT SELECT Driver_ID FROM vehicle_driver) AS subquery"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Exams",
          "SELECT COUNT(Exam_ID) FROM Exams",
          "SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams",
          "SELECT COUNT(*) AS TotalExams FROM Exams",
          "SELECT COUNT(1) FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) AS TotalUniqueExams FROM Exams",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID IS NOT NULL",
          "SELECT COUNT(Exam_ID) FROM Exams WHERE Exam_ID > 0",
          "SELECT COUNT(*) AS ExamCount FROM Exams WHERE Exam_ID > 0"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Exams",
          "SELECT COUNT(Exam_ID) FROM Exams",
          "SELECT COUNT(1) FROM Exams",
          "SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams",
          "SELECT COUNT(*) AS TotalExams FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) FROM Exams",
          "SELECT COUNT(DISTINCT Exam_ID) AS TotalUniqueExams FROM Exams",
          "SELECT COUNT(Exam_ID) FROM Exams WHERE Exam_ID IS NOT NULL",
          "SELECT COUNT(*) FROM Exams WHERE Exam_ID IS NOT NULL",
          "SELECT COUNT(*) AS ExamCount FROM Exams"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
          "SELECT DISTINCT Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code ASC",
          "SELECT DISTINCT E.Subject_Code FROM Exams E ORDER BY E.Subject_Code ASC",
          "SELECT DISTINCT Subject_Code FROM Exams SORT BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC, Exam_ID ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code COLLATE NOCASE ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY LENGTH(Subject_Code), Subject_Code ASC"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
          "SELECT DISTINCT Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code ASC",
          "SELECT DISTINCT Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code",
          "SELECT DISTINCT Subject_Code FROM Exams SORT BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams SORT BY Subject_Code",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASCENDING",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code COLLATE NOCASE",
          "SELECT DISTINCT Subject_Code FROM Exams ORDER BY LOWER(Subject_Code) ASC"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code <> 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE NOT Subject_Code = 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database'",
          "SELECT E.Exam_Name, E.Exam_Date FROM Exams E WHERE E.Subject_Code <> 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT IN ('Database')",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT LIKE 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code IS NOT 'Database'",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE 'Database' <> Subject_Code",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE 'Database' NOT IN (Subject_Code)",
          "SELECT Exam_Name, Exam_Date FROM Exams WHERE 'Database' != Subject_Code"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE NOT Subject_Code = 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
          "SELECT E.Exam_Date, E.Exam_Name FROM Exams E WHERE E.Subject_Code <> 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT IN ('Database')",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT LIKE 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code IS NOT 'Database'",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE 'Database' <> Subject_Code",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE 'Database' NOT IN (Subject_Code)",
          "SELECT Exam_Date, Exam_Name FROM Exams WHERE 'Database' != Subject_Code"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESCENDING",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code CONTAINS 'data' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE INSTR(Subject_Code, 'data') > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE POSITION('data' IN Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code ILIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE LOWER(Subject_Code) LIKE LOWER('%data%') ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE CHARINDEX('data', Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code REGEXP 'data' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code SIMILAR TO '%data%' ORDER BY Exam_Date DESC"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESCENDING",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code CONTAINS 'data' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE INSTR(Subject_Code, 'data') > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE POSITION('data' IN Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE CHARINDEX('data', Subject_Code) > 0 ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' DESC",
          "SELECT Exam_Date FROM Exams WHERE LOWER(Subject_Code) LIKE '%data%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE UPPER(Subject_Code) LIKE '%DATA%' ORDER BY Exam_Date DESC",
          "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC, Subject_Code ASC"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code, COUNT(*) AS count FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS count FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT COUNT(*), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code ORDER BY COUNT(*) DESC",
          "SELECT Type_of_Question_Code, COUNT(*) AS Total FROM Questions GROUP BY Type_of_Question_Code ORDER BY Total DESC",
          "SELECT Type_of_Question_Code, COUNT(*) AS NumberOfQuestions FROM Questions GROUP BY Type_of_Question_Code ORDER BY NumberOfQuestions",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS QuestionCount FROM Questions GROUP BY Type_of_Question_Code ORDER BY QuestionCount DESC",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code, COUNT(*) AS count FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS Total FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT COUNT(*), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code ORDER BY COUNT(*) DESC",
          "SELECT Type_of_Question_Code, COUNT(*) AS NumberOfQuestions FROM Questions GROUP BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS QuestionCount FROM Questions GROUP BY Type_of_Question_Code ORDER BY QuestionCount",
          "SELECT Type_of_Question_Code, COUNT(*) AS TotalOccurrences FROM Questions GROUP BY Type_of_Question_Code ORDER BY TotalOccurrences DESC",
          "SELECT Type_of_Question_Code, COUNT(*) AS CountOfQuestions FROM Questions GROUP BY Type_of_Question_Code ORDER BY CountOfQuestions"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' ORDER BY Student_Answer_Text",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers AS sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE UPPER(Comments) = 'NORMAL'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE LOWER(Comments) = 'normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments COLLATE SQL_Latin1_General_CP1_CI_AS = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text IS NOT NULL"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'",
          "SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments LIKE 'Normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE UPPER(Comments) = 'NORMAL'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE LOWER(Comments) = 'normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text IS NOT NULL",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' ORDER BY Student_Answer_Text",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments COLLATE UTF8_GENERAL_CI = 'normal'",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text <> ''"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
          "SELECT COUNT(UNIQUE Comments) FROM Student_Answers",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers)",
          "SELECT COUNT(DISTINCT Comments) AS NumberOfUniqueComments FROM Student_Answers",
          "SELECT DISTINCT COUNT(Comments) FROM Student_Answers",
          "SELECT COUNT(*) FROM (SELECT Comments FROM Student_Answers GROUP BY Comments)",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments IS NOT NULL",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments <> ''",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments != ''",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Comments FROM Student_Answers GROUP BY Comments)"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers",
          "SELECT COUNT(UNIQUE Comments) FROM Student_Answers",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers)",
          "SELECT COUNT(DISTINCT Comments) AS NumberOfUniqueComments FROM Student_Answers",
          "SELECT DISTINCT COUNT(Comments) FROM Student_Answers",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Comments FROM Student_Answers GROUP BY Comments)",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments <> ''",
          "SELECT COUNT(DISTINCT Comments) FROM Student_Answers GROUP BY Comments",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Comments FROM Student_Answers GROUP BY Comments)"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text, COUNT(*) AS count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY count DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS Total FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Total DESC",
          "SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT COUNT(Student_Answer_Text) AS Frequency, Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_ID) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC",
          "SELECT Student_Answer_Text, COUNT(1) AS TotalCount FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY TotalCount DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS NumberOfOccurrences FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY NumberOfOccurrences DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS CountOfAnswers FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY CountOfAnswers DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS TotalAnswers FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY TotalAnswers DESC"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Count DESC",
          "SELECT Student_Answer_Text, COUNT(*) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
          "SELECT COUNT(Student_Answer_Text) AS Occurrences, Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Occurrences DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS Total FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Total DESC",
          "SELECT Student_Answer_Text, COUNT(Student_Answer_Text) AS TotalCount FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY TotalCount DESC",
          "SELECT COUNT(*) AS NumOccurrences, Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY NumOccurrences DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS CountOfAnswers FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY CountOfAnswers DESC",
          "SELECT Student_Answer_Text, COUNT(*) AS FrequencyCount FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY FrequencyCount DESC"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID",
          "SELECT first_name, date_of_answer FROM Students, Student_Answers WHERE Students.student_id = Student_Answers.student_id",
          "SELECT Students.First_Name AS StudentFirstName, Student_Answers.Date_of_Answer AS AnswerDate FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name AS FirstName, date_of_answer AS DateOfAnswer FROM Students JOIN Student_Answers ON Students.student_id = Student_Answers.student_id",
          "SELECT `First_Name`, `Date_of_Answer` FROM `Students` JOIN `Student_Answers` ON `Students`.`Student_ID` = `Student_Answers`.`Student_ID`",
          "SELECT First_Name, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer",
          "SELECT DISTINCT Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT S.First_Name AS FirstName, A.Date_of_Answer AS AnswerDate FROM Students S, Student_Answers A WHERE S.Student_ID = A.Student_ID",
          "SELECT first_name, date_of_answer FROM Students INNER JOIN Student_Answers ON student_id = Student_Answers.student_id",
          "SELECT First_Name, Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY First_Name ASC"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID",
          "SELECT first_name, date_of_answer FROM Students, Student_Answers WHERE Students.student_id = Student_Answers.student_id",
          "SELECT Students.First_Name AS StudentFirstName, Student_Answers.Date_of_Answer AS AnswerDate FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT first_name AS FirstName, date_of_answer AS DateOfAnswer FROM Students INNER JOIN Student_Answers ON Students.student_id = Student_Answers.student_id",
          "SELECT `First_Name`, `Date_of_Answer` FROM `Students` JOIN `Student_Answers` ON `Students`.`Student_ID` = `Student_Answers`.`Student_ID`",
          "SELECT first_name, date_of_answer FROM Students JOIN Student_Answers ON Students.student_id = Student_Answers.student_id",
          "SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID",
          "SELECT S.First_Name, A.Date_of_Answer FROM Students AS S, Student_Answers AS A WHERE S.Student_ID = A.Student_ID",
          "SELECT first_name AS 'First Name', date_of_answer AS 'Date of Answer' FROM Students JOIN Student_Answers ON Students.student_id = Student_Answers.student_id",
          "SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.Email_Adress, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID ORDER BY A.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress AS Student_Email, Date_of_Answer AS Answer_Date FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers USING (Student_ID) ORDER BY Date_of_Answer DESC",
          "SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT a.Email_Adress, b.Date_of_Answer FROM Students a JOIN Student_Answers b ON a.Student_ID = b.Student_ID ORDER BY b.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s INNER JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC",
          "SELECT Email_Adress AS Email, Date_of_Answer AS Date FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT DISTINCT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.Email_Adress, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID ORDER BY A.Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress AS StudentEmail, Date_of_Answer AS AnswerDate FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT `Email_Adress`, `Date_of_Answer` FROM `Students` JOIN `Student_Answers` ON `Students`.`Student_ID` = `Student_Answers`.`Student_ID` ORDER BY `Date_of_Answer` DESC",
          "SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC",
          "SELECT email, date FROM (SELECT Email_Adress AS email, Date_of_Answer AS date FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID) AS subquery ORDER BY date DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers USING (Student_ID) ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students LEFT JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT DISTINCT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC",
          "SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT TOP 1 Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC",
          "SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1",
          "SELECT Assessment FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery ORDER BY Count ASC LIMIT 1",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Student_Assessments GROUP BY Assessment) AS SubCounts)",
          "SELECT MIN(Assessment) KEEP (DENSE_RANK FIRST ORDER BY COUNT(*)) FROM Student_Assessments GROUP BY Assessment",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC FETCH FIRST 1 ROWS ONLY",
          "WITH AssessmentCounts AS (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) SELECT Assessment FROM AssessmentCounts WHERE Count = (SELECT MIN(Count) FROM AssessmentCounts)",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC, Assessment ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1",
          "SELECT TOP 1 Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC",
          "SELECT Assessment FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery ORDER BY Count ASC LIMIT 1",
          "SELECT Assessment, MIN(Count) FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS FrequencyTable",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery)",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC FETCH FIRST 1 ROWS ONLY",
          "WITH AssessmentCounts AS (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) SELECT Assessment FROM AssessmentCounts WHERE Count = (SELECT MIN(Count) FROM AssessmentCounts)",
          "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment HAVING Frequency = (SELECT MIN(Frequency) FROM (SELECT COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment) AS SubQuery)"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name FROM Students S JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_ID) >= 2",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT First_Name FROM Students WHERE EXISTS (SELECT 1 FROM Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT S.First_Name FROM Students S, Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_ID) >= 2",
          "SELECT S.First_Name FROM Students S WHERE (SELECT COUNT(*) FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID) >= 2",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_ID) >= 2)",
          "SELECT S.First_Name FROM Students S INNER JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(*) >= 2",
          "SELECT S.First_Name FROM Students S WHERE S.Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_ID) >= 2)",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2)",
          "SELECT S.First_Name FROM Students S JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) AS Filtered ON S.Student_ID = Filtered.Student_ID"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT S.First_Name FROM Students S JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_ID) >= 2",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)",
          "SELECT First_Name FROM Students WHERE EXISTS (SELECT 1 FROM Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID GROUP BY Student_Answers.Student_ID HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT S.First_Name FROM Students S, Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(SA.Student_ID) >= 2",
          "SELECT First_Name FROM Students S WHERE (SELECT COUNT(*) FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID) >= 2",
          "SELECT S.First_Name FROM Students S INNER JOIN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2) AS Filtered ON S.Student_ID = Filtered.Student_ID",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_ID) >= 2)",
          "SELECT S.First_Name FROM Students S WHERE 2 <= (SELECT COUNT(*) FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID)",
          "SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_ID) > 1)",
          "SELECT S.First_Name FROM Students S WHERE EXISTS (SELECT NULL FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID GROUP BY SA.Student_ID HAVING COUNT(SA.Student_ID) >= 2)"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_Text) DESC",
          "SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery)",
          "WITH AnswerCounts AS (SELECT Valid_Answer_Text, COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) SELECT Valid_Answer_Text FROM AnswerCounts WHERE Count = (SELECT MAX(Count) FROM AnswerCounts)",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_Text) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Valid_Answer_Text, COUNT(*) FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(Valid_Answer_ID) = (SELECT MAX(C) FROM (SELECT COUNT(Valid_Answer_ID) AS C FROM Valid_Answers GROUP BY Valid_Answer_Text) Temp)"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID IN (SELECT Valid_Answer_ID FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT V.Valid_Answer_Text FROM Valid_Answers V JOIN Student_Assessments S ON V.Valid_Answer_ID = S.Valid_Answer_ID GROUP BY V.Valid_Answer_Text ORDER BY COUNT(S.Valid_Answer_ID) DESC LIMIT 1",
          "SELECT TOP 1 Valid_Answer_Text FROM Valid_Answers INNER JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID GROUP BY Valid_Answer_Text ORDER BY COUNT(Student_Assessments.Valid_Answer_ID) DESC",
          "SELECT Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID = (SELECT Valid_Answer_ID FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, COUNT(*) AS cnt FROM Valid_Answers JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID GROUP BY Valid_Answer_Text) AS SubQuery ORDER BY cnt DESC LIMIT 1",
          "SELECT Valid_Answer_Text FROM Valid_Answers V, Student_Assessments S WHERE V.Valid_Answer_ID = S.Valid_Answer_ID GROUP BY V.Valid_Answer_Text HAVING COUNT(S.Valid_Answer_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Student_Assessments GROUP BY Valid_Answer_ID) AS Sub)",
          "SELECT Valid_Answer_Text FROM Valid_Answers JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID GROUP BY Valid_Answer_Text HAVING COUNT(Student_Assessments.Valid_Answer_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID) AS Counts)",
          "SELECT Valid_Answer_Text FROM Valid_Answers WHERE Valid_Answer_ID = (SELECT Valid_Answer_ID FROM Student_Assessments GROUP BY Valid_Answer_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID) AS MaxCount))",
          "SELECT FIRST(Valid_Answer_Text) FROM Valid_Answers INNER JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID GROUP BY Valid_Answer_Text ORDER BY COUNT(Student_Assessments.Valid_Answer_ID) DESC",
          "SELECT Valid_Answer_Text FROM Valid_Answers AS V JOIN (SELECT Valid_Answer_ID, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Frequency DESC LIMIT 1) AS MostFrequent ON V.Valid_Answer_ID = MostFrequent.Valid_Answer_ID"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender <> 'M'",
          "SELECT Last_Name FROM Students WHERE NOT Gender = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender != 'M'",
          "SELECT Last_Name FROM Students WHERE Gender NOT IN ('M')",
          "SELECT Last_Name FROM Students WHERE Gender = 'F' OR Gender = 'U'",
          "SELECT Last_Name FROM Students WHERE Gender = 'F' OR Gender = 'MFU'",
          "SELECT Last_Name FROM Students WHERE Gender = 'U'",
          "SELECT Last_Name FROM Students WHERE Gender = 'F'",
          "SELECT Last_Name FROM Students WHERE UPPER(Gender) <> 'M'",
          "SELECT Last_Name FROM Students WHERE LOWER(Gender) <> 'm'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'",
          "SELECT Last_Name FROM Students WHERE NOT Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT IN ('M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'U'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'U')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IS NOT 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT LIKE 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'U' OR Gender_MFU IS NULL",
          "SELECT Last_Name FROM Students WHERE Gender_MFU NOT BETWEEN 'M' AND 'M'"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Gender_MFU, COUNT(Student_ID) AS NumberOfStudents FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) AS StudentCount FROM Students GROUP BY Gender_MFU",
          "SELECT COUNT(Student_ID), Gender_MFU FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU",
          "SELECT COUNT(Student_ID) AS Total, Gender_MFU FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS TotalStudents FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU AS Gender, COUNT(Student_ID) AS CountOfStudents FROM Students GROUP BY Gender_MFU",
          "SELECT COUNT(*) AS Count, Gender_MFU AS Gender FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS Count FROM Students GROUP BY Gender_MFU ORDER BY Gender_MFU",
          "SELECT Gender_MFU AS Gender, COUNT(*) FROM Students GROUP BY Gender_MFU"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Gender_MFU, COUNT(Student_ID) AS number_of_students FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(*) AS count FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU",
          "SELECT s.Gender_MFU, COUNT(s.Student_ID) AS total FROM Students s GROUP BY s.Gender_MFU",
          "SELECT Gender_MFU AS gender, COUNT(Student_ID) AS student_count FROM Students GROUP BY Gender_MFU",
          "SELECT COUNT(Student_ID), Gender_MFU FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS NumberOfStudents FROM Students GROUP BY Gender_MFU",
          "SELECT Gender_MFU, COUNT(Student_ID) AS StudentCount FROM Students GROUP BY Gender_MFU ORDER BY Gender_MFU",
          "SELECT Gender_MFU AS GenderCode, COUNT(Student_ID) AS TotalStudents FROM Students GROUP BY GenderCode",
          "SELECT Gender_MFU, COUNT(Student_ID) AS CountOfStudents FROM Students GROUP BY Gender_MFU ORDER BY COUNT(Student_ID) DESC"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' UNION SELECT Last_Name FROM Students WHERE Gender_MFU = 'M'",
          "SELECT DISTINCT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU LIKE 'F' OR Gender_MFU LIKE 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = ANY (ARRAY['F', 'M'])",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN (SELECT Gender_MFU FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M') ORDER BY Last_Name"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' UNION SELECT Last_Name FROM Students WHERE Gender_MFU = 'M'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU LIKE 'F' OR Gender_MFU LIKE 'M'",
          "SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU = ANY (ARRAY['F', 'M'])",
          "SELECT Last_Name FROM Students WHERE Gender_MFU MATCHES '[FM]'",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN (SELECT Gender_MFU FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M')",
          "SELECT Last_Name FROM Students WHERE Gender_MFU IN (SELECT DISTINCT Gender_MFU FROM Students WHERE Gender_MFU IN ('F', 'M'))"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT S.First_Name FROM Students S LEFT JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID WHERE SA.Student_ID IS NULL",
          "SELECT First_Name FROM Students WHERE NOT EXISTS (SELECT 1 FROM Student_Answers WHERE Student_ID = Students.Student_ID)",
          "SELECT First_Name FROM Students EXCEPT SELECT First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID",
          "SELECT DISTINCT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students S WHERE NOT EXISTS (SELECT NULL FROM Student_Answers SA WHERE SA.Student_ID = S.Student_ID)",
          "SELECT S.First_Name FROM Students S WHERE S.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
          "SELECT DISTINCT S.First_Name FROM Students S LEFT OUTER JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID WHERE SA.Student_ID IS NULL",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers WHERE Student_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers)",
          "SELECT S.First_Name FROM Students S LEFT JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID WHERE SA.Student_ID IS NULL",
          "SELECT First_Name FROM Students WHERE NOT EXISTS (SELECT 1 FROM Student_Answers WHERE Student_ID = Students.Student_ID)",
          "SELECT First_Name FROM Students AS S WHERE NOT EXISTS (SELECT NULL FROM Student_Answers AS SA WHERE SA.Student_ID = S.Student_ID)",
          "SELECT S.First_Name FROM Students S WHERE S.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT DISTINCT S.First_Name FROM Students S WHERE S.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers WHERE Student_ID IS NOT NULL)",
          "SELECT S.First_Name FROM Students S LEFT OUTER JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID WHERE SA.Student_ID IS NULL",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID)",
          "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT DISTINCT Student_ID FROM Student_Answers WHERE Student_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.Student_Answer_Text FROM Student_Answers a JOIN Student_Answers b ON a.Student_Answer_ID = b.Student_Answer_ID WHERE a.Comments = 'Normal' AND b.Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Normal') AND Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Absent')",
          "SELECT a.Student_Answer_Text FROM Student_Answers a WHERE EXISTS (SELECT 1 FROM Student_Answers b WHERE b.Student_Answer_ID = a.Student_Answer_ID AND b.Comments = 'Absent') AND a.Comments = 'Normal'",
          "SELECT a.Student_Answer_Text FROM Student_Answers a WHERE a.Comments = 'Normal' AND a.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Absent')",
          "WITH NormalAnswers AS (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Normal'), AbsentAnswers AS (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Absent') SELECT a.Student_Answer_Text FROM Student_Answers a JOIN NormalAnswers na ON a.Student_Answer_ID = na.Student_Answer_ID JOIN AbsentAnswers aa ON a.Student_Answer_ID = aa.Student_Answer_ID",
          "SELECT a.Student_Answer_Text FROM Student_Answers a, Student_Answers b WHERE a.Student_Answer_ID = b.Student_Answer_ID AND a.Comments = 'Normal' AND b.Comments = 'Absent'",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING SUM(CASE WHEN Comments = 'Normal' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Comments = 'Absent' THEN 1 ELSE 0 END) > 0)",
          "SELECT a.Student_Answer_Text FROM Student_Answers a INNER JOIN Student_Answers b ON a.Student_Answer_ID = b.Student_Answer_ID WHERE a.Comments = 'Normal' AND b.Comments = 'Absent'",
          "SELECT DISTINCT a.Student_Answer_Text FROM Student_Answers a WHERE a.Comments = 'Normal' AND EXISTS (SELECT 1 FROM Student_Answers b WHERE b.Student_Answer_ID = a.Student_Answer_ID AND b.Comments = 'Absent')",
          "SELECT a.Student_Answer_Text FROM Student_Answers a WHERE a.Comments = 'Normal' AND EXISTS (SELECT 1 FROM Student_Answers b WHERE b.Student_Answer_ID = a.Student_Answer_ID AND b.Comments = 'Absent')"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal') INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')",
          "SELECT DISTINCT a.Student_Answer_Text FROM Student_Answers a JOIN Student_Answers b ON a.Student_Answer_Text = b.Student_Answer_Text WHERE a.Comments = 'Normal' AND b.Comments = 'Absent'",
          "SELECT a.Student_Answer_Text FROM Student_Answers a WHERE EXISTS (SELECT 1 FROM Student_Answers b WHERE b.Student_Answer_Text = a.Student_Answer_Text AND b.Comments = 'Normal') AND EXISTS (SELECT 1 FROM Student_Answers c WHERE c.Student_Answer_Text = a.Student_Answer_Text AND c.Comments = 'Absent')",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text HAVING COUNT(DISTINCT Comments) = 2",
          "WITH Normal_Answers AS (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'), Absent_Answers AS (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent') SELECT Normal_Answers.Student_Answer_Text FROM Normal_Answers JOIN Absent_Answers ON Normal_Answers.Student_Answer_Text = Absent_Answers.Student_Answer_Text",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal') AND Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')",
          "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')",
          "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text HAVING SUM(CASE WHEN Comments = 'Normal' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Comments = 'Absent' THEN 1 ELSE 0 END) > 0",
          "SELECT DISTINCT SA.Student_Answer_Text FROM Student_Answers SA WHERE SA.Comments = 'Normal' AND EXISTS (SELECT 1 FROM Student_Answers WHERE Comments = 'Absent' AND Student_Answer_Text = SA.Student_Answer_Text)",
          "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' UNION SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent' HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS QuestionCount FROM Questions GROUP BY Type_of_Question_Code HAVING QuestionCount >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2",
          "SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) > 2",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3 ORDER BY Type_of_Question_Code",
          "SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3)",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS TotalQuestions FROM Questions GROUP BY Type_of_Question_Code HAVING TotalQuestions >= 3",
          "SELECT Type_of_Question_Code FROM (SELECT Type_of_Question_Code, COUNT(Question_ID) AS CountOfQuestions FROM Questions GROUP BY Type_of_Question_Code) AS SubQuery WHERE CountOfQuestions >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3 ORDER BY COUNT(Question_ID) DESC"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3",
          "SELECT Type_of_Question_Code, COUNT(*) AS Question_Count FROM Questions GROUP BY Type_of_Question_Code HAVING Question_Count >= 3",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2",
          "SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3",
          "SELECT Type_of_Question_Code FROM (SELECT Type_of_Question_Code, COUNT(*) AS cnt FROM Questions GROUP BY Type_of_Question_Code) sub WHERE cnt >= 3",
          "SELECT DISTINCT Type_of_Question_Code FROM Questions WHERE Type_of_Question_Code IN (SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3)",
          "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3 ORDER BY Type_of_Question_Code",
          "SELECT Type_of_Question_Code, COUNT(Question_ID) AS Total_Questions FROM Questions GROUP BY Type_of_Question_Code HAVING Total_Questions >= 3"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT * FROM Students",
          "SELECT Students.* FROM Students",
          "SELECT First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students",
          "SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students",
          "SELECT * FROM Students ORDER BY Student_ID",
          "SELECT * FROM Students WHERE Student_ID IS NOT NULL",
          "SELECT Student_ID AS ID, First_Name AS FirstName, Middle_Name AS MiddleName, Last_Name AS LastName, Gender_MFU AS Gender, Student_Address AS Address, Email_Adress AS Email, Cell_Mobile_Phone AS MobilePhone, Home_Phone AS HomePhone FROM Students",
          "SELECT * FROM Students WHERE 1=1",
          "SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students WHERE Student_ID > 0"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "online_exams",
      "infer_predictions": [
        [
          "SELECT * FROM Students",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students",
          "SELECT Students.* FROM Students",
          "SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students",
          "SELECT ALL FROM Students",
          "SELECT Student_ID AS ID, First_Name AS FirstName, Middle_Name AS MiddleName, Last_Name AS LastName, Gender_MFU AS Gender, Student_Address AS Address, Email_Adress AS Email, Cell_Mobile_Phone AS CellPhone, Home_Phone AS HomePhone FROM Students",
          "SELECT * FROM Students ORDER BY Student_ID",
          "SELECT * FROM Students WHERE Student_ID IS NOT NULL",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students ORDER BY Last_Name",
          "SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students WHERE 1=1"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses",
          "SELECT COUNT(address_id) AS NumberOfAddresses FROM Addresses",
          "SELECT COUNT(*) AS TotalAddresses FROM Addresses",
          "SELECT COUNT(1) FROM Addresses",
          "SELECT COUNT(DISTINCT address_id) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT COUNT(*) FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT COUNT(DISTINCT address_id) AS UniqueAddresses FROM Addresses",
          "SELECT COUNT(*) AS AddressCount FROM Addresses WHERE address_id > 0"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses",
          "SELECT COUNT(1) FROM Addresses",
          "SELECT COUNT(address_id) AS NumberOfAddresses FROM Addresses",
          "SELECT COUNT(*) AS AddressCount FROM Addresses",
          "SELECT COUNT(address_id) FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT COUNT(*) FROM Addresses WHERE address_id > 0",
          "SELECT COUNT(DISTINCT address_id) FROM Addresses",
          "SELECT COUNT(DISTINCT address_id) AS UniqueAddressCount FROM Addresses",
          "SELECT COUNT(*) FROM Addresses WHERE address_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT address_id, address_details FROM Addresses",
          "SELECT Addresses.address_id, Addresses.address_details FROM Addresses",
          "SELECT a.address_id, a.address_details FROM Addresses a",
          "SELECT address_id AS 'Address ID', address_details AS 'Address Details' FROM Addresses",
          "SELECT * FROM Addresses",
          "SELECT address_id, address_details FROM Addresses ORDER BY address_id",
          "SELECT DISTINCT address_id, address_details FROM Addresses",
          "SELECT address_id, address_details FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT address_id, address_details FROM Addresses GROUP BY address_id, address_details",
          "SELECT address_id, address_details FROM Addresses LIMIT ALL"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT address_id, address_details FROM Addresses",
          "SELECT Addresses.address_id, Addresses.address_details FROM Addresses",
          "SELECT a.address_id, a.address_details FROM Addresses AS a",
          "SELECT address_id AS 'Address ID', address_details AS 'Address Details' FROM Addresses",
          "SELECT DISTINCT address_id, address_details FROM Addresses",
          "SELECT address_id, address_details FROM Addresses ORDER BY address_id",
          "SELECT * FROM Addresses",
          "SELECT address_id, address_details FROM Addresses WHERE address_id IS NOT NULL",
          "SELECT address_id, address_details FROM Addresses GROUP BY address_id, address_details",
          "SELECT address_id, address_details FROM Addresses LIMIT 100"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products",
          "SELECT COUNT(product_id) FROM Products",
          "SELECT COUNT(product_id) AS TotalProducts FROM Products",
          "SELECT COUNT(*) AS ProductCount FROM Products",
          "SELECT COUNT(1) FROM Products",
          "SELECT COUNT(DISTINCT product_id) FROM Products",
          "SELECT COUNT(DISTINCT product_id) AS UniqueProductCount FROM Products",
          "SELECT COUNT(*) FROM Products WHERE product_id IS NOT NULL",
          "SELECT COUNT(product_name) FROM Products",
          "SELECT COUNT(*) AS TotalNumberOfProducts FROM Products"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products",
          "SELECT COUNT(product_id) FROM Products",
          "SELECT COUNT(1) FROM Products",
          "SELECT COUNT(DISTINCT product_id) FROM Products",
          "SELECT COUNT(product_name) FROM Products",
          "SELECT COUNT(DISTINCT product_type_code) FROM Products",
          "SELECT COUNT(product_price) FROM Products",
          "SELECT COUNT(*) AS TotalProducts FROM Products",
          "SELECT COUNT(product_id) AS ProductCount FROM Products",
          "SELECT COUNT(DISTINCT product_name) FROM Products"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code, product_name FROM Products",
          "SELECT Products.product_id, Products.product_type_code, Products.product_name FROM Products",
          "SELECT p.product_id, p.product_type_code, p.product_name FROM Products p",
          "SELECT product_id AS ProductID, product_type_code AS TypeCode, product_name AS ProductName FROM Products",
          "SELECT * FROM Products WHERE product_id IS NOT NULL AND product_type_code IS NOT NULL AND product_name IS NOT NULL",
          "SELECT product_id, product_type_code, product_name FROM Products ORDER BY product_id",
          "SELECT DISTINCT product_id, product_type_code, product_name FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products GROUP BY product_id, product_type_code, product_name",
          "SELECT product_id, product_type_code, product_name FROM Products WHERE product_name LIKE '%'",
          "SELECT product_id, product_type_code, product_name FROM Products WHERE product_id > 0"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code, product_name FROM Products",
          "SELECT Products.product_id, Products.product_type_code, Products.product_name FROM Products",
          "SELECT p.product_id, p.product_type_code, p.product_name FROM Products p",
          "SELECT product_id AS ID, product_type_code AS TypeCode, product_name AS Name FROM Products",
          "SELECT * FROM Products SELECT product_id, product_type_code, product_name",
          "SELECT product_id, product_type_code, product_name FROM Products ORDER BY product_id",
          "SELECT DISTINCT product_id, product_type_code, product_name FROM Products",
          "SELECT product_id, product_type_code, product_name FROM Products WHERE product_id IS NOT NULL",
          "SELECT product_id, product_type_code, product_name FROM Products GROUP BY product_id, product_type_code, product_name",
          "SELECT product_id, product_type_code, product_name FROM Products LIMIT ALL"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'",
          "SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name LIKE 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' LIMIT 1",
          "SELECT TOP 1 product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' ORDER BY product_price DESC LIMIT 1",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' FETCH FIRST 1 ROWS ONLY",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price > 0"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'",
          "SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name LIKE 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' LIMIT 1",
          "SELECT TOP 1 product_price FROM Products WHERE product_name = 'Monitor'",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' ORDER BY product_price DESC LIMIT 1",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' FETCH FIRST 1 ROWS ONLY",
          "SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price > 0"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products",
          "SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products",
          "SELECT MIN(Products.product_price) AS MinimumPrice, AVG(Products.product_price) AS AveragePrice, MAX(Products.product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(p.product_price) AS Min_Price, AVG(p.product_price) AS Avg_Price, MAX(p.product_price) AS Max_Price FROM Products p",
          "SELECT MINIMUM(product_price), AVERAGE(product_price), MAXIMUM(product_price) FROM Products",
          "SELECT MIN(product_price) AS Minimum, AVG(product_price) AS Average, MAX(product_price) AS Maximum FROM Products",
          "SELECT MIN(product_price) AS \"Minimum Price\", AVG(product_price) AS \"Average Price\", MAX(product_price) AS \"Maximum Price\" FROM Products",
          "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AveragePrice, MAX(product_price) AS MaxPrice FROM Products",
          "SELECT MIN(product_price) AS LowestPrice, AVG(product_price) AS MeanPrice, MAX(product_price) AS HighestPrice FROM Products",
          "SELECT MIN(product_price) AS Minimum_Price, AVG(product_price) AS Average_Price, MAX(product_price) AS Maximum_Price FROM Products"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products",
          "SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products",
          "SELECT MIN(Products.product_price) AS MinimumPrice, AVG(Products.product_price) AS AveragePrice, MAX(Products.product_price) AS MaximumPrice FROM Products",
          "SELECT MIN(product_price) AS Minimum, AVG(product_price) AS Average, MAX(product_price) AS Maximum FROM Products",
          "SELECT MIN(p.product_price) AS MinPrice, AVG(p.product_price) AS AvgPrice, MAX(p.product_price) AS MaxPrice FROM Products p",
          "SELECT MIN(product_price) AS 'Minimum Price', AVG(product_price) AS 'Average Price', MAX(product_price) AS 'Maximum Price' FROM Products",
          "SELECT MIN(product_price) AS Minimum_Price, AVG(product_price) AS Average_Price, MAX(product_price) AS Maximum_Price FROM Products",
          "SELECT MIN(product_price) AS Min_Price, AVG(product_price) AS Avg_Price, MAX(product_price) AS Max_Price FROM Products",
          "SELECT MIN(product_price) AS 'Min Price', AVG(product_price) AS 'Avg Price', MAX(product_price) AS 'Max Price' FROM Products",
          "SELECT MIN(product_price) AS MinimumPrice, AVG(product_price) AS AveragePrice, MAX(product_price) AS MaximumPrice FROM Products"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(product_price) AS AveragePrice FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(Products.product_price) FROM Products WHERE Products.product_type_code = 'Clothes'",
          "SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS AvgPrice FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) AS Average_Price FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT product_type_code, AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(product_price) AS AveragePrice FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT AVG(Products.product_price) FROM Products WHERE Products.product_type_code = 'Clothes'",
          "SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) AS Average_Clothes_Price FROM Products WHERE product_type_code = 'Clothes'",
          "SELECT product_type_code, AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code IN ('Clothes')",
          "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' AND product_price IS NOT NULL"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(*) AS NumberOfHardwareProducts FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(product_id) AS HardwareCount FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(DISTINCT product_id) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(DISTINCT product_name) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(1) FROM Products WHERE product_type_code = 'hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware' GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products WHERE product_type_code = 'hardware' GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(product_id) AS HardwareCount FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT COUNT(*) AS CountOfHardware FROM Products WHERE product_type_code = 'Hardware'",
          "SELECT product_type_code, COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code LIKE 'Hardware'",
          "SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'Hardware'",
          "SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code",
          "SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products AS P)",
          "SELECT Products.product_name FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products)",
          "SELECT product_name FROM Products AS P WHERE P.product_price > (SELECT AVG(product_price) FROM Products AS P)",
          "SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(P2.product_price) FROM Products P2)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P GROUP BY P.product_id)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_type_code)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_price IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)",
          "SELECT name FROM Products WHERE price > (SELECT AVG(price) FROM Products)",
          "SELECT Products.product_name FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products AS P)",
          "SELECT P.product_name FROM Products AS P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products GROUP BY product_id)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products P WHERE P.product_id = Products.product_id)",
          "SELECT product_name FROM Products WHERE product_price > (SELECT AVG(P.product_price) FROM Products P)"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(P.product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT name FROM Products WHERE type_code = 'hardware' AND price > (SELECT AVG(price) FROM Products WHERE type_code = 'hardware')",
          "SELECT P.name FROM Products P WHERE P.type = 'hardware' AND P.price > (SELECT AVG(price) FROM Products WHERE type = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' HAVING product_price > AVG(product_price)",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products P WHERE P.product_type_code = 'hardware')",
          "SELECT name FROM Products WHERE type = 'hardware' AND price > (SELECT AVG(price) FROM Products WHERE type = 'hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(P.product_price) FROM Products WHERE product_type_code = 'hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products P WHERE P.product_type_code = 'hardware')"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT name FROM Products WHERE type_code = 'Hardware' AND price > (SELECT AVG(price) FROM Products WHERE type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' HAVING product_price > AVG(product_price) OVER (PARTITION BY product_type_code)",
          "SELECT P.product_name FROM Products P JOIN (SELECT AVG(product_price) AS avg_price FROM Products WHERE product_type_code = 'Hardware') AS SubQ ON P.product_price > SubQ.avg_price WHERE P.product_type_code = 'Hardware'",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware') GROUP BY product_name HAVING product_price > AVG(product_price)",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware') ORDER BY product_price DESC",
          "SELECT DISTINCT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware') LIMIT 100",
          "SELECT TOP 100 product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')",
          "SELECT TOP 1 product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Clothes' AND P.product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC FETCH FIRST ROW ONLY",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price >= ALL (SELECT product_price FROM Products WHERE product_type_code = 'Clothes')",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 OFFSET 0",
          "SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) AS rank FROM Products WHERE product_type_code = 'Clothes') WHERE rank = 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes') LIMIT 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
          "SELECT TOP 1 product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')",
          "SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Clothes' ORDER BY P.product_price DESC FETCH FIRST ROW ONLY",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes') LIMIT 1",
          "SELECT FIRST(product_name) FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC",
          "SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) AS rank FROM Products WHERE product_type_code = 'Clothes') WHERE rank = 1",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1 OFFSET 0",
          "SELECT product_name FROM Products WHERE product_type_code = 'Clothes' HAVING product_price = MAX(product_price)"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT P.product_id, P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' ORDER BY P.product_price LIMIT 1",
          "SELECT TOP 1 product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware') LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC FETCH FIRST ROW ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware') FETCH FIRST ROW ONLY",
          "SELECT FIRST(product_id), FIRST(product_name) FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_id ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1",
          "SELECT TOP 1 product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')",
          "SELECT P.product_id, P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' ORDER BY P.product_price ASC FETCH FIRST ROW ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_id ASC LIMIT 1",
          "SELECT FIRST(product_id), FIRST(product_name) FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC ROWS 1",
          "SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_id ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products ORDER BY product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESCENDING",
          "SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC",
          "SELECT p.product_name FROM Products p ORDER BY p.product_price DESC",
          "SELECT product_name FROM Products SORT BY product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price IN DESCENDING ORDER",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name ASC",
          "SELECT product_name FROM Products ORDER BY product_price DESC LIMIT ALL",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name",
          "SELECT product_name FROM Products ORDER BY product_price DESCENDING, product_name ASCENDING"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products ORDER BY product_price DESC",
          "SELECT product_name FROM Products SORT BY product_price DESCENDING",
          "SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC",
          "SELECT p.product_name FROM Products p ORDER BY p.product_price DESC",
          "SELECT product_name FROM Products ORDER BY product_price DESCENDING",
          "SELECT product_name, product_price FROM Products ORDER BY product_price DESC",
          "SELECT name FROM Products ORDER BY price DESC",
          "SELECT product_name FROM Products ORDER BY DESC product_price",
          "SELECT product_name FROM Products ORDER BY product_price IN DESCENDING ORDER",
          "SELECT product_name FROM Products ORDER BY product_price DESC, product_name ASC"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT * FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price",
          "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT Products.* FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASCENDING",
          "SELECT * FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASCENDING",
          "SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_type_code, product_price FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC",
          "SELECT product_name, product_price, product_type_code FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price",
          "SELECT Products.product_name FROM Products WHERE Products.product_type_code = 'Hardware' ORDER BY Products.product_price ASC",
          "SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' SORT BY product_price ASCENDING",
          "SELECT name FROM Products WHERE type_code = 'Hardware' ORDER BY price ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASCENDING",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_name ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASCENDING, product_name ASC",
          "SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_name"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) AS NumberOfProducts FROM Products GROUP BY product_type_code",
          "SELECT Products.product_type_code, COUNT(Products.product_id) AS TotalProducts FROM Products GROUP BY Products.product_type_code",
          "SELECT p.product_type_code, COUNT(p.product_id) FROM Products p GROUP BY p.product_type_code",
          "SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(DISTINCT product_id) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC",
          "SELECT product_type_code, COUNT(product_id) AS count_of_products FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 0",
          "SELECT product_type_code, COUNT(product_id) AS total_products FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) AS total_products FROM Products GROUP BY product_type_code",
          "SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code",
          "SELECT COUNT(*), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(DISTINCT product_id) AS count_of_products FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(DISTINCT product_id) FROM Products GROUP BY product_type_code",
          "SELECT COUNT(DISTINCT product_id), product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, COUNT(*) FROM Products GROUP BY product_type_code",
          "SELECT COUNT(product_id) AS NumberOfProducts, product_type_code FROM Products GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code",
          "SELECT Products.product_type_code, AVG(Products.product_price) AS AveragePrice FROM Products GROUP BY Products.product_type_code",
          "SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code ORDER BY avg_price DESC",
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code ORDER BY AveragePrice",
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code ORDER BY product_type_code ASC",
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code ORDER BY AveragePrice DESC"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code",
          "SELECT AVG(product_price) AS AveragePrice, product_type_code FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS Average_Price FROM Products GROUP BY product_type_code ORDER BY product_type_code",
          "SELECT AVG(Products.product_price) AS AveragePrice, Products.product_type_code FROM Products GROUP BY Products.product_type_code",
          "SELECT product_type_code, ROUND(AVG(product_price), 2) AS avg_price FROM Products GROUP BY product_type_code",
          "SELECT p.product_type_code, AVG(p.product_price) AS avg_price FROM Products p GROUP BY p.product_type_code",
          "SELECT product_type_code, FORMAT(AVG(product_price), 2) AS avg_price FROM Products GROUP BY product_type_code",
          "SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code HAVING AVG(product_price) IS NOT NULL",
          "SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products WHERE product_price IS NOT NULL GROUP BY product_type_code"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2",
          "SELECT P.product_type_code FROM Products P GROUP BY P.product_type_code HAVING COUNT(P.product_id) >= 2",
          "SELECT product_type_code FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2)",
          "SELECT DISTINCT product_type_code FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2)",
          "SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code HAVING num_products >= 2",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) AS total FROM Products GROUP BY product_type_code) AS subquery WHERE total >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1",
          "SELECT DISTINCT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2",
          "SELECT P.product_type_code FROM Products P GROUP BY P.product_type_code HAVING COUNT(P.product_id) >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2",
          "SELECT DISTINCT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(product_id) AS cnt FROM Products GROUP BY product_type_code) AS subquery WHERE cnt >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1",
          "SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code HAVING product_count >= 2",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2 ORDER BY product_type_code",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2 ORDER BY COUNT(product_id) DESC"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(product_id) AS total FROM Products GROUP BY product_type_code) AS subquery ORDER BY total DESC LIMIT 1",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(count) FROM (SELECT COUNT(product_id) AS count FROM Products GROUP BY product_type_code) AS counts)",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_type_code, COUNT(product_id) AS count FROM Products GROUP BY product_type_code ORDER BY count DESC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(c) FROM (SELECT COUNT(product_id) AS c FROM Products GROUP BY product_type_code) sub)",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1 OFFSET 0",
          "SELECT product_type_code, MAX(count) FROM (SELECT product_type_code, COUNT(product_id) AS count FROM Products GROUP BY product_type_code) grouped_products"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT P.product_type_code FROM Products P JOIN Order_Items O ON P.product_id = O.product_id GROUP BY P.product_type_code ORDER BY COUNT(P.product_type_code) DESC LIMIT 1",
          "SELECT TOP 1 product_type_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) as cnt FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code) sub ORDER BY cnt DESC LIMIT 1",
          "SELECT product_type_code, COUNT(product_type_code) AS frequency FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY frequency DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_type_code FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items) GROUP BY product_type_code ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT product_type_code FROM Products P INNER JOIN Order_Items O ON P.product_id = O.product_id GROUP BY product_type_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code) T)",
          "SELECT product_type_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(Products.product_id) DESC LIMIT 1",
          "SELECT product_type_code, MAX(count) FROM (SELECT product_type_code, COUNT(*) as count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code) AS frequency_table",
          "SELECT product_type_code FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code ORDER BY COUNT(Order_Items.order_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers",
          "SELECT COUNT(customer_id) AS TotalCustomers FROM Customers",
          "SELECT COUNT(*) AS CustomerCount FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) AS UniqueCustomerCount FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(*) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(customer_id) FROM Customers GROUP BY customer_id HAVING COUNT(customer_id) > 0"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers",
          "SELECT COUNT(customer_id) AS NumberOfCustomers FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers",
          "SELECT COUNT(1) FROM Customers",
          "SELECT COUNT(*) AS TotalCustomers FROM Customers",
          "SELECT COUNT(DISTINCT customer_id) AS UniqueCustomerCount FROM Customers",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT COUNT(*) FROM Customers WHERE customer_id > 0",
          "SELECT COUNT(*) FROM Customers GROUP BY customer_id HAVING COUNT(customer_id) > 0"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id, customer_name FROM Customers",
          "SELECT Customers.customer_id, Customers.customer_name FROM Customers",
          "SELECT c.customer_id, c.customer_name FROM Customers c",
          "SELECT customer_id AS CustomerID, customer_name AS CustomerName FROM Customers",
          "SELECT customer_id, customer_name FROM Customers ORDER BY customer_id",
          "SELECT DISTINCT customer_id, customer_name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name",
          "SELECT * FROM Customers SELECT customer_id, customer_name",
          "SELECT customer_id, customer_name FROM Customers LIMIT ALL"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id, customer_name FROM Customers",
          "SELECT Customers.customer_id, Customers.customer_name FROM Customers",
          "SELECT c.customer_id, c.customer_name FROM Customers c",
          "SELECT customer_id AS ID, customer_name AS Name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers ORDER BY customer_id",
          "SELECT DISTINCT customer_id, customer_name FROM Customers",
          "SELECT customer_id, customer_name FROM Customers WHERE customer_id IS NOT NULL",
          "SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name",
          "SELECT * FROM Customers SELECT customer_id, customer_name",
          "SELECT customer_id, customer_name FROM Customers LIMIT ALL"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT customer_address AS Address, customer_phone AS Phone, customer_email AS Email FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy'",
          "SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT address, phone, email FROM Customers WHERE name = 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy' AND customer_address IS NOT NULL",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy' AND customer_phone IS NOT NULL AND customer_email IS NOT NULL",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy' LIMIT 1",
          "SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy' ORDER BY customer_id DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) AS num_customers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code HAVING COUNT(customer_id) > 0",
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers WHERE payment_method_code IS NOT NULL GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM Customers WHERE payment_method_code IS NOT NULL GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers WHERE payment_method_code <> '' GROUP BY payment_method_code"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) AS customer_count FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code",
          "SELECT COUNT(customer_id) AS total_customers, payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code",
          "SELECT COUNT(*) AS count_of_customers, payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(DISTINCT customer_id) AS total_customers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(customer_id) AS count_of_customers FROM Customers GROUP BY payment_method_code",
          "SELECT payment_method_code, COUNT(*) FROM Customers GROUP BY payment_method_code"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
          "SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code ORDER BY num_customers DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(count) FROM (SELECT COUNT(customer_id) AS count FROM Customers GROUP BY payment_method_code) AS counts)",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code) AS payment_counts ORDER BY customer_count DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
          "WITH PaymentCounts AS (SELECT payment_method_code, COUNT(*) AS Total FROM Customers GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE Total = (SELECT MAX(Total) FROM PaymentCounts)",
          "SELECT payment_method_code, COUNT(customer_id) AS count FROM Customers GROUP BY payment_method_code ORDER BY count DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT payment_method_code, COUNT(*) AS usage_count FROM Customers GROUP BY payment_method_code ORDER BY usage_count DESC LIMIT 1",
          "SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM Customers GROUP BY payment_method_code) AS counts)",
          "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS subquery WHERE count = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS subquery2)",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC FETCH FIRST 1 ROWS ONLY",
          "WITH PaymentCounts AS (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE count = (SELECT MAX(count) FROM PaymentCounts)",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC, payment_method_code ASC LIMIT 1",
          "SELECT payment_method_code, COUNT(payment_method_code) AS frequency FROM Customers GROUP BY payment_method_code ORDER BY frequency DESC LIMIT 1",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.customer_name FROM Customers C INNER JOIN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) PM ON C.payment_method_code = PM.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS sub))",
          "WITH LeastUsed AS (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM LeastUsed)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MIN(COUNT(customer_id)) FROM Customers GROUP BY payment_method_code))",
          "SELECT C.customer_name FROM Customers C JOIN (SELECT payment_method_code, MIN(count) FROM (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS Temp GROUP BY payment_method_code) T ON C.payment_method_code = T.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(*) ASC) AS rnk FROM Customers GROUP BY payment_method_code) AS Ranked WHERE rnk = 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.customer_name FROM Customers C WHERE C.payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT TOP 1 payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code))",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = MIN(COUNT(*)))",
          "SELECT C.customer_name FROM Customers C JOIN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) AS PM ON C.payment_method_code = PM.payment_method_code",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS subquery ORDER BY cnt ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY)",
          "SELECT customer_name FROM Customers WHERE EXISTS (SELECT 1 FROM Customers GROUP BY payment_method_code HAVING Customers.payment_method_code = payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) ORDER BY customer_name"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' LIMIT 1",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name COLLATE NOCASE = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE LOWER(customer_name) = LOWER('Jeromy')",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' AND ROWNUM = 1",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy' ORDER BY customer_number DESC LIMIT 1",
          "SELECT payment_method_code, customer_number FROM Customers WHERE TRIM(customer_name) = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE 'Jeromy'",
          "SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE '%Jeromy%'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'",
          "SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT payment_method_code FROM Customers",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT UNIQUE payment_method_code FROM Customers",
          "SELECT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL GROUP BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code <> ''",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL",
          "SELECT DISTINCT payment_method_code FROM Customers ORDER BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL AND payment_method_code <> ''",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL ORDER BY payment_method_code"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT payment_method_code FROM Customers",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code",
          "SELECT DISTINCT Customers.payment_method_code FROM Customers",
          "SELECT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL GROUP BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL",
          "SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0",
          "SELECT DISTINCT payment_method_code FROM Customers ORDER BY payment_method_code",
          "SELECT payment_method_code FROM Customers WHERE payment_method_code <> '' GROUP BY payment_method_code",
          "SELECT DISTINCT payment_method_code FROM Customers WHERE payment_method_code <> ''",
          "SELECT payment_method_code FROM Customers WHERE payment_method_code IS NOT NULL AND payment_method_code <> '' GROUP BY payment_method_code"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name",
          "SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name ASC",
          "SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC",
          "SELECT product_id AS ID, product_type_code AS Type FROM Products ORDER BY product_name",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASCENDING",
          "SELECT product_id, product_type_code FROM Products ORDER BY Products.product_name ASC",
          "SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY product_name ASC",
          "SELECT p.product_id, p.product_type_code FROM Products AS p ORDER BY p.product_name ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name",
          "SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name ASC",
          "SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC",
          "SELECT product_id, product_type_code FROM Products SORT BY product_name ASCENDING",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name COLLATE NOCASE",
          "SELECT product_id, product_type_code FROM Products ORDER BY LOWER(product_name)",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASCENDING",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC, product_id ASC",
          "SELECT product_id, product_type_code FROM Products ORDER BY product_name, product_id"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(count) FROM (SELECT COUNT(product_id) AS count FROM Products GROUP BY product_type_code) AS counts)",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*)",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code) AS product_counts ORDER BY num_products ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC FETCH FIRST 1 ROWS ONLY",
          "WITH ProductCounts AS (SELECT product_type_code, COUNT(*) AS Total FROM Products GROUP BY product_type_code) SELECT product_type_code FROM ProductCounts WHERE Total = (SELECT MIN(Total) FROM ProductCounts)",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1",
          "SELECT product_type_code, COUNT(*) AS CountOfProducts FROM Products GROUP BY product_type_code ORDER BY CountOfProducts ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Products GROUP BY product_type_code) sub)"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Products GROUP BY product_type_code) as counts)",
          "SELECT TOP 1 product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code)",
          "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) as count FROM Products GROUP BY product_type_code) sub ORDER BY count LIMIT 1",
          "SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC FETCH FIRST ROW ONLY",
          "WITH TypeCounts AS (SELECT product_type_code, COUNT(*) AS TypeCount FROM Products GROUP BY product_type_code) SELECT product_type_code FROM TypeCounts WHERE TypeCount = (SELECT MIN(TypeCount) FROM TypeCounts)",
          "SELECT product_type_code, COUNT(*) as Frequency FROM Products GROUP BY product_type_code ORDER BY Frequency ASC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC, product_type_code DESC LIMIT 1",
          "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) = (SELECT MIN(COUNT(product_type_code)) FROM Products GROUP BY product_type_code)"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders",
          "SELECT COUNT(order_id) AS NumberOfOrders FROM Customer_Orders",
          "SELECT COUNT(*) AS TotalOrders FROM Customer_Orders",
          "SELECT COUNT(1) FROM Customer_Orders",
          "SELECT COUNT(DISTINCT order_id) FROM Customer_Orders",
          "SELECT COUNT(DISTINCT order_id) AS UniqueOrders FROM Customer_Orders",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(order_id) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(*) AS OrderCount FROM Customer_Orders WHERE order_id > 0"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(order_id) FROM Customer_Orders",
          "SELECT COUNT(*) FROM Customer_Orders",
          "SELECT COUNT(order_id) AS NumberOfOrders FROM Customer_Orders",
          "SELECT COUNT(*) AS TotalOrders FROM Customer_Orders",
          "SELECT COUNT(DISTINCT order_id) FROM Customer_Orders",
          "SELECT COUNT(DISTINCT order_id) AS UniqueOrders FROM Customer_Orders",
          "SELECT COUNT(1) FROM Customer_Orders",
          "SELECT COUNT(order_id) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(*) FROM Customer_Orders WHERE order_id IS NOT NULL",
          "SELECT COUNT(DISTINCT order_id) FROM Customer_Orders WHERE order_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT o.order_id, o.order_date, o.order_status_code FROM Customer_Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders, Customers WHERE Customer_Orders.customer_id = Customers.customer_id AND Customers.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO INNER JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO, Customers C WHERE CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders AS O JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO LEFT JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT o.order_id, o.order_date, o.order_status_code FROM Customer_Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders, Customers WHERE Customer_Orders.customer_id = Customers.customer_id AND Customers.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO INNER JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO, Customers C WHERE CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')",
          "SELECT order_id, order_date, order_status_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'",
          "SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO LEFT JOIN Customers C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS order_count FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name",
          "SELECT customer_name, customer_id, COUNT(order_id) AS num_orders FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) AS total_orders FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id, Customers.customer_name",
          "SELECT name, id, (SELECT COUNT(*) FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id) AS orders FROM Customers",
          "SELECT customer_name AS Name, customer_id AS ID, COUNT(order_id) AS Orders FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS order_count FROM Customers C",
          "SELECT customer_name, customer_id, COUNT(order_id) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) FROM Customers C JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name",
          "SELECT customer_name AS CustomerName, customer_id AS CustomerID, COUNT(order_id) AS NumberOfOrders FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS NumberOfOrders FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name ORDER BY C.customer_name"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS num_orders FROM Customers C JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name",
          "SELECT customer_name, customer_id, COUNT(order_id) AS order_count FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT Customers.customer_name, Customers.customer_id, COUNT(Customer_Orders.order_id) AS total_orders FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id, Customers.customer_name",
          "SELECT name, id, (SELECT COUNT(*) FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id) AS orders FROM Customers",
          "SELECT customer_name AS Name, customer_id AS ID, COUNT(order_id) AS Orders FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS num_orders FROM Customers C",
          "SELECT customer_name, customer_id, COUNT(order_id) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY customer_id, customer_name",
          "SELECT C.customer_name, C.customer_id, COUNT(O.order_id) FROM Customers C, Customer_Orders O WHERE C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name",
          "SELECT customer_name, customer_id, COUNT(order_id) AS NumberOfOrders FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id, Customers.customer_name ORDER BY customer_name",
          "SELECT C.customer_name AS CustomerName, C.customer_id AS CustomerID, COUNT(O.order_id) AS OrderCount FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name ORDER BY C.customer_name"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 WHERE T1.customer_id = (SELECT T2.customer_id FROM Customer_Orders AS T2 GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C JOIN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1) AS CO ON C.customer_id = CO.customer_id",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customer_Orders GROUP BY customer_id) AS sub))",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE C.customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT TOP 1 customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Orders CO WHERE CO.customer_id = C.customer_id GROUP BY CO.customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C INNER JOIN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1) CO ON C.customer_id = CO.customer_id",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE C.customer_id = (SELECT CO.customer_id FROM Customer_Orders CO GROUP BY CO.customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C JOIN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOrders ON C.customer_id = MaxOrders.customer_id",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT TOP 1 customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE C.customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(*) = (SELECT MAX(order_count) FROM (SELECT customer_id, COUNT(*) AS order_count FROM Customer_Orders GROUP BY customer_id) AS Sub))",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C INNER JOIN (SELECT customer_id, COUNT(*) AS order_count FROM Customer_Orders GROUP BY customer_id ORDER BY order_count DESC LIMIT 1) CO ON C.customer_id = CO.customer_id",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
          "SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Orders CO WHERE CO.customer_id = C.customer_id GROUP BY CO.customer_id HAVING COUNT(*) = (SELECT MAX(order_count) FROM (SELECT COUNT(*) AS order_count FROM Customer_Orders GROUP BY customer_id) AS Orders))",
          "SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0)"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(order_id), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY order_status_code",
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC",
          "SELECT order_status_code AS status, COUNT(order_id) AS count_of_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY number_of_orders",
          "SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code ORDER BY order_count ASC",
          "SELECT order_status_code, COUNT(*) AS total FROM Customer_Orders GROUP BY order_status_code ORDER BY total DESC"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(*) AS total_orders FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(order_id), order_status_code FROM Customer_Orders GROUP BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code",
          "SELECT COUNT(*), order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY order_status_code",
          "SELECT order_status_code, COUNT(order_id) AS num_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY num_orders DESC",
          "SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC",
          "SELECT order_status_code, COUNT(order_id) AS count_of_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY count_of_orders",
          "SELECT order_status_code, COUNT(order_id) AS total_count FROM Customer_Orders GROUP BY order_status_code ORDER BY total_count DESC",
          "SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code ORDER BY order_count ASC"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC",
          "SELECT order_status_code, COUNT(order_status_code) AS frequency FROM Customer_Orders GROUP BY order_status_code ORDER BY frequency DESC LIMIT 1",
          "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(count) FROM (SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS counts)",
          "WITH OrderCounts AS (SELECT order_status_code, COUNT(*) AS TotalCount FROM Customer_Orders GROUP BY order_status_code) SELECT order_status_code FROM OrderCounts WHERE TotalCount = (SELECT MAX(TotalCount) FROM OrderCounts)",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code ORDER BY count DESC FETCH FIRST ROW ONLY",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC, order_status_code ASC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(cnt) FROM (SELECT COUNT(order_status_code) AS cnt FROM Customer_Orders GROUP BY order_status_code) sub)",
          "SELECT order_status_code, COUNT(order_status_code) AS frequency FROM Customer_Orders GROUP BY order_status_code ORDER BY frequency DESC LIMIT 1",
          "WITH OrderCounts AS (SELECT order_status_code, COUNT(*) AS Count FROM Customer_Orders GROUP BY order_status_code) SELECT order_status_code FROM OrderCounts WHERE Count = (SELECT MAX(Count) FROM OrderCounts)",
          "SELECT order_status_code FROM (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Customer_Orders GROUP BY order_status_code) ranked WHERE rank = 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT order_status_code, COUNT(*) AS Total FROM Customer_Orders GROUP BY order_status_code ORDER BY Total DESC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC, order_status_code ASC LIMIT 1",
          "SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Customer_Orders GROUP BY order_status_code) AS Counts)"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers AS C WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders AS O WHERE O.customer_id = C.customer_id)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(*) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders O WHERE O.customer_id = C.customer_id)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id)",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT * FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT EXISTS IN (SELECT customer_id FROM Customer_Orders)"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL",
          "SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders o WHERE o.customer_id = c.customer_id)",
          "SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Customers AS c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Customer_Orders AS o)",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Customer_Orders o)",
          "SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id)",
          "SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders o WHERE o.customer_id = c.customer_id AND o.customer_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL",
          "SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items O WHERE O.product_id = P.product_id)",
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT P.product_name FROM Products P LEFT OUTER JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL",
          "SELECT DISTINCT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT product_name FROM Products P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items O WHERE O.product_id IS NOT NULL)",
          "SELECT P.product_name FROM Products P LEFT JOIN Order_Items O ON P.product_id = O.product_id WHERE O.order_id IS NULL",
          "SELECT product_name FROM Products WHERE product_id NOT EXISTS (SELECT product_id FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT product_name FROM Products AS P WHERE NOT EXISTS (SELECT NULL FROM Order_Items AS O WHERE O.product_id = P.product_id)"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)",
          "SELECT P.product_name FROM Products P WHERE P.product_id NOT IN (SELECT O.product_id FROM Order_Items O)",
          "SELECT product_name FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id)",
          "SELECT P.product_name FROM Products P LEFT JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL",
          "SELECT product_name FROM Products EXCEPT SELECT product_name FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id",
          "SELECT DISTINCT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items)",
          "SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)",
          "SELECT product_name FROM Products AS P WHERE NOT EXISTS (SELECT NULL FROM Order_Items AS O WHERE O.product_id = P.product_id)",
          "SELECT P.product_name FROM Products P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)",
          "SELECT DISTINCT P.product_name FROM Products P LEFT OUTER JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(Order_Items.order_item_id) AS TotalOrders FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT Order_Items.order_item_id) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id AND Products.product_name = 'Monitor'",
          "SELECT COUNT(*) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(oi.order_item_id) FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(*) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT COUNT(*) AS MonitorOrderCount FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(oi.order_item_id) FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(*) FROM Order_Items oi INNER JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(order_item_id) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT SUM(order_quantity) AS Total_Monitors FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor')",
          "SELECT SUM(OI.order_quantity) AS Total_Ordered_Monitors FROM Products P INNER JOIN Order_Items OI ON P.product_id = OI.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id AND Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) AS Total_Monitors_Ordered FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) AS Total FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT SUM(OI.order_quantity) FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE P.product_name = 'Monitor'",
          "SELECT SUM(order_quantity) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor'))",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT OI.order_id FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor')",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id INNER JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT COUNT(UNIQUE CO.customer_id) FROM Customer_Orders CO, Order_Items OI, Products P WHERE CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO, Order_Items OI, Products P WHERE CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO LEFT JOIN Order_Items OI ON CO.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE EXISTS (SELECT 1 FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE OI.order_id = Customer_Orders.order_id AND P.product_name = 'Monitor')",
          "SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO WHERE EXISTS (SELECT 1 FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE OI.order_id = CO.order_id AND P.product_name = 'Monitor')",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor' GROUP BY CO.customer_id"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c INNER JOIN Customer_Orders co ON c.customer_id = co.customer_id INNER JOIN Order_Items oi ON co.order_id = oi.order_id INNER JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
          "SELECT COUNT(UNIQUE Customers.customer_id) FROM Customers, Customer_Orders, Order_Items, Products WHERE Customers.customer_id = Customer_Orders.customer_id AND Customer_Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT cust.customer_id) FROM Customers cust, Customer_Orders ord, Order_Items itm, Products prod WHERE cust.customer_id = ord.customer_id AND ord.order_id = itm.order_id AND itm.product_id = prod.product_id AND prod.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor')))",
          "SELECT DISTINCT COUNT(Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT Customers.customer_id) AS NumberOfCustomers FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id LEFT JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers, Customer_Orders, Order_Items, Products WHERE Customers.customer_id = Customer_Orders.customer_id AND Customer_Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor' GROUP BY Customers.customer_id",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor' GROUP BY Customers.customer_id HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id",
          "SELECT COUNT(UNIQUE Customers.customer_id) FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Customer_Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders",
          "SELECT COUNT(DISTINCT c.customer_id) FROM Customers c, Customer_Orders co WHERE c.customer_id = co.customer_id",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id",
          "SELECT COUNT(*) FROM (SELECT customer_id FROM Customer_Orders GROUP BY customer_id) AS customer_counts",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id",
          "SELECT COUNT(DISTINCT C.customer_id) FROM Customers C INNER JOIN Customer_Orders CO ON C.customer_id = CO.customer_id",
          "SELECT COUNT(UNIQUE customer_id) FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id)",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders",
          "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Customer_Orders) AS unique_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT COUNT(DISTINCT C.customer_id) FROM Customers C, Customer_Orders CO WHERE C.customer_id = CO.customer_id",
          "SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Customer_Orders UNION SELECT customer_id FROM Customers) AS all_customers",
          "SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT C.customer_id FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id WHERE O.customer_id IS NULL",
          "SELECT customer_id FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders",
          "SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT DISTINCT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT customer_id FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders O WHERE O.customer_id = C.customer_id)",
          "SELECT C.customer_id FROM Customers C WHERE C.customer_id NOT IN (SELECT O.customer_id FROM Customer_Orders O)",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)",
          "SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
          "SELECT customer_id FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)",
          "SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL",
          "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_Orders",
          "SELECT customer_id FROM Customers c WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders o WHERE o.customer_id = c.customer_id)",
          "SELECT DISTINCT customer_id FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Orders)",
          "SELECT c.customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Customer_Orders o)",
          "SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders WHERE customer_id IS NOT NULL)",
          "SELECT customer_id FROM Customers c WHERE NOT EXISTS (SELECT customer_id FROM Customer_Orders o WHERE o.customer_id = c.customer_id)"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.order_id, C.order_date FROM Customer_Orders C JOIN Order_Items O ON C.order_id = O.order_id WHERE O.order_quantity > 6 OR C.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C WHERE EXISTS (SELECT 1 FROM Order_Items O WHERE O.order_id = C.order_id AND O.order_quantity > 6) OR C.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C INNER JOIN Order_Items O ON C.order_id = O.order_id GROUP BY C.order_id, C.order_date HAVING MAX(O.order_quantity) > 6 OR COUNT(DISTINCT O.product_id) > 3",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C WHERE C.order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 UNION SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C LEFT JOIN Order_Items O ON C.order_id = O.order_id GROUP BY C.order_id, C.order_date HAVING MAX(O.order_quantity) > 6 OR COUNT(DISTINCT O.product_id) > 3",
          "SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 UNION ALL SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C WHERE EXISTS (SELECT 1 FROM Order_Items O WHERE O.order_id = C.order_id AND O.order_quantity > 6) OR EXISTS (SELECT 1 FROM Order_Items O WHERE O.order_id = C.order_id GROUP BY O.order_id HAVING COUNT(DISTINCT O.product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C JOIN Order_Items O ON C.order_id = O.order_id GROUP BY C.order_id, C.order_date HAVING MAX(O.order_quantity) > 6 OR COUNT(DISTINCT O.product_id) > 3",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C WHERE C.order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6) OR C.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT C.order_id, C.order_date FROM Customer_Orders C JOIN Order_Items O ON C.order_id = O.order_id WHERE O.order_quantity > 6 OR (SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_id = C.order_id) > 3 GROUP BY C.order_id, C.order_date"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "customers_and_orders",
      "infer_predictions": [
        [
          "SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id, T1.order_date HAVING SUM(T2.order_quantity) > 6 OR COUNT(DISTINCT T2.product_id) > 3",
          "SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(DISTINCT product_id) > 3)",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO WHERE EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.order_id = CO.order_id GROUP BY OI.order_id HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.product_id) > 3)",
          "SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT DISTINCT CO.order_id, CO.order_date FROM Customer_Orders CO INNER JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.product_id) > 3",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(DISTINCT product_id) > 3) OI ON CO.order_id = OI.order_id",
          "SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6 UNION SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO WHERE CO.order_id IN (SELECT OI.order_id FROM Order_Items OI GROUP BY OI.order_id HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.product_id) > 3)",
          "SELECT order_id, order_date FROM Customer_Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE order_id = Customer_Orders.order_id GROUP BY order_id HAVING SUM(order_quantity) > 6 OR COUNT(DISTINCT product_id) > 3)",
          "SELECT CO.order_id, CO.order_date FROM Customer_Orders CO, Order_Items OI WHERE CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.product_id) > 3"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM building",
          "SELECT COUNT(Building_ID) FROM building",
          "SELECT COUNT(DISTINCT Building_ID) FROM building",
          "SELECT COUNT(DISTINCT Name) FROM building",
          "SELECT COUNT(1) FROM building",
          "SELECT COUNT(*) AS NumberOfBuildings FROM building",
          "SELECT COUNT(Building_ID) AS BuildingCount FROM building",
          "SELECT COUNT(DISTINCT Building_ID) AS UniqueBuildingCount FROM building",
          "SELECT COUNT(DISTINCT Name) AS UniqueBuildingNames FROM building",
          "SELECT COUNT(1) AS TotalBuildings FROM building"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM building",
          "SELECT COUNT(Building_ID) FROM building",
          "SELECT COUNT(DISTINCT Building_ID) FROM building",
          "SELECT COUNT(1) FROM building",
          "SELECT COUNT(Building_ID) AS NumberOfBuildings FROM building",
          "SELECT COUNT(*) AS TotalBuildings FROM building",
          "SELECT COUNT(DISTINCT Name) FROM building",
          "SELECT COUNT(*) FROM building GROUP BY Building_ID",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Building_ID FROM building) AS UniqueBuildings",
          "SELECT COUNT(DISTINCT Building_ID) AS CountOfBuildings FROM building"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories",
          "SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC",
          "SELECT b.Name FROM building b ORDER BY b.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT Name AS BuildingName FROM building ORDER BY Number_of_Stories ASC",
          "SELECT Name FROM building SORT BY Number_of_Stories ASC",
          "SELECT building.Name FROM building SORT ORDER BY Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories IN ASCENDING ORDER",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Name ASC"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories",
          "SELECT b.Name FROM building b ORDER BY b.Number_of_Stories ASC",
          "SELECT Name FROM building SORT BY Number_of_Stories ASCENDING",
          "SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASCENDING",
          "SELECT Name FROM building ORDER BY ASC Number_of_Stories",
          "SELECT Name FROM building ORDER BY Number_of_Stories IN ASCENDING ORDER",
          "SELECT Name FROM building ORDER BY Number_of_Stories ASC, Name ASC",
          "SELECT Name, Number_of_Stories FROM building ORDER BY Number_of_Stories ASC"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Address FROM building ORDER BY Completed_Year DESC",
          "SELECT building.Address FROM building ORDER BY building.Completed_Year DESC",
          "SELECT b.Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESCENDING",
          "SELECT Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address ASC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address",
          "SELECT Address, Completed_Year FROM building ORDER BY Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC LIMIT ALL",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address DESC"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Address FROM building ORDER BY Completed_Year DESC",
          "SELECT building.Address FROM building ORDER BY building.Completed_Year DESC",
          "SELECT b.Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESCENDING",
          "SELECT Address FROM building b ORDER BY b.Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address",
          "SELECT Address, Completed_Year FROM building ORDER BY Completed_Year DESC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC LIMIT ALL",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address ASC",
          "SELECT Address FROM building ORDER BY Completed_Year DESC, Address DESC"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
          "SELECT MAX(Number_of_Stories) AS MaxStories FROM building WHERE NOT Completed_Year = 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT IN (1980)",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year <> 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year NOT IN (1980)",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE NOT b.Completed_Year = 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE b.Completed_Year != 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE b.Completed_Year NOT IN (1980)",
          "SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE NOT b.Completed_Year = 1980"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> 1980",
          "SELECT MAX(Number_of_Stories) AS MaxStories FROM building WHERE NOT Completed_Year = 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980",
          "SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year NOT IN (1980)",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT LIKE '1980'",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year IS NOT 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT BETWEEN 1980 AND 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT EQUAL TO 1980",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year <> '1980'",
          "SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT IN ('1980')"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT AVG(Population) AS AveragePopulation FROM region",
          "SELECT AVG(Population) FROM region",
          "SELECT AVG(region.Population) FROM region",
          "SELECT AVG(Population) AS AvgPop FROM region",
          "SELECT AVG(Population) FROM region AS AveragePopulation",
          "SELECT AVG(Population) AS Average_Population FROM region",
          "SELECT AVG(Population) AS AvgPopulation FROM region",
          "SELECT AVG(Population) AS AveragePop FROM region",
          "SELECT AVG(Population) AS PopulationAverage FROM region",
          "SELECT AVG(Population) AS Population_Avg FROM region"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT AVG(Population) AS AveragePopulation FROM region",
          "SELECT AVG(Population) FROM region",
          "SELECT AVG(region.Population) AS AvgPopulation FROM region",
          "SELECT AVG(region.Population) FROM region",
          "SELECT AVG(Population) AS Average_Pop FROM region",
          "SELECT AVG(Population) AS AvgPop FROM region",
          "SELECT AVG(Population) FROM region AS AveragePopulation",
          "SELECT AVG(Population) AS Average_Population FROM region",
          "SELECT AVG(Population) AS PopulationAverage FROM region",
          "SELECT AVG(Population) AS Avg_Population FROM region"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Name ASC",
          "SELECT Name FROM region ORDER BY Name",
          "SELECT region.Name FROM region ORDER BY region.Name ASC",
          "SELECT r.Name FROM region r ORDER BY r.Name ASC",
          "SELECT Name FROM region SORT BY Name ASCENDING",
          "SELECT region.Name FROM region SORT BY Name ASC",
          "SELECT Name FROM region ORDER BY Name ASCENDING",
          "SELECT Name AS RegionName FROM region ORDER BY RegionName ASC",
          "SELECT region.Name AS RegionName FROM region ORDER BY RegionName ASC",
          "SELECT r.Name AS RegionName FROM region r ORDER BY RegionName ASC"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Name ASC",
          "SELECT Name FROM region ORDER BY Name",
          "SELECT region.Name FROM region ORDER BY region.Name ASC",
          "SELECT r.Name FROM region r ORDER BY r.Name ASC",
          "SELECT Name FROM region SORT BY Name ASCENDING",
          "SELECT region.Name FROM region SORT BY Name ASC",
          "SELECT Name FROM region ORDER BY Name ASCENDING",
          "SELECT region.Name FROM region ORDER BY Name ASCENDING",
          "SELECT r.Name FROM region AS r ORDER BY r.Name ASC",
          "SELECT Name FROM region ORDER BY Name ASCENDING"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Area > 10000",
          "SELECT r.Capital FROM region r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000.0",
          "SELECT region.Capital FROM region WHERE region.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 ORDER BY Capital",
          "SELECT DISTINCT Capital FROM region WHERE Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 GROUP BY Capital",
          "SELECT r.Capital FROM region AS r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 AND Capital IS NOT NULL",
          "SELECT Capital FROM region WHERE Area > 10000 LIMIT 100"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Area > 10000",
          "SELECT r.Capital FROM region r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000.0",
          "SELECT region.Capital FROM region WHERE region.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 ORDER BY Area",
          "SELECT Capital FROM region WHERE Area > 10000 AND Capital IS NOT NULL",
          "SELECT DISTINCT Capital FROM region WHERE Area > 10000",
          "SELECT r.Capital FROM region AS r WHERE r.Area > 10000",
          "SELECT Capital FROM region WHERE Area > 10000 GROUP BY Capital",
          "SELECT Capital FROM region WHERE Area > 10000 LIMIT 100"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
          "SELECT R.Capital FROM region R ORDER BY R.Population DESC LIMIT 1",
          "SELECT Capital FROM region ORDER BY Population DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Capital FROM region ORDER BY Population DESC",
          "SELECT Capital FROM region WHERE Population IN (SELECT MAX(Population) FROM region)",
          "SELECT R.Capital FROM region R WHERE R.Population >= ALL (SELECT Population FROM region)",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region LIMIT 1)",
          "SELECT Capital FROM (SELECT Capital, RANK() OVER (ORDER BY Population DESC) AS rank FROM region) WHERE rank = 1",
          "SELECT Capital FROM region AS R1 WHERE NOT EXISTS (SELECT 1 FROM region AS R2 WHERE R2.Population > R1.Population)",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region GROUP BY Region_ID)"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)",
          "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
          "SELECT r.Capital FROM region r WHERE r.Population = (SELECT MAX(Population) FROM region)",
          "SELECT r.Capital FROM region r ORDER BY r.Population DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Capital FROM region WHERE Population IN (SELECT MAX(Population) FROM region)",
          "SELECT TOP 1 Capital FROM region ORDER BY Population DESC",
          "SELECT Capital FROM region AS r WHERE r.Population = (SELECT MAX(Population) FROM region AS r)",
          "SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region) LIMIT 1",
          "SELECT Capital FROM (SELECT Capital, Population FROM region ORDER BY Population DESC) AS subquery LIMIT 1",
          "SELECT Capital FROM region ORDER BY Population DESC, Capital ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
          "SELECT Name FROM region WHERE Area IN (SELECT Area FROM region ORDER BY Area DESC LIMIT 5)",
          "SELECT r.Name FROM region r ORDER BY r.Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT TOP 5 Name FROM region ORDER BY Area DESC",
          "SELECT Name FROM (SELECT Name, Area FROM region ORDER BY Area DESC) AS subquery LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5 OFFSET 0",
          "SELECT Name FROM region AS r WHERE r.Area >= ALL (SELECT Area FROM region ORDER BY Area DESC LIMIT 5)",
          "SELECT Name FROM region WHERE Area >= (SELECT MIN(Area) FROM (SELECT Area FROM region ORDER BY Area DESC LIMIT 5) AS subquery)",
          "SELECT region.Name FROM region ORDER BY region.Area DESC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC, Name ASC LIMIT 5"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
          "SELECT Name FROM region WHERE Area IS NOT NULL ORDER BY Area DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5;",
          "SELECT Name FROM region AS r ORDER BY r.Area DESC LIMIT 5",
          "SELECT r.Name FROM region r ORDER BY r.Area DESC LIMIT 5",
          "SELECT TOP 5 Name FROM region ORDER BY Area DESC",
          "SELECT Name FROM region ORDER BY Area DESC, Name ASC LIMIT 5",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5 OFFSET 0",
          "SELECT Name FROM region ORDER BY Area DESC LIMIT 5 OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY",
          "SELECT region.Name FROM region ORDER BY region.Area DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Name AS BuildingName, region.Name AS RegionName FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name AS Building, r.Name AS Region FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT bld.Name AS 'Building Name', reg.Name AS 'Region Name' FROM building bld, region reg WHERE bld.Region_ID = reg.Region_ID",
          "SELECT building.Name AS Building, region.Name AS Region FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT B.Name, R.Name FROM building B JOIN region R ON B.Region_ID = R.Region_ID",
          "SELECT `Name` AS BuildingName, (SELECT Name FROM region WHERE Region_ID = building.Region_ID) AS RegionName FROM building",
          "SELECT building.Name AS Building, region.Name AS Region FROM building LEFT JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT DISTINCT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Name AS 'Building', region.Name AS 'Region' FROM building JOIN region ON building.Region_ID = region.Region_ID ORDER BY building.Name"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Name AS BuildingName, region.Name AS RegionName FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name, r.Name FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT bld.Name AS 'Building Name', reg.Name AS 'Region Name' FROM building bld, region reg WHERE bld.Region_ID = reg.Region_ID",
          "SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT Name AS Building, (SELECT Name FROM region WHERE Region_ID = building.Region_ID) AS Region FROM building",
          "SELECT b.Name AS Building, r.Name AS Region FROM building b LEFT JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT building.Name AS BuildingName, region.Name AS RegionName FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Name AS 'Building', r.Name AS 'Region' FROM building b RIGHT JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT DISTINCT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Name AS 'Building Name', region.Name AS 'Region Name' FROM building LEFT OUTER JOIN region ON building.Region_ID = region.Region_ID"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Name FROM region R WHERE R.Region_ID IN (SELECT B.Region_ID FROM building B GROUP BY B.Region_ID HAVING COUNT(*) > 1)",
          "SELECT region.Name FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Name HAVING COUNT(building.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) > 1)",
          "SELECT DISTINCT region.Name FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) > 1",
          "SELECT region.Name FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(DISTINCT building.Building_ID) > 1",
          "SELECT R.Name FROM region AS R JOIN building AS B ON R.Region_ID = B.Region_ID GROUP BY R.Region_ID HAVING COUNT(B.Building_ID) > 1",
          "SELECT region.Name FROM region WHERE EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID GROUP BY building.Region_ID HAVING COUNT(*) > 1)",
          "SELECT Name FROM region R WHERE (SELECT COUNT(*) FROM building B WHERE B.Region_ID = R.Region_ID) > 1",
          "SELECT region.Name FROM region INNER JOIN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1) AS SubQuery ON region.Region_ID = SubQuery.Region_ID",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Name FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Name HAVING COUNT(B.Building_ID) > 1",
          "SELECT region.Name FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(building.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)",
          "SELECT DISTINCT R.Name FROM region R, building B WHERE R.Region_ID = B.Region_ID GROUP BY R.Name HAVING COUNT(B.Building_ID) > 1",
          "SELECT region.Name FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(DISTINCT building.Building_ID) > 1",
          "SELECT R.Name FROM region AS R JOIN building AS B ON R.Region_ID = B.Region_ID GROUP BY R.Name HAVING COUNT(*) > 1",
          "SELECT Name FROM region WHERE EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID GROUP BY Region_ID HAVING COUNT(Building_ID) > 1)",
          "SELECT region.Name FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Name HAVING COUNT(building.Building_ID) > 1",
          "SELECT R.Name FROM region R INNER JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Name HAVING COUNT(B.Building_ID) > 1",
          "SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(Building_ID) > 1)"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT r.Capital FROM region r JOIN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1) b ON r.Region_ID = b.Region_ID",
          "SELECT r.Capital FROM region r WHERE r.Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT TOP 1 Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC)",
          "SELECT r.Capital FROM region r INNER JOIN (SELECT Region_ID, COUNT(*) AS cnt FROM building GROUP BY Region_ID ORDER BY cnt DESC LIMIT 1) b ON r.Region_ID = b.Region_ID",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM building GROUP BY Region_ID) t))",
          "SELECT r.Capital FROM region r, (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1) b WHERE r.Region_ID = b.Region_ID",
          "WITH RankedRegions AS (SELECT Region_ID, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM building GROUP BY Region_ID) SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM RankedRegions WHERE rank = 1)",
          "SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM (SELECT Region_ID, COUNT(*) AS CountOfBuildings FROM building GROUP BY Region_ID ORDER BY CountOfBuildings DESC) AS Result LIMIT 1)",
          "SELECT r.Capital FROM region r WHERE EXISTS (SELECT 1 FROM building b WHERE b.Region_ID = r.Region_ID GROUP BY b.Region_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT R.Capital FROM region R JOIN building B ON R.Region_ID = B.Region_ID GROUP BY R.Region_ID, R.Capital ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT region.Capital FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital HAVING COUNT(building.Building_ID) = (SELECT MAX(BuildingCount) FROM (SELECT COUNT(building.Building_ID) AS BuildingCount FROM building GROUP BY building.Region_ID) AS SubQuery)",
          "SELECT TOP 1 region.Capital FROM region, building WHERE region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(building.Building_ID) DESC",
          "SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(building.Building_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT R.Capital FROM region R, building B WHERE R.Region_ID = B.Region_ID GROUP BY R.Region_ID, R.Capital ORDER BY COUNT(B.Building_ID) DESC LIMIT 1",
          "SELECT region.Capital FROM region LEFT JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(building.Building_ID) DESC LIMIT 1",
          "SELECT FIRST(region.Capital) FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(building.Building_ID) DESC",
          "SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital HAVING COUNT(building.Building_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Region_ID) AS Counts)",
          "SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT region.Capital FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital ORDER BY COUNT(building.Building_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Address, r.Capital FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT Address, Capital FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT A.Address, C.Capital FROM building AS A, region AS C WHERE A.Region_ID = C.Region_ID",
          "SELECT building.Address AS BuildingAddress, region.Capital AS RegionCapital FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT Address, Capital FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT bld.Address, reg.Capital FROM building bld JOIN region reg ON bld.Region_ID = reg.Region_ID",
          "SELECT Address AS 'Building Address', Capital AS 'Region Capital' FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Capital FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT DISTINCT building.Address, region.Capital FROM building LEFT JOIN region ON building.Region_ID = region.Region_ID"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Address, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT b.Address, r.Name FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID",
          "SELECT Address, Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT A.Address, N.Name FROM building A, region N WHERE A.Region_ID = N.Region_ID",
          "SELECT building.Address AS BuildingAddress, region.Name AS RegionName FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT Address, Name FROM building INNER JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT bld.Address, reg.Name FROM building bld JOIN region reg ON bld.Region_ID = reg.Region_ID",
          "SELECT Address AS 'Building Address', Name AS 'Region Name' FROM building JOIN region ON building.Region_ID = region.Region_ID",
          "SELECT building.Address, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID",
          "SELECT b.Address AS 'Address', r.Name AS 'Region' FROM building b JOIN region r ON b.Region_ID = r.Region_ID"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building INNER JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building b, region r WHERE b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building, region WHERE building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')",
          "SELECT b.Number_of_Stories FROM building b WHERE EXISTS (SELECT 1 FROM region r WHERE r.Region_ID = b.Region_ID AND r.Name = 'Abruzzo')",
          "SELECT Number_of_Stories FROM building WHERE Region_ID = (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT b.Name, b.Number_of_Stories FROM building AS b INNER JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Name, Number_of_Stories FROM building, region WHERE building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT b.Name, b.Number_of_Stories FROM building b, region r WHERE b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'",
          "SELECT Name, Number_of_Stories FROM building INNER JOIN region ON building.Region_ID = region.Region_ID AND region.Name = 'Abruzzo'",
          "SELECT building.Name AS BuildingName, building.Number_of_Stories AS Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'",
          "SELECT b.Name, b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo' ORDER BY b.Name",
          "SELECT Name, Number_of_Stories FROM building WHERE Region_ID IN (SELECT Region_ID FROM region WHERE Name = 'Abruzzo')",
          "SELECT b.Name, b.Number_of_Stories FROM building b LEFT JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'",
          "SELECT Name, Number_of_Stories FROM building WHERE EXISTS (SELECT 1 FROM region WHERE building.Region_ID = region.Region_ID AND Name = 'Abruzzo')"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year, COUNT(Building_ID) AS NumberOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT Completed_Year, COUNT(*) AS NumberOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(*) FROM building b GROUP BY b.Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) AS BuildingCount FROM building GROUP BY Completed_Year ORDER BY Completed_Year",
          "SELECT Completed_Year, COUNT(*) AS BuildingCount FROM building GROUP BY Completed_Year ORDER BY Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) AS NumberOfBuildings FROM building GROUP BY Completed_Year ORDER BY NumberOfBuildings DESC",
          "SELECT Completed_Year, COUNT(*) AS NumberOfBuildings FROM building GROUP BY Completed_Year ORDER BY NumberOfBuildings DESC",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year",
          "SELECT Completed_Year, COUNT(*) AS NumberOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(b.Building_ID) AS BuildingCount FROM building b GROUP BY b.Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) AS TotalBuildings FROM building GROUP BY Completed_Year ORDER BY Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building WHERE Completed_Year IS NOT NULL GROUP BY Completed_Year",
          "SELECT b.Completed_Year, COUNT(*) FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year",
          "SELECT Completed_Year AS Year, COUNT(Building_ID) AS CountOfBuildings FROM building GROUP BY Completed_Year",
          "SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year HAVING Completed_Year IS NOT NULL",
          "SELECT Completed_Year, COUNT(Building_ID) AS BuildingsCompleted FROM building GROUP BY Completed_Year ORDER BY BuildingsCompleted DESC",
          "SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM building GROUP BY Completed_Year) AS subquery)",
          "SELECT Completed_Year, COUNT(*) AS BuildingCount FROM building GROUP BY Completed_Year ORDER BY BuildingCount DESC FETCH FIRST 1 ROWS ONLY",
          "WITH YearlyCount AS (SELECT Completed_Year, COUNT(*) AS TotalBuildings FROM building GROUP BY Completed_Year) SELECT Completed_Year FROM YearlyCount WHERE TotalBuildings = (SELECT MAX(TotalBuildings) FROM YearlyCount)",
          "SELECT Completed_Year FROM (SELECT Completed_Year, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM building GROUP BY Completed_Year) sub WHERE rank = 1",
          "SELECT b.Completed_Year FROM building b GROUP BY b.Completed_Year ORDER BY COUNT(b.Completed_Year) DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC LIMIT 1",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) AS Count FROM building GROUP BY Completed_Year ORDER BY Count DESC) AS Result LIMIT 1"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Completed_Year, COUNT(*) AS Count FROM building GROUP BY Completed_Year ORDER BY Count DESC",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM building GROUP BY Completed_Year) AS counts)",
          "SELECT Completed_Year, COUNT(*) AS NumberOfBuildings FROM building GROUP BY Completed_Year ORDER BY NumberOfBuildings DESC LIMIT 1",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) AS count FROM building GROUP BY Completed_Year ORDER BY count DESC LIMIT 1) AS MostBuildings",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Completed_Year, COUNT(Completed_Year) AS Total FROM building GROUP BY Completed_Year ORDER BY Total DESC LIMIT 1",
          "SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT MAX(Completed_Year) FROM (SELECT Completed_Year, COUNT(*) AS TotalCount FROM building GROUP BY Completed_Year ORDER BY TotalCount DESC LIMIT 1) AS MaxYear",
          "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Region_ID IS NULL",
          "SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)",
          "SELECT Name FROM region r WHERE NOT EXISTS (SELECT NULL FROM building b WHERE b.Region_ID = r.Region_ID)",
          "SELECT DISTINCT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building)",
          "SELECT r.Name FROM region r WHERE r.Region_ID NOT IN (SELECT b.Region_ID FROM building b)",
          "SELECT Name FROM region EXCEPT SELECT Name FROM region JOIN building ON region.Region_ID = building.Region_ID",
          "SELECT region.Name FROM region LEFT OUTER JOIN building ON region.Region_ID = building.Region_ID WHERE building.Region_ID IS NULL",
          "SELECT Name FROM region r WHERE r.Region_ID NOT IN (SELECT Region_ID FROM building WHERE Region_ID IS NOT NULL)",
          "SELECT Name FROM region AS r WHERE NOT EXISTS (SELECT * FROM building AS b WHERE b.Region_ID = r.Region_ID)"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
          "SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Region_ID IS NULL",
          "SELECT region.Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)",
          "SELECT Name FROM region r WHERE r.Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT NULL FROM building b WHERE b.Region_ID = r.Region_ID)",
          "SELECT Name FROM region EXCEPT SELECT Name FROM region JOIN building ON region.Region_ID = building.Region_ID",
          "SELECT region.Name FROM region LEFT OUTER JOIN building ON region.Region_ID = building.Region_ID WHERE building.Region_ID IS NULL",
          "SELECT Name FROM region r WHERE r.Region_ID NOT IN (SELECT b.Region_ID FROM building b)",
          "SELECT DISTINCT r.Name FROM region r WHERE r.Region_ID NOT IN (SELECT b.Region_ID FROM building b)",
          "SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT * FROM building b WHERE b.Region_ID = r.Region_ID)"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20) INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT a.Completed_Year FROM building a JOIN building b ON a.Completed_Year = b.Completed_Year WHERE a.Number_of_Stories > 20 AND b.Number_of_Stories < 15",
          "SELECT DISTINCT a.Completed_Year FROM building a, building b WHERE a.Completed_Year = b.Completed_Year AND a.Number_of_Stories > 20 AND b.Number_of_Stories < 15",
          "WITH HighRise AS (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20), LowRise AS (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15) SELECT Completed_Year FROM HighRise WHERE Completed_Year IN (SELECT Completed_Year FROM LowRise)",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15)",
          "SELECT b1.Completed_Year FROM building b1 WHERE EXISTS (SELECT 1 FROM building b2 WHERE b1.Completed_Year = b2.Completed_Year AND b2.Number_of_Stories < 15) AND b1.Number_of_Stories > 20",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 UNION SELECT Completed_Year FROM building WHERE Number_of_Stories < 15 HAVING COUNT(*) > 1",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) OVER (PARTITION BY Completed_Year) AS cnt FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15) tmp WHERE cnt > 1",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15 GROUP BY Completed_Year HAVING COUNT(*) > 1)",
          "SELECT Completed_Year FROM building WHERE (Number_of_Stories > 20 OR Number_of_Stories < 15) GROUP BY Completed_Year HAVING MIN(Number_of_Stories) < 15 AND MAX(Number_of_Stories) > 20"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20) INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15",
          "SELECT a.Completed_Year FROM building a JOIN building b ON a.Completed_Year = b.Completed_Year WHERE a.Number_of_Stories > 20 AND b.Number_of_Stories < 15",
          "SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15)",
          "WITH High AS (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20), Low AS (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15) SELECT High.Completed_Year FROM High JOIN Low ON High.Completed_Year = Low.Completed_Year",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15 GROUP BY Completed_Year)",
          "SELECT Completed_Year FROM building WHERE (Number_of_Stories > 20 OR Number_of_Stories < 15) GROUP BY Completed_Year HAVING COUNT(DISTINCT CASE WHEN Number_of_Stories > 20 THEN 'high' WHEN Number_of_Stories < 15 THEN 'low' END) = 2",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 UNION ALL SELECT Completed_Year FROM building WHERE Number_of_Stories < 15 HAVING COUNT(*) > 1",
          "SELECT Completed_Year FROM (SELECT Completed_Year, COUNT(*) OVER (PARTITION BY Completed_Year) AS cnt FROM building WHERE Number_of_Stories > 20 OR Number_of_Stories < 15) sub WHERE cnt > 1",
          "SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 AND EXISTS (SELECT 1 FROM building WHERE Number_of_Stories < 15 AND Completed_Year = building.Completed_Year)",
          "SELECT Completed_Year FROM building b1 WHERE EXISTS (SELECT 1 FROM building b2 WHERE b1.Completed_Year = b2.Completed_Year AND b2.Number_of_Stories < 15) AND b1.Number_of_Stories > 20"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT DISTINCT Address FROM building",
          "SELECT Address FROM building GROUP BY Address",
          "SELECT DISTINCT(Address) FROM building",
          "SELECT Address FROM building WHERE Address IS NOT NULL GROUP BY Address",
          "SELECT DISTINCT b.Address FROM building b",
          "SELECT DISTINCT Address FROM building ORDER BY Address",
          "SELECT DISTINCT Address AS UniqueAddresses FROM building",
          "SELECT DISTINCT Address FROM building WHERE Address <> ''",
          "SELECT DISTINCT Address FROM building WHERE Address IS NOT NULL",
          "SELECT DISTINCT Address FROM building WHERE Address != ''"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT DISTINCT Address FROM building",
          "SELECT Address FROM building GROUP BY Address",
          "SELECT DISTINCT building.Address FROM building",
          "SELECT building.Address FROM building GROUP BY building.Address",
          "SELECT DISTINCT b.Address FROM building b",
          "SELECT b.Address FROM building b GROUP BY b.Address",
          "SELECT DISTINCT Address FROM building ORDER BY Address",
          "SELECT Address FROM building WHERE Address IS NOT NULL GROUP BY Address",
          "SELECT DISTINCT Address FROM building WHERE Address <> ''",
          "SELECT Address FROM building WHERE Address IS NOT NULL AND Address <> '' GROUP BY Address"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
          "SELECT b.Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESCENDING",
          "SELECT Completed_Year, Number_of_Stories FROM building ORDER BY Number_of_Stories DESC",
          "SELECT building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY DESC Number_of_Stories",
          "SELECT Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories IN DESCENDING ORDER",
          "SELECT Completed_Year, COUNT(Number_of_Stories) AS Stories FROM building GROUP BY Completed_Year ORDER BY Stories DESC",
          "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year DESC"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "region_building",
      "infer_predictions": [
        [
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC",
          "SELECT building.Name, building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC",
          "SELECT b.Name, b.Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESCENDING",
          "SELECT Name, Completed_Year FROM building SORT BY Number_of_Stories DESC",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year DESC",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year ASC",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC LIMIT ALL",
          "SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC, Name"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
          "SELECT * FROM Channels ORDER BY Channel_Details",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details",
          "SELECT Channel_ID, Channel_Details FROM Channels ORDER BY Channel_Details ASC",
          "SELECT Channel_Details FROM Channels SORT BY Channel_Details ASCENDING",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASCENDING",
          "SELECT Channel_Details FROM Channels ORDER BY 1",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details COLLATE NOCASE",
          "SELECT Channel_Details FROM Channels ORDER BY LOWER(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY UPPER(Channel_Details) ASC"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details",
          "SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY 1",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details COLLATE NOCASE ASC",
          "SELECT * FROM Channels ORDER BY Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY ASCII(Channel_Details)",
          "SELECT Channel_Details FROM Channels ORDER BY LENGTH(Channel_Details), Channel_Details ASC",
          "SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASCENDING",
          "SELECT Channel_Details FROM Channels ORDER BY LOWER(Channel_Details) ASC"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Services",
          "SELECT COUNT(Service_ID) FROM Services",
          "SELECT COUNT(Service_ID) AS NumberOfServices FROM Services",
          "SELECT COUNT(*) AS TotalServices FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) AS TotalUniqueServices FROM Services",
          "SELECT COUNT(1) FROM Services",
          "SELECT COUNT(1) AS ServiceCount FROM Services",
          "SELECT COUNT(Service_ID) FROM Services WHERE Service_ID IS NOT NULL",
          "SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Services",
          "SELECT COUNT(Service_ID) FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) FROM Services",
          "SELECT COUNT(1) FROM Services",
          "SELECT COUNT(Service_ID) AS NumberOfServices FROM Services",
          "SELECT COUNT(DISTINCT Service_ID) AS TotalServices FROM Services",
          "SELECT COUNT(*) AS ServiceCount FROM Services",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Service_ID FROM Services) AS UniqueServices",
          "SELECT COUNT(Service_ID) FROM Services WHERE Service_ID IS NOT NULL",
          "SELECT COUNT(*) FROM Services GROUP BY Service_ID HAVING COUNT(Service_ID) > 0"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(CountType) FROM (SELECT COUNT(*) AS CountType FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS SubQuery)",
          "WITH CountedTypes AS (SELECT Analytical_Layer_Type_Code, COUNT(*) AS TypeCount FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) SELECT Analytical_Layer_Type_Code FROM CountedTypes WHERE TypeCount = (SELECT MAX(TypeCount) FROM CountedTypes)",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) WHERE Rank = 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC, Analytical_Layer_Type_Code ASC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Total FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Total DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC, Analytical_Layer_Type_Code LIMIT 1"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) tmp)",
          "WITH CountedTypes AS (SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) SELECT Analytical_Layer_Type_Code FROM CountedTypes WHERE Count = (SELECT MAX(Count) FROM CountedTypes)",
          "SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) ranked WHERE rank = 1",
          "SELECT a.Analytical_Layer_Type_Code FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code ORDER BY COUNT(a.Analytical_Layer_Type_Code) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC FETCH FIRST ROW ONLY",
          "SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC FETCH FIRST ROW WITH TIES",
          "SELECT FIRST_VALUE(Analytical_Layer_Type_Code) OVER (ORDER BY COUNT(*) DESC) AS MostFrequentType FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT Services.Service_Details FROM Services, Customers_and_Services, Customers WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS, Customers AS C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customer_details = 'Hardy Kutch'",
          "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
          "SELECT DISTINCT service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id INNER JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customer_details = 'Hardy Kutch'",
          "SELECT service_details FROM services, customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch'",
          "SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customers c ON cs.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS, Customers AS C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'",
          "SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customers.customer_details = 'Hardy Kutch'",
          "SELECT DISTINCT service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id INNER JOIN customers ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch'",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'",
          "SELECT Services.Service_Details FROM Services, Customers_and_Services, Customers WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services.Customer_ID = Customers.Customer_ID AND Customers.Customer_Details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID GROUP BY S.Service_ID HAVING COUNT(CI.Service_ID) > 3",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3)",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Service_ID = S.Service_ID GROUP BY CI.Service_ID HAVING COUNT(CI.Service_ID) > 3)",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customer_Interactions CI WHERE S.Service_ID = CI.Service_ID GROUP BY S.Service_ID HAVING COUNT(CI.Service_ID) > 3",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID GROUP BY S.Service_ID HAVING COUNT(*) > 3",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI GROUP BY CI.Service_ID HAVING COUNT(CI.Service_ID) > 3)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(Service_ID) > 3)",
          "SELECT S.Service_Details FROM Services S JOIN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3) AS CI ON S.Service_ID = CI.Service_ID",
          "SELECT S.Service_Details FROM Services S WHERE (SELECT COUNT(*) FROM Customer_Interactions CI WHERE CI.Service_ID = S.Service_ID) > 3",
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID GROUP BY S.Service_ID, S.Service_Details HAVING COUNT(CI.Service_ID) > 3"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID GROUP BY CI.Service_ID HAVING COUNT(CI.Service_ID) > 3",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3)",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID GROUP BY Customer_Interactions.Service_ID HAVING COUNT(Customer_Interactions.Service_ID) > 3",
          "SELECT S.Service_Details FROM Services S, Customer_Interactions CI WHERE S.Service_ID = CI.Service_ID GROUP BY CI.Service_ID HAVING COUNT(CI.Service_ID) > 3",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(Service_ID) > 3)",
          "SELECT Services.Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID GROUP BY Customer_Interactions.Service_ID HAVING COUNT(Customer_Interactions.Service_ID) > 3",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT NULL FROM Customer_Interactions WHERE Services.Service_ID = Customer_Interactions.Service_ID GROUP BY Customer_Interactions.Service_ID HAVING COUNT(*) > 3)",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI GROUP BY CI.Service_ID HAVING COUNT(CI.Service_ID) > 3)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)",
          "SELECT S.Service_Details FROM Services S WHERE (SELECT COUNT(*) FROM Customer_Interactions CI WHERE CI.Service_ID = S.Service_ID GROUP BY CI.Service_ID) > 3"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CI.Customer_ID) DESC LIMIT 1",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(*) DESC",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(Customer_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Customer_ID) as cnt FROM Customer_Interactions GROUP BY Customer_ID) T))",
          "SELECT C.Customer_Details FROM Customers C, (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID ORDER BY COUNT(Customer_ID) DESC LIMIT 1) AS MaxUsed WHERE C.Customer_ID = MaxUsed.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CI.Customer_ID FROM Customer_Interactions CI GROUP BY CI.Customer_ID ORDER BY COUNT(CI.Customer_ID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID, COUNT(*) as Interaction_Count FROM Customer_Interactions GROUP BY Customer_ID ORDER BY Interaction_Count DESC LIMIT 1) CI ON C.Customer_ID = CI.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Customer_ID = C.Customer_ID GROUP BY CI.Customer_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Customer_Interactions GROUP BY Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN (SELECT Customer_ID, COUNT(*) as TotalInteractions FROM Customer_Interactions GROUP BY Customer_ID ORDER BY TotalInteractions DESC LIMIT 1) CI ON C.Customer_ID = CI.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CI.Customer_ID FROM Customer_Interactions CI GROUP BY CI.Customer_ID HAVING COUNT(CI.Customer_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Customer_ID) AS Count FROM Customer_Interactions GROUP BY Customer_ID) AS Counts))"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC LIMIT 1)",
          "SELECT C.* FROM Customers C JOIN (SELECT Customer_ID, COUNT(Service_ID) AS Service_Count FROM Customers_and_Services GROUP BY Customer_ID ORDER BY Service_Count DESC LIMIT 1) AS Sub ON C.Customer_ID = Sub.Customer_ID",
          "SELECT Customers.* FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(Service_ID) = (SELECT MAX(Service_Count) FROM (SELECT COUNT(Service_ID) AS Service_Count FROM Customers_and_Services GROUP BY Customer_ID) AS Temp))",
          "SELECT TOP 1 WITH TIES Customers.* FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID ORDER BY COUNT(Customers_and_Services.Service_ID) DESC",
          "SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Customers.* FROM Customers INNER JOIN (SELECT Customer_ID, COUNT(*) AS cnt FROM Customers_and_Services GROUP BY Customer_ID ORDER BY cnt DESC LIMIT 1) AS MostServices ON Customers.Customer_ID = MostServices.Customer_ID",
          "SELECT * FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Customers.* FROM Customers, (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC LIMIT 1) AS MaxServices WHERE Customers.Customer_ID = MaxServices.Customer_ID",
          "SELECT C.* FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID GROUP BY CS.Customer_ID HAVING COUNT(CS.Service_ID) >= ALL (SELECT COUNT(Service_ID) FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT * FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM (SELECT Customer_ID, COUNT(Service_ID) AS TotalServices FROM Customers_and_Services GROUP BY Customer_ID) AS ServiceCounts ORDER BY TotalServices DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT CAS.Customer_ID FROM Customers_and_Services CAS GROUP BY CAS.Customer_ID ORDER BY COUNT(DISTINCT CAS.Service_ID) DESC LIMIT 1)",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)",
          "SELECT TOP 1 C.Customer_Details FROM Customers C JOIN Customers_and_Services CAS ON C.Customer_ID = CAS.Customer_ID GROUP BY C.Customer_ID, C.Customer_Details ORDER BY COUNT(DISTINCT CAS.Service_ID) DESC",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS NumServices FROM Customers_and_Services GROUP BY Customer_ID ORDER BY NumServices DESC LIMIT 1) AS SubQuery ON C.Customer_ID = SubQuery.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT Service_ID) AS CountServices FROM Customers_and_Services GROUP BY Customer_ID) AS Sub))",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) >= ALL (SELECT COUNT(DISTINCT Service_ID) FROM Customers_and_Services GROUP BY Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C, (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1) AS MaxServices WHERE C.Customer_ID = MaxServices.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CAS WHERE C.Customer_ID = CAS.Customer_ID GROUP BY CAS.Customer_ID HAVING COUNT(DISTINCT CAS.Service_ID) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT Service_ID) AS CountServices FROM Customers_and_Services GROUP BY Customer_ID) AS Sub))",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS ServiceCount FROM Customers_and_Services GROUP BY Customer_ID) AS ServiceCounts ON C.Customer_ID = ServiceCounts.Customer_ID WHERE ServiceCounts.ServiceCount = (SELECT MAX(ServiceCount) FROM (SELECT COUNT(DISTINCT Service_ID) AS ServiceCount FROM Customers_and_Services GROUP BY Customer_ID) AS MaxCount)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)",
          "SELECT C.Customer_Details FROM Customers C JOIN (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS NumServices FROM Customers_and_Services GROUP BY Customer_ID ORDER BY NumServices DESC LIMIT 1) AS Sub ON C.Customer_ID = Sub.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT MAX(service_count) FROM (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS service_count FROM Customers_and_Services GROUP BY Customer_ID) AS Temp))",
          "SELECT TOP 1 WITH TIES C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID, C.Customer_Details ORDER BY COUNT(DISTINCT CS.Service_ID) DESC",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID GROUP BY CS.Customer_ID HAVING COUNT(DISTINCT CS.Service_ID) >= ALL (SELECT COUNT(DISTINCT CS2.Service_ID) FROM Customers_and_Services CS2 GROUP BY CS2.Customer_ID))",
          "SELECT C.Customer_Details FROM Customers C, (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1) AS MaxServiceUser WHERE C.Customer_ID = MaxServiceUser.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT Customer_ID FROM (SELECT Customer_ID, RANK() OVER (ORDER BY COUNT(DISTINCT Service_ID) DESC) AS rank FROM Customers_and_Services GROUP BY Customer_ID) AS Ranked WHERE rank = 1)",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID, C.Customer_Details HAVING COUNT(DISTINCT CS.Service_ID) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT Service_ID) AS CountServices FROM Customers_and_Services GROUP BY Customer_ID) AS ServiceCounts)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1 OFFSET 0)"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = Customers.Customer_ID)",
          "SELECT C.Customer_Details FROM Customers C LEFT JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customers_and_Services)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT Customer_Details FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT DISTINCT CS.Customer_ID FROM Customers_and_Services CS)",
          "SELECT Customer_Details FROM Customers EXCEPT SELECT Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT C.Customer_Details FROM Customers C LEFT JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customers_and_Services)",
          "SELECT Customer_Details FROM Customers EXCEPT SELECT Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID)",
          "SELECT Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT CS.Customer_ID FROM Customers_and_Services CS)",
          "SELECT C.Customer_Details FROM Customers C LEFT OUTER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services WHERE Customer_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID IN (SELECT TOP 1 Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC)",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID AND CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Customers_and_Services GROUP BY Service_ID)))",
          "SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) AS LeastUsed ON CS.Service_ID = LeastUsed.Service_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Service_ID, CS.Customer_ID HAVING CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID, Service_ID HAVING Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "WITH LeastUsedService AS (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) SELECT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID IN (SELECT Service_ID FROM LeastUsedService)",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS WHERE CS.Service_ID = (SELECT Service_ID FROM (SELECT Service_ID, COUNT(*) AS UsageCount FROM Customers_and_Services GROUP BY Service_ID) AS ServiceUsage ORDER BY ServiceUsage.UsageCount ASC LIMIT 1))",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(Customer_ID) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE CS.Customer_ID = C.Customer_ID AND CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "WITH LeastUsedService AS (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID AND CS.Service_ID IN (SELECT Service_ID FROM LeastUsedService)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C INNER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT TOP 1 Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC)",
          "SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID, Service_ID HAVING Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS GROUP BY CS.Customer_ID, CS.Service_ID HAVING CS.Service_ID = (SELECT MIN(Service_ID) FROM (SELECT Service_ID, COUNT(*) AS UsageCount FROM Customers_and_Services GROUP BY Service_ID ORDER BY UsageCount ASC) AS LeastUsed))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID AND CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Customers_and_Services GROUP BY Service_ID) AS Counts))",
          "SELECT DISTINCT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT NULL FROM Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY CS.Service_ID HAVING CS.Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(UNIQUE Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Customers_and_Services_Details FROM Customers_and_Services)",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) AS UniqueDetailsCount FROM Customers_and_Services",
          "SELECT DISTINCT COUNT(Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services GROUP BY Customers_and_Services_Details",
          "SELECT COUNT(*) FROM (SELECT Customers_and_Services_Details FROM Customers_and_Services GROUP BY Customers_and_Services_Details)",
          "SELECT DISTINCT COUNT(*) OVER (PARTITION BY Customers_and_Services_Details) FROM Customers_and_Services",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services WHERE Customers_and_Services_Details IS NOT NULL",
          "SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services WHERE Customers_and_Services_Details <> ''"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Customer_Details) AS Total_Customers, COUNT(DISTINCT Service_Details) AS Total_Services FROM Customers, Services",
          "SELECT (SELECT COUNT(DISTINCT Customer_Details) FROM Customers) AS Total_Customers, (SELECT COUNT(DISTINCT Service_Details) FROM Services) AS Total_Services",
          "WITH Customer_Count AS (SELECT COUNT(DISTINCT Customer_Details) AS Total_Customers FROM Customers), Service_Count AS (SELECT COUNT(DISTINCT Service_Details) AS Total_Services FROM Services) SELECT * FROM Customer_Count, Service_Count",
          "SELECT COUNT(DISTINCT C.Customer_Details) + COUNT(DISTINCT S.Service_Details) AS Total_Details FROM Customers C CROSS JOIN Services S",
          "SELECT (SELECT COUNT(DISTINCT Customer_Details) FROM Customers) + (SELECT COUNT(DISTINCT Service_Details) FROM Services) AS Total_Details",
          "SELECT COUNT(DISTINCT Customer_Details) AS Total_Customers, COUNT(DISTINCT Service_Details) AS Total_Services FROM Customers CROSS JOIN Services",
          "SELECT COUNT(DISTINCT Customers.Customer_Details) AS Total_Customers, COUNT(DISTINCT Services.Service_Details) AS Total_Services FROM Customers, Services",
          "SELECT COUNT(DISTINCT C.Customer_Details) AS Total_Customers, COUNT(DISTINCT S.Service_Details) AS Total_Services FROM Customers C, Services S",
          "SELECT COUNT(DISTINCT Customer_Details) AS Total_Customers, COUNT(DISTINCT Service_Details) AS Total_Services FROM Customers FULL OUTER JOIN Services ON 1=1",
          "SELECT COUNT(DISTINCT Customers.Customer_Details) AS Total_Customers, COUNT(DISTINCT Services.Service_Details) AS Total_Services FROM Customers JOIN Services ON TRUE"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT * FROM Customers WHERE Customer_Details CONTAINS 'Kutch'",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE INSTR(Customer_Details, 'Kutch') > 0",
          "SELECT * FROM Customers WHERE POSITION('Kutch' IN Customer_Details) > 0",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details ILIKE '%Kutch%'",
          "SELECT Customer_ID FROM Customers WHERE LOWER(Customer_Details) LIKE LOWER('%Kutch%')",
          "SELECT * FROM Customers WHERE UPPER(Customer_Details) LIKE UPPER('%Kutch%')"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'",
          "SELECT Customer_Details FROM Customers WHERE Customer_Details CONTAINS 'Kutch'",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE INSTR(Customer_Details, 'Kutch') > 0",
          "SELECT * FROM Customers WHERE Customer_Details ILIKE '%Kutch%'",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%' ESCAPE '\\'",
          "SELECT Customer_Details FROM Customers WHERE POSITION('Kutch' IN Customer_Details) > 0",
          "SELECT * FROM Customers WHERE LOWER(Customer_Details) LIKE LOWER('%Kutch%')",
          "SELECT Customer_ID, Customer_Details FROM Customers WHERE CHARINDEX('Kutch', Customer_Details) > 0",
          "SELECT * FROM Customers WHERE Customer_Details REGEXP 'Kutch'"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) OR EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Status_Code = 'good' AND CI.Service_ID = S.Service_ID)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS, Customers C WHERE CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' UNION SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'good')",
          "WITH HardyServices AS (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')), GoodServices AS (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good') SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM HardyServices UNION SELECT Service_ID FROM GoodServices)",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services CS INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')",
          "SELECT DISTINCT Service_Details FROM Services WHERE EXISTS (SELECT * FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = Services.Service_ID) OR EXISTS (SELECT * FROM Customer_Interactions WHERE Status_Code = 'good' AND Service_ID = Services.Service_ID)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS LEFT JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION ALL SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'good')",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS, Customers C WHERE CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' UNION ALL SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'good')"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good'))",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good')",
          "SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customer_Interactions CI, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Service_ID = CI.Service_ID AND CI.Customer_ID = C.Customer_ID AND (C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good')",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID INNER JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID INNER JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE Services.Service_ID = CS.Service_ID AND (C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'))",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS, Customer_Interactions CI, Customers C WHERE CS.Service_ID = CI.Service_ID AND CI.Customer_ID = C.Customer_ID AND (C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'))",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customer_Interactions ON Customers_and_Services.Service_ID = Customer_Interactions.Service_ID JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' OR Customer_Interactions.Status_Code = 'good'",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS, Customer_Interactions CI, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Service_ID = CI.Service_ID AND CI.Customer_ID = C.Customer_ID AND (C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good') GROUP BY S.Service_Details",
          "SELECT DISTINCT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID LEFT JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID LEFT JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad' INTERSECT SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C, Customer_Interactions CI WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND CI.Service_ID = S.Service_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID INNER JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') INTERSECT SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')",
          "SELECT DISTINCT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = Services.Service_ID) AND EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = Services.Service_ID)",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services CS, Customers C WHERE CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch') AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) AND EXISTS (SELECT * FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = S.Service_ID)",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') AND S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services AS S JOIN Customers_and_Services AS CS ON S.Service_ID = CS.Service_ID JOIN Customer_Interactions AS CI ON CI.Service_ID = S.Service_ID JOIN Customers AS C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') AND Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = Services.Service_ID) AND EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = Services.Service_ID)",
          "SELECT S.Service_Details FROM Services S, Customers_and_Services CS, Customer_Interactions CI, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND CI.Service_ID = S.Service_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') AND S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')",
          "SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID INNER JOIN Customers C ON CS.Customer_ID = C.Customer_ID INNER JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) AND EXISTS (SELECT * FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = S.Service_ID)",
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad' GROUP BY S.Service_ID",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) AND Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad')"
        ]
      ]
    },
    {
      "id": 381,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'",
          "SELECT Services.Service_Details FROM Services, Customer_Interactions, Channels WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Customer_Interactions.Channel_ID = Channels.Channel_ID AND Channels.Channel_Details = '15 ij'",
          "SELECT S.Service_Details FROM Services AS S, Customer_Interactions AS CI, Channels AS C WHERE S.Service_ID = CI.Service_ID AND CI.Channel_ID = C.Channel_ID AND C.Channel_Details = '15 ij'",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details LIKE '15 ij'",
          "SELECT S.Service_Details FROM Services S WHERE EXISTS (SELECT 1 FROM Customer_Interactions CI JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE CI.Service_ID = S.Service_ID AND C.Channel_Details = '15 ij')",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij')",
          "SELECT DISTINCT Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channel_Details = '15 ij'",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID INNER JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij' ORDER BY S.Service_Details"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))",
          "SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID INNER JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'",
          "SELECT Services.Service_Details FROM Services, Customer_Interactions, Channels WHERE Services.Service_ID = Customer_Interactions.Service_ID AND Customer_Interactions.Channel_ID = Channels.Channel_ID AND Channels.Channel_Details = '15 ij'",
          "SELECT service_details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE channel_details = '15 ij'",
          "SELECT DISTINCT service_details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels ch ON ci.Channel_ID = ch.Channel_ID WHERE ch.channel_details = '15 ij' ORDER BY service_details",
          "SELECT s.Service_Details FROM Services s, Customer_Interactions ci, Channels c WHERE s.Service_ID = ci.Service_ID AND ci.Channel_ID = c.Channel_ID AND c.Channel_Details = '15 ij'",
          "SELECT DISTINCT s.Service_Details FROM Services s INNER JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID INNER JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij'",
          "SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details LIKE '15 ij'",
          "SELECT Services.Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Customers.* FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT C.* FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT DISTINCT Customers.* FROM Customers, Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT Customers.* FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT * FROM Customers AS C JOIN Customer_Interactions AS CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customers.* FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customer_Interactions.Customer_ID = Customers.Customer_ID AND Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT C.* FROM Customers C, Customer_Interactions CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT * FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT Customers.* FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE 'bad'"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT DISTINCT Customers.Customer_Details FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers AS C, Customer_Interactions AS CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT Customer_Details FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customer_Interactions.Customer_ID = Customers.Customer_ID AND Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')",
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT NULL FROM Customer_Interactions CI WHERE CI.Customer_ID = C.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad')",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad' GROUP BY C.Customer_ID",
          "SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CI.Customer_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad')"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(Integration_Platform_ID) AS Successful_Platforms FROM Integration_Platform INNER JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(DISTINCT Integration_Platform.Integration_Platform_ID) FROM Integration_Platform, Customer_Interactions WHERE Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID AND Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(*) FROM Integration_Platform IP JOIN Customer_Interactions CI ON IP.Customer_Interaction_ID = CI.Customer_Interaction_ID WHERE CI.Status_Code = 'successful'",
          "SELECT COUNT(1) FROM Integration_Platform INNER JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID AND Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(*) AS Total_Successful FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code LIKE 'successful'",
          "SELECT COUNT(*) FROM Integration_Platform IP, Customer_Interactions CI WHERE IP.Customer_Interaction_ID = CI.Customer_Interaction_ID AND CI.Status_Code = 'successful'",
          "SELECT COUNT(Integration_Platform.Integration_Platform_ID) FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(*) FROM Integration_Platform INNER JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'",
          "SELECT COUNT(DISTINCT IP.Integration_Platform_ID) FROM Integration_Platform IP INNER JOIN Customer_Interactions CI ON IP.Customer_Interaction_ID = CI.Customer_Interaction_ID WHERE CI.Status_Code = 'successful'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) AS NumberOfPlatforms FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(1) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details CONTAINS 'Success'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details ILIKE '%Success%'",
          "SELECT COUNT(*) FROM Integration_Platform WHERE POSITION('Success' IN Integration_Platform_Details) > 0",
          "SELECT COUNT(*) FROM Integration_Platform WHERE CHARINDEX('Success', Integration_Platform_Details) > 0",
          "SELECT COUNT(*) FROM Integration_Platform WHERE INSTR(Integration_Platform_Details, 'Success') > 0",
          "SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details REGEXP 'Success'"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Status_Code = 'failed'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Status_Code = 'failed'))",
          "SELECT DISTINCT Customers.Customer_Details FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID INNER JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Status_Code = 'failed'",
          "SELECT C.Customer_Details FROM Customers AS C, Customer_Interactions AS CI, Integration_Platform AS IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Status_Code = 'failed'",
          "SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Status_Code = 'failed'",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Interactions CI JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE CI.Customer_ID = C.Customer_ID AND IP.Status_Code = 'failed')",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT CI.Customer_ID FROM Customer_Interactions CI JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Status_Code = 'failed')",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID INNER JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Status_Code = 'failed'",
          "SELECT DISTINCT C.Customer_Details FROM Customers C, Customer_Interactions CI, Integration_Platform IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Status_Code = 'failed'",
          "SELECT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID LEFT JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Status_Code = 'failed'"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'",
          "SELECT Customers.Customer_Details FROM Customers INNER JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID INNER JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail'",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail'))",
          "SELECT DISTINCT Customers.Customer_Details FROM Customers, Customer_Interactions, Integration_Platform WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID AND Integration_Platform.Integration_Platform_Details = 'Fail'",
          "SELECT C.Customer_Details FROM Customers AS C, Customer_Interactions AS CI, Integration_Platform AS IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details = 'Fail'",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Interactions CI JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE CI.Customer_ID = C.Customer_ID AND IP.Integration_Platform_Details = 'Fail')",
          "SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform_Details = 'Fail')",
          "SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID INNER JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details = 'Fail'",
          "SELECT DISTINCT C.Customer_Details FROM Customers C LEFT JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID LEFT JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE IP.Integration_Platform_Details = 'Fail'",
          "SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT CI.Customer_ID FROM Customer_Interactions CI INNER JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE CI.Customer_ID = C.Customer_ID AND IP.Integration_Platform_Details = 'Fail')"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT * FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customer_Interactions)",
          "SELECT S.* FROM Services S LEFT JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Service_ID IS NULL",
          "SELECT Services.Service_ID, Services.Service_Details FROM Services LEFT OUTER JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Service_ID IS NULL",
          "SELECT * FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customer_Interactions)",
          "SELECT Services.* FROM Services WHERE NOT EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customer_Interactions.Service_ID = Services.Service_ID)",
          "SELECT DISTINCT Services.* FROM Services LEFT JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Service_ID IS NULL",
          "SELECT Services.Service_ID, Services.Service_Details FROM Services EXCEPT SELECT Customer_Interactions.Service_ID, Services.Service_Details FROM Customer_Interactions JOIN Services ON Customer_Interactions.Service_ID = Services.Service_ID",
          "SELECT * FROM Services S WHERE NOT EXISTS (SELECT NULL FROM Customer_Interactions CI WHERE CI.Service_ID = S.Service_ID)",
          "SELECT S.Service_ID, S.Service_Details FROM Services S WHERE S.Service_ID NOT IN (SELECT CI.Service_ID FROM Customer_Interactions CI)",
          "SELECT * FROM Services WHERE Service_ID NOT EXISTS (SELECT Service_ID FROM Customer_Interactions WHERE Services.Service_ID = Customer_Interactions.Service_ID)"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)",
          "SELECT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Service_ID IS NULL",
          "SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)",
          "SELECT DISTINCT Service_Details FROM Services LEFT JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Service_ID IS NULL",
          "SELECT Service_Details FROM Services EXCEPT SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID",
          "SELECT S.Service_Details FROM Services S WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services CS WHERE CS.Service_ID = S.Service_ID)",
          "SELECT Service_Details FROM Services WHERE Service_ID NOT EXISTS (SELECT Service_ID FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID)",
          "SELECT Service_Details FROM Services AS S WHERE NOT EXISTS (SELECT NULL FROM Customers_and_Services AS CS WHERE CS.Service_ID = S.Service_ID)",
          "SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID NOT IN (SELECT CS.Service_ID FROM Customers_and_Services CS)",
          "SELECT Service_Details FROM Services S LEFT OUTER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Service_ID IS NULL"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(*) AS Usage_Count, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_Layer_Type_Code) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(Analytical_Layer_Type_Code), Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_Layer_Type_Code) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(*) AS Usage_Count, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(Analytical_ID) AS NumberOfUses, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT a.Analytical_Layer_Type_Code, COUNT(a.Analytical_ID) AS Total FROM Analytical_Layer a GROUP BY a.Analytical_Layer_Type_Code",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code",
          "SELECT COUNT(Analytical_ID), Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_ID) DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) > 0",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS CountOfUses FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY CountOfUses",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS TotalUses FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY TotalUses DESC",
          "SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS UsageFrequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY UsageFrequency DESC"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT DISTINCT Service_Details FROM Services, Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%' ORDER BY S.Service_ID",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Service_ID = Services.Service_ID AND Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "government_shift",
      "infer_predictions": [
        [
          "SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT DISTINCT Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID AND Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE '%unsatisfied%'",
          "SELECT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE '%unsatisfied%' GROUP BY Service_ID)",
          "SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE '%unsatisfied%')",
          "SELECT S.Service_Details FROM Services S INNER JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%' ORDER BY S.Service_Details"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Vehicles",
          "SELECT COUNT(id) FROM Vehicles",
          "SELECT COUNT(Vehicles.id) FROM Vehicles",
          "SELECT COUNT(1) FROM Vehicles",
          "SELECT COUNT(*) AS total_vehicles FROM Vehicles",
          "SELECT COUNT(Vehicles.id) AS vehicle_count FROM Vehicles",
          "SELECT COUNT(DISTINCT id) FROM Vehicles",
          "SELECT COUNT(DISTINCT Vehicles.id) FROM Vehicles",
          "SELECT COUNT(*) FROM Vehicles WHERE id IS NOT NULL",
          "SELECT COUNT(*) FROM Vehicles GROUP BY 'all'"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Vehicles",
          "SELECT COUNT(id) FROM Vehicles",
          "SELECT COUNT(1) FROM Vehicles",
          "SELECT COUNT(Vehicles.id) FROM Vehicles",
          "SELECT COUNT(*) AS NumberOfVehicles FROM Vehicles",
          "SELECT COUNT(Vehicles.*) FROM Vehicles",
          "SELECT COUNT(DISTINCT id) FROM Vehicles",
          "SELECT COUNT(DISTINCT Vehicles.id) FROM Vehicles",
          "SELECT COUNT(*) FROM Vehicles AS V",
          "SELECT COUNT(*) FROM Vehicles WHERE id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles ORDER BY Model_year DESC",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC",
          "SELECT name FROM Vehicles SORT BY Model_year DESCENDING",
          "SELECT V.name FROM Vehicles V ORDER BY V.Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESCENDING",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name ASC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name",
          "SELECT Vehicles.name AS VehicleName FROM Vehicles ORDER BY Vehicles.Model_year DESC",
          "SELECT name AS VehicleName FROM Vehicles ORDER BY Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles ORDER BY Model_year DESC",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESCENDING",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESCENDING",
          "SELECT name FROM Vehicles SORT BY Model_year DESC",
          "SELECT Vehicles.name FROM Vehicles SORT BY Model_year DESC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name ASC",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESC, Vehicles.name ASC",
          "SELECT name FROM Vehicles ORDER BY Model_year DESC, name",
          "SELECT Vehicles.name FROM Vehicles ORDER BY Model_year DESC, Vehicles.name"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT DISTINCT(Type_of_powertrain) FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL GROUP BY Type_of_powertrain",
          "SELECT DISTINCT V.Type_of_powertrain FROM Vehicles V",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 0",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain <> ''",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain != ''"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT DISTINCT(Type_of_powertrain) FROM Vehicles",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL GROUP BY Type_of_powertrain",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 0",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain <> '' GROUP BY Type_of_powertrain",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain <> ''",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014",
          "SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles V WHERE V.Model_year = 2013 OR V.Model_year = 2014",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year BETWEEN 2013 AND 2014",
          "SELECT name AS Vehicle_Name, Type_of_powertrain AS Powertrain_Type, Annual_fuel_cost AS Annual_Cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year >= 2013 AND Model_year <= 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = '2013' OR Model_year = '2014'",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN ('2013', '2014')",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION ALL SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014",
          "SELECT name AS Vehicle_Name, Type_of_powertrain AS Powertrain_Type, Annual_fuel_cost AS Yearly_Fuel_Cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014",
          "SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles V WHERE V.Model_year BETWEEN 2013 AND 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014",
          "SELECT DISTINCT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year >= 2013 AND Model_year <= 2014",
          "SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = '2013' OR Model_year = '2014'",
          "SELECT name AS 'Vehicle Name', Type_of_powertrain AS 'Powertrain Type', Annual_fuel_cost AS 'Annual Fuel Cost' FROM Vehicles WHERE Model_year IN (2013, 2014)",
          "SELECT * FROM (SELECT name, Type_of_powertrain, Annual_fuel_cost, Model_year FROM Vehicles) AS SubQuery WHERE Model_year = 2013 OR Model_year = 2014"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2",
          "SELECT V1.Type_of_powertrain FROM Vehicles V1 JOIN Vehicles V2 ON V1.Type_of_powertrain = V2.Type_of_powertrain WHERE V1.Model_year = 2014 AND V2.Model_year = 2013",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013)",
          "WITH Year2014 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014), Year2013 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) SELECT Type_of_powertrain FROM Year2014 WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Year2013)",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 UNION SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 HAVING COUNT(*) > 1",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(DISTINCT Model_year) AS Years FROM Vehicles WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain) AS SubQuery WHERE Years = 2",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING SUM(CASE WHEN Model_year = 2014 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Model_year = 2013 THEN 1 ELSE 0 END) > 0",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) GROUP BY Type_of_powertrain",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 AND EXISTS (SELECT 1 FROM Vehicles V2 WHERE V2.Type_of_powertrain = Vehicles.Type_of_powertrain AND V2.Model_year = 2013)"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)",
          "SELECT DISTINCT v1.Type_of_powertrain FROM Vehicles v1 JOIN Vehicles v2 ON v1.Type_of_powertrain = v2.Type_of_powertrain WHERE v1.Model_year = 2013 AND v2.Model_year = 2014",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 AND Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2",
          "WITH Year2013 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013), Year2014 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) SELECT Type_of_powertrain FROM Year2013 WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Year2014)",
          "SELECT v.Type_of_powertrain FROM Vehicles v WHERE EXISTS (SELECT 1 FROM Vehicles WHERE Model_year = 2013 AND Type_of_powertrain = v.Type_of_powertrain) AND EXISTS (SELECT 1 FROM Vehicles WHERE Model_year = 2014 AND Type_of_powertrain = v.Type_of_powertrain)",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(DISTINCT Model_year) AS years_count FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain) AS subquery WHERE years_count = 2",
          "SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 UNION SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 HAVING COUNT(*) > 1",
          "SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 AND Type_of_powertrain IN (SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING SUM(CASE WHEN Model_year = 2013 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Model_year = 2014 THEN 1 ELSE 0 END) > 0"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, COUNT(id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT COUNT(id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(Vehicles.id) AS TotalVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(DISTINCT id) AS CountOfVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) AS VehicleTotal FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC",
          "SELECT Type_of_powertrain, COUNT(id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY NumberOfVehicles",
          "SELECT Type_of_powertrain, COUNT(id) AS Count FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 0"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, COUNT(id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT COUNT(id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(DISTINCT id) AS TotalVehicles FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT COUNT(DISTINCT id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(id) AS CountOfVehicles FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Type_of_powertrain",
          "SELECT Type_of_powertrain, COUNT(*) AS Total FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC",
          "SELECT Type_of_powertrain, COUNT(id) AS VehicleTotal FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC LIMIT 1",
          "SELECT Type_of_powertrain, COUNT(id) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain ORDER BY VehicleCount DESC LIMIT 1",
          "SELECT TOP 1 Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain) AS subquery ORDER BY num_vehicles DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) = (SELECT MAX(count) FROM (SELECT COUNT(id) AS count FROM Vehicles GROUP BY Type_of_powertrain) AS counts)",
          "SELECT Type_of_powertrain, MAX(Count) FROM (SELECT Type_of_powertrain, COUNT(id) AS Count FROM Vehicles GROUP BY Type_of_powertrain) AS VehicleCounts",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Type_of_powertrain, COUNT(*) AS Total FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Total DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC LIMIT 1 OFFSET 0",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) = (SELECT MAX(VehicleCount) FROM (SELECT COUNT(id) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain) temp)"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC",
          "SELECT Type_of_powertrain, COUNT(Type_of_powertrain) AS Frequency FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Frequency DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) = (SELECT MAX(count) FROM (SELECT COUNT(Type_of_powertrain) AS count FROM Vehicles GROUP BY Type_of_powertrain) AS counts)",
          "SELECT Type_of_powertrain, MAX(count) FROM (SELECT Type_of_powertrain, COUNT(*) AS count FROM Vehicles GROUP BY Type_of_powertrain) grouped ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC FETCH FIRST ROW ONLY",
          "SELECT Type_of_powertrain, COUNT(*) AS Total FROM Vehicles GROUP BY Type_of_powertrain ORDER BY Total DESC LIMIT 1",
          "SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1",
          "SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles",
          "SELECT MINIMUM(Annual_fuel_cost), MAXIMUM(Annual_fuel_cost), AVERAGE(Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinimumCost, MAX(Annual_fuel_cost) AS MaximumCost, AVG(Annual_fuel_cost) AS AverageCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS 'Minimum Annual Fuel Cost', MAX(Annual_fuel_cost) AS 'Maximum Annual Fuel Cost', AVG(Annual_fuel_cost) AS 'Average Annual Fuel Cost' FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS Minimum, MAX(Annual_fuel_cost) AS Maximum, AVG(Annual_fuel_cost) AS Average FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS Min_Annual_Fuel_Cost, MAX(Annual_fuel_cost) AS Max_Annual_Fuel_Cost, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MIN_COST, MAX(Annual_fuel_cost) MAX_COST, AVG(Annual_fuel_cost) AVG_COST FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MinimumCost, MAX(Annual_fuel_cost) MaximumCost, AVG(Annual_fuel_cost) AverageCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MinFuelCost, MAX(Annual_fuel_cost) MaxFuelCost, AVG(Annual_fuel_cost) AvgFuelCost FROM Vehicles"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles",
          "SELECT MINIMUM(Annual_fuel_cost), MAXIMUM(Annual_fuel_cost), AVERAGE(Annual_fuel_cost) FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS MinimumCost, MAX(Annual_fuel_cost) AS MaximumCost, AVG(Annual_fuel_cost) AS AverageCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) AS 'Minimum Annual Fuel Cost', MAX(Annual_fuel_cost) AS 'Maximum Annual Fuel Cost', AVG(Annual_fuel_cost) AS 'Average Annual Fuel Cost' FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MIN_COST, MAX(Annual_fuel_cost) MAX_COST, AVG(Annual_fuel_cost) AVG_COST FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) Minimum, MAX(Annual_fuel_cost) Maximum, AVG(Annual_fuel_cost) Average FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) MinimumAnnualCost, MAX(Annual_fuel_cost) MaximumAnnualCost, AVG(Annual_fuel_cost) AverageAnnualCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) as MinFuelCost, MAX(Annual_fuel_cost) as MaxFuelCost, AVG(Annual_fuel_cost) as AvgFuelCost FROM Vehicles",
          "SELECT MIN(Annual_fuel_cost) Minimum_Fuel_Cost, MAX(Annual_fuel_cost) Maximum_Fuel_Cost, AVG(Annual_fuel_cost) Average_Fuel_Cost FROM Vehicles"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY Model_year",
          "SELECT name AS Vehicle_Name, Model_year AS Year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year IS NOT NULL",
          "SELECT DISTINCT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate GROUP BY name, Model_year",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate LIMIT 100",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY name DESC"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate ORDER BY name",
          "SELECT name AS Vehicle_Name, Model_year AS Year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate GROUP BY name, Model_year",
          "SELECT DISTINCT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Type_of_powertrain IS NOT NULL",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year > 2000",
          "SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Combined_fuel_economy_rate IS NOT NULL"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) > 1",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2",
          "SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) > 1"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age, membership_credit FROM Customers",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers",
          "SELECT c.name, c.age, c.membership_credit FROM Customers c",
          "SELECT name AS CustomerName, age AS CustomerAge, membership_credit AS MembershipCredit FROM Customers",
          "SELECT Customers.name AS Name, Customers.age AS Age, Customers.membership_credit AS MembershipCredit FROM Customers",
          "SELECT * FROM Customers SELECT name, age, membership_credit",
          "SELECT name, age, membership_credit FROM Customers WHERE 1=1",
          "SELECT name, age, membership_credit FROM Customers ORDER BY name",
          "SELECT DISTINCT name, age, membership_credit FROM Customers",
          "SELECT name, age, membership_credit FROM Customers GROUP BY name, age, membership_credit"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age, membership_credit FROM Customers",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers",
          "SELECT c.name, c.age, c.membership_credit FROM Customers c",
          "SELECT name AS CustomerName, age AS CustomerAge, membership_credit AS MembershipCredit FROM Customers",
          "SELECT * FROM Customers WHERE name IS NOT NULL AND age IS NOT NULL AND membership_credit IS NOT NULL",
          "SELECT name, age, membership_credit FROM Customers WHERE membership_credit > 0",
          "SELECT DISTINCT name, age, membership_credit FROM Customers",
          "SELECT name, age, membership_credit FROM Customers ORDER BY name",
          "SELECT name, age, membership_credit FROM Customers WHERE name != ''",
          "SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers ORDER BY Customers.age DESC"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT C.name, C.age FROM Customers C WHERE C.membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1",
          "SELECT TOP 1 name, age FROM Customers ORDER BY membership_credit DESC",
          "SELECT name, age FROM Customers WHERE membership_credit IN (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT name, age FROM Customers AS C WHERE C.membership_credit = (SELECT MAX(membership_credit) FROM Customers AS C)",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(C.membership_credit) FROM Customers C)",
          "SELECT C.name, C.age FROM Customers C ORDER BY C.membership_credit DESC FETCH FIRST 1 ROW ONLY",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers) LIMIT 1",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers) FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT C.name, C.age FROM Customers C ORDER BY C.membership_credit DESC LIMIT 1",
          "SELECT name, age FROM Customers ORDER BY membership_credit DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 name, age FROM Customers ORDER BY membership_credit DESC",
          "SELECT name, age FROM Customers WHERE membership_credit IN (SELECT MAX(membership_credit) FROM Customers)",
          "SELECT name, age FROM Customers C WHERE C.membership_credit = (SELECT MAX(membership_credit) FROM Customers C)",
          "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) AS rnk FROM Customers) WHERE rnk = 1",
          "SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers LIMIT 1)",
          "SELECT name, age FROM Customers AS C WHERE C.membership_credit = (SELECT MAX(C2.membership_credit) FROM Customers AS C2)",
          "SELECT FIRST(name), FIRST(age) FROM Customers ORDER BY membership_credit DESC"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(C.age) FROM Customers C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) AS AverageAge FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(Customers.age) FROM Customers WHERE Customers.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers GROUP BY id)",
          "SELECT AVG(age) FROM Customers HAVING membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers AS C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers AS C2)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY membership_credit",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit IS NOT NULL)",
          "SELECT AVG(C.age) FROM Customers C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers C2 WHERE C2.membership_credit IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(Customers.age) AS AverageAge FROM Customers WHERE Customers.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers GROUP BY id)",
          "SELECT AVG(C.age) FROM Customers C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers HAVING membership_credit > AVG(membership_credit)",
          "WITH AvgMembership AS (SELECT AVG(membership_credit) AS AvgCredit FROM Customers) SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AvgCredit FROM AvgMembership)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) GROUP BY membership_credit",
          "SELECT AVG(C.age) FROM Customers C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers C2)",
          "SELECT AVG(age) AS AverageAge FROM Customers GROUP BY membership_credit HAVING membership_credit > (SELECT AVG(membership_credit) FROM Customers)",
          "SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) ORDER BY membership_credit DESC"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT * FROM Discount",
          "SELECT id, name, membership_credit FROM Discount",
          "SELECT Discount.* FROM Discount",
          "SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount",
          "SELECT * FROM Discount ORDER BY id",
          "SELECT * FROM Discount WHERE 1=1",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount",
          "SELECT * FROM Discount d",
          "SELECT * FROM Discount ORDER BY name",
          "SELECT * FROM Discount WHERE id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT * FROM Discount",
          "SELECT id, name, membership_credit FROM Discount",
          "SELECT Discount.* FROM Discount",
          "SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount",
          "SELECT D.* FROM Discount D",
          "SELECT ALL * FROM Discount",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount",
          "SELECT * FROM Discount ORDER BY id",
          "SELECT *, id, name, membership_credit FROM Discount",
          "SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount ORDER BY Discount.id ASC"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, SUM(RH.total_hours) AS TotalHours FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT name, TOTAL(total_hours) FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT V.name AS VehicleName, SUM(RH.total_hours) AS TotalRentalHours FROM Vehicles V, Renting_history RH WHERE V.id = RH.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) AS TotalHours FROM Vehicles JOIN Renting_history ON id = vehicles_id GROUP BY name",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS TotalHours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name ORDER BY Vehicles.name",
          "SELECT name, SUM(total_hours) FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id GROUP BY name ORDER BY name",
          "SELECT name AS VehicleName, SUM(total_hours) AS TotalHours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT DISTINCT name, SUM(total_hours) OVER (PARTITION BY Vehicles.id) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, SUM(R.total_hours) AS TotalHours FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT Vehicles.name, SUM(Renting_history.total_hours) AS TotalRentalHours FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT name, TOTAL(total_hours) AS TotalHours FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name",
          "SELECT V.name AS VehicleName, SUM(R.total_hours) AS TotalHours FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name",
          "SELECT name, SUM(total_hours) AS TotalHours FROM Vehicles JOIN Renting_history ON id = vehicles_id GROUP BY name ORDER BY name",
          "SELECT Vehicles.name, Aggregate(total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name",
          "SELECT name, SUM(total_hours) FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY name ORDER BY name ASC",
          "SELECT V.name, SUM(R.total_hours) FROM Vehicles V INNER JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY V.name",
          "SELECT name AS VehicleName, SUM(total_hours) AS TotalRentalHours FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)",
          "SELECT name FROM Vehicles WHERE NOT EXISTS (SELECT 1 FROM Renting_history WHERE vehicles_id = Vehicles.id)",
          "SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL",
          "SELECT name FROM Vehicles EXCEPT SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id",
          "SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)",
          "SELECT DISTINCT name FROM Vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)",
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history WHERE vehicles_id IS NOT NULL)",
          "SELECT V.name FROM Vehicles V LEFT OUTER JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.vehicles_id IS NULL",
          "SELECT name FROM Vehicles WHERE id NOT EXISTS (SELECT NULL FROM Renting_history WHERE vehicles_id = Vehicles.id)"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)",
          "SELECT name FROM Vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)",
          "SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL",
          "SELECT name FROM Vehicles WHERE NOT EXISTS (SELECT 1 FROM Renting_history WHERE Vehicles.id = Renting_history.vehicles_id)",
          "SELECT V.name FROM Vehicles V WHERE NOT EXISTS (SELECT NULL FROM Renting_history R WHERE R.vehicles_id = V.id)",
          "SELECT name FROM Vehicles EXCEPT SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id",
          "SELECT V.name FROM Vehicles V LEFT OUTER JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.vehicles_id IS NULL",
          "SELECT DISTINCT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)",
          "SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id)"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT C.name FROM Customers C JOIN Renting_history R ON C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT Customers.name FROM Customers INNER JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(Renting_history.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)",
          "SELECT C.name FROM Customers C, Renting_history R WHERE C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.customer_id) >= 2",
          "SELECT DISTINCT C.name FROM Customers C JOIN Renting_history R ON C.id = R.customer_id GROUP BY C.id, C.name HAVING COUNT(*) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history HAVING COUNT(*) >= 2 GROUP BY customer_id)",
          "SELECT C.name FROM Customers C WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.customer_id = C.id GROUP BY R.customer_id HAVING COUNT(*) >= 2)",
          "SELECT C.name FROM Customers C WHERE (SELECT COUNT(*) FROM Renting_history R WHERE R.customer_id = C.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT C.name FROM Customers C JOIN Renting_history R ON C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)",
          "SELECT Customers.name FROM Customers INNER JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(Renting_history.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)",
          "SELECT DISTINCT C.name FROM Customers C, Renting_history R WHERE C.id = R.customer_id GROUP BY C.id, C.name HAVING COUNT(R.id) >= 2",
          "SELECT C.name FROM Customers C WHERE (SELECT COUNT(*) FROM Renting_history R WHERE R.customer_id = C.id) >= 2",
          "SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history HAVING COUNT(*) > 1 GROUP BY customer_id)",
          "SELECT C.name FROM Customers C WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.customer_id = C.id GROUP BY R.customer_id HAVING COUNT(*) >= 2)",
          "SELECT C.name FROM Customers C JOIN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(*) >= 2) R ON C.id = R.customer_id",
          "SELECT name FROM Customers C WHERE (SELECT COUNT(*) FROM Renting_history WHERE customer_id = C.id) >= 2"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.id = (SELECT R.vehicles_id FROM Renting_history R GROUP BY R.vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
          "SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles JOIN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostRented ON Vehicles.id = MostRented.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY vehicles_id) AS Counts))",
          "SELECT V.name, V.Model_year FROM Vehicles V INNER JOIN (SELECT vehicles_id, COUNT(*) AS rental_count FROM Renting_history GROUP BY vehicles_id ORDER BY rental_count DESC LIMIT 1) R ON V.id = R.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT TOP 1 vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC)",
          "SELECT V.name, V.Model_year FROM Vehicles V, (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxRent WHERE V.id = MaxRent.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.id = (SELECT vehicles_id FROM (SELECT vehicles_id, COUNT(*) AS num_rentals FROM Renting_history GROUP BY vehicles_id ORDER BY num_rentals DESC) WHERE ROWNUM = 1)",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT V.name, V.Model_year FROM Vehicles V JOIN (SELECT vehicles_id, COUNT(*) AS count FROM Renting_history GROUP BY vehicles_id ORDER BY count DESC LIMIT 1) R ON V.id = R.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT TOP 1 vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC)",
          "SELECT V.name, V.Model_year FROM Vehicles V, (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostRented WHERE V.id = MostRented.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY vehicles_id) AS Counts))",
          "SELECT V.name, V.Model_year FROM Vehicles V INNER JOIN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxRented ON V.id = MaxRented.vehicles_id",
          "SELECT name, Model_year FROM Vehicles WHERE id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
          "SELECT V.name, V.Model_year FROM Vehicles V WHERE V.id = (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC)",
          "SELECT Vehicles.name FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT name FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT V.name FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT name FROM Vehicles AS V JOIN Renting_history AS R ON V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT V.name FROM Vehicles V INNER JOIN Renting_history R ON V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT DISTINCT name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC) GROUP BY name"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC)",
          "SELECT Vehicles.name FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT name FROM Vehicles, Renting_history WHERE Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT V.name FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
          "SELECT name FROM (SELECT name, total_hours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id) AS SubQuery ORDER BY total_hours DESC",
          "SELECT DISTINCT name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT V.name FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id ORDER BY R.total_hours DESC",
          "SELECT TOP 100 PERCENT Vehicles.name FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id ORDER BY Renting_history.total_hours DESC",
          "SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 D.name FROM Discount D INNER JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(R.id) DESC",
          "SELECT D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.name HAVING COUNT(R.id) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Renting_history GROUP BY discount_id) T)",
          "SELECT name FROM (SELECT D.name, COUNT(*) as total FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name) AS SubQuery ORDER BY total DESC LIMIT 1",
          "SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(R.discount_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY)",
          "SELECT D.name FROM Discount D WHERE D.id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT D.name, COUNT(*) AS TotalRentals FROM Discount D LEFT JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY TotalRentals DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Renting_history GROUP BY discount_id) AS Sub)) LIMIT 1"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT D.name FROM Discount D WHERE D.id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY discount_id) AS subquery))",
          "SELECT TOP 1 D.name FROM Discount D INNER JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.id ORDER BY COUNT(R.id) DESC",
          "SELECT D.name FROM Discount D WHERE D.id = (SELECT TOP 1 discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC)",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.id HAVING COUNT(R.id) = (SELECT MAX(count) FROM (SELECT COUNT(id) AS count FROM Renting_history GROUP BY discount_id) AS counts)",
          "SELECT name FROM Discount WHERE id = (SELECT discount_id FROM Renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT D.name FROM Discount D JOIN (SELECT discount_id, COUNT(*) AS total FROM Renting_history GROUP BY discount_id ORDER BY total DESC LIMIT 1) AS R ON D.id = R.discount_id"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours > 30",
          "SELECT V.name AS VehicleName, V.Type_of_powertrain AS PowertrainType FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id AND R.total_hours > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT DISTINCT V.name, V.Type_of_powertrain FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id WHERE R.total_hours > 30",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.vehicles_id = V.id AND R.total_hours > 30)",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30 GROUP BY vehicles_id)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id, V.name, V.Type_of_powertrain HAVING MAX(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE EXISTS (SELECT NULL FROM Renting_history WHERE vehicles_id = Vehicles.id AND total_hours > 30)"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles INNER JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Renting_history.vehicles_id HAVING SUM(Renting_history.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles V WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.vehicles_id = V.id GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30",
          "SELECT DISTINCT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id WHERE (SELECT SUM(total_hours) FROM Renting_history WHERE vehicles_id = V.id) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V LEFT JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30",
          "SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history R GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30)",
          "SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Rate, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Rate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Average_City_Fuel, AVG(Highway_fuel_economy_rate) AS Average_Highway_Fuel FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate) AS City_Average, AVG(Highway_fuel_economy_rate) AS Highway_Average, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(Vehicles.City_fuel_economy_rate) AS City_Fuel_Avg, AVG(Vehicles.Highway_fuel_economy_rate) AS Highway_Fuel_Avg FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, MEAN(City_fuel_economy_rate) AS Avg_City, MEAN(Highway_fuel_economy_rate) AS Avg_Highway FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVERAGE(City_fuel_economy_rate) AS City_Fuel_Average, AVERAGE(Highway_fuel_economy_rate) AS Highway_Fuel_Average FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS CityRateAverage, AVG(Highway_fuel_economy_rate) AS HighwayRateAverage FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT AVG(City_fuel_economy_rate) AS AverageCityFuelRate, AVG(Highway_fuel_economy_rate) AS AverageHighwayFuelRate, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AvgCityFuel, AVG(Highway_fuel_economy_rate) AS AvgHighwayFuel FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "vehicle_rent",
      "infer_predictions": [
        [
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Fuel, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Average_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Average_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Average, AVG(Highway_fuel_economy_rate) AS Highway_Average FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Fuel_Avg, AVG(Highway_fuel_economy_rate) AS Highway_Fuel_Avg FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City, AVG(Highway_fuel_economy_rate) AS Avg_Highway FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Fuel_Economy_Average, AVG(Highway_fuel_economy_rate) AS Highway_Fuel_Economy_Average FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Average_City, AVG(Highway_fuel_economy_rate) AS Average_Highway FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Fuel_Economy_Mean, AVG(Highway_fuel_economy_rate) AS Highway_Fuel_Economy_Mean FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Mean_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Mean_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain",
          "SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Rate_Average, AVG(Highway_fuel_economy_rate) AS Highway_Rate_Average FROM Vehicles GROUP BY Type_of_powertrain"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans",
          "SELECT AVG(Student_Loans.amount_of_loan) AS AverageLoanAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans AS loans",
          "SELECT AVG(amount_of_loan) AS avg_loan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS average_amount_of_loan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageLoan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AvgLoanAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageStudentLoan FROM Student_Loans"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT AVG(amount_of_loan) AS average_loan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans",
          "SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans",
          "SELECT AVG(amount_of_loan) AS AverageLoanAmount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans AS loans",
          "SELECT AVG(amount_of_loan) AS avg_loan_amount FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan IS NOT NULL",
          "SELECT AVG(amount_of_loan) AS AverageAmountOfLoan FROM Student_Loans",
          "SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan > 0",
          "SELECT AVG(amount_of_loan) AS AvgLoan FROM Student_Loans WHERE amount_of_loan > 0"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_id FROM Students S WHERE S.student_id IN (SELECT C.student_id FROM Classes C GROUP BY C.student_id HAVING COUNT(*) >= 2) AND S.student_id IN (SELECT D.student_id FROM Detention D GROUP BY D.student_id HAVING COUNT(*) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) INTERSECT SELECT student_id FROM Students WHERE student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT Students.bio_data, Students.student_id FROM Students JOIN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) AS ClassCount ON Students.student_id = ClassCount.student_id JOIN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2) AS DetentionCount ON Students.student_id = DetentionCount.student_id",
          "SELECT DISTINCT S.bio_data, S.student_id FROM Students S, Classes C, Detention D WHERE S.student_id = C.student_id AND S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) >= 2 AND COUNT(DISTINCT D.detention_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) AND student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2)",
          "SELECT S.bio_data, S.student_id FROM Students S INNER JOIN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) AS EligibleClasses ON S.student_id = EligibleClasses.student_id LEFT JOIN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2) AS ManyDetentions ON S.student_id = ManyDetentions.student_id WHERE ManyDetentions.student_id IS NULL",
          "SELECT bio_data, student_id FROM Students WHERE EXISTS (SELECT 1 FROM Classes WHERE Students.student_id = Classes.student_id GROUP BY Classes.student_id HAVING COUNT(*) >= 2) AND NOT EXISTS (SELECT 1 FROM Detention WHERE Students.student_id = Detention.student_id GROUP BY Detention.student_id HAVING COUNT(*) >= 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) EXCEPT SELECT student_id FROM Students WHERE student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2)",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) >= 2 AND (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_id FROM Students S WHERE S.student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR S.student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) UNION SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2 UNION SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT DISTINCT S.bio_data, S.student_id FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) >= 2 UNION SELECT DISTINCT S.bio_data, S.student_id FROM Students S JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(D.detention_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT S.bio_data, S.student_id FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id LEFT JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) >= 2 OR COUNT(DISTINCT D.detention_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE EXISTS (SELECT 1 FROM Classes WHERE student_id = Students.student_id GROUP BY student_id HAVING COUNT(*) >= 2) OR EXISTS (SELECT 1 FROM Detention WHERE student_id = Students.student_id GROUP BY student_id HAVING COUNT(*) < 2)",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention WHERE student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2))",
          "SELECT S.bio_data, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) >= 2 OR (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2",
          "SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT * FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT T.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' AND T.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT Teachers.* FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id WHERE Classes.class_details LIKE '%data%' AND Teachers.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT Teachers.* FROM Teachers WHERE EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE 'net%')",
          "SELECT * FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT Teachers.* FROM Teachers, Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Classes.class_details LIKE '%data%' AND Teachers.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%') GROUP BY Teachers.teacher_id",
          "SELECT DISTINCT T.* FROM Teachers T, Classes C1 WHERE T.teacher_id = C1.teacher_id AND C1.class_details LIKE '%data%' AND NOT EXISTS (SELECT 1 FROM Classes C2 WHERE C2.teacher_id = T.teacher_id AND C2.class_details LIKE 'net%')",
          "SELECT * FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%' ESCAPE '!')",
          "SELECT T.* FROM Teachers T WHERE EXISTS (SELECT NULL FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE '%data%') AND NOT EXISTS (SELECT NULL FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE 'net%')",
          "SELECT Teachers.* FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id WHERE Classes.class_details LIKE '%data%' GROUP BY Teachers.teacher_id HAVING SUM(CASE WHEN Classes.class_details LIKE 'net%' THEN 1 ELSE 0 END) = 0"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T1.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT DISTINCT T1.teacher_details FROM Teachers T1 INNER JOIN Classes T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND NOT EXISTS (SELECT 1 FROM Classes T3 WHERE T3.teacher_id = T1.teacher_id AND T3.class_details LIKE 'net%')",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') EXCEPT SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT T1.teacher_details FROM Teachers T1 WHERE EXISTS (SELECT * FROM Classes T2 WHERE T2.teacher_id = T1.teacher_id AND T2.class_details LIKE '%data%') AND NOT EXISTS (SELECT * FROM Classes T3 WHERE T3.teacher_id = T1.teacher_id AND T3.class_details LIKE 'net%')",
          "SELECT T1.teacher_details FROM Teachers T1, Classes T2 WHERE T1.teacher_id = T2.teacher_id AND T2.class_details LIKE '%data%' AND T1.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')",
          "SELECT T1.teacher_details FROM Teachers T1 WHERE T1.teacher_id IN (SELECT T2.teacher_id FROM Classes T2 WHERE T2.class_details LIKE '%data%') AND T1.teacher_id NOT IN (SELECT T3.teacher_id FROM Classes T3 WHERE T3.class_details LIKE 'net%')",
          "SELECT DISTINCT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%' AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%'))",
          "SELECT teacher_details FROM Teachers WHERE EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE 'net%')",
          "SELECT T1.teacher_details FROM Teachers T1 JOIN Classes T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' GROUP BY T1.teacher_id HAVING COUNT(CASE WHEN T2.class_details LIKE 'net%' THEN 1 ELSE NULL END) = 0"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S WHERE NOT EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans L WHERE L.student_id = S.student_id)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id LEFT JOIN Student_Loans L ON S.student_id = L.student_id WHERE D.student_id IS NULL AND L.student_id IS NULL",
          "SELECT S.bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention UNION ALL SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Detention UNION SELECT DISTINCT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE NOT EXISTS (SELECT NULL FROM Detention WHERE student_id = Students.student_id) AND NOT EXISTS (SELECT NULL FROM Student_Loans WHERE student_id = Students.student_id)",
          "SELECT DISTINCT S.bio_data FROM Students S WHERE S.student_id NOT IN (SELECT D.student_id FROM Detention D) AND S.student_id NOT IN (SELECT L.student_id FROM Student_Loans L)",
          "SELECT bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention) AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S LEFT JOIN Detention D ON S.student_id = D.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE D.student_id IS NULL AND SL.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE NOT EXISTS (SELECT 1 FROM Detention WHERE student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans WHERE student_id = Students.student_id)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention UNION ALL SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT S.bio_data FROM Students S WHERE S.student_id NOT IN (SELECT student_id FROM Detention) AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students S WHERE NOT EXISTS (SELECT NULL FROM Detention D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT NULL FROM Student_Loans SL WHERE SL.student_id = S.student_id)",
          "SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S WHERE NOT EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans SL WHERE SL.student_id = S.student_id)"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)",
          "SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL INNER JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) A ON SL.student_id = A.student_id",
          "SELECT date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL WHERE EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = SL.student_id GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)",
          "SELECT date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(DISTINCT achievement_id) >= 2)",
          "SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) AS Sub ON SL.student_id = Sub.student_id",
          "SELECT date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT A.student_id FROM Achievements A GROUP BY A.student_id HAVING COUNT(*) >= 2)",
          "SELECT date_of_loan, amount_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL WHERE EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = SL.student_id GROUP BY A.student_id HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)",
          "SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL INNER JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) A ON SL.student_id = A.student_id",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = SL.student_id GROUP BY A.student_id HAVING COUNT(*) >= 2)",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP HAVING COUNT(*) >= 2)",
          "SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) AS Sub ON SL.student_id = Sub.student_id",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) > 1)",
          "SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT A.student_id FROM Achievements A GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)",
          "SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
          "SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT A.student_id FROM Achievements A GROUP BY A.student_id HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers AS T1 WHERE T1.teacher_id = (SELECT T2.teacher_id FROM Classes AS T2 GROUP BY T2.teacher_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1) AS C ON T.teacher_id = C.teacher_id",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT TOP 1 teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE T.teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING COUNT(*) = MAX(COUNT(*)))",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(course_id) DESC LIMIT 1)",
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 INNER JOIN (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1) T2 ON T1.teacher_id = T2.teacher_id",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM (SELECT teacher_id, COUNT(*) AS course_count FROM Classes GROUP BY teacher_id ORDER BY course_count DESC LIMIT 1) AS subquery)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id GROUP BY C.teacher_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM Classes GROUP BY teacher_id) AS counts))",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 JOIN Classes T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id, T1.teacher_details ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C GROUP BY C.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1)",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT TOP 1 teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC)",
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 WHERE T1.teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(class_id) AS cnt FROM Classes GROUP BY teacher_id) AS subquery))",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) >= ALL (SELECT COUNT(class_id) FROM Classes GROUP BY teacher_id))",
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 INNER JOIN (SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1) T2 ON T1.teacher_id = T2.teacher_id",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM (SELECT teacher_id, RANK() OVER (ORDER BY COUNT(class_id) DESC) AS rank FROM Classes GROUP BY teacher_id) AS ranked WHERE rank = 1)",
          "SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 JOIN (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1) T2 ON T1.teacher_id = T2.teacher_id",
          "SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT detention_summary FROM Detention",
          "SELECT UNIQUE detention_summary FROM Detention",
          "SELECT detention_summary FROM Detention GROUP BY detention_summary",
          "SELECT DISTINCT d.detention_summary FROM Detention d",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL",
          "SELECT DISTINCT detention_summary FROM Detention ORDER BY detention_summary",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary <> ''",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL AND detention_summary <> ''",
          "SELECT DISTINCT detention_summary FROM Detention GROUP BY detention_summary HAVING COUNT(*) >= 1",
          "SELECT DISTINCT ON (detention_summary) detention_summary FROM Detention"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT detention_summary FROM Detention",
          "SELECT UNIQUE detention_summary FROM Detention",
          "SELECT detention_summary FROM Detention GROUP BY detention_summary",
          "SELECT DISTINCT d.detention_summary FROM Detention d",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL",
          "SELECT DISTINCT detention_summary FROM Detention ORDER BY detention_summary",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary <> ''",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL AND detention_summary <> ''",
          "SELECT DISTINCT detention_summary FROM Detention WHERE LENGTH(detention_summary) > 0",
          "SELECT DISTINCT detention_summary FROM Detention WHERE detention_summary IS NOT NULL ORDER BY detention_summary"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_details, A.address_type_description FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Ref_Address_Types A ON SA.address_type_code = A.address_type_code",
          "SELECT student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT Students.student_details, Ref_Address_Types.address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students AS S, Students_Addresses AS SA, Ref_Address_Types AS AT WHERE S.student_id = SA.student_id AND SA.address_type_code = AT.address_type_code",
          "SELECT S.student_details AS Details, A.address_type_description AS AddressType FROM Students S, Students_Addresses SA, Ref_Address_Types A WHERE S.student_id = SA.student_id AND SA.address_type_code = A.address_type_code",
          "SELECT DISTINCT student_details, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students RIGHT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id RIGHT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students CROSS JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id CROSS JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT S.student_details, AT.address_type_description FROM Students S CROSS JOIN Students_Addresses SA ON S.student_id = SA.student_id CROSS JOIN Ref_Address_Types AT ON SA.address_type_code = AT.address_type_code"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_details, A.address_type_description FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Ref_Address_Types A ON SA.address_type_code = A.address_type_code",
          "SELECT student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT Students.student_details, Ref_Address_Types.address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students AS S, Students_Addresses AS SA, Ref_Address_Types AS AT WHERE S.student_id = SA.student_id AND SA.address_type_code = AT.address_type_code",
          "SELECT S.student_details, AT.address_type_description FROM Students S, Students_Addresses SA, Ref_Address_Types AT WHERE S.student_id = SA.student_id AND SA.address_type_code = AT.address_type_code",
          "SELECT DISTINCT student_details, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details AS 'Student Details', address_type_description AS 'Address Type' FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT S.student_details, A.address_type_description FROM Students S INNER JOIN Students_Addresses SA ON S.student_id = SA.student_id INNER JOIN Ref_Address_Types A ON SA.address_type_code = A.address_type_code",
          "SELECT student_details, address_type_description FROM Students CROSS JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id CROSS JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code",
          "SELECT student_details, address_type_description FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT A.address_details, S.bio_data FROM Addresses A JOIN Students_Addresses SA ON A.address_id = SA.address_id JOIN Students S ON SA.student_id = S.student_id",
          "SELECT address_details, bio_data FROM Addresses INNER JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id INNER JOIN Students ON Students_Addresses.student_id = Students.student_id",
          "SELECT Addresses.address_details AS Address, Students.bio_data AS Bio FROM Addresses, Students_Addresses, Students WHERE Addresses.address_id = Students_Addresses.address_id AND Students_Addresses.student_id = Students.student_id",
          "SELECT a.address_details, s.bio_data FROM Addresses a, Students_Addresses sa, Students s WHERE a.address_id = sa.address_id AND sa.student_id = s.student_id",
          "SELECT address_details, bio_data FROM Addresses JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id JOIN Students ON Students_Addresses.student_id = Students.student_id",
          "SELECT A.address_details, S.bio_data FROM Addresses A, Students_Addresses SA, Students S WHERE A.address_id = SA.address_id AND SA.student_id = S.student_id",
          "SELECT DISTINCT address_details, bio_data FROM Addresses JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id JOIN Students ON Students.student_id = Students_Addresses.student_id",
          "SELECT address_details AS 'Address Details', bio_data AS 'Biographical Data' FROM Addresses INNER JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id INNER JOIN Students ON Students.student_id = Students_Addresses.student_id",
          "SELECT A.address_details, S.bio_data FROM Addresses A INNER JOIN Students_Addresses SA ON A.address_id = SA.address_id INNER JOIN Students S ON SA.student_id = S.student_id ORDER BY S.bio_data",
          "SELECT address_details, bio_data FROM Addresses, Students_Addresses, Students WHERE Addresses.address_id = Students_Addresses.address_id AND Students_Addresses.student_id = Students.student_id ORDER BY address_details"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, A.address_details FROM Students S JOIN Students_Addresses SA ON S.student_id = SA.student_id JOIN Addresses A ON SA.address_id = A.address_id",
          "SELECT bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT Students.bio_data AS Biography, Addresses.address_details AS Address FROM Students, Students_Addresses, Addresses WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data, address_details FROM Students, Addresses, Students_Addresses WHERE Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id",
          "SELECT bio_data AS StudentBio, address_details AS StudentAddress FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT S.bio_data, A.address_details FROM Students S, Students_Addresses SA, Addresses A WHERE S.student_id = SA.student_id AND SA.address_id = A.address_id",
          "SELECT DISTINCT bio_data, address_details FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data, address_details FROM Students CROSS JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id CROSS JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data AS Biography, address_details AS Address FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id",
          "SELECT bio_data, address_details FROM Students FULL OUTER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id FULL OUTER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id WHERE Students.student_id IS NOT NULL AND Addresses.address_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, T.date_of_transcript FROM Students S JOIN Transcripts T ON S.student_id = T.student_id",
          "SELECT bio_data, date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT bio_data AS StudentBio, date_of_transcript AS TranscriptDate FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT a.bio_data, b.date_of_transcript FROM Students a, Transcripts b WHERE a.student_id = b.student_id",
          "SELECT bio_data, date_of_transcript FROM Students CROSS JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT bio_data, date_of_transcript FROM Students INNER JOIN Transcripts USING (student_id)",
          "SELECT bio_data, date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, T.date_of_transcript FROM Students S JOIN Transcripts T ON S.student_id = T.student_id",
          "SELECT bio_data, date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id",
          "SELECT bio_data AS Student_Bio, date_of_transcript AS Transcript_Date FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts USING (student_id)",
          "SELECT S.bio_data, T.date_of_transcript FROM Students AS S, Transcripts AS T WHERE S.student_id = T.student_id",
          "SELECT bio_data, date_of_transcript FROM Students S CROSS JOIN Transcripts T ON S.student_id = T.student_id",
          "SELECT S.bio_data, T.date_of_transcript FROM Students S LEFT JOIN Transcripts T ON S.student_id = T.student_id",
          "SELECT DISTINCT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id",
          "SELECT bio_data, date_of_transcript FROM Students S RIGHT JOIN Transcripts T ON S.student_id = T.student_id"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(student_id) AS num_students, behaviour_monitoring_details FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY behaviour_monitoring_details",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "WITH MostCommon AS (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) SELECT COUNT(B.student_id) AS num_students, B.behaviour_monitoring_details FROM Behaviour_Monitoring B JOIN MostCommon M ON B.behaviour_monitoring_details = M.behaviour_monitoring_details GROUP BY B.behaviour_monitoring_details",
          "SELECT TOP 1 WITH TIES behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC",
          "SELECT behaviour_monitoring_details, COUNT(*) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY num_students DESC LIMIT 1",
          "SELECT behaviour_monitoring_details, COUNT(student_id) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery)",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1) GROUP BY behaviour_monitoring_details",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) >= ALL (SELECT COUNT(student_id) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details)",
          "SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT behaviour_monitoring_details, COUNT(*) AS frequency FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY frequency DESC LIMIT 1",
          "SELECT TOP 1 behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS Count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY Count DESC",
          "SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS SubQuery)",
          "WITH RankedResults AS (SELECT behaviour_monitoring_details, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) SELECT behaviour_monitoring_details FROM RankedResults WHERE rank = 1",
          "SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) AS Count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY Count DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT behaviour_monitoring_details, COUNT(*) AS total FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY total DESC LIMIT 1",
          "SELECT * FROM (SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC) WHERE ROWNUM = 1",
          "SELECT behaviour_monitoring_details, COUNT(*) as count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) temp)",
          "SELECT behaviour_monitoring_details, COUNT(*) as TotalOccurrences FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY TotalOccurrences DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) INTERSECT SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT DISTINCT S.bio_data, S.student_details FROM Students S, Behaviour_Monitoring B WHERE S.student_id = B.student_id AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3)",
          "WITH CommonResult AS (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1), ThreeStudents AS (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM CommonResult INTERSECT SELECT behaviour_monitoring_details FROM ThreeStudents)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3))",
          "SELECT S.bio_data, S.student_details FROM Students S INNER JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details = (SELECT TOP 1 behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC) AND B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3))",
          "SELECT S.bio_data, S.student_details FROM Students S WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE S.student_id = B.student_id AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id, behaviour_monitoring_details HAVING behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND COUNT(*) = 3)",
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = B.behaviour_monitoring_details) = 3"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 OR behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_details) = 3 UNION SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT BM.student_id FROM Behaviour_Monitoring BM GROUP BY BM.behaviour_monitoring_details, BM.student_id HAVING COUNT(*) = 3 OR BM.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "WITH CommonResult AS (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1), ThreeResult AS (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM CommonResult UNION SELECT behaviour_monitoring_details FROM ThreeResult))",
          "SELECT bio_data, student_details FROM Students INNER JOIN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 UNION ALL SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)) AS Result ON Students.student_id = Result.student_id",
          "SELECT DISTINCT S.bio_data, S.student_details FROM Students S, Behaviour_Monitoring B WHERE S.student_id = B.student_id AND B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 OR behaviour_monitoring_details = (SELECT TOP 1 behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC))",
          "SELECT bio_data, student_details FROM Students WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring WHERE Students.student_id = Behaviour_Monitoring.student_id AND (behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) OR behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id, behaviour_monitoring_details HAVING behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) OR behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details, COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS T WHERE T.cnt = 3 OR T.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 UNION SELECT behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC) AS MostCommon LIMIT 1))"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data FROM Students S WHERE NOT EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE B.student_id = S.student_id AND B.behaviour_monitoring_details != (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING MIN(behaviour_monitoring_details) = MAX(behaviour_monitoring_details) AND MIN(behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1 AND MAX(behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT S.bio_data FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT B.behaviour_monitoring_details) = 1 AND MAX(B.behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE student_id = Students.student_id))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id, behaviour_monitoring_details HAVING behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE student_id = Students.student_id))",
          "SELECT DISTINCT S.bio_data FROM Students S INNER JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY S.student_id HAVING COUNT(DISTINCT B.behaviour_monitoring_details) = 1",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY B.student_id HAVING COUNT(B.behaviour_monitoring_details) = (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE student_id = B.student_id))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B GROUP BY B.student_id HAVING COUNT(DISTINCT B.behaviour_monitoring_details) = 1 AND MAX(B.behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE B.student_id = S.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE student_id = S.student_id) AND behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING behaviour_monitoring_details = (SELECT TOP 1 behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC))",
          "SELECT bio_data FROM Students INNER JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id WHERE Behaviour_Monitoring.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring WHERE Students.student_id = Behaviour_Monitoring.student_id AND behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT S.bio_data FROM Students S, Behaviour_Monitoring B WHERE S.student_id = B.student_id AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details, COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY cnt DESC) WHERE ROWNUM = 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details)))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, E.event_date FROM Students S JOIN Student_Events E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT bio_data AS Student_Bio, event_date AS Event_Date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id",
          "SELECT S.bio_data, E.event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id",
          "SELECT DISTINCT S.bio_data, E.event_date FROM Students S LEFT JOIN Student_Events E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students JOIN Student_Events USING (student_id)",
          "SELECT bio_data, event_date FROM Students S LEFT OUTER JOIN Student_Events E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students S RIGHT JOIN Student_Events E ON S.student_id = E.student_id"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, E.event_date FROM Students S JOIN Student_Events E ON S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT bio_data AS BiographicalData, event_date AS EventDate FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id",
          "SELECT S.bio_data, E.event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id",
          "SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT Students.bio_data, Student_Events.event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id",
          "SELECT DISTINCT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id",
          "SELECT bio_data, event_date FROM Students S INNER JOIN Student_Events E ON S.student_id = E.student_id ORDER BY event_date"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(student_id) AS num_students, event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT TOP 1 COUNT(SE.student_id) AS num_students, SE.event_type_code, RET.event_type_description FROM Student_Events SE INNER JOIN Ref_Event_Types RET ON SE.event_type_code = RET.event_type_code GROUP BY SE.event_type_code ORDER BY num_students DESC",
          "SELECT event_type_code, COUNT(student_id) AS num_students, event_type_description FROM Student_Events JOIN Ref_Event_Types USING (event_type_code) GROUP BY event_type_code ORDER BY num_students DESC FETCH FIRST 1 ROW ONLY",
          "SELECT A.event_type_code, A.num_students, B.event_type_description FROM (SELECT event_type_code, COUNT(*) AS num_students FROM Student_Events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1) A JOIN Ref_Event_Types B ON A.event_type_code = B.event_type_code",
          "WITH EventCounts AS (SELECT event_type_code, COUNT(student_id) AS num_students FROM Student_Events GROUP BY event_type_code) SELECT EC.num_students, EC.event_type_code, ET.event_type_description FROM EventCounts EC JOIN Ref_Event_Types ET ON EC.event_type_code = ET.event_type_code WHERE EC.num_students = (SELECT MAX(num_students) FROM EventCounts)",
          "SELECT COUNT(*) AS num_students, event_type_code, (SELECT event_type_description FROM Ref_Event_Types WHERE event_type_code = Student_Events.event_type_code) AS event_type_description FROM Student_Events GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT COUNT(student_id) AS num_students, Student_Events.event_type_code, event_type_description FROM Student_Events LEFT JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Student_Events.event_type_code ORDER BY num_students DESC LIMIT 1",
          "SELECT event_type_code, COUNT(student_id) AS num_students, event_type_description FROM Student_Events, Ref_Event_Types WHERE Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code HAVING COUNT(student_id) = (SELECT MAX(COUNT(student_id)) FROM Student_Events GROUP BY event_type_code)",
          "SELECT (SELECT event_type_description FROM Ref_Event_Types WHERE event_type_code = sub.event_type_code) AS event_type_description, sub.num_students, sub.event_type_code FROM (SELECT event_type_code, COUNT(student_id) AS num_students FROM Student_Events GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1) sub",
          "SELECT COUNT(student_id) AS num_students, event_type_code, event_type_description FROM Student_Events INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code HAVING COUNT(student_id) = (SELECT MAX(COUNT(student_id)) FROM Student_Events GROUP BY event_type_code)"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT TOP 1 E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC LIMIT 1",
          "SELECT E.event_type_code, E.event_type_description, COUNT(*) AS num_students FROM Student_Events S INNER JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Student_Events GROUP BY event_type_code) AS counts)",
          "WITH EventCounts AS (SELECT event_type_code, COUNT(student_id) AS count FROM Student_Events GROUP BY event_type_code) SELECT E.event_type_code, E.event_type_description, EC.count FROM EventCounts EC JOIN Ref_Event_Types E ON EC.event_type_code = E.event_type_code WHERE EC.count = (SELECT MAX(count) FROM EventCounts)",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S, Ref_Event_Types E WHERE S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S RIGHT JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC LIMIT 1",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S LEFT JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC FETCH FIRST ROW ONLY",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S FULL OUTER JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC LIMIT 1",
          "SELECT E.event_type_code, E.event_type_description, COUNT(DISTINCT S.student_id) AS student_count FROM Student_Events S JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC LIMIT 1",
          "SELECT E.event_type_code, E.event_type_description, COUNT(S.student_id) AS student_count FROM Student_Events S CROSS JOIN Ref_Event_Types E ON S.event_type_code = E.event_type_code GROUP BY E.event_type_code, E.event_type_description ORDER BY student_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT ach.achievement_details, typ.achievement_type_description FROM Achievements ach, Ref_Achievement_Type typ WHERE ach.achievement_type_code = typ.achievement_type_code",
          "SELECT detail, description FROM (SELECT achievement_details AS detail, achievement_type_code FROM Achievements) AS A JOIN (SELECT achievement_type_description AS description, achievement_type_code FROM Ref_Achievement_Type) AS R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT A.achievement_details AS Details, R.achievement_type_description AS Description FROM Achievements A, Ref_Achievement_Type R WHERE A.achievement_type_code = R.achievement_type_code",
          "SELECT DISTINCT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type USING (achievement_type_code)",
          "SELECT achievement_details, achievement_type_description FROM Achievements A LEFT JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A RIGHT JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT achievement_details AS 'Achievement Details', achievement_type_description AS 'Type Description' FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT * FROM (SELECT achievement_details, achievement_type_code FROM Achievements) A JOIN (SELECT achievement_type_description, achievement_type_code FROM Ref_Achievement_Type) R ON A.achievement_type_code = R.achievement_type_code"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT ach.achievement_details, ref.achievement_type_description FROM Achievements ach, Ref_Achievement_Type ref WHERE ach.achievement_type_code = ref.achievement_type_code",
          "SELECT details.achievement_details, type.achievement_type_description FROM Achievements AS details JOIN Ref_Achievement_Type AS type ON details.achievement_type_code = type.achievement_type_code",
          "SELECT A.achievement_details AS Detail, R.achievement_type_description AS Description FROM Achievements A, Ref_Achievement_Type R WHERE A.achievement_type_code = R.achievement_type_code",
          "SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type USING (achievement_type_code)",
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A INNER JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code",
          "SELECT achievement_details AS 'Achievement Detail', achievement_type_description AS 'Type Description' FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT DISTINCT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code",
          "SELECT A.achievement_details, R.achievement_type_description FROM Achievements A LEFT JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT C.teacher_id) FROM Classes C JOIN Students S ON C.student_id = S.student_id LEFT JOIN Achievements A ON S.student_id = A.student_id WHERE A.student_id IS NULL",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students EXCEPT SELECT student_id FROM Achievements)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements)",
          "SELECT COUNT(DISTINCT C.teacher_id) FROM Classes C WHERE NOT EXISTS (SELECT 1 FROM Achievements A WHERE A.student_id = C.student_id)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE NOT EXISTS (SELECT 1 FROM Achievements WHERE student_id = Students.student_id))",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes INNER JOIN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements)) AS Subquery ON Classes.student_id = Subquery.student_id",
          "SELECT DISTINCT COUNT(teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students LEFT JOIN Achievements ON Students.student_id = Achievements.student_id WHERE Achievements.student_id IS NULL)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE EXISTS (SELECT student_id FROM Students WHERE student_id = Classes.student_id AND student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students MINUS SELECT student_id FROM Achievements)"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.student_id IS NULL",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE EXISTS (SELECT 1 FROM Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Classes.student_id NOT IN (SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE NOT EXISTS (SELECT 1 FROM Achievements WHERE T2.student_id = Achievements.student_id)",
          "SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 WHERE T1.teacher_id IN (SELECT T2.teacher_id FROM Classes AS T2 LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T3.achievement_id IS NULL)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Students EXCEPT SELECT student_id FROM Achievements))",
          "SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id LEFT OUTER JOIN Achievements AS T3 ON T2.student_id = T3.student_id GROUP BY T1.teacher_id HAVING COUNT(T3.student_id) = 0",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements)))",
          "SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 WHERE EXISTS (SELECT NULL FROM Classes AS T2 LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id WHERE T1.teacher_id = T2.teacher_id AND T3.student_id IS NULL)",
          "SELECT COUNT(DISTINCT teacher_id) FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Students LEFT JOIN Achievements ON Students.student_id = Achievements.student_id WHERE Achievements.achievement_id IS NULL))"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript, transcript_details FROM Transcripts",
          "SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts",
          "SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t",
          "SELECT date_of_transcript AS Date, transcript_details AS Details FROM Transcripts",
          "SELECT * FROM Transcripts SELECT date_of_transcript, transcript_details",
          "SELECT date_of_transcript, transcript_details FROM Transcripts ORDER BY date_of_transcript",
          "SELECT transcript_details, date_of_transcript FROM Transcripts",
          "SELECT date_of_transcript, transcript_details FROM Transcripts WHERE date_of_transcript IS NOT NULL",
          "SELECT Transcripts.date_of_transcript AS TranscriptDate, Transcripts.transcript_details AS TranscriptDetails FROM Transcripts",
          "SELECT DISTINCT date_of_transcript, transcript_details FROM Transcripts"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript, transcript_details FROM Transcripts",
          "SELECT Transcripts.date_of_transcript, Transcripts.transcript_details FROM Transcripts",
          "SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t",
          "SELECT date_of_transcript AS Date, transcript_details AS Details FROM Transcripts",
          "SELECT * FROM Transcripts SELECT date_of_transcript, transcript_details",
          "SELECT date_of_transcript, transcript_details FROM Transcripts ORDER BY date_of_transcript",
          "SELECT date_of_transcript, transcript_details FROM Transcripts WHERE date_of_transcript IS NOT NULL",
          "SELECT DISTINCT date_of_transcript, transcript_details FROM Transcripts",
          "SELECT date_of_transcript, transcript_details FROM Transcripts GROUP BY date_of_transcript, transcript_details",
          "SELECT date_of_transcript, transcript_details FROM Transcripts ORDER BY date_of_transcript DESC"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements AS a",
          "SELECT achievement_type_code AS TypeCode, achievement_details AS Details, date_achievement AS Date FROM Achievements",
          "SELECT ACH.achievement_type_code, ACH.achievement_details, ACH.date_achievement FROM Achievements ACH",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement DESC",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL",
          "SELECT DISTINCT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements GROUP BY achievement_type_code, achievement_details, date_achievement",
          "SELECT * FROM Achievements WHERE achievement_type_code IS NOT NULL AND achievement_details IS NOT NULL AND date_achievement IS NOT NULL",
          "SELECT achievement_type_code, achievement_details, TO_CHAR(date_achievement, 'YYYY-MM-DD') AS formatted_date FROM Achievements"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements AS a",
          "SELECT achievement_type_code AS TypeCode, achievement_details AS Details, date_achievement AS Date FROM Achievements",
          "SELECT ACHIEVEMENT_TYPE_CODE, ACHIEVEMENT_DETAILS, DATE_ACHIEVEMENT FROM ACHIEVEMENTS",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements ORDER BY date_achievement",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL",
          "SELECT DISTINCT achievement_type_code, achievement_details, date_achievement FROM Achievements",
          "SELECT achievement_type_code, achievement_details, TO_CHAR(date_achievement, 'YYYY-MM-DD') AS date FROM Achievements",
          "SELECT * FROM Achievements WHERE achievement_type_code IS NOT NULL AND achievement_details IS NOT NULL AND date_achievement IS NOT NULL",
          "SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements GROUP BY achievement_type_code, achievement_details, date_achievement"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention",
          "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention",
          "SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`",
          "SELECT Detention.datetime_detention_start AS Start_Time, Detention.datetime_detention_end AS End_Time FROM Detention",
          "SELECT D.datetime_detention_start, D.datetime_detention_end FROM Detention D",
          "SELECT datetime_detention_start AS 'Start Time', datetime_detention_end AS 'End Time' FROM Detention",
          "SELECT * FROM Detention WHERE datetime_detention_start IS NOT NULL AND datetime_detention_end IS NOT NULL",
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention ORDER BY datetime_detention_start",
          "SELECT datetime_detention_start AS StartTime, datetime_detention_end AS EndTime FROM Detention",
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention WHERE datetime_detention_start < datetime_detention_end"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention",
          "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention",
          "SELECT datetime_detention_start AS Start_Time, datetime_detention_end AS End_Time FROM Detention",
          "SELECT D.datetime_detention_start, D.datetime_detention_end FROM Detention D",
          "SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`",
          "SELECT datetime_detention_start AS 'Start Time', datetime_detention_end AS 'End Time' FROM Detention",
          "SELECT start_time, end_time FROM (SELECT datetime_detention_start AS start_time, datetime_detention_end AS end_time FROM Detention) AS times",
          "SELECT Detention.datetime_detention_start AS StartTime, Detention.datetime_detention_end AS EndTime FROM Detention",
          "SELECT * FROM (SELECT datetime_detention_start, datetime_detention_end FROM Detention) AS DetentionTimes",
          "SELECT datetime_detention_start, datetime_detention_end FROM Detention ORDER BY datetime_detention_start"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details CONTAINS 'Suite'",
          "SELECT bio_data FROM Students WHERE INSTR(student_details, 'Suite') > 0",
          "SELECT bio_data FROM Students WHERE POSITION('Suite' IN student_details) > 0",
          "SELECT bio_data FROM Students WHERE CHARINDEX('Suite', student_details) > 0",
          "SELECT bio_data FROM Students WHERE student_details MATCH 'Suite'",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Students WHERE student_details LIKE '%Suite%')",
          "SELECT S.bio_data FROM Students S WHERE S.student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details REGEXP 'Suite'",
          "SELECT bio_data FROM Students WHERE student_details SIMILAR TO '%Suite%'"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE student_details CONTAINS 'Suite'",
          "SELECT bio_data FROM Students WHERE INSTR(student_details, 'Suite') > 0",
          "SELECT bio_data FROM Students WHERE POSITION('Suite' IN student_details) > 0",
          "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%' ESCAPE '\\'",
          "SELECT S.bio_data FROM Students S WHERE S.student_details LIKE '%Suite%'",
          "SELECT bio_data FROM Students WHERE CHARINDEX('Suite', student_details) > 0",
          "SELECT bio_data FROM Students WHERE student_details REGEXP 'Suite'",
          "SELECT bio_data FROM Students WHERE student_details SIMILAR TO '%Suite%'",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Students S WHERE S.student_details LIKE '%Suite%' AND S.student_id = Students.student_id)"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.*, S.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Students S ON C.student_id = S.student_id",
          "SELECT Teachers.*, Students.* FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers AS T, Students AS S, Classes AS C WHERE T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
          "SELECT * FROM Teachers, Students, Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id",
          "SELECT teacher_details, student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT T.*, S.* FROM Teachers T, Classes C, Students S WHERE T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
          "SELECT Teachers.teacher_id, Teachers.teacher_details, Students.student_id, Students.student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT DISTINCT Teachers.*, Students.* FROM Teachers, Students JOIN Classes ON Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id",
          "SELECT T.teacher_id, T.teacher_details, S.student_id, S.student_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id INNER JOIN Students S ON C.student_id = S.student_id",
          "SELECT T.*, S.* FROM Teachers T CROSS JOIN Students S JOIN Classes C ON T.teacher_id = C.teacher_id AND S.student_id = C.student_id"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.teacher_details, S.student_details FROM Classes C JOIN Teachers T ON C.teacher_id = T.teacher_id JOIN Students S ON C.student_id = S.student_id",
          "SELECT teacher_details, student_details FROM Teachers, Students, Classes WHERE Classes.teacher_id = Teachers.teacher_id AND Classes.student_id = Students.student_id",
          "SELECT T1.teacher_details AS Teacher, T2.student_details AS Student FROM Teachers T1, Students T2 INNER JOIN Classes ON T1.teacher_id = Classes.teacher_id AND T2.student_id = Classes.student_id",
          "SELECT T.teacher_details, S.student_details FROM Classes INNER JOIN Teachers T ON Classes.teacher_id = T.teacher_id INNER JOIN Students S ON Classes.student_id = S.student_id",
          "SELECT teacher_details, student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers T, Students S, Classes C WHERE C.teacher_id = T.teacher_id AND C.student_id = S.student_id",
          "SELECT DISTINCT teacher_details, student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Students.student_id = Classes.student_id",
          "SELECT T.teacher_details AS 'Teacher Info', S.student_details AS 'Student Info' FROM Classes C LEFT JOIN Teachers T ON C.teacher_id = T.teacher_id LEFT JOIN Students S ON C.student_id = S.student_id",
          "SELECT T.teacher_details, S.student_details FROM Teachers T CROSS JOIN Students S JOIN Classes C ON T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
          "SELECT teacher_details, student_details FROM Teachers, Students JOIN Classes ON Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT T1.teacher_id, COUNT(T1.class_id) AS total_classes FROM Classes AS T1 GROUP BY T1.teacher_id HAVING total_classes = (SELECT MAX(total_classes) FROM (SELECT COUNT(class_id) AS total_classes FROM Classes GROUP BY teacher_id) AS subquery)",
          "SELECT TOP 1 teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC",
          "SELECT teacher_id, MAX(course_count) FROM (SELECT teacher_id, COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS course_counts",
          "WITH TeacherCourseCounts AS (SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM TeacherCourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM TeacherCourseCounts)",
          "SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM Classes GROUP BY teacher_id) AS counts)",
          "SELECT teacher_id FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS TempTable)",
          "SELECT teacher_id, num_courses FROM (SELECT teacher_id, COUNT(class_id) AS num_courses, RANK() OVER (ORDER BY COUNT(class_id) DESC) AS rank FROM Classes GROUP BY teacher_id) AS ranked WHERE rank = 1",
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT T.teacher_id, COUNT(*) AS total_courses FROM Classes AS T GROUP BY T.teacher_id ORDER BY total_courses DESC FETCH FIRST 1 ROW ONLY",
          "SELECT teacher_id, COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id HAVING course_count = (SELECT MAX(course_count) FROM (SELECT COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS subquery)",
          "SELECT TOP 1 teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC",
          "SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1",
          "SELECT teacher_id, COUNT(*) FROM Classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1",
          "WITH CourseCounts AS (SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts)",
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1 OFFSET 0",
          "SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(COUNT(class_id)) FROM Classes GROUP BY teacher_id)",
          "SELECT teacher_id, MAX(course_count) FROM (SELECT teacher_id, COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS CourseCounts GROUP BY teacher_id ORDER BY MAX(course_count) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT MAX(course_count) AS max_courses, student_id FROM (SELECT COUNT(course_id) AS course_count, ID AS student_id FROM takes GROUP BY ID) AS course_counts GROUP BY student_id ORDER BY max_courses DESC LIMIT 1",
          "SELECT TOP 1 student_id, COUNT(course_id) AS num_courses FROM takes GROUP BY student_id ORDER BY num_courses DESC",
          "SELECT student_id, COUNT(*) AS total_courses FROM takes GROUP BY student_id ORDER BY total_courses DESC FETCH FIRST 1 ROW ONLY",
          "SELECT student_id, COUNT(course_id) AS course_count FROM takes GROUP BY student_id ORDER BY course_count DESC LIMIT 1",
          "SELECT ID AS student_id, COUNT(course_id) AS num_courses FROM takes GROUP BY ID ORDER BY num_courses DESC LIMIT 1",
          "SELECT student_id, MAX(course_count) FROM (SELECT student_id, COUNT(course_id) AS course_count FROM takes GROUP BY student_id) AS subquery GROUP BY student_id ORDER BY MAX(course_count) DESC LIMIT 1",
          "WITH CourseCounts AS (SELECT ID AS student_id, COUNT(course_id) AS num_courses FROM takes GROUP BY ID) SELECT student_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts)",
          "SELECT student_id, COUNT(*) AS total_courses FROM takes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM takes GROUP BY student_id) AS counts)",
          "SELECT student_id, COUNT(course_id) FROM takes GROUP BY student_id ORDER BY COUNT(course_id) DESC LIMIT 1",
          "SELECT ID AS student_id, COUNT(*) AS num_courses FROM takes GROUP BY ID HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM takes GROUP BY ID) subquery) LIMIT 1"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT student_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1",
          "SELECT S.student_id, COUNT(C.class_id) AS total_courses FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id ORDER BY total_courses DESC LIMIT 1",
          "SELECT TOP 1 student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id ORDER BY course_count DESC",
          "SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id) AS subquery)",
          "SELECT student_id, MAX(course_count) FROM (SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id) AS course_counts",
          "SELECT student_id FROM Classes GROUP BY student_id ORDER BY COUNT(class_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM Classes GROUP BY student_id) temp)",
          "SELECT student_id, COUNT(class_id) AS courses_taken FROM Classes GROUP BY student_id ORDER BY courses_taken DESC FETCH FIRST ROW ONLY",
          "SELECT student_id FROM (SELECT student_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY student_id) AS course_counts WHERE num_courses = (SELECT MAX(num_courses) FROM (SELECT COUNT(class_id) AS num_courses FROM Classes GROUP BY student_id) temp)",
          "SELECT student_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT s.student_id, s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(scr.course_id) = 2",
          "SELECT Students.student_id, Students.student_details FROM Students INNER JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id GROUP BY Students.student_id, Students.student_details HAVING COUNT(Student_Course_Registrations.course_id) = 2",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = 2)",
          "SELECT DISTINCT s.student_id, s.student_details FROM Students s, Student_Course_Registrations scr WHERE s.student_id = scr.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT scr.course_id) = 2",
          "SELECT s.student_id, s.student_details FROM Students s WHERE (SELECT COUNT(*) FROM Student_Course_Registrations scr WHERE scr.student_id = s.student_id) = 2",
          "SELECT s.student_id, s.student_details FROM Students s LEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(scr.course_id) = 2",
          "SELECT s.student_id, s.student_details FROM Students s INNER JOIN (SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = 2) AS scr ON s.student_id = scr.student_id",
          "SELECT s.student_id, s.student_details FROM Students s WHERE EXISTS (SELECT 1 FROM Student_Course_Registrations scr WHERE scr.student_id = s.student_id GROUP BY scr.student_id HAVING COUNT(scr.course_id) = 2)",
          "SELECT s.student_id, s.student_details FROM Students s JOIN (SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = 2) scr ON s.student_id = scr.student_id",
          "SELECT s.student_id, s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT scr.course_id) = 2"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.student_details FROM Students AS S JOIN takes AS T ON S.student_id = T.student_id GROUP BY T.student_id HAVING COUNT(T.course_id) = 2",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM takes GROUP BY student_id HAVING COUNT(course_id) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S WHERE (SELECT COUNT(*) FROM takes T WHERE T.student_id = S.student_id) = 2",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM takes GROUP BY student_id HAVING COUNT(DISTINCT course_id) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S INNER JOIN (SELECT student_id FROM takes GROUP BY student_id HAVING COUNT(*) = 2) T ON S.student_id = T.student_id",
          "SELECT S.student_id, S.student_details FROM Students S, takes T WHERE S.student_id = T.student_id GROUP BY T.student_id HAVING COUNT(T.course_id) = 2",
          "SELECT DISTINCT S.student_id, S.student_details FROM Students S JOIN takes T ON S.student_id = T.student_id GROUP BY S.student_id HAVING COUNT(T.course_id) = 2",
          "SELECT S.student_id, S.student_details FROM Students S WHERE EXISTS (SELECT 1 FROM takes T WHERE T.student_id = S.student_id GROUP BY T.student_id HAVING COUNT(T.course_id) = 2)",
          "SELECT S.student_id, S.student_details FROM Students S WHERE S.student_id IN (SELECT student_id FROM takes GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM takes GROUP BY student_id HAVING COUNT(course_id) = 2)"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT TOP 1 D.detention_type_code, R.detention_type_description FROM Detention D INNER JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(D.detention_type_code)",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D, Ref_Detention_Type R WHERE D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description HAVING COUNT(D.detention_type_code) = (SELECT MIN(COUNT(detention_type_code)) FROM Detention GROUP BY detention_type_code)",
          "SELECT detention_type_code, detention_type_description FROM (SELECT D.detention_type_code, R.detention_type_description, COUNT(*) AS cnt FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description) AS SubQuery ORDER BY cnt ASC LIMIT 1",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(D.detention_type_code) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D LEFT JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D RIGHT JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Detention GROUP BY detention_type_code)",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(D.detention_type_code) ASC LIMIT 1",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code WHERE (D.detention_type_code, R.detention_type_description) IN (SELECT detention_type_code, detention_type_description FROM Detention GROUP BY detention_type_code, detention_type_description ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.detention_type_code, T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN (SELECT detention_type_code, COUNT(*) AS count FROM Detention GROUP BY detention_type_code ORDER BY count ASC LIMIT 1) AS T2 ON T1.detention_type_code = T2.detention_type_code",
          "SELECT RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT INNER JOIN (SELECT detention_type_code, COUNT(*) AS count FROM Detention GROUP BY detention_type_code ORDER BY count) AS D ON RDT.detention_type_code = D.detention_type_code FETCH FIRST 1 ROWS ONLY",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT WHERE RDT.detention_type_code IN (SELECT D.detention_type_code FROM Detention D GROUP BY D.detention_type_code ORDER BY COUNT(D.detention_type_code) ASC LIMIT 1)",
          "SELECT TOP 1 RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT JOIN Detention D ON RDT.detention_type_code = D.detention_type_code GROUP BY RDT.detention_type_code, RDT.detention_type_description ORDER BY COUNT(D.detention_type_code)",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT TOP 1 detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC)",
          "SELECT RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT, (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) AS LeastCommon WHERE RDT.detention_type_code = LeastCommon.detention_type_code",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code IN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Detention GROUP BY detention_type_code))",
          "SELECT RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT JOIN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) AS MinDetention ON RDT.detention_type_code = MinDetention.detention_type_code",
          "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY)"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, SL.other_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id HAVING Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans GROUP BY student_id)",
          "SELECT S.bio_data, SL.other_details FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id = S.student_id)",
          "SELECT bio_data, other_details FROM Students S INNER JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans WHERE student_id = SL.student_id)",
          "SELECT bio_data, other_details FROM Students S LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, other_details FROM Students S RIGHT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT L.student_id FROM Student_Loans L WHERE L.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data, student_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT Students.bio_data, Students.student_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id GROUP BY Students.student_id HAVING Student_Loans.amount_of_loan > AVG(Student_Loans.amount_of_loan)",
          "SELECT bio_data, student_details FROM Students WHERE EXISTS (SELECT 1 FROM Student_Loans WHERE Student_Loans.student_id = Students.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data, student_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data, S.student_details FROM Students S, Student_Loans L WHERE S.student_id = L.student_id AND L.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans L2)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans) GROUP BY student_id)",
          "SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT MIN(date_of_loan) FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
          "SELECT TOP 1 date_of_loan FROM Student_Loans ORDER BY date_of_loan",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans)",
          "SELECT MIN(date_of_loan) AS EarliestLoanDate FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC FETCH FIRST ROW ONLY",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan LIMIT 1",
          "SELECT * FROM (SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan) WHERE ROWNUM = 1",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans) LIMIT 1",
          "SELECT FIRST(date_of_loan) FROM Student_Loans ORDER BY date_of_loan ASC"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT MIN(date_of_loan) FROM Student_Loans",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
          "SELECT * FROM (SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC) AS earliest LIMIT 1",
          "SELECT date_of_loan FROM Student_Loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM Student_Loans)",
          "SELECT TOP 1 date_of_loan FROM Student_Loans ORDER BY date_of_loan",
          "SELECT date_of_loan FROM Student_Loans GROUP BY date_of_loan ORDER BY date_of_loan ASC LIMIT 1",
          "SELECT MIN(date_of_loan) AS EarliestLoanDate FROM Student_Loans",
          "SELECT date_of_loan AS EarliestDate FROM Student_Loans ORDER BY date_of_loan ASC FETCH FIRST ROW ONLY",
          "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT FIRST(date_of_loan) FROM Student_Loans ORDER BY date_of_loan ASC"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT S.bio_data FROM Students S INNER JOIN (SELECT student_id, MIN(amount_of_loan) AS MinLoan FROM Student_Loans GROUP BY student_id) AS SL ON S.student_id = SL.student_id",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans) LIMIT 1)",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan LIMIT 1)"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id ORDER BY SL.amount_of_loan ASC LIMIT 1",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT MIN(student_id) FROM Student_Loans GROUP BY student_id ORDER BY amount_of_loan ASC LIMIT 1)",
          "SELECT S.bio_data FROM Students S, Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))",
          "SELECT TOP 1 bio_data FROM Students WHERE student_id = (SELECT TOP 1 student_id FROM Student_Loans ORDER BY amount_of_loan ASC)",
          "SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan LIMIT 1)",
          "SELECT bio_data FROM Students INNER JOIN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1) AS MinLoan ON Students.student_id = MinLoan.student_id",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Student_Loans WHERE Students.student_id = Student_Loans.student_id ORDER BY amount_of_loan ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.date_of_transcript FROM Transcripts T JOIN Student_Loans S ON T.student_id = S.student_id WHERE S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))",
          "SELECT T.date_of_transcript FROM Transcripts T WHERE T.student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))",
          "SELECT T.date_of_transcript FROM Transcripts T INNER JOIN Student_Loans S ON T.student_id = S.student_id WHERE S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT T.date_of_transcript FROM Transcripts T, Student_Loans S WHERE T.student_id = S.student_id AND S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan >= ALL (SELECT amount_of_loan FROM Student_Loans))",
          "SELECT T.date_of_transcript FROM Transcripts T WHERE T.student_id = (SELECT S.student_id FROM Student_Loans S WHERE S.amount_of_loan = (SELECT MAX(S2.amount_of_loan) FROM Student_Loans S2))",
          "SELECT T.date_of_transcript FROM Transcripts T JOIN Student_Loans S ON T.student_id = S.student_id ORDER BY S.amount_of_loan DESC LIMIT 1",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT TOP 1 student_id FROM Student_Loans ORDER BY amount_of_loan DESC)"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)",
          "SELECT T.date_of_transcript FROM Transcripts T JOIN Student_Loans S ON T.student_id = S.student_id ORDER BY S.amount_of_loan DESC LIMIT 1",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)",
          "SELECT T.date_of_transcript FROM Transcripts T WHERE T.student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC FETCH FIRST ROW ONLY)",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT TOP 1 student_id FROM Student_Loans ORDER BY amount_of_loan DESC)",
          "SELECT T.date_of_transcript FROM Transcripts T INNER JOIN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1) AS S ON T.student_id = S.student_id",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)",
          "SELECT T.date_of_transcript FROM Transcripts T, (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1) AS S WHERE T.student_id = S.student_id",
          "SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC) LIMIT 1",
          "SELECT T.date_of_transcript FROM Transcripts T WHERE T.student_id = (SELECT S.student_id FROM Student_Loans S ORDER BY S.amount_of_loan DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1))",
          "SELECT DISTINCT T.teacher_details FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT MIN(student_id) FROM Transcripts ORDER BY date_of_transcript)",
          "SELECT T.teacher_details FROM Teachers T, Classes C WHERE T.teacher_id = C.teacher_id AND C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript FETCH FIRST 1 ROW ONLY)",
          "SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id = (SELECT TOP 1 student_id FROM Transcripts ORDER BY date_of_transcript ASC))",
          "SELECT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1) AS S ON C.student_id = S.student_id",
          "SELECT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
          "SELECT T.teacher_details FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
          "SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)",
          "SELECT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC) LIMIT 1"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT T.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Transcripts TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT DISTINCT T.* FROM Teachers T, Classes C, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = TR.student_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT T.* FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id INNER JOIN (SELECT student_id, MIN(date_of_transcript) AS MinDate FROM Transcripts GROUP BY student_id) TR ON C.student_id = TR.student_id",
          "SELECT T.* FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C JOIN Transcripts TR ON C.student_id = TR.student_id WHERE T.teacher_id = C.teacher_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))",
          "SELECT T.* FROM Teachers T INNER JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.student_id IN (SELECT student_id FROM Transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))",
          "SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Transcripts TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT * FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id IN (SELECT student_id FROM Transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)))",
          "SELECT T.* FROM Teachers T, Classes C, Students S, Transcripts TR WHERE T.teacher_id = C.teacher_id AND C.student_id = S.student_id AND S.student_id = TR.student_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)",
          "SELECT T.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1) AS EARLIEST ON C.student_id = EARLIEST.student_id",
          "SELECT T.* FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C JOIN (SELECT student_id, MIN(date_of_transcript) AS earliest_date FROM Transcripts GROUP BY student_id) TR ON C.student_id = TR.student_id)"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT Students.student_id, SUM(Student_Loans.amount_of_loan) AS total_loan FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id GROUP BY Students.student_id",
          "SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s INNER JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
          "SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id",
          "SELECT student_id, total_loan FROM (SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id) AS loans",
          "SELECT s.student_id, total_loan FROM Students s LEFT JOIN (SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id) sl ON s.student_id = sl.student_id",
          "SELECT s.student_id, IFNULL(SUM(sl.amount_of_loan), 0) AS total_loan FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id ORDER BY student_id",
          "SELECT s.student_id, COALESCE(SUM(sl.amount_of_loan), 0) AS total_loan FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
          "SELECT DISTINCT s.student_id, (SELECT SUM(amount_of_loan) FROM Student_Loans sl WHERE sl.student_id = s.student_id) AS total_loan FROM Students s",
          "SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s, Student_Loans sl WHERE s.student_id = sl.student_id GROUP BY s.student_id"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id GROUP BY student_id",
          "SELECT Students.student_id, SUM(Student_Loans.amount_of_loan) AS total_loan FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id GROUP BY Students.student_id",
          "SELECT s.student_id, SUM(sl.amount_of_loan) FROM Students s INNER JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
          "SELECT student_id, TOTAL(amount_of_loan) FROM Students INNER JOIN Student_Loans USING(student_id) GROUP BY student_id",
          "SELECT student_id, SUM(amount_of_loan) total_loan FROM Students LEFT JOIN Student_Loans ON Students.student_id = Student_Loans.student_id GROUP BY student_id",
          "SELECT s.student_id AS StudentID, SUM(sl.amount_of_loan) AS TotalLoans FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY StudentID",
          "SELECT DISTINCT s.student_id, (SELECT SUM(amount_of_loan) FROM Student_Loans WHERE student_id = s.student_id) AS total_loan FROM Students s",
          "SELECT s.student_id, AggregateLoanAmount.total_loan FROM Students s JOIN (SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id) AS AggregateLoanAmount ON s.student_id = AggregateLoanAmount.student_id",
          "SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Students s, Student_Loans sl WHERE s.student_id = sl.student_id GROUP BY student_id ORDER BY student_id"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data, COUNT(R.course_id) AS course_count FROM Students S JOIN Student_Course_Registrations R ON S.student_id = R.student_id GROUP BY S.student_id, S.bio_data",
          "SELECT student_id, bio_data, COUNT(course_id) AS num_courses FROM Students JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id GROUP BY student_id, bio_data",
          "SELECT Students.student_id, Students.bio_data, COUNT(Student_Course_Registrations.course_id) AS total_courses FROM Students INNER JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT s.student_id, s.bio_data, (SELECT COUNT(*) FROM Student_Course_Registrations r WHERE r.student_id = s.student_id) AS course_count FROM Students s",
          "SELECT student_id, bio_data, (SELECT COUNT(course_id) FROM Student_Course_Registrations WHERE student_id = Students.student_id) AS courses_taken FROM Students",
          "SELECT s.student_id, s.bio_data, COUNT(r.course_id) FROM Students s LEFT JOIN Student_Course_Registrations r ON s.student_id = r.student_id GROUP BY s.student_id, s.bio_data",
          "SELECT student_id, bio_data, COUNT(course_id) AS course_count FROM Students, Student_Course_Registrations WHERE Students.student_id = Student_Course_Registrations.student_id GROUP BY student_id, bio_data",
          "SELECT DISTINCT s.student_id, s.bio_data, COUNT(r.course_id) OVER (PARTITION BY s.student_id) AS course_count FROM Students s JOIN Student_Course_Registrations r ON s.student_id = r.student_id",
          "SELECT s.student_id, s.bio_data, COUNT(*) AS course_count FROM Students s JOIN Student_Course_Registrations r ON s.student_id = r.student_id GROUP BY s.student_id, s.bio_data",
          "SELECT student_id, bio_data, COUNT(course_id) AS course_count FROM Students LEFT JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id GROUP BY student_id, bio_data"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.student_id, S.bio_data, COUNT(C.class_id) AS num_courses FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data",
          "SELECT student_id, bio_data, COUNT(class_id) AS course_count FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS courses_taken FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT student_id, bio_data, (SELECT COUNT(*) FROM Classes WHERE Classes.student_id = Students.student_id) AS num_courses FROM Students",
          "SELECT a.student_id, a.bio_data, b.course_count FROM Students a LEFT JOIN (SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id) b ON a.student_id = b.student_id",
          "SELECT student_id, bio_data, COUNT(class_id) FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id, bio_data",
          "SELECT Students.student_id AS ID, Students.bio_data AS Biography, COUNT(Classes.class_id) AS Total_Courses FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT s.student_id, s.bio_data, IFNULL(c.num_courses, 0) AS num_courses FROM Students s LEFT JOIN (SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id) c ON s.student_id = c.student_id",
          "SELECT student_id, bio_data, COUNT(class_id) AS num_courses FROM Students, Classes WHERE Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data",
          "SELECT DISTINCT Students.student_id, Students.bio_data, COUNT(Classes.class_id) OVER (PARTITION BY Students.student_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id) FROM Detention",
          "SELECT COUNT(UNIQUE student_id) FROM Detention",
          "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention)",
          "SELECT COUNT(DISTINCT student_id) AS total_students FROM Detention",
          "SELECT COUNT(student_id) FROM (SELECT DISTINCT student_id FROM Detention)",
          "SELECT COUNT(DISTINCT Detention.student_id) FROM Detention",
          "SELECT COUNT(*) FROM (SELECT student_id FROM Detention GROUP BY student_id)",
          "SELECT COUNT(DISTINCT student_id) FROM Detention WHERE student_id IS NOT NULL",
          "SELECT DISTINCT COUNT(student_id) FROM Detention",
          "SELECT COUNT(DISTINCT student_id) FROM Detention GROUP BY student_id HAVING student_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT student_id) FROM Students JOIN Detention ON Students.student_id = Detention.student_id",
          "SELECT COUNT(DISTINCT Students.student_id) FROM Students, Detention WHERE Students.student_id = Detention.student_id",
          "SELECT COUNT(UNIQUE Students.student_id) FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention) AS unique_students",
          "SELECT COUNT(DISTINCT s.student_id) FROM Students s JOIN Detention d ON s.student_id = d.student_id",
          "SELECT COUNT(DISTINCT student_id) FROM Detention",
          "SELECT COUNT(DISTINCT Detention.student_id) FROM Detention JOIN Students ON Detention.student_id = Students.student_id",
          "SELECT COUNT(*) FROM (SELECT student_id FROM Students WHERE student_id IN (SELECT student_id FROM Detention)) AS student_with_detention",
          "SELECT COUNT(DISTINCT student_id) FROM Students WHERE student_id IN (SELECT student_id FROM Detention)",
          "SELECT COUNT(DISTINCT student_id) FROM Detention WHERE student_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R JOIN (SELECT address_type_code, COUNT(*) AS cnt FROM Students_Addresses GROUP BY address_type_code ORDER BY cnt DESC LIMIT 1) A ON R.address_type_code = A.address_type_code",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R WHERE R.address_type_code = (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code IN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC LIMIT 1)",
          "SELECT TOP 1 R.address_type_code, R.address_type_description FROM Ref_Address_Types R INNER JOIN Students_Addresses S ON R.address_type_code = S.address_type_code GROUP BY R.address_type_code, R.address_type_description ORDER BY COUNT(S.address_type_code) DESC",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R WHERE R.address_type_code = (SELECT TOP 1 address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC)",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R INNER JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON R.address_type_code = MostCommon.address_type_code",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R, (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon WHERE R.address_type_code = MostCommon.address_type_code",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Students_Addresses GROUP BY address_type_code) AS Counts)) AS MostCommon ON R.address_type_code = MostCommon.address_type_code",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R WHERE R.address_type_code = (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Students_Addresses GROUP BY address_type_code))",
          "SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R INNER JOIN (SELECT address_type_code, COUNT(*) AS frequency FROM Students_Addresses GROUP BY address_type_code ORDER BY frequency DESC LIMIT 1) AS MostCommon ON R.address_type_code = MostCommon.address_type_code"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT A.address_type_code, B.address_type_description FROM Students_Addresses A JOIN Ref_Address_Types B ON A.address_type_code = B.address_type_code GROUP BY A.address_type_code ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT address_type_code, address_type_description FROM Students_Addresses JOIN Ref_Address_Types USING (address_type_code) GROUP BY address_type_code ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA INNER JOIN Ref_Address_Types RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code ORDER BY COUNT(SA.address_type_code) DESC",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA, Ref_Address_Types RAT WHERE SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code, RAT.address_type_description HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Students_Addresses GROUP BY address_type_code)",
          "SELECT address_type_code, address_type_description FROM (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon JOIN Ref_Address_Types ON MostCommon.address_type_code = Ref_Address_Types.address_type_code",
          "WITH CountedTypes AS (SELECT address_type_code, COUNT(*) AS cnt FROM Students_Addresses GROUP BY address_type_code) SELECT Ref_Address_Types.address_type_code, address_type_description FROM Ref_Address_Types JOIN CountedTypes ON Ref_Address_Types.address_type_code = CountedTypes.address_type_code WHERE cnt = (SELECT MAX(cnt) FROM CountedTypes)",
          "SELECT address_type_code, address_type_description FROM Students_Addresses INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code GROUP BY address_type_code, address_type_description ORDER BY COUNT(Students_Addresses.address_type_code) DESC LIMIT 1",
          "SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA JOIN Ref_Address_Types RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code, RAT.address_type_description ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT FIRST 1 SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA LEFT JOIN Ref_Address_Types RAT ON SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code ORDER BY COUNT(SA.address_type_code) DESC",
          "SELECT address_type_code, address_type_description FROM Students_Addresses JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code GROUP BY Students_Addresses.address_type_code, Ref_Address_Types.address_type_description ORDER BY COUNT(Students_Addresses.address_type_code) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT S.bio_data FROM Students S WHERE S.student_id IN (SELECT student_id FROM Student_Events) AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Student_Events WHERE Student_Events.student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans WHERE Student_Loans.student_id = Students.student_id)",
          "WITH Event_Students AS (SELECT student_id FROM Student_Events), Loan_Students AS (SELECT student_id FROM Student_Loans) SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Event_Students) AND student_id NOT IN (SELECT student_id FROM Loan_Students)",
          "SELECT bio_data FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id WHERE Students.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_id IS NULL",
          "SELECT DISTINCT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT SE.student_id FROM Student_Events SE LEFT JOIN Student_Loans SL ON SE.student_id = SL.student_id WHERE SL.student_id IS NULL)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students AS S WHERE EXISTS (SELECT * FROM Student_Events AS SE WHERE SE.student_id = S.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans AS SL WHERE SL.student_id = S.student_id)"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_id IS NULL",
          "SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Events SE WHERE SE.student_id = S.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans SL WHERE SL.student_id = S.student_id)",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT bio_data FROM Students S INNER JOIN Student_Events SE ON S.student_id = SE.student_id WHERE NOT EXISTS (SELECT 1 FROM Student_Loans SL WHERE SL.student_id = S.student_id)",
          "SELECT S.bio_data FROM Students S, Student_Events SE WHERE S.student_id = SE.student_id AND S.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT S.bio_data FROM Students S, Student_Events SE LEFT JOIN Student_Loans SL ON SE.student_id = SL.student_id WHERE S.student_id = SE.student_id AND SL.student_id IS NULL",
          "SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)",
          "SELECT DISTINCT S.bio_data FROM Students S LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id, Student_Events SE WHERE S.student_id = SE.student_id AND SL.student_id IS NULL",
          "SELECT DISTINCT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id WHERE S.student_id NOT IN (SELECT student_id FROM Student_Loans)",
          "SELECT bio_data FROM Students WHERE EXISTS (SELECT student_id FROM Student_Events WHERE student_id = Students.student_id) AND NOT EXISTS (SELECT student_id FROM Student_Loans WHERE student_id = Students.student_id)"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA WHERE SA.student_id IN (SELECT T.student_id FROM Transcripts T GROUP BY T.student_id HAVING COUNT(*) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
          "SELECT A.date_from, A.date_to FROM Students_Addresses A JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) B ON A.student_id = B.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Transcripts GROUP BY student_id) WHERE cnt = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA INNER JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) AS T ON SA.student_id = T.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE EXISTS (SELECT 1 FROM Transcripts WHERE Transcripts.student_id = Students_Addresses.student_id GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(DISTINCT transcript_id) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA, (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) AS SubQuery WHERE SA.student_id = SubQuery.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts T GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA WHERE SA.student_id IN (SELECT T.student_id FROM Transcripts T GROUP BY T.student_id HAVING COUNT(*) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) AS Sub ON SA.student_id = Sub.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Transcripts GROUP BY student_id) AS T WHERE T.cnt = 2)",
          "SELECT A.date_from, A.date_to FROM Students_Addresses A INNER JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) B ON A.student_id = B.student_id",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE EXISTS (SELECT 1 FROM Transcripts WHERE Transcripts.student_id = Students_Addresses.student_id GROUP BY student_id HAVING COUNT(*) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses AS SA WHERE (SELECT COUNT(*) FROM Transcripts AS T WHERE T.student_id = SA.student_id GROUP BY T.student_id) = 2",
          "SELECT SA.date_from, SA.date_to FROM Students_Addresses SA WHERE SA.student_id IN (SELECT student_id FROM Transcripts T GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
          "SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start FROM Detention",
          "SELECT DISTINCT datetime_detention_start FROM Detention",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start",
          "SELECT datetime_detention_start FROM Detention GROUP BY datetime_detention_start",
          "SELECT MIN(datetime_detention_start) FROM Detention",
          "SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start IS NOT NULL",
          "SELECT datetime_detention_start AS StartTimes FROM Detention",
          "SELECT * FROM Detention ORDER BY datetime_detention_start ASC",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start DESC",
          "SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start > '0001-01-01'"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "infer_predictions": [
        [
          "SELECT datetime_detention_start FROM Detention",
          "SELECT Detention.datetime_detention_start FROM Detention",
          "SELECT d.datetime_detention_start FROM Detention d",
          "SELECT datetime_detention_start AS StartDate FROM Detention",
          "SELECT Detention.datetime_detention_start AS DetentionStartDate FROM Detention",
          "SELECT datetime_detention_start FROM Detention ORDER BY datetime_detention_start",
          "SELECT datetime_detention_start FROM Detention GROUP BY datetime_detention_start",
          "SELECT * FROM Detention SELECT datetime_detention_start",
          "SELECT Detention.datetime_detention_start FROM Detention ORDER BY datetime_detention_start DESC",
          "SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start IS NOT NULL"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Author",
          "SELECT Author.Name FROM Author",
          "SELECT a.Name FROM Author a",
          "SELECT DISTINCT Name FROM Author",
          "SELECT DISTINCT a.Name FROM Author a",
          "SELECT Name FROM Author ORDER BY Name",
          "SELECT Author.Name FROM Author ORDER BY Author.Name",
          "SELECT a.Name FROM Author a ORDER BY a.Name",
          "SELECT Name FROM Author GROUP BY Name",
          "SELECT Author.Name FROM Author GROUP BY Author.Name"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Author",
          "SELECT DISTINCT Name FROM Author",
          "SELECT a.Name FROM Author a",
          "SELECT Author.Name FROM Author",
          "SELECT Name AS AuthorName FROM Author",
          "SELECT DISTINCT a.Name FROM Author a",
          "SELECT Name FROM Author ORDER BY Name",
          "SELECT Author.Name FROM Author ORDER BY Author.Name ASC",
          "SELECT a.Name FROM Author a ORDER BY a.Name",
          "SELECT DISTINCT Author.Name FROM Author ORDER BY Author.Name"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client",
          "SELECT Client.Name, Client.Address FROM Client",
          "SELECT c.Name, c.Address FROM Client AS c",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client",
          "SELECT Client.Name AS ClientName, Client.Address AS ClientAddress FROM Client",
          "SELECT Name, Address FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL",
          "SELECT DISTINCT Name, Address FROM Client",
          "SELECT * FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client WHERE Address <> ''"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client",
          "SELECT Client.Name, Client.Address FROM Client",
          "SELECT c.Name, c.Address FROM Client AS c",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client",
          "SELECT Client.Name AS ClientName, Client.Address AS ClientAddress FROM Client",
          "SELECT Name, Address FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL",
          "SELECT DISTINCT Name, Address FROM Client",
          "SELECT * FROM Client SELECT Name, Address",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client GROUP BY Name, Address"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, ISBN, SalePrice FROM Book",
          "SELECT B.Title, B.ISBN, B.SalePrice FROM Book B",
          "SELECT Book.Title AS Title, Book.ISBN AS ISBN, Book.SalePrice AS SalePrice FROM Book",
          "SELECT Title AS BookTitle, ISBN AS BookISBN, SalePrice AS BookSalePrice FROM Book",
          "SELECT * FROM Book SELECT Title, ISBN, SalePrice",
          "SELECT Book.Title, Book.ISBN, Book.SalePrice FROM Book",
          "SELECT `Title`, `ISBN`, `SalePrice` FROM `Book`",
          "SELECT Title, ISBN, SalePrice FROM Book ORDER BY Title",
          "SELECT DISTINCT Title, ISBN, SalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book WHERE SalePrice IS NOT NULL"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, ISBN, SalePrice FROM Book",
          "SELECT B.Title, B.ISBN, B.SalePrice FROM Book B",
          "SELECT Book.Title AS BookTitle, Book.ISBN AS BookISBN, Book.SalePrice AS BookSalePrice FROM Book",
          "SELECT Title AS BookTitle, ISBN AS BookISBN, SalePrice AS BookSalePrice FROM Book",
          "SELECT * FROM Book SELECT Title, ISBN, SalePrice",
          "SELECT Book.Title, Book.ISBN, Book.SalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book ORDER BY Title",
          "SELECT DISTINCT Title, ISBN, SalePrice FROM Book",
          "SELECT Title, ISBN, SalePrice FROM Book WHERE SalePrice IS NOT NULL",
          "SELECT Title, ISBN, FORMAT(SalePrice, 'C') AS FormattedSalePrice FROM Book"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Book",
          "SELECT COUNT(ISBN) FROM Book",
          "SELECT COUNT(1) FROM Book",
          "SELECT COUNT(Book.ISBN) FROM Book",
          "SELECT COUNT(DISTINCT ISBN) FROM Book",
          "SELECT COUNT(*) AS TotalBooks FROM Book",
          "SELECT COUNT(ISBN) AS BookCount FROM Book",
          "SELECT COUNT(DISTINCT Book.ISBN) FROM Book",
          "SELECT COUNT(Book.*) FROM Book",
          "SELECT COUNT(ALL ISBN) FROM Book"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Book",
          "SELECT COUNT(ISBN) FROM Book",
          "SELECT COUNT(1) FROM Book",
          "SELECT COUNT(Book.ISBN) FROM Book",
          "SELECT COUNT(*) AS NumberOfBooks FROM Book",
          "SELECT COUNT(ISBN) AS BookCount FROM Book",
          "SELECT COUNT(DISTINCT ISBN) FROM Book",
          "SELECT COUNT(ALL ISBN) FROM Book",
          "SELECT COUNT(*) FROM Book WHERE ISBN IS NOT NULL",
          "SELECT COUNT(*) FROM Book WHERE ISBN <> ''"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT Name) FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(*) AS NumberOfAuthors FROM Author",
          "SELECT COUNT(idAuthor) AS TotalAuthors FROM Author",
          "SELECT COUNT(DISTINCT idAuthor) AS UniqueAuthors FROM Author",
          "SELECT COUNT(DISTINCT Name) AS UniqueAuthorNames FROM Author",
          "SELECT COUNT(*) FROM (SELECT DISTINCT idAuthor FROM Author) AS UniqueAuthors"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT Name) FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(Author.idAuthor) FROM Author",
          "SELECT COUNT(*) AS NumberOfAuthors FROM Author",
          "SELECT COUNT(DISTINCT Author.idAuthor) FROM Author",
          "SELECT COUNT(DISTINCT Author.Name) FROM Author",
          "SELECT COUNT(Author.*) FROM Author"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Client",
          "SELECT COUNT(IdClient) FROM Client",
          "SELECT COUNT(DISTINCT IdClient) FROM Client",
          "SELECT COUNT(1) FROM Client",
          "SELECT COUNT(IdClient) AS NumberOfClients FROM Client",
          "SELECT COUNT(*) AS TotalClients FROM Client",
          "SELECT COUNT(DISTINCT IdClient) AS UniqueClientCount FROM Client",
          "SELECT COUNT(*) FROM Client WHERE IdClient IS NOT NULL",
          "SELECT COUNT(IdClient) FROM Client WHERE IdClient > 0",
          "SELECT COUNT(*) FROM Client GROUP BY IdClient HAVING COUNT(IdClient) > 0"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Client",
          "SELECT COUNT(IdClient) FROM Client",
          "SELECT COUNT(1) FROM Client",
          "SELECT COUNT(IdClient) AS NumberOfClients FROM Client",
          "SELECT COUNT(*) AS ClientCount FROM Client",
          "SELECT COUNT(DISTINCT IdClient) FROM Client",
          "SELECT COUNT(DISTINCT IdClient) AS TotalClients FROM Client",
          "SELECT COUNT(*) FROM Client GROUP BY IdClient",
          "SELECT COUNT(IdClient) FROM Client WHERE IdClient IS NOT NULL",
          "SELECT COUNT(*) FROM Client WHERE IdClient > 0"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client ORDER BY Name ASC",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client ORDER BY ClientName",
          "SELECT Name, Address FROM Client ORDER BY Name ASCENDING",
          "SELECT Client.Name, Client.Address FROM Client ORDER BY Client.Name ASC",
          "SELECT Name, Address FROM Client ORDER BY Client.Name ASC",
          "SELECT Name, Address FROM Client ORDER BY UPPER(Name)",
          "SELECT Name, Address FROM Client ORDER BY LOWER(Name) ASC",
          "SELECT Name, Address FROM Client ORDER BY Name COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name, Address FROM Client ORDER BY Name ASC",
          "SELECT Name, Address FROM Client ORDER BY Name",
          "SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC",
          "SELECT Client.Name, Client.Address FROM Client ORDER BY Client.Name ASC",
          "SELECT Name AS ClientName, Address AS ClientAddress FROM Client ORDER BY ClientName",
          "SELECT Name, Address FROM Client ORDER BY Name ASCENDING",
          "SELECT Name, Address FROM Client ORDER BY Client.Name",
          "SELECT * FROM Client ORDER BY Name ASC",
          "SELECT Client.Name, Client.Address FROM Client ORDER BY Name",
          "SELECT Name, Address FROM Client ORDER BY Name ASC, Address ASC"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title, A.Name FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor",
          "SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT book.Title AS BookTitle, author.Name AS AuthorName FROM book JOIN author_book ON book.ISBN = author_book.ISBN JOIN author ON author_book.Author = author.idAuthor",
          "SELECT Title, Name FROM Book, Author, Author_Book WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor",
          "SELECT b.Title, a.Name FROM Book b, Author a, Author_Book ab WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor",
          "SELECT Title AS 'Book Title', Name AS 'Author Name' FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT DISTINCT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT b.Title AS 'Book Title', a.Name AS 'Author Name' FROM Book b INNER JOIN Author_Book ab ON b.ISBN = ab.ISBN INNER JOIN Author a ON ab.Author = a.idAuthor ORDER BY b.Title",
          "SELECT Title, Name FROM Book LEFT JOIN Author_Book ON Book.ISBN = Author_Book.ISBN LEFT JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT Book.Title, Author.Name FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor ORDER BY Book.Title ASC"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title, A.Name FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor",
          "SELECT Book.Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT title AS BookTitle, name AS AuthorName FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor",
          "SELECT b.Title, a.Name FROM Book b, Author_Book ab, Author a WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor",
          "SELECT Title, Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT Book.Title AS 'Book Title', Author.Name AS 'Author Name' FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT DISTINCT Book.Title, Author.Name FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor",
          "SELECT Book.Title, Author.Name FROM Book LEFT JOIN Author_Book ON Book.ISBN = Author_Book.ISBN LEFT JOIN Author ON Author_Book.Author = Author.idAuthor",
          "SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor ORDER BY Title",
          "SELECT b.Title AS Book_Title, a.Name AS Author_Name FROM Book b INNER JOIN Author_Book ab ON b.ISBN = ab.ISBN INNER JOIN Author a ON ab.Author = a.idAuthor ORDER BY b.Title ASC"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT O.IdOrder, C.Name FROM Orders O JOIN Client C ON O.IdClient = C.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders o, Client c WHERE o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient",
          "SELECT Orders.IdOrder AS OrderID, Client.Name AS ClientName FROM Orders, Client WHERE Orders.IdClient = Client.IdClient",
          "SELECT O.IdOrder, C.Name FROM Orders AS O INNER JOIN Client AS C ON O.IdClient = C.IdClient",
          "SELECT IdOrder, Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT O.IdOrder, C.Name FROM Orders O, Client C WHERE O.IdClient = C.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders LEFT JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT O.IdOrder AS Order_ID, C.Name AS Client_Name FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT O.IdOrder, C.Name FROM Orders O JOIN Client C ON O.IdClient = C.IdClient",
          "SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders o, Client c WHERE o.IdClient = c.IdClient",
          "SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient",
          "SELECT IdOrder AS OrderID, Name AS ClientName FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT Orders.IdOrder AS Order_ID, Client.Name AS Client_Name FROM Orders LEFT JOIN Client ON Orders.IdClient = Client.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders AS o INNER JOIN Client AS c ON o.IdClient = c.IdClient",
          "SELECT OrderID, ClientName FROM (SELECT IdOrder AS OrderID, IdClient FROM Orders) AS Orders JOIN (SELECT IdClient, Name AS ClientName FROM Client) AS Clients ON Orders.IdClient = Clients.IdClient",
          "SELECT DISTINCT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient",
          "SELECT o.IdOrder, c.Name FROM Orders o CROSS JOIN Client c WHERE o.IdClient = c.IdClient"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name, COUNT(AB.ISBN) AS NumberOfBooks FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name",
          "SELECT Name, COUNT(ISBN) AS BooksWritten FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Name",
          "SELECT author.Name, COUNT(author_book.ISBN) AS TotalBooks FROM author JOIN author_book ON author.idAuthor = author_book.Author GROUP BY author.Name ORDER BY author.Name",
          "SELECT A.Name AS AuthorName, COUNT(*) AS BookCount FROM Author A, Author_Book AB WHERE A.idAuthor = AB.Author GROUP BY A.Name",
          "SELECT Name, COUNT(ISBN) FROM Author JOIN Author_Book ON idAuthor = Author GROUP BY Name",
          "SELECT A.Name, COUNT(AB.ISBN) FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name",
          "SELECT DISTINCT A.Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = A.idAuthor) AS NumberOfBooks FROM Author A",
          "SELECT Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = Author.idAuthor) AS BookCount FROM Author",
          "SELECT A.Name, COUNT(AB.ISBN) AS Books FROM Author A INNER JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name HAVING COUNT(AB.ISBN) > 0",
          "SELECT Name, COUNT(ISBN) AS NumberOfBooks FROM Author, Author_Book WHERE Author.idAuthor = Author_Book.Author GROUP BY Name"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name, COUNT(AB.ISBN) AS NumberOfBooks FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name",
          "SELECT Name, COUNT(ISBN) AS BooksWritten FROM Author JOIN Author_Book ON idAuthor = Author GROUP BY Name",
          "SELECT Author.Name, COUNT(Author_Book.ISBN) FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name",
          "SELECT a.Name, COUNT(b.ISBN) FROM Author a, Author_Book b WHERE a.idAuthor = b.Author GROUP BY a.Name",
          "SELECT Name, COUNT(*) AS TotalBooks FROM Author LEFT JOIN Author_Book ON idAuthor = Author GROUP BY Name",
          "SELECT Name, COUNT(ISBN) FROM Author INNER JOIN Author_Book ON idAuthor = Author GROUP BY Name ORDER BY Name",
          "SELECT A.Name AS AuthorName, COUNT(AB.ISBN) AS BookCount FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.Name",
          "SELECT DISTINCT A.Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = A.idAuthor) AS BooksCount FROM Author A",
          "SELECT Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = idAuthor) AS NumberOfBooks FROM Author",
          "SELECT A.Name, COUNT(B.ISBN) AS BooksWritten FROM Author A LEFT JOIN Author_Book B ON A.idAuthor = B.Author GROUP BY A.Name ORDER BY A.Name ASC"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.ISBN, COUNT(O.ISBN) AS NumberOfOrders FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT Book.ISBN, COUNT(Books_Order.ISBN) AS OrderCount FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT isbn, COUNT(order_isbn) AS orders FROM Book LEFT JOIN Books_Order ON isbn = Books_Order.ISBN GROUP BY isbn",
          "SELECT B.ISBN, COUNT(*) AS TotalOrders FROM Book AS B LEFT JOIN Books_Order AS O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT ISBN, COUNT(ISBN) AS Orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT B.ISBN, IFNULL(COUNT(O.ISBN), 0) AS Orders FROM Book B LEFT OUTER JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT B.ISBN, COALESCE(COUNT(O.ISBN), 0) AS OrderCount FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT B.ISBN, COUNT(O.ISBN) FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN",
          "SELECT ISBN, COUNT(ISBN) FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT B.ISBN, COUNT(O.ISBN) AS NumberOfOrders FROM Book AS B LEFT OUTER JOIN Books_Order AS O ON B.ISBN = O.ISBN GROUP BY B.ISBN"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.ISBN, COUNT(BO.ISBN) AS order_count FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN",
          "SELECT Book.ISBN, COUNT(Books_Order.ISBN) AS total_orders FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT ISBN, COUNT(ISBN) AS num_orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT b.ISBN, COUNT(o.ISBN) FROM Book b LEFT JOIN Books_Order o ON b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, COUNT(*) AS orders FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT b.ISBN, IFNULL(COUNT(o.ISBN), 0) AS order_count FROM Book b LEFT JOIN Books_Order o ON b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT Book.ISBN, COALESCE(COUNT(Books_Order.ISBN), 0) AS total_orders FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT ISBN, COUNT(ISBN) AS order_count FROM Book LEFT OUTER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT b.ISBN, COUNT(o.ISBN) AS orders FROM Book AS b JOIN Books_Order AS o ON b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, COUNT(ISBN) AS NumberOfOrders FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.ISBN, SUM(BO.amount) AS total_amount FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN",
          "SELECT Book.ISBN, SUM(Books_Order.amount) AS TotalOrdered FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT ISBN, SUM(amount) FROM Book, Books_Order WHERE Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT b.ISBN, SUM(o.amount) total_amount FROM Book b, Books_Order o WHERE b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, total_amount FROM (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN) AS Orders JOIN Book ON Orders.ISBN = Book.ISBN",
          "SELECT Book.ISBN, total_amount FROM Book LEFT JOIN (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN) AS OrderSummary ON Book.ISBN = OrderSummary.ISBN",
          "SELECT b.ISBN, IFNULL(SUM(o.amount), 0) AS total_amount FROM Book b LEFT JOIN Books_Order o ON b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN HAVING ISBN IN (SELECT ISBN FROM Book)",
          "SELECT Book.ISBN, COALESCE(SUM(Books_Order.amount), 0) AS TotalOrdered FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT b.ISBN, SUM(o.amount) AS total_amount FROM Book AS b LEFT OUTER JOIN Books_Order AS o ON b.ISBN = o.ISBN GROUP BY b.ISBN"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.ISBN, SUM(BO.amount) AS TotalAmount FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN",
          "SELECT Book.ISBN, SUM(Books_Order.amount) AS TotalOrdered FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT ISBN, SUM(amount) FROM Book, Books_Order WHERE Book.ISBN = Books_Order.ISBN GROUP BY ISBN",
          "SELECT b.ISBN, SUM(o.amount) AS TotalAmount FROM Book b, Books_Order o WHERE b.ISBN = o.ISBN GROUP BY b.ISBN",
          "SELECT ISBN, TOTAL(amount) AS TotalAmount FROM Book JOIN Books_Order USING (ISBN) GROUP BY ISBN",
          "SELECT Book.ISBN, Aggregate(SUM, Books_Order.amount) AS TotalAmount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN",
          "SELECT DISTINCT Book.ISBN, (SELECT SUM(amount) FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN) AS TotalAmount FROM Book",
          "SELECT B.ISBN, SUM(BO.amount) FROM Book AS B LEFT JOIN Books_Order AS BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN",
          "SELECT ISBN, SUM(amount) AS TotalAmount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN ORDER BY ISBN",
          "SELECT B.ISBN, COALESCE(SUM(BO.amount), 0) AS TotalAmount FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT B.Title FROM Book B INNER JOIN (SELECT ISBN, COUNT(*) AS TotalOrders FROM Books_Order GROUP BY ISBN ORDER BY TotalOrders DESC LIMIT 1) AS MostOrdered ON B.ISBN = MostOrdered.ISBN",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Books_Order GROUP BY ISBN) AS Sub))",
          "SELECT B.Title FROM Book B, (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1) AS T WHERE B.ISBN = T.ISBN",
          "SELECT Title FROM Book WHERE ISBN = (SELECT TOP 1 ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC)",
          "SELECT B.Title FROM Book B JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN, B.Title ORDER BY COUNT(O.ISBN) DESC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(ISBN) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM (SELECT ISBN, COUNT(*) AS OrderCount FROM Books_Order GROUP BY ISBN ORDER BY OrderCount DESC) AS Temp LIMIT 1)",
          "SELECT B.Title FROM (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1) AS MostOrders JOIN Book B ON MostOrders.ISBN = B.ISBN",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT B.Title FROM Book B WHERE B.ISBN = (SELECT BO.ISBN FROM Books_Order BO GROUP BY BO.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT B.Title FROM Book B INNER JOIN (SELECT ISBN, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN ORDER BY TotalAmount DESC LIMIT 1) AS Sub ON B.ISBN = Sub.ISBN",
          "SELECT Title FROM Book WHERE ISBN = (SELECT TOP 1 ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC)",
          "SELECT B.Title FROM Book B JOIN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) AS MostOrdered ON B.ISBN = MostOrdered.ISBN",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING SUM(amount) = MAX(SUM(amount)))",
          "SELECT B.Title FROM Book B, (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) AS MaxOrdered WHERE B.ISBN = MaxOrdered.ISBN",
          "SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM (SELECT ISBN, SUM(amount) AS TotalOrders FROM Books_Order GROUP BY ISBN) AS OrderTotals ORDER BY TotalOrders DESC LIMIT 1)",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE B.ISBN = BO.ISBN GROUP BY BO.ISBN HAVING SUM(BO.amount) >= ALL (SELECT SUM(amount) FROM Books_Order GROUP BY ISBN))"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT B.Title, B.PurchasePrice FROM Book B INNER JOIN (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN ORDER BY total_amount DESC LIMIT 1) AS BO ON B.ISBN = BO.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT B.Title, B.PurchasePrice FROM Book B, (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) AS MaxOrder WHERE B.ISBN = MaxOrder.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT TOP 1 ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC)",
          "SELECT B.Title, B.PurchasePrice FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN, B.Title, B.PurchasePrice ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING SUM(amount) = MAX(SUM(amount)))",
          "SELECT B.Title, B.PurchasePrice FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE BO.ISBN = B.ISBN GROUP BY BO.ISBN HAVING SUM(BO.amount) >= ALL (SELECT SUM(amount) FROM Books_Order GROUP BY ISBN))",
          "SELECT B.Title, B.PurchasePrice FROM (SELECT ISBN, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN) AS SubQuery JOIN Book B ON SubQuery.ISBN = B.ISBN ORDER BY SubQuery.TotalAmount DESC LIMIT 1",
          "SELECT B.Title, B.PurchasePrice FROM Book B WHERE B.ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT B.Title, B.PurchasePrice FROM Book B JOIN (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN ORDER BY total_amount DESC LIMIT 1) AS BO ON B.ISBN = BO.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT B.Title, B.PurchasePrice FROM Book B WHERE B.ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT TOP 1 ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC)",
          "SELECT B.Title, B.PurchasePrice FROM Book B INNER JOIN (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) AS MaxOrder ON B.ISBN = MaxOrder.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING SUM(amount) = MAX(SUM(amount)))",
          "SELECT B.Title, B.PurchasePrice FROM Book B, (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1) AS MaxISBN WHERE B.ISBN = MaxISBN.ISBN",
          "SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM (SELECT ISBN, SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN) AS SubQuery ORDER BY total_amount DESC LIMIT 1)",
          "SELECT B.Title, B.PurchasePrice FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE BO.ISBN = B.ISBN GROUP BY BO.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN",
          "SELECT B.Title FROM Book B, Books_Order BO WHERE B.ISBN = BO.ISBN GROUP BY B.Title",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NOT NULL",
          "SELECT DISTINCT B.Title FROM Book AS B, Books_Order AS BO WHERE B.ISBN = BO.ISBN",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN)",
          "SELECT DISTINCT Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN ORDER BY Title",
          "SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NOT NULL",
          "SELECT DISTINCT B.Title FROM Book B WHERE B.ISBN IN (SELECT ISBN FROM Books_Order)"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.Title FROM Book B JOIN Books_Order O ON B.ISBN = O.ISBN",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book WHERE EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN)",
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book B, Books_Order O WHERE B.ISBN = O.ISBN GROUP BY Title",
          "SELECT DISTINCT B.Title FROM Book AS B JOIN Books_Order AS O ON B.ISBN = O.ISBN",
          "SELECT DISTINCT Title FROM (SELECT Title, ISBN FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN) AS OrderedBooks",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT DISTINCT B.Title FROM Book B, Books_Order O WHERE B.ISBN = O.ISBN"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.IdClient = C.IdClient)",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders)",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT C.Name FROM Client C INNER JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT DISTINCT client.Name FROM Client client, Orders orders WHERE client.IdClient = orders.IdClient",
          "SELECT Name FROM Client WHERE EXISTS (SELECT * FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT DISTINCT Name FROM Client C WHERE C.IdClient IN (SELECT O.IdClient FROM Orders O)",
          "SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.Name HAVING COUNT(O.IdOrder) >= 1",
          "SELECT DISTINCT C.Name FROM Client C WHERE EXISTS (SELECT NULL FROM Orders O WHERE O.IdClient = C.IdClient)"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders)",
          "SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT DISTINCT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT DISTINCT Name FROM Client, Orders WHERE Client.IdClient = Orders.IdClient",
          "SELECT DISTINCT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT DISTINCT Name FROM Client C WHERE EXISTS (SELECT NULL FROM Orders O WHERE O.IdClient = C.IdClient)",
          "SELECT DISTINCT C.Name FROM Client C WHERE C.IdClient IN (SELECT O.IdClient FROM Orders O)",
          "SELECT DISTINCT Name FROM Client AS C JOIN Orders AS O ON C.IdClient = O.IdClient"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(O.IdOrder) AS NumberOfOrders FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT Name, COUNT(IdOrder) FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT Client.Name, COUNT(Orders.IdOrder) AS OrderCount FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name",
          "SELECT Name, COUNT(*) AS TotalOrders FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT C.Name AS ClientName, COUNT(*) AS OrdersCount FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT Name, COUNT(IdOrder) AS Orders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT Client.Name, COUNT(Orders.IdOrder) FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name",
          "SELECT Name, COUNT(IdOrder) FROM Client RIGHT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client C LEFT OUTER JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT Name, COUNT(IdOrder) AS NumberOfOrders FROM Client FULL OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(O.IdOrder) AS OrderCount FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT Name, COUNT(IdOrder) AS NumberOfOrders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT Client.Name, COUNT(Orders.IdOrder) AS TotalOrders FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name",
          "SELECT Name, COUNT(*) AS OrdersCount FROM Client, Orders WHERE Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT C.Name, COUNT(*) FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.Name",
          "SELECT Name, COUNT(IdOrder) FROM Client LEFT JOIN Orders ON IdClient = Orders.IdClient GROUP BY Name",
          "SELECT Client.Name AS ClientName, COUNT(Orders.IdOrder) AS OrderCount FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name",
          "SELECT Name, COUNT(IdOrder) AS Orders FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name",
          "SELECT C.Name, COUNT(O.IdOrder) FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.Name ORDER BY C.Name",
          "SELECT Name, COUNT(IdOrder) AS TotalOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name ORDER BY Name"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient ORDER BY COUNT(O.IdOrder) DESC LIMIT 1",
          "SELECT TOP 1 C.Name FROM Client C INNER JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient ORDER BY COUNT(O.IdOrder) DESC",
          "SELECT C.Name FROM Client C WHERE C.IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(IdOrder) AS OrderCount FROM Orders GROUP BY IdClient) AS SubQuery))",
          "SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient HAVING COUNT(O.IdOrder) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(IdOrder) AS OrderCount FROM Orders GROUP BY IdClient) AS SubQuery)",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) >= ALL (SELECT COUNT(IdOrder) FROM Orders GROUP BY IdClient))",
          "SELECT Name FROM (SELECT C.Name, COUNT(*) AS OrderCount FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient) AS Result ORDER BY OrderCount DESC LIMIT 1",
          "SELECT C.Name FROM Client C JOIN (SELECT IdClient, COUNT(*) AS TotalOrders FROM Orders GROUP BY IdClient) AS O ON C.IdClient = O.IdClient ORDER BY O.TotalOrders DESC LIMIT 1",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.IdClient = C.IdClient GROUP BY O.IdClient HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Orders GROUP BY IdClient))",
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient, C.Name ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.Name FROM Client C JOIN (SELECT IdClient, COUNT(*) AS TotalOrders FROM Orders GROUP BY IdClient ORDER BY TotalOrders DESC LIMIT 1) AS O ON C.IdClient = O.IdClient",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(order_count) FROM (SELECT COUNT(IdOrder) AS order_count FROM Orders GROUP BY IdClient) AS counts))",
          "SELECT TOP 1 C.Name FROM Client C INNER JOIN Orders O ON C.IdClient = O.IdClient GROUP BY C.IdClient, C.Name ORDER BY COUNT(O.IdOrder) DESC",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT O.IdClient FROM Orders O GROUP BY O.IdClient ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdOrder) DESC FETCH FIRST ROW ONLY)",
          "SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient, C.Name HAVING COUNT(O.IdOrder) = (SELECT MAX(Total) FROM (SELECT COUNT(IdOrder) AS Total FROM Orders GROUP BY IdClient) AS SubQuery)",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(IdOrder) DESC LIMIT 1)",
          "SELECT C.Name FROM (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOrders JOIN Client C ON MaxOrders.IdClient = C.IdClient",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM (SELECT IdClient, COUNT(*) AS OrderCount FROM Orders GROUP BY IdClient ORDER BY OrderCount DESC LIMIT 1) AS MostOrders)"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, SUM(BO.amount) AS TotalAmount FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Client.Name, SUM(Books_Order.amount) AS TotalOrdered FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT Name, TotalAmount FROM (SELECT Client.Name AS Name, SUM(Books_Order.amount) AS TotalAmount FROM Client, Orders, Books_Order WHERE Client.IdClient = Orders.IdClient AND Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name) AS SubQuery",
          "SELECT Name, SUM(amount) AS TotalAmount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name",
          "SELECT C.Name AS ClientName, SUM(BO.amount) AS TotalBooksOrdered FROM Client C, Orders O, Books_Order BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Client.Name, AggregateTotal FROM Client JOIN (SELECT IdClient, SUM(amount) AS AggregateTotal FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS OrderTotals ON Client.IdClient = OrderTotals.IdClient",
          "SELECT C.Name, SUM(B.amount) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order B ON O.IdOrder = B.IdOrder GROUP BY C.Name",
          "SELECT DISTINCT Client.Name, TotalOrders FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalOrders FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) Temp ON Client.IdClient = Temp.IdClient",
          "SELECT Name, TotalAmount FROM Client C JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders JOIN Books_Order ON IdOrder = Orders.IdOrder GROUP BY IdClient) AS OrdersTotal ON C.IdClient = OrdersTotal.IdClient",
          "SELECT C.Name AS ClientName, SUM(BO.amount) AS TotalAmountOrdered FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name ORDER BY C.Name"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name, SUM(BO.amount) AS TotalBooks FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Name, SUM(amount) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name",
          "SELECT Client.Name, TotalAmount FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS SubQuery ON Client.IdClient = SubQuery.IdClient",
          "SELECT Name, TotalBooksOrdered FROM Client, (SELECT IdClient, SUM(amount) AS TotalBooksOrdered FROM Orders, Books_Order WHERE Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS OrdersSummary WHERE Client.IdClient = OrdersSummary.IdClient",
          "SELECT C.Name AS ClientName, SUM(BO.amount) AS TotalOrders FROM Client C, Orders O, Books_Order BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.Name",
          "SELECT Name, SUM(amount) AS TotalBooksOrdered FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient LEFT JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Name",
          "SELECT Client.Name, IFNULL(SUM(Books_Order.amount), 0) AS TotalBooks FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient LEFT JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name",
          "SELECT Name, TotalAmount FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) OrdersSum ON Client.IdClient = OrdersSum.IdClient",
          "SELECT C.Name, SUM(BO.amount) FROM Client C INNER JOIN Orders O ON C.IdClient = O.IdClient INNER JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.Name ORDER BY C.Name",
          "SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooks FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name ORDER BY Client.Name ASC"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order GROUP BY IdOrder ORDER BY SUM(amount) DESC LIMIT 1))",
          "SELECT TOP 1 C.Name FROM Client C INNER JOIN Orders O ON C.IdClient = O.IdClient INNER JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.IdClient ORDER BY SUM(BO.amount) DESC",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT O.IdClient FROM Orders O JOIN (SELECT IdOrder, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY IdOrder) AS SubQuery ON O.IdOrder = SubQuery.IdOrder ORDER BY SubQuery.TotalAmount DESC LIMIT 1)",
          "SELECT C.Name FROM Client C, Orders O, Books_Order BO WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder GROUP BY C.IdClient HAVING SUM(BO.amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(amount) AS TotalAmount FROM Books_Order GROUP BY IdOrder) AS SubQuery)",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder WHERE O.IdClient = C.IdClient GROUP BY O.IdClient HAVING SUM(BO.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM Books_Order GROUP BY IdOrder) AS Sub))",
          "SELECT C.Name FROM Client C WHERE C.IdClient IN (SELECT O.IdClient FROM Orders O WHERE O.IdOrder = (SELECT IdOrder FROM Books_Order GROUP BY IdOrder ORDER BY SUM(amount) DESC LIMIT 1))",
          "SELECT C.Name FROM Client C JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY IdClient ORDER BY TotalAmount DESC LIMIT 1) AS MaxOrders ON C.IdClient = MaxOrders.IdClient",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT IdClient FROM (SELECT IdClient, SUM(BO.amount) AS TotalAmount FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY IdClient ORDER BY TotalAmount DESC LIMIT 1) AS MaxClient)",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Books_Order GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)",
          "SELECT C.Name FROM Client C JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY IdClient ORDER BY TotalAmount DESC LIMIT 1) AS B ON C.IdClient = B.IdClient",
          "SELECT C.Name FROM Client C, (SELECT IdClient FROM Books_Order GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1) AS MaxClient WHERE C.IdClient = MaxClient.IdClient",
          "SELECT TOP 1 C.Name FROM Client C INNER JOIN Books_Order B ON C.IdClient = B.IdClient GROUP BY C.IdClient, C.Name ORDER BY SUM(B.amount) DESC",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT IdClient FROM Books_Order GROUP BY IdClient HAVING SUM(amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(amount) AS TotalAmount FROM Books_Order GROUP BY IdClient) AS Sub))",
          "SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM (SELECT IdClient, SUM(amount) AS Total FROM Books_Order GROUP BY IdClient) AS Temp ORDER BY Total DESC LIMIT 1)",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Books_Order B WHERE B.IdClient = C.IdClient GROUP BY B.IdClient HAVING SUM(B.amount) >= ALL (SELECT SUM(amount) FROM Books_Order GROUP BY IdClient))",
          "SELECT C.Name FROM Client C JOIN Books_Order B ON C.IdClient = B.IdClient GROUP BY C.IdClient, C.Name HAVING SUM(B.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM Books_Order GROUP BY IdClient) AS SubQuery)",
          "SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT IdClient FROM Books_Order GROUP BY IdClient ORDER BY SUM(amount) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT C.Name FROM Client C WHERE C.IdClient IN (SELECT IdClient FROM Books_Order GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT Title FROM Book WHERE NOT EXISTS (SELECT 1 FROM Books_Order WHERE Books_Order.ISBN = Book.ISBN)",
          "SELECT B.Title FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN WHERE O.ISBN IS NULL",
          "SELECT Title FROM Book EXCEPT SELECT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT DISTINCT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT Title FROM Book B WHERE NOT EXISTS (SELECT NULL FROM Books_Order O WHERE O.ISBN = B.ISBN)",
          "SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT O.ISBN FROM Books_Order O)",
          "SELECT Title FROM Book AS B WHERE NOT EXISTS (SELECT * FROM Books_Order AS O WHERE O.ISBN = B.ISBN)"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT DISTINCT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B WHERE NOT EXISTS (SELECT 1 FROM Books_Order BO WHERE BO.ISBN = B.ISBN)",
          "SELECT Title FROM Book EXCEPT SELECT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN",
          "SELECT Title FROM Book AS B WHERE B.ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE ISBN IS NOT NULL)",
          "SELECT DISTINCT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)",
          "SELECT Title FROM Book B WHERE NOT EXISTS (SELECT NULL FROM Books_Order BO WHERE BO.ISBN = B.ISBN)",
          "SELECT Title FROM Book WHERE ISBN NOT IN (SELECT Books_Order.ISBN FROM Books_Order)"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)",
          "SELECT C.Name FROM Client C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.IdClient = C.IdClient)",
          "SELECT Name FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdClient IS NULL",
          "SELECT Client.Name FROM Client WHERE Client.IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT C.Name FROM Client C LEFT OUTER JOIN Orders O ON C.IdClient = O.IdClient WHERE O.IdClient IS NULL",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders WHERE IdClient IS NOT NULL)",
          "SELECT DISTINCT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)",
          "SELECT Name FROM Client EXCEPT SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT Name FROM Client C WHERE NOT EXISTS (SELECT NULL FROM Orders O WHERE O.IdClient = C.IdClient)",
          "SELECT Name FROM Client WHERE IdClient NOT EXISTS IN (SELECT IdClient FROM Orders)"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)",
          "SELECT C.Name FROM Client C WHERE C.IdClient NOT IN (SELECT O.IdClient FROM Orders O)",
          "SELECT Name FROM Client WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)",
          "SELECT C.Name FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient WHERE O.IdClient IS NULL",
          "SELECT Name FROM Client EXCEPT SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient",
          "SELECT DISTINCT Name FROM Client WHERE IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders)",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders WHERE Orders.IdClient IS NOT NULL)",
          "SELECT Name FROM Client AS C WHERE NOT EXISTS (SELECT NULL FROM Orders AS O WHERE O.IdClient = C.IdClient)",
          "SELECT C.Name FROM Client C WHERE C.IdClient NOT IN (SELECT DISTINCT O.IdClient FROM Orders O)",
          "SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdOrder FROM Orders GROUP BY IdClient)"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book",
          "SELECT MAX(Book.SalePrice) AS MaximumSalePrice, MIN(Book.SalePrice) AS MinimumSalePrice FROM Book",
          "SELECT MAX(SalePrice), MIN(SalePrice) FROM Book",
          "SELECT MAX(SalePrice) Maximum, MIN(SalePrice) Minimum FROM Book",
          "SELECT (SELECT MAX(SalePrice) FROM Book) AS MaxPrice, (SELECT MIN(SalePrice) FROM Book) AS MinPrice",
          "SELECT MAX(b.SalePrice) AS HighestSalePrice, MIN(b.SalePrice) AS LowestSalePrice FROM Book b",
          "SELECT MAX(SalePrice) AS 'Max Sale Price', MIN(SalePrice) AS 'Min Sale Price' FROM Book",
          "SELECT MAX(SalePrice) AS Max_Price, MIN(SalePrice) AS Min_Price FROM Book",
          "SELECT MAX(Book.SalePrice) AS 'Maximum Sale Price', MIN(Book.SalePrice) AS 'Minimum Sale Price' FROM Book",
          "SELECT MAX(SalePrice) AS 'Highest Sale Price', MIN(SalePrice) AS 'Lowest Sale Price' FROM Book"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice) AS MaxPrice, MIN(SalePrice) AS MinPrice FROM Book",
          "SELECT MAX(Book.SalePrice) AS MaximumPrice, MIN(Book.SalePrice) AS MinimumPrice FROM Book",
          "SELECT MAX(SalePrice), MIN(SalePrice) FROM Book",
          "SELECT MAX(B.SalePrice) AS HighestPrice, MIN(B.SalePrice) AS LowestPrice FROM Book B",
          "SELECT MAX(SalePrice) AS 'Maximum Sale Price', MIN(SalePrice) AS 'Minimum Sale Price' FROM Book",
          "SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book",
          "SELECT MAX(Book.SalePrice) AS MaxPrice, MIN(Book.SalePrice) AS MinPrice FROM Book",
          "SELECT MAX(SalePrice) AS HighestSalePrice, MIN(SalePrice) AS LowestSalePrice FROM Book",
          "SELECT MAX(SalePrice) AS 'Max Sale Price', MIN(SalePrice) AS 'Min Sale Price' FROM Book",
          "SELECT MAX(SalePrice) AS Maximum, MIN(SalePrice) AS Minimum FROM Book"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(PurchasePrice) AS AvgPurchasePrice, AVG(SalePrice) AS AvgSalePrice FROM Book",
          "SELECT AVG(Book.PurchasePrice) AS AveragePurchasePrice, AVG(Book.SalePrice) AS AverageSalePrice FROM Book",
          "SELECT AVG(PurchasePrice) AS Average_Purchase_Price, AVG(SalePrice) AS Average_Sale_Price FROM Book",
          "SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book",
          "SELECT AVG(Book.PurchasePrice), AVG(Book.SalePrice) FROM Book",
          "SELECT AVG(PurchasePrice) AS 'Average Purchase Price', AVG(SalePrice) AS 'Average Sale Price' FROM Book",
          "SELECT AVG(PurchasePrice) AS 'Avg Purchase Price', AVG(SalePrice) AS 'Avg Sale Price' FROM Book",
          "SELECT AVG(PurchasePrice) AS Purchase_Price_Average, AVG(SalePrice) AS Sale_Price_Average FROM Book",
          "SELECT AVG(PurchasePrice) AS PurchasePriceAverage, AVG(SalePrice) AS SalePriceAverage FROM Book",
          "SELECT AVG(PurchasePrice) AS 'Average Purchase Price', AVG(SalePrice) AS 'Average Sale Price' FROM Book"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(PurchasePrice) AS AvgPurchasePrice, AVG(SalePrice) AS AvgSalePrice FROM Book",
          "SELECT AVG(Book.PurchasePrice) AS AveragePurchasePrice, AVG(Book.SalePrice) AS AverageSalePrice FROM Book",
          "SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book",
          "SELECT AVG(Book.PurchasePrice), AVG(Book.SalePrice) FROM Book",
          "SELECT AVG(PurchasePrice) AS AveragePurchase, AVG(SalePrice) AS AverageSale FROM Book",
          "SELECT AVG(PurchasePrice) AS PurchasePriceAverage, AVG(SalePrice) AS SalePriceAverage FROM Book",
          "SELECT AVG(PurchasePrice) AS 'Average Purchase Price', AVG(SalePrice) AS 'Average Sale Price' FROM Book",
          "SELECT AVG(Book.PurchasePrice) AS 'Avg Purchase Price', AVG(Book.SalePrice) AS 'Avg Sale Price' FROM Book",
          "SELECT AVG(PurchasePrice) AS Purchase_Price_Avg, AVG(SalePrice) AS Sale_Price_Avg FROM Book",
          "SELECT AVG(PurchasePrice) AS 'Average Purchase Price', AVG(SalePrice) AS 'Average Sale Price' FROM Book"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) FROM Book",
          "SELECT MAX(difference) FROM (SELECT (SalePrice - PurchasePrice) AS difference FROM Book) AS subquery",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaximumDifference FROM Book",
          "SELECT MAX(diff) FROM (SELECT SalePrice - PurchasePrice AS diff FROM Book) temp",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxPriceDifference FROM Book",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaxDiff FROM Book",
          "SELECT MAX(diff) FROM (SELECT (SalePrice - PurchasePrice) AS diff FROM Book) AS differences",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaximumDifference FROM Book"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT MAX(SalePrice - PurchasePrice) AS LargestDifference FROM Book",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book",
          "SELECT MAX(difference) FROM (SELECT (SalePrice - PurchasePrice) AS difference FROM Book) AS price_differences",
          "SELECT MAX(SalePrice - PurchasePrice) FROM Book",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaxPriceDifference FROM Book",
          "SELECT MAX(price_diff) FROM (SELECT SalePrice - PurchasePrice AS price_diff FROM Book) subquery",
          "SELECT MAX(diff) FROM (SELECT (SalePrice - PurchasePrice) AS diff FROM Book) AS differences",
          "SELECT MAX(Book.SalePrice - Book.PurchasePrice) FROM Book",
          "SELECT MAX(difference) FROM (SELECT SalePrice - PurchasePrice AS difference FROM Book) AS price_diff_table",
          "SELECT MAX(SalePrice - PurchasePrice) AS MaximumDifference FROM Book"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B)",
          "SELECT book.Title FROM Book book WHERE book.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)",
          "SELECT B.Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book AS B2)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B2.SalePrice) FROM Book B2)",
          "SELECT Title FROM Book B1 WHERE B1.SalePrice > (SELECT AVG(B2.SalePrice) FROM Book B2)",
          "SELECT Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book AS B2)",
          "SELECT book.Title FROM Book AS book WHERE book.SalePrice > (SELECT AVG(SalePrice) FROM Book AS books)"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B)",
          "SELECT B.Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice > (SELECT AVG(B2.SalePrice) FROM Book B2)",
          "SELECT Title FROM Book B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(B.SalePrice) FROM Book B)",
          "SELECT B.Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(B2.SalePrice) FROM Book AS B2)",
          "SELECT Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B INNER JOIN (SELECT MIN(SalePrice) AS MinPrice FROM Book) AS M ON B.SalePrice = M.MinPrice",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(B.SalePrice) FROM Book B)",
          "SELECT Title FROM Book AS B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book GROUP BY SalePrice)",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Book WHERE SalePrice = MIN(B.SalePrice))",
          "SELECT Title FROM Book B1 WHERE B1.SalePrice = (SELECT MIN(B2.SalePrice) FROM Book B2)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book LIMIT 1)"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B INNER JOIN (SELECT MIN(SalePrice) AS MinPrice FROM Book) AS M ON B.SalePrice = M.MinPrice",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(B.SalePrice) FROM Book B)",
          "SELECT Title FROM Book B WHERE EXISTS (SELECT 1 FROM Book WHERE SalePrice = MIN(B.SalePrice))",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book AS B)",
          "SELECT B.Title FROM Book B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book AS BB)",
          "SELECT Title FROM Book AS B1 WHERE B1.SalePrice = (SELECT MIN(B2.SalePrice) FROM Book AS B2)",
          "SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book GROUP BY SalePrice)"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT Title FROM Book WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B JOIN (SELECT MAX(PurchasePrice) AS MaxPrice FROM Book) AS M ON B.PurchasePrice = M.MaxPrice",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(B.PurchasePrice) FROM Book B)",
          "SELECT Title FROM Book B1 WHERE B1.PurchasePrice >= ALL (SELECT B2.PurchasePrice FROM Book B2)",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT TOP 1 PurchasePrice FROM Book ORDER BY PurchasePrice DESC)",
          "SELECT DISTINCT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1",
          "SELECT Title FROM Book B WHERE EXISTS (SELECT 1 FROM Book WHERE PurchasePrice > B.PurchasePrice) = FALSE"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT Title FROM Book WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice = (SELECT MAX(B2.PurchasePrice) FROM Book B2)",
          "SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1",
          "SELECT Title FROM Book AS B WHERE B.PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)",
          "SELECT TOP 1 Title FROM Book ORDER BY PurchasePrice DESC",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT TOP 1 PurchasePrice FROM Book ORDER BY PurchasePrice DESC)",
          "SELECT Title FROM Book WHERE PurchasePrice = (SELECT PurchasePrice FROM Book ORDER BY PurchasePrice DESC LIMIT 1)",
          "SELECT B.Title FROM Book B WHERE B.PurchasePrice >= ALL (SELECT PurchasePrice FROM Book)"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(B.SalePrice) FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(Book.SalePrice) AS AverageSalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'George Orwell'",
          "SELECT AVG(B.SalePrice) FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM (SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell') AS Prices",
          "SELECT AVG(SalePrice) AS AveragePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')",
          "SELECT AVG(SalePrice) FROM Book B LEFT JOIN Author_Book AB ON B.ISBN = AB.ISBN LEFT JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(B.SalePrice) FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT AVG(B.SalePrice) FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) AS AverageSalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Name = 'George Orwell')",
          "SELECT AVG(Book.SalePrice) AS AveragePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'George Orwell'",
          "SELECT AVG(B.SalePrice) FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell'",
          "SELECT AVG(SalePrice) FROM (SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell') AS OrwellBooks",
          "SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))",
          "SELECT AVG(SalePrice) FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'",
          "SELECT AVG(B.SalePrice) FROM Book B LEFT JOIN Author_Book AB ON B.ISBN = AB.ISBN LEFT JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.SalePrice FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'Plato'",
          "SELECT B.SalePrice FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')",
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE 'Plato'",
          "SELECT DISTINCT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT B.SalePrice FROM Book B WHERE EXISTS (SELECT 1 FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE AB.ISBN = B.ISBN AND A.Name = 'Plato')",
          "SELECT B.SalePrice FROM Book AS B WHERE B.ISBN IN (SELECT AB.ISBN FROM Author_Book AS AB JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato')"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT Book.SalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato'",
          "SELECT SalePrice FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name = 'Plato'",
          "SELECT DISTINCT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato'",
          "SELECT B.SalePrice FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')",
          "SELECT B.SalePrice FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor AND A.Name = 'Plato'",
          "SELECT SalePrice FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Author_Book.ISBN = Book.ISBN)",
          "SELECT B.SalePrice FROM Book B WHERE B.ISBN IN (SELECT AB.ISBN FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato')"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice LIMIT 1",
          "SELECT TOP 1 B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice FETCH FIRST 1 ROW ONLY",
          "SELECT Title FROM (SELECT B.Title, B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell') AS SubQuery ORDER BY SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice ASC FETCH FIRST ROW ONLY",
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT AB.ISBN FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell') ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(Title) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice",
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON A.idAuthor = AB.Author WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice, B.Title LIMIT 1"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice LIMIT 1",
          "SELECT TOP 1 B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice FETCH FIRST ROW ONLY",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'George Orwell' ORDER BY B.SalePrice ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC FETCH FIRST ROW ONLY",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT Title FROM (SELECT B.Title, B.SalePrice FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell') AS SubQuery ORDER BY SalePrice ASC LIMIT 1",
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT AB.ISBN FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell') ORDER BY B.SalePrice ASC LIMIT 1",
          "SELECT FIRST(Title) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')) ORDER BY SalePrice ASC"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice < (SELECT AVG(SalePrice) FROM Book) AND ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice < (SELECT AVG(SalePrice) FROM Book) AND ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.Title FROM Book B WHERE B.SalePrice < (SELECT AVG(SalePrice) FROM Book) AND EXISTS (SELECT 1 FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE AB.ISBN = B.ISBN AND A.Name = 'Plato')",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE AB.ISBN = B.ISBN AND A.Name = 'Plato') AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE SalePrice < (SELECT AVG(SalePrice) FROM Book) AND ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.Title FROM Book B, Author_Book AB, Author A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book AS B2)",
          "SELECT Title FROM Book WHERE SalePrice < (SELECT AVG(SalePrice) FROM Book) AND ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato'))",
          "SELECT B.Title FROM Book B WHERE B.SalePrice < (SELECT AVG(SalePrice) FROM Book) AND EXISTS (SELECT 1 FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE AB.ISBN = B.ISBN AND A.Name = 'Plato')",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'Plato')) AND SalePrice < (SELECT AVG(SalePrice) FROM Book)",
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book GROUP BY ISBN)"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT A.Name FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT A.Name FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author LEFT JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT A.Name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_Book AB JOIN Book B ON AB.ISBN = B.ISBN WHERE AB.Author = A.idAuthor AND B.Title = 'Pride and Prejudice')",
          "SELECT TOP 1 A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title LIKE 'Pride and Prejudice'",
          "SELECT A.Name FROM Author AS A JOIN Author_Book AS AB ON A.idAuthor = AB.Author JOIN Book AS B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT A.Name FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT A.Name FROM Author A, Author_Book AB, Book B WHERE A.idAuthor = AB.Author AND AB.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT A.Name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_Book AB JOIN Book B ON AB.ISBN = B.ISBN WHERE AB.Author = A.idAuthor AND B.Title = 'Pride and Prejudice')",
          "SELECT A.Name FROM Author A WHERE A.idAuthor = (SELECT AB.Author FROM Author_Book AB WHERE AB.ISBN = (SELECT B.ISBN FROM Book B WHERE B.Title = 'Pride and Prejudice'))",
          "SELECT Name FROM Author WHERE idAuthor = (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))",
          "SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title LIKE 'Pride and Prejudice'",
          "SELECT A.Name FROM Author A WHERE EXISTS (SELECT * FROM Author_Book AB JOIN Book B ON AB.ISBN = B.ISBN WHERE AB.Author = A.idAuthor AND B.Title = 'Pride and Prejudice')"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'))",
          "SELECT Book.Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'",
          "SELECT distinct Title FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name LIKE '%Plato%'",
          "SELECT B.Title FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%' AND Author_Book.ISBN = Book.ISBN)",
          "SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE CONTAINS(Author.Name, 'Plato')",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%' ORDER BY B.Title",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')",
          "SELECT DISTINCT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%' ORDER BY B.Title ASC"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name LIKE '%Plato%'))",
          "SELECT Book.Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'",
          "SELECT distinct Title FROM Book, Author_Book, Author WHERE Book.ISBN = Author_Book.ISBN AND Author_Book.Author = Author.idAuthor AND Author.Name LIKE '%Plato%'",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%' AND Author_Book.ISBN = Book.ISBN)",
          "SELECT B.Title FROM Book AS B, Author_Book AS AB, Author AS A WHERE B.ISBN = AB.ISBN AND AB.Author = A.idAuthor AND A.Name LIKE '%Plato%'",
          "SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE CONTAINS(Author.Name, 'Plato')",
          "SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%' ORDER BY B.Title",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')",
          "SELECT DISTINCT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE INSTR(A.Name, 'Plato') > 0"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(Books_Order.ISBN) FROM Books_Order INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(1) FROM Books_Order, Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(DISTINCT Books_Order.IdOrder) FROM Books_Order LEFT JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order b JOIN Book bk ON b.ISBN = bk.ISBN WHERE bk.Title = 'Pride and Prejudice'",
          "SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order b, Book bk WHERE b.ISBN = bk.ISBN AND bk.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order WHERE EXISTS (SELECT 1 FROM Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice')",
          "SELECT COUNT(*) FROM Books_Order b INNER JOIN Book bk ON b.ISBN = bk.ISBN WHERE bk.Title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT SUM(Books_Order.amount) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(Books_Order.amount) FROM Books_Order, Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'",
          "SELECT TOTAL(Books_Order.amount) FROM Books_Order LEFT JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT SUM(amount) AS TotalOrders FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order b JOIN Book bk ON b.ISBN = bk.ISBN WHERE bk.Title = 'Pride and Prejudice'",
          "SELECT SUM(b.amount) FROM Books_Order b INNER JOIN Book bk ON b.ISBN = bk.ISBN WHERE bk.Title = 'Pride and Prejudice'",
          "SELECT COUNT(Books_Order.amount) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title LIKE 'Pride and Prejudice'",
          "SELECT COUNT(*) FROM Books_Order b, Book bk WHERE b.ISBN = bk.ISBN AND bk.Title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') INTERSECT SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince')",
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2",
          "SELECT DISTINCT o1.IdOrder FROM Orders o1, Books_Order bo1, Book b1 WHERE o1.IdOrder = bo1.IdOrder AND bo1.ISBN = b1.ISBN AND b1.Title = 'Pride and Prejudice' AND EXISTS (SELECT 1 FROM Books_Order bo2 JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE bo2.IdOrder = o1.IdOrder AND b2.Title = 'The Little Prince')",
          "WITH PrideOrders AS (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'), PrinceOrders AS (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince') SELECT IdOrder FROM PrideOrders WHERE IdOrder IN (SELECT IdOrder FROM PrinceOrders)",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT IdOrder FROM Orders o WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' AND bo.IdOrder = o.IdOrder) AND EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince' AND bo.IdOrder = o.IdOrder)",
          "SELECT IdOrder FROM (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' UNION ALL SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince') AS Orders GROUP BY IdOrder HAVING COUNT(*) = 2",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') AND IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince')",
          "SELECT DISTINCT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice') AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice') AND IdOrder IN (SELECT IdOrder FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince')"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') INTERSECT SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince')",
          "SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2",
          "SELECT DISTINCT o1.IdOrder FROM Orders o1, Books_Order bo1, Book b1 WHERE o1.IdOrder = bo1.IdOrder AND bo1.ISBN = b1.ISBN AND b1.Title = 'Pride and Prejudice' AND EXISTS (SELECT 1 FROM Books_Order bo2 JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE b2.Title = 'The Little Prince' AND bo2.IdOrder = o1.IdOrder)",
          "WITH OrderedBooks AS (SELECT IdOrder, COUNT(DISTINCT Title) AS TitlesCount FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY IdOrder) SELECT IdOrder FROM OrderedBooks WHERE TitlesCount = 2",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))",
          "SELECT IdOrder FROM Orders o WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' AND bo.IdOrder = o.IdOrder) AND EXISTS (SELECT 1 FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince' AND bo.IdOrder = o.IdOrder)",
          "SELECT IdOrder FROM (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' UNION ALL SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince') AS OrdersWithBooks GROUP BY IdOrder HAVING COUNT(*) = 2",
          "SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') AND IdOrder IN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince')",
          "SELECT IdOrder FROM Orders WHERE EXISTS (SELECT * FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' AND Books_Order.IdOrder = Orders.IdOrder) AND EXISTS (SELECT * FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince' AND Books_Order.IdOrder = Orders.IdOrder)",
          "SELECT IdOrder FROM Orders o JOIN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice') p ON o.IdOrder = p.IdOrder JOIN (SELECT IdOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince') l ON o.IdOrder = l.IdOrder"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))",
          "SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' INTERSECT SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith'",
          "SELECT DISTINCT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "WITH PeterDoeOrders AS (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))), JamesSmithOrders AS (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) SELECT ISBN FROM PeterDoeOrders INTERSECT SELECT ISBN FROM JamesSmithOrders",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') INTERSECT SELECT IdClient FROM Client WHERE Name = 'James Smith')",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT O1.IdOrder FROM Orders O1 JOIN Client C1 ON O1.IdClient = C1.IdClient WHERE C1.Name = 'Peter Doe' INTERSECT SELECT O2.IdOrder FROM Orders O2 JOIN Client C2 ON O2.IdClient = C2.IdClient WHERE C2.Name = 'James Smith')",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name IN ('Peter Doe', 'James Smith')) GROUP BY IdClient HAVING COUNT(DISTINCT Name) = 2)",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith'))",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT ISBN FROM Books_Order B WHERE EXISTS (SELECT 1 FROM Orders O JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND O.IdOrder = B.IdOrder) AND EXISTS (SELECT 1 FROM Orders O JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith' AND O.IdOrder = B.IdOrder)"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT ISBN FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') INTERSECT SELECT ISBN FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith')",
          "SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name IN ('Peter Doe', 'James Smith') GROUP BY B.ISBN HAVING COUNT(DISTINCT C.Name) = 2",
          "SELECT DISTINCT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT DISTINCT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "WITH PeterDoeOrders AS (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe'), JamesSmithOrders AS (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith') SELECT ISBN FROM PeterDoeOrders WHERE ISBN IN (SELECT ISBN FROM JamesSmithOrders)",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith'))",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT O.IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT O.IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith')",
          "SELECT B.ISBN FROM Books_Order B WHERE EXISTS (SELECT 1 FROM Orders O JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND O.IdOrder = B.IdOrder) AND EXISTS (SELECT 1 FROM Orders O JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith' AND O.IdOrder = B.IdOrder)",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') INTERSECT SELECT IdClient FROM Client WHERE Name = 'James Smith')",
          "SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') AND B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith')",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder = Orders.IdOrder JOIN Client ON IdClient = Client.IdClient WHERE Name = 'Peter Doe') AND ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder = Orders.IdOrder JOIN Client ON IdClient = Client.IdClient WHERE Name = 'James Smith')",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder JOIN Client ON IdClient WHERE Name = 'Peter Doe') EXCEPT SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder JOIN Client ON IdClient WHERE Name = 'James Smith')",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order, Orders, Client WHERE Books_Order.IdOrder = Orders.IdOrder AND Orders.IdClient = Client.IdClient AND Client.Name = 'Peter Doe') AND ISBN NOT IN (SELECT ISBN FROM Books_Order, Orders, Client WHERE Books_Order.IdOrder = Orders.IdOrder AND Orders.IdClient = Client.IdClient AND Client.Name = 'James Smith')",
          "SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN INNER JOIN Orders O ON BO.IdOrder = O.IdOrder INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder JOIN Client ON IdClient WHERE Name = 'James Smith')",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder = Orders.IdOrder JOIN Client ON IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe' AND ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON IdOrder = Orders.IdOrder JOIN Client ON IdClient = Client.IdClient WHERE Client.Name = 'James Smith'))",
          "SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe' AND Book.ISBN = Books_Order.ISBN) AND NOT EXISTS (SELECT 1 FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith' AND Book.ISBN = Books_Order.ISBN)",
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Books_Order BO2 JOIN Orders O2 ON BO2.IdOrder = O2.IdOrder JOIN Client C2 ON O2.IdClient = C2.IdClient WHERE C2.Name = 'James Smith' AND BO2.ISBN = BO.ISBN)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT Books_Order.ISBN FROM Books_Order, Orders, Client WHERE Books_Order.IdOrder = Orders.IdOrder AND Orders.IdClient = Client.IdClient AND Client.Name = 'Peter Doe') AND NOT EXISTS (SELECT 1 FROM Books_Order, Orders, Client WHERE Books_Order.ISBN = Book.ISBN AND Books_Order.IdOrder = Orders.IdOrder AND Orders.IdClient = Client.IdClient AND Client.Name = 'James Smith')"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND Title NOT IN (SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))))",
          "SELECT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.Title NOT IN (SELECT B2.Title FROM Book B2 JOIN Books_Order BO2 ON B2.ISBN = BO2.ISBN JOIN Orders O2 ON BO2.IdOrder = O2.IdOrder JOIN Client C2 ON O2.IdClient = C2.IdClient WHERE C2.Name = 'James Smith')",
          "SELECT DISTINCT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND Title NOT IN (SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith'))",
          "WITH PeterDoeBooks AS (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe'), JamesSmithBooks AS (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith') SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM PeterDoeBooks) AND ISBN NOT IN (SELECT ISBN FROM JamesSmithBooks)",
          "SELECT b.Title FROM Book b INNER JOIN Books_Order bo ON b.ISBN = bo.ISBN INNER JOIN Orders o ON bo.IdOrder = o.IdOrder INNER JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND NOT EXISTS (SELECT 1 FROM Book b2 INNER JOIN Books_Order bo2 ON b2.ISBN = bo2.ISBN INNER JOIN Orders o2 ON bo2.IdOrder = o2.IdOrder INNER JOIN Client c2 ON o2.IdClient = c2.IdClient WHERE c2.Name = 'James Smith' AND b2.Title = b.Title)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) EXCEPT SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND Title NOT IN (SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))",
          "SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe' AND Book.Title NOT IN (SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith')",
          "SELECT b.Title FROM Book b WHERE EXISTS (SELECT 1 FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND bo.ISBN = b.ISBN) AND NOT EXISTS (SELECT 1 FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith' AND bo.ISBN = b.ISBN)",
          "SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND NOT EXISTS (SELECT 1 FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')) AND Book.ISBN = Books_Order.ISBN)))"
        ]
      ]
    },
    {
      "id": 591,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'",
          "SELECT c.Name FROM Client c, Orders o, Books_Order bo, Book b WHERE c.IdClient = o.IdClient AND o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')))",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT Orders.IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT c.Name FROM Client c, Orders o, Books_Order bo, Book b WHERE c.IdClient = o.IdClient AND o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title LIKE 'Pride and Prejudice'",
          "SELECT DISTINCT c.Name FROM Client c INNER JOIN Orders o ON c.IdClient = o.IdClient INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT c.Name FROM Client c WHERE EXISTS (SELECT 1 FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE o.IdClient = c.IdClient AND b.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT c.Name FROM Client c WHERE c.IdClient IN (SELECT o.IdClient FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' ORDER BY Client.Name"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "book_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice'",
          "SELECT C.Name FROM Client C, Orders O, Books_Order BO, Book B WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice'",
          "SELECT DISTINCT Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder INNER JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'",
          "SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')))",
          "SELECT DISTINCT Name FROM Client WHERE IdClient IN (SELECT Orders.IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT C.Name FROM Client C, Orders O, Books_Order BO, Book B WHERE C.IdClient = O.IdClient AND O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title LIKE 'Pride and Prejudice'",
          "SELECT DISTINCT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN WHERE O.IdClient = C.IdClient AND B.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice' ORDER BY C.Name",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT * FROM Orders O INNER JOIN Books_Order BO ON O.IdOrder = BO.IdOrder INNER JOIN Book B ON BO.ISBN = B.ISBN WHERE O.IdClient = C.IdClient AND B.Title = 'Pride and Prejudice')",
          "SELECT DISTINCT C.Name FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder JOIN Book B ON BO.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice' AND C.Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM book",
          "SELECT COUNT(Book_ID) FROM book",
          "SELECT COUNT(1) FROM book",
          "SELECT COUNT(Book_ID) AS TotalBooks FROM book",
          "SELECT COUNT(*) AS NumberOfBooks FROM book",
          "SELECT COUNT(DISTINCT Book_ID) FROM book",
          "SELECT COUNT(DISTINCT Book_ID) AS TotalUniqueBooks FROM book",
          "SELECT COUNT(*) FROM book WHERE Book_ID IS NOT NULL",
          "SELECT COUNT(Book_ID) FROM book WHERE Book_ID > 0",
          "SELECT COUNT(*) FROM book WHERE Book_ID > 0"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Title ASC",
          "SELECT Title FROM book ORDER BY Title",
          "SELECT b.Title FROM book b ORDER BY b.Title ASC",
          "SELECT b.Title FROM book AS b ORDER BY b.Title ASC",
          "SELECT Title FROM book ORDER BY Title ASCENDING",
          "SELECT Title FROM book ORDER BY UPPER(Title)",
          "SELECT Title FROM book ORDER BY LOWER(Title) ASC",
          "SELECT Title FROM book ORDER BY Title COLLATE NOCASE ASC",
          "SELECT Title FROM book ORDER BY Title COLLATE NOCASE",
          "SELECT Title FROM book ORDER BY Title COLLATE utf8_general_ci ASC"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Pages DESC",
          "SELECT Title FROM book ORDER BY Pages DESCENDING",
          "SELECT book.Title FROM book ORDER BY book.Pages DESC",
          "SELECT b.Title FROM book b ORDER BY b.Pages DESC",
          "SELECT Title FROM book SORT BY Pages DESC",
          "SELECT Title FROM book ORDER BY CONVERT(INT, Pages) DESC",
          "SELECT Title FROM book ORDER BY CAST(Pages AS INT) DESC",
          "SELECT Title FROM book ORDER BY Pages DESC, Title ASC",
          "SELECT Title FROM book WHERE Pages IS NOT NULL ORDER BY Pages DESC",
          "SELECT Title FROM book ORDER BY Pages DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, Release FROM book",
          "SELECT book.Type, book.Release FROM book",
          "SELECT b.Type, b.Release FROM book b",
          "SELECT Type AS BookType, Release AS ReleaseDate FROM book",
          "SELECT book.Type AS BookType, book.Release AS ReleaseDate FROM book",
          "SELECT DISTINCT Type, Release FROM book",
          "SELECT DISTINCT book.Type, book.Release FROM book",
          "SELECT b.Type AS BookType, b.Release AS ReleaseDate FROM book b",
          "SELECT Type, Release FROM book ORDER BY Release",
          "SELECT book.Type, book.Release FROM book ORDER BY book.Release DESC"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Book_ID, Title, MAX(Chapters) AS MaxChapters, MIN(Chapters) AS MinChapters FROM book GROUP BY Book_ID, Title",
          "SELECT Book_ID, Title, MAX(Chapters) AS MaximumChapters, MIN(Chapters) AS MinimumChapters FROM book GROUP BY Book_ID, Title",
          "SELECT b.Book_ID, b.Title, MAX(b.Chapters) AS MaxChapters, MIN(b.Chapters) AS MinChapters FROM book b GROUP BY b.Book_ID, b.Title",
          "SELECT Book_ID, Title, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Book_ID, Title",
          "SELECT Title, MAX(Chapters) AS Max_Chapters, MIN(Chapters) AS Min_Chapters FROM book GROUP BY Title",
          "SELECT Book_ID, Title, MAX(Chapters) max_chapters, MIN(Chapters) min_chapters FROM book GROUP BY Book_ID, Title",
          "SELECT Book_ID, Title, GREATEST(Chapters) AS MaxChapters, LEAST(Chapters) AS MinChapters FROM book GROUP BY Book_ID, Title",
          "SELECT Book_ID, Title, MAX(Chapters) AS HighestChapters, MIN(Chapters) AS LowestChapters FROM book GROUP BY Book_ID, Title",
          "SELECT Book_ID, Title, MAX(Chapters) AS 'Max Chapters', MIN(Chapters) AS 'Min Chapters' FROM book GROUP BY Book_ID, Title",
          "SELECT Book_ID, Title, MAX(Chapters) AS 'Maximum Chapters', MIN(Chapters) AS 'Minimum Chapters' FROM book GROUP BY Book_ID, Title"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Title FROM book WHERE Type != 'Poet'",
          "SELECT Title FROM book WHERE NOT Type = 'Poet'",
          "SELECT Title FROM book WHERE Type <> 'Poet'",
          "SELECT b.Title FROM book b WHERE b.Type != 'Poet'",
          "SELECT Title FROM book WHERE Type NOT IN ('Poet')",
          "SELECT Title FROM book WHERE Type NOT LIKE 'Poet'",
          "SELECT Title FROM book WHERE Type IS NOT 'Poet'",
          "SELECT Title FROM book WHERE NOT (Type = 'Poet')",
          "SELECT Title FROM book WHERE Type != 'Poet' AND Type IS NOT NULL",
          "SELECT Title FROM book WHERE Type NOT LIKE '%Poet%'"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT AVG(Rating) FROM review",
          "SELECT AVG(Rating) AS AverageRating FROM review",
          "SELECT AVG(review.Rating) AS AverageRating FROM review",
          "SELECT AVG(review.Rating) FROM review",
          "SELECT AVG(Rating) AS avg_rating FROM review",
          "SELECT AVG(Rating) FROM review AS r",
          "SELECT AVG(r.Rating) FROM review r",
          "SELECT AVG(r.Rating) AS AverageRating FROM review r",
          "SELECT AVG(r.Rating) AS avg_rating FROM review r",
          "SELECT AVG(review.Rating) AS avg_rating FROM review"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT b.Title, r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT book.Title AS BookTitle, review.Rating AS BookRating FROM book, review WHERE book.Book_ID = review.Book_ID",
          "SELECT Title, Rating FROM book, review WHERE book.Book_ID = review.Book_ID",
          "SELECT b.Title, r.Rating FROM book AS b, review AS r WHERE b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID",
          "SELECT book.Title, review.Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT b.Title AS 'Book Title', r.Rating AS 'Book Rating' FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID",
          "SELECT Title, Rating FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID",
          "SELECT DISTINCT book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT R.Rating FROM review R JOIN book B ON R.Book_ID = B.Book_ID WHERE B.Chapters = (SELECT MAX(Chapters) FROM book)",
          "SELECT review.Rating FROM review INNER JOIN book ON review.Book_ID = book.Book_ID WHERE book.Chapters = (SELECT MAX(Chapters) FROM book)",
          "SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)",
          "SELECT R.Rating FROM review R, book B WHERE R.Book_ID = B.Book_ID AND B.Chapters = (SELECT MAX(Chapters) FROM book)",
          "SELECT review.Rating FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Chapters DESC LIMIT 1",
          "SELECT R.Rating FROM review R WHERE R.Book_ID IN (SELECT B.Book_ID FROM book B WHERE B.Chapters = (SELECT MAX(Chapters) FROM book))",
          "SELECT TOP 1 review.Rating FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Chapters DESC",
          "SELECT R.Rating FROM review R INNER JOIN (SELECT Book_ID FROM book WHERE Chapters = (SELECT MAX(Chapters) FROM book)) AS B ON R.Book_ID = B.Book_ID",
          "SELECT review.Rating FROM review, book WHERE review.Book_ID = book.Book_ID AND book.Chapters = (SELECT MAX(Chapters) FROM book)",
          "SELECT R.Rating FROM review R WHERE EXISTS (SELECT 1 FROM book B WHERE B.Book_ID = R.Book_ID AND B.Chapters = (SELECT MAX(Chapters) FROM book))"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Pages ASC LIMIT 1)",
          "SELECT R.Rank FROM review R JOIN book B ON R.Book_ID = B.Book_ID WHERE B.Pages = (SELECT MIN(Pages) FROM book)",
          "SELECT R.Rank FROM review R INNER JOIN book B ON R.Book_ID = B.Book_ID WHERE B.Pages = (SELECT MIN(Pages) FROM book)",
          "SELECT review.Rank FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Pages = (SELECT MIN(Pages) FROM book)",
          "SELECT Rank FROM review WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Pages = (SELECT MIN(Pages) FROM book))",
          "SELECT R.Rank FROM review R, book B WHERE R.Book_ID = B.Book_ID AND B.Pages = (SELECT MIN(Pages) FROM book)",
          "SELECT review.Rank FROM review, book WHERE review.Book_ID = book.Book_ID AND book.Pages = (SELECT MIN(Pages) FROM book)",
          "SELECT R.Rank FROM review R WHERE EXISTS (SELECT 1 FROM book B WHERE B.Book_ID = R.Book_ID AND B.Pages = (SELECT MIN(Pages) FROM book))",
          "SELECT R.Rank FROM review R WHERE R.Book_ID = (SELECT B.Book_ID FROM book B WHERE B.Pages = (SELECT MIN(Pages) FROM book))",
          "SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book WHERE Pages = (SELECT MIN(Pages) FROM book) LIMIT 1)"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rank DESC LIMIT 1",
          "SELECT Title FROM book WHERE Book_ID = (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1)",
          "SELECT Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rank = (SELECT MAX(Rank) FROM review)",
          "SELECT b.Title FROM book b, review r WHERE b.Book_ID = r.Book_ID AND r.Rank = (SELECT MAX(Rank) FROM review)",
          "SELECT TOP 1 Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rank DESC",
          "SELECT Title FROM book WHERE Book_ID IN (SELECT Book_ID FROM review ORDER BY Rank DESC FETCH FIRST ROW ONLY)",
          "SELECT Title FROM book AS b JOIN review AS r ON b.Book_ID = r.Book_ID ORDER BY r.Rank DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT b.Title FROM book b WHERE EXISTS (SELECT 1 FROM review r WHERE r.Book_ID = b.Book_ID ORDER BY r.Rank DESC LIMIT 1)",
          "SELECT Title FROM (SELECT Title, Rank FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rank DESC) WHERE ROWNUM = 1",
          "SELECT Title FROM book WHERE Book_ID = (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT AVG(review.Readers_in_Million) AS Average_Readers FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = 'Novel'",
          "SELECT AVG(r.Readers_in_Million) FROM review r INNER JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) FROM review, book WHERE review.Book_ID = book.Book_ID AND book.Type = 'Novel'",
          "SELECT AVG(rm) FROM (SELECT Readers_in_Million AS rm FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE Type = 'Novel')",
          "SELECT AVG(Readers_in_Million) FROM review INNER JOIN book ON review.Book_ID = book.Book_ID AND book.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) AS avg_readers FROM review r JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel'",
          "SELECT AVG(r.Readers_in_Million) FROM review r, book b WHERE r.Book_ID = b.Book_ID AND b.Type = 'Novel'",
          "SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE book.Type = 'Novel' GROUP BY book.Type",
          "SELECT AVG(r.Readers_in_Million) FROM review r JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel' GROUP BY b.Type",
          "SELECT AVG(Readers_in_Million) FROM review r JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel' AND b.Book_ID = r.Book_ID"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, COUNT(*) AS NumberOfBooks FROM book GROUP BY Type",
          "SELECT Type, COUNT(Book_ID) AS BookCount FROM book GROUP BY Type",
          "SELECT b.Type, COUNT(b.Book_ID) FROM book b GROUP BY b.Type",
          "SELECT Type, COUNT(*) FROM book GROUP BY Type ORDER BY Type",
          "SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type ORDER BY COUNT(Book_ID) DESC",
          "SELECT b.Type, COUNT(*) AS TotalBooks FROM book b GROUP BY b.Type",
          "SELECT Type, COUNT(*) AS CountOfBooks FROM book GROUP BY Type HAVING COUNT(*) > 0",
          "SELECT Type, COUNT(Book_ID) AS Total FROM book GROUP BY Type HAVING COUNT(Book_ID) > 0",
          "SELECT Type, COUNT(*) FROM book GROUP BY Type HAVING COUNT(*) > 1",
          "SELECT Type, COUNT(*) AS NumberOfBooks FROM book GROUP BY Type ORDER BY NumberOfBooks DESC"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Type, COUNT(*) AS frequency FROM book GROUP BY Type ORDER BY frequency DESC LIMIT 1",
          "SELECT TOP 1 Type FROM book GROUP BY Type ORDER BY COUNT(Type) DESC",
          "SELECT Type FROM (SELECT Type, COUNT(*) as CountType FROM book GROUP BY Type) AS TypeCount ORDER BY CountType DESC LIMIT 1",
          "SELECT b.Type FROM book b GROUP BY b.Type ORDER BY COUNT(b.Type) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM book GROUP BY Type) sub)",
          "SELECT Type, MAX(count) FROM (SELECT Type, COUNT(*) as count FROM book GROUP BY Type) groupedBooks",
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(Type) DESC, Type ASC LIMIT 1",
          "SELECT Type, COUNT(*) as Total FROM book GROUP BY Type ORDER BY Total DESC LIMIT 1",
          "SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC, Type LIMIT 1"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3",
          "SELECT b.Type FROM book b GROUP BY b.Type HAVING COUNT(b.Book_ID) >= 3",
          "SELECT Type FROM (SELECT Type, COUNT(Book_ID) AS count FROM book GROUP BY Type) AS subquery WHERE count >= 3",
          "SELECT DISTINCT Type FROM book WHERE Type IN (SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3)",
          "SELECT Type, COUNT(Book_ID) AS TotalBooks FROM book GROUP BY Type HAVING TotalBooks >= 3",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3 ORDER BY Type",
          "SELECT book.Type FROM book GROUP BY book.Type HAVING COUNT(book.Book_ID) >= 3",
          "SELECT Type, COUNT(*) FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3",
          "SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC",
          "SELECT book.Title FROM book, review WHERE book.Book_ID = review.Book_ID ORDER BY review.Rating ASC",
          "SELECT Title FROM book AS b INNER JOIN review AS r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT b.Title FROM book b, review r WHERE b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT Title FROM book JOIN review USING(Book_ID) ORDER BY Rating ASC",
          "SELECT book.Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC",
          "SELECT Title FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT b.Title FROM book b RIGHT JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC",
          "SELECT Title FROM book b CROSS JOIN review r WHERE b.Book_ID = r.Book_ID ORDER BY r.Rating ASC"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT b.Title, b.Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC",
          "SELECT Title, Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC",
          "SELECT book.Title, book.Audio FROM book, review WHERE book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC",
          "SELECT Title, Audio FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID ORDER BY Readers_in_Million DESC",
          "SELECT b.Title AS BookTitle, b.Audio AS AudioLength FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC",
          "SELECT Title, Audio FROM book b, review r WHERE b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC",
          "SELECT Title, Audio FROM book JOIN review USING(Book_ID) ORDER BY Readers_in_Million DESC",
          "SELECT book.Title, book.Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC",
          "SELECT b.Title, b.Audio FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC, b.Title ASC",
          "SELECT Title, Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC, Title ASC"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT COUNT(Book_ID) FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)",
          "SELECT COUNT(*) FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL",
          "SELECT COUNT(*) FROM book WHERE NOT EXISTS (SELECT 1 FROM review WHERE review.Book_ID = book.Book_ID)",
          "SELECT COUNT(Book_ID) AS UnreviewedBooks FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT COUNT(*) FROM book b WHERE NOT EXISTS (SELECT NULL FROM review r WHERE r.Book_ID = b.Book_ID)",
          "SELECT COUNT(*) FROM (SELECT Book_ID FROM book EXCEPT SELECT Book_ID FROM review) AS Unreviewed",
          "SELECT COUNT(*) FROM book AS b WHERE b.Book_ID NOT IN (SELECT r.Book_ID FROM review AS r)",
          "SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review GROUP BY Book_ID)",
          "SELECT COUNT(DISTINCT book.Book_ID) FROM book LEFT OUTER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type FROM book WHERE Type IN (SELECT Type FROM book WHERE Chapters > 75) AND Type IN (SELECT Type FROM book WHERE Chapters < 50)",
          "SELECT DISTINCT Type FROM book WHERE Chapters > 75 INTERSECT SELECT DISTINCT Type FROM book WHERE Chapters < 50",
          "SELECT b.Type FROM book b JOIN (SELECT Type FROM book WHERE Chapters > 75) AS high ON b.Type = high.Type JOIN (SELECT Type FROM book WHERE Chapters < 50) AS low ON b.Type = low.Type",
          "SELECT Type FROM book GROUP BY Type HAVING MAX(Chapters) > 75 AND MIN(Chapters) < 50",
          "WITH HighChap AS (SELECT Type FROM book WHERE Chapters > 75), LowChap AS (SELECT Type FROM book WHERE Chapters < 50) SELECT Type FROM HighChap WHERE Type IN (SELECT Type FROM LowChap)",
          "SELECT Type FROM book WHERE Type IN (SELECT Type FROM book WHERE Chapters > 75 UNION ALL SELECT Type FROM book WHERE Chapters < 50) GROUP BY Type HAVING COUNT(DISTINCT Chapters) > 1",
          "SELECT DISTINCT b1.Type FROM book b1, book b2 WHERE b1.Type = b2.Type AND b1.Chapters > 75 AND b2.Chapters < 50",
          "SELECT Type FROM book b1 WHERE EXISTS (SELECT 1 FROM book b2 WHERE b1.Type = b2.Type AND b2.Chapters > 75) AND EXISTS (SELECT 1 FROM book b3 WHERE b1.Type = b3.Type AND b3.Chapters < 50)",
          "SELECT Type FROM (SELECT Type FROM book WHERE Chapters > 75 UNION SELECT Type FROM book WHERE Chapters < 50) AS SubQuery GROUP BY Type HAVING COUNT(*) > 1",
          "SELECT Type FROM book WHERE Type IN (SELECT Type FROM book WHERE Chapters > 75) INTERSECT SELECT Type FROM book WHERE Type IN (SELECT Type FROM book WHERE Chapters < 50)"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Type) FROM book",
          "SELECT COUNT(UNIQUE Type) FROM book",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Type FROM book)",
          "SELECT DISTINCT COUNT(Type) FROM book",
          "SELECT COUNT(DISTINCT Type) AS TypeCount FROM book",
          "SELECT COUNT(*) FROM (SELECT Type FROM book GROUP BY Type)",
          "SELECT COUNT(DISTINCT Type) FROM book GROUP BY Type",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Type FROM book GROUP BY Type)",
          "SELECT COUNT(Type) FROM (SELECT DISTINCT Type FROM book) AS UniqueTypes",
          "SELECT COUNT(DISTINCT Type) FROM book WHERE Type IS NOT NULL"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "book_review",
      "infer_predictions": [
        [
          "SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT b.Type, b.Title FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL",
          "SELECT Type, Title FROM book WHERE NOT EXISTS (SELECT 1 FROM review WHERE review.Book_ID = book.Book_ID)",
          "SELECT book.Type, book.Title FROM book LEFT OUTER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL",
          "SELECT Type, Title FROM book b WHERE b.Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT b.Type, b.Title FROM book b WHERE NOT EXISTS (SELECT NULL FROM review r WHERE r.Book_ID = b.Book_ID)",
          "SELECT Type, Title FROM book AS b WHERE b.Book_ID NOT IN (SELECT Book_ID FROM review)",
          "SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)",
          "SELECT b.Type, b.Title FROM book b WHERE b.Book_ID NOT IN (SELECT DISTINCT r.Book_ID FROM review r)",
          "SELECT Type, Title FROM book b WHERE NOT EXISTS (SELECT * FROM review r WHERE r.Book_ID = b.Book_ID)"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM customer",
          "SELECT COUNT(Customer_ID) FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) FROM customer",
          "SELECT COUNT(1) FROM customer",
          "SELECT COUNT(Customer_ID) AS NumberOfCustomers FROM customer",
          "SELECT COUNT(*) AS TotalCustomers FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) AS UniqueCustomerCount FROM customer",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID IS NOT NULL",
          "SELECT COUNT(Customer_ID) FROM customer WHERE Customer_ID > 0",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID <> ''"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM customer",
          "SELECT COUNT(Customer_ID) FROM customer",
          "SELECT COUNT(1) FROM customer",
          "SELECT COUNT(Customer_ID) AS NumberOfCustomers FROM customer",
          "SELECT COUNT(*) AS TotalCustomers FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) FROM customer",
          "SELECT COUNT(DISTINCT Customer_ID) AS UniqueCustomers FROM customer",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID IS NOT NULL",
          "SELECT COUNT(Customer_ID) FROM customer WHERE Customer_ID > 0",
          "SELECT COUNT(*) FROM customer WHERE Customer_ID != ''"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership",
          "SELECT customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC",
          "SELECT c.Name FROM customer c ORDER BY c.Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASCENDING",
          "SELECT customer.Name FROM customer ORDER BY Level_of_Membership",
          "SELECT Name FROM customer AS c ORDER BY c.Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY CONVERT(Level_of_Membership, SIGNED) ASC",
          "SELECT Name FROM customer ORDER BY CAST(Level_of_Membership AS INT) ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership+0 ASC"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
          "SELECT customer.Name FROM customer ORDER BY customer.Level_of_Membership ASC",
          "SELECT Name FROM customer ORDER BY Level_of_Membership",
          "SELECT c.Name FROM customer AS c ORDER BY c.Level_of_Membership ASC",
          "SELECT Name FROM customer SORT BY Level_of_Membership ASCENDING",
          "SELECT customer.Name FROM customer SORT BY customer.Level_of_Membership IN ASCENDING ORDER",
          "SELECT Name FROM customer ORDER BY Level_of_Membership ASCENDING",
          "SELECT Name FROM customer ORDER BY ASC Level_of_Membership",
          "SELECT customer.Name FROM customer ORDER BY ASC customer.Level_of_Membership",
          "SELECT Name FROM customer ORDER BY Level_of_Membership IN ASC ORDER"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, Card_Credit FROM customer",
          "SELECT customer.Nationality, customer.Card_Credit FROM customer",
          "SELECT c.Nationality, c.Card_Credit FROM customer AS c",
          "SELECT DISTINCT Nationality, Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer GROUP BY Nationality, Card_Credit",
          "SELECT `Nationality`, `Card_Credit` FROM `customer`",
          "SELECT Nationality AS Customer_Nationality, Card_Credit AS Customer_Card_Credit FROM customer",
          "SELECT customer.Nationality AS Nationality, customer.Card_Credit AS Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer ORDER BY Nationality",
          "SELECT Nationality, Card_Credit FROM customer WHERE Nationality IS NOT NULL AND Card_Credit IS NOT NULL"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, Card_Credit FROM customer",
          "SELECT customer.Nationality, customer.Card_Credit FROM customer",
          "SELECT c.Nationality, c.Card_Credit FROM customer AS c",
          "SELECT Nationality AS Customer_Nationality, Card_Credit AS Customer_Card_Credit FROM customer",
          "SELECT DISTINCT Nationality, Card_Credit FROM customer",
          "SELECT Nationality, Card_Credit FROM customer GROUP BY Nationality, Card_Credit",
          "SELECT * FROM (SELECT Nationality, Card_Credit FROM customer) AS subquery",
          "SELECT Nationality, Card_Credit FROM customer ORDER BY Nationality",
          "SELECT Nationality, Card_Credit FROM customer WHERE Nationality IS NOT NULL AND Card_Credit IS NOT NULL",
          "SELECT Nationality, Card_Credit FROM customer WHERE Nationality <> '' AND Card_Credit <> ''"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')",
          "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'",
          "SELECT c.Name FROM customer c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality LIKE 'England' OR Nationality LIKE 'Australia'",
          "SELECT DISTINCT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality = 'England' UNION SELECT Name FROM customer WHERE Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia')",
          "SELECT Name FROM customer WHERE Nationality = ANY (ARRAY['England', 'Australia'])",
          "SELECT Name FROM customer WHERE (Nationality = 'England' OR Nationality = 'Australia') AND Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')",
          "SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'",
          "SELECT c.Name FROM customer AS c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality LIKE 'England' OR Nationality LIKE 'Australia'",
          "SELECT DISTINCT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality = 'England' UNION SELECT Name FROM customer WHERE Nationality = 'Australia'",
          "SELECT Name FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia')",
          "SELECT Name FROM customer WHERE Nationality = ANY (ARRAY['England', 'Australia'])",
          "SELECT Name FROM customer WHERE (Nationality = 'England' OR Nationality = 'Australia') AND Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) AS AverageCredit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > '1'",
          "SELECT AVG(Card_Credit) FROM customer GROUP BY Level_of_Membership HAVING Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(c.Card_Credit) AS AverageCredit FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE CAST(Level_of_Membership AS INT) > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) AS AverageCredit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > '1'",
          "SELECT AVG(Card_Credit) FROM customer GROUP BY Level_of_Membership HAVING Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE CAST(Level_of_Membership AS INT) > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL",
          "SELECT AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 ORDER BY Level_of_Membership",
          "SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit > 0"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
          "SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT TOP 1 Card_Credit FROM customer ORDER BY Level_of_Membership DESC",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership IN (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer c ORDER BY c.Level_of_Membership DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(c.Level_of_Membership) FROM customer c)",
          "SELECT Card_Credit FROM (SELECT Card_Credit, RANK() OVER (ORDER BY Level_of_Membership DESC) AS rank FROM customer) WHERE rank = 1",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer LIMIT 1)",
          "SELECT Card_Credit FROM customer AS c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer AS sub)"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
          "SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT TOP 1 Card_Credit FROM customer ORDER BY Level_of_Membership DESC",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership IN (SELECT MAX(Level_of_Membership) FROM customer)",
          "SELECT Card_Credit FROM customer AS c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer AS c)",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(c.Level_of_Membership) FROM customer c)",
          "SELECT Card_Credit FROM (SELECT Card_Credit, Level_of_Membership, RANK() OVER (ORDER BY Level_of_Membership DESC) AS rank FROM customer) AS ranked WHERE rank = 1",
          "SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer LIMIT 1)",
          "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(*) AS NumberOfCustomers FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality",
          "SELECT c.Nationality, COUNT(c.Customer_ID) AS NumberOfCustomers FROM customer AS c GROUP BY c.Nationality",
          "SELECT c.Nationality, COUNT(*) FROM customer c GROUP BY c.Nationality",
          "SELECT Nationality, COUNT(Customer_ID) AS Total FROM customer GROUP BY Nationality ORDER BY Total DESC",
          "SELECT Nationality, COUNT(*) AS TotalCustomers FROM customer GROUP BY Nationality ORDER BY TotalCustomers DESC",
          "SELECT Nationality, COUNT(Customer_ID) AS CountOfCustomers FROM customer GROUP BY Nationality ORDER BY CountOfCustomers",
          "SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality ORDER BY Count DESC"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(*) AS CustomerCount FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality",
          "SELECT Nationality, COUNT(DISTINCT Customer_ID) AS TotalCustomers FROM customer GROUP BY Nationality",
          "SELECT c.Nationality, COUNT(c.Customer_ID) AS NumberOfCustomers FROM customer AS c GROUP BY c.Nationality",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality ORDER BY Nationality",
          "SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality HAVING COUNT(Customer_ID) > 0",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality ORDER BY NumberOfCustomers DESC",
          "SELECT Nationality, COUNT(Customer_ID) AS NumberOfCustomers FROM customer GROUP BY Nationality ORDER BY NumberOfCustomers ASC"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
          "SELECT Nationality, COUNT(Nationality) AS count FROM customer GROUP BY Nationality ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS count FROM customer GROUP BY Nationality) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM customer GROUP BY Nationality) AS counts)",
          "WITH NationalityCount AS (SELECT Nationality, COUNT(*) AS count FROM customer GROUP BY Nationality) SELECT Nationality FROM NationalityCount WHERE count = (SELECT MAX(count) FROM NationalityCount)",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1",
          "SELECT Nationality, COUNT(*) AS Total FROM customer GROUP BY Nationality ORDER BY Total DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
          "SELECT Nationality, COUNT(*) AS count FROM customer GROUP BY Nationality ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS Total FROM customer GROUP BY Nationality) AS SubQuery ORDER BY Total DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM customer GROUP BY Nationality) AS SubQuery)",
          "SELECT Nationality, COUNT(Nationality) AS NumberOfCustomers FROM customer GROUP BY Nationality ORDER BY NumberOfCustomers DESC LIMIT 1",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1",
          "SELECT Nationality, MAX(Count) FROM (SELECT Nationality, COUNT(*) AS Count FROM customer GROUP BY Nationality) AS NationalityCounts",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0",
          "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 50) AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 75)",
          "SELECT DISTINCT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit < 50 AND c2.Card_Credit > 75",
          "SELECT c.Nationality FROM customer c WHERE EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit < 50) AND EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit > 75)",
          "SELECT Nationality FROM customer WHERE Card_Credit < 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit > 75",
          "WITH LowCredit AS (SELECT Nationality FROM customer WHERE Card_Credit < 50), HighCredit AS (SELECT Nationality FROM customer WHERE Card_Credit > 75) SELECT Nationality FROM LowCredit WHERE Nationality IN (SELECT Nationality FROM HighCredit)",
          "SELECT Nationality FROM (SELECT Nationality, MIN(Card_Credit) AS MinCredit, MAX(Card_Credit) AS MaxCredit FROM customer GROUP BY Nationality HAVING MinCredit < 50 AND MaxCredit > 75)",
          "SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 50 UNION SELECT DISTINCT Nationality FROM customer WHERE Card_Credit > 75 HAVING COUNT(DISTINCT Nationality) > 1",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING MIN(Card_Credit) < 50 AND MAX(Card_Credit) > 75",
          "SELECT Nationality FROM customer c1 WHERE (SELECT COUNT(*) FROM customer c2 WHERE c2.Nationality = c1.Nationality AND c2.Card_Credit < 50) > 0 AND (SELECT COUNT(*) FROM customer c3 WHERE c3.Nationality = c1.Nationality AND c3.Card_Credit > 75) > 0",
          "SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer GROUP BY Nationality HAVING MIN(Card_Credit) < 50 AND MAX(Card_Credit) > 75)"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75",
          "SELECT DISTINCT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit > 50 AND c2.Card_Credit < 75",
          "SELECT c.Nationality FROM customer c WHERE c.Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 50) AND c.Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75)",
          "SELECT Nationality FROM customer GROUP BY Nationality HAVING MAX(Card_Credit) > 50 AND MIN(Card_Credit) < 75",
          "WITH CreditAbove50 AS (SELECT Nationality FROM customer WHERE Card_Credit > 50), CreditBelow75 AS (SELECT Nationality FROM customer WHERE Card_Credit < 75) SELECT Nationality FROM CreditAbove50 INTERSECT SELECT Nationality FROM CreditBelow75",
          "SELECT Nationality FROM (SELECT Nationality, MAX(Card_Credit) AS MaxCredit, MIN(Card_Credit) AS MinCredit FROM customer GROUP BY Nationality) AS SubQuery WHERE MaxCredit > 50 AND MinCredit < 75",
          "SELECT DISTINCT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 50) INTERSECT SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75)",
          "SELECT Nationality FROM customer WHERE Card_Credit > 50 AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75)",
          "SELECT DISTINCT Nationality FROM customer c1 WHERE EXISTS (SELECT 1 FROM customer c2 WHERE c1.Nationality = c2.Nationality AND c2.Card_Credit > 50) AND EXISTS (SELECT 1 FROM customer c3 WHERE c1.Nationality = c3.Nationality AND c3.Card_Credit < 75)",
          "SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 50) AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75)"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT c.Name AS CustomerName, co.Dish_Name AS DishName FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT cust.Name, ord.Dish_Name FROM customer AS cust, customer_order AS ord WHERE cust.Customer_ID = ord.Customer_ID",
          "SELECT Name AS Customer, Dish_Name AS Dish FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT DISTINCT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order USING(Customer_ID)",
          "SELECT cust.Name, ord.Dish_Name FROM customer cust JOIN customer_order ord ON cust.Customer_ID = ord.Customer_ID",
          "SELECT customer.Name AS Customer_Name, customer_order.Dish_Name AS Ordered_Dish FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, o.Dish_Name FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT cust.Name AS CustomerName, ord.Dish_Name AS DishName FROM customer AS cust JOIN customer_order AS ord ON cust.Customer_ID = ord.Customer_ID",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT c.Name, o.Dish_Name FROM customer AS c INNER JOIN customer_order AS o ON c.Customer_ID = o.Customer_ID",
          "SELECT Name AS CustomerName, Dish_Name AS Dish FROM customer JOIN customer_order ON Customer_ID = customer_order.Customer_ID",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID",
          "SELECT c.Name, o.Dish_Name FROM customer c, customer_order o WHERE c.Customer_ID = o.Customer_ID"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT c.Name AS CustomerName, co.Dish_Name AS DishName FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT c.Name, co.Dish_Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT customer.Name AS Customer, customer_order.Dish_Name AS Dish FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT c.Name, co.Dish_Name FROM customer AS c INNER JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT cust.Name AS CustomerName, ord.Dish_Name AS DishName FROM customer AS cust JOIN customer_order AS ord ON cust.Customer_ID = ord.Customer_ID ORDER BY ord.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT c.Name AS CustomerName, co.Dish_Name AS DishName FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC",
          "SELECT c.Name, co.Dish_Name FROM customer AS c INNER JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC",
          "SELECT Name, Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name",
          "SELECT Name, SUM(Quantity) FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT Name, Total_Quantity FROM (SELECT customer.Name AS Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name) AS SubQuery",
          "SELECT c.Name AS Customer_Name, SUM(co.Quantity) AS Total_Orders FROM customer AS c, customer_order AS co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Name ORDER BY c.Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order ON Customer_ID GROUP BY Name",
          "SELECT customer.Name, Total_Quantity FROM customer LEFT JOIN (SELECT Customer_ID, SUM(Quantity) AS Total_Quantity FROM customer_order GROUP BY Customer_ID) co ON customer.Customer_ID = co.Customer_ID",
          "SELECT c.Name, IFNULL(SUM(co.Quantity), 0) AS Total_Quantity FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order USING(Customer_ID) GROUP BY Name",
          "SELECT DISTINCT c.Name, (SELECT SUM(Quantity) FROM customer_order WHERE Customer_ID = c.Customer_ID) AS Total_Quantity FROM customer c"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name, SUM(co.Quantity) AS TotalQuantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT customer.Name, SUM(customer_order.Quantity) AS TotalQuantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name",
          "SELECT Name, SUM(Quantity) FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT Name, TotalQuantity FROM (SELECT Customer_ID, SUM(Quantity) AS TotalQuantity FROM customer_order GROUP BY Customer_ID) AS SubQuery JOIN customer ON SubQuery.Customer_ID = customer.Customer_ID",
          "SELECT c.Name AS CustomerName, SUM(co.Quantity) AS TotalOrderedQuantity FROM customer AS c, customer_order AS co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) AS TotalQuantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID",
          "SELECT customer.Name, TotalQuantity FROM customer JOIN (SELECT Customer_ID, SUM(Quantity) AS TotalQuantity FROM customer_order GROUP BY Customer_ID) co ON customer.Customer_ID = co.Customer_ID",
          "SELECT c.Name, SUM(co.Quantity) FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name",
          "SELECT Name, SUM(Quantity) AS TotalQuantity FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Name",
          "SELECT c.Name, SUM(co.Quantity) AS TotalQuantity FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name ORDER BY c.Name"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.* FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT * FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT customer.* FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT c.Name, c.Customer_ID FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT DISTINCT customer.Name, customer.Customer_ID FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT customer.* FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT c.Name, c.Customer_ID FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT * FROM customer WHERE EXISTS (SELECT NULL FROM customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY customer_order.Customer_ID HAVING SUM(customer_order.Quantity) > 1)",
          "SELECT customer.Name, customer.Customer_ID FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT c.* FROM customer c WHERE c.Customer_ID IN (SELECT co.Customer_ID FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1)"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT DISTINCT c.Name FROM customer c, customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT c.Name FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT customer.Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1",
          "SELECT c.Name FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1",
          "SELECT Name FROM customer WHERE EXISTS (SELECT 1 FROM customer_order WHERE customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer_ID HAVING SUM(Quantity) > 1)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID IN (SELECT co.Customer_ID FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1)",
          "SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT DISTINCT Manager FROM branch",
          "SELECT Manager FROM branch GROUP BY Manager",
          "SELECT DISTINCT b.Manager FROM branch b",
          "SELECT b.Manager FROM branch b GROUP BY b.Manager",
          "SELECT DISTINCT Manager AS DistinctManagers FROM branch",
          "SELECT Manager FROM branch WHERE Manager IS NOT NULL GROUP BY Manager",
          "SELECT DISTINCT Manager FROM branch WHERE Manager IS NOT NULL",
          "SELECT DISTINCT Manager FROM branch ORDER BY Manager",
          "SELECT Manager FROM branch WHERE Manager <> '' GROUP BY Manager",
          "SELECT DISTINCT Manager FROM branch WHERE Manager <> ''"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT DISTINCT Manager FROM branch",
          "SELECT Manager FROM branch GROUP BY Manager",
          "SELECT DISTINCT Manager AS BranchManager FROM branch",
          "SELECT Manager FROM branch WHERE Manager IS NOT NULL GROUP BY Manager",
          "SELECT DISTINCT b.Manager FROM branch b",
          "SELECT DISTINCT Manager FROM branch WHERE Manager <> ''",
          "SELECT DISTINCT Manager FROM branch ORDER BY Manager",
          "SELECT DISTINCT Manager FROM branch WHERE Manager IS NOT NULL",
          "SELECT DISTINCT Manager FROM branch WHERE Manager != ''",
          "SELECT DISTINCT Manager FROM branch WHERE LENGTH(Manager) > 0"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c LEFT JOIN customer_order o ON c.Customer_ID = o.Customer_ID WHERE o.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE NOT EXISTS (SELECT 1 FROM customer_order WHERE customer_order.Customer_ID = customer.Customer_ID)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT Name FROM customer EXCEPT SELECT Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID",
          "SELECT Name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order o WHERE o.Customer_ID = c.Customer_ID)",
          "SELECT DISTINCT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c WHERE NOT EXISTS (SELECT * FROM customer_order o WHERE o.Customer_ID = c.Customer_ID)",
          "SELECT Name FROM customer c LEFT OUTER JOIN customer_order o ON c.Customer_ID = o.Customer_ID WHERE o.Customer_ID IS NULL"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "restaurant_bills",
      "infer_predictions": [
        [
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
          "SELECT c.Name FROM customer c LEFT JOIN customer_order o ON c.Customer_ID = o.Customer_ID WHERE o.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE NOT EXISTS (SELECT 1 FROM customer_order WHERE customer_order.Customer_ID = customer.Customer_ID)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)",
          "SELECT Name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order o WHERE o.Customer_ID = c.Customer_ID)",
          "SELECT DISTINCT c.Name FROM customer c LEFT OUTER JOIN customer_order o ON c.Customer_ID = o.Customer_ID WHERE o.Customer_ID IS NULL",
          "SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)",
          "SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT o.Customer_ID FROM customer_order o)",
          "SELECT Name FROM customer AS c WHERE NOT EXISTS (SELECT * FROM customer_order AS o WHERE o.Customer_ID = c.Customer_ID)",
          "SELECT c.Name FROM customer c LEFT JOIN customer_order o ON c.Customer_ID = o.Customer_ID WHERE o.Customer_ID IS NULL GROUP BY c.Name"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM member",
          "SELECT COUNT(Member_ID) FROM member",
          "SELECT COUNT(DISTINCT Member_ID) FROM member",
          "SELECT COUNT(1) FROM member",
          "SELECT COUNT(*) AS total_members FROM member",
          "SELECT COUNT(Member_ID) AS member_count FROM member",
          "SELECT COUNT(DISTINCT Member_ID) AS unique_member_count FROM member",
          "SELECT COUNT(1) AS count_of_members FROM member",
          "SELECT COUNT(*) FROM member WHERE Member_ID IS NOT NULL",
          "SELECT COUNT(Member_ID) FROM member WHERE Member_ID > 0"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member ORDER BY Age ASC",
          "SELECT Name FROM member ORDER BY Age",
          "SELECT member.Name FROM member ORDER BY member.Age ASC",
          "SELECT m.Name FROM member m ORDER BY m.Age ASC",
          "SELECT Name FROM member ORDER BY Age ASCENDING",
          "SELECT Name FROM member AS m ORDER BY m.Age ASC",
          "SELECT Name FROM member ORDER BY Age ASC, Name ASC",
          "SELECT Name FROM member ORDER BY Age ASC, Name",
          "SELECT Name FROM member ORDER BY Age ASC LIMIT ALL",
          "SELECT Name FROM member ORDER BY Age ASC, Name ASCENDING"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name, Nationality FROM member",
          "SELECT member.Name, member.Nationality FROM member",
          "SELECT m.Name, m.Nationality FROM member m",
          "SELECT Name AS MemberName, Nationality AS MemberNationality FROM member",
          "SELECT DISTINCT Name, Nationality FROM member",
          "SELECT Name, Nationality FROM member ORDER BY Name",
          "SELECT Name, Nationality FROM member ORDER BY Nationality",
          "SELECT * FROM member SELECT Name, Nationality",
          "SELECT Name, Nationality FROM member WHERE Name IS NOT NULL AND Nationality IS NOT NULL",
          "SELECT Name, Nationality FROM member GROUP BY Name, Nationality"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Nationality != 'England'",
          "SELECT Name FROM member WHERE NOT Nationality = 'England'",
          "SELECT Name FROM member WHERE Nationality <> 'England'",
          "SELECT member.Name FROM member WHERE member.Nationality != 'England'",
          "SELECT m.Name FROM member m WHERE m.Nationality != 'England'",
          "SELECT Name FROM member WHERE Nationality NOT IN ('England')",
          "SELECT Name FROM member WHERE Nationality NOT LIKE 'England'",
          "SELECT Name FROM member WHERE Nationality IS NOT 'England'",
          "SELECT Name FROM member WHERE Nationality NOT EQUALS 'England'",
          "SELECT Name FROM member WHERE NOT (Nationality = 'England')"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Age IN (19, 20)",
          "SELECT Name FROM member WHERE Age = 19 OR Age = 20",
          "SELECT member.Name FROM member WHERE member.Age = 19 OR member.Age = 20",
          "SELECT m.Name FROM member m WHERE m.Age = 19 OR m.Age = 20",
          "SELECT Name FROM member WHERE Age BETWEEN 19 AND 20",
          "SELECT DISTINCT Name FROM member WHERE Age = 19 OR Age = 20",
          "SELECT Name FROM member WHERE Age = 19 UNION SELECT Name FROM member WHERE Age = 20",
          "SELECT Name FROM member m WHERE m.Age IN (19, 20)",
          "SELECT Name FROM member WHERE Age >= 19 AND Age <= 20",
          "SELECT Name FROM member WHERE Age IN (SELECT Age FROM member WHERE Age = 19 OR Age = 20)"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
          "SELECT TOP 1 Name FROM member ORDER BY Age DESC",
          "SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member)",
          "SELECT m.Name FROM member m WHERE m.Age = (SELECT MAX(Age) FROM member)",
          "SELECT Name FROM member WHERE Age IN (SELECT MAX(Age) FROM member)",
          "SELECT Name FROM (SELECT Name, Age FROM member ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM member ORDER BY Age DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM member AS m WHERE m.Age = (SELECT MAX(Age) FROM member AS sub)",
          "SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member) LIMIT 1",
          "SELECT FIRST(Name) FROM member ORDER BY Age DESC"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality, COUNT(Member_ID) AS NumberOfMembers FROM member GROUP BY Nationality",
          "SELECT Nationality, COUNT(*) AS MemberCount FROM member GROUP BY Nationality",
          "SELECT m.Nationality, COUNT(m.Member_ID) AS TotalMembers FROM member m GROUP BY m.Nationality",
          "SELECT Nationality, COUNT(DISTINCT Member_ID) FROM member GROUP BY Nationality",
          "SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality ORDER BY COUNT(Member_ID) DESC",
          "SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality ORDER BY Nationality",
          "SELECT m.Nationality, COUNT(*) AS CountOfMembers FROM member m GROUP BY m.Nationality",
          "SELECT Nationality, COUNT(Member_ID) AS Count FROM member GROUP BY Nationality HAVING COUNT(Member_ID) > 1",
          "SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality HAVING COUNT(Member_ID) > 0",
          "SELECT DISTINCT Nationality, COUNT(Member_ID) OVER (PARTITION BY Nationality) AS MembersCount FROM member"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
          "SELECT Nationality, COUNT(Nationality) AS Frequency FROM member GROUP BY Nationality ORDER BY Frequency DESC LIMIT 1",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(*) AS count FROM member GROUP BY Nationality) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality ORDER BY COUNT(m.Nationality) DESC LIMIT 1",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Nationality) = (SELECT MAX(count) FROM (SELECT COUNT(Nationality) AS count FROM member GROUP BY Nationality) AS counts)",
          "WITH NationalityCount AS (SELECT Nationality, COUNT(*) AS Total FROM member GROUP BY Nationality) SELECT Nationality FROM NationalityCount WHERE Total = (SELECT MAX(Total) FROM NationalityCount)",
          "SELECT Nationality, COUNT(*) AS Total FROM member GROUP BY Nationality ORDER BY Total DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC FETCH FIRST ROW WITH TIES"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2",
          "SELECT Nationality, COUNT(Member_ID) AS MemberCount FROM member GROUP BY Nationality HAVING MemberCount >= 2",
          "SELECT Nationality FROM (SELECT Nationality, COUNT(Member_ID) AS total FROM member GROUP BY Nationality) AS subquery WHERE total >= 2",
          "SELECT DISTINCT Nationality FROM member WHERE Nationality IN (SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2)",
          "SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(DISTINCT Member_ID) >= 2",
          "SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(DISTINCT m.Member_ID) >= 2",
          "SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name, c.Club_Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID",
          "SELECT member.Name AS LeaderName, club.Club_Name AS ClubName FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID",
          "SELECT Name, Club_Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID",
          "SELECT DISTINCT member.Name, club.Club_Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID",
          "SELECT m.Name AS Leader, c.Club_Name AS Club FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID",
          "SELECT Name AS LeaderName, Club_Name AS ClubName FROM member JOIN club_leader USING(Member_ID) JOIN club USING(Club_ID)",
          "SELECT member.Name, club.Club_Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID ORDER BY member.Name",
          "SELECT m.Name, c.Club_Name FROM member m CROSS JOIN club_leader cl ON m.Member_ID = cl.Member_ID CROSS JOIN club c ON cl.Club_ID = c.Club_ID",
          "SELECT Name, Club_Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club_leader.Year_Join IS NOT NULL",
          "SELECT m.Name AS 'Club Leader', c.Club_Name AS 'Club' FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID LEFT JOIN club c ON cl.Club_ID = c.Club_ID"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100))",
          "SELECT DISTINCT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Overall_Ranking > 100",
          "SELECT m.Name FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Overall_Ranking > 100",
          "SELECT Name FROM member WHERE EXISTS (SELECT 1 FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club_leader.Member_ID = member.Member_ID AND club.Overall_Ranking > 100)",
          "SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID AND club.Overall_Ranking > 100",
          "SELECT Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Club_ID IN (SELECT Club_ID FROM club WHERE Overall_Ranking > 100)",
          "SELECT m.Name FROM member m WHERE EXISTS (SELECT * FROM club_leader cl JOIN club c ON cl.Club_ID = c.Club_ID WHERE cl.Member_ID = m.Member_ID AND c.Overall_Ranking > 100)",
          "SELECT Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID AND club.Overall_Ranking > 100",
          "SELECT m.Name FROM member m INNER JOIN club_leader cl ON m.Member_ID = cl.Member_ID INNER JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100 ORDER BY m.Name"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Year_Join < 2018)",
          "SELECT DISTINCT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Year_Join < 2018",
          "SELECT m.Name FROM member m, club_leader cl WHERE m.Member_ID = cl.Member_ID AND cl.Year_Join < 2018",
          "SELECT Name FROM member WHERE EXISTS (SELECT 1 FROM club_leader WHERE Member_ID = member.Member_ID AND Year_Join < 2018)",
          "SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID AND club_leader.Year_Join < 2018",
          "SELECT Name FROM member m INNER JOIN club_leader cl ON m.Member_ID = cl.Member_ID AND cl.Year_Join < '2018'",
          "SELECT m.Name FROM member AS m JOIN club_leader AS cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018 ORDER BY m.Name",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Year_Join < 2018) ORDER BY Name",
          "SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID = (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))",
          "SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Club_Name = 'Houston'",
          "SELECT Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID AND club.Club_Name = 'Houston'",
          "SELECT m.Name FROM member AS m, club_leader AS cl, club AS c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE Member_ID = (SELECT Member_ID FROM club_leader WHERE Club_ID = (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))",
          "SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'",
          "SELECT DISTINCT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Club_Name = 'Houston'",
          "SELECT Name FROM member WHERE EXISTS (SELECT 1 FROM club_leader JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club_leader.Member_ID = member.Member_ID AND club.Club_Name = 'Houston')",
          "SELECT m.Name FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston' ORDER BY m.Name"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
          "SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NULL",
          "SELECT Name FROM member WHERE NOT EXISTS (SELECT 1 FROM club_leader WHERE Member_ID = member.Member_ID)",
          "SELECT m.Name FROM member m WHERE m.Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
          "SELECT Name FROM member m WHERE NOT EXISTS (SELECT NULL FROM club_leader cl WHERE cl.Member_ID = m.Member_ID)",
          "SELECT DISTINCT Name FROM member WHERE Member_ID NOT IN (SELECT DISTINCT Member_ID FROM club_leader)",
          "SELECT Name FROM member EXCEPT SELECT Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID",
          "SELECT Name FROM member m WHERE m.Member_ID NOT IN (SELECT Member_ID FROM club_leader cl)",
          "SELECT m.Name FROM member m WHERE NOT EXISTS (SELECT Member_ID FROM club_leader WHERE Member_ID = m.Member_ID)",
          "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader WHERE Member_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Nationality FROM member WHERE Age > 22 OR Age < 19 GROUP BY Nationality HAVING COUNT(DISTINCT CASE WHEN Age > 22 THEN 1 ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN Age < 19 THEN 1 ELSE NULL END) > 0",
          "SELECT Nationality FROM member GROUP BY Nationality HAVING SUM(CASE WHEN Age > 22 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Age < 19 THEN 1 ELSE 0 END) > 0",
          "SELECT m.Nationality FROM member m JOIN (SELECT Nationality FROM member WHERE Age > 22) AS older ON m.Nationality = older.Nationality JOIN (SELECT Nationality FROM member WHERE Age < 19) AS younger ON m.Nationality = younger.Nationality GROUP BY m.Nationality",
          "SELECT DISTINCT m1.Nationality FROM member m1, member m2 WHERE m1.Nationality = m2.Nationality AND m1.Age > 22 AND m2.Age < 19",
          "SELECT Nationality FROM (SELECT Nationality, MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM member GROUP BY Nationality) sub WHERE MaxAge > 22 AND MinAge < 19",
          "WITH Older AS (SELECT Nationality FROM member WHERE Age > 22), Younger AS (SELECT Nationality FROM member WHERE Age < 19) SELECT Nationality FROM Older JOIN Younger ON Older.Nationality = Younger.Nationality",
          "SELECT Nationality FROM member WHERE Nationality IN (SELECT Nationality FROM member WHERE Age > 22) AND Nationality IN (SELECT Nationality FROM member WHERE Age < 19) GROUP BY Nationality",
          "SELECT Nationality FROM member WHERE EXISTS (SELECT 1 FROM member AS m WHERE m.Nationality = member.Nationality AND m.Age > 22) AND EXISTS (SELECT 1 FROM member AS m WHERE m.Nationality = member.Nationality AND m.Age < 19) GROUP BY Nationality",
          "SELECT Nationality FROM member m WHERE (SELECT COUNT(*) FROM member WHERE Nationality = m.Nationality AND Age > 22) > 0 AND (SELECT COUNT(*) FROM member WHERE Nationality = m.Nationality AND Age < 19) > 0 GROUP BY Nationality",
          "SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT AVG(member.Age) AS Average_Age FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID",
          "SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader)",
          "SELECT AVG(m.Age) FROM member m INNER JOIN club_leader cl ON m.Member_ID = cl.Member_ID",
          "SELECT AVG(Age) FROM member m, club_leader cl WHERE m.Member_ID = cl.Member_ID",
          "SELECT AVG(Age) AS AvgAge FROM member WHERE EXISTS (SELECT 1 FROM club_leader WHERE club_leader.Member_ID = member.Member_ID)",
          "SELECT AVG(member.Age) FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Member_ID",
          "SELECT AVG(Age) FROM (SELECT Age FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID) AS SubQuery",
          "SELECT AVG(Age) FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID GROUP BY cl.Member_ID",
          "SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT DISTINCT Member_ID FROM club_leader)",
          "SELECT AVG(Age) FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE member.Member_ID = club_leader.Member_ID"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "club_leader",
      "infer_predictions": [
        [
          "SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE Club_Name ILIKE '%state%'",
          "SELECT Club_Name FROM club WHERE LOWER(Club_Name) LIKE '%state%'",
          "SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%' COLLATE utf8_general_ci",
          "SELECT Club_Name FROM club WHERE POSITION('state' IN Club_Name) > 0",
          "SELECT Club_Name FROM club WHERE INSTR(Club_Name, 'state') > 0",
          "SELECT Club_Name FROM club WHERE Club_Name REGEXP 'state'",
          "SELECT Club_Name FROM club WHERE Club_Name SIMILAR TO '%state%'",
          "SELECT Club_Name FROM club WHERE CHARINDEX('state', Club_Name) > 0",
          "SELECT Club_Name FROM club WHERE CONTAINS(Club_Name, 'state')"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs",
          "SELECT DISTINCT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT DISTINCT cs.Collection_Subset_Name FROM Collection_Subsets cs",
          "SELECT Collection_Subset_Name FROM Collection_Subsets ORDER BY Collection_Subset_Name",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs ORDER BY cs.Collection_Subset_Name",
          "SELECT Collection_Subset_Name AS Subset_Name FROM Collection_Subsets",
          "SELECT cs.Collection_Subset_Name AS Subset_Name FROM Collection_Subsets cs",
          "SELECT Collection_Subset_Name FROM Collection_Subsets GROUP BY Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT DISTINCT Collection_Subset_Name FROM Collection_Subsets",
          "SELECT Collection_Subset_Name FROM Collection_Subsets GROUP BY Collection_Subset_Name",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets AS cs",
          "SELECT Collection_Subset_Name FROM Collection_Subsets ORDER BY Collection_Subset_Name",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name IS NOT NULL",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name <> ''",
          "SELECT Collection_Subset_Name FROM Collection_Subsets GROUP BY Collection_Subset_Name HAVING COUNT(*) >= 1",
          "SELECT Collection_Subset_Name FROM Collection_Subsets FETCH FIRST 100 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT cs.Collection_Subset_Details FROM Collection_Subsets cs WHERE cs.Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name LIKE 'Top collection'",
          "SELECT details FROM Collection_Subsets WHERE name = 'Top collection'",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' LIMIT 1",
          "SELECT * FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' AND Collection_Subset_Details IS NOT NULL",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' ORDER BY Collection_Subset_ID DESC LIMIT 1",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' FETCH FIRST ROW ONLY",
          "SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection' AND Collection_Subset_Details <> ''"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Description FROM Collections C JOIN Collection_Subset_Members M ON C.Collection_ID = M.Collection_ID JOIN Collection_Subsets S ON M.Collection_Subset_ID = S.Collection_Subset_ID WHERE S.Collection_Subset_Name = 'Top collection'",
          "SELECT Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'))",
          "SELECT description FROM Collections INNER JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID INNER JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection'",
          "SELECT Collections.Collection_Description FROM Collections, Collection_Subset_Members, Collection_Subsets WHERE Collections.Collection_ID = Collection_Subset_Members.Collection_ID AND Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID AND Collection_Subsets.Collection_Subset_Name = 'Top collection'",
          "SELECT C.description FROM Collections AS C JOIN Collection_Subset_Members AS M ON C.Collection_ID = M.Collection_ID JOIN Collection_Subsets AS S ON M.Collection_Subset_ID = S.Collection_Subset_ID WHERE S.Collection_Subset_Name = 'Top collection'",
          "SELECT description FROM Collections WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection' AND Collections.Collection_ID = Collection_Subset_Members.Collection_ID)",
          "SELECT C.Collection_Description FROM Collections C, Collection_Subset_Members M, Collection_Subsets S WHERE C.Collection_ID = M.Collection_ID AND M.Collection_Subset_ID = S.Collection_Subset_ID AND S.Collection_Subset_Name = 'Top collection'",
          "SELECT DISTINCT description FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection'",
          "SELECT C.description FROM Collections C INNER JOIN Collection_Subset_Members M ON C.Collection_ID = M.Collection_ID INNER JOIN Collection_Subsets S ON M.Collection_Subset_ID = S.Collection_Subset_ID WHERE S.Collection_Subset_Name = 'Top collection' ORDER BY C.Collection_Name",
          "SELECT description FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID = (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'))"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subset_Name FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets, Document_Subset_Members WHERE Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT Document_Subset_Name FROM Document_Subsets ds, Document_Subset_Members dsm WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets AS ds INNER JOIN Document_Subset_Members AS dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members USING(Document_Subset_ID)",
          "SELECT Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_Name",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds RIGHT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds FULL OUTER JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Name FROM Document_Subsets",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets",
          "SELECT ds.Document_Subset_Name FROM Document_Subsets ds",
          "SELECT Document_Subset_Name FROM Document_Subsets ORDER BY Document_Subset_Name",
          "SELECT Document_Subset_Name FROM Document_Subsets GROUP BY Document_Subset_Name",
          "SELECT * FROM (SELECT Document_Subset_Name FROM Document_Subsets) AS subset_names",
          "SELECT Document_Subset_Name AS SubsetName FROM Document_Subsets",
          "SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_Name IS NOT NULL",
          "SELECT Document_Subset_Name FROM Document_Subsets ds ORDER BY ds.Document_Subset_Name ASC",
          "SELECT Document_Subset_Name FROM Document_Subsets GROUP BY Document_Subset_Name HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000'",
          "SELECT details FROM Document_Subsets WHERE name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' LIMIT 1",
          "SELECT D.Document_Subset_Details FROM Document_Subsets AS D WHERE D.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details IS NOT NULL",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' ORDER BY Document_Subset_ID DESC LIMIT 1",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' FETCH FIRST ROW ONLY",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details <> ''"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT * FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000'",
          "SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details IS NOT NULL",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' ORDER BY Document_Subset_ID",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' LIMIT 1",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' GROUP BY Document_Subset_ID",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' FETCH FIRST ROW ONLY",
          "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' FOR UPDATE"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects",
          "SELECT d.Document_Object_ID FROM Document_Objects AS d",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID",
          "SELECT * FROM Document_Objects SELECT Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IS NOT NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID > 0",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID DESC",
          "SELECT Document_Object_ID AS ID FROM Document_Objects"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects",
          "SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID FROM Document_Objects AS d",
          "SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID",
          "SELECT * FROM Document_Objects SELECT Document_Object_ID",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IS NOT NULL",
          "SELECT Document_Object_ID FROM Document_Objects LIMIT ALL",
          "SELECT Document_Object_ID FROM Document_Objects FETCH FIRST ROW ONLY",
          "SELECT Document_Object_ID FROM Document_Objects FETCH ALL ROWS ONLY"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NOT NULL",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Document_Object_ID",
          "SELECT TOP 1 Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' LIMIT 1",
          "SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IS NOT NULL",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner IN ('Marlin')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner COLLATE NOCASE = 'Marlin'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE UPPER(Owner) = UPPER('Marlin')",
          "SELECT Document_Object_ID FROM Document_Objects WHERE LOWER(Owner) = LOWER('Marlin')",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Document_Object_ID"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'",
          "SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description = 'Braeden Collection'",
          "SELECT d.Owner FROM Document_Objects d WHERE d.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description LIKE 'Braeden Collection'",
          "SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description LIKE 'Braeden Collection'",
          "SELECT d.Owner FROM Document_Objects AS d WHERE d.Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection' LIMIT 1",
          "SELECT TOP 1 Owner FROM Document_Objects WHERE Description = 'Braeden Collection'",
          "SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection' AND ROWNUM = 1",
          "SELECT Owner FROM Document_Objects WHERE TRIM(Description) = 'Braeden Collection'"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT do.Owner FROM Document_Objects do JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Description = 'Braeden Collection'",
          "SELECT do.Owner FROM Document_Objects do, Documents_in_Collections dic, Collections c WHERE do.Document_Object_ID = dic.Document_Object_ID AND dic.Collection_ID = c.Collection_ID AND c.Collection_Description = 'Braeden Collection' GROUP BY do.Owner",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Description = 'Braeden Collection'))",
          "SELECT DISTINCT do.Owner FROM Document_Objects AS do INNER JOIN Documents_in_Collections AS dic ON do.Document_Object_ID = dic.Document_Object_ID INNER JOIN Collections AS c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Description = 'Braeden Collection'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT dic.Document_Object_ID FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Description = 'Braeden Collection')",
          "SELECT DISTINCT do.Owner FROM Document_Objects do INNER JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID INNER JOIN Collections c ON dic.Collection_ID = c.Collection_ID AND c.Collection_Description = 'Braeden Collection'",
          "SELECT DISTINCT do.Owner FROM Document_Objects do, Documents_in_Collections dic, Collections c WHERE do.Document_Object_ID = dic.Document_Object_ID AND dic.Collection_ID = c.Collection_ID AND c.Collection_Description LIKE 'Braeden Collection'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE Document_Object_ID = Document_Objects.Document_Object_ID AND c.Collection_Description = 'Braeden Collection')",
          "SELECT DISTINCT do.Owner FROM Document_Objects do JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Description = 'Braeden Collection' ORDER BY do.Owner",
          "SELECT DISTINCT Owner FROM Document_Objects do WHERE EXISTS (SELECT * FROM Documents_in_Collections dic INNER JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE dic.Document_Object_ID = do.Document_Object_ID AND c.Collection_Description = 'Braeden Collection')"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects D WHERE D.Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D2.Owner FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Parent_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Marlin'",
          "SELECT D.Owner FROM Document_Objects D INNER JOIN Document_Objects P ON D.Document_Object_ID = P.Parent_Document_Object_ID WHERE P.Owner = 'Marlin'",
          "SELECT (SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')) AS Owner",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' LIMIT 1)",
          "SELECT TOP 1 Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT MAX(Parent_Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Document_Object_ID DESC LIMIT 1)",
          "SELECT D.Owner FROM Document_Objects AS D WHERE EXISTS (SELECT 1 FROM Document_Objects AS P WHERE P.Owner = 'Marlin' AND D.Document_Object_ID = P.Parent_Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects D WHERE D.Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D2.Owner FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Parent_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Marlin'",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects D INNER JOIN Document_Objects P ON D.Document_Object_ID = P.Parent_Document_Object_ID WHERE P.Owner = 'Marlin'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID = ANY (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT D.Owner FROM Document_Objects D, Document_Objects P WHERE D.Document_Object_ID = P.Parent_Document_Object_ID AND P.Owner = 'Marlin'",
          "SELECT TOP 1 Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')",
          "SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Document_Object_ID = D2.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 WHERE EXISTS (SELECT 1 FROM Document_Objects D2 WHERE D1.Document_Object_ID = D2.Parent_Document_Object_ID)",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 INNER JOIN Document_Objects D2 ON D1.Document_Object_ID = D2.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects AS D WHERE EXISTS (SELECT * FROM Document_Objects AS P WHERE P.Parent_Document_Object_ID = D.Document_Object_ID)",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1, Document_Objects D2 WHERE D1.Document_Object_ID = D2.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Document_Object_ID = D2.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL",
          "SELECT DISTINCT D1.Description FROM Document_Objects D1 WHERE EXISTS (SELECT 1 FROM Document_Objects D2 WHERE D1.Document_Object_ID = D2.Parent_Document_Object_ID)",
          "SELECT DISTINCT Description FROM Document_Objects AS D WHERE D.Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT D.Description FROM Document_Objects D INNER JOIN Document_Objects P ON D.Document_Object_ID = P.Parent_Document_Object_ID",
          "SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID = ANY (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT DISTINCT Description FROM Document_Objects WHERE EXISTS (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID = Document_Objects.Parent_Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(1) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) AS DocumentCount FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Owner",
          "SELECT Owner, COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Owner",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IS NOT NULL",
          "SELECT COUNT(*) FROM Document_Objects d WHERE d.Owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(1) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) AS DocumentCount FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Owner",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'",
          "SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Document_Object_ID IS NOT NULL",
          "SELECT Owner, COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' GROUP BY Owner",
          "SELECT COUNT(*) FROM Document_Objects d WHERE d.Owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Document_Objects p ON d.Document_Object_ID = p.Parent_Document_Object_ID WHERE p.Parent_Document_Object_ID IS NULL",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d1.Document_Object_ID FROM Document_Objects d1 WHERE NOT EXISTS (SELECT 1 FROM Document_Objects d2 WHERE d2.Parent_Document_Object_ID = d1.Document_Object_ID)",
          "SELECT Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p WHERE p.Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT NULL FROM Document_Objects p WHERE p.Parent_Document_Object_ID = d.Document_Object_ID)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT DISTINCT p.Parent_Document_Object_ID FROM Document_Objects p)",
          "SELECT Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT * FROM Document_Objects p WHERE p.Parent_Document_Object_ID = d.Document_Object_ID)"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT d1.Document_Object_ID FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID WHERE d2.Parent_Document_Object_ID IS NULL",
          "SELECT Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT 1 FROM Document_Objects WHERE Parent_Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Parent_Document_Object_ID != '')",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL AND Parent_Document_Object_ID <> Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT NULL FROM Document_Objects d2 WHERE d2.Parent_Document_Object_ID = d.Document_Object_ID AND d2.Parent_Document_Object_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) AS TotalChildren FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT COUNT(Document_Object_ID), Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS ParentID, COUNT(Document_Object_ID) AS ChildDocumentsCount FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT p.Parent_Document_Object_ID, COUNT(p.Document_Object_ID) AS NumberOfChildDocuments FROM Document_Objects p GROUP BY p.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS ParentID, COUNT(*) AS CountOfChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS ChildCount FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) AS ChildDocuments FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID",
          "SELECT COUNT(Document_Object_ID) AS ChildCount, Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT p.Parent_Document_Object_ID, COUNT(p.Document_Object_ID) FROM Document_Objects p WHERE p.Parent_Document_Object_ID IS NOT NULL GROUP BY p.Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL",
          "SELECT Parent_Document_Object_ID AS ParentID, COUNT(Document_Object_ID) AS TotalChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS Child_Documents_Count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildDocuments FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections",
          "SELECT DISTINCT Collection_Name FROM Collections",
          "SELECT Collection_Name FROM Collections GROUP BY Collection_Name",
          "SELECT c.Collection_Name FROM Collections AS c",
          "SELECT Collection_Name AS Name FROM Collections",
          "SELECT Collection_Name FROM Collections ORDER BY Collection_Name",
          "SELECT * FROM Collections SELECT Collection_Name",
          "SELECT Collection_Name FROM Collections WHERE Collection_Name IS NOT NULL",
          "SELECT Collection_Name FROM Collections c",
          "SELECT Collection_Name FROM Collections WHERE Collection_Name <> ''"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections",
          "SELECT DISTINCT Collection_Name FROM Collections",
          "SELECT c.Collection_Name FROM Collections AS c",
          "SELECT Collection_Name FROM Collections GROUP BY Collection_Name",
          "SELECT Collection_Name FROM Collections ORDER BY Collection_Name",
          "SELECT Collection_Name FROM Collections WHERE Collection_Name IS NOT NULL",
          "SELECT Collection_Name FROM Collections c",
          "SELECT * FROM Collections SELECT Collection_Name",
          "SELECT Collection_Name AS Name FROM Collections",
          "SELECT Collection_Name FROM Collections c ORDER BY Collection_Name ASC"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name LIKE 'Best'",
          "SELECT description FROM Collections WHERE name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' LIMIT 1",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_Description IS NOT NULL",
          "SELECT Collection_Description AS Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT * FROM Collections WHERE Collection_Name = 'Best' SELECT Collection_Description",
          "SELECT TOP 1 Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name LIKE 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' COLLATE NOCASE",
          "SELECT Collection_Description FROM Collections WHERE UPPER(Collection_Name) = 'BEST'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name IN ('Best')",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' AND Collection_Description IS NOT NULL",
          "SELECT DISTINCT Collection_Description FROM Collections WHERE Collection_Name = 'Best'",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' ORDER BY Collection_Description",
          "SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best' LIMIT 1"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT parent.Collection_Name FROM Collections AS child JOIN Collections AS parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT B.Collection_Name FROM Collections A INNER JOIN Collections B ON A.Parent_Collection_ID = B.Collection_ID WHERE A.Collection_Name = 'Nice'",
          "SELECT parent_col.Collection_Name FROM Collections child_col, Collections parent_col WHERE child_col.Parent_Collection_ID = parent_col.Collection_ID AND child_col.Collection_Name = 'Nice'",
          "SELECT (SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')) AS Parent_Collection_Name",
          "SELECT parent.Collection_Name FROM Collections child, Collections parent WHERE child.Parent_Collection_ID = parent.Collection_ID AND child.Collection_Name = 'Nice'",
          "SELECT parent_name.Collection_Name FROM Collections child_name JOIN Collections parent_name ON child_name.Parent_Collection_ID = parent_name.Collection_ID WHERE child_name.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections AS parent WHERE parent.Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')",
          "SELECT parent.Collection_Name FROM Collections parent JOIN Collections child ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT (SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')) AS Parent_Name",
          "SELECT parent.Collection_Name FROM Collections AS parent INNER JOIN Collections AS child ON parent.Collection_ID = child.Parent_Collection_ID WHERE child.Collection_Name = 'Nice'"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT parent.Collection_Name FROM Collections AS child JOIN Collections AS parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT p.Collection_Name FROM Collections p INNER JOIN Collections c ON c.Parent_Collection_ID = p.Collection_ID WHERE c.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections parent, Collections child WHERE child.Parent_Collection_ID = parent.Collection_ID AND child.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections child, Collections parent WHERE child.Parent_Collection_ID = parent.Collection_ID AND child.Collection_Name = 'Nice'",
          "SELECT p.Collection_Name FROM Collections c, Collections p WHERE c.Parent_Collection_ID = p.Collection_ID AND c.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections AS parent JOIN Collections AS child ON parent.Collection_ID = child.Parent_Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT p.Collection_Name FROM Collections AS p JOIN Collections AS c ON p.Collection_ID = c.Parent_Collection_ID WHERE c.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections parent JOIN Collections child ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'",
          "SELECT p.Collection_Name FROM Collections c JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE c.Collection_Name = 'Nice'",
          "SELECT parent.Collection_Name FROM Collections AS parent INNER JOIN Collections AS child ON parent.Collection_ID = child.Parent_Collection_ID WHERE child.Collection_Name = 'Nice'"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT C.Collection_Name FROM Collections C LEFT JOIN Collections P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Parent_Collection_ID IS NULL",
          "SELECT name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)",
          "SELECT C.Collection_Name FROM Collections C WHERE NOT EXISTS (SELECT 1 FROM Collections P WHERE P.Parent_Collection_ID = C.Collection_ID)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL GROUP BY Parent_Collection_ID)",
          "SELECT Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT DISTINCT C.Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P)",
          "SELECT Collection_Name FROM Collections WHERE NOT EXISTS (SELECT NULL FROM Collections P WHERE P.Parent_Collection_ID = Collections.Collection_ID)"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections C1 WHERE NOT EXISTS (SELECT 1 FROM Collections C2 WHERE C2.Parent_Collection_ID = C1.Collection_ID)",
          "SELECT C.Collection_Name FROM Collections C LEFT JOIN Collections P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Parent_Collection_ID IS NULL",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections)",
          "SELECT DISTINCT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE NOT Collection_ID IN (SELECT Parent_Collection_ID FROM Collections)",
          "SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P WHERE P.Parent_Collection_ID IS NOT NULL)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)",
          "SELECT DISTINCT C.Collection_Name FROM Collections C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections P)",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d1.Parent_Document_Object_ID FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Parent_Document_Object_ID HAVING COUNT(d2.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID AS DocumentID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1",
          "SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d INNER JOIN Document_Objects d2 ON d.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d2.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d1.Parent_Document_Object_ID FROM Document_Objects d1 WHERE EXISTS (SELECT 1 FROM Document_Objects d2 WHERE d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d2.Parent_Document_Object_ID HAVING COUNT(d2.Document_Object_ID) > 1)"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1",
          "SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)",
          "SELECT p.Parent_Document_Object_ID FROM Document_Objects p JOIN Document_Objects c ON p.Document_Object_ID = c.Parent_Document_Object_ID GROUP BY p.Parent_Document_Object_ID HAVING COUNT(c.Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING ChildCount > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(DISTINCT Document_Object_ID) > 1",
          "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(Collection_ID) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) AS ChildCount FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(1) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections c1 JOIN Collections c2 ON c1.Collection_ID = c2.Parent_Collection_ID WHERE c2.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name LIKE 'Best')",
          "SELECT COUNT(*) FROM Collections c WHERE EXISTS (SELECT 1 FROM Collections p WHERE p.Collection_ID = c.Parent_Collection_ID AND p.Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best' LIMIT 1)",
          "SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections c INNER JOIN Collections p ON c.Parent_Collection_ID = p.Collection_ID WHERE p.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Collections AS Parent JOIN Collections AS Child ON Parent.Collection_ID = Child.Parent_Collection_ID WHERE Parent.Collection_Name = 'Best'",
          "SELECT COUNT(Child.Collection_ID) FROM Collections Parent INNER JOIN Collections Child ON Parent.Collection_ID = Child.Parent_Collection_ID WHERE Parent.Collection_Name = 'Best'",
          "SELECT COUNT(1) FROM Collections Parent, Collections Child WHERE Parent.Collection_ID = Child.Parent_Collection_ID AND Parent.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Child.Collection_ID) FROM Collections AS Parent JOIN Collections AS Child ON Parent.Collection_ID = Child.Parent_Collection_ID WHERE Parent.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(Child.Collection_ID) FROM Collections Child WHERE Child.Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections Child WHERE EXISTS (SELECT 1 FROM Collections Parent WHERE Parent.Collection_ID = Child.Parent_Collection_ID AND Parent.Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(Child.Collection_ID) FROM Collections Child JOIN Collections Parent ON Child.Parent_Collection_ID = Parent.Collection_ID WHERE Parent.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Collections Child JOIN Collections Parent ON Child.Parent_Collection_ID = Parent.Collection_ID AND Parent.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Subset_Members DSM, Document_Objects DO WHERE DSM.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT related_doc_id FROM (SELECT Related_Document_Object_ID as related_doc_id FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT DISTINCT Related_Document_Object_ID FROM Document_Subset_Members INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects AS DO INNER JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom') ORDER BY Related_Document_Object_ID",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom' ORDER BY DSM.Related_Document_Object_ID"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Subset_Members DSM, Document_Objects DO WHERE DSM.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT related_ids.Related_Document_Object_ID FROM Document_Objects AS docs INNER JOIN Document_Subset_Members AS related_ids ON docs.Document_Object_ID = related_ids.Document_Object_ID WHERE docs.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT related.Related_Document_Object_ID FROM Document_Objects owner JOIN Document_Subset_Members related ON owner.Document_Object_ID = related.Document_Object_ID WHERE owner.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT DSM.Related_Document_Object_ID FROM Document_Objects AS DO INNER JOIN Document_Subset_Members AS DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(csm.Collection_ID) AS Num_Collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS Collection_Count FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name",
          "SELECT a.Collection_Subset_ID, a.Collection_Subset_Name, COUNT(b.Collection_ID) AS Total_Collections FROM Collection_Subsets a LEFT JOIN Collection_Subset_Members b ON a.Collection_Subset_ID = b.Collection_Subset_ID GROUP BY a.Collection_Subset_ID, a.Collection_Subset_Name",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = cs.Collection_Subset_ID) AS Collection_Count FROM Collection_Subsets cs",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = cs.Collection_Subset_ID) FROM Collection_Subsets cs",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(*) AS Num_Collections FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subsets JOIN Collection_Subset_Members USING(Collection_Subset_ID) GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT csm.Collection_ID) AS Collection_Count FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) FROM Collection_Subsets LEFT JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(csm.Collection_ID) FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) AS Num_Collections FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS Collection_Count FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name",
          "SELECT a.Collection_Subset_ID, a.Collection_Subset_Name, COUNT(b.Collection_ID) AS Total_Collections FROM Collection_Subsets a LEFT JOIN Collection_Subset_Members b ON a.Collection_Subset_ID = b.Collection_Subset_ID GROUP BY a.Collection_Subset_ID, a.Collection_Subset_Name",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subsets JOIN Collection_Subset_Members USING (Collection_Subset_ID) GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = CS.Collection_Subset_ID) AS Num_Collections FROM Collection_Subsets CS",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(*) AS Num_Collections FROM Collection_Subsets, Collection_Subset_Members WHERE Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(DISTINCT CSM.Collection_ID) AS Collection_Count FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name",
          "SELECT DISTINCT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) OVER (PARTITION BY CS.Collection_Subset_ID) AS Num_Collections FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID",
          "SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Collection_Count FROM Collection_Subsets LEFT JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name",
          "SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name HAVING COUNT(CSM.Collection_ID) > 0"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Parent_Document_Object_ID) AS child_count FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY child_count DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID AS Document_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1",
          "SELECT d.Parent_Document_Object_ID, COUNT(d.Document_Object_ID) AS TotalChildren FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID ORDER BY TotalChildren DESC LIMIT 1",
          "SELECT TOP 1 Parent_Document_Object_ID, COUNT(Document_Object_ID) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY ChildCount DESC",
          "SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Document_Objects GROUP BY Parent_Document_Object_ID) AS SubQuery)",
          "SELECT Document_Object_ID, COUNT(*) AS ChildCount FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY ChildCount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Parent_Document_Object_ID AS DocID, COUNT(*) AS Children FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY Children DESC LIMIT 1",
          "SELECT d1.Parent_Document_Object_ID, COUNT(d2.Document_Object_ID) AS NumberOfChildren FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Parent_Document_Object_ID = d2.Document_Object_ID GROUP BY d1.Parent_Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID, COUNT(*) AS TotalChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY TotalChildren DESC LIMIT 1",
          "SELECT Parent_Document_Object_ID AS DocumentID, COUNT(Document_Object_ID) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY ChildCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Parent_Document_Object_ID, COUNT(*) AS children_count FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d1.Document_Object_ID, COUNT(d2.Parent_Document_Object_ID) AS num_children FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID",
          "SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS children FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d1.Document_Object_ID AS doc_id, COUNT(d2.Parent_Document_Object_ID) AS children_count FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID",
          "SELECT Document_Object_ID, (SELECT COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID = Document_Objects.Document_Object_ID) AS children_count FROM Document_Objects",
          "SELECT d1.Document_Object_ID, IFNULL(COUNT(d2.Parent_Document_Object_ID), 0) AS children_count FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID",
          "SELECT Parent_Document_Object_ID AS parent_id, COUNT(*) AS total_children FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d1.Document_Object_ID, COUNT(d2.Parent_Document_Object_ID) AS children FROM Document_Objects d1 LEFT OUTER JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Parent_Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID",
          "SELECT d1.Document_Object_ID, COUNT(d2.Parent_Document_Object_ID) AS NumberOfChildren FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS related_count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY related_count ASC LIMIT 1",
          "SELECT D.Document_Object_ID, MIN(COUNT(D.Related_Document_Object_ID)) FROM Document_Subset_Members D GROUP BY D.Document_Object_ID",
          "SELECT TOP 1 Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(Related_Document_Object_ID)",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Num_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) = (SELECT MIN(COUNT(Related_Document_Object_ID)) FROM Document_Subset_Members GROUP BY Document_Object_ID)",
          "SELECT A.Document_Object_ID, A.Related_Count FROM (SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID) A WHERE A.Related_Count = (SELECT MIN(B.Related_Count) FROM (SELECT COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID) B)",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS related_count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY related_count LIMIT 1",
          "SELECT Document_Object_ID, COUNT(*) AS CountOfRelated FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY CountOfRelated ASC LIMIT 1",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(Related_Document_Object_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS related_documents FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY related_documents ASC LIMIT 1",
          "SELECT Document_Object_ID, MIN(COUNT(Related_Document_Object_ID)) OVER (PARTITION BY Document_Object_ID) AS Min_Related FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY Min_Related ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT TOP 1 Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Documents_in_Collections GROUP BY Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections AS d GROUP BY d.Document_Object_ID ORDER BY COUNT(d.Document_Object_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Document_Object_ID FROM (SELECT Document_Object_ID, COUNT(*) AS doc_count FROM Documents_in_Collections GROUP BY Document_Object_ID) AS subquery ORDER BY doc_count ASC LIMIT 1",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC FETCH FIRST ROW ONLY",
          "WITH CountedDocs AS (SELECT Document_Object_ID, COUNT(*) AS NumberOfDocs FROM Documents_in_Collections GROUP BY Document_Object_ID) SELECT Document_Object_ID FROM CountedDocs WHERE NumberOfDocs = (SELECT MIN(NumberOfDocs) FROM CountedDocs)",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT MIN(Document_Object_ID) KEEP (DENSE_RANK FIRST ORDER BY COUNT(*) ASC) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS num_related_documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING num_related_documents BETWEEN 2 AND 4",
          "SELECT d.Document_Object_ID, COUNT(r.Related_Document_Object_ID) AS Count_Related FROM Document_Objects d JOIN Document_Subset_Members r ON d.Document_Object_ID = r.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(r.Related_Document_Object_ID) BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(*) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count >= 2 AND Related_Count <= 4",
          "SELECT d.Document_Object_ID, COUNT(r.Related_Document_Object_ID) FROM Document_Objects d INNER JOIN Document_Subset_Members r ON d.Document_Object_ID = r.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(r.Related_Document_Object_ID) > 1 AND COUNT(r.Related_Document_Object_ID) < 5",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) > 1 AND COUNT(Related_Document_Object_ID) < 5",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Documents >= 2 AND Related_Documents <= 4",
          "SELECT d.Document_Object_ID, COUNT(r.Related_Document_Object_ID) AS Total_Related FROM Document_Objects d LEFT JOIN Document_Subset_Members r ON d.Document_Object_ID = r.Document_Object_ID GROUP BY d.Document_Object_ID HAVING Total_Related BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS CountOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING CountOfRelatedDocuments >= 2 AND CountOfRelatedDocuments <= 4",
          "SELECT d.Document_Object_ID, COUNT(r.Related_Document_Object_ID) AS RelatedCount FROM Document_Objects d, Document_Subset_Members r WHERE d.Document_Object_ID = r.Document_Object_ID GROUP BY d.Document_Object_ID HAVING RelatedCount BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING NumberOfRelatedDocuments > 1 AND NumberOfRelatedDocuments < 5"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4",
          "SELECT d.Document_Object_ID, COUNT(d.Related_Document_Object_ID) AS Count_Related FROM Document_Subset_Members d GROUP BY d.Document_Object_ID HAVING COUNT(d.Related_Document_Object_ID) >= 2 AND COUNT(d.Related_Document_Object_ID) <= 4",
          "SELECT Document_Object_ID, COUNT(*) AS Related_Documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Documents BETWEEN 2 AND 4",
          "SELECT a.Document_Object_ID, COUNT(b.Related_Document_Object_ID) FROM Document_Subset_Members a JOIN Document_Subset_Members b ON a.Document_Object_ID = b.Document_Object_ID GROUP BY a.Document_Object_ID HAVING COUNT(b.Related_Document_Object_ID) BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) > 1 AND COUNT(Related_Document_Object_ID) < 5",
          "SELECT DISTINCT Document_Object_ID, (SELECT COUNT(*) FROM Document_Subset_Members WHERE Document_Object_ID = outer.Document_Object_ID) AS Count_Related FROM Document_Subset_Members outer HAVING Count_Related BETWEEN 2 AND 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Total_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Total_Related > 1 AND Total_Related < 5",
          "SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(*) IN (2, 3, 4)",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count >= 2 AND Related_Count <= 4",
          "SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Count_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Count_Related > 1 AND Count_Related < 5"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT D2.Owner FROM Document_Objects AS D1 JOIN Document_Subset_Members AS DSM ON D1.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Objects AS D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT D.Owner FROM Document_Objects D, Document_Subset_Members DSM WHERE D.Document_Object_ID = DSM.Related_Document_Object_ID AND DSM.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT DSM.Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Braeden')",
          "SELECT DISTINCT D2.Owner FROM Document_Objects D1, Document_Subset_Members DSM, Document_Objects D2 WHERE D1.Document_Object_ID = DSM.Document_Object_ID AND DSM.Related_Document_Object_ID = D2.Document_Object_ID AND D1.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT D2.Owner FROM Document_Objects D1 INNER JOIN Document_Subset_Members DSM ON D1.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Objects D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT D2.Owner FROM Document_Objects D1 INNER JOIN Document_Subset_Members DSM ON D1.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Objects D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT d.Owner FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID WHERE m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) AND Owner <> 'Braeden'",
          "SELECT DISTINCT d.Owner FROM Document_Objects d, Document_Subset_Members m WHERE d.Document_Object_ID = m.Related_Document_Object_ID AND m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT m.Related_Document_Object_ID FROM Document_Subset_Members m JOIN Document_Objects d ON m.Document_Object_ID = d.Document_Object_ID WHERE d.Owner = 'Braeden')",
          "SELECT DISTINCT d.Owner FROM Document_Objects d INNER JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Related_Document_Object_ID INNER JOIN Document_Objects b ON m.Document_Object_ID = b.Document_Object_ID WHERE b.Owner = 'Braeden'",
          "SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) AND Owner NOT IN ('Braeden')",
          "SELECT DISTINCT d.Owner FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members m WHERE m.Related_Document_Object_ID = d.Document_Object_ID AND m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT m.Related_Document_Object_ID FROM Document_Subset_Members m, Document_Objects b WHERE m.Document_Object_ID = b.Document_Object_ID AND b.Owner = 'Braeden')",
          "SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT m.Related_Document_Object_ID FROM Document_Subset_Members m JOIN Document_Objects b ON m.Document_Object_ID = b.Document_Object_ID WHERE b.Owner = 'Braeden')"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subsets.Document_Subset_Name FROM Document_Objects INNER JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Objects.Owner = 'Braeden'",
          "SELECT Document_Subsets.Document_Subset_Name FROM Document_Objects, Document_Subset_Members, Document_Subsets WHERE Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID AND Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Objects.Owner = 'Braeden' GROUP BY Document_Subsets.Document_Subset_Name",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects AS do, Document_Subset_Members AS dsm, Document_Subsets AS ds WHERE do.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do INNER JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do LEFT JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subsets.Document_Subset_Name FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Objects.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do CROSS JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID CROSS JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subsets.Document_Subset_Name FROM Document_Objects, Document_Subset_Members, Document_Subsets WHERE Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID AND Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Objects.Owner = 'Braeden'"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))",
          "SELECT DISTINCT name FROM Document_Subsets ds INNER JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID INNER JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets AS ds, Document_Subset_Members AS dsm, Document_Objects AS do WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID AND dsm.Document_Object_ID = do.Document_Object_ID AND do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden'",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID WHERE dsm.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE EXISTS (SELECT 1 FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Braeden' AND Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID)",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do, Document_Subset_Members dsm, Document_Subsets ds WHERE do.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND do.Owner = 'Braeden'",
          "SELECT DISTINCT Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden' ORDER BY Document_Subset_Name",
          "SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds, Document_Subset_Members dsm, Document_Objects do WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID AND dsm.Document_Object_ID = do.Document_Object_ID AND do.Owner = 'Braeden' GROUP BY ds.Document_Subset_Name"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name",
          "SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS Num_Documents FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) FROM Document_Subsets ds, Document_Subset_Members dsm WHERE ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name",
          "SELECT a.Document_Subset_ID, a.Document_Subset_Name, COUNT(DISTINCT b.Document_Object_ID) AS Total_Documents FROM Document_Subsets a LEFT JOIN Document_Subset_Members b ON a.Document_Subset_ID = b.Document_Subset_ID GROUP BY a.Document_Subset_ID, a.Document_Subset_Name",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subsets JOIN Document_Subset_Members USING (Document_Subset_ID) GROUP BY Document_Subset_ID, Document_Subset_Name",
          "SELECT d.Document_Subset_ID, d.Document_Subset_Name, COUNT(DISTINCT m.Document_Object_ID) AS Document_Count FROM Document_Subsets d LEFT JOIN Document_Subset_Members m ON d.Document_Subset_ID = m.Document_Subset_ID GROUP BY d.Document_Subset_ID, d.Document_Subset_Name",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name ORDER BY Document_Subset_ID",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets AS ds INNER JOIN Document_Subset_Members AS dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS Document_Count FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name HAVING COUNT(DISTINCT Document_Object_ID) > 0",
          "SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets ds LEFT OUTER JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT dic.Document_Object_ID) AS Document_Count FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) AS Num_Documents FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID INNER JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT doc.Document_Object_ID) AS TotalDocuments FROM Collection_Subsets cs, Collection_Subset_Members csm, Collections col, Documents_in_Collections doc WHERE cs.Collection_Subset_ID = csm.Collection_Subset_ID AND csm.Collection_ID = col.Collection_ID AND col.Collection_ID = doc.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT A.Collection_Subset_ID, A.Collection_Subset_Name, COUNT(DISTINCT B.Document_Object_ID) FROM Collection_Subsets A LEFT JOIN Collection_Subset_Members C ON A.Collection_Subset_ID = C.Collection_Subset_ID LEFT JOIN Collections D ON C.Collection_ID = D.Collection_ID LEFT JOIN Documents_in_Collections B ON D.Collection_ID = B.Collection_ID GROUP BY A.Collection_Subset_ID, A.Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT dic.Document_Object_ID) FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID LEFT JOIN Collections c ON csm.Collection_ID = c.Collection_ID LEFT JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT doc_id.Document_Object_ID) AS DocumentCount FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections col ON csm.Collection_ID = col.Collection_ID JOIN Documents_in_Collections doc_id ON col.Collection_ID = doc_id.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT dic.Document_Object_ID) AS DocumentCount FROM Collection_Subsets cs INNER JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID INNER JOIN Collections c ON csm.Collection_ID = c.Collection_ID INNER JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name",
          "SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) AS DocumentCount FROM Collection_Subsets, Collection_Subset_Members, Collections, Documents_in_Collections WHERE Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID AND Collection_Subset_Members.Collection_ID = Collections.Collection_ID AND Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name",
          "SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT dic.Document_Object_ID) AS DocumentCount FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID LEFT JOIN Collections c ON csm.Collection_ID = c.Collection_ID LEFT JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING DocumentCount = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT Document_Object_ID) AS Count FROM Document_Subset_Members GROUP BY Document_Subset_ID) AS MaxCount)",
          "SELECT TOP 1 DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC FETCH FIRST 1 ROWS ONLY",
          "WITH DocumentCounts AS (SELECT Document_Subset_ID, COUNT(DISTINCT Document_Object_ID) AS TotalDocuments FROM Document_Subset_Members GROUP BY Document_Subset_ID) SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, DC.TotalDocuments FROM Document_Subsets DS JOIN DocumentCounts DC ON DS.Document_Subset_ID = DC.Document_Subset_ID ORDER BY DC.TotalDocuments DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY COUNT(DISTINCT DSM.Document_Object_ID) DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS LEFT OUTER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(DISTINCT DSM.Document_Object_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT Document_Object_ID) AS Count FROM Document_Subset_Members GROUP BY Document_Subset_ID) AS MaxCount)",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets AS DS JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS DocumentCount FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID ORDER BY COUNT(DISTINCT DSM.Document_Object_ID) DESC LIMIT 1",
          "SELECT TOP 1 DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS TotalDocuments FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY TotalDocuments DESC",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(DISTINCT DSM.Document_Object_ID) = (SELECT MAX(COUNT(DISTINCT Document_Object_ID)) FROM Document_Subset_Members GROUP BY Document_Subset_ID)",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT OUTER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1",
          "SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')",
          "SELECT DSM.Document_Object_ID FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT document_object_id FROM document_subset_members INNER JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subsets.document_subset_name = 'Best for 2000'",
          "SELECT DSM.Document_Object_ID FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT document_object_id FROM document_subset_members, document_subsets WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id AND document_subsets.document_subset_name = 'Best for 2000'",
          "SELECT DSM.Document_Object_ID FROM Document_Subsets DS RIGHT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT document_object_id FROM document_subset_members DSM LEFT JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
          "SELECT DISTINCT DSM.Document_Object_ID FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT DISTINCT document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'",
          "SELECT document_object_id FROM Document_Subset_Members INNER JOIN Document_Subsets ON Document_Subset_Members.document_subset_id = Document_Subsets.document_subset_id WHERE Document_Subsets.document_subset_name = 'Best for 2000'",
          "SELECT DSM.document_object_id FROM document_subset_members DSM, document_subsets DS WHERE DSM.document_subset_id = DS.document_subset_id AND DS.document_subset_name = 'Best for 2000'",
          "SELECT document_object_id FROM Document_Subset_Members, Document_Subsets WHERE Document_Subset_Members.document_subset_id = Document_Subsets.document_subset_id AND Document_Subsets.document_subset_name = 'Best for 2000'",
          "SELECT DSM.document_object_id FROM Document_Subset_Members AS DSM JOIN Document_Subsets AS DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
          "SELECT document_object_id FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.document_subset_id = DS.document_subset_id AND DS.document_subset_name = 'Best for 2000'",
          "SELECT DSM.document_object_id FROM Document_Subset_Members DSM INNER JOIN Document_Subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
          "SELECT document_object_id FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.document_subset_id = Document_Subsets.document_subset_id WHERE Document_Subsets.document_subset_name = 'Best for 2000'",
          "SELECT document_object_id FROM Document_Subset_Members DSM, Document_Subsets DS WHERE DSM.document_subset_id = DS.document_subset_id AND DS.document_subset_name = 'Best for 2000'",
          "SELECT DSM.document_object_id FROM Document_Subset_Members AS DSM, Document_Subsets AS DS WHERE DSM.document_subset_id = DS.document_subset_id AND DS.document_subset_name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_Name, DSM.Document_Object_ID FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT dsub.Document_Subset_Name, dsmem.Document_Object_ID FROM Document_Subsets AS dsub JOIN Document_Subset_Members AS dsmem ON dsub.Document_Subset_ID = dsmem.Document_Subset_ID",
          "SELECT dsub.Document_Subset_Name, dsmem.Document_Object_ID FROM Document_Subsets dsub, Document_Subset_Members dsmem WHERE dsub.Document_Subset_ID = dsmem.Document_Subset_ID",
          "SELECT DS.Document_Subset_Name, DSM.Document_Object_ID FROM Document_Subsets DS, Document_Subset_Members DSM WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_Name AS Subset_Name, Document_Subset_Members.Document_Object_ID AS Doc_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT DISTINCT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members USING (Document_Subset_ID)",
          "SELECT DS.Document_Subset_Name, DSM.Document_Object_ID FROM Document_Subsets AS DS INNER JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID",
          "SELECT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subsets FULL OUTER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DS.Document_Subset_Name, DO.Document_Object_ID FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID",
          "SELECT Document_Subsets.Document_Subset_Name, Document_Objects.Document_Object_ID FROM Document_Subsets INNER JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID",
          "SELECT dsub.Document_Subset_Name, dobj.Document_Object_ID FROM Document_Subsets dsub, Document_Subset_Members dsm, Document_Objects dobj WHERE dsub.Document_Subset_ID = dsm.Document_Subset_ID AND dsm.Document_Object_ID = dobj.Document_Object_ID",
          "SELECT DS.Document_Subset_Name AS Subset_Name, DO.Document_Object_ID AS Document_ID FROM Document_Subsets AS DS JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects AS DO ON DSM.Document_Object_ID = DO.Document_Object_ID",
          "SELECT A.Document_Subset_Name, B.Document_Object_ID FROM Document_Subsets A, Document_Subset_Members C, Document_Objects B WHERE A.Document_Subset_ID = C.Document_Subset_ID AND C.Document_Object_ID = B.Document_Object_ID",
          "SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID",
          "SELECT DISTINCT DS.Document_Subset_Name, DO.Document_Object_ID FROM Document_Subsets DS, Document_Subset_Members DSM, Document_Objects DO WHERE DS.Document_Subset_ID = DSM.Document_Subset_ID AND DSM.Document_Object_ID = DO.Document_Object_ID",
          "SELECT DS.Document_Subset_Name, DO.Document_Object_ID FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID INNER JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID",
          "SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members USING (Document_Subset_ID) JOIN Document_Objects USING (Document_Object_ID)",
          "SELECT DS.Document_Subset_Name AS 'Subset Name', DO.Document_Object_ID AS 'Document ID' FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID ORDER BY DS.Document_Subset_Name"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name FROM Collections C JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT DISTINCT Collections.Collection_Name FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID INNER JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections, Documents_in_Collections, Document_Objects WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID AND Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom'",
          "SELECT C.Collection_Name FROM Collections AS C, Documents_in_Collections AS DC, Document_Objects AS DO WHERE C.Collection_ID = DC.Collection_ID AND DC.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT C.Collection_Name FROM Collections C, Documents_in_Collections DC, Document_Objects DO WHERE C.Collection_ID = DC.Collection_ID AND DC.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT C.Collection_Name FROM Collections C INNER JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID INNER JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom' ORDER BY C.Collection_Name",
          "SELECT DISTINCT C.Collection_Name FROM Collections C JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT C.Collection_Name FROM Collections C LEFT JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID LEFT JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT DC.Collection_ID FROM Documents_in_Collections DC JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom')"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name FROM Collections C JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT Collections.Collection_Name FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID INNER JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections, Documents_in_Collections, Document_Objects WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID AND Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom'",
          "SELECT DISTINCT Collections.Collection_Name FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE EXISTS (SELECT 1 FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Document_Objects.Owner = 'Ransom')",
          "SELECT C.Collection_Name FROM Collections AS C, Documents_in_Collections AS DC, Document_Objects AS DO WHERE C.Collection_ID = DC.Collection_ID AND DC.Document_Object_ID = DO.Document_Object_ID AND DO.Owner = 'Ransom'",
          "SELECT TOP 1 Collection_Name FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID INNER JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))",
          "SELECT C.Collection_Name FROM Collections C INNER JOIN Documents_in_Collections DC ON C.Collection_ID = DC.Collection_ID INNER JOIN Document_Objects DO ON DC.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom' ORDER BY C.Collection_Name"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(Collection_ID) AS num_collections, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(d.Collection_ID) AS total_collections FROM Documents_in_Collections d GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(*) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(DISTINCT Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(DISTINCT Collection_ID) AS Collection_Count, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS Num_Collections FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY Collection_Count DESC"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS CollectionCount FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(*) AS NumOfCollections FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(d.Collection_ID) AS CollectionsCount FROM Documents_in_Collections d GROUP BY d.Document_Object_ID",
          "SELECT COUNT(Collection_ID) AS TotalCollections, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT d.Document_Object_ID, COUNT(*) FROM Documents_in_Collections d GROUP BY d.Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT COUNT(*) AS CollectionCount, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) AS NumberOfCollections FROM Documents_in_Collections GROUP BY Document_Object_ID",
          "SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(Collection_ID) > 0"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections AS doc JOIN Collections AS col ON doc.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC, Collections COL WHERE DOC.Collection_ID = COL.Collection_ID AND COL.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(*) FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections AS doc JOIN Collections AS col ON doc.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(Documents_in_Collections.Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) AS NumberOfDocuments FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT doc_id FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections AS d JOIN Collections AS c ON d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' ORDER BY d.Document_Object_ID",
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections AS doc JOIN Collections AS col ON doc.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC INNER JOIN Collections COL ON DOC.Collection_ID = COL.Collection_ID WHERE COL.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections DOC, Collections COL WHERE DOC.Collection_ID = COL.Collection_ID AND COL.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT COUNT(DOC.Document_Object_ID) FROM Documents_in_Collections AS DOC JOIN Collections AS COL ON DOC.Collection_ID = COL.Collection_ID WHERE COL.Collection_Name = 'Best' GROUP BY COL.Collection_Name",
          "SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT DOC.Document_Object_ID) FROM Documents_in_Collections DOC LEFT JOIN Collections COL ON DOC.Collection_ID = COL.Collection_ID WHERE COL.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS NumberOfDocuments FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID, C.Collection_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS DocCount FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_ID, Collection_Name ORDER BY DocCount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Collections.Collection_Name, Collections.Collection_ID, COUNT(Documents_in_Collections.Document_Object_ID) AS DocumentCount FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID, Collections.Collection_Name ORDER BY DocumentCount DESC",
          "SELECT Collection_Name, Collection_ID, COUNT(*) AS TotalDocuments FROM Collections LEFT JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_ID, Collection_Name HAVING COUNT(*) = (SELECT MAX(DocCount) FROM (SELECT COUNT(*) AS DocCount FROM Documents_in_Collections GROUP BY Collection_ID))",
          "SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS NumberOfDocuments FROM Collections AS C LEFT JOIN Documents_in_Collections AS D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID, C.Collection_Name HAVING COUNT(D.Document_Object_ID) = (SELECT MAX(Counted) FROM (SELECT COUNT(Document_Object_ID) AS Counted FROM Documents_in_Collections GROUP BY Collection_ID) AS SubQuery)",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) FROM Collections JOIN Documents_in_Collections USING(Collection_ID) GROUP BY Collection_ID, Collection_Name ORDER BY COUNT(Document_Object_ID) DESC LIMIT 1",
          "WITH DocumentCounts AS (SELECT Collection_ID, COUNT(Document_Object_ID) AS TotalDocuments FROM Documents_in_Collections GROUP BY Collection_ID) SELECT Collections.Collection_Name, Collections.Collection_ID, DocumentCounts.TotalDocuments FROM Collections JOIN DocumentCounts ON Collections.Collection_ID = DocumentCounts.Collection_ID ORDER BY TotalDocuments DESC LIMIT 1",
          "SELECT Collection_Name, Collection_ID, DocumentCount FROM (SELECT Collections.Collection_Name, Collections.Collection_ID, COUNT(Documents_in_Collections.Document_Object_ID) AS DocumentCount, RANK() OVER (ORDER BY COUNT(Documents_in_Collections.Document_Object_ID) DESC) AS rank FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID, Collections.Collection_Name) AS Ranked WHERE rank = 1",
          "SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS NumberOfDocuments FROM Collections, Documents_in_Collections WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collection_ID, Collection_Name ORDER BY NumberOfDocuments DESC LIMIT 1",
          "SELECT C.Collection_Name, C.Collection_ID, (SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = C.Collection_ID) AS DocumentCount FROM Collections C ORDER BY DocumentCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(D.Document_Object_ID) AS Document_Count FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT Collection_ID, Collection_Name, MAX(Document_Count) FROM (SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Document_Count FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name) AS SubQuery",
          "SELECT TOP 1 Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Num_Documents FROM Collections INNER JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name ORDER BY Num_Documents DESC",
          "SELECT Collection_ID, Collection_Name, COUNT(Document_Object_ID) AS Document_Count FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collection_Name = 'Best' GROUP BY Collection_ID, Collection_Name HAVING COUNT(Document_Object_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Document_Object_ID) AS Count FROM Documents_in_Collections GROUP BY Collection_ID) AS Counts)",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(*) AS Total_Documents FROM Collections C, Documents_in_Collections D WHERE C.Collection_ID = D.Collection_ID AND C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name ORDER BY Total_Documents DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT * FROM (SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Document_Count FROM Collections LEFT JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name) AS Result ORDER BY Document_Count DESC LIMIT 1",
          "SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Document_Count FROM Collections LEFT JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT Collection_ID, Collection_Name, Document_Count FROM (SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Document_Count FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name) AS SubQuery ORDER BY Document_Count DESC LIMIT 1",
          "SELECT C.Collection_ID, C.Collection_Name, COUNT(D.Document_Object_ID) AS Document_Count FROM Collections AS C INNER JOIN Documents_in_Collections AS D ON C.Collection_ID = D.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name ORDER BY Document_Count DESC LIMIT 1",
          "SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS Document_Count FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name ORDER BY COUNT(Documents_in_Collections.Document_Object_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT D.Document_Object_ID FROM Document_Objects D JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID JOIN Documents_in_Collections DIC ON D.Document_Object_ID = DIC.Document_Object_ID JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT D.Document_Object_ID FROM Document_Objects D, Document_Subset_Members DSM, Document_Subsets DS, Documents_in_Collections DIC, Collections C WHERE D.Document_Object_ID = DSM.Document_Object_ID AND DSM.Document_Subset_ID = DS.Document_Subset_ID AND D.Document_Object_ID = DIC.Document_Object_ID AND DIC.Collection_ID = C.Collection_ID AND DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best'",
          "SELECT DISTINCT D.Document_Object_ID FROM Document_Objects D INNER JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID INNER JOIN Documents_in_Collections DIC ON D.Document_Object_ID = DIC.Document_Object_ID INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best'",
          "SELECT D.Document_Object_ID FROM Document_Objects D WHERE EXISTS (SELECT 1 FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DSM.Document_Object_ID = D.Document_Object_ID AND DS.Document_Subset_Name = 'Best for 2000') AND EXISTS (SELECT 1 FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DIC.Document_Object_ID = D.Document_Object_ID AND C.Collection_Name = 'Best')",
          "SELECT D.Document_Object_ID FROM Document_Objects D JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Document_Object_ID JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID JOIN Documents_in_Collections DIC ON D.Document_Object_ID = DIC.Document_Object_ID JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best' GROUP BY D.Document_Object_ID",
          "SELECT D.Document_Object_ID FROM Document_Objects D WHERE D.Document_Object_ID IN (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000') AND D.Document_Object_ID IN (SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best')",
          "SELECT DISTINCT D.Document_Object_ID FROM Document_Objects D, Document_Subset_Members DSM, Document_Subsets DS, Documents_in_Collections DIC, Collections C WHERE D.Document_Object_ID = DSM.Document_Object_ID AND DSM.Document_Subset_ID = DS.Document_Subset_ID AND D.Document_Object_ID = DIC.Document_Object_ID AND DIC.Collection_ID = C.Collection_ID AND DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best' ORDER BY D.Document_Object_ID",
          "SELECT D.Document_Object_ID FROM Document_Objects D WHERE EXISTS (SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DSM.Document_Object_ID = D.Document_Object_ID AND DS.Document_Subset_Name = 'Best for 2000') AND EXISTS (SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DIC.Document_Object_ID = D.Document_Object_ID AND C.Collection_Name = 'Best') ORDER BY D.Document_Object_ID",
          "SELECT D.Document_Object_ID FROM Document_Objects D INNER JOIN Document_Subset_Members DSM ON D.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID INNER JOIN Documents_in_Collections DIC ON D.Document_Object_ID = DIC.Document_Object_ID INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DS.Document_Subset_Name = 'Best for 2000' AND C.Collection_Name = 'Best' ORDER BY D.Document_Object_ID ASC"
        ]
      ]
    },
    {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) INTERSECT SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID JOIN Documents_in_Collections dic ON do.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best')",
          "WITH SubsetIDs AS (SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000'), CollectionIDs AS (SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best') SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM SubsetIDs) AND Document_Object_ID IN (SELECT Document_Object_ID FROM CollectionIDs)",
          "SELECT DISTINCT a.Document_Object_ID FROM (SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') a JOIN (SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best') b ON a.Document_Object_ID = b.Document_Object_ID",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE EXISTS (SELECT 1 FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID) AND EXISTS (SELECT 1 FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' AND Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID)",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects INNER JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID INNER JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Collections.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members, Document_Subsets WHERE Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm, Document_Subsets ds WHERE dm.Document_Object_ID = d.Document_Object_ID AND dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' WHERE c.Collection_Name = 'Best' AND ds.Document_Subset_ID IS NULL",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm INNER JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d WHERE d.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name = 'Best') AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE dm.Document_Object_ID = d.Document_Object_ID AND ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d LEFT JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE d.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name = 'Best') AND (ds.Document_Subset_Name != 'Best for 2000' OR ds.Document_Subset_Name IS NULL)",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d WHERE EXISTS (SELECT 1 FROM Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best') AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm WHERE dm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm WHERE EXISTS (SELECT 1 FROM Document_Subsets ds WHERE dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000'))"
        ]
      ]
    },
    {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')",
          "SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND dm.Document_Object_ID = d.Document_Object_ID)",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) ds ON d.Document_Object_ID = ds.Document_Object_ID WHERE c.Collection_Name = 'Best' AND ds.Document_Object_ID IS NULL",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d LEFT JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID WHERE d.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND ds.Document_Subset_ID NOT IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') OR ds.Document_Subset_ID IS NULL",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d WHERE d.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm WHERE dm.Document_Object_ID = d.Document_Object_ID AND dm.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members ds ON d.Document_Object_ID = ds.Document_Object_ID AND ds.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') WHERE c.Collection_Name = 'Best' AND ds.Document_Object_ID IS NULL",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d WHERE d.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))",
          "SELECT d.Document_Object_ID FROM Documents_in_Collections d WHERE EXISTS (SELECT 1 FROM Collections c WHERE c.Collection_ID = d.Collection_ID AND c.Collection_Name = 'Best') AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm WHERE dm.Document_Object_ID = d.Document_Object_ID AND dm.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM INNER JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC INNER JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name LIKE 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name LIKE 'Best')",
          "SELECT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION ALL SELECT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM, Document_Subsets DS WHERE DSM.Document_Subset_ID = DS.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC, Collections C WHERE DIC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT DISTINCT DSM.Document_Object_ID FROM Document_Subset_Members DSM LEFT JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT DIC.Document_Object_ID FROM Documents_in_Collections DIC LEFT JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT DSM.Document_Object_ID FROM Document_Subset_Members DSM, Document_Subsets DS WHERE DSM.Document_Subset_ID = DS.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DIC.Document_Object_ID FROM Documents_in_Collections DIC, Collections C WHERE DIC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID AND DS.Document_Subset_Name = 'Best for 2000' UNION SELECT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000' UNION SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'",
          "SELECT DISTINCT d.Document_Object_ID FROM Document_Subset_Members d JOIN Document_Subsets ds ON d.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION ALL SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT DISTINCT a.Document_Object_ID FROM (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) a",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members dsm INNER JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections dic INNER JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members dsm, Document_Subsets ds WHERE dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections dic, Collections c WHERE dic.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') ORDER BY Document_Object_ID",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members dsm LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections dic LEFT JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'",
          "SELECT DISTINCT c2.Collection_Name FROM Collections c1, Collection_Subset_Members csm, Collections c2 WHERE c1.Collection_ID = csm.Collection_ID AND csm.Related_Collection_ID = c2.Collection_ID AND c1.Collection_Name = 'Best'",
          "SELECT c2.Collection_Name FROM Collections c1 INNER JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID INNER JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT c.Collection_Name FROM Collections c WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members csm JOIN Collections c1 ON csm.Collection_ID = c1.Collection_ID WHERE csm.Related_Collection_ID = c.Collection_ID AND c1.Collection_Name = 'Best')",
          "SELECT c2.Collection_Name FROM Collections c1, Collection_Subset_Members csm, Collections c2 WHERE c1.Collection_ID = csm.Collection_ID AND csm.Related_Collection_ID = c2.Collection_ID AND c1.Collection_Name = 'Best' ORDER BY c2.Collection_Name",
          "SELECT DISTINCT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best' ORDER BY c2.Collection_Name ASC",
          "SELECT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best' GROUP BY c2.Collection_Name",
          "SELECT c2.Collection_Name FROM Collections AS c1 JOIN Collection_Subset_Members AS csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections AS c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'",
          "SELECT DISTINCT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best' AND c2.Collection_Name <> 'Best'"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'",
          "SELECT DISTINCT c.Collection_Name FROM Collections c INNER JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID WHERE csm.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT c.Collection_Name FROM Collections c, Collection_Subset_Members csm, Collections c1 WHERE c.Collection_ID = csm.Related_Collection_ID AND csm.Collection_ID = c1.Collection_ID AND c1.Collection_Name = 'Best'",
          "SELECT c.Collection_Name FROM Collections c WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members csm JOIN Collections c1 ON csm.Collection_ID = c1.Collection_ID WHERE csm.Related_Collection_ID = c.Collection_ID AND c1.Collection_Name = 'Best')",
          "SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID JOIN Collections c1 ON csm.Collection_ID = c1.Collection_ID WHERE c1.Collection_Name = 'Best'",
          "SELECT DISTINCT c.Collection_Name FROM Collections c WHERE c.Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT c2.Collection_Name FROM Collections c1, Collection_Subset_Members csm, Collections c2 WHERE c1.Collection_ID = csm.Collection_ID AND csm.Related_Collection_ID = c2.Collection_ID AND c1.Collection_Name = 'Best'",
          "SELECT c.Collection_Name FROM Collections c INNER JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID WHERE EXISTS (SELECT * FROM Collections c1 WHERE c1.Collection_ID = csm.Collection_ID AND c1.Collection_Name = 'Best')",
          "SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID IN (SELECT Related_Collection_ID FROM Collection_Subset_Members csm JOIN Collections c1 ON csm.Collection_ID = c1.Collection_ID WHERE c1.Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1 JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(UNIQUE C2.Collection_ID) FROM Collections C1, Collection_Subset_Members CSM, Collections C2 WHERE C1.Collection_ID = CSM.Collection_ID AND CSM.Related_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT C2.Collection_ID FROM Collections C1 INNER JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID INNER JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1, Collection_Subset_Members CSM, Collections C2 WHERE C1.Collection_ID = CSM.Collection_ID AND CSM.Related_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1 LEFT JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID LEFT JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections AS C1 JOIN Collection_Subset_Members AS CSM ON C1.Collection_ID = CSM.Collection_ID JOIN Collections AS C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM (SELECT C2.Collection_ID FROM Collections C1 JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best' GROUP BY C2.Collection_ID)",
          "SELECT COUNT(DISTINCT C2.Collection_ID) FROM Collections C1 INNER JOIN Collection_Subset_Members CSM ON C1.Collection_ID = CSM.Collection_ID INNER JOIN Collections C2 ON CSM.Related_Collection_ID = C2.Collection_ID WHERE C1.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(UNIQUE csm.Related_Collection_ID) FROM Collections c INNER JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c, Collection_Subset_Members csm WHERE c.Collection_ID = csm.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Collection_ID",
          "SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collection_Subset_Members csm INNER JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members, Collections WHERE Collection_Subset_Members.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT CS.Collection_Subset_Name FROM Collections C JOIN Collection_Subset_Members CSM ON C.Collection_ID = CSM.Collection_ID JOIN Collection_Subsets CS ON CSM.Collection_Subset_ID = CS.Collection_Subset_ID WHERE C.Collection_Name = 'Best'",
          "SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets INNER JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID INNER JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS, Collection_Subset_Members CSM, Collections C WHERE CS.Collection_Subset_ID = CSM.Collection_Subset_ID AND CSM.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best'",
          "SELECT DISTINCT CS.Collection_Subset_Name FROM Collection_Subsets CS JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets AS CS JOIN Collection_Subset_Members AS CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID JOIN Collections AS C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best' ORDER BY CS.Collection_Subset_Name",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members CSM JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE CSM.Collection_Subset_ID = CS.Collection_Subset_ID AND C.Collection_Name = 'Best')",
          "SELECT TOP 1 CS.Collection_Subset_Name FROM Collection_Subsets CS INNER JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID INNER JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID LEFT JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'",
          "SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS, Collection_Subset_Members CSM, Collections C WHERE CS.Collection_Subset_ID = CSM.Collection_Subset_ID AND CSM.Collection_ID = C.Collection_ID AND C.Collection_Name = 'Best' GROUP BY CS.Collection_Subset_Name"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "infer_predictions": [
        [
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs, Collection_Subset_Members csm, Collections c WHERE cs.Collection_Subset_ID = csm.Collection_Subset_ID AND csm.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'",
          "SELECT DISTINCT cs.Collection_Subset_Name FROM Collection_Subsets cs INNER JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID INNER JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE csm.Collection_Subset_ID = cs.Collection_Subset_ID AND c.Collection_Name = 'Best')",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT csm.Collection_Subset_ID FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best')",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID WHERE csm.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID LEFT JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'",
          "SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) ORDER BY Collection_Subset_Name",
          "SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs, Collection_Subset_Members csm, Collections c WHERE cs.Collection_Subset_ID = csm.Collection_Subset_ID AND csm.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' ORDER BY cs.Collection_Subset_Name ASC"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'",
          "SELECT COUNT(id) FROM songs WHERE name LIKE '%Love%'",
          "SELECT COUNT(*) AS count FROM songs WHERE name LIKE '%Love%'",
          "SELECT COUNT(*) FROM songs WHERE name ILIKE '%Love%'",
          "SELECT COUNT(*) FROM songs WHERE UPPER(name) LIKE UPPER('%Love%')",
          "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%' COLLATE utf8_general_ci",
          "SELECT COUNT(*) FROM songs WHERE POSITION('Love' IN name) > 0",
          "SELECT COUNT(*) FROM songs WHERE INSTR(name, 'Love') > 0",
          "SELECT COUNT(*) FROM songs WHERE name REGEXP 'Love'",
          "SELECT COUNT(*) FROM songs WHERE name CONTAINS 'Love'"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name FROM songs ORDER BY name ASC",
          "SELECT name FROM songs ORDER BY name",
          "SELECT songs.name FROM songs ORDER BY songs.name ASC",
          "SELECT songs.name FROM songs ORDER BY songs.name",
          "SELECT name AS SongName FROM songs ORDER BY SongName ASC",
          "SELECT name AS SongName FROM songs ORDER BY SongName",
          "SELECT name FROM songs SORT BY name ASCENDING",
          "SELECT name FROM songs SORT BY name",
          "SELECT * FROM songs ORDER BY name ASC",
          "SELECT * FROM songs ORDER BY name"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name, language FROM songs",
          "SELECT songs.name, songs.language FROM songs",
          "SELECT s.name, s.language FROM songs s",
          "SELECT songs.name AS SongName, songs.language AS Language FROM songs",
          "SELECT name AS 'Song Name', language AS 'Language' FROM songs",
          "SELECT `name`, `language` FROM songs",
          "SELECT songs.name, songs.language FROM songs ORDER BY songs.name",
          "SELECT DISTINCT name, language FROM songs",
          "SELECT name, language FROM songs WHERE name IS NOT NULL",
          "SELECT * FROM songs SELECT name, language"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score",
          "SELECT MAX(voice_sound_quality) AS MaxQuality, MIN(voice_sound_quality) AS MinQuality FROM performance_score",
          "SELECT MAX(voice_sound_quality) AS MaximumVoiceQuality, MIN(voice_sound_quality) AS MinimumVoiceQuality FROM performance_score",
          "SELECT MAX(ps.voice_sound_quality) AS MaxQuality, MIN(ps.voice_sound_quality) AS MinQuality FROM performance_score ps",
          "SELECT MAX(voice_sound_quality) max_quality, MIN(voice_sound_quality) min_quality FROM performance_score",
          "SELECT (SELECT MAX(voice_sound_quality) FROM performance_score) AS MaxQuality, (SELECT MIN(voice_sound_quality) FROM performance_score) AS MinQuality",
          "SELECT MAX(voice_sound_quality) FROM performance_score UNION SELECT MIN(voice_sound_quality) FROM performance_score",
          "SELECT 'Max' AS Type, MAX(voice_sound_quality) AS Quality FROM performance_score UNION ALL SELECT 'Min' AS Type, MIN(voice_sound_quality) AS Quality FROM performance_score",
          "SELECT TOP 1 MAX(voice_sound_quality) AS HighestQuality, MIN(voice_sound_quality) AS LowestQuality FROM performance_score",
          "SELECT MAX(voice_sound_quality) Maximum, MIN(voice_sound_quality) Minimum FROM performance_score"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name = 'Freeway'",
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway'",
          "SELECT p.name, ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND p.name = 'Freeway'",
          "SELECT voice_sound_quality AS VoiceQuality, rhythm_tempo AS RhythmTempo, stage_presence AS StagePresence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway'",
          "SELECT TOP 1 voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway'",
          "SELECT * FROM (SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway') AS FreewayPerformance",
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps INNER JOIN participants p ON ps.participant_id = p.id WHERE p.name LIKE 'Freeway'",
          "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
          "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score AS ps JOIN participants AS p ON ps.participant_id = p.id WHERE p.name = 'Freeway'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT id, language, original_artist FROM songs WHERE name <> 'Love'",
          "SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name != 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE NOT name = 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name NOT IN ('Love')",
          "SELECT id, language, original_artist FROM songs WHERE name NOT LIKE 'Love'",
          "SELECT `id`, `language`, `original_artist` FROM `songs` WHERE `name` != 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name IS NOT 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name NOT EQUALS 'Love'",
          "SELECT id, language, original_artist FROM songs WHERE name <> 'Love' AND name IS NOT NULL",
          "SELECT id, language, original_artist FROM songs WHERE name NOT LIKE 'Love%'"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'",
          "SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation = 'All the streets of love'",
          "SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation = 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE english_translation LIKE 'All the streets of love'",
          "SELECT name AS SongName, original_artist AS Artist FROM songs WHERE english_translation = 'All the streets of love'",
          "SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation LIKE 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love' COLLATE NOCASE",
          "SELECT name, original_artist FROM songs WHERE TRIM(english_translation) = 'All the streets of love'",
          "SELECT name, original_artist FROM songs WHERE LOWER(english_translation) = LOWER('All the streets of love')",
          "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love' AND name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT DISTINCT performance_score.stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score p INNER JOIN songs s ON p.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id AND songs.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score AS p JOIN songs AS s ON p.songs_id = s.id AND s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score JOIN songs USING (id) WHERE songs.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score p, songs s WHERE p.songs_id = s.id AND s.language = 'English'",
          "SELECT DISTINCT stage_presence FROM performance_score p JOIN songs s ON p.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT p.stage_presence FROM performance_score p JOIN songs s ON p.songs_id = s.id WHERE s.language = 'English' ORDER BY p.stage_presence",
          "SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English' ORDER BY stage_presence ASC"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(DISTINCT ps.songs_id) >= 2",
          "SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id HAVING COUNT(DISTINCT performance_score.songs_id) >= 2",
          "SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(DISTINCT songs_id) >= 2)",
          "SELECT p.id, p.name FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps WHERE ps.participant_id = p.id GROUP BY ps.participant_id HAVING COUNT(DISTINCT ps.songs_id) >= 2)",
          "SELECT DISTINCT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id GROUP BY p.id HAVING COUNT(DISTINCT ps.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants p JOIN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(DISTINCT songs_id) >= 2) ps ON p.id = ps.participant_id",
          "SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(DISTINCT songs_id) >= 2)",
          "SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id, participants.name HAVING COUNT(DISTINCT performance_score.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(DISTINCT ps.songs_id) >= 2",
          "SELECT p.id, p.name FROM participants p WHERE (SELECT COUNT(DISTINCT songs_id) FROM performance_score WHERE participant_id = p.id) >= 2"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS song_count FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY song_count DESC",
          "SELECT participants.id, participants.name, participants.popularity, COUNT(performance_score.songs_id) AS total_songs FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY total_songs DESC",
          "SELECT p.id AS ParticipantID, p.name AS ParticipantName, p.popularity AS PopularityLevel, COUNT(ps.songs_id) AS NumberOfSongs FROM participants p, performance_score ps WHERE p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC",
          "SELECT id, name, popularity, (SELECT COUNT(songs_id) FROM performance_score WHERE participant_id = participants.id) AS song_count FROM participants ORDER BY song_count DESC",
          "SELECT p.id, p.name, p.popularity, COUNT(*) AS songs_performed FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY songs_performed DESC",
          "SELECT p.id, p.name, p.popularity, song_count FROM participants p JOIN (SELECT participant_id, COUNT(songs_id) AS song_count FROM performance_score GROUP BY participant_id) ps ON p.id = ps.participant_id ORDER BY ps.song_count DESC",
          "SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS total_performances FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY total_performances DESC",
          "SELECT participants.id, participants.name, participants.popularity, COUNT(performance_score.songs_id) FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id, participants.name, participants.popularity ORDER BY COUNT(performance_score.songs_id) DESC",
          "SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) AS song_count FROM participants p LEFT OUTER JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY song_count DESC",
          "SELECT p.id, p.name, p.popularity, (SELECT COUNT(*) FROM performance_score WHERE participant_id = p.id) AS songs_count FROM participants p ORDER BY songs_count DESC"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5",
          "SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5",
          "SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5)",
          "SELECT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
          "SELECT DISTINCT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5",
          "SELECT p.id, p.name FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5))",
          "SELECT participants.id, participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id AND (performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5)",
          "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 UNION SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.rhythm_tempo = 5",
          "SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
          "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5 GROUP BY p.id, p.name"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT ps.voice_sound_quality FROM performance_score AS ps JOIN songs AS s ON ps.songs_id = s.id WHERE s.name LIKE 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score ps INNER JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT ps.voice_sound_quality FROM performance_score ps, songs s WHERE ps.songs_id = s.id AND s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English' ORDER BY ps.voice_sound_quality",
          "SELECT DISTINCT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
          "SELECT voice_sound_quality FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English' GROUP BY voice_sound_quality"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT T1.id, T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id = T2.songs_id GROUP BY T1.id, T1.name ORDER BY COUNT(T2.participant_id) DESC LIMIT 1",
          "SELECT id, name FROM songs WHERE id IN (SELECT songs_id FROM performance_score GROUP BY songs_id ORDER BY COUNT(participant_id) DESC LIMIT 1)",
          "SELECT songs.id, songs.name FROM songs INNER JOIN (SELECT songs_id, COUNT(participant_id) AS cnt FROM performance_score GROUP BY songs_id ORDER BY cnt DESC LIMIT 1) AS most_popular ON songs.id = most_popular.songs_id",
          "SELECT id, name FROM songs WHERE id = (SELECT songs_id FROM performance_score GROUP BY songs_id ORDER BY COUNT(participant_id) DESC LIMIT 1)",
          "SELECT S.id, S.name FROM songs S, (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING COUNT(participant_id) = (SELECT MAX(count) FROM (SELECT COUNT(participant_id) AS count FROM performance_score GROUP BY songs_id) AS counts)) AS MostPopular WHERE S.id = MostPopular.songs_id",
          "SELECT id, name FROM songs WHERE id = (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING COUNT(participant_id) >= ALL (SELECT COUNT(participant_id) FROM performance_score GROUP BY songs_id))",
          "SELECT S.id, S.name FROM songs S JOIN (SELECT songs_id, COUNT(participant_id) AS total_participants FROM performance_score GROUP BY songs_id) AS P ON S.id = P.songs_id WHERE total_participants = (SELECT MAX(total_participants) FROM (SELECT COUNT(participant_id) AS total_participants FROM performance_score GROUP BY songs_id) AS subquery)",
          "SELECT id, name FROM songs WHERE id = (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING COUNT(participant_id) = (SELECT MAX(COUNT(participant_id)) FROM performance_score GROUP BY songs_id))",
          "SELECT S.id, S.name FROM songs S WHERE EXISTS (SELECT 1 FROM performance_score P WHERE S.id = P.songs_id GROUP BY P.songs_id HAVING COUNT(P.participant_id) = (SELECT MAX(COUNT(participant_id)) FROM performance_score GROUP BY songs_id))",
          "SELECT id, name FROM songs WHERE id = (SELECT TOP 1 songs_id FROM performance_score GROUP BY songs_id ORDER BY COUNT(participant_id) DESC)"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(*) AS total FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(performance_score.participant_id) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence NOT BETWEEN 7 AND 9",
          "SELECT COUNT(*) AS count FROM performance_score WHERE (stage_presence < 7) OR (stage_presence > 9)",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 UNION ALL SELECT COUNT(*) FROM performance_score WHERE stage_presence > 9",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 UNION SELECT COUNT(*) FROM performance_score WHERE stage_presence > 9",
          "SELECT SUM(CASE WHEN stage_presence < 7 OR stage_presence > 9 THEN 1 ELSE 0 END) FROM performance_score",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 GROUP BY participant_id",
          "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 ORDER BY participant_id"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)",
          "SELECT COUNT(id) AS UnperformedSongs FROM songs WHERE id NOT IN (SELECT DISTINCT songs_id FROM performance_score)",
          "SELECT COUNT(*) FROM songs s WHERE NOT EXISTS (SELECT 1 FROM performance_score p WHERE p.songs_id = s.id)",
          "SELECT COUNT(s.id) FROM songs s LEFT JOIN performance_score p ON s.id = p.songs_id WHERE p.songs_id IS NULL",
          "WITH Performed AS (SELECT DISTINCT songs_id FROM performance_score) SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM Performed)",
          "SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score WHERE songs_id IS NOT NULL)",
          "SELECT COUNT(*) FROM songs s WHERE s.id NOT IN (SELECT p.songs_id FROM performance_score p)",
          "SELECT COUNT(*) FROM (SELECT id FROM songs EXCEPT SELECT songs_id FROM performance_score) AS Unperformed",
          "SELECT COUNT(*) FROM songs WHERE NOT EXISTS (SELECT NULL FROM performance_score WHERE songs_id = songs.id)",
          "SELECT COUNT(*) FROM songs s LEFT OUTER JOIN performance_score p ON s.id = p.songs_id WHERE p.songs_id IS NULL"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT AVG(performance_score.rhythm_tempo) AS AverageRhythm, songs.language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.language",
          "SELECT songs.language, AVG(performance_score.rhythm_tempo) AS AvgRhythm FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.language",
          "SELECT language, AVG(rhythm_tempo) FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
          "SELECT AVG(p.rhythm_tempo), s.language FROM performance_score p JOIN songs s ON p.songs_id = s.id GROUP BY s.language",
          "SELECT language, AVG(rhythm_tempo) AS Average_Rhythm FROM songs s JOIN performance_score p ON s.id = p.songs_id GROUP BY language",
          "SELECT AVG(rhythm_tempo) AS AverageRhythmTempo, language FROM performance_score, songs WHERE performance_score.songs_id = songs.id GROUP BY language",
          "SELECT language, AVG(rhythm_tempo) FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
          "SELECT language, AVG(rhythm_tempo) AS AverageRhythm FROM songs RIGHT JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
          "SELECT AVG(rhythm_tempo) AS AvgRhythmTempo, language FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id GROUP BY language",
          "SELECT language, AVG(rhythm_tempo) AS AvgRhythm FROM performance_score p RIGHT JOIN songs s ON p.songs_id = s.id GROUP BY s.language"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'",
          "SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))",
          "SELECT DISTINCT participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'",
          "SELECT name FROM participants WHERE EXISTS (SELECT 1 FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE participants.id = performance_score.participant_id AND songs.language = 'English') GROUP BY name",
          "SELECT DISTINCT p.name FROM participants p, performance_score ps, songs s WHERE p.id = ps.participant_id AND ps.songs_id = s.id AND s.language = 'English'",
          "SELECT DISTINCT name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English')",
          "SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON songs_id = id WHERE language = 'English')",
          "SELECT DISTINCT p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id INNER JOIN songs s ON s.id = ps.songs_id AND s.language = 'English'",
          "SELECT DISTINCT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON songs.id = performance_score.songs_id AND songs.language = 'English'",
          "SELECT DISTINCT p.name FROM participants p WHERE EXISTS (SELECT * FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE ps.participant_id = p.id AND s.language = 'English')"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT P.name, P.popularity FROM participants P WHERE P.id IN (SELECT PS.participant_id FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'Croatian') AND P.id IN (SELECT PS.participant_id FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON songs_id = songs.id WHERE language = 'Croatian') INTERSECT SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON songs_id = songs.id WHERE language = 'English')",
          "SELECT DISTINCT P.name, P.popularity FROM participants P INNER JOIN performance_score PS ON P.id = PS.participant_id INNER JOIN songs S ON PS.songs_id = S.id WHERE S.language IN ('Croatian', 'English') GROUP BY P.id HAVING COUNT(DISTINCT S.language) = 2",
          "SELECT participants.name, participants.popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian' AND participants.id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian') AND id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')",
          "SELECT P.name, P.popularity FROM participants P WHERE EXISTS (SELECT 1 FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'Croatian' AND PS.participant_id = P.id) AND EXISTS (SELECT 1 FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'English' AND PS.participant_id = P.id)",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.language = 'Croatian') AND id IN (SELECT participant_id FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian' INTERSECT SELECT participant_id FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')",
          "SELECT P.name, P.popularity FROM participants P JOIN performance_score PS ON P.id = PS.participant_id JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'Croatian' GROUP BY P.id, P.name, P.popularity HAVING COUNT(DISTINCT S.language) > 1 AND EXISTS (SELECT 1 FROM songs S2 WHERE S2.id = PS.songs_id AND S2.language = 'English')",
          "SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian' UNION SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT name FROM songs WHERE name LIKE '%Is%'",
          "SELECT name FROM songs WHERE name LIKE '%Is%' COLLATE NOCASE",
          "SELECT name FROM songs WHERE INSTR(name, 'Is') > 0",
          "SELECT name FROM songs WHERE name CONTAINS 'Is'",
          "SELECT name FROM songs WHERE POSITION('Is' IN name) > 0",
          "SELECT name FROM songs WHERE CHARINDEX('Is', name) > 0",
          "SELECT name FROM songs WHERE name REGEXP '.*Is.*'",
          "SELECT name FROM songs WHERE name ILIKE '%Is%'",
          "SELECT DISTINCT name FROM songs WHERE name LIKE '%Is%'",
          "SELECT name FROM songs WHERE LOWER(name) LIKE LOWER('%Is%')"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "sing_contest",
      "infer_predictions": [
        [
          "SELECT s.original_artist FROM songs s JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC",
          "SELECT original_artist FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT original_artist FROM songs, performance_score WHERE songs.id = performance_score.songs_id AND performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s, performance_score p WHERE s.id = p.songs_id AND p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC",
          "SELECT DISTINCT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT original_artist FROM songs s JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC, s.original_artist",
          "SELECT s.original_artist FROM songs s INNER JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC, s.original_artist",
          "SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id AND performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
          "SELECT s.original_artist FROM songs s LEFT JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC",
          "SELECT original_artist FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id AND performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM City",
          "SELECT COUNT(city_code) FROM City",
          "SELECT COUNT(DISTINCT city_name) FROM City",
          "SELECT COUNT(city_name) FROM City",
          "SELECT COUNT(DISTINCT city_code) FROM City",
          "SELECT COUNT(*) AS NumberOfCities FROM City",
          "SELECT COUNT(city_code) AS CityCount FROM City",
          "SELECT COUNT(DISTINCT city_name) AS UniqueCityCount FROM City",
          "SELECT COUNT(city_name) AS TotalCities FROM City",
          "SELECT COUNT(DISTINCT city_code) AS DistinctCityCodes FROM City"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM City",
          "SELECT COUNT(city_code) FROM City",
          "SELECT COUNT(city_name) FROM City",
          "SELECT COUNT(DISTINCT city_code) FROM City",
          "SELECT COUNT(DISTINCT city_name) FROM City",
          "SELECT COUNT(1) FROM City",
          "SELECT COUNT(city_code) AS NumberOfCities FROM City",
          "SELECT COUNT(*) AS CityCount FROM City",
          "SELECT COUNT(city_name) AS TotalCities FROM City",
          "SELECT COUNT(DISTINCT city_name) AS UniqueCityCount FROM City"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM City",
          "SELECT state FROM City GROUP BY state",
          "SELECT state FROM City WHERE state IS NOT NULL GROUP BY state",
          "SELECT DISTINCT state FROM City WHERE state <> ''",
          "SELECT state FROM City WHERE state IS NOT NULL AND state <> '' GROUP BY state",
          "SELECT DISTINCT state FROM City ORDER BY state",
          "SELECT state FROM City GROUP BY state HAVING state IS NOT NULL",
          "SELECT DISTINCT state FROM City WHERE state IS NOT NULL ORDER BY state",
          "SELECT state FROM City WHERE state <> '' GROUP BY state ORDER BY state",
          "SELECT DISTINCT state FROM City WHERE state IS NOT NULL AND state <> '' ORDER BY state"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT state FROM City",
          "SELECT state FROM City GROUP BY state",
          "SELECT state FROM City WHERE state IS NOT NULL GROUP BY state",
          "SELECT DISTINCT state FROM City WHERE state <> ''",
          "SELECT state FROM City WHERE state IS NOT NULL AND state <> '' GROUP BY state",
          "SELECT DISTINCT state FROM City ORDER BY state",
          "SELECT state FROM City GROUP BY state HAVING state IS NOT NULL",
          "SELECT DISTINCT state FROM City WHERE state IS NOT NULL ORDER BY state",
          "SELECT state FROM City WHERE state <> '' GROUP BY state ORDER BY state",
          "SELECT DISTINCT state FROM City WHERE state IS NOT NULL AND state <> '' ORDER BY state"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT country) FROM City",
          "SELECT COUNT(UNIQUE country) FROM City",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City) AS unique_countries",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City) AS countries",
          "SELECT COUNT(DISTINCT country) AS NumberOfCountries FROM City",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country) AS distinct_countries",
          "SELECT COUNT(DISTINCT country) FROM City WHERE country IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City WHERE country IS NOT NULL) AS countries",
          "SELECT DISTINCT COUNT(country) FROM City",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City) AS country_count"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT country) FROM City",
          "SELECT COUNT(UNIQUE country) FROM City",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City) AS unique_countries",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City) AS distinct_countries",
          "SELECT COUNT(DISTINCT country) AS number_of_countries FROM City",
          "SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country) AS countries",
          "SELECT COUNT(DISTINCT country) FROM City WHERE country IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City WHERE country IS NOT NULL) AS countries",
          "SELECT COUNT(DISTINCT country) FROM City GROUP BY country",
          "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City) AS count_countries"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name, city_code, state, country FROM City",
          "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM City",
          "SELECT * FROM City",
          "SELECT City.city_name, City.city_code, City.state, City.country FROM City",
          "SELECT name, code, state, country FROM City",
          "SELECT `city_name`, `city_code`, `state`, `country` FROM `City`",
          "SELECT city_name, city_code, state, country FROM City ORDER BY city_name",
          "SELECT C.city_name, C.city_code, C.state, C.country FROM City C",
          "SELECT city_name AS 'City Name', city_code AS 'City Code', state AS 'State', country AS 'Country' FROM City",
          "SELECT DISTINCT city_name, city_code, state, country FROM City"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name, city_code, state, country FROM City",
          "SELECT city_code, city_name, state, country FROM City",
          "SELECT City.city_name, City.city_code, City.state, City.country FROM City",
          "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM City",
          "SELECT * FROM City",
          "SELECT city_name, city_code, state, country FROM City ORDER BY city_name",
          "SELECT DISTINCT city_name, city_code, state, country FROM City",
          "SELECT city_name, city_code, state, country FROM City WHERE city_name IS NOT NULL",
          "SELECT city_name, city_code, state, country FROM City GROUP BY city_name, city_code, state, country",
          "SELECT CONCAT(city_name, ' (', city_code, ')') AS 'City and Code', state, country FROM City"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
          "SELECT City.latitude, City.longitude FROM City WHERE City.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' LIMIT 1",
          "SELECT c.latitude, c.longitude FROM City c WHERE c.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE LOWER(city_name) = LOWER('Baltimore')",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' ORDER BY city_code DESC LIMIT 1",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'United States'"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'",
          "SELECT City.latitude, City.longitude FROM City WHERE City.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' LIMIT 1",
          "SELECT c.latitude, c.longitude FROM City c WHERE c.city_name = 'Baltimore'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'USA'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' ORDER BY city_code DESC LIMIT 1",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'MD'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND country = 'United States'",
          "SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore' AND state = 'Maryland'"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state LIKE 'PA'",
          "SELECT City.city_name FROM City WHERE City.state = 'PA'",
          "SELECT DISTINCT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' ORDER BY city_name",
          "SELECT city_name FROM City WHERE state = 'PA' GROUP BY city_name",
          "SELECT city_name AS CityName FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City c WHERE c.state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' AND city_name IS NOT NULL",
          "SELECT city_name FROM City WHERE state = 'PA' AND city_name <> ''"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state LIKE 'PA'",
          "SELECT City.city_name FROM City WHERE City.state = 'PA'",
          "SELECT DISTINCT city_name FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' ORDER BY city_name",
          "SELECT city_name FROM City WHERE state = 'PA' GROUP BY city_name",
          "SELECT city_name AS CityName FROM City WHERE state = 'PA'",
          "SELECT city_name FROM City c WHERE c.state = 'PA'",
          "SELECT city_name FROM City WHERE state = 'PA' AND country = 'USA'",
          "SELECT city_name FROM City WHERE state = 'PA' AND city_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) AS NumberOfCities FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_name) AS CityCount FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(city_name) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(DISTINCT city_name) FROM City WHERE country LIKE 'Canada'"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_name) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) AS NumberOfCities FROM City WHERE country = 'Canada'",
          "SELECT COUNT(DISTINCT city_code) FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_code) AS CityCount FROM City WHERE country = 'Canada'",
          "SELECT COUNT(city_name) AS TotalCities FROM City WHERE country = 'Canada'",
          "SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'",
          "SELECT COUNT(city_name) FROM City WHERE country = 'Canada' GROUP BY country"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC",
          "SELECT City.city_name FROM City WHERE City.country = 'USA' ORDER BY City.latitude ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude DESC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' SORT BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude IN ASCENDING ORDER",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude IN ASC ORDER",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude FROM LOWEST TO HIGHEST",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude FROM SMALLEST TO LARGEST"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC",
          "SELECT City.city_name FROM City WHERE City.country = 'USA' ORDER BY City.latitude ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude DESC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude DESCENDING",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name ASC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name DESC",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC, city_name",
          "SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude, city_name ASC"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state",
          "SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state",
          "SELECT state, COUNT(city_name) FROM City GROUP BY state",
          "SELECT state, COUNT(DISTINCT city_name) AS num_cities FROM City GROUP BY state",
          "SELECT City.state, COUNT(City.city_name) AS num_cities FROM City GROUP BY City.state",
          "SELECT state AS State, COUNT(city_name) AS NumberOfCities FROM City GROUP BY state",
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY state",
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state ORDER BY COUNT(city_name) DESC",
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state HAVING COUNT(city_name) > 0",
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state WITH ROLLUP"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state",
          "SELECT state, COUNT(*) AS city_count FROM City GROUP BY state",
          "SELECT state, COUNT(city_name) FROM City GROUP BY state",
          "SELECT COUNT(city_name), state FROM City GROUP BY state",
          "SELECT state, COUNT(city_code) FROM City GROUP BY state",
          "SELECT state, COUNT(DISTINCT city_name) FROM City GROUP BY state",
          "SELECT state, COUNT(city_name) AS total_cities FROM City GROUP BY state ORDER BY state",
          "SELECT state, COUNT(*) FROM City GROUP BY state ORDER BY COUNT(*) DESC",
          "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY city_count",
          "SELECT state, COUNT(city_name) FROM City GROUP BY state ORDER BY COUNT(city_name) DESC"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(city_name) AS number_of_cities FROM City GROUP BY country",
          "SELECT country, COUNT(*) AS number_of_cities FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country",
          "SELECT country, COUNT(DISTINCT city_name) AS number_of_cities FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) AS total_cities FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country",
          "SELECT country, COUNT(*) FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) AS count_of_cities FROM City GROUP BY country",
          "SELECT country, COUNT(DISTINCT city_name) FROM City GROUP BY country"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country",
          "SELECT country, COUNT(*) AS city_count FROM City GROUP BY country",
          "SELECT country, COUNT(city_code) AS total_cities FROM City GROUP BY country",
          "SELECT COUNT(city_name), country FROM City GROUP BY country",
          "SELECT country, COUNT(DISTINCT city_name) FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) FROM City GROUP BY country ORDER BY country",
          "SELECT country, COUNT(*) FROM City GROUP BY country ORDER BY COUNT(*) DESC",
          "SELECT country, COUNT(city_code) FROM City GROUP BY country HAVING COUNT(city_code) > 0",
          "SELECT COUNT(DISTINCT city_name), country FROM City GROUP BY country",
          "SELECT country, COUNT(city_name) FROM City GROUP BY country HAVING COUNT(city_name) > 1"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2",
          "SELECT state FROM City WHERE state IN (SELECT state FROM City GROUP BY state HAVING COUNT(city_name) > 1)",
          "SELECT DISTINCT state FROM City GROUP BY state HAVING COUNT(city_name) > 1",
          "SELECT state FROM (SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state) AS state_counts WHERE city_count >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2",
          "SELECT C.state FROM City AS C GROUP BY C.state HAVING COUNT(C.city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2 ORDER BY state",
          "SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state HAVING num_cities >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2 AND state IS NOT NULL"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2",
          "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state HAVING city_count >= 2",
          "SELECT state FROM (SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state) AS state_counts WHERE num_cities >= 2",
          "SELECT C.state FROM City AS C GROUP BY C.state HAVING COUNT(C.city_name) >= 2",
          "SELECT DISTINCT state FROM City WHERE (SELECT COUNT(city_name) FROM City AS C WHERE C.state = City.state) >= 2",
          "SELECT state, COUNT(city_name) FROM City GROUP BY state HAVING COUNT(city_name) >= 2",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) > 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2 ORDER BY state"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
          "SELECT TOP 1 state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS state_counts ORDER BY num_cities DESC LIMIT 1",
          "SELECT state, MAX(city_count) FROM (SELECT state, COUNT(*) AS city_count FROM City GROUP BY state) AS counts",
          "WITH CityCounts AS (SELECT state, COUNT(*) AS NumberOfCities FROM City GROUP BY state) SELECT state FROM CityCounts WHERE NumberOfCities = (SELECT MAX(NumberOfCities) FROM CityCounts)",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state) AS counts)",
          "SELECT state, COUNT(*) AS total_cities FROM City GROUP BY state ORDER BY total_cities DESC FETCH FIRST 1 ROW ONLY",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC FETCH FIRST ROW WITH TIES",
          "SELECT FIRST(state) FROM City GROUP BY state ORDER BY COUNT(*) DESC"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1",
          "SELECT TOP 1 state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC",
          "SELECT state FROM (SELECT state, COUNT(*) AS city_count FROM City GROUP BY state ORDER BY city_count DESC) AS subquery LIMIT 1",
          "SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state) AS subquery)",
          "WITH StateCounts AS (SELECT state, COUNT(*) AS city_count FROM City GROUP BY state) SELECT state FROM StateCounts WHERE city_count = (SELECT MAX(city_count) FROM StateCounts)",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1",
          "SELECT state FROM City GROUP BY state ORDER BY COUNT(city_name) DESC FETCH FIRST ROW ONLY",
          "SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1",
          "SELECT state FROM (SELECT state, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM City GROUP BY state) sub WHERE rank = 1"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1",
          "SELECT country FROM (SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country) AS subquery ORDER BY city_count ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY country) AS subquery)",
          "WITH CountryCounts AS (SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country) SELECT country FROM CountryCounts WHERE num_cities = (SELECT MIN(num_cities) FROM CountryCounts)",
          "SELECT TOP 1 country FROM City GROUP BY country ORDER BY COUNT(city_name)",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country ORDER BY city_count ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC FETCH FIRST ROW ONLY",
          "SELECT country, MIN(city_count) FROM (SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country) AS counts GROUP BY country ORDER BY city_count ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC, country ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1",
          "SELECT country FROM (SELECT country, COUNT(*) AS city_count FROM City GROUP BY country) AS subquery ORDER BY city_count ASC LIMIT 1",
          "SELECT TOP 1 country FROM City GROUP BY country ORDER BY COUNT(*)",
          "SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY country) AS counts)",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities ASC LIMIT 1",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(city_name) ASC, country DESC LIMIT 1",
          "SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country) AS sub)",
          "SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT country FROM (SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country ORDER BY num_cities ASC) AS result LIMIT 1"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Student.Fname, Student.LName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT s.Fname, s.LName FROM Student s, City c WHERE s.city_code = c.city_code AND c.state = 'MD'",
          "SELECT Fname, LName FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Fname AS FirstName, LName AS LastName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT first_name, last_name FROM (SELECT Fname AS first_name, LName AS last_name, city_code FROM Student) AS s JOIN City ON s.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Fname, LName FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Fname, LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'",
          "SELECT Fname, LName FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'",
          "SELECT Fname, LName FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT CONCAT(Student.Fname, ' ', Student.LName) AS FullName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Student.Fname || ' ' || Student.LName AS FullName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT CONCAT_WS(' ', Student.Fname, Student.LName) AS FullName FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Student.Fname + ' ' + Student.LName AS FullName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT CONCAT(Student.Fname, ' ', Student.LName) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Student.Fname || ' ' || Student.LName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT CONCAT_WS(' ', Student.Fname, Student.LName) FROM Student, City WHERE Student.city_code = City.city_code AND City.state = 'MD'",
          "SELECT Student.Fname + ' ' + Student.LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT CONCAT(Student.Fname, ' ', Student.LName) AS FullName FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'",
          "SELECT Student.Fname || ' ' || Student.LName AS FullName FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(Student.StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'",
          "SELECT COUNT(DISTINCT Student.StuID) FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(1) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) AS NumberOfStudents FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(Student.StuID) FROM Student LEFT OUTER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(*) FROM Student s, City c WHERE s.city_code = c.city_code AND c.country = 'China'",
          "SELECT COUNT(DISTINCT s.StuID) FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM (SELECT Student.StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China') AS StudentsInChina",
          "SELECT COUNT(*) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(Student.StuID) AS NumberOfStudents FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(DISTINCT Student.StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'",
          "SELECT COUNT(1) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(*) FROM Student s, City c WHERE s.city_code = c.city_code AND c.country = 'China'",
          "SELECT COUNT(*) AS TotalStudents FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(Student.StuID) FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'",
          "SELECT COUNT(*) FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'",
          "SELECT COUNT(DISTINCT s.StuID) FROM Student s, City c WHERE s.city_code = c.city_code AND c.country = 'China'",
          "SELECT COUNT(*) FROM Student s LEFT JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Student.Fname, Student.Major FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT s.Fname, s.Major FROM Student s, City c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
          "SELECT Fname AS FirstName, Major AS MajorField FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name = 'Baltimore'",
          "SELECT first_name, major FROM (SELECT Fname AS first_name, Major AS major, city_code FROM Student) AS Students JOIN City ON Students.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student JOIN City USING(city_code) WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.city_name = 'Baltimore'",
          "SELECT Fname AS FirstName, Major AS MajorField FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore' ORDER BY Fname"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname AS FirstName, Major AS FieldOfStudy FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT s.Fname, s.Major FROM Student s, City c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student, City WHERE Student.city_code = City.city_code AND City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student INNER JOIN City USING(city_code) WHERE City.city_name = 'Baltimore'",
          "SELECT Fname, Major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
          "SELECT first_name, major FROM (SELECT Fname AS first_name, Major AS major, city_code FROM Student) AS students JOIN City ON students.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT Fname AS FirstName, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore' ORDER BY FirstName",
          "SELECT Fname, Major FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'",
          "SELECT DISTINCT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT City.country, COUNT(Student.StuID) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country",
          "SELECT country, COUNT(*) AS StudentCount FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT c.country, COUNT(s.StuID) FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY c.country",
          "SELECT country AS CountryName, COUNT(Student.StuID) AS TotalStudents FROM Student, City WHERE Student.city_code = City.city_code GROUP BY CountryName",
          "SELECT COUNT(StuID), country FROM Student INNER JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY country",
          "SELECT country, COUNT(StuID) AS Students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country HAVING COUNT(StuID) > 0",
          "SELECT country, COUNT(DISTINCT Student.StuID) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) FROM Student RIGHT JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(*) FROM Student LEFT JOIN City ON Student.city_code = City.city_code GROUP BY country"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT City.country, COUNT(Student.StuID) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country",
          "SELECT country, COUNT(*) AS StudentCount FROM Student INNER JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country",
          "SELECT C.country, COUNT(S.StuID) FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.country",
          "SELECT country AS CountryName, COUNT(Student.StuID) AS TotalStudents FROM Student, City WHERE Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(DISTINCT Student.StuID) FROM Student LEFT JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) AS StudentsPerCountry FROM Student RIGHT JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT C.country, COUNT(*) FROM Student S RIGHT OUTER JOIN City C ON S.city_code = C.city_code GROUP BY C.country",
          "SELECT country, COUNT(StuID) FROM Student FULL OUTER JOIN City ON Student.city_code = City.city_code GROUP BY country",
          "SELECT country, COUNT(StuID) AS Total FROM Student JOIN City USING(city_code) GROUP BY country"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT City.city_name, COUNT(Student.StuID) AS NumberOfStudents FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name",
          "SELECT c.city_name, COUNT(s.StuID) AS StudentCount FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(StuID) FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY city_name",
          "SELECT name, COUNT(id) FROM City AS c JOIN Student AS s ON c.city_code = s.city_code GROUP BY name",
          "SELECT City.city_name, COUNT(*) FROM City, Student WHERE City.city_code = Student.city_code GROUP BY City.city_name",
          "SELECT c.city_name, COUNT(s.StuID) FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(StuID) AS total_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY city_name ORDER BY city_name",
          "SELECT c.city_name AS CityName, COUNT(s.StuID) AS TotalStudents FROM City c LEFT JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(StuID) FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY city_name",
          "SELECT City.city_name, COUNT(Student.StuID) FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT City.city_name, COUNT(Student.StuID) AS NumberOfStudents FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name",
          "SELECT c.city_name, COUNT(s.StuID) FROM City c INNER JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(*) AS student_count FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY city_name",
          "SELECT city_name, COUNT(StuID) FROM City, Student WHERE City.city_code = Student.city_code GROUP BY city_name",
          "SELECT c.city_name, COUNT(s.StuID) AS total_students FROM City AS c LEFT JOIN Student AS s ON c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(StuID) AS num_students FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY city_name",
          "SELECT c.city_name, COUNT(s.StuID) FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT city_name, COUNT(StuID) FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name",
          "SELECT c.city_name AS City, COUNT(s.StuID) AS Students FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name",
          "SELECT City.city_name, COUNT(Student.StuID) AS StudentCount FROM Student RIGHT JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state, COUNT(*) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY student_count DESC LIMIT 1",
          "SELECT C.state, COUNT(S.StuID) AS num_students FROM City AS C INNER JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.state ORDER BY num_students DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 state, COUNT(Student.StuID) AS total_students FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY total_students DESC",
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT state, COUNT(Student.StuID) AS NumberOfStudents FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state ORDER BY NumberOfStudents DESC LIMIT 1",
          "SELECT state FROM (SELECT state, COUNT(*) AS student_count FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS StateCounts ORDER BY student_count DESC LIMIT 1",
          "SELECT state, MAX(student_count) FROM (SELECT state, COUNT(*) AS student_count FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS counts",
          "WITH StudentCounts AS (SELECT state, COUNT(*) AS total FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) SELECT state FROM StudentCounts ORDER BY total DESC LIMIT 1",
          "SELECT state, COUNT(Student.StuID) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) = (SELECT MAX(total) FROM (SELECT COUNT(Student.StuID) AS total FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS MaxCount)",
          "SELECT FIRST(state) OVER (ORDER BY COUNT(Student.StuID) DESC) AS most_students_state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state ORDER BY COUNT(S.StuID) DESC LIMIT 1",
          "SELECT TOP 1 state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC",
          "SELECT state FROM (SELECT state, COUNT(*) AS num_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS state_counts ORDER BY num_students DESC LIMIT 1",
          "WITH StudentCounts AS (SELECT state, COUNT(*) AS TotalStudents FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) SELECT state FROM StudentCounts ORDER BY TotalStudents DESC LIMIT 1",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS counts)",
          "SELECT state FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(Student.StuID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state)",
          "SELECT state FROM (SELECT state, COUNT(Student.StuID) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY student_count DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT C.country FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT TOP 1 country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID)",
          "SELECT country FROM (SELECT country, COUNT(*) as num_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS subquery ORDER BY num_students ASC LIMIT 1",
          "SELECT country FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country HAVING COUNT(Student.StuID) = (SELECT MIN(count) FROM (SELECT COUNT(Student.StuID) as count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS counts)",
          "SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC FETCH FIRST 1 ROWS ONLY",
          "WITH StudentCounts AS (SELECT country, COUNT(*) AS TotalStudents FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) SELECT country FROM StudentCounts WHERE TotalStudents = (SELECT MIN(TotalStudents) FROM StudentCounts)",
          "SELECT country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT country, COUNT(Student.StuID) AS NumberOfStudents FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY NumberOfStudents ASC LIMIT 1",
          "SELECT country FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY country ORDER BY COUNT(s.StuID) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT C.country FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.country ORDER BY COUNT(S.StuID) ASC LIMIT 1",
          "SELECT TOP 1 country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*)",
          "SELECT country FROM (SELECT country, COUNT(*) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS subquery ORDER BY student_count ASC LIMIT 1",
          "WITH StudentCounts AS (SELECT country, COUNT(*) AS num_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) SELECT country FROM StudentCounts ORDER BY num_students ASC LIMIT 1",
          "SELECT country FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country HAVING COUNT(Student.StuID) = (SELECT MIN(count) FROM (SELECT COUNT(Student.StuID) AS count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS counts)",
          "SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC FETCH FIRST ROW ONLY",
          "SELECT country FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country)",
          "SELECT country FROM (SELECT country, COUNT(StuID) AS total_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS CountryStudents ORDER BY total_students ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City AS C INNER JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT DISTINCT C.city_name FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(DISTINCT S.StuID) >= 3",
          "SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(DISTINCT S.StuID) >= 3",
          "SELECT city_name FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE City.city_code = Student.city_code GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City C WHERE (SELECT COUNT(*) FROM Student S WHERE S.city_code = C.city_code) >= 3",
          "SELECT city_name FROM City C INNER JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3) AS S ON C.city_code = S.city_code",
          "SELECT C.city_name FROM City C WHERE 3 <= (SELECT COUNT(*) FROM Student S WHERE S.city_code = C.city_code)"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City AS C INNER JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(S.StuID) >= 3",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)",
          "SELECT DISTINCT C.city_name FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(DISTINCT S.StuID) >= 3",
          "SELECT C.city_name FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.city_name HAVING COUNT(DISTINCT S.StuID) >= 3",
          "SELECT city_name FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE City.city_code = Student.city_code GROUP BY city_code HAVING COUNT(*) >= 3)",
          "SELECT C.city_name FROM City C WHERE (SELECT COUNT(*) FROM Student S WHERE S.city_code = C.city_code) >= 3",
          "SELECT C.city_name FROM City C WHERE (SELECT COUNT(S.StuID) FROM Student S WHERE S.city_code = C.city_code GROUP BY S.city_code) >= 3",
          "SELECT city_name FROM City C INNER JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3) AS S ON C.city_code = S.city_code"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) > 5",
          "SELECT state FROM (SELECT state, COUNT(Student.StuID) AS num_students FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS state_counts WHERE num_students > 5",
          "SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) > 5)",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state HAVING COUNT(DISTINCT Student.StuID) > 5",
          "SELECT C.state FROM City AS C, Student AS S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(*) > 5",
          "SELECT state FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE Student.city_code = City.city_code GROUP BY Student.city_code HAVING COUNT(Student.StuID) > 5)",
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City C LEFT JOIN Student S ON C.city_code = S.city_code GROUP BY state HAVING COUNT(S.StuID) > 5"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) > 5)",
          "SELECT state FROM (SELECT C.state, COUNT(*) AS num_students FROM City C INNER JOIN Student S ON C.city_code = S.city_code GROUP BY C.state) AS state_counts WHERE num_students > 5",
          "SELECT DISTINCT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(DISTINCT S.StuID) > 5",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) > 5)",
          "SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(*) > 5",
          "SELECT state FROM City INNER JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) > 5) AS StudentCities ON City.city_code = StudentCities.city_code",
          "SELECT C.state FROM City AS C INNER JOIN Student AS S ON C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5",
          "SELECT state FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE City.city_code = Student.city_code GROUP BY Student.city_code HAVING COUNT(Student.StuID) > 5)"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country <> 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND City.country != 'USA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country NOT IN ('USA')",
          "SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country <> 'USA'",
          "SELECT DISTINCT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE NOT City.country = 'USA'",
          "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA')",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE c.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND c.country <> 'USA'",
          "SELECT StuID FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country != 'USA'"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country <> 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND City.country != 'USA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country NOT IN ('USA')",
          "SELECT DISTINCT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country <> 'USA'",
          "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country != 'USA')",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE c.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code AND c.country <> 'USA'",
          "SELECT StuID FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')",
          "SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND c.country NOT IN ('USA')",
          "SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'F' AND City.state = 'PA'",
          "SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'F' AND c.state = 'PA'",
          "SELECT DISTINCT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'F' AND state = 'PA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND City.state = 'PA'",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA' ORDER BY StuID",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Student.Sex = 'F' AND City.state = 'PA'",
          "SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'F' AND c.state = 'PA' GROUP BY s.StuID"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'female' AND state = 'PA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'female' AND City.state = 'PA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'female' AND City.state = 'PA'",
          "SELECT DISTINCT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'female' AND c.state = 'PA'",
          "SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'PA') AND Sex = 'female'",
          "SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'female' AND c.state = 'PA'",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'female' AND c.state = 'PA'",
          "SELECT StuID FROM Student WHERE Sex = 'female' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')",
          "SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'female' AND c.state = 'PA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'female' AND c.state = 'PA' ORDER BY StuID"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'Male' AND country <> 'USA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'Male' AND City.country != 'USA'",
          "SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'Male' AND c.country NOT IN ('USA')",
          "SELECT DISTINCT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'Male' AND country NOT LIKE 'USA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'Male' AND c.country <> 'USA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'Male' AND NOT (country = 'USA')",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'Male' AND c.country != 'USA'",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'Male' AND c.country <> 'USA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'Male' AND c.country NOT IN ('USA')",
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'Male' AND country NOT EQUAL TO 'USA'"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'male' AND country <> 'USA'",
          "SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'male' AND NOT City.country = 'USA'",
          "SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'male' AND City.country != 'USA'",
          "SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'male' AND c.country NOT IN ('USA')",
          "SELECT DISTINCT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'male' AND c.country <> 'USA'",
          "SELECT StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Sex = 'male' AND City.country NOT LIKE 'USA'",
          "SELECT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'male' AND c.country NOT IN ('USA')",
          "SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'male' AND c.country != 'USA'",
          "SELECT StuID FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'male' AND c.country <> 'USA'",
          "SELECT StuID FROM Student JOIN City USING(city_code) WHERE Sex = 'male' AND country != 'USA'"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN ('BAL', 'CHI') AND city2_code IN ('BAL', 'CHI') AND city1_code <> city2_code",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI'",
          "SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') OR (d.city1_code = 'CHI' AND d.city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT MAX(distance) FROM Direct_distance WHERE city1_code IN ('BAL', 'CHI') AND city2_code IN ('BAL', 'CHI')",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' UNION ALL SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT * FROM (SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL') AS distances",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') UNION SELECT distance FROM Direct_distance WHERE (city1_code = 'CHI' AND city2_code = 'BAL')"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code IN ('BAL', 'CHI') AND city2_code IN ('BAL', 'CHI') AND city1_code <> city2_code",
          "SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI'",
          "SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') OR (d.city1_code = 'CHI' AND d.city2_code = 'BAL')",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' UNION SELECT distance FROM Direct_distance WHERE city1_code = 'CHI' AND city2_code = 'BAL'",
          "SELECT TOP 1 distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' ORDER BY distance DESC LIMIT 1",
          "SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
          "SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT d.distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT d.distance FROM Direct_distance d, City c1, City c2 WHERE d.city1_code = c1.city_code AND d.city2_code = c2.city_code AND c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT d.distance FROM Direct_distance d INNER JOIN City c1 ON d.city1_code = c1.city_code INNER JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT (SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) AS Distance",
          "SELECT d.distance FROM Direct_distance d LEFT JOIN City c1 ON d.city1_code = c1.city_code LEFT JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark') LIMIT 1",
          "SELECT TOP 1 distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code JOIN City c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark' ORDER BY distance DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT D.distance FROM Direct_distance D JOIN City C1 ON D.city1_code = C1.city_code JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' AND C2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT D.distance FROM Direct_distance D, City C1, City C2 WHERE D.city1_code = C1.city_code AND C1.city_name = 'Boston' AND D.city2_code = C2.city_code AND C2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark'))",
          "SELECT D.distance FROM Direct_distance AS D INNER JOIN City AS C1 ON D.city1_code = C1.city_code INNER JOIN City AS C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' AND C2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance, City AS C1, City AS C2 WHERE Direct_distance.city1_code = C1.city_code AND C1.city_name = 'Boston' AND Direct_distance.city2_code = C2.city_code AND C2.city_name = 'Newark'",
          "SELECT D.distance FROM Direct_distance D LEFT JOIN City C1 ON D.city1_code = C1.city_code LEFT JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' AND C2.city_name = 'Newark'",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark') UNION SELECT distance FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark')",
          "SELECT D.distance FROM Direct_distance D JOIN City C1 ON D.city1_code = C1.city_code JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' AND C2.city_name = 'Newark' ORDER BY D.distance ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) AS average_distance, MIN(distance) AS minimum_distance, MAX(distance) AS maximum_distance FROM Direct_distance",
          "SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance",
          "SELECT MIN(distance) AS Min_Distance, AVG(distance) AS Avg_Distance, MAX(distance) AS Max_Distance FROM Direct_distance",
          "SELECT MIN(distance) min_distance, AVG(distance) avg_distance, MAX(distance) max_distance FROM Direct_distance",
          "SELECT MIN(Direct_distance.distance) AS Minimum, AVG(Direct_distance.distance) AS Average, MAX(Direct_distance.distance) AS Maximum FROM Direct_distance",
          "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Direct_distance GROUP BY distance",
          "SELECT AVG(Direct_distance.distance) AS AverageDistance, MIN(Direct_distance.distance) AS MinDistance, MAX(Direct_distance.distance) AS MaxDistance FROM Direct_distance",
          "SELECT MIN(distance) MinimumDistance, AVG(distance) AverageDistance, MAX(distance) MaximumDistance FROM Direct_distance",
          "SELECT MIN(distance) AS Minimum_Distance, AVG(distance) AS Average_Distance, MAX(distance) AS Maximum_Distance FROM Direct_distance",
          "SELECT AVG(Direct_distance.distance) as AverageDistance, MIN(Direct_distance.distance) as MinDistance, MAX(Direct_distance.distance) as MaxDistance FROM Direct_distance"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) AS Average_Distance, MIN(distance) AS Minimum_Distance, MAX(distance) AS Maximum_Distance FROM Direct_distance",
          "SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance",
          "SELECT AVG(Direct_distance.distance) AS AverageDistance, MIN(Direct_distance.distance) AS MinDistance, MAX(Direct_distance.distance) AS MaxDistance FROM Direct_distance",
          "SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance",
          "SELECT AVG(distance) average, MIN(distance) minimum, MAX(distance) maximum FROM Direct_distance",
          "SELECT AVG(Direct_distance.distance) average_distance, MIN(Direct_distance.distance) minimum_distance, MAX(Direct_distance.distance) maximum_distance FROM Direct_distance",
          "SELECT AVG(distance) as Average, MIN(distance) as Minimum, MAX(distance) as Maximum FROM Direct_distance",
          "SELECT AVG(distance) 'Average Distance', MIN(distance) 'Minimum Distance', MAX(distance) 'Maximum Distance' FROM Direct_distance",
          "SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance",
          "SELECT AVG(Direct_distance.distance) AS AvgDistance, MIN(Direct_distance.distance) AS MinDistance, MAX(Direct_distance.distance) AS MaxDistance FROM Direct_distance"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT TOP 1 city1_code, city2_code FROM Direct_distance ORDER BY distance DESC",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance LIMIT 1)",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC FETCH FIRST ROW ONLY",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0",
          "SELECT city1_code, city2_code FROM (SELECT city1_code, city2_code, distance FROM Direct_distance ORDER BY distance DESC) AS subquery LIMIT 1",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance >= ALL (SELECT distance FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(D.distance) FROM Direct_distance D)",
          "SELECT D1.city1_code, D1.city2_code FROM Direct_distance D1 WHERE D1.distance = (SELECT MAX(D2.distance) FROM Direct_distance D2)",
          "SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance >= ALL (SELECT distance FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance D1 WHERE D1.distance = (SELECT MAX(distance) FROM Direct_distance D2 WHERE D1.city1_code = D2.city1_code AND D1.city2_code = D2.city2_code)",
          "SELECT TOP 1 city1_code, city2_code FROM Direct_distance ORDER BY distance DESC",
          "SELECT city1_code, city2_code FROM Direct_distance GROUP BY city1_code, city2_code HAVING distance = MAX(distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance GROUP BY city1_code, city2_code)"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(D.distance) FROM Direct_distance D)",
          "SELECT D1.city1_code, D1.city2_code FROM Direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM Direct_distance D2)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance AS D)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance AS D WHERE D.distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(DIST.distance) FROM Direct_distance DIST)",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance > (SELECT AVG(DIST.distance) FROM Direct_distance DIST)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance GROUP BY city1_code, city2_code)",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(DIST.distance) FROM Direct_distance DIST GROUP BY DIST.city1_code, DIST.city2_code)"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT DISTINCT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT DISTINCT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)",
          "SELECT city1_code FROM Direct_distance GROUP BY city1_code HAVING distance > AVG(distance)",
          "SELECT city2_code FROM Direct_distance GROUP BY city2_code HAVING distance > AVG(distance)",
          "SELECT city1_code FROM Direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM Direct_distance D2)",
          "SELECT city2_code FROM Direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM Direct_distance D2)",
          "SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance UNION SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance))",
          "SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance))"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000.0",
          "SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance BETWEEN 0 AND 999",
          "SELECT DISTINCT city1_code, city2_code FROM Direct_distance WHERE distance < 1000",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance <= 999",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < '1000'",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 ORDER BY distance",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 LIMIT 2",
          "SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 AND city1_code != city2_code"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000)",
          "SELECT city_code FROM City WHERE EXISTS (SELECT 1 FROM Direct_distance WHERE (Direct_distance.city1_code = City.city_code OR Direct_distance.city2_code = City.city_code) AND distance < 1000)",
          "SELECT C.city_code FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code WHERE D.distance < 1000",
          "SELECT DISTINCT C.city_code FROM City C, Direct_distance D WHERE (C.city_code = D.city1_code OR C.city_code = D.city2_code) AND D.distance < 1000",
          "SELECT DISTINCT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000) OR city_code IN (SELECT city2_code FROM Direct_distance WHERE distance < 1000)",
          "SELECT DISTINCT C.city_code FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code WHERE D.distance < 1000",
          "SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION ALL SELECT city2_code FROM Direct_distance WHERE distance < 1000)",
          "SELECT DISTINCT city_code FROM City C WHERE EXISTS (SELECT * FROM Direct_distance D WHERE (D.city1_code = C.city_code OR D.city2_code = C.city_code) AND D.distance < 1000)",
          "SELECT DISTINCT C.city_code FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code WHERE D.distance < 1000",
          "SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance D WHERE D.distance < 1000 UNION SELECT city2_code FROM Direct_distance D WHERE D.distance < 1000)"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(distance) AS TotalDistance FROM Direct_distance WHERE 'BAL' IN (city1_code, city2_code)",
          "SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' OR D.city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION ALL SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE EXISTS (SELECT 1 FROM City WHERE City.city_code = Direct_distance.city1_code AND City.city_code = 'BAL') OR EXISTS (SELECT 1 FROM City WHERE City.city_code = Direct_distance.city2_code AND City.city_code = 'BAL')",
          "SELECT SUM(DISTINCT distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT TOTAL(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance D WHERE D.city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY city1_code, city2_code"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE 'BAL' IN (city1_code, city2_code)",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION ALL SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL'",
          "SELECT SUM(d.distance) FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL'",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL' GROUP BY city1_code, city2_code",
          "SELECT SUM(distance) FROM Direct_distance WHERE EXISTS (SELECT 1 FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL')",
          "SELECT SUM(distance) FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL' GROUP BY d.city1_code, d.city2_code",
          "SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY city1_code, city2_code HAVING city1_code = 'BAL' OR city2_code = 'BAL'"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D JOIN City C ON D.city1_code = C.city_code WHERE C.city_name = 'Boston'",
          "SELECT AVG(distance) AS AverageDistance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D, City C WHERE D.city1_code = C.city_code AND C.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance, City WHERE Direct_distance.city1_code = City.city_code AND City.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance D INNER JOIN City C ON D.city1_code = C.city_code WHERE C.city_name = 'Boston'",
          "SELECT AVG(D.distance) FROM Direct_distance D INNER JOIN City C ON D.city1_code = C.city_code AND C.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE EXISTS (SELECT 1 FROM City WHERE city_code = Direct_distance.city1_code AND city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance D WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR D.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) AS AverageDistance FROM Direct_distance D JOIN City C1 ON D.city1_code = C1.city_code JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Boston' OR C2.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D, City C WHERE (D.city1_code = C.city_code AND C.city_name = 'Boston') OR (D.city2_code = C.city_code AND C.city_name = 'Boston')",
          "SELECT AVG(distance) FROM Direct_distance WHERE EXISTS (SELECT 1 FROM City WHERE (City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code) AND City.city_name = 'Boston')",
          "SELECT AVG(D.distance) FROM Direct_distance D INNER JOIN City C ON D.city1_code = C.city_code OR D.city2_code = C.city_code WHERE C.city_name = 'Boston'",
          "SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') UNION ALL SELECT AVG(distance) FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')",
          "SELECT AVG(distance) FROM (SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') UNION ALL SELECT distance FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) AS Distances",
          "SELECT AVG(distance) FROM Direct_distance, City WHERE City.city_code = Direct_distance.city1_code AND City.city_name = 'Boston' OR City.city_code = Direct_distance.city2_code AND City.city_name = 'Boston'",
          "SELECT AVG(Distance) FROM (SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') UNION SELECT distance FROM Direct_distance WHERE city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) AS SubQuery"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1)",
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance LIMIT 1",
          "SELECT TOP 1 city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago')))",
          "SELECT city_name FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY Direct_distance.distance ASC FETCH FIRST 1 ROW ONLY",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance ASC LIMIT 1 WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago'))",
          "SELECT city_name FROM City, Direct_distance WHERE City.city_code = Direct_distance.city2_code AND Direct_distance.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY Direct_distance.distance ASC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago')))",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago')))",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago')) AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago'))"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C2.city_name FROM City C1 JOIN Direct_distance D ON C1.city_code = D.city1_code JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance ASC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)",
          "SELECT TOP 1 C2.city_name FROM City C1, Direct_distance D, City C2 WHERE C1.city_code = D.city1_code AND C2.city_code = D.city2_code AND C1.city_name = 'Chicago' ORDER BY D.distance",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance JOIN City ON City.city_code = Direct_distance.city1_code WHERE city_name = 'Chicago' ORDER BY distance LIMIT 1)",
          "SELECT C2.city_name FROM City AS C1 INNER JOIN Direct_distance AS D ON C1.city_code = D.city1_code INNER JOIN City AS C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance ASC FETCH FIRST 1 ROW ONLY",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC FETCH FIRST ROW ONLY)",
          "SELECT C2.city_name FROM City C1, Direct_distance D, City C2 WHERE C1.city_code = D.city1_code AND C2.city_code = D.city2_code AND C1.city_name = 'Chicago' ORDER BY D.distance ASC LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC) LIMIT 1",
          "SELECT C2.city_name FROM City C1 JOIN Direct_distance D ON C1.city_code = D.city1_code JOIN City C2 ON D.city2_code = C2.city_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance LIMIT 1",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC LIMIT 1",
          "SELECT TOP 1 C.city_name FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')))",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')))",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C WHERE EXISTS (SELECT 1 FROM Direct_distance D WHERE D.city2_code = C.city_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC LIMIT 1",
          "SELECT TOP 1 C.city_name FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC",
          "SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
          "SELECT C.city_name FROM City C, Direct_distance D WHERE C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston')))",
          "SELECT C.city_name FROM City C WHERE EXISTS (SELECT 1 FROM Direct_distance D WHERE D.city2_code = C.city_code AND D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY D.distance DESC LIMIT 1)",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))",
          "SELECT C.city_name FROM City C JOIN (SELECT city2_code, MAX(distance) AS max_distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') GROUP BY city2_code ORDER BY max_distance DESC LIMIT 1) D ON C.city_code = D.city2_code",
          "SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_code, SUM(D.distance) AS total_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_code",
          "SELECT C.city_code, SUM(D.distance) AS total_distance FROM City AS C LEFT JOIN Direct_distance AS D ON C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) AS total_distance FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_code",
          "SELECT C.city_code, SUM(D.distance) FROM City C, Direct_distance D WHERE C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT C.city_code, TOTAL(D.distance) AS total_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY City.city_code",
          "SELECT C.city_code, SUM(D.distance) FROM City C INNER JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code",
          "SELECT C.city_code, SUM(D.distance) AS TotalDistance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT city_code, SUM(distance) AS total_distance FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION ALL SELECT city2_code AS city_code, distance FROM Direct_distance) AS combined GROUP BY city_code",
          "SELECT C.city_code, SUM(D.distance) AS total_distance FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION ALL SELECT city2_code, distance FROM Direct_distance) GROUP BY city_code",
          "SELECT C.city_code, (SELECT SUM(distance) FROM Direct_distance WHERE city1_code = C.city_code OR city2_code = C.city_code) AS total_distance FROM City C",
          "SELECT city_code, SUM(distance) FROM Direct_distance WHERE city1_code = city_code OR city2_code = city_code GROUP BY city_code",
          "SELECT C.city_code, SUM(COALESCE(D1.distance, 0) + COALESCE(D2.distance, 0)) AS total_distance FROM City C LEFT JOIN Direct_distance D1 ON C.city_code = D1.city1_code LEFT JOIN Direct_distance D2 ON C.city_code = D2.city2_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION SELECT city2_code AS city_code, distance FROM Direct_distance) AS distances GROUP BY city_code",
          "SELECT C.city_code, SUM(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_code",
          "SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city1_code, city2_code HAVING city1_code = city_code OR city2_code = city_code",
          "SELECT C.city_code, SUM(distance) FROM City C, Direct_distance D WHERE C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_code"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City AS C INNER JOIN Direct_distance AS D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) AS average_distance FROM City C, Direct_distance D WHERE C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City INNER JOIN Direct_distance ON city_code = city1_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name ORDER BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name HAVING AVG(D.distance) IS NOT NULL",
          "SELECT C.city_name, AVG(D.distance) AS average_distance FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name ORDER BY average_distance DESC"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS average_distance FROM (SELECT city_name, distance FROM City JOIN Direct_distance ON city_code = city1_code UNION ALL SELECT city_name, distance FROM City JOIN Direct_distance ON city_code = city2_code) AS subquery GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C, Direct_distance D WHERE C.city_code = D.city1_code OR C.city_code = D.city2_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM City LEFT JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) AS average_distance FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name UNION SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city2_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) AS avg_distance FROM City INNER JOIN Direct_distance ON city_code IN (city1_code, city2_code) GROUP BY city_name",
          "SELECT C.city_name, AVG(D.distance) AS average_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name UNION ALL SELECT C.city_name, AVG(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code GROUP BY C.city_name",
          "SELECT city_name, AVG(distance) FROM (SELECT city_name, distance FROM City INNER JOIN Direct_distance ON city_code = city1_code UNION SELECT city_name, distance FROM City INNER JOIN Direct_distance ON city_code = city2_code) GROUP BY city_name",
          "SELECT C.city_name, (AVG(D1.distance) + AVG(D2.distance)) / 2 AS avg_distance FROM City C LEFT JOIN Direct_distance D1 ON C.city_code = D1.city1_code LEFT JOIN Direct_distance D2 ON C.city_code = D2.city2_code GROUP BY C.city_name",
          "SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code IN (D.city1_code, D.city2_code) GROUP BY C.city_name"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT D.distance FROM Direct_distance D JOIN Student S1 ON D.city1_code = S1.city_code JOIN Student S2 ON D.city2_code = S2.city_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT D.distance FROM Direct_distance D, Student S1, Student S2 WHERE S1.city_code = D.city1_code AND S2.city_code = D.city2_code AND S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT D.distance FROM Direct_distance D INNER JOIN Student S1 ON D.city1_code = S1.city_code INNER JOIN Student S2 ON D.city2_code = S2.city_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT D.distance FROM Direct_distance AS D JOIN Student AS S1 ON D.city1_code = S1.city_code JOIN Student AS S2 ON D.city2_code = S2.city_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT D.distance FROM Direct_distance D WHERE EXISTS (SELECT 1 FROM Student S1 WHERE S1.city_code = D.city1_code AND S1.Fname = 'Linda' AND S1.LName = 'Smith') AND EXISTS (SELECT 1 FROM Student S2 WHERE S2.city_code = D.city2_code AND S2.Fname = 'Tracy' AND S2.LName = 'Kim')",
          "SELECT D.distance FROM Direct_distance D WHERE D.city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND D.city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT D.distance FROM Direct_distance AS D WHERE D.city1_code = (SELECT city_code FROM Student S WHERE S.Fname = 'Linda' AND S.LName = 'Smith') AND D.city2_code = (SELECT city_code FROM Student S WHERE S.Fname = 'Tracy' AND S.LName = 'Kim')"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT D.distance FROM Direct_distance D JOIN Student S1 ON D.city1_code = S1.city_code JOIN Student S2 ON D.city2_code = S2.city_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')) OR (city2_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city1_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim'))",
          "SELECT MAX(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT MIN(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT distance FROM Direct_distance, Student AS S1, Student AS S2 WHERE Direct_distance.city1_code = S1.city_code AND Direct_distance.city2_code = S2.city_code AND S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT D.distance FROM Direct_distance D, Student S1, Student S2 WHERE S1.city_code = D.city1_code AND S2.city_code = D.city2_code AND S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')",
          "SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')",
          "SELECT D.distance FROM Direct_distance D INNER JOIN Student S1 ON D.city1_code = S1.city_code INNER JOIN Student S2 ON D.city2_code = S2.city_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)",
          "SELECT S.Fname, S.LName FROM Student S JOIN Direct_distance D ON S.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY D.distance DESC LIMIT 1",
          "SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))",
          "SELECT top 1 S.Fname, S.LName FROM Student S, Direct_distance D WHERE S.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY D.distance DESC",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'))",
          "SELECT S.Fname, S.LName FROM Student S INNER JOIN Direct_distance D ON S.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY D.distance DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND distance = (SELECT MAX(distance) FROM Direct_distance))",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC FETCH FIRST ROW ONLY)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT TOP 1 city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC)",
          "SELECT S.Fname, S.LName FROM Student S WHERE EXISTS (SELECT 1 FROM Direct_distance D WHERE S.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND D.distance = (SELECT MAX(distance) FROM Direct_distance))"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))",
          "SELECT S.Fname, S.LName FROM Student S JOIN Direct_distance D ON S.city_code = D.city2_code WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'))",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1 WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'))",
          "SELECT TOP 1 Fname, LName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance >= ALL (SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance D INNER JOIN (SELECT MAX(distance) AS MaxDistance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) AS MaxD ON D.distance = MaxD.MaxDistance)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) AND rownum = 1)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) LIMIT 1)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) FETCH FIRST 1 ROW ONLY)",
          "SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) ORDER BY distance DESC FETCH FIRST ROW ONLY)"
        ]
      ]
    },
    {
      "id": 839,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT City.state FROM City INNER JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT C.state FROM City AS C, Student AS S WHERE C.city_code = S.city_code AND S.Fname = 'Linda'",
          "SELECT state FROM City JOIN Student ON City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT DISTINCT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT C.state FROM City C INNER JOIN Student S ON C.city_code = S.city_code AND S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT C.state FROM City C LEFT JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "address_1",
      "infer_predictions": [
        [
          "SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT City.state FROM City INNER JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT state FROM City, Student WHERE City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT DISTINCT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT City.state AS State FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'",
          "SELECT state FROM City WHERE city_code = (SELECT city_code FROM Student WHERE Fname = 'Linda')",
          "SELECT C.state FROM City AS C, Student AS S WHERE C.city_code = S.city_code AND S.Fname = 'Linda'",
          "SELECT state FROM City INNER JOIN Student ON City.city_code = Student.city_code AND Student.Fname = 'Linda'",
          "SELECT City.state FROM City, Student WHERE City.city_code = Student.city_code AND Student.Fname = 'Linda' ORDER BY City.state"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT * FROM Sailors WHERE age > 30",
          "SELECT sid, name, rating, age FROM Sailors WHERE age > 30",
          "SELECT Sailors.* FROM Sailors WHERE Sailors.age > 30",
          "SELECT sid AS Sailor_ID, name AS Sailor_Name, rating AS Sailor_Rating, age AS Sailor_Age FROM Sailors WHERE age > 30",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY age",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY name",
          "SELECT * FROM Sailors WHERE age > 30 AND rating IS NOT NULL",
          "SELECT Sailors.sid, Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30",
          "SELECT * FROM Sailors s WHERE s.age > 30",
          "SELECT * FROM Sailors WHERE age > 30 GROUP BY sid"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT * FROM Sailors WHERE age > 30",
          "SELECT sid, name, rating, age FROM Sailors WHERE age > 30",
          "SELECT Sailors.* FROM Sailors WHERE Sailors.age > 30",
          "SELECT sid AS Sailor_ID, name AS Sailor_Name, rating AS Sailor_Rating, age AS Sailor_Age FROM Sailors WHERE age > 30",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY age",
          "SELECT * FROM Sailors WHERE age > 30 ORDER BY name",
          "SELECT name, rating, age FROM Sailors WHERE age > 30",
          "SELECT DISTINCT * FROM Sailors WHERE age > 30",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30",
          "SELECT * FROM Sailors s WHERE s.age > 30"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age < 30",
          "SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30",
          "SELECT s.name, s.age FROM Sailors s WHERE s.age < 30",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY age",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY name",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30",
          "SELECT DISTINCT name, age FROM Sailors WHERE age < 30",
          "SELECT name, age FROM Sailors WHERE age BETWEEN 1 AND 29",
          "SELECT name, age FROM Sailors WHERE age <= 29",
          "SELECT name, age FROM Sailors WHERE age IN (SELECT age FROM Sailors WHERE age < 30)"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age < 30",
          "SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30",
          "SELECT s.name, s.age FROM Sailors s WHERE s.age < 30",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY age",
          "SELECT name, age FROM Sailors WHERE age < 30 ORDER BY name",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30",
          "SELECT DISTINCT name, age FROM Sailors WHERE age < 30",
          "SELECT name, age FROM Sailors WHERE age < '30'",
          "SELECT name, age FROM Sailors WHERE age BETWEEN 1 AND 29",
          "SELECT name, age FROM Sailors WHERE age <= 29"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE R.sid = 1",
          "SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid = 1)",
          "SELECT Boats.name FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1",
          "SELECT B.name FROM Boats AS B, Reserves AS R WHERE B.bid = R.bid AND R.sid = 1",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid = 1)",
          "SELECT name FROM Boats WHERE EXISTS (SELECT 1 FROM Reserves WHERE Boats.bid = Reserves.bid AND sid = 1)",
          "SELECT B.name FROM Boats B WHERE B.bid IN (SELECT R.bid FROM Reserves R WHERE R.sid = 1)",
          "SELECT name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid AND Reserves.sid = 1",
          "SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1",
          "SELECT B.name FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid AND R.sid = 1"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
          "SELECT bid FROM Reserves WHERE sid = 1 GROUP BY bid",
          "SELECT DISTINCT R.bid FROM Reserves R WHERE R.sid = 1",
          "SELECT R.bid FROM Reserves R WHERE R.sid = 1 GROUP BY R.bid",
          "SELECT DISTINCT bid FROM Reserves WHERE sid = '1'",
          "SELECT bid FROM Reserves WHERE sid = '1' GROUP BY bid",
          "SELECT DISTINCT bid FROM Reserves AS R WHERE R.sid = 1",
          "SELECT bid FROM Reserves AS R WHERE R.sid = 1 GROUP BY R.bid",
          "SELECT DISTINCT(bid) FROM Reserves WHERE sid = 1",
          "SELECT DISTINCT Reserves.bid FROM Reserves WHERE Reserves.sid = 1"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 102)",
          "SELECT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND R.bid = 102",
          "SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT S.name FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102 AND sid = Sailors.sid)",
          "SELECT S.name FROM Sailors S WHERE EXISTS (SELECT NULL FROM Reserves R WHERE R.sid = S.sid AND R.bid = 102)"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT DISTINCT name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 102)",
          "SELECT TOP 1 name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102",
          "SELECT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT name FROM Sailors WHERE sid = (SELECT sid FROM Reserves WHERE bid = 102 LIMIT 1)",
          "SELECT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 102",
          "SELECT name FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND R.bid = 102"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Boats.bid FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid",
          "SELECT DISTINCT b.bid FROM Boats b, Reserves r WHERE b.bid = r.bid",
          "SELECT DISTINCT bid FROM Boats WHERE bid IN (SELECT bid FROM Reserves)",
          "SELECT bid FROM Boats WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.bid = Boats.bid)",
          "SELECT DISTINCT bid FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid",
          "SELECT DISTINCT b.bid FROM Boats b INNER JOIN Reserves r ON b.bid = r.bid",
          "SELECT DISTINCT Boats.bid FROM Boats, Reserves WHERE Boats.bid = Reserves.bid",
          "SELECT DISTINCT b.bid FROM Boats b WHERE b.bid IN (SELECT bid FROM Reserves)",
          "SELECT DISTINCT bid FROM (SELECT bid FROM Boats UNION SELECT bid FROM Reserves) AS unique_bids",
          "SELECT DISTINCT Boats.bid FROM Boats WHERE Boats.bid IN (SELECT Reserves.bid FROM Reserves)"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.bid FROM Boats B JOIN Reserves R ON B.bid = R.bid",
          "SELECT bid FROM Boats WHERE bid IN (SELECT bid FROM Reserves)",
          "SELECT B.bid FROM Boats B WHERE EXISTS (SELECT 1 FROM Reserves R WHERE R.bid = B.bid)",
          "SELECT DISTINCT bid FROM Reserves",
          "SELECT B.bid FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid",
          "SELECT bid FROM Boats WHERE bid IN (SELECT DISTINCT bid FROM Reserves)",
          "SELECT DISTINCT R.bid FROM Reserves R JOIN Boats B ON R.bid = B.bid",
          "SELECT B.bid FROM Boats B, Reserves R WHERE B.bid = R.bid",
          "SELECT DISTINCT R.bid FROM Reserves R WHERE R.bid IN (SELECT bid FROM Boats)",
          "SELECT bid FROM Boats B WHERE EXISTS (SELECT * FROM Reserves R WHERE R.bid = B.bid)"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0",
          "SELECT name FROM Sailors WHERE name CONTAINS 'e'",
          "SELECT DISTINCT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE CHARINDEX('e', name) > 0",
          "SELECT name FROM Sailors WHERE POSITION('e' IN name) > 0",
          "SELECT name FROM Sailors WHERE name ILIKE '%e%'",
          "SELECT name FROM Sailors WHERE LOWER(name) LIKE '%e%'",
          "SELECT name FROM Sailors WHERE UPPER(name) LIKE '%E%'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'",
          "SELECT DISTINCT name FROM Sailors WHERE name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0",
          "SELECT name FROM Sailors WHERE name CONTAINS 'e'",
          "SELECT name FROM Sailors WHERE CHARINDEX('e', name) > 0",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.name CONTAINS 'e'",
          "SELECT DISTINCT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'",
          "SELECT name FROM Sailors WHERE POSITION('e' IN name) > 0",
          "SELECT name FROM Sailors WHERE name ILIKE '%e%'"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT DISTINCT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age >= ALL (SELECT age FROM Sailors)",
          "SELECT sid FROM Sailors AS S1 WHERE NOT EXISTS (SELECT 1 FROM Sailors AS S2 WHERE S2.age > S1.age)",
          "SELECT sid FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE age < (SELECT MAX(age) FROM Sailors))",
          "SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors GROUP BY age)",
          "SELECT DISTINCT sid FROM Sailors GROUP BY sid HAVING age = MAX(age)",
          "SELECT sid FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)",
          "SELECT sid FROM Sailors ORDER BY age DESC LIMIT 1",
          "SELECT sid FROM Sailors WHERE age = (SELECT age FROM Sailors ORDER BY age DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)",
          "SELECT S.sid FROM Sailors S WHERE S.age > (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors)",
          "SELECT S.sid FROM Sailors S WHERE S.age NOT IN (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE NOT age = (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age > ALL (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors AS S WHERE S.age > (SELECT MIN(S2.age) FROM Sailors S2)",
          "SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)",
          "SELECT sid FROM Sailors WHERE age > (SELECT MIN(S.age) FROM Sailors S)",
          "SELECT sid FROM Sailors WHERE age > (SELECT MINIMUM FROM (SELECT MIN(age) AS MINIMUM FROM Sailors))"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7)",
          "SELECT DISTINCT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) GROUP BY name",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7 ORDER BY age DESC LIMIT 1)",
          "SELECT DISTINCT S1.name FROM Sailors S1 WHERE S1.age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7)",
          "SELECT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) DISTINCT",
          "SELECT DISTINCT name FROM Sailors AS S WHERE S.age > (SELECT MAX(age) FROM Sailors AS S2 WHERE S2.rating > 7)",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7 AND S2.sid != S.sid)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) AND rating <= 7",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7) ORDER BY name"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S1.name FROM Sailors AS S1 WHERE S1.age > ANY (SELECT S2.age FROM Sailors AS S2 WHERE S2.rating > 7)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors WHERE rating > 7)",
          "SELECT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating <= 7)",
          "SELECT DISTINCT S1.name FROM Sailors S1 JOIN Sailors S2 ON S1.age > S2.age WHERE S2.rating > 7",
          "SELECT S1.name FROM Sailors S1 WHERE EXISTS (SELECT 1 FROM Sailors S2 WHERE S2.rating > 7 AND S1.age > S2.age)",
          "SELECT DISTINCT name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7 ORDER BY age ASC LIMIT 1)",
          "SELECT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating <= 7)",
          "SELECT DISTINCT S1.name FROM Sailors S1, Sailors S2 WHERE S1.age > S2.age AND S2.rating > 7",
          "SELECT name FROM Sailors WHERE age > ANY (SELECT age FROM Sailors WHERE rating > 7)",
          "SELECT DISTINCT name FROM Sailors AS S1 WHERE S1.age > (SELECT AVG(age) FROM Sailors AS S2 WHERE S2.rating > 7)"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid",
          "SELECT s.name, s.sid FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT s.name, s.sid FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE sid IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT s.name, s.sid FROM Sailors s, Reserves r WHERE s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(r.sid) >= 1",
          "SELECT s.name, s.sid FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r)",
          "SELECT DISTINCT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NOT NULL",
          "SELECT s.name, s.sid FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 0)"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid",
          "SELECT S.sid, S.name FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NOT NULL",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT DISTINCT R.sid FROM Reserves R)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(R.sid) >= 1",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT R.sid FROM Reserves R WHERE R.sid = S.sid GROUP BY R.sid HAVING COUNT(*) > 0)"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT Sailors.sid, Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid, Sailors.name HAVING COUNT(DISTINCT Reserves.bid) > 1",
          "SELECT s.sid, s.name FROM Sailors s, Reserves r WHERE s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1",
          "SELECT distinct s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1",
          "SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid, Sailors.name HAVING COUNT(DISTINCT Reserves.bid) > 1",
          "SELECT s.sid, s.name FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2)",
          "SELECT DISTINCT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2",
          "SELECT S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R WHERE S.sid = R.sid GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) >= 2)",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
          "SELECT S.name FROM Sailors S INNER JOIN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2) R ON S.sid = R.sid",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves R GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) >= 2)",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) >= 2)",
          "SELECT S.name FROM Sailors S WHERE (SELECT COUNT(DISTINCT R.bid) FROM Reserves R WHERE R.sid = S.sid) >= 2"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT DISTINCT Sailors.sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT s.sid FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue') GROUP BY s.sid",
          "SELECT DISTINCT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red' OR color = 'blue')",
          "SELECT DISTINCT s.sid FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color IN ('red', 'blue'))",
          "SELECT DISTINCT sid FROM (SELECT Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' UNION SELECT Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue') AS subquery",
          "SELECT DISTINCT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves LEFT JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue'))",
          "SELECT DISTINCT Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')",
          "SELECT DISTINCT sid FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT s.sid FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue') GROUP BY s.sid",
          "SELECT DISTINCT s.sid FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT s.sid FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color IN ('red', 'blue'))",
          "SELECT DISTINCT s.sid FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color IN ('red', 'blue')",
          "SELECT DISTINCT s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid LEFT JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue'",
          "SELECT DISTINCT s.sid FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'))",
          "SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT DISTINCT s.sid FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue')",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'))",
          "SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND (Boats.color = 'red' OR Boats.color = 'blue')",
          "SELECT Sailors.name, Sailors.sid FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT name, sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue'))",
          "SELECT Sailors.name AS SailorName, Sailors.sid AS SailorID FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')",
          "SELECT name, sid FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Reserves.sid = Sailors.sid AND Boats.color IN ('red', 'blue'))",
          "SELECT Sailors.name, Sailors.sid FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color IN ('red', 'blue')",
          "SELECT DISTINCT S.name, S.sid FROM Sailors AS S, Reserves AS R, Boats AS B WHERE S.sid = R.sid AND R.bid = B.bid AND (B.color = 'red' OR B.color = 'blue')",
          "SELECT S.name, S.sid FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND (B.color = 'red' OR B.color = 'blue')"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT Sailors.sid, Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue'",
          "SELECT DISTINCT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'))",
          "SELECT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color IN ('red', 'blue')",
          "SELECT s.sid, s.name FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
          "SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid LEFT JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
          "SELECT s.sid, s.name FROM Sailors s INNER JOIN (Reserves r INNER JOIN Boats b ON r.bid = b.bid AND b.color IN ('red', 'blue')) ON s.sid = r.sid",
          "SELECT s.sid, s.name FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE s.sid = r.sid AND b.color IN ('red', 'blue'))",
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue'"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') AND sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue')",
          "SELECT DISTINCT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red') INTERSECT SELECT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue')",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Boats.color = 'red') AND sid IN (SELECT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Boats.color = 'blue')",
          "SELECT sid FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' AND r.sid = s.sid) AND EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue' AND r.sid = s.sid)",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid AND Boats.color IN ('red', 'blue') GROUP BY sid HAVING COUNT(DISTINCT color) = 2)",
          "WITH RedSailors AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'), BlueSailors AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') SELECT sid FROM RedSailors WHERE sid IN (SELECT sid FROM BlueSailors)",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red') INTERSECT SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue')",
          "SELECT sid FROM Sailors s WHERE (SELECT COUNT(DISTINCT color) FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND color IN ('red', 'blue')) = 2",
          "SELECT sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' INTERSECT SELECT sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue'",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red' UNION SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') HAVING COUNT(DISTINCT color) = 2"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') AND sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue')",
          "SELECT DISTINCT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red') INTERSECT SELECT Reserves.sid FROM Reserves INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue'",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Boats.color = 'red') AND sid IN (SELECT Reserves.sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Boats.color = 'blue')",
          "SELECT sid FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' AND Sailors.sid = Reserves.sid) AND EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'blue' AND Sailors.sid = Reserves.sid)",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color IN ('red', 'blue') GROUP BY sid HAVING COUNT(DISTINCT color) = 2)",
          "WITH RedSailors AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'), BlueSailors AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') SELECT sid FROM RedSailors WHERE sid IN (SELECT sid FROM BlueSailors)",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red' UNION SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue')",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') INTERSECT SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue')",
          "SELECT sid FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' AND r.sid = s.sid) AND EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue' AND r.sid = s.sid)",
          "SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red') AND sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue')"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red') AND S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') INTERSECT SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue')",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color IN ('red', 'blue') GROUP BY S.sid, S.name HAVING COUNT(DISTINCT B.color) = 2",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' UNION SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue'",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND R.sid = S.sid) AND EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue' AND R.sid = S.sid)",
          "WITH RedBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'), BlueBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT sid FROM RedBoats) AND S.sid IN (SELECT sid FROM BlueBoats)",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'red') AND S.sid IN (SELECT R.sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'blue')",
          "SELECT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'red' INTERSECT SELECT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'blue'",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON bid WHERE color = 'red') AND sid IN (SELECT sid FROM Reserves JOIN Boats ON bid WHERE color = 'blue')",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S.sid IN (SELECT sid FROM Reserves JOIN Boats ON bid WHERE color = 'blue')"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red') AND S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'red' INTERSECT SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color = 'blue'",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue') GROUP BY S.sid, S.name HAVING COUNT(DISTINCT B.color) = 2",
          "WITH RedBoats AS (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red'), BlueBoats AS (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue') SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT sid FROM RedBoats) AND S.sid IN (SELECT sid FROM BlueBoats)",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND R.sid = S.sid) AND EXISTS (SELECT 1 FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue' AND R.sid = S.sid)",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' UNION SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red') INTERSECT SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')",
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' OR B.color = 'blue' GROUP BY S.sid, S.name HAVING COUNT(DISTINCT B.color) = 2",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red') AND S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue') GROUP BY S.sid, S.name",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S.sid IN (SELECT R.sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid)",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT sid FROM Sailors S WHERE NOT EXISTS (SELECT NULL FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT DISTINCT R.sid FROM Reserves R)",
          "SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT S.sid FROM Sailors S LEFT OUTER JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT Sailors.sid FROM Sailors LEFT OUTER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT NULL FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT DISTINCT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R WHERE R.sid IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT name, sid FROM Sailors EXCEPT SELECT name, sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid",
          "SELECT DISTINCT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT name, sid FROM Sailors AS S WHERE NOT EXISTS (SELECT NULL FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT sid FROM Reserves GROUP BY sid)"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.name, S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT name, sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid)",
          "SELECT Sailors.name, Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT DISTINCT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT name, sid FROM Sailors EXCEPT SELECT name, sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid",
          "SELECT S.name, S.sid FROM Sailors S LEFT OUTER JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)",
          "SELECT name, sid FROM Sailors AS S WHERE NOT EXISTS (SELECT NULL FROM Reserves AS R WHERE R.sid = S.sid)"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT NULL FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT DISTINCT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves WHERE sid IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)",
          "SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid)",
          "SELECT Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
          "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
          "SELECT sid FROM Sailors S WHERE NOT EXISTS (SELECT NULL FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT DISTINCT R.sid FROM Reserves R)",
          "SELECT DISTINCT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)",
          "SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)",
          "SELECT sid FROM Sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM Reserves)"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT DISTINCT name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 103",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 103)",
          "SELECT name FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND R.bid = 103",
          "SELECT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND R.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid AND R.bid = 103",
          "SELECT DISTINCT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves WHERE Sailors.sid = Reserves.sid AND Reserves.bid = 103",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 103)",
          "SELECT name FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND R.bid = 103",
          "SELECT S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND R.bid = 103",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)",
          "SELECT S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 103",
          "SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT MAX(Sailors.rating) FROM Sailors WHERE Sailors.name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors s2 WHERE s2.name = 'Luis') GROUP BY s.name",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors s WHERE s.name = 'Luis')",
          "SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') AND s.name <> 'Luis'"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') GROUP BY S.name",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name)",
          "SELECT name FROM Sailors AS S WHERE S.rating > (SELECT MAX(rating) FROM Sailors AS S2 WHERE S2.name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis') AND S.name <> 'Luis'",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') AND name != 'Luis'",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis') AND name NOT IN (SELECT name FROM Sailors WHERE name = 'Luis')"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S2.rating FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name LIKE 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors AS S WHERE S.rating > (SELECT MAX(rating) FROM Sailors AS S2 WHERE S2.name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' AND rating IS NOT NULL)",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' AND rating > 0)"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S2.rating FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name LIKE 'Luis')",
          "SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name = 'Luis')",
          "SELECT name FROM Sailors AS S WHERE S.rating > (SELECT MAX(rating) FROM Sailors AS S2 WHERE S2.name = 'Luis')",
          "SELECT Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT MAX(Sailors.rating) FROM Sailors WHERE Sailors.name = 'Luis')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name)",
          "SELECT name FROM Sailors WHERE rating > (SELECT TOP 1 MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name ORDER BY MAX(rating) DESC)"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.sid, S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2 GROUP BY S.sid, S.name",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND S.rating > 2",
          "SELECT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2",
          "SELECT sid, name FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves)",
          "SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Sailors.rating > 2",
          "SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) AND rating > 2",
          "SELECT S.sid, S.name FROM Sailors AS S WHERE S.rating > 2 AND EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)",
          "SELECT S.sid, S.name FROM Sailors S WHERE S.rating > 2 AND S.sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT S.sid, S.name FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE S.rating > 2 AND R.sid IS NOT NULL",
          "SELECT S.sid, S.name FROM Sailors S WHERE EXISTS (SELECT * FROM Reserves R WHERE R.sid = S.sid) AND S.rating > 2"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3",
          "SELECT sid, name FROM Sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM Reserves)",
          "SELECT DISTINCT s.sid, s.name FROM Sailors s, Reserves r WHERE s.sid = r.sid AND s.rating >= 3",
          "SELECT Sailors.sid, Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Sailors.rating >= 3",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.rating >= 3 AND EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)",
          "SELECT sid, name FROM Sailors WHERE rating >= 3 AND sid IN (SELECT DISTINCT sid FROM Reserves)",
          "SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3 AND r.sid IS NOT NULL",
          "SELECT s.sid, s.name FROM Sailors s WHERE s.rating >= 3 AND s.sid IN (SELECT sid FROM Reserves WHERE sid = s.sid)",
          "SELECT DISTINCT s.sid, s.name FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3 GROUP BY s.sid, s.name",
          "SELECT s.sid, s.name FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r WHERE r.sid = s.sid) AND s.rating >= 3"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT S.name, S.age FROM Sailors S ORDER BY S.age DESC LIMIT 1",
          "SELECT name, age FROM Sailors ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 name, age FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)",
          "SELECT name, age FROM Sailors AS S WHERE S.age = (SELECT MAX(age) FROM Sailors AS S2)",
          "SELECT FIRST(name), FIRST(age) FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age >= ALL (SELECT age FROM Sailors)",
          "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY age DESC) AS rnk FROM Sailors) WHERE rnk = 1",
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(S.age) FROM Sailors S)"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)",
          "SELECT S.name, S.age FROM Sailors S ORDER BY S.age DESC LIMIT 1",
          "SELECT name, age FROM Sailors ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 name, age FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)",
          "SELECT name, age FROM Sailors AS S WHERE S.age = (SELECT MAX(age) FROM Sailors AS S2)",
          "SELECT S.name, S.age FROM Sailors S WHERE S.age >= ALL (SELECT age FROM Sailors)",
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(S.age) FROM Sailors S)",
          "SELECT FIRST(name), FIRST(age) FROM Sailors ORDER BY age DESC",
          "SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors GROUP BY age)"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors",
          "SELECT COUNT(sid) FROM Sailors",
          "SELECT COUNT(DISTINCT sid) FROM Sailors",
          "SELECT COUNT(sid) AS total_sailors FROM Sailors",
          "SELECT COUNT(*) AS TotalNumberOfSailors FROM Sailors",
          "SELECT COUNT(DISTINCT Sailors.sid) FROM Sailors",
          "SELECT COUNT(Sailors.sid) FROM Sailors",
          "SELECT COUNT(*) FROM Sailors WHERE sid IS NOT NULL",
          "SELECT COUNT(DISTINCT sid) AS TotalSailors FROM Sailors",
          "SELECT COUNT(*) AS Total FROM Sailors WHERE sid > 0"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors",
          "SELECT COUNT(sid) FROM Sailors",
          "SELECT COUNT(Sailors.sid) FROM Sailors",
          "SELECT COUNT(DISTINCT sid) FROM Sailors",
          "SELECT COUNT(DISTINCT Sailors.sid) FROM Sailors",
          "SELECT COUNT(*) AS NumberOfSailors FROM Sailors",
          "SELECT COUNT(sid) AS SailorCount FROM Sailors",
          "SELECT COUNT(Sailors.sid) AS TotalSailors FROM Sailors",
          "SELECT COUNT(DISTINCT sid) AS UniqueSailorCount FROM Sailors",
          "SELECT COUNT(DISTINCT Sailors.sid) AS TotalUniqueSailors FROM Sailors"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) AS avg_age FROM Sailors WHERE rating = 7 GROUP BY rating",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 GROUP BY rating HAVING rating = 7",
          "SELECT AVG(age) AS AverageAge FROM Sailors WHERE rating = 7 AND age IS NOT NULL",
          "SELECT AVG(age) FROM Sailors GROUP BY rating HAVING rating = 7",
          "SELECT AVG(age) FROM Sailors s WHERE s.rating = 7",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) FROM Sailors WHERE rating = '7'",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 AND age > 0"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) FROM Sailors WHERE rating = 7",
          "SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) AS avg_age FROM Sailors WHERE rating = 7 GROUP BY rating",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 GROUP BY rating",
          "SELECT AVG(age) AS AverageAge FROM Sailors WHERE rating = '7'",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 AND age IS NOT NULL",
          "SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7",
          "SELECT AVG(age) FROM Sailors GROUP BY rating HAVING rating = 7",
          "SELECT AVG(age) AS Average_Age FROM Sailors WHERE rating = 7",
          "SELECT AVG(age) FROM Sailors WHERE rating = 7 AND age > 0"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(DISTINCT sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(DISTINCT name) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) AS NumberOfSailors FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%' COLLATE NOCASE",
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%' ESCAPE ''",
          "SELECT COUNT(*) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE LEFT(name, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE UPPER(name) LIKE 'D%'"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(DISTINCT sid) FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) AS SailorCount FROM Sailors WHERE name LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%' COLLATE NOCASE",
          "SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%' ESCAPE ''",
          "SELECT COUNT(*) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE LEFT(name, 1) = 'D'",
          "SELECT COUNT(*) FROM Sailors WHERE UPPER(name) LIKE 'D%'",
          "SELECT COUNT(*) FROM Sailors WHERE LOWER(name) LIKE 'd%'"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors",
          "SELECT AVG(Sailors.rating) AS average_rating, MAX(Sailors.age) AS max_age FROM Sailors",
          "SELECT AVG(rating), MAX(age) FROM Sailors",
          "SELECT AVG(Sailors.rating), MAX(Sailors.age) FROM Sailors",
          "SELECT AVG(rating) average_rating, MAX(age) max_age FROM Sailors",
          "SELECT AVG(Sailors.rating) average_rating, MAX(Sailors.age) max_age FROM Sailors",
          "SELECT average_rating, max_age FROM (SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors)",
          "SELECT AVG(rating) AS AverageRating, MAX(age) AS MaxAge FROM Sailors",
          "SELECT AVG(rating) AS 'Average Rating', MAX(age) AS 'Max Age' FROM Sailors",
          "SELECT AVG(rating) AS avg_rating, MAX(age) AS maximum_age FROM Sailors"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors",
          "SELECT AVG(Sailors.rating) AS AverageRating, MAX(Sailors.age) AS MaxAge FROM Sailors",
          "SELECT AVG(rating), MAX(age) FROM Sailors",
          "SELECT AVG(Sailors.rating), MAX(Sailors.age) FROM Sailors",
          "SELECT AVG(rating) AS avg_rating, MAX(age) AS largest_age FROM Sailors",
          "SELECT AVG(rating) average_rating, MAX(age) largest_age FROM Sailors",
          "SELECT AVG(rating) AS 'Average Rating', MAX(age) AS 'Largest Age' FROM Sailors",
          "SELECT AVG(rating) AS avgRating, MAX(age) AS maxAge FROM Sailors",
          "SELECT AVG(rating) AS AverageRating, MAX(age) AS LargestAge FROM Sailors",
          "SELECT AVG(rating) AS 'Average Rating', MAX(age) AS 'Max Age' FROM Sailors"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid GROUP BY B.name",
          "SELECT name, COUNT(*) AS num_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name",
          "SELECT Boats.name, COUNT(Reserves.bid) AS total_reservations FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name",
          "SELECT b.name, COUNT(r.bid) FROM Boats b, Reserves r WHERE b.bid = r.bid GROUP BY b.name",
          "SELECT name, COUNT(bid) FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name",
          "SELECT Boats.name AS BoatName, COUNT(*) AS NumberOfReservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name ORDER BY Boats.name",
          "SELECT name, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT OUTER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name",
          "SELECT Boats.name, COUNT(Reserves.bid) FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name HAVING COUNT(Reserves.bid) > 0",
          "SELECT name, COUNT(*) AS reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY name ORDER BY name",
          "SELECT b.name, COUNT(*) AS reservation_count FROM Boats b INNER JOIN Reserves r ON b.bid = r.bid GROUP BY b.name ORDER BY reservation_count DESC"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid, B.name",
          "SELECT name, COUNT(bid) AS num_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid, Boats.name",
          "SELECT Boats.name, COUNT(*) AS total_reservations FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name, Boats.bid",
          "SELECT name, COUNT(Reserves.bid) FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY Boats.name, Boats.bid",
          "SELECT B.name AS boat_name, COUNT(*) AS reservation_count FROM Boats B, Reserves R WHERE B.bid = R.bid GROUP BY B.name, B.bid",
          "SELECT name, COUNT(bid) AS reservation_count FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name, Boats.bid",
          "SELECT Boats.name, COUNT(Reserves.bid) AS reservations FROM Boats LEFT OUTER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name, Boats.bid",
          "SELECT B.name, COUNT(R.bid) FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid GROUP BY B.name, B.bid",
          "SELECT name, COUNT(bid) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.name, Boats.bid ORDER BY Boats.name",
          "SELECT B.name AS BoatName, COUNT(R.bid) AS NumberOfReservations FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.name, B.bid"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.bid, COUNT(R.sid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT bid, COUNT(sid) FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT Boats.bid, COUNT(Reserves.sid) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid",
          "SELECT bid, COUNT(sid) AS reservation_count FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT B.bid, COUNT(*) FROM Boats B, Reserves R WHERE B.bid = R.bid AND B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(sid) FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT B.bid, COUNT(R.sid) FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(*) AS TotalReservations FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT B.bid, COUNT(R.sid) AS NumberOfReservations FROM Boats B RIGHT JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.bid, COUNT(R.sid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(sid) FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT Boats.bid, COUNT(Reserves.sid) FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid",
          "SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid",
          "SELECT B.bid, COUNT(*) FROM Boats B, Reserves R WHERE B.bid = R.bid AND B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(sid) AS reservations FROM Reserves GROUP BY bid HAVING bid > 50",
          "SELECT Boats.bid, COUNT(Reserves.sid) AS TotalReservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Boats.bid > 50 GROUP BY Boats.bid",
          "SELECT bid, COUNT(sid) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE bid > 50) GROUP BY bid",
          "SELECT B.bid, COUNT(R.sid) FROM Boats AS B LEFT JOIN Reserves AS R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid",
          "SELECT bid, COUNT(sid) FROM Reserves WHERE bid > 50 GROUP BY bid ORDER BY bid"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING COUNT(R.bid) > 1",
          "SELECT name, COUNT(bid) AS num_reservations FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT Boats.name, COUNT(*) AS total_reservations FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(*) > 1",
          "SELECT B.name, COUNT(R.bid) FROM Boats B, Reserves R WHERE B.bid = R.bid GROUP BY B.name HAVING COUNT(R.bid) > 1",
          "SELECT name, COUNT(bid) FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name HAVING COUNT(bid) > 1",
          "SELECT B.name, COUNT(*) AS reservation_count FROM Reserves R RIGHT JOIN Boats B ON R.bid = B.bid GROUP BY B.name HAVING COUNT(R.bid) > 1",
          "SELECT name, COUNT(Reserves.bid) AS num_reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.name HAVING COUNT(R.bid) > 1",
          "SELECT name, COUNT(bid) AS reservation_count FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT B.name, COUNT(*) FROM Boats B JOIN Reserves R ON B.bid = R.bid GROUP BY B.name HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT bid, COUNT(*) AS reservation_count FROM Reserves GROUP BY bid HAVING COUNT(*) > 1",
          "SELECT R.bid, COUNT(R.bid) AS num_reservations FROM Reserves R GROUP BY R.bid HAVING COUNT(R.bid) > 1",
          "SELECT bid, COUNT(bid) FROM Reserves GROUP BY bid HAVING COUNT(bid) > 1",
          "SELECT Reserves.bid, COUNT(Reserves.bid) FROM Reserves GROUP BY Reserves.bid HAVING COUNT(Reserves.bid) > 1",
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1",
          "SELECT R.bid, COUNT(*) FROM Reserves AS R GROUP BY R.bid HAVING COUNT(*) > 1",
          "SELECT bid, COUNT(bid) AS TotalReservations FROM Reserves GROUP BY bid HAVING TotalReservations > 1",
          "SELECT bid, COUNT(*) AS NumberOfReservations FROM Reserves GROUP BY bid HAVING NumberOfReservations > 1",
          "SELECT bid, COUNT(bid) AS ReservationCount FROM Reserves GROUP BY bid HAVING ReservationCount > 1",
          "SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.bid, COUNT(R.sid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY B.bid",
          "SELECT bid, COUNT(sid) AS num_reservations FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE sid > 1) GROUP BY bid",
          "SELECT Boats.bid, COUNT(*) AS total_reservations FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid INNER JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.bid",
          "SELECT bid, COUNT(sid) FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY bid",
          "SELECT B.bid, COUNT(R.sid) FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.sid > 1 GROUP BY B.bid",
          "SELECT bid, COUNT(DISTINCT sid) AS reservation_count FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE sid > 1 GROUP BY bid",
          "SELECT bid, COUNT(sid) FROM Reserves, Sailors WHERE Reserves.sid = Sailors.sid AND Sailors.sid > 1 GROUP BY bid",
          "SELECT Boats.bid, COUNT(Reserves.sid) AS num_reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid LEFT JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.bid",
          "SELECT bid, COUNT(*) FROM Reserves INNER JOIN Sailors ON Reserves.sid = Sailors.sid WHERE sid > 1 GROUP BY bid",
          "SELECT B.bid, COUNT(*) AS reservation_count FROM Boats B LEFT JOIN (Reserves R INNER JOIN Sailors S ON R.sid = S.sid AND S.sid > 1) ON B.bid = R.bid GROUP BY B.bid"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT B.name, COUNT(R.bid) AS reservation_count FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY R.bid",
          "SELECT Boats.name, COUNT(*) AS num_reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.bid",
          "SELECT B.name AS Boat_Name, COUNT(R.bid) AS Total_Reservations FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid INNER JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(Reserves.bid) FROM Boats, Reserves, Sailors WHERE Boats.bid = Reserves.bid AND Reserves.sid = Sailors.sid AND Sailors.sid > 1 GROUP BY Boats.name",
          "SELECT B.name, COUNT(*) FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.sid > 1 GROUP BY B.name",
          "SELECT name, COUNT(bid) AS Reservations FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Boats.name ORDER BY Boats.name",
          "SELECT B.name, COUNT(R.bid) FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid LEFT JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY B.name",
          "SELECT B.name AS Boat, COUNT(*) AS Res_Count FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY B.name ORDER BY B.name ASC",
          "SELECT B.name, COUNT(R.bid) AS Reservations FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.sid > 1 GROUP BY B.name ORDER BY B.name DESC",
          "SELECT name, COUNT(*) AS Reservation_Count FROM Boats INNER JOIN Reserves ON Boats.bid = Reserves.bid INNER JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY name"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.rating, AVG(S.age) AS avg_age FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating",
          "SELECT rating, AVG(age) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) average_age FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(Sailors.age) AS AverageAge FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(Sailors.age) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) AS avg_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red' GROUP BY rating",
          "SELECT Sailors.rating, AVG(Sailors.age) AS Average_Age FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) AS AvgAge FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid INNER JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.rating, AVG(S.age) AS avg_age FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating",
          "SELECT rating, AVG(age) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) AS average_age FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(Sailors.age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(Sailors.age) AS AverageAge FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) FROM Sailors AS S JOIN Reserves AS R ON S.sid = R.sid JOIN Boats AS B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) average_age FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating",
          "SELECT rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT Sailors.rating, AVG(Sailors.age) AS AvgAge FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating",
          "SELECT rating, AVG(age) AS Avg_Age FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY rating"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age DESC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age DESC",
          "SELECT S.name, S.rating, S.age FROM Sailors AS S ORDER BY S.rating, S.age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age DESC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age ASC"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, rating, age FROM Sailors ORDER BY rating, age",
          "SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY Sailors.rating ASC, Sailors.age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC",
          "SELECT S.name, S.rating, S.age FROM Sailors S ORDER BY S.rating, S.age",
          "SELECT name AS SailorName, rating AS SailorRating, age AS SailorAge FROM Sailors ORDER BY rating, age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age DESC",
          "SELECT * FROM Sailors ORDER BY rating, age",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age DESC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating DESC, age ASC",
          "SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Boats",
          "SELECT COUNT(bid) FROM Boats",
          "SELECT COUNT(bid) AS TotalBoats FROM Boats",
          "SELECT COUNT(*) AS TotalBoats FROM Boats",
          "SELECT COUNT(ALL bid) FROM Boats",
          "SELECT COUNT(DISTINCT bid) FROM Boats",
          "SELECT COUNT(DISTINCT bid) AS TotalBoats FROM Boats",
          "SELECT COUNT(ALL *) FROM Boats",
          "SELECT COUNT(*) FROM Boats AS total_number_of_boats",
          "SELECT COUNT(bid) FROM Boats AS total_number_of_boats"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Boats",
          "SELECT COUNT(bid) FROM Boats",
          "SELECT COUNT(bid) AS NumberOfBoats FROM Boats",
          "SELECT COUNT(*) AS BoatCount FROM Boats",
          "SELECT COUNT(1) FROM Boats",
          "SELECT COUNT(bid) FROM Boats WHERE bid IS NOT NULL",
          "SELECT COUNT(DISTINCT bid) FROM Boats",
          "SELECT COUNT(*) FROM Boats WHERE bid > 0",
          "SELECT COUNT(*) AS TotalBoats FROM Boats",
          "SELECT COUNT(bid) FROM Boats WHERE bid > 0"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) AS NumberOfRedBoats FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) AS RedBoatsCount FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color LIKE 'red'",
          "SELECT COUNT(*) FROM Boats WHERE LOWER(color) = 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE LOWER(color) = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color = 'red' GROUP BY color",
          "SELECT COUNT(*) FROM Boats WHERE color = 'red' AND color IS NOT NULL",
          "SELECT COUNT(*) FROM Boats WHERE TRIM(color) = 'red'"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) AS red_boat_count FROM Boats WHERE color = 'red'",
          "SELECT COUNT(bid) AS red_boat_count FROM Boats WHERE color = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color LIKE 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE color LIKE 'red'",
          "SELECT COUNT(*) FROM Boats WHERE LOWER(color) = 'red'",
          "SELECT COUNT(bid) FROM Boats WHERE LOWER(color) = 'red'",
          "SELECT COUNT(*) FROM Boats WHERE color = 'Red'",
          "SELECT COUNT(bid) FROM Boats WHERE color = 'Red'"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30",
          "SELECT B.name FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.age >= 20 AND S.age <= 30",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age > 19 AND age < 31))",
          "SELECT boat_name FROM (SELECT B.name AS boat_name, S.age AS sailor_age FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid INNER JOIN Sailors S ON R.sid = S.sid) AS SubQuery WHERE sailor_age BETWEEN 20 AND 30",
          "SELECT DISTINCT B.name FROM Boats AS B INNER JOIN Reserves AS R ON B.bid = R.bid INNER JOIN Sailors AS S ON R.sid = S.sid WHERE S.age > 19 AND S.age < 31",
          "SELECT B.name FROM Boats B WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE R.bid = B.bid AND S.age BETWEEN 20 AND 30)",
          "SELECT B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON S.sid = R.sid WHERE S.age >= 20 AND S.age <= 30 GROUP BY B.name",
          "SELECT DISTINCT B.name FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND S.sid = R.sid AND S.age BETWEEN 20 AND 30",
          "SELECT B.name FROM Boats B WHERE B.bid IN (SELECT R.bid FROM Reserves R INNER JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30)",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30",
          "SELECT B.name FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.age >= 20 AND S.age <= 30",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age >= 20 AND age <= 30))",
          "SELECT boat_name FROM (SELECT B.name AS boat_name, S.age AS sailor_age FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid INNER JOIN Sailors S ON R.sid = S.sid) AS SubQuery WHERE sailor_age BETWEEN 20 AND 30",
          "SELECT DISTINCT B.name FROM Boats AS B INNER JOIN Reserves AS R ON B.bid = R.bid INNER JOIN Sailors AS S ON R.sid = S.sid WHERE S.age > 19 AND S.age < 31",
          "SELECT B.name FROM Boats B WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE R.bid = B.bid AND S.age BETWEEN 20 AND 30)",
          "SELECT DISTINCT B.name FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.age > 19 AND S.age < 31",
          "SELECT B.name FROM Boats B JOIN Reserves R ON B.bid = R.bid JOIN Sailors S ON S.sid = R.sid WHERE S.age BETWEEN 20 AND 30 GROUP BY B.name",
          "SELECT DISTINCT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE age BETWEEN 20 AND 30)",
          "SELECT B.name FROM Boats B JOIN (SELECT R.bid FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30) AS Filtered ON B.bid = Filtered.bid"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S1.rating) FROM Sailors S1 JOIN Reserves R ON S1.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')))",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S1.rating FROM Sailors S1 JOIN Reserves R ON S1.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(Sailors.rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT DISTINCT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S1.rating) FROM Sailors S1, Reserves R, Boats B WHERE S1.sid = R.sid AND R.bid = B.bid AND B.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S1.rating) FROM Sailors S1 INNER JOIN Reserves R ON S1.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(Sailors.rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S1.rating) FROM Sailors S1, Reserves R, Boats B WHERE S1.sid = R.sid AND R.bid = B.bid AND B.color = 'red' GROUP BY S1.sid)"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S2.rating FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red')",
          "SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)",
          "SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red')",
          "SELECT DISTINCT S.name FROM Sailors S LEFT JOIN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red') R ON S.sid = R.sid WHERE R.sid IS NULL OR S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 JOIN Reserves R2 ON S2.sid = R2.sid JOIN Boats B2 ON R2.bid = B2.bid WHERE B2.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 INNER JOIN Reserves R ON S2.sid = R.sid INNER JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT name FROM Sailors WHERE rating > (SELECT MAX(Sailors.rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')",
          "SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT MAX(rating) FROM Sailors",
          "SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1",
          "SELECT TOP 1 rating FROM Sailors ORDER BY rating DESC",
          "SELECT rating FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors)",
          "SELECT rating FROM Sailors GROUP BY rating HAVING rating = MAX(rating)",
          "SELECT rating FROM Sailors ORDER BY rating DESC FETCH FIRST ROW ONLY",
          "SELECT rating FROM Sailors WHERE rating IN (SELECT MAX(rating) FROM Sailors)",
          "SELECT MAX(Sailors.rating) AS highest_rating FROM Sailors",
          "SELECT rating FROM Sailors ORDER BY rating DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
          "SELECT rating FROM (SELECT rating FROM Sailors ORDER BY rating DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT MAX(rating) FROM Sailors",
          "SELECT MAX(Sailors.rating) AS MaxRating FROM Sailors",
          "SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1",
          "SELECT TOP 1 rating FROM Sailors ORDER BY rating DESC",
          "SELECT rating FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors)",
          "SELECT MAX(rating) AS HighestRating FROM Sailors",
          "SELECT rating FROM Sailors GROUP BY rating HAVING rating = MAX(rating)",
          "SELECT MAX(Sailors.rating) FROM Sailors",
          "SELECT * FROM (SELECT rating FROM Sailors ORDER BY rating DESC) WHERE rownum = 1",
          "SELECT rating FROM Sailors ORDER BY rating DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.name = 'Melon'",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')",
          "SELECT s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.name = 'Melon'",
          "SELECT s.name FROM Sailors s INNER JOIN (Reserves r INNER JOIN Boats b ON r.bid = b.bid AND b.name = 'Melon') ON s.sid = r.sid",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Sailors.sid = Reserves.sid AND Boats.name = 'Melon')",
          "SELECT s.name FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.name = 'Melon')",
          "SELECT DISTINCT s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid LEFT JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))",
          "SELECT DISTINCT Sailors.name FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.name = 'Melon'",
          "SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'",
          "SELECT name FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')",
          "SELECT Sailors.name FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.name = 'Melon'",
          "SELECT DISTINCT name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'",
          "SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Reserves.sid = Sailors.sid AND Boats.name = 'Melon')",
          "SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT bid FROM Boats WHERE name = 'Melon')",
          "SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves, Boats WHERE Reserves.bid = Boats.bid AND Boats.name = 'Melon')"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY rating DESC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC",
          "SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC",
          "SELECT name, age FROM Sailors SORT BY rating DESCENDING",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name ASC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, age ASC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name",
          "SELECT Sailors.name AS SailorName, Sailors.age AS SailorAge FROM Sailors ORDER BY Sailors.rating DESC",
          "SELECT name AS 'Sailor Name', age AS 'Sailor Age' FROM Sailors ORDER BY rating DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "boat_1",
      "infer_predictions": [
        [
          "SELECT name, age FROM Sailors ORDER BY rating DESC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC",
          "SELECT name, age FROM Sailors SORT BY rating DESCENDING",
          "SELECT name, age FROM Sailors ORDER BY rating DESCENDING",
          "SELECT name AS SailorName, age AS SailorAge FROM Sailors ORDER BY rating DESC",
          "SELECT `name`, `age` FROM `Sailors` ORDER BY `rating` DESC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name ASC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, age ASC",
          "SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC, Sailors.name ASC",
          "SELECT name, age FROM Sailors ORDER BY rating DESC, name ASC, age ASC"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1",
          "SELECT TOP 1 Model FROM headphone ORDER BY Price DESC",
          "SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT Model FROM headphone ORDER BY Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Model FROM headphone AS h WHERE h.Price = (SELECT MAX(Price) FROM headphone AS hp)",
          "SELECT Model FROM headphone WHERE Price >= ALL (SELECT Price FROM headphone)",
          "SELECT Model FROM (SELECT Model, Price FROM headphone ORDER BY Price DESC) WHERE ROWNUM = 1",
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone) LIMIT 1"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1",
          "SELECT TOP 1 Model FROM headphone ORDER BY Price DESC",
          "SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price = (SELECT MAX(Price) FROM headphone)",
          "SELECT Model FROM headphone ORDER BY Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Model FROM headphone AS h ORDER BY h.Price DESC LIMIT 1",
          "SELECT Model FROM (SELECT Model, Price FROM headphone ORDER BY Price DESC) WHERE ROWNUM = 1",
          "SELECT Model FROM headphone WHERE Price >= ALL (SELECT Price FROM headphone)",
          "SELECT Model FROM headphone ORDER BY Price DESC, Model ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC",
          "SELECT Model FROM headphone GROUP BY Model ORDER BY Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model",
          "SELECT Model FROM headphone ORDER BY Model ASC DISTINCT",
          "SELECT DISTINCT(Model) FROM headphone ORDER BY Model ASC",
          "SELECT DISTINCT Model AS SortedModels FROM headphone ORDER BY SortedModels",
          "SELECT Model FROM headphone WHERE Model IS NOT NULL GROUP BY Model ORDER BY Model ASC",
          "SELECT DISTINCT Model FROM headphone WHERE Model IS NOT NULL ORDER BY Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASCENDING",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC",
          "SELECT Model FROM headphone GROUP BY Model ORDER BY Model",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model",
          "SELECT Model FROM headphone WHERE Model IS NOT NULL GROUP BY Model ORDER BY Model ASC",
          "SELECT DISTINCT Model FROM headphone WHERE Model IS NOT NULL ORDER BY Model ASC",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE",
          "SELECT DISTINCT Model FROM headphone ORDER BY UPPER(Model)",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASCENDING",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC, Headphone_ID ASC",
          "SELECT DISTINCT Model FROM headphone ORDER BY Model ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Class, COUNT(*) AS frequency FROM headphone GROUP BY Class ORDER BY frequency DESC LIMIT 1",
          "SELECT TOP 1 Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC",
          "SELECT Class FROM (SELECT Class, COUNT(*) as Count FROM headphone GROUP BY Class) AS freq ORDER BY freq.Count DESC LIMIT 1",
          "SELECT Class, MAX(count) FROM (SELECT Class, COUNT(*) as count FROM headphone GROUP BY Class) sub GROUP BY Class ORDER BY count DESC LIMIT 1",
          "SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM headphone GROUP BY Class) tmp)",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Class, COUNT(*) as Total FROM headphone GROUP BY Class ORDER BY Total DESC LIMIT 1",
          "SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC, Class ASC LIMIT 1",
          "SELECT Class, COUNT(*) as Count FROM headphone GROUP BY Class ORDER BY Count DESC, Class LIMIT 1"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT H.Class FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Class ORDER BY SUM(S.Quantity) DESC LIMIT 1",
          "SELECT Class FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class ORDER BY SUM(stock.Quantity) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 headphone.Class FROM headphone, stock WHERE headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Class ORDER BY SUM(stock.Quantity) DESC",
          "SELECT Class FROM (SELECT Class, SUM(Quantity) AS TotalQuantity FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class) AS SubQuery ORDER BY TotalQuantity DESC LIMIT 1",
          "SELECT Class FROM headphone AS H INNER JOIN stock AS S ON H.Headphone_ID = S.Headphone_ID GROUP BY Class HAVING SUM(S.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID) AS SubMax)",
          "SELECT Class FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class ORDER BY SUM(stock.Quantity) DESC LIMIT 1",
          "SELECT Class, MAX(TotalQuantity) FROM (SELECT Class, SUM(Quantity) AS TotalQuantity FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class) AS QuantityTable",
          "SELECT Class FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY Class ORDER BY SUM(s.Quantity) DESC LIMIT 1",
          "SELECT Class FROM headphone h INNER JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY Class ORDER BY SUM(s.Quantity) DESC LIMIT 1",
          "SELECT Class FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class ORDER BY SUM(Quantity) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT H.Class FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Class HAVING SUM(S.Quantity) > 2",
          "SELECT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) > 2)",
          "SELECT DISTINCT H.Class FROM headphone H, stock S WHERE H.Headphone_ID = S.Headphone_ID GROUP BY H.Class HAVING SUM(S.Quantity) > 2",
          "SELECT Class FROM (SELECT Class, SUM(Quantity) AS TotalQuantity FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class) AS SubQuery WHERE TotalQuantity > 2",
          "SELECT headphone.Class FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Class HAVING SUM(stock.Quantity) > 2",
          "SELECT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(*) > 2)",
          "SELECT Class FROM headphone H WHERE EXISTS (SELECT 1 FROM stock S WHERE S.Headphone_ID = H.Headphone_ID GROUP BY S.Headphone_ID HAVING SUM(S.Quantity) > 2)",
          "SELECT Class FROM headphone H JOIN (SELECT Headphone_ID, SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID HAVING Total > 2) S ON H.Headphone_ID = S.Headphone_ID",
          "SELECT DISTINCT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) > 2)",
          "SELECT headphone.Class FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Class HAVING COUNT(DISTINCT stock.Store_ID) * SUM(stock.Quantity) > 2"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class HAVING SUM(Quantity) > 2)",
          "SELECT Class FROM headphone GROUP BY Class HAVING SUM((SELECT Quantity FROM stock WHERE stock.Headphone_ID = headphone.Headphone_ID)) <= 2",
          "SELECT h.Class FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Class HAVING COALESCE(SUM(s.Quantity), 0) <= 2",
          "SELECT DISTINCT Class FROM headphone WHERE Class NOT IN (SELECT Class FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class HAVING SUM(Quantity) > 2)",
          "SELECT Class FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID GROUP BY s.Headphone_ID HAVING SUM(s.Quantity) > 2)",
          "SELECT Class FROM headphone h WHERE (SELECT SUM(Quantity) FROM stock s WHERE s.Headphone_ID = h.Headphone_ID) <= 2 GROUP BY Class",
          "SELECT DISTINCT h.Class FROM headphone h, stock s WHERE h.Headphone_ID = s.Headphone_ID GROUP BY h.Class HAVING SUM(s.Quantity) <= 2",
          "SELECT Class FROM headphone h WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) <= 2)",
          "SELECT h.Class FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Class HAVING SUM(s.Quantity) <= 2",
          "SELECT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) <= 2)"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class, COUNT(headphone.Headphone_ID) AS Count FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT h.Class, COUNT(h.Headphone_ID) FROM headphone h WHERE h.Price > 200 GROUP BY h.Class",
          "SELECT Class, COUNT(Headphone_ID) AS HeadphoneCount FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class, COUNT(*) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class ORDER BY Class",
          "SELECT Class, COUNT(Headphone_ID) AS TotalHeadphones FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) AS Total FROM headphone WHERE Price > 200 GROUP BY Class"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(Headphone_ID) AS Count FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class, COUNT(*) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT h.Class, COUNT(*) FROM headphone h WHERE h.Price > 200 GROUP BY h.Class",
          "SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT Class, COUNT(*) FROM headphone GROUP BY Class HAVING Price > 200",
          "SELECT Class, COUNT(*) AS Total FROM headphone WHERE Price > 200 GROUP BY Class",
          "SELECT headphone.Class, COUNT(headphone.Headphone_ID) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class",
          "SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class ORDER BY Class"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Earpads) FROM headphone",
          "SELECT COUNT(UNIQUE Earpads) FROM headphone",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone) AS unique_earpads",
          "SELECT COUNT(DISTINCT Earpads) AS NumberOfEarpads FROM headphone",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone",
          "SELECT COUNT(DISTINCT Earpads) FROM headphone WHERE Earpads IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT Earpads FROM headphone GROUP BY Earpads) AS distinct_earpads",
          "SELECT COUNT(DISTINCT Earpads) FROM headphone GROUP BY Earpads",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone WHERE Earpads != '') AS non_empty_earpads",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone WHERE Earpads <> ''"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Earpads) FROM headphone",
          "SELECT COUNT(UNIQUE Earpads) FROM headphone",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone)",
          "SELECT COUNT(DISTINCT Earpads) AS NumberOfDifferentEarpads FROM headphone",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone",
          "SELECT COUNT(Earpads) FROM (SELECT DISTINCT Earpads FROM headphone)",
          "SELECT COUNT(DISTINCT Earpads) FROM headphone GROUP BY Earpads",
          "SELECT COUNT(*) FROM (SELECT Earpads FROM headphone GROUP BY Earpads)",
          "SELECT COUNT(DISTINCT Earpads) FROM headphone WHERE Earpads IS NOT NULL",
          "SELECT DISTINCT COUNT(Earpads) FROM headphone WHERE Earpads IS NOT NULL"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT H.Earpads FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Earpads ORDER BY SUM(S.Quantity) DESC LIMIT 2",
          "SELECT Earpads FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads ORDER BY SUM(stock.Quantity) DESC FETCH FIRST 2 ROWS ONLY",
          "SELECT top 2 Earpads, SUM(Quantity) as TotalQuantity FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads ORDER BY TotalQuantity DESC",
          "SELECT Earpads FROM (SELECT Earpads, SUM(Quantity) as Total FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads) AS SubQuery ORDER BY Total DESC LIMIT 2",
          "SELECT Earpads FROM headphone, stock WHERE headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads ORDER BY SUM(stock.Quantity) DESC LIMIT 2",
          "SELECT DISTINCT Earpads FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY Earpads ORDER BY SUM(s.Quantity) DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) as Count FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads ORDER BY Count DESC LIMIT 2",
          "SELECT Earpads FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY Earpads HAVING SUM(s.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) as Total FROM stock GROUP BY Headphone_ID) as Sub) LIMIT 2",
          "SELECT Earpads, TotalQuantity FROM (SELECT Earpads, SUM(Quantity) as TotalQuantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads) as Result ORDER BY TotalQuantity DESC LIMIT 2",
          "SELECT Earpads FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY Earpads ORDER BY SUM(s.Quantity) DESC LIMIT 2"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads, COUNT(Headphone_ID) AS Num_Headphones FROM headphone GROUP BY Earpads ORDER BY Num_Headphones DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) AS Total FROM headphone GROUP BY Earpads ORDER BY Total DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) FROM headphone GROUP BY Earpads ORDER BY COUNT(Headphone_ID) DESC FETCH FIRST 2 ROWS ONLY",
          "SELECT h.Earpads, COUNT(h.Headphone_ID) AS Count FROM headphone h GROUP BY h.Earpads ORDER BY Count DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) AS Headphone_Count FROM headphone GROUP BY Earpads HAVING COUNT(Headphone_ID) > 0 ORDER BY Headphone_Count DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) AS Count FROM headphone GROUP BY Earpads ORDER BY Count DESC LIMIT 2",
          "SELECT Earpads, COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) AS Total_Headphones FROM headphone GROUP BY Earpads ORDER BY Total_Headphones DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) FROM headphone GROUP BY Earpads ORDER BY COUNT(Headphone_ID) DESC LIMIT 2",
          "SELECT Earpads, COUNT(Headphone_ID) AS Count FROM headphone GROUP BY Earpads ORDER BY Count DESC LIMIT 2"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1",
          "SELECT h.Model, h.Class, h.Construction FROM headphone h WHERE h.Price = (SELECT MIN(Price) FROM headphone)",
          "SELECT Model, Class, Construction FROM headphone WHERE Price IN (SELECT MIN(Price) FROM headphone)",
          "SELECT TOP 1 Model, Class, Construction FROM headphone ORDER BY Price",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price LIMIT 1",
          "SELECT * FROM (SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC) AS subquery LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone) LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone AS h WHERE h.Price = (SELECT MIN(h2.Price) FROM headphone h2)",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone) FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)",
          "SELECT h.Model, h.Class, h.Construction FROM headphone h ORDER BY h.Price ASC LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 Model, Class, Construction FROM headphone ORDER BY Price",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone) LIMIT 1",
          "SELECT Model, Class, Construction FROM headphone AS h WHERE h.Price = (SELECT MIN(Price) FROM headphone AS hp)",
          "SELECT Model, Class, Construction FROM headphone WHERE Price IN (SELECT MIN(Price) FROM headphone)",
          "SELECT * FROM (SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC) WHERE ROWNUM = 1",
          "SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone) ORDER BY Price LIMIT 1",
          "SELECT Model, Class, Construction FROM (SELECT Model, Class, Construction, Price FROM headphone ORDER BY Price ASC) AS sub LIMIT 1"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction",
          "SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction",
          "SELECT headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Construction",
          "SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction",
          "SELECT AVG(Price), Construction FROM headphone GROUP BY Construction",
          "SELECT Construction, AVG(Price) AS Avg_Price FROM headphone GROUP BY Construction",
          "SELECT AVG(Price) AS Avg_Price, Construction FROM headphone GROUP BY Construction",
          "SELECT headphone.Construction, AVG(headphone.Price) FROM headphone GROUP BY headphone.Construction",
          "SELECT AVG(headphone.Price) AS Average_Price, headphone.Construction FROM headphone GROUP BY headphone.Construction",
          "SELECT AVG(headphone.Price), headphone.Construction FROM headphone GROUP BY headphone.Construction"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction",
          "SELECT headphone.Construction, AVG(headphone.Price) AS AvgPrice FROM headphone GROUP BY headphone.Construction",
          "SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction",
          "SELECT AVG(Price), Construction FROM headphone GROUP BY Construction",
          "SELECT `Construction`, AVG(`Price`) AS `Average Price` FROM `headphone` GROUP BY `Construction`",
          "SELECT Construction AS Type, AVG(Price) AS AverageCost FROM headphone GROUP BY Type",
          "SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction ORDER BY Construction",
          "SELECT Construction, AVG(Price) AS AveragePrice FROM headphone GROUP BY Construction ORDER BY AveragePrice DESC",
          "SELECT AVG(Price) Average_Price, Construction FROM headphone GROUP BY Construction HAVING AVG(Price) IS NOT NULL",
          "SELECT Construction, ROUND(AVG(Price), 2) AS Avg_Price FROM headphone GROUP BY Construction"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone WHERE Class IN (SELECT Class FROM headphone WHERE Earpads = 'Bowls') INTERSECT SELECT Class FROM headphone WHERE Class IN (SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads')",
          "SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'",
          "SELECT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' AND h.Class IN (SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads')",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' AND Class IN (SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads')",
          "WITH Bowls AS (SELECT Class FROM headphone WHERE Earpads = 'Bowls'), ComfortPads AS (SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads') SELECT Bowls.Class FROM Bowls JOIN ComfortPads ON Bowls.Class = ComfortPads.Class",
          "SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2",
          "SELECT Class FROM (SELECT Class, COUNT(DISTINCT Earpads) AS EarpadTypes FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class) AS SubQuery WHERE EarpadTypes = 2",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' UNION SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Comfort Pads' HAVING COUNT(*) > 1",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' UNION ALL SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads' HAVING COUNT(*) > 1",
          "SELECT Class FROM headphone h1 WHERE EXISTS (SELECT 1 FROM headphone h2 WHERE h1.Class = h2.Class AND h2.Earpads = 'Comfort Pads') AND h1.Earpads = 'Bowls'"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2",
          "SELECT h.Class FROM headphone h WHERE h.Earpads = 'Bowls' OR h.Earpads = 'Comfort Pads' GROUP BY h.Class HAVING COUNT(DISTINCT h.Earpads) = 2",
          "SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Bowls' INTERSECT SELECT DISTINCT Class FROM headphone WHERE Earpads = 'Comfort Pads'",
          "SELECT Class FROM (SELECT Class, COUNT(DISTINCT Earpads) AS EarpadTypes FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class) AS SubQuery WHERE EarpadTypes = 2",
          "WITH Filtered AS (SELECT Class, Earpads FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads')) SELECT Class FROM Filtered GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2",
          "SELECT Class FROM headphone GROUP BY Class HAVING SUM(CASE WHEN Earpads = 'Bowls' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Earpads = 'Comfort Pads' THEN 1 ELSE 0 END) > 0",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' UNION ALL SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads' HAVING COUNT(DISTINCT Class) > 1",
          "SELECT Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'",
          "SELECT Class FROM headphone WHERE Earpads = 'Bowls' UNION SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads' HAVING COUNT(*) = 2",
          "SELECT h.Class FROM headphone h WHERE EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Bowls' AND Class = h.Class) AND EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Comfort Pads' AND Class = h.Class)"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads FROM headphone WHERE Construction <> 'plastic'",
          "SELECT DISTINCT Earpads FROM headphone WHERE NOT Construction = 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction NOT LIKE 'plastic'",
          "SELECT h.Earpads FROM headphone h WHERE h.Construction != 'plastic'",
          "SELECT Earpads FROM headphone WHERE LOWER(Construction) != 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction IS NOT 'plastic'",
          "SELECT Earpads FROM headphone EXCEPT SELECT Earpads FROM headphone WHERE Construction = 'plastic'",
          "SELECT Earpads FROM headphone WHERE 'plastic' NOT IN (Construction)",
          "SELECT DISTINCT Earpads FROM headphone WHERE Construction NOT IN ('plastic')",
          "SELECT Earpads FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM headphone WHERE Construction = 'plastic' AND Earpads = h.Earpads)"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Earpads FROM headphone WHERE Construction != 'plastic'",
          "SELECT Earpads FROM headphone WHERE NOT Construction = 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction <> 'plastic'",
          "SELECT Earpads FROM headphone WHERE LOWER(Construction) NOT LIKE '%plastic%'",
          "SELECT Earpads FROM headphone WHERE Construction NOT IN ('plastic')",
          "SELECT Earpads FROM headphone WHERE Construction NOT LIKE 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction IS NOT 'plastic'",
          "SELECT Earpads FROM headphone WHERE Construction NOT LIKE '%plastic%'",
          "SELECT Earpads FROM headphone WHERE Construction != 'plastic' AND Construction IS NOT NULL",
          "SELECT Earpads FROM headphone WHERE Construction NOT LIKE 'plastic' AND Construction IS NOT NULL"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)",
          "SELECT headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS h)",
          "SELECT h.Model FROM headphone AS h WHERE h.Price < (SELECT AVG(h2.Price) FROM headphone AS h2)",
          "SELECT Model FROM headphone h1 WHERE h1.Price < (SELECT AVG(h2.Price) FROM headphone h2)",
          "SELECT headphone.Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS h)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone h WHERE h.Price IS NOT NULL)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone WHERE Price IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS h)",
          "SELECT headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)",
          "SELECT h.Model FROM headphone AS h WHERE h.Price < (SELECT AVG(p.Price) FROM headphone p)",
          "SELECT Model FROM headphone h1 WHERE h1.Price < (SELECT AVG(h2.Price) FROM headphone h2)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone GROUP BY Model)",
          "SELECT h.Model FROM headphone h WHERE h.Price < (SELECT AVG(Price) FROM headphone WHERE Price IS NOT NULL)",
          "SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone WHERE Price > 0)"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store ORDER BY Date_Opened",
          "SELECT Name FROM store ORDER BY Date_Opened ASC",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened ASC",
          "SELECT s.Name FROM store s ORDER BY s.Date_Opened",
          "SELECT Name FROM store ORDER BY Date_Opened ASCENDING",
          "SELECT store.Name FROM store ORDER BY Date_Opened ASCENDING",
          "SELECT Name FROM store ORDER BY CONVERT(Date, Date_Opened, 101)",
          "SELECT Name FROM store ORDER BY CAST(Date_Opened AS DATE)",
          "SELECT Name FROM store ORDER BY Date_Opened, Name",
          "SELECT Name FROM store ORDER BY Date_Opened ASC, Name ASC"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store ORDER BY Date_Opened",
          "SELECT Name FROM store ORDER BY Date_Opened ASC",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened",
          "SELECT s.Name FROM store s ORDER BY s.Date_Opened ASC",
          "SELECT Name FROM store ORDER BY Date_Opened ASCENDING",
          "SELECT store.Name FROM store ORDER BY store.Date_Opened ASC",
          "SELECT Name FROM store ORDER BY Date_Opened ASC, Name",
          "SELECT Name FROM store ORDER BY Date_Opened, Name ASC",
          "SELECT Name FROM store AS s ORDER BY s.Date_Opened ASC",
          "SELECT Name FROM store ORDER BY CONVERT(Date, Date_Opened, 101)"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT s.Name, s.Parking FROM store s WHERE s.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood LIKE 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' ORDER BY Name",
          "SELECT store.Name AS StoreName, store.Parking AS ParkingInfo FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL",
          "SELECT DISTINCT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' GROUP BY Name, Parking",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking <> ''"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT s.Name, s.Parking FROM store s WHERE s.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood LIKE 'Tarzana'",
          "SELECT Name AS StoreName, Parking AS ParkingInfo FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL",
          "SELECT DISTINCT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'",
          "SELECT Name, Parking FROM store WHERE UPPER(Neighborhood) = UPPER('Tarzana')",
          "SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' ORDER BY Name"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Neighborhood) FROM store",
          "SELECT COUNT(UNIQUE Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store) AS unique_neighborhoods",
          "SELECT COUNT(DISTINCT store.Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store) unique_neighborhoods",
          "SELECT DISTINCT COUNT(Neighborhood) FROM store",
          "SELECT COUNT(Neighborhood) FROM (SELECT DISTINCT Neighborhood FROM store)",
          "SELECT COUNT(DISTINCT Neighborhood) AS NumberOfNeighborhoods FROM store",
          "SELECT COUNT(*) FROM (SELECT Neighborhood FROM store GROUP BY Neighborhood) AS DistinctNeighborhoods",
          "SELECT COUNT(DISTINCT Neighborhood) FROM store AS count_neighborhoods"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Neighborhood) FROM store",
          "SELECT COUNT(UNIQUE Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store)",
          "SELECT COUNT(DISTINCT store.Neighborhood) FROM store",
          "SELECT COUNT(*) FROM (SELECT Neighborhood FROM store GROUP BY Neighborhood)",
          "SELECT DISTINCT COUNT(Neighborhood) FROM store",
          "SELECT COUNT(Neighborhood) FROM (SELECT DISTINCT Neighborhood FROM store)",
          "SELECT COUNT(DISTINCT Neighborhood) AS NumberOfNeighborhoods FROM store",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store AS UniqueNeighborhoods)",
          "SELECT COUNT(DISTINCT Neighborhood) FROM store GROUP BY Neighborhood HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood, COUNT(Store_ID) AS NumberOfStores FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID) AS StoreCount, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) AS StoreCount FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID), Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(*) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) AS TotalStores FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID) AS TotalStores, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID) AS StoreCount, Neighborhood FROM store GROUP BY Neighborhood ORDER BY StoreCount DESC"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood, COUNT(*) AS StoreCount FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood",
          "SELECT COUNT(*) FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) AS TotalStores FROM store GROUP BY Neighborhood",
          "SELECT Neighborhood, COUNT(*) AS TotalNumberOfStores FROM store GROUP BY Neighborhood",
          "SELECT COUNT(Store_ID), Neighborhood FROM store GROUP BY Neighborhood ORDER BY Neighborhood",
          "SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood ORDER BY COUNT(Store_ID) DESC",
          "SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood ORDER BY Neighborhood ASC",
          "SELECT Neighborhood, COUNT(Store_ID) AS StoreCount FROM store GROUP BY Neighborhood ORDER BY StoreCount DESC"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC LIMIT 1",
          "SELECT Name, Total_Headphones FROM (SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S INNER JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID) AS SubQuery ORDER BY Total_Headphones DESC LIMIT 1",
          "SELECT TOP 1 S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S, stock ST WHERE S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC",
          "SELECT S.Name, MAX(Total_Headphones) FROM store S JOIN (SELECT Store_ID, SUM(Quantity) AS Total_Headphones FROM stock GROUP BY Store_ID) ST ON S.Store_ID = ST.Store_ID",
          "SELECT S.Name, Total_Headphones FROM store S JOIN (SELECT Store_ID, SUM(Quantity) AS Total_Headphones FROM stock GROUP BY Store_ID) ST ON S.Store_ID = ST.Store_ID WHERE Total_Headphones = (SELECT MAX(Total_Headphones) FROM (SELECT SUM(Quantity) AS Total_Headphones FROM stock GROUP BY Store_ID) Temp)",
          "SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S LEFT JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID HAVING SUM(ST.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Store_ID) Temp)",
          "SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S RIGHT JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC FETCH FIRST ROW ONLY",
          "SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S INNER JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT FIRST(Name), FIRST(Total_Headphones) FROM (SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC)",
          "SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY Total_Headphones DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT s.Name, SUM(st.Quantity) AS TotalQuantity FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name",
          "SELECT Name, SUM(Quantity) AS TotalQuantity FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY Name",
          "SELECT store.Name, SUM(stock.Quantity) FROM store INNER JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name",
          "SELECT s.Name AS StoreName, SUM(st.Quantity) AS TotalStock FROM store AS s, stock AS st WHERE s.Store_ID = st.Store_ID GROUP BY s.Name",
          "SELECT Name, TotalQuantity FROM (SELECT store.Name, SUM(stock.Quantity) AS TotalQuantity FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name) AS Result",
          "SELECT store.Name, AggregateQuantity FROM store JOIN (SELECT Store_ID, SUM(Quantity) AS AggregateQuantity FROM stock GROUP BY Store_ID) AS StockInfo ON store.Store_ID = StockInfo.Store_ID",
          "SELECT Name, SUM(Quantity) AS TotalQuantity FROM store, stock WHERE store.Store_ID = stock.Store_ID GROUP BY Name",
          "SELECT s.Name, SUM(st.Quantity) AS TotalQuantity FROM store s INNER JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name HAVING SUM(st.Quantity) > 0",
          "SELECT Name, TotalQuantity FROM store LEFT JOIN (SELECT Store_ID, SUM(Quantity) AS TotalQuantity FROM stock GROUP BY Store_ID) stock_summary ON store.Store_ID = stock_summary.Store_ID",
          "SELECT store.Name, IFNULL(SUM(stock.Quantity), 0) AS TotalQuantity FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity = 0",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock GROUP BY Store_ID HAVING SUM(Quantity) > 0)",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT Name FROM store EXCEPT SELECT Name FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Store_ID, s.Name HAVING COALESCE(SUM(st.Quantity), 0) = 0",
          "SELECT Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock st WHERE st.Quantity > 0)"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity = 0",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0 GROUP BY Store_ID)",
          "SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Store_ID HAVING SUM(st.Quantity) = 0 OR SUM(st.Quantity) IS NULL",
          "SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock WHERE Quantity > 0)",
          "SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Quantity IS NULL OR s.Quantity = 0",
          "SELECT Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Headphone_ID = headphone.Headphone_ID AND stock.Quantity > 0)",
          "SELECT Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock WHERE Quantity > 0)",
          "SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID AND s.Quantity > 0)",
          "SELECT DISTINCT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock WHERE Quantity > 0)",
          "SELECT Model FROM headphone EXCEPT SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Quantity > 0",
          "SELECT h.Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT s.Headphone_ID FROM stock s WHERE s.Quantity > 0)",
          "SELECT Model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID AND s.Quantity > 0)",
          "SELECT DISTINCT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Quantity IS NULL OR s.Quantity = 0"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT h.Model FROM headphone h LEFT JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL",
          "SELECT Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Headphone_ID = headphone.Headphone_ID)",
          "SELECT h.Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)",
          "SELECT Model FROM headphone EXCEPT SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID",
          "SELECT DISTINCT Model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)",
          "SELECT Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT s.Headphone_ID FROM stock s)",
          "SELECT Model FROM headphone h WHERE NOT EXISTS (SELECT * FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)",
          "SELECT DISTINCT h.Model FROM headphone h LEFT OUTER JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL",
          "SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT DISTINCT Headphone_ID FROM stock)"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT H.Model FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Model ORDER BY SUM(S.Quantity) DESC LIMIT 1",
          "SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT TOP 1 H.Model FROM headphone H INNER JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Model ORDER BY SUM(S.Quantity) DESC",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC FETCH FIRST ROW ONLY)",
          "SELECT H.Model FROM headphone H, stock S WHERE H.Headphone_ID = S.Headphone_ID GROUP BY H.Model HAVING SUM(S.Quantity) = (SELECT MAX(total) FROM (SELECT SUM(Quantity) AS total FROM stock GROUP BY Headphone_ID) T)",
          "SELECT Model FROM (SELECT H.Model, SUM(S.Quantity) AS total_stock FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Model) AS subquery ORDER BY total_stock DESC LIMIT 1",
          "SELECT H.Model FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Model ORDER BY SUM(S.Quantity) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) = (SELECT MAX(SUM(Quantity)) FROM stock GROUP BY Headphone_ID))",
          "SELECT H.Model FROM headphone H WHERE H.Headphone_ID = (SELECT S.Headphone_ID FROM stock S GROUP BY S.Headphone_ID ORDER BY SUM(S.Quantity) DESC LIMIT 1)",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM (SELECT Headphone_ID, SUM(Quantity) AS total_quantity FROM stock GROUP BY Headphone_ID ORDER BY total_quantity DESC) WHERE ROWNUM = 1)"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)",
          "SELECT H.Model FROM headphone H JOIN (SELECT Headphone_ID, SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID ORDER BY Total DESC LIMIT 1) S ON H.Headphone_ID = S.Headphone_ID",
          "SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID) AS Sub))",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) >= ALL (SELECT SUM(Quantity) FROM stock GROUP BY Headphone_ID))",
          "SELECT (SELECT Model FROM headphone WHERE Headphone_ID = S.Headphone_ID) AS Model FROM (SELECT Headphone_ID, SUM(Quantity) AS TotalQuantity FROM stock GROUP BY Headphone_ID ORDER BY TotalQuantity DESC LIMIT 1) S",
          "SELECT TOP 1 H.Model FROM headphone H INNER JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Headphone_ID, H.Model ORDER BY SUM(S.Quantity) DESC",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT TOP 1 Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC)",
          "SELECT Model FROM headphone H WHERE EXISTS (SELECT 1 FROM stock S WHERE S.Headphone_ID = H.Headphone_ID GROUP BY S.Headphone_ID HAVING SUM(S.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID) AS Sub))",
          "SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM (SELECT Headphone_ID, SUM(Quantity) AS TotalQuantity FROM stock GROUP BY Headphone_ID) AS TempTable ORDER BY TotalQuantity DESC LIMIT 1)",
          "SELECT H.Model FROM headphone H, (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) = MAX(SUM(Quantity)) OVER ()) AS MaxStock WHERE H.Headphone_ID = MaxStock.Headphone_ID"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT SUM(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT TOTAL(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT SUM(Quantity) AS Total_Headphones FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name LIKE 'Woodman'",
          "SELECT SUM(Quantity) FROM stock LEFT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock RIGHT JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman' GROUP BY store.Name",
          "SELECT SUM(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman' GROUP BY store.Name",
          "SELECT SUM(Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman' AND store.Store_ID = stock.Store_ID"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT SUM(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT SUM(Quantity) AS Total_Quantity FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'",
          "SELECT TOTAL(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT SUM(s.Quantity) FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name LIKE 'Woodman'",
          "SELECT SUM(Quantity) FROM stock st JOIN store sr ON st.Store_ID = sr.Store_ID WHERE sr.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock WHERE Store_ID IN (SELECT Store_ID FROM store WHERE Name = 'Woodman')",
          "SELECT SUM(Quantity) FROM stock s, store st WHERE s.Store_ID = st.Store_ID AND st.Name = 'Woodman'",
          "SELECT SUM(Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity = 0",
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT st.Store_ID FROM stock st WHERE st.Quantity > 0)",
          "SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0",
          "SELECT s.Neighborhood FROM store s LEFT OUTER JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity <= 0",
          "SELECT DISTINCT Neighborhood FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "headphone_store",
      "infer_predictions": [
        [
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity = 0",
          "SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT DISTINCT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)",
          "SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0 GROUP BY Store_ID)",
          "SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0",
          "SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Neighborhood HAVING SUM(st.Quantity) = 0 OR SUM(st.Quantity) IS NULL",
          "SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)",
          "SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0) AND s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity IS NULL)"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(author_id) FROM Author",
          "SELECT COUNT(DISTINCT author_id) FROM Author",
          "SELECT COUNT(DISTINCT name) FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(author_id) AS total_authors FROM Author",
          "SELECT COUNT(*) AS NumberOfAuthors FROM Author",
          "SELECT COUNT(DISTINCT author_id) AS UniqueAuthors FROM Author",
          "SELECT COUNT(DISTINCT name) AS UniqueAuthorNames FROM Author",
          "SELECT COUNT(*) FROM (SELECT DISTINCT author_id FROM Author) AS unique_authors"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Author",
          "SELECT COUNT(author_id) FROM Author",
          "SELECT COUNT(DISTINCT author_id) FROM Author",
          "SELECT COUNT(ALL author_id) FROM Author",
          "SELECT COUNT(author_id) AS NumberOfAuthors FROM Author",
          "SELECT COUNT(*) AS TotalAuthors FROM Author",
          "SELECT COUNT(DISTINCT author_id) AS UniqueAuthors FROM Author",
          "SELECT COUNT(1) FROM Author",
          "SELECT COUNT(author_id) FROM Author WHERE author_id IS NOT NULL",
          "SELECT COUNT(*) FROM Author WHERE author_id > 0"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper",
          "SELECT COUNT(paper_id) FROM Paper",
          "SELECT COUNT(paper_id) AS TotalPapers FROM Paper",
          "SELECT COUNT(*) AS PaperCount FROM Paper",
          "SELECT COUNT(1) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) AS UniquePaperCount FROM Paper",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(*) AS TotalNumberOfPapers FROM Paper"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper",
          "SELECT COUNT(paper_id) FROM Paper",
          "SELECT COUNT(paper_id) AS NumberOfPapers FROM Paper",
          "SELECT COUNT(*) AS TotalPapers FROM Paper",
          "SELECT COUNT(1) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper",
          "SELECT COUNT(DISTINCT paper_id) AS UniquePaperCount FROM Paper",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IS NOT NULL",
          "SELECT COUNT(*) FROM Paper WHERE paper_id > 0"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Affiliation",
          "SELECT COUNT(affiliation_id) FROM Affiliation",
          "SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation",
          "SELECT COUNT(1) FROM Affiliation",
          "SELECT COUNT(DISTINCT name) FROM Affiliation",
          "SELECT COUNT(*) AS TotalAffiliations FROM Affiliation",
          "SELECT COUNT(affiliation_id) AS AffiliationCount FROM Affiliation",
          "SELECT COUNT(*) FROM (SELECT DISTINCT affiliation_id FROM Affiliation) AS UniqueAffiliations",
          "SELECT COUNT(DISTINCT affiliation_id) AS CountOfAffiliations FROM Affiliation",
          "SELECT COUNT(*) FROM Affiliation GROUP BY affiliation_id HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Affiliation",
          "SELECT COUNT(affiliation_id) FROM Affiliation",
          "SELECT COUNT(1) FROM Affiliation",
          "SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation",
          "SELECT COUNT(Affiliation.affiliation_id) FROM Affiliation",
          "SELECT COUNT(*) AS NumberOfAffiliations FROM Affiliation",
          "SELECT COUNT(DISTINCT Affiliation.affiliation_id) FROM Affiliation",
          "SELECT COUNT(affiliation_id) AS TotalAffiliations FROM Affiliation",
          "SELECT COUNT(*) FROM Affiliation GROUP BY affiliation_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT affiliation_id FROM Affiliation) AS UniqueAffiliations"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) AS NumberOfPapers FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(1) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue LIKE 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = '2000'",
          "SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000 GROUP BY venue, year",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000 LIMIT 1"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) AS NumberOfPapers FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(1) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue LIKE 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = '2000'",
          "SELECT COUNT(paper_id) AS PaperCount FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000 GROUP BY venue, year",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000",
          "SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000 LIMIT 1"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2009 AND A.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year = 2009",
          "SELECT COUNT(P.paper_id) FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND P.year = 2009 AND A.name = 'Columbia University'",
          "SELECT COUNT(paper_id) FROM Paper WHERE year = 2009 AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE year = 2009 AND EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT COUNT(*) FROM (SELECT P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2009 AND A.name = 'Columbia University' GROUP BY P.paper_id) AS Result",
          "SELECT COUNT(paper_id) FROM Paper WHERE year = 2009 AND paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University')",
          "SELECT COUNT(DISTINCT P.paper_id) FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2009 AND A.name = 'Columbia University'",
          "SELECT COUNT(*) FROM Paper P WHERE P.year = 2009 AND EXISTS (SELECT * FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND AL.paper_id = P.paper_id)",
          "SELECT COUNT(DISTINCT P.paper_id) FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id LEFT JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE P.year = 2009 AND A.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009",
          "SELECT COUNT(Paper.paper_id) AS NumberOfPapers FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year = 2009 GROUP BY Paper.year",
          "SELECT COUNT(UNIQUE Paper.paper_id) FROM Paper LEFT JOIN Author_list ON Paper.paper_id = Author_list.paper_id LEFT JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009",
          "SELECT COUNT(*) FROM (SELECT Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009) AS temp",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year = 2009",
          "SELECT COUNT(*) FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND p.year = 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Columbia University' AND p.year = 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p LEFT JOIN Author_list al ON p.paper_id = al.paper_id LEFT JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND p.year = 2009"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name, address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation",
          "SELECT a.name, a.address FROM Affiliation a",
          "SELECT Affiliation.name AS Name, Affiliation.address AS Address FROM Affiliation",
          "SELECT name AS 'Affiliation Name', address AS 'Affiliation Address' FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation ORDER BY name",
          "SELECT name, address FROM Affiliation ORDER BY address",
          "SELECT DISTINCT name, address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation WHERE name IS NOT NULL AND address IS NOT NULL",
          "SELECT * FROM Affiliation SELECT name, address"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name, address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation",
          "SELECT a.name, a.address FROM Affiliation a",
          "SELECT Affiliation.name AS AffiliationName, Affiliation.address AS AffiliationAddress FROM Affiliation",
          "SELECT name AS Name, address AS Address FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation ORDER BY name",
          "SELECT DISTINCT name, address FROM Affiliation",
          "SELECT name, address FROM Affiliation WHERE name IS NOT NULL AND address IS NOT NULL",
          "SELECT * FROM Affiliation",
          "SELECT Affiliation.name, Affiliation.address FROM Affiliation WHERE address <> ''"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year FROM Paper ORDER BY year",
          "SELECT Paper.venue, Paper.year FROM Paper ORDER BY year ASC",
          "SELECT p.venue, p.year FROM Paper p ORDER BY p.year",
          "SELECT venue, year FROM Paper ORDER BY year ASCENDING",
          "SELECT venue, year FROM Paper ORDER BY Paper.year",
          "SELECT venue, year FROM Paper p ORDER BY p.year ASC",
          "SELECT venue AS Venue, year AS Year FROM Paper ORDER BY year",
          "SELECT venue, year FROM Paper ORDER BY 2",
          "SELECT venue, year FROM Paper ORDER BY Paper.year ASC",
          "SELECT venue, year FROM Paper ORDER BY year, venue"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT venue FROM Paper ORDER BY year",
          "SELECT venue FROM Paper GROUP BY venue, year ORDER BY year",
          "SELECT DISTINCT venue FROM Paper ORDER BY year ASC",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY year ASC",
          "SELECT DISTINCT venue FROM Paper ORDER BY Paper.year",
          "SELECT DISTINCT venue FROM Paper ORDER BY year ASCENDING",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY year ASCENDING",
          "SELECT DISTINCT venue FROM Paper ORDER BY Paper.year ASC",
          "SELECT DISTINCT Paper.venue FROM Paper ORDER BY Paper.year",
          "SELECT DISTINCT Paper.venue FROM Paper ORDER BY Paper.year ASC"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University'",
          "SELECT DISTINCT title, paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Harvard University'",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Author_list.paper_id = Paper.paper_id AND Affiliation.name = 'Harvard University')",
          "SELECT p.title AS Title, p.paper_id AS PaperID FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name LIKE 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' ORDER BY Paper.title"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University'",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Author_list.paper_id = Paper.paper_id AND Affiliation.name = 'Harvard University')",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University'",
          "SELECT title, paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id AND A.name = 'Harvard University'",
          "SELECT P.title AS Title, P.paper_id AS PaperID FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name LIKE 'Harvard University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE AL.paper_id = P.paper_id AND A.name = 'Harvard University')",
          "SELECT title, paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL, Affiliation A WHERE AL.affiliation_id = A.affiliation_id AND A.name = 'Harvard University')"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'",
          "SELECT p.title, p.paper_id FROM Paper p, Author_list al, Author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown'",
          "SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author_list.paper_id = Paper.paper_id AND Author.name = 'Mckeown')",
          "SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE 'Mckeown'",
          "SELECT title, paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown')",
          "SELECT p.title, p.paper_id FROM Paper p INNER JOIN (Author_list al INNER JOIN Author a ON al.author_id = a.author_id AND a.name = 'Mckeown') ON p.paper_id = al.paper_id",
          "SELECT title, paper_id FROM Paper, Author_list, Author WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown'"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown'",
          "SELECT title, paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'",
          "SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name LIKE 'Mckeown'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author_list.paper_id = Paper.paper_id AND Author.name = 'Mckeown')",
          "SELECT P.title AS Title, P.paper_id AS PaperID FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' ORDER BY P.title",
          "SELECT title, paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown')) AS AL ON P.paper_id = AL.paper_id",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown'))"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford University') AND P.paper_id IN (SELECT A.paper_id FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name IN ('Stanford University', 'Columbia University') GROUP BY Paper.paper_id HAVING COUNT(DISTINCT Affiliation.name) = 2",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list A, Affiliation AF WHERE P.paper_id = A.paper_id AND A.affiliation_id = AF.affiliation_id AND AF.name IN ('Stanford University', 'Columbia University') GROUP BY P.paper_id HAVING COUNT(DISTINCT AF.name) = 2",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) INTERSECT SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "WITH StanfordPapers AS (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')), ColumbiaPapers AS (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT paper_id FROM StanfordPapers) AND P.paper_id IN (SELECT paper_id FROM ColumbiaPapers)",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AS S ON P.paper_id = S.paper_id INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AS C ON P.paper_id = C.paper_id",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND EXISTS (SELECT 1 FROM Author_list WHERE Paper.paper_id = Author_list.paper_id AND affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Stanford University') AND EXISTS (SELECT * FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE A.paper_id = P.paper_id AND AF.name = 'Columbia University')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A WHERE A.affiliation_id IN (SELECT AF.affiliation_id FROM Affiliation AF WHERE AF.name = 'Stanford University')) AND P.paper_id IN (SELECT A.paper_id FROM Author_list A WHERE A.affiliation_id IN (SELECT AF.affiliation_id FROM Affiliation AF WHERE AF.name = 'Columbia University'))"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford') AND P.paper_id IN (SELECT A.paper_id FROM Author_list A JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list A ON P.paper_id = A.paper_id INNER JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name IN ('Stanford', 'Columbia University') GROUP BY P.paper_id HAVING COUNT(DISTINCT AF.name) = 2",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford' AND Author_list.paper_id = Paper.paper_id) AND EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list A, Affiliation AF WHERE P.paper_id = A.paper_id AND A.affiliation_id = AF.affiliation_id AND AF.name = 'Stanford' INTERSECT SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list A, Affiliation AF WHERE P.paper_id = A.paper_id AND A.affiliation_id = AF.affiliation_id AND AF.name = 'Columbia University'",
          "WITH StanfordPapers AS (SELECT paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford'), ColumbiaPapers AS (SELECT paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University') SELECT Paper.title, Paper.paper_id FROM Paper JOIN StanfordPapers SP ON Paper.paper_id = SP.paper_id JOIN ColumbiaPapers CP ON Paper.paper_id = CP.paper_id",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) AND P.paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford', 'Columbia University')) GROUP BY paper_id HAVING COUNT(DISTINCT affiliation_id) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford' UNION SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT A.paper_id FROM Author_list A, Affiliation AF WHERE A.affiliation_id = AF.affiliation_id AND AF.name = 'Stanford') INTERSECT SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT A.paper_id FROM Author_list A, Affiliation AF WHERE A.affiliation_id = AF.affiliation_id AND AF.name = 'Columbia University')"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen') GROUP BY paper_id HAVING COUNT(DISTINCT author_id) = 2)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.author_id) = 2",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY paper_id HAVING COUNT(DISTINCT Author.name) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2)",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT * FROM Author_list INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') AND Author_list.paper_id = Paper.paper_id GROUP BY Author_list.paper_id HAVING COUNT(DISTINCT Author.name) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2) AS CoAuthored ON P.paper_id = CoAuthored.paper_id"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen') GROUP BY paper_id HAVING COUNT(DISTINCT author_id) = 2)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id HAVING COUNT(DISTINCT A.name) = 2",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.author_id) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id HAVING COUNT(DISTINCT A.author_id) = 2",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.author_id) = 2)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' UNION SELECT author_id FROM Author WHERE name = 'Rambow, Owen') GROUP BY paper_id HAVING COUNT(DISTINCT author_id) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown, Kathleen', 'Rambow, Owen')) GROUP BY paper_id HAVING COUNT(DISTINCT author_id) = 2) AS CoAuthored ON P.paper_id = CoAuthored.paper_id"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Mckeown') AND P.paper_id NOT IN (SELECT A.paper_id FROM Author_list A JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown' AND Author_list.paper_id = Paper.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Mckeown' AND P.paper_id NOT IN (SELECT C.paper_id FROM Author_list C JOIN Author D ON C.author_id = D.author_id WHERE D.name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list A JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Mckeown' AND A.paper_id = P.paper_id) AND NOT EXISTS (SELECT * FROM Author_list C JOIN Author D ON C.author_id = D.author_id WHERE D.name = 'Rambow' AND C.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list A, Author B WHERE P.paper_id = A.paper_id AND A.author_id = B.author_id AND B.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM Author_list C, Author D WHERE C.paper_id = P.paper_id AND C.author_id = D.author_id AND D.name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list A ON P.paper_id = A.paper_id INNER JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Mckeown' GROUP BY P.paper_id HAVING SUM(CASE WHEN B.name = 'Rambow' THEN 1 ELSE 0 END) = 0",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown') EXCEPT SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT A.paper_id FROM Author_list A, Author B WHERE A.author_id = B.author_id AND B.name = 'Mckeown') AND NOT EXISTS (SELECT 1 FROM Author_list C, Author D WHERE C.paper_id = P.paper_id AND C.author_id = D.author_id AND D.name = 'Rambow')"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Rambow'))",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' EXCEPT SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')",
          "WITH MckeownPapers AS (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown'), RambowPapers AS (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow') SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM MckeownPapers) AND paper_id NOT IN (SELECT paper_id FROM RambowPapers)",
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow' AND AL2.paper_id = P.paper_id)",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT * FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown' AND paper_id = Paper.paper_id) AND NOT EXISTS (SELECT * FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow' AND paper_id = Paper.paper_id)",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown') AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen'))",
          "SELECT Paper.title, Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author_list.paper_id = Paper.paper_id AND Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS AL ON P.paper_id = AL.paper_id JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper, Author_list, Author WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND (Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))",
          "SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen')",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')",
          "SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' OR name = 'Rambow, Owen'))",
          "SELECT DISTINCT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')",
          "SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') AND Author_list.paper_id = Paper.paper_id)",
          "SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen')",
          "SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id = P.paper_id AND A.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))",
          "SELECT title, paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY P.paper_id, P.title",
          "SELECT P.title, P.paper_id FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id LEFT JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen'",
          "SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen'))"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(DISTINCT AL.paper_id) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.name ORDER BY num_papers DESC",
          "SELECT name, COUNT(DISTINCT paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name ORDER BY num_papers DESC",
          "SELECT Author.name, COUNT(Paper.paper_id) AS num_papers FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.name ORDER BY num_papers DESC",
          "SELECT name, COUNT(paper_id) AS num_papers FROM Author, Author_list WHERE Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC",
          "SELECT A.name, COUNT(*) AS num_papers FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.name ORDER BY num_papers DESC",
          "SELECT name, COUNT(paper_id) AS num_papers FROM Author LEFT JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC",
          "SELECT A.name, COUNT(DISTINCT AL.paper_id) AS num_papers FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.name ORDER BY num_papers DESC",
          "SELECT name, COUNT(DISTINCT paper_id) AS num_papers FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC",
          "SELECT A.name, COUNT(AL.paper_id) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT name, COUNT(paper_id) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY COUNT(paper_id) DESC"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY num_papers DESC",
          "SELECT author.name, COUNT(author_list.paper_id) AS total_papers FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY total_papers DESC",
          "SELECT A.name, COUNT(*) AS paper_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY paper_count DESC",
          "SELECT name, COUNT(paper_id) AS published_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY published_papers DESC",
          "SELECT A.name AS Author_Name, COUNT(P.paper_id) AS Papers_Published FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY Papers_Published DESC",
          "SELECT author.name, COUNT(paper.paper_id) AS count_of_papers FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY count_of_papers DESC",
          "SELECT A.name, COUNT(DISTINCT P.paper_id) AS NumOfPapers FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY NumOfPapers DESC",
          "SELECT author.name, COUNT(paper.paper_id) AS total_published FROM author, author_list, paper WHERE author.author_id = author_list.author_id AND author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY total_published DESC",
          "SELECT A.name, COUNT(P.paper_id) AS TotalPapers FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY TotalPapers DESC",
          "SELECT name, COUNT(paper_id) AS count_of_publications FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Author.author_id ORDER BY count_of_publications DESC"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(AL.paper_id) AS num_papers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY num_papers ASC",
          "SELECT Affiliation.name, COUNT(Author_list.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.affiliation_id ORDER BY paper_count ASC",
          "SELECT name, COUNT(paper_id) AS total_papers FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.affiliation_id ORDER BY total_papers ASC",
          "SELECT A.name, (SELECT COUNT(*) FROM Author_list WHERE Author_list.affiliation_id = A.affiliation_id) AS num_papers FROM Affiliation A ORDER BY num_papers ASC",
          "SELECT Affiliation.name, COUNT(*) AS NumberOfPapers FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.affiliation_id ORDER BY NumberOfPapers",
          "SELECT A.name, COUNT(AL.paper_id) FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY COUNT(AL.paper_id)",
          "SELECT name, COUNT(paper_id) FROM Affiliation, Author_list WHERE Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(paper_id) ASC",
          "SELECT A.name AS AffiliationName, COUNT(AL.paper_id) AS PaperCount FROM Affiliation A LEFT OUTER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY PaperCount ASC",
          "SELECT Affiliation.name, COUNT(Author_list.paper_id) AS Papers FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY Papers ASC",
          "SELECT A.name, COUNT(AL.paper_id) AS PaperCount FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.name ORDER BY PaperCount ASC"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC)",
          "SELECT Affiliation.name, COUNT(Author_list.paper_id) AS PaperCount FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY PaperCount DESC",
          "SELECT name FROM (SELECT Affiliation.name AS name, COUNT(Author_list.paper_id) AS num_papers FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name) AS SubQuery ORDER BY num_papers DESC",
          "SELECT Affiliation.name FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(*) DESC",
          "SELECT Affiliation.name FROM Affiliation, Author_list WHERE Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(Author_list.paper_id) DESC",
          "SELECT DISTINCT Affiliation.name FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(Author_list.paper_id) DESC",
          "SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name HAVING COUNT(Author_list.paper_id) > 0 ORDER BY COUNT(Author_list.paper_id) DESC",
          "SELECT TOP 100 PERCENT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(Author_list.paper_id) DESC",
          "SELECT Affiliation.name AS AffiliationName, COUNT(Author_list.paper_id) AS TotalPapers FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY TotalPapers DESC"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50)",
          "SELECT DISTINCT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE EXISTS (SELECT 1 FROM Author_list WHERE Author.author_id = Author_list.author_id GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT A.name FROM Author A JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50) AL ON A.author_id = AL.author_id",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM (SELECT author_id, COUNT(paper_id) AS cnt FROM Author_list GROUP BY author_id) tmp WHERE cnt > 50)"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id) > 50",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) > 50)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50) B ON A.author_id = B.author_id",
          "SELECT DISTINCT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL WHERE A.author_id = AL.author_id GROUP BY AL.author_id HAVING COUNT(AL.paper_id) > 50)",
          "SELECT A.name FROM Author A JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50) AL ON A.author_id = AL.author_id",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) > 50)"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)",
          "SELECT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM (SELECT author_id, COUNT(paper_id) AS cnt FROM Author_list GROUP BY author_id) AS SubQuery WHERE cnt = 1)",
          "SELECT DISTINCT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) = 1",
          "SELECT A.name FROM Author A WHERE 1 = (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id)",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1 AND COUNT(DISTINCT paper_id) = 1)",
          "SELECT A.name FROM Author A JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) B ON A.author_id = B.author_id",
          "SELECT name FROM Author WHERE EXISTS (SELECT 1 FROM Author_list WHERE Author.author_id = Author_list.author_id GROUP BY author_id HAVING COUNT(paper_id) = 1)"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)",
          "SELECT A.name FROM Author A WHERE (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) AS UniquePapers ON A.author_id = UniquePapers.author_id",
          "SELECT DISTINCT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) = 1",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL WHERE A.author_id = AL.author_id GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = 1)",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id, A.name HAVING COUNT(*) = 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1)",
          "SELECT A.name FROM Author A WHERE 1 = (SELECT COUNT(*) FROM Author_list AL WHERE AL.author_id = A.author_id)"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year, COUNT(*) AS publication_count FROM Paper GROUP BY venue, year ORDER BY publication_count DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue, year) AS counts)",
          "SELECT TOP 1 venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT P.venue, P.year FROM Paper P GROUP BY P.venue, P.year ORDER BY COUNT(P.paper_id) DESC LIMIT 1",
          "WITH PublicationCounts AS (SELECT venue, year, COUNT(*) AS TotalPublications FROM Paper GROUP BY venue, year) SELECT venue, year FROM PublicationCounts WHERE TotalPublications = (SELECT MAX(TotalPublications) FROM PublicationCounts)",
          "SELECT venue, year, COUNT(paper_id) AS Total FROM Paper GROUP BY venue, year ORDER BY Total DESC LIMIT 1",
          "SELECT venue, year FROM (SELECT venue, year, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Paper GROUP BY venue, year) WHERE rank = 1",
          "SELECT venue, year, MAX(count) FROM (SELECT venue, year, COUNT(*) AS count FROM Paper GROUP BY venue, year) AS SubQuery GROUP BY venue, year ORDER BY MAX(count) DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Paper GROUP BY venue, year)"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year, COUNT(*) AS publication_count FROM Paper GROUP BY venue, year ORDER BY publication_count DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC",
          "SELECT venue, year FROM (SELECT venue, year, COUNT(*) AS total FROM Paper GROUP BY venue, year) AS subquery ORDER BY total DESC LIMIT 1",
          "SELECT venue, year, MAX(count) FROM (SELECT venue, year, COUNT(*) AS count FROM Paper GROUP BY venue, year) AS counts_table",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue, year) AS counts)",
          "SELECT venue, year, COUNT(*) AS count FROM Paper GROUP BY venue, year ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC FETCH FIRST ROW ONLY",
          "SELECT venue, year, COUNT(*) AS total_pubs FROM Paper GROUP BY venue, year ORDER BY total_pubs DESC LIMIT 1",
          "SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Paper GROUP BY venue, year)"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT venue FROM (SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue) AS subquery ORDER BY num_papers ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue) AS counts)",
          "SELECT TOP 1 venue FROM Paper GROUP BY venue ORDER BY COUNT(*)",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT venue, COUNT(*) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1",
          "SELECT venue FROM (SELECT venue, COUNT(*) AS total FROM Paper GROUP BY venue ORDER BY total ASC) WHERE ROWNUM = 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT venue FROM (SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue) AS venue_counts WHERE num_papers = (SELECT MIN(num_papers) FROM (SELECT COUNT(*) AS num_papers FROM Paper GROUP BY venue) AS counts)",
          "SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(COUNT(paper_id)) FROM Paper GROUP BY venue)",
          "SELECT TOP 1 venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id)",
          "SELECT venue, COUNT(*) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count ASC LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC FETCH FIRST 1 ROW ONLY",
          "SELECT venue FROM Paper GROUP BY venue HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue) AS subquery)",
          "SELECT venue FROM (SELECT venue, COUNT(*) AS count FROM Paper GROUP BY venue ORDER BY count ASC) AS sorted_venues LIMIT 1",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0",
          "SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(paper_id) AS TotalCitations FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) AS NumberOfCitations FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(1) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
          "SELECT COUNT(paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id IS NOT NULL",
          "SELECT COUNT(DISTINCT paper_id) AS CitationCount FROM Citation WHERE cited_paper_id = 'A00-1002'"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(paper_id) AS TotalCitations FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) AS NumberOfCitations FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(1) FROM Citation WHERE cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
          "SELECT COUNT(DISTINCT c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) AS ReferenceCount FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(1) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) AS TotalReferences FROM Citation WHERE paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' AND cited_paper_id IS NOT NULL",
          "SELECT COUNT(DISTINCT c.cited_paper_id) FROM Citation c WHERE c.paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' HAVING COUNT(cited_paper_id) > 0"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) AS ReferenceCount FROM Citation WHERE cited_paper_id = 'D12-1027'",
          "SELECT COUNT(*) AS TotalReferences FROM Citation WHERE cited_paper_id = 'D12-1027'",
          "SELECT COUNT(1) FROM Citation WHERE cited_paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE cited_paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'D12-1027'",
          "SELECT COUNT(cited_paper_id) FROM Citation c WHERE c.cited_paper_id = 'D12-1027'",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027' GROUP BY cited_paper_id",
          "SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027' AND paper_id IS NOT NULL",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE cited_paper_id = 'D12-1027' AND paper_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT P.paper_id, COUNT(C.cited_paper_id) AS num_citations FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 1",
          "SELECT TOP 1 cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC",
          "SELECT cited_paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id) AS subquery)",
          "SELECT paper_id, (SELECT COUNT(*) FROM Citation WHERE cited_paper_id = P.paper_id) AS citation_count FROM Paper P ORDER BY citation_count DESC LIMIT 1",
          "SELECT cited_paper_id, COUNT(*) FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC FETCH FIRST ROW ONLY",
          "WITH CitationCounts AS (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) SELECT cited_paper_id, citation_count FROM CitationCounts ORDER BY citation_count DESC LIMIT 1",
          "SELECT cited_paper_id, COUNT(*) AS TotalCitations FROM Citation GROUP BY cited_paper_id ORDER BY TotalCitations DESC LIMIT 1",
          "SELECT P.paper_id, C.citation_count FROM Paper P JOIN (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) C ON P.paper_id = C.cited_paper_id ORDER BY C.citation_count DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT Paper.paper_id, COUNT(Citation.cited_paper_id) AS num_citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY num_citations DESC LIMIT 1",
          "SELECT T1.paper_id, T2.citation_count FROM Paper AS T1 JOIN (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) AS T2 ON T1.paper_id = T2.cited_paper_id ORDER BY T2.citation_count DESC LIMIT 1",
          "SELECT TOP 1 cited_paper_id, COUNT(*) AS TotalCitations FROM Citation GROUP BY cited_paper_id ORDER BY TotalCitations DESC",
          "SELECT paper_id, MAX(citation_count) FROM (SELECT cited_paper_id AS paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) AS SubQuery",
          "SELECT paper_id FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT cited_paper_id AS MostCitedPaperID, MAX(citation_count) AS MaxCitations FROM (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) AS CitationCounts",
          "WITH CitationCounts AS (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) SELECT paper_id FROM Paper JOIN CitationCounts ON Paper.paper_id = CitationCounts.cited_paper_id WHERE citation_count = (SELECT MAX(citation_count) FROM CitationCounts)",
          "SELECT paper_id, (SELECT COUNT(*) FROM Citation WHERE Citation.cited_paper_id = Paper.paper_id) AS citation_count FROM Paper ORDER BY citation_count DESC LIMIT 1",
          "SELECT cited_paper_id, citation_count FROM (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) AS Citations ORDER BY citation_count DESC FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P JOIN (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1) C ON P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id) AS counts))",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P INNER JOIN (SELECT paper_id, COUNT(*) AS cnt FROM Citation GROUP BY paper_id ORDER BY cnt DESC LIMIT 1) C ON P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE C.paper_id = P.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) count FROM Citation GROUP BY paper_id) AS sub))",
          "SELECT title FROM Paper WHERE paper_id = (SELECT TOP 1 paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC)",
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id, P.title ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P JOIN (SELECT paper_id, COUNT(cited_paper_id) AS cnt FROM Citation GROUP BY paper_id ORDER BY cnt DESC LIMIT 1) C ON P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id) AS subquery))",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY)",
          "SELECT P.title FROM Paper P INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1) AS C ON P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT TOP 1 paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC)",
          "SELECT P.title FROM Paper P, (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1) AS C WHERE P.paper_id = C.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE C.paper_id = P.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(cited_paper_id) AS count FROM Citation GROUP BY paper_id) AS sub))"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS num_citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY title ORDER BY num_citations DESC LIMIT 10",
          "SELECT Paper.title, COUNT(*) AS TotalCitations FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.title ORDER BY TotalCitations DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY title ORDER BY COUNT(cited_paper_id) DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) FROM Paper P, Citation C WHERE P.paper_id = C.cited_paper_id GROUP BY P.title ORDER BY COUNT(C.cited_paper_id) DESC FETCH FIRST 10 ROWS ONLY",
          "SELECT TOP 10 Paper.title, COUNT(Citation.cited_paper_id) AS Citations FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.title ORDER BY Citations DESC",
          "SELECT title, COUNT(cited_paper_id) AS citation_count FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY title ORDER BY citation_count DESC FETCH FIRST 10 ROWS ONLY",
          "SELECT title, COUNT(*) AS citation_count FROM Paper LEFT OUTER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY title ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(*) AS citation_count FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS citation_count FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY title ORDER BY citation_count DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) AS num_citations FROM Paper INNER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id ORDER BY num_citations DESC FETCH FIRST 10 ROWS ONLY",
          "SELECT Paper.title, COUNT(*) AS TotalCitations FROM Paper, Citation WHERE Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id, Paper.title ORDER BY TotalCitations DESC LIMIT 10",
          "SELECT top 10 Paper.title, COUNT(Citation.cited_paper_id) as CitationCount FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id, Paper.title ORDER BY CitationCount DESC",
          "SELECT P.title, COUNT(*) as Citations FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title ORDER BY Citations DESC LIMIT 10",
          "SELECT title, COUNT(cited_paper_id) as citation_count FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Paper.paper_id, Paper.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P LEFT OUTER JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P INNER JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title HAVING COUNT(C.cited_paper_id) > 0 ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title ORDER BY citation_count DESC LIMIT 10",
          "SELECT P.title, COUNT(C.cited_paper_id) AS citation_count FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id, P.title ORDER BY citation_count DESC LIMIT 10"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C JOIN Paper P ON C.paper_id = P.paper_id JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) AS CitationCount FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')))",
          "SELECT COUNT(*) FROM Citation C INNER JOIN Author_list AL ON C.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) AS TotalCitations FROM Citation C, Author_list AL, Author A WHERE C.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT C.cited_paper_id FROM Citation C JOIN Author_list AL ON C.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' GROUP BY C.cited_paper_id) AS CitationCounts",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' AND AL.paper_id = Citation.paper_id)",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C LEFT JOIN Author_list AL ON C.paper_id = AL.paper_id LEFT JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation C, Paper P, Author_list AL, Author A WHERE C.paper_id = P.paper_id AND P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C JOIN Paper P ON C.paper_id = P.paper_id JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(cited_paper_id) AS CitationCount FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation C INNER JOIN Author_list AL ON C.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(C.cited_paper_id) FROM Citation C, Author_list AL, Author A WHERE C.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C, Paper P, Author_list AL, Author A WHERE C.paper_id = P.paper_id AND P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT C.cited_paper_id FROM Citation C JOIN Author_list AL ON C.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' GROUP BY C.cited_paper_id) AS CitationCounts",
          "SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(*) FROM Citation C LEFT JOIN Author_list AL ON C.paper_id = AL.paper_id LEFT JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(UNIQUE C.cited_paper_id) FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.paper_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT C.cited_paper_id FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen') AS cited_papers",
          "SELECT COUNT(DISTINCT C.cited_paper_id) AS TotalCitations FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.paper_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C JOIN Author_list AL ON C.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C, Author_list AL, Author A WHERE C.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' AND AL.paper_id = C.paper_id)"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(UNIQUE C.cited_paper_id) FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.paper_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT C.cited_paper_id FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen') AS cited_papers",
          "SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C JOIN Author_list AL ON C.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A, Author_list AL, Paper P, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.paper_id = C.paper_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C WHERE C.paper_id IN (SELECT P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C, Author_list AL, Author A WHERE C.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT name, MAX(citation_count) FROM (SELECT Author.name AS name, COUNT(*) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id) AS subquery GROUP BY name",
          "SELECT TOP 1 Author.name, COUNT(Citation.cited_paper_id) AS NumCitations FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.name ORDER BY NumCitations DESC",
          "SELECT name, citation_count FROM (SELECT Author.name AS name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id) AS T WHERE citation_count = (SELECT MAX(citation_count) FROM (SELECT COUNT(Citation.cited_paper_id) AS citation_count FROM Author_list JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author_list.author_id) AS subquery)",
          "SELECT Author.name, COUNT(*) AS citation_count FROM Author INNER JOIN Author_list ON Author.author_id = Author_list.author_id INNER JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.name HAVING COUNT(*) = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) AS citation_count FROM Author_list JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author_list.author_id) AS subquery)",
          "SELECT name, citation_count FROM (SELECT Author.name AS name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id ORDER BY citation_count DESC LIMIT 1) AS result",
          "SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.cited_paper_id GROUP BY A.author_id HAVING citation_count = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS subquery)",
          "SELECT name, citation_count FROM (SELECT Author.name AS name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id) AS T ORDER BY citation_count DESC LIMIT 1",
          "SELECT Author.name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.name ORDER BY citation_count DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name, citation_count FROM (SELECT Author.name AS name, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author.author_id) AS T WHERE citation_count = (SELECT MAX(citation_count) FROM (SELECT COUNT(Citation.cited_paper_id) AS citation_count FROM Author_list JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Author_list.author_id) AS subquery)"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
          "SELECT name, MAX(citation_count) FROM (SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id) AS SubQuery",
          "SELECT TOP 1 A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC",
          "SELECT A.name, citation_count FROM Author AS A JOIN (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1) AS SubQuery ON A.author_id = SubQuery.author_id",
          "SELECT A.name, citation_count FROM (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS SubQuery JOIN Author AS A ON SubQuery.author_id = A.author_id WHERE citation_count = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS SubQuery2)",
          "SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author AS A INNER JOIN Author_list AS AL ON A.author_id = AL.author_id INNER JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS SubQuery)",
          "SELECT A.name, citation_count FROM Author AS A, (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1) AS MaxCitations WHERE A.author_id = MaxCitations.author_id",
          "SELECT A.name, citation_count FROM Author AS A JOIN (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS SubQuery)) AS MaxCitations ON A.author_id = MaxCitations.author_id",
          "SELECT A.name, citation_count FROM Author AS A JOIN (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id ORDER BY COUNT(C.cited_paper_id) DESC FETCH FIRST 1 ROWS ONLY) AS MaxCitations ON A.author_id = MaxCitations.author_id",
          "SELECT A.name, citation_count FROM Author AS A JOIN (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id ORDER BY COUNT(C.cited_paper_id) DESC LIMIT 1) AS MaxCitations ON A.author_id = MaxCitations.author_id"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT DISTINCT P.venue, P.year FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'",
          "SELECT P.venue AS Venue, P.year AS Year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name LIKE 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' ORDER BY P.year DESC",
          "SELECT venue, year FROM Paper p WHERE paper_id IN (SELECT al.paper_id FROM Author_list al, Author a WHERE al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen')",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name LIKE '%Mckeown, Kathleen%'))",
          "SELECT venue, year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' GROUP BY p.venue, p.year"
        ]
      ]
    },
    {
      "id": 1018,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))",
          "SELECT DISTINCT P.venue, P.year FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'",
          "SELECT P.venue AS Venue, P.year AS Year FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen'",
          "SELECT venue, year FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' AND Author_list.paper_id = Paper.paper_id)",
          "SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name LIKE 'Mckeown, Kathleen'",
          "SELECT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' ORDER BY P.year DESC",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name LIKE 'Mckeown, Kathleen'))",
          "SELECT venue, year FROM Paper, Author_list, Author WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'",
          "SELECT P.venue, P.year FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen' GROUP BY P.venue, P.year"
        ]
      ]
    },
    {
      "id": 1019,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.venue, P.year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'",
          "SELECT DISTINCT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University'",
          "SELECT venue, year FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE AL.paper_id = P.paper_id AND A.name = 'Columbia University')",
          "SELECT DISTINCT P.venue, P.year FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name LIKE 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL, Affiliation A WHERE AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University')",
          "SELECT DISTINCT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' ORDER BY year DESC",
          "SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' GROUP BY venue, year",
          "SELECT DISTINCT P.venue, P.year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' ORDER BY P.year"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.venue, P.year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))",
          "SELECT P.venue, P.year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'",
          "SELECT DISTINCT venue, year FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University'",
          "SELECT venue, year FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE AL.paper_id = P.paper_id AND A.name = 'Columbia University')",
          "SELECT DISTINCT P.venue, P.year FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' ORDER BY P.year",
          "SELECT venue, year FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University')",
          "SELECT DISTINCT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' ORDER BY venue",
          "SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' GROUP BY venue, year",
          "SELECT DISTINCT P.venue, P.year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' GROUP BY P.venue, P.year"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY COUNT(P.paper_id) DESC LIMIT 1",
          "SELECT TOP 1 A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.name ORDER BY COUNT(*) DESC",
          "SELECT name FROM (SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name) AS T ORDER BY num_papers DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(P.paper_id) AS paper_count FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) AS T)",
          "SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) >= ALL (SELECT COUNT(P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE P.year = 2009 GROUP BY AL.author_id)",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.name, COUNT(P.paper_id) AS Papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY Papers DESC FETCH FIRST ROW ONLY",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 AND AL.author_id = A.author_id GROUP BY AL.author_id HAVING COUNT(P.paper_id) > ALL (SELECT COUNT(P.paper_id) FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id))",
          "SELECT A.name FROM Author A JOIN (SELECT AL.author_id, COUNT(P.paper_id) AS cnt FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY cnt DESC LIMIT 1) AS Sub ON A.author_id = Sub.author_id"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(P.paper_id) DESC LIMIT 1",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(P.paper_id) DESC",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.name FROM Author A INNER JOIN (SELECT AL.author_id, COUNT(*) AS num_papers FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY num_papers DESC LIMIT 1) T ON A.author_id = T.author_id",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id HAVING COUNT(P.paper_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(P.paper_id) AS COUNT FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) T))",
          "SELECT name FROM (SELECT A.name, COUNT(P.paper_id) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY num_papers DESC) AS subquery LIMIT 1",
          "SELECT A.name FROM Author A JOIN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1) B ON A.author_id = B.author_id",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 AND A.author_id = AL.author_id GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id HAVING COUNT(P.paper_id) = (SELECT MAX(num_papers) FROM (SELECT COUNT(P.paper_id) AS num_papers FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) T)"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY COUNT(P.paper_id) DESC LIMIT 3",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE year = 2009)) GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT TOP 3 A.name, COUNT(*) AS PaperCount FROM Affiliation A INNER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY PaperCount DESC",
          "SELECT name FROM (SELECT A.name, COUNT(P.paper_id) AS cnt FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name) AS SubQuery ORDER BY cnt DESC LIMIT 3",
          "SELECT A.name FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.name ORDER BY COUNT(P.paper_id) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT A.name FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) > 0 ORDER BY COUNT(P.paper_id) DESC LIMIT 3",
          "SELECT A.name, COUNT(P.paper_id) AS TotalPapers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY TotalPapers DESC LIMIT 3",
          "WITH PaperCount AS (SELECT affiliation_id, COUNT(paper_id) AS Total FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY affiliation_id) SELECT Affiliation.name FROM Affiliation JOIN PaperCount ON Affiliation.affiliation_id = PaperCount.affiliation_id ORDER BY Total DESC LIMIT 3",
          "SELECT A.name FROM Affiliation A WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE AL.affiliation_id = A.affiliation_id AND P.year = 2009) GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT A.name, COUNT(*) AS NumberOfPapers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY NumberOfPapers DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(P.paper_id) AS paper_count FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY paper_count DESC LIMIT 3",
          "SELECT name, COUNT(paper_id) FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE year = 2009 GROUP BY name ORDER BY COUNT(paper_id) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT TOP 3 Affiliation.name, COUNT(*) AS NumberOfPapers FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY NumberOfPapers DESC",
          "SELECT Affiliation.name, COUNT(Paper.paper_id) AS TotalPapers FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id AND Paper.year = 2009 GROUP BY Affiliation.name ORDER BY TotalPapers DESC LIMIT 3",
          "SELECT name FROM (SELECT Affiliation.name, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY paper_count DESC) AS subquery LIMIT 3",
          "SELECT Affiliation.name, COUNT(Paper.paper_id) AS count FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id LEFT JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY count DESC LIMIT 3",
          "SELECT Affiliation.name, COUNT(Paper.paper_id) FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name HAVING COUNT(Paper.paper_id) > 0 ORDER BY COUNT(Paper.paper_id) DESC LIMIT 3",
          "SELECT Affiliation.name AS AffiliationName, COUNT(*) AS PaperCount FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY PaperCount DESC LIMIT 3",
          "SELECT name, COUNT(paper_id) AS total_papers FROM Affiliation INNER JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY name ORDER BY total_papers DESC LIMIT 3",
          "SELECT Affiliation.name, COUNT(Paper.paper_id) AS PaperCount FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY PaperCount DESC FETCH FIRST 3 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) AS TotalPapers FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(1) FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(*) FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Author_list.paper_id = Paper.paper_id AND Affiliation.name = 'Columbia University') AND year <= 2009",
          "SELECT COUNT(paper_id) FROM Paper p WHERE p.year <= 2009 AND EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')",
          "SELECT COUNT(*) FROM Paper p LEFT JOIN Author_list al ON p.paper_id = al.paper_id LEFT JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT P.paper_id) FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.year <= 2009",
          "SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(Paper.paper_id) AS PaperCount FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year <= 2009 GROUP BY Affiliation.name",
          "SELECT COUNT(DISTINCT paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Paper.paper_id FROM Paper LEFT JOIN Author_list ON Paper.paper_id = Author_list.paper_id LEFT JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009) AS ColumbiaPapers",
          "SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year <= 2009",
          "SELECT COUNT(1) FROM Paper p INNER JOIN Author_list al ON p.paper_id = al.paper_id INNER JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
          "SELECT COUNT(*) FROM Paper p WHERE EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND al.paper_id = p.paper_id) AND p.year <= 2009",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(UNIQUE Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009)",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT id) FROM (SELECT Paper.paper_id AS id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009)",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) AS TotalPapers FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper LEFT JOIN Author_list ON Paper.paper_id = Author_list.paper_id LEFT JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009 GROUP BY Paper.paper_id",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(UNIQUE Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009)",
          "SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT id) FROM (SELECT Paper.paper_id AS id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009) AS subquery",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year > 1999 AND Paper.year < 2010",
          "SELECT COUNT(DISTINCT Paper.paper_id) AS TotalPapers FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper LEFT JOIN Author_list ON Paper.paper_id = Author_list.paper_id LEFT JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND (Paper.year >= 2000 AND Paper.year <= 2009)",
          "SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year IN (2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009)"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P JOIN (SELECT paper_id, COUNT(author_id) AS num_authors FROM Author_list GROUP BY paper_id ORDER BY num_authors DESC LIMIT 1) A ON P.paper_id = A.paper_id",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(author_id) AS cnt FROM Author_list GROUP BY paper_id) T))",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) AS A ON P.paper_id = A.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT AL.paper_id FROM Author_list AL GROUP BY AL.paper_id ORDER BY COUNT(AL.author_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P, (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) AS MaxAuthors WHERE P.paper_id = MaxAuthors.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM (SELECT paper_id, COUNT(author_id) AS num_authors FROM Author_list GROUP BY paper_id) AS SubQuery ORDER BY num_authors DESC LIMIT 1)",
          "SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list A WHERE P.paper_id = A.paper_id GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(COUNT(author_id)) FROM Author_list GROUP BY paper_id))"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P JOIN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) AS A ON P.paper_id = A.paper_id",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id) AS counts))",
          "SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT A.paper_id FROM Author_list A GROUP BY A.paper_id ORDER BY COUNT(A.author_id) DESC LIMIT 1)",
          "SELECT Paper.title FROM Paper INNER JOIN (SELECT paper_id, COUNT(author_id) AS num_authors FROM Author_list GROUP BY paper_id ORDER BY num_authors DESC LIMIT 1) AS MostAuthors ON Paper.paper_id = MostAuthors.paper_id",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list A WHERE A.paper_id = P.paper_id GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(COUNT(author_id)) FROM Author_list GROUP BY paper_id))",
          "SELECT title FROM Paper WHERE paper_id = (SELECT TOP 1 paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC)",
          "SELECT P.title FROM Paper P JOIN Author_list A ON P.paper_id = A.paper_id GROUP BY P.paper_id, P.title ORDER BY COUNT(A.author_id) DESC LIMIT 1",
          "SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) >= ALL (SELECT COUNT(author_id) FROM Author_list GROUP BY paper_id))"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT A2.author_id) FROM Author A1 JOIN Author_list AL1 ON A1.author_id = AL1.author_id JOIN Paper P ON AL1.paper_id = P.paper_id JOIN Author_list AL2 ON P.paper_id = AL2.paper_id JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A1.name = 'Mckeown, Kathleen' AND A2.name != 'Mckeown, Kathleen'",
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL2.author_id) - 1 FROM Author_list AL1 JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL INNER JOIN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AS P ON AL.paper_id = P.paper_id WHERE AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "WITH KathleenPapers AS (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM KathleenPapers) AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL2.author_id) FROM Author A JOIN Author_list AL1 ON A.author_id = AL1.author_id JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE A.name = 'Mckeown, Kathleen' AND AL2.author_id != AL1.author_id",
          "SELECT COUNT(DISTINCT AL2.author_id) FROM Author_list AL1, Author_list AL2 WHERE AL1.paper_id = AL2.paper_id AND AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND AL2.author_id != AL1.author_id",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A ON AL2.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen') AND AL.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "WITH Collaborators AS (SELECT AL2.author_id FROM Author_list AL1 JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) SELECT COUNT(DISTINCT author_id) FROM Collaborators WHERE author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL2.author_id) FROM Author_list AL1 JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND AL2.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT T2.author_id) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name = 'Mckeown, Kathleen' AND T2.author_id != T1.author_id",
          "SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE name = 'Mckeown, Kathleen') AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND A.name = 'Mckeown, Kathleen' AND AL.author_id != A.author_id",
          "SELECT COUNT(DISTINCT other_authors.author_id) FROM Author_list AS main_author_list JOIN Author_list AS other_authors ON main_author_list.paper_id = other_authors.paper_id JOIN Author ON main_author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' AND other_authors.author_id != Author.author_id",
          "WITH KathleenPapers AS (SELECT paper_id FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen') SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM KathleenPapers) AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN (SELECT paper_id FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen') KP ON AL.paper_id = KP.paper_id WHERE AL.author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL2.author_id) FROM Author_list AL1 JOIN Author A1 ON AL1.author_id = A1.author_id JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE A1.name = 'Mckeown, Kathleen' AND AL2.author_id != A1.author_id",
          "SELECT COUNT(UNIQUE AL.author_id) FROM Author_list AL INNER JOIN (SELECT paper_id FROM Author_list INNER JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen') AS KP ON AL.paper_id = KP.paper_id WHERE AL.author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL, (SELECT paper_id FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen') AS KP WHERE AL.paper_id = KP.paper_id AND AL.author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')",
          "SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE P.paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name = 'Mckeown, Kathleen') AND A.author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AS AL2 JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.name, COUNT(*) AS coauthored_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.name ORDER BY coauthored_papers DESC LIMIT 1",
          "SELECT TOP 1 A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id)))",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM (SELECT A.name, COUNT(*) AS num_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.name) AS T ORDER BY num_papers DESC LIMIT 1",
          "WITH CoAuthors AS (SELECT AL.author_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))) SELECT A.name FROM Author A JOIN CoAuthors C ON A.author_id = C.author_id GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = (SELECT MAX(C.cnt) FROM (SELECT COUNT(*) AS cnt FROM Author_list AL2 WHERE AL2.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY AL2.author_id) C))",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT A2.author_id FROM Author A2 WHERE A2.name = 'Mckeown, Kathleen')) GROUP BY AL.author_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Author_list GROUP BY author_id) AS counts))",
          "SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AS AL2 WHERE AL2.author_id = (SELECT A2.author_id FROM Author AS A2 WHERE A2.name = 'Mckeown, Kathleen')) GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 INNER JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen') GROUP BY A.author_id ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen')) GROUP BY A.author_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Author_list GROUP BY author_id)",
          "SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id AND AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.author_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name FROM (SELECT A.name, COUNT(*) AS coauthored_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.name ORDER BY coauthored_papers DESC) WHERE ROWNUM = 1",
          "SELECT A.name FROM Author A WHERE A.author_id = (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id ORDER BY COUNT(CASE WHEN AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT A2.author_id FROM Author A2 WHERE A2.name = 'Mckeown, Kathleen')) THEN 1 ELSE NULL END) DESC LIMIT 1)",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Author_list AL WHERE A.author_id = AL.author_id AND AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT A2.author_id FROM Author A2 WHERE A2.name = 'Mckeown, Kathleen'))) GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "WITH CoAuthors AS (SELECT AL.author_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen')) SELECT A.name FROM Author A JOIN CoAuthors C ON A.author_id = C.author_id GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.name FROM Author A INNER JOIN (SELECT AL.author_id, COUNT(*) AS PapersWithMckeown FROM Author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 WHERE AL2.author_id = (SELECT A2.author_id FROM Author A2 WHERE A2.name = 'Mckeown, Kathleen')) GROUP BY AL.author_id) AS SubQuery ON A.author_id = SubQuery.author_id ORDER BY SubQuery.PapersWithMckeown DESC LIMIT 1",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL JOIN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AS MckeownPapers ON AL.paper_id = MckeownPapers.paper_id) GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title ILIKE '%translation%'",
          "SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'",
          "SELECT p.paper_id FROM Paper p WHERE p.title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title CONTAINS 'translation'",
          "SELECT paper_id FROM Paper WHERE INSTR(title, 'translation') > 0",
          "SELECT paper_id FROM Paper WHERE POSITION('translation' IN title) > 0",
          "SELECT DISTINCT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title REGEXP '.*translation.*'"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title ILIKE '%translation%'",
          "SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'",
          "SELECT p.paper_id FROM Paper p WHERE p.title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'",
          "SELECT DISTINCT paper_id FROM Paper WHERE title LIKE '%translation%'",
          "SELECT paper_id FROM Paper WHERE title CONTAINS 'translation'",
          "SELECT paper_id FROM Paper WHERE INSTR(title, 'translation') > 0",
          "SELECT paper_id FROM Paper WHERE POSITION('translation' IN title) > 0",
          "SELECT paper_id FROM Paper WHERE title REGEXP 'translation'"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
          "SELECT P.paper_id, P.title FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id WHERE C.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE NOT EXISTS (SELECT 1 FROM Citation WHERE cited_paper_id = Paper.paper_id)",
          "SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.cited_paper_id FROM Citation C)",
          "SELECT paper_id, title FROM Paper EXCEPT SELECT cited_paper_id, title FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id",
          "SELECT DISTINCT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.cited_paper_id FROM Citation C)",
          "SELECT paper_id, title FROM Paper P WHERE NOT EXISTS (SELECT NULL FROM Citation C WHERE C.cited_paper_id = P.paper_id)",
          "SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT DISTINCT C.cited_paper_id FROM Citation C)",
          "SELECT paper_id, title FROM Paper AS P WHERE P.paper_id NOT IN (SELECT cited_paper_id FROM Citation AS C)",
          "SELECT P.paper_id, P.title FROM Paper P LEFT OUTER JOIN Citation C ON P.paper_id = C.cited_paper_id WHERE C.cited_paper_id IS NULL"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT P.paper_id, P.title FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id WHERE C.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
          "SELECT Paper.paper_id, Paper.title FROM Paper LEFT OUTER JOIN Citation ON Paper.paper_id = Citation.cited_paper_id WHERE Citation.cited_paper_id IS NULL",
          "SELECT p.paper_id, p.title FROM Paper p WHERE NOT EXISTS (SELECT 1 FROM Citation c WHERE c.cited_paper_id = p.paper_id)",
          "SELECT paper_id, title FROM Paper AS p LEFT JOIN Citation AS c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
          "SELECT DISTINCT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
          "SELECT p.paper_id, p.title FROM Paper p LEFT OUTER JOIN Citation c ON p.paper_id = c.cited_paper_id AND c.cited_paper_id IS NULL",
          "SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation)",
          "SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c)",
          "SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id AND c.cited_paper_id IS NULL ORDER BY p.paper_id"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE address LIKE '%China%' GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1)",
          "SELECT A.name FROM Affiliation A WHERE A.affiliation_id IN (SELECT AL.affiliation_id FROM Author_list AL JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AL.affiliation_id HAVING COUNT(AL.paper_id) = (SELECT MAX(COUNT(AL2.paper_id)) FROM Author_list AL2 JOIN Affiliation AF2 ON AL2.affiliation_id = AF2.affiliation_id WHERE AF2.address LIKE '%China%' GROUP BY AL2.affiliation_id))",
          "SELECT TOP 1 A.name FROM Affiliation A INNER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id WHERE A.address LIKE '%China%' GROUP BY A.affiliation_id, A.name ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT A.name FROM Affiliation A WHERE A.affiliation_id = (SELECT TOP 1 AL.affiliation_id FROM Author_list AL JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AL.affiliation_id ORDER BY COUNT(*) DESC)",
          "SELECT A.name FROM Affiliation A, (SELECT affiliation_id, COUNT(paper_id) AS cnt FROM Author_list GROUP BY affiliation_id) AS C WHERE A.affiliation_id = C.affiliation_id AND A.address LIKE '%China%' ORDER BY C.cnt DESC LIMIT 1",
          "SELECT A.name FROM Affiliation A WHERE A.affiliation_id = (SELECT affiliation_id FROM (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE address LIKE '%China%' GROUP BY affiliation_id) AS SubQuery ORDER BY paper_count DESC LIMIT 1)",
          "SELECT A.name FROM (SELECT AF.name, COUNT(AL.paper_id) AS total_papers FROM Affiliation AF JOIN Author_list AL ON AF.affiliation_id = AL.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AF.name ORDER BY total_papers DESC LIMIT 1) A",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id HAVING COUNT(paper_id) = MAX(COUNT(paper_id)))",
          "SELECT name FROM (SELECT AF.name, COUNT(AL.paper_id) AS paper_count FROM Affiliation AF JOIN Author_list AL ON AF.affiliation_id = AL.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AF.name ORDER BY paper_count DESC LIMIT 1) AS Result",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE address LIKE '%China%' GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name FROM Affiliation A WHERE A.affiliation_id = (SELECT AL.affiliation_id FROM Author_list AL JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AL.affiliation_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1)",
          "SELECT TOP 1 A.name FROM Affiliation A INNER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id WHERE A.address LIKE '%China%' GROUP BY A.affiliation_id, A.name ORDER BY COUNT(AL.paper_id) DESC",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE address LIKE '%China%' GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT A.name FROM (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id ORDER BY paper_count DESC LIMIT 1) AS SubQuery JOIN Affiliation A ON SubQuery.affiliation_id = A.affiliation_id",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id HAVING COUNT(paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(paper_id) AS paper_count FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id) AS Sub))",
          "SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM (SELECT affiliation_id, COUNT(paper_id) AS cnt FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id) AS T ORDER BY cnt DESC LIMIT 1)",
          "SELECT A.name FROM Affiliation A JOIN (SELECT affiliation_id, COUNT(paper_id) AS total_papers FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id) AS B ON A.affiliation_id = B.affiliation_id ORDER BY B.total_papers DESC LIMIT 1",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address CONTAINS 'China' GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT name FROM Affiliation WHERE affiliation_id = (SELECT affiliation_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.address LIKE '%China%' GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC FETCH FIRST ROW ONLY)"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year, COUNT(paper_id) AS num_papers FROM Paper GROUP BY venue, year",
          "SELECT year, venue, COUNT(*) AS total_papers FROM Paper GROUP BY year, venue",
          "SELECT COUNT(paper_id) AS paper_count, venue, year FROM Paper GROUP BY year, venue ORDER BY year, venue",
          "SELECT year, venue, COUNT(paper_id) FROM Paper GROUP BY year, venue ORDER BY venue",
          "SELECT venue, COUNT(paper_id) AS number_of_papers, year FROM Paper GROUP BY venue, year ORDER BY year DESC",
          "SELECT year, venue, COUNT(*) FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC",
          "SELECT venue, year, COUNT(*) AS count_of_papers FROM Paper GROUP BY venue, year ORDER BY count_of_papers",
          "SELECT COUNT(paper_id), venue, year FROM Paper GROUP BY venue, year HAVING COUNT(paper_id) > 0",
          "SELECT venue, year, COUNT(paper_id) AS total FROM Paper WHERE venue IS NOT NULL GROUP BY venue, year",
          "SELECT year, venue, COUNT(paper_id) AS count_papers FROM Paper WHERE year IS NOT NULL GROUP BY year, venue ORDER BY year"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year",
          "SELECT venue, year, COUNT(paper_id) AS total_papers FROM Paper GROUP BY venue, year",
          "SELECT COUNT(paper_id) AS paper_count, venue, year FROM Paper GROUP BY venue, year",
          "SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year",
          "SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year",
          "SELECT venue, year, COUNT(paper_id) AS count_of_papers FROM Paper GROUP BY venue, year ORDER BY venue, year",
          "SELECT venue, year, COUNT(*) AS total FROM Paper GROUP BY venue, year ORDER BY venue, year",
          "SELECT venue, year, COUNT(paper_id) AS number_of_papers FROM Paper GROUP BY venue, year ORDER BY venue, year",
          "SELECT venue, year, COUNT(*) AS count FROM Paper GROUP BY venue, year ORDER BY year, venue",
          "SELECT venue, year, COUNT(paper_id) AS paper_total FROM Paper GROUP BY venue, year ORDER BY year, venue"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(DISTINCT P.paper_id) AS total_papers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name",
          "SELECT affiliation.name, COUNT(paper.paper_id) AS num_papers FROM affiliation INNER JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id INNER JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
          "SELECT A.name AS Affiliation_Name, COUNT(DISTINCT P.paper_id) AS Paper_Count FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) FROM affiliation, author_list, paper WHERE affiliation.affiliation_id = author_list.affiliation_id AND author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
          "SELECT A.name, COUNT(*) AS Total_Papers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id",
          "SELECT A.name, COUNT(P.paper_id) FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id ORDER BY COUNT(P.paper_id) DESC",
          "SELECT affiliation.name, COUNT(paper.paper_id) AS total_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name ORDER BY total_papers",
          "SELECT A.name AS Affiliation, COUNT(DISTINCT P.paper_id) AS Num_Papers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.name ORDER BY Num_Papers DESC",
          "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS paper_count FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name HAVING COUNT(DISTINCT paper.paper_id) > 0",
          "SELECT A.name, COUNT(P.paper_id) AS Total_Papers FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id GROUP BY A.name ORDER BY Total_Papers DESC"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT A.name, COUNT(DISTINCT P.paper_id) AS published_papers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name",
          "SELECT affiliation.name, COUNT(paper.paper_id) AS total_papers FROM Affiliation affiliation INNER JOIN Author_list author_list ON affiliation.affiliation_id = author_list.affiliation_id INNER JOIN Paper paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id, affiliation.name",
          "SELECT A.name AS Affiliation_Name, COUNT(DISTINCT P.paper_id) AS Paper_Count FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name",
          "SELECT name, COUNT(DISTINCT paper_id) FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id, Affiliation.name",
          "SELECT A.name, COUNT(*) AS Num_Papers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name",
          "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS paper_count FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id, affiliation.name ORDER BY affiliation.name",
          "SELECT A.name, COUNT(P.paper_id) AS Total_Papers FROM Affiliation A INNER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id INNER JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name ORDER BY Total_Papers DESC",
          "SELECT A.name AS Affiliation, COUNT(DISTINCT P.paper_id) AS Papers_Published FROM Affiliation A LEFT OUTER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT OUTER JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name",
          "SELECT A.name, COUNT(P.paper_id) FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name HAVING COUNT(P.paper_id) > 0",
          "SELECT A.name AS Affiliation_Name, COUNT(P.paper_id) AS Number_of_Papers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name ORDER BY Number_of_Papers DESC"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P INNER JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)",
          "SELECT Paper.title FROM Paper JOIN Citation ON Paper.paper_id = Citation.paper_id GROUP BY Paper.paper_id HAVING COUNT(Citation.cited_paper_id) > 50",
          "SELECT title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE P.paper_id = C.paper_id GROUP BY C.paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(*) > 50",
          "SELECT title FROM Paper WHERE EXISTS (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50 AND Paper.paper_id = Citation.paper_id)",
          "SELECT P.title FROM Paper P WHERE (SELECT COUNT(*) FROM Citation C WHERE C.paper_id = P.paper_id) > 50"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P INNER JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50)",
          "SELECT Paper.title FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id GROUP BY Citation.cited_paper_id HAVING COUNT(Citation.cited_paper_id) > 50",
          "SELECT title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE P.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50",
          "SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT P.title FROM Paper P JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(C.cited_paper_id) > 50",
          "SELECT title FROM Paper WHERE EXISTS (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50 AND Paper.paper_id = Citation.cited_paper_id)",
          "SELECT P.title FROM Paper P WHERE (SELECT COUNT(*) FROM Citation C WHERE C.cited_paper_id = P.paper_id) > 50"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT A.author_id) FROM Author AS A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE NOT EXISTS (SELECT 1 FROM Author_list JOIN Citation ON Author_list.paper_id = Citation.cited_paper_id GROUP BY Citation.cited_paper_id HAVING COUNT(*) > 50 AND Author_list.author_id = Author.author_id)",
          "SELECT COUNT(*) FROM (SELECT DISTINCT author_id FROM Author EXCEPT SELECT DISTINCT AL.author_id FROM Author_list AL INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) AS Cited ON AL.paper_id = Cited.paper_id) AS Result",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A LEFT JOIN (SELECT AL.author_id FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50) B ON A.author_id = B.author_id WHERE B.author_id IS NULL",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Citation C WHERE AL.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(C.cited_paper_id) > 50)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id WHERE A.author_id = AL.author_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50))",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A LEFT JOIN (SELECT DISTINCT AL.author_id FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY C.cited_paper_id HAVING COUNT(C.cited_paper_id) > 50) Temp ON A.author_id = Temp.author_id WHERE Temp.author_id IS NULL",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) AS HighlyCited ON Author_list.paper_id = HighlyCited.paper_id)"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C ON AL.paper_id = C.paper_id)",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT Author_list.author_id FROM Author_list JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) AS HighCitationPapers ON Author_list.paper_id = HighCitationPapers.paper_id)",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50))",
          "SELECT COUNT(author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) Temp ON AL.paper_id = Temp.paper_id)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) C ON AL.paper_id = C.paper_id WHERE C.paper_id IS NULL",
          "SELECT COUNT(*) FROM (SELECT author_id FROM Author EXCEPT SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)) AS Result",
          "SELECT COUNT(DISTINCT author_id) FROM Author WHERE NOT EXISTS (SELECT 1 FROM Author_list WHERE Author.author_id = Author_list.author_id AND paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50))",
          "SELECT COUNT(*) FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id WHERE AL.author_id = A.author_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) > 50)",
          "SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL WHERE AL.paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50))",
          "SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Citation C WHERE AL.paper_id = C.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) > 50)"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue IN ('NAACL', 'ACL') AND P.year = 2009 AND A.author_id IN (SELECT AL.author_id FROM Author_list AS AL JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009) AND A.author_id IN (SELECT AL.author_id FROM Author_list AS AL JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009)",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009) INTERSECT SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id = A.author_id AND P.venue = 'NAACL' AND P.year = 2009) AND EXISTS (SELECT 1 FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id = A.author_id AND P.venue = 'ACL' AND P.year = 2009)",
          "SELECT A.name FROM Author A, Paper P, Author_list AL WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 AND P.venue IN ('NAACL', 'ACL') GROUP BY A.name HAVING COUNT(DISTINCT P.venue) = 2",
          "WITH NAACL_Authors AS (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009)), ACL_Authors AS (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009)) SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM NAACL_Authors INTERSECT SELECT author_id FROM ACL_Authors)",
          "SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009) AND author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009)",
          "SELECT DISTINCT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue IN ('NAACL', 'ACL') AND P.year = 2009 GROUP BY A.name HAVING COUNT(DISTINCT P.venue) > 1",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'NAACL' AND P.year = 2009) INTERSECT SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL' AND P.year = 2009)",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009 UNION SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))",
          "SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009 UNION SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009 INTERSECT SELECT DISTINCT A.name FROM Author AS A JOIN Author_list AS AL ON A.author_id = AL.author_id JOIN Paper AS P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009",
          "SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009) INTERSECT SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))",
          "SELECT A.name FROM Author A WHERE EXISTS (SELECT 1 FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id = A.author_id AND P.venue = 'NAACL' AND P.year = 2009) AND EXISTS (SELECT 1 FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id = A.author_id AND P.venue = 'ACL' AND P.year = 2009)",
          "WITH NAACL_Authors AS (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009)), ACL_Authors AS (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009)) SELECT DISTINCT A.name FROM Author A JOIN NAACL_Authors N ON A.author_id = N.author_id JOIN ACL_Authors C ON A.author_id = C.author_id",
          "SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.venue IN ('NAACL', 'ACL') AND P.year = 2009 GROUP BY A.author_id HAVING COUNT(DISTINCT P.venue) = 2",
          "SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009) AND author_id IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009)",
          "SELECT DISTINCT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009)) AND author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))",
          "SELECT name FROM Author WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE AL.author_id = Author.author_id AND P.venue = 'NAACL' AND P.year = 2009) AND EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE AL.author_id = Author.author_id AND P.venue = 'ACL' AND P.year = 2009)",
          "SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009) AND A.author_id IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009)",
          "SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'NAACL' AND P.year = 2009) INTERSECT SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL' AND P.year = 2009)"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'))",
          "SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)",
          "SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue != 'ACL' OR P.venue IS NULL",
          "SELECT DISTINCT A.name FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL')",
          "SELECT A.name FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL')",
          "SELECT name FROM Author EXCEPT SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.venue = 'ACL'",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)",
          "SELECT DISTINCT A.name FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "aan_1",
      "infer_predictions": [
        [
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue = 'ACL')",
          "SELECT A.name FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL')",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT Author_list.author_id FROM Author_list INNER JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE venue = 'ACL')",
          "SELECT DISTINCT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list, Paper WHERE Author_list.paper_id = Paper.paper_id AND Paper.venue = 'ACL')",
          "SELECT name FROM Author EXCEPT SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue = 'ACL'",
          "SELECT name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id AND Paper.venue = 'ACL')",
          "SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue != 'ACL' OR P.venue IS NULL",
          "SELECT name FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL')",
          "SELECT name FROM Author WHERE NOT EXISTS (SELECT NULL FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE venue = 'ACL' AND Author_list.author_id = Author.author_id)"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM conference",
          "SELECT COUNT(Conference_ID) FROM conference",
          "SELECT COUNT(1) FROM conference",
          "SELECT COUNT(Conference_ID) AS NumberOfConferences FROM conference",
          "SELECT COUNT(*) AS TotalConferences FROM conference",
          "SELECT COUNT(DISTINCT Conference_ID) FROM conference",
          "SELECT COUNT(DISTINCT Conference_Name) FROM conference",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Conference_ID FROM conference) AS UniqueConferences",
          "SELECT COUNT(*) FROM (SELECT Conference_ID FROM conference GROUP BY Conference_ID) AS CountConferences",
          "SELECT COUNT(Conference_ID) FROM conference WHERE Conference_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM conference",
          "SELECT COUNT(Conference_ID) FROM conference",
          "SELECT COUNT(Conference_ID) AS TotalConferences FROM conference",
          "SELECT COUNT(*) AS Total_Number_of_Conferences FROM conference",
          "SELECT COUNT(1) FROM conference",
          "SELECT COUNT(DISTINCT Conference_ID) FROM conference",
          "SELECT COUNT(DISTINCT Conference_ID) AS Total_Conferences FROM conference",
          "SELECT COUNT(*) FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT COUNT(Conference_ID) FROM conference WHERE Conference_ID IS NOT NULL",
          "SELECT COUNT(*) FROM conference WHERE Conference_ID > 0"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT Conference_Name FROM conference",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL GROUP BY Conference_Name",
          "SELECT DISTINCT c.Conference_Name FROM conference AS c",
          "SELECT Conference_Name FROM (SELECT DISTINCT Conference_Name FROM conference) AS UniqueConferences",
          "SELECT DISTINCT Conference_Name FROM conference ORDER BY Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_Name <> '' GROUP BY Conference_Name",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name != ''",
          "SELECT DISTINCT Conference_Name FROM conference WHERE LENGTH(Conference_Name) > 0"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT Conference_Name FROM conference",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name FROM (SELECT DISTINCT Conference_Name FROM conference) AS unique_conferences",
          "SELECT DISTINCT c.Conference_Name FROM conference AS c",
          "SELECT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL GROUP BY Conference_Name",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name <> ''",
          "SELECT Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(*) >= 1",
          "SELECT DISTINCT Conference_Name FROM conference ORDER BY Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL AND Conference_Name <> '' GROUP BY Conference_Name",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL ORDER BY Conference_Name"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, Year, Location FROM conference",
          "SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference",
          "SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c",
          "SELECT Conference_Name AS Name, Year AS YearHeld, Location AS Venue FROM conference",
          "SELECT * FROM conference",
          "SELECT conference.* FROM conference",
          "SELECT Conference_Name, Year, Location FROM conference ORDER BY Year",
          "SELECT DISTINCT Conference_Name, Year, Location FROM conference",
          "SELECT Conference_Name, Year, Location FROM conference WHERE Conference_Name IS NOT NULL",
          "SELECT Conference_Name, Year, Location FROM conference GROUP BY Conference_Name, Year, Location"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, Year, Location FROM conference",
          "SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference",
          "SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c",
          "SELECT Conference_Name AS Name, Year AS Conference_Year, Location AS Venue FROM conference",
          "SELECT * FROM conference",
          "SELECT conference.* FROM conference",
          "SELECT `Conference_Name`, `Year`, `Location` FROM `conference`",
          "SELECT Name, Year, Location FROM (SELECT Conference_Name AS Name, Year, Location FROM conference) AS ConfDetails",
          "SELECT conf.Conference_Name, conf.Year, conf.Location FROM conference conf",
          "SELECT DISTINCT Conference_Name, Year, Location FROM conference"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name, COUNT(cp.Conference_ID) AS Participation_Count FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Num_Participations FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.staff_ID) AS Total_Participations FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(DISTINCT cp.staff_ID) AS Participants FROM conference JOIN conference_participation cp ON conference.Conference_ID = cp.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.Conference_ID) FROM conference AS c JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) AS Total_Participations FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(cp.Conference_ID) AS Participation_Count FROM conference LEFT OUTER JOIN conference_participation cp ON conference.Conference_ID = cp.Conference_ID GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(cp.Conference_ID) AS Num_Times_Participated FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name, COUNT(*) AS occurrences FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name, COUNT(Conference_ID) AS Total FROM conference GROUP BY Conference_Name",
          "SELECT Conference_Name, COUNT(1) AS Count FROM conference GROUP BY Conference_Name",
          "SELECT c.Conference_Name, COUNT(*) FROM conference c GROUP BY c.Conference_Name",
          "SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name ORDER BY Conference_Name",
          "SELECT Conference_Name, COUNT(*) AS Num_Occurrences FROM conference GROUP BY Conference_Name ORDER BY Num_Occurrences DESC",
          "SELECT Conference_Name, COUNT(Conference_ID) FROM conference GROUP BY Conference_Name HAVING COUNT(Conference_ID) > 0",
          "SELECT Conference_Name, COUNT(*) AS Frequency FROM conference GROUP BY Conference_Name HAVING COUNT(*) > 1",
          "SELECT Conference_Name, COUNT(*) AS Total_Occurrences FROM conference GROUP BY Conference_Name ORDER BY Total_Occurrences",
          "SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year, COUNT(*) AS Num_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Conference_Count FROM conference GROUP BY Year",
          "SELECT Year, COUNT(1) AS Total_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_Name) AS Num_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(DISTINCT Conference_ID) AS Num_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Total_Conferences FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(*) AS Conference_Count FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Num_Conferences FROM conference GROUP BY Year ORDER BY Year DESC"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year, COUNT(*) AS Num_Conferences FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Total_Conferences FROM conference GROUP BY Year",
          "SELECT COUNT(Conference_ID), Year FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year ORDER BY Year",
          "SELECT Year, COUNT(*) FROM conference GROUP BY Year ORDER BY Year DESC",
          "SELECT Year, COUNT(DISTINCT Conference_ID) AS Conference_Count FROM conference GROUP BY Year",
          "SELECT Year, COUNT(Conference_ID) AS Conference_Total FROM conference GROUP BY Year HAVING COUNT(Conference_ID) > 0",
          "SELECT Year, COUNT(*) AS Total FROM conference GROUP BY Year HAVING COUNT(*) > 0",
          "SELECT COUNT(*), Year FROM conference GROUP BY Year ORDER BY COUNT(*) DESC",
          "SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year HAVING COUNT(Conference_ID) > 0"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM (SELECT Year, COUNT(*) AS num_conferences FROM conference GROUP BY Year) AS yearly_data ORDER BY num_conferences ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY Year) AS counts)",
          "SELECT TOP 1 Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT MIN(Year) FROM (SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC) AS least_conferences",
          "SELECT Year, COUNT(*) AS ConferenceCount FROM conference GROUP BY Year ORDER BY ConferenceCount ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0 ROWS",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT Year FROM (SELECT Year, COUNT(*) AS num_conferences FROM conference GROUP BY Year) AS yearly_counts ORDER BY num_conferences ASC LIMIT 1",
          "SELECT Year, MIN(conference_count) FROM (SELECT Year, COUNT(*) AS conference_count FROM conference GROUP BY Year) AS yearly_data",
          "SELECT TOP 1 Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC",
          "SELECT Year FROM conference GROUP BY Year HAVING COUNT(Conference_ID) = (SELECT MIN(conference_count) FROM (SELECT COUNT(*) AS conference_count FROM conference GROUP BY Year) subquery)",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1",
          "SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY Year) t)",
          "SELECT Year FROM (SELECT Year, COUNT(*) AS CountOfConferences FROM conference GROUP BY Year ORDER BY CountOfConferences ASC) WHERE ROWNUM = 1",
          "SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2",
          "SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2",
          "SELECT DISTINCT Location FROM conference WHERE Location IN (SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) > 1)",
          "SELECT Location, COUNT(*) AS NumConferences FROM conference GROUP BY Location HAVING NumConferences >= 2",
          "SELECT Location FROM (SELECT Location, COUNT(*) AS ConferenceCount FROM conference GROUP BY Location) AS TempTable WHERE ConferenceCount >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1",
          "SELECT DISTINCT Location FROM conference AS c1 WHERE (SELECT COUNT(*) FROM conference AS c2 WHERE c1.Location = c2.Location) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) BETWEEN 2 AND 100000",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2 ORDER BY Location"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2",
          "SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2",
          "SELECT c.Location FROM conference AS c GROUP BY c.Location HAVING COUNT(*) >= 2",
          "SELECT Location FROM (SELECT Location, COUNT(Conference_ID) AS NumConferences FROM conference GROUP BY Location) AS TempTable WHERE NumConferences >= 2",
          "SELECT c.Location FROM (SELECT Location, COUNT(Conference_ID) AS ConferenceCount FROM conference GROUP BY Location) c WHERE c.ConferenceCount >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1",
          "SELECT DISTINCT Location FROM conference WHERE Location IN (SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) > 1)",
          "WITH ConferenceCounts AS (SELECT Location, COUNT(Conference_ID) AS Count FROM conference GROUP BY Location) SELECT Location FROM ConferenceCounts WHERE Count >= 2",
          "SELECT Location FROM conference GROUP BY Location HAVING COUNT(DISTINCT Conference_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location, Founded FROM institution",
          "SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution",
          "SELECT Institution_Name AS Name, Location AS Place, Founded AS Year FROM institution",
          "SELECT * FROM institution SELECT Institution_Name, Location, Founded",
          "SELECT i.Institution_Name, i.Location, i.Founded FROM institution i",
          "SELECT `Institution_Name`, `Location`, `Founded` FROM `institution`",
          "SELECT Institution_Name, Location, Founded FROM institution ORDER BY Institution_Name",
          "SELECT Institution_Name, Location, Founded FROM institution WHERE Institution_Name IS NOT NULL",
          "SELECT DISTINCT Institution_Name, Location, Founded FROM institution",
          "SELECT Institution_Name, Location, Founded FROM institution GROUP BY Institution_Name, Location, Founded"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location, Founded FROM institution",
          "SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution",
          "SELECT Institution_Name AS Name, Location AS Location, Founded AS 'Founding Year' FROM institution",
          "SELECT * FROM institution SELECT Institution_Name, Location, Founded",
          "SELECT i.Institution_Name, i.Location, i.Founded FROM institution i",
          "SELECT `Institution_Name`, `Location`, `Founded` FROM `institution`",
          "SELECT Institution_Name, Location, Founded FROM institution ORDER BY Institution_Name",
          "SELECT Institution_Name, Location, Founded FROM institution WHERE Institution_Name IS NOT NULL",
          "SELECT DISTINCT Institution_Name, Location, Founded FROM institution",
          "SELECT Institution_Name AS 'Institution Name', Location AS 'Location', Founded AS 'Year Founded' FROM institution"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) AS TotalInstitutions FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(Institution_ID) AS Count FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded >= '1850' AND Founded <= '1900'",
          "SELECT COUNT(*) FROM institution WHERE Founded BETWEEN '1850' AND '1900'",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(*) AS NumberOfInstitutions FROM institution WHERE Founded >= 1850 AND Founded <= 1900",
          "SELECT COUNT(Institution_ID) AS Count FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900",
          "SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901",
          "SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900 GROUP BY Founded",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900 GROUP BY Founded",
          "SELECT COUNT(*) FROM institution WHERE Founded IN (SELECT Founded FROM institution WHERE Founded BETWEEN 1850 AND 1900)",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900 GROUP BY Founded"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1",
          "SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT TOP 1 Institution_Name, Location FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution WHERE Founded IN (SELECT MAX(Founded) FROM institution)",
          "SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM (SELECT Institution_Name, Location, Founded FROM institution ORDER BY Founded DESC) AS subquery LIMIT 1",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Institution_Name, Location FROM institution WHERE Founded >= ALL (SELECT Founded FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC, Institution_ID ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1",
          "SELECT TOP 1 Institution_Name, Location FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution WHERE Founded IN (SELECT MAX(Founded) FROM institution)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Founded = (SELECT MAX(Founded) FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Institution_Name, Location FROM institution WHERE Founded >= ALL (SELECT Founded FROM institution)",
          "SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC, Institution_ID ASC LIMIT 1",
          "SELECT FIRST(Institution_Name), FIRST(Location) FROM institution ORDER BY Founded DESC",
          "SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT I.Institution_Name, COUNT(S.staff_ID) AS NumberOfStaff FROM institution I LEFT JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_Name",
          "SELECT institution.Institution_Name, COUNT(staff.staff_ID) AS StaffCount FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_Name",
          "SELECT Institution_Name, COUNT(staff_ID) FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name",
          "SELECT I.Institution_Name, COUNT(*) AS TotalStaff FROM institution I, staff S WHERE I.Institution_ID = S.Institution_ID AND I.Founded > 1800 GROUP BY I.Institution_Name",
          "SELECT Institution_Name, COUNT(staff_ID) AS Staff_Number FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name",
          "SELECT I.Institution_Name, COUNT(S.staff_ID) FROM institution AS I JOIN staff AS S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_Name",
          "SELECT institution.Institution_Name, COUNT(DISTINCT staff.staff_ID) AS NumberOfStaff FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_Name",
          "SELECT I.Institution_Name, IFNULL(COUNT(S.staff_ID), 0) AS StaffCount FROM institution I LEFT JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_Name",
          "SELECT Institution_Name, COUNT(staff_ID) AS Total_Staff FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name ORDER BY Institution_Name",
          "SELECT I.Institution_Name, COUNT(S.staff_ID) AS StaffTotal FROM institution I LEFT OUTER JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_Name"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT I.Institution_ID, COUNT(S.staff_ID) AS Staff_Count, GROUP_CONCAT(S.name) AS Staff_Names FROM institution I JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS NumberOfStaff, STRING_AGG(staff.name, ', ') AS StaffNames FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT I.Institution_ID, COUNT(*) AS Total_Staff, LISTAGG(S.name, ', ') WITHIN GROUP (ORDER BY S.name) AS Staff_Names FROM institution I INNER JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS StaffCount, COLLECT_LIST(staff.name) AS StaffNames FROM institution INNER JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT I.Institution_ID, COUNT(S.staff_ID) AS StaffCount, ARRAY_TO_STRING(ARRAY_AGG(S.name), ', ') AS StaffNames FROM institution I LEFT JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS TotalStaff, STRING_AGG(staff.name, ', ') AS StaffNames FROM institution, staff WHERE institution.Institution_ID = staff.Institution_ID AND institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT I.Institution_ID, COUNT(S.staff_ID) AS StaffCount, GROUP_CONCAT(S.name ORDER BY S.name SEPARATOR ', ') AS StaffNames FROM institution I, staff S WHERE I.Institution_ID = S.Institution_ID AND I.Founded > 1800 GROUP BY I.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS StaffCount, STRING_AGG(staff.name, ', ' ORDER BY staff.name) AS StaffNames FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID",
          "SELECT I.Institution_ID, COUNT(S.staff_ID) AS NumberOfStaff, STRING_AGG(S.name, ', ') OVER (PARTITION BY I.Institution_ID) AS StaffNames FROM institution I JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_ID",
          "SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS StaffCount, CONCAT_WS(', ', COLLECT_SET(staff.name)) AS StaffNames FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.Institution_ID IS NULL",
          "SELECT Institution_Name FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.Institution_ID = institution.Institution_ID)",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name FROM institution EXCEPT SELECT Institution_Name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID",
          "SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)",
          "SELECT Institution_Name FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT DISTINCT i.Institution_Name FROM institution i LEFT OUTER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.staff_ID IS NULL",
          "SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE Institution_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)",
          "SELECT i.Institution_Name FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.Institution_ID IS NULL",
          "SELECT name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT Institution_Name FROM institution EXCEPT SELECT Institution_Name FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT Institution_ID FROM staff)",
          "SELECT DISTINCT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)",
          "SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE Institution_ID IS NOT NULL)",
          "SELECT i.Institution_Name FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s WHERE s.Institution_ID = i.Institution_ID)",
          "SELECT Institution_Name FROM institution i LEFT OUTER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE s.staff_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)",
          "SELECT s.name FROM staff s WHERE s.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff AS s)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff AS s)",
          "SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(s.Age) FROM staff AS s)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff s)",
          "SELECT name FROM staff s WHERE s.Age > (SELECT AVG(Age) FROM staff s)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(Age) FROM staff s)",
          "SELECT s.name FROM staff s WHERE s.Age > (SELECT AVG(s.Age) FROM staff)"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)",
          "SELECT S.name FROM staff S WHERE S.Age > (SELECT AVG(Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(staff.Age) FROM staff)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff AS S)",
          "SELECT S.name FROM staff AS S WHERE S.Age > (SELECT AVG(S2.Age) FROM staff AS S2)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff GROUP BY Age)",
          "SELECT staff.name FROM staff WHERE staff.Age > (SELECT AVG(Age) FROM staff GROUP BY Age)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff WHERE Age IS NOT NULL)",
          "SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff WHERE Age > 0)"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(staff.Age) AS MaximumAge, MIN(staff.Age) AS MinimumAge FROM staff WHERE staff.Nationality = 'United States'",
          "SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) as 'Max Age', MIN(Age) as 'Min Age' FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) Max_Age, MIN(Age) Min_Age FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) 'Maximum Age', MIN(Age) 'Minimum Age' FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) MaximumAge, MIN(Age) MinimumAge FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) AS 'Max Age', MIN(Age) AS 'Min Age' FROM staff WHERE Nationality = 'United States'",
          "SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM staff WHERE Nationality = 'United States'"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff",
          "SELECT MAX(staff.Age) AS MaximumAge, MIN(staff.Age) AS MinimumAge FROM staff",
          "SELECT MAX(Age), MIN(Age) FROM staff",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM staff",
          "SELECT (SELECT MAX(Age) FROM staff) AS MaxAge, (SELECT MIN(Age) FROM staff) AS MinAge",
          "SELECT MAX(Age) AS 'Maximum Age', MIN(Age) AS 'Minimum Age' FROM staff",
          "SELECT MAX(staff.Age) AS 'Max Age', MIN(staff.Age) AS 'Min Age' FROM staff",
          "SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM staff",
          "SELECT MAX(Age) AS 'Max Age', MIN(Age) AS 'Min Age' FROM staff",
          "SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM staff"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference AS c INNER JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff AS s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE cp.Conference_ID = c.Conference_ID AND s.Nationality = 'Canada')",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada')",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada' GROUP BY c.Conference_Name",
          "SELECT DISTINCT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada' ORDER BY c.Conference_Name",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp, staff s WHERE cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada')",
          "SELECT DISTINCT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada' ORDER BY c.Conference_Name ASC"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada'",
          "SELECT DISTINCT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'",
          "SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE cp.Conference_ID = c.Conference_ID AND s.Nationality = 'Canada')",
          "SELECT DISTINCT Conference_Name FROM conference WHERE Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada')",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada' GROUP BY c.Conference_Name",
          "SELECT DISTINCT c.Conference_Name FROM conference c, conference_participation cp, staff s WHERE c.Conference_ID = cp.Conference_ID AND cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada' ORDER BY c.Conference_Name",
          "SELECT c.Conference_Name FROM conference c WHERE c.Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp, staff s WHERE cp.staff_ID = s.staff_ID AND s.Nationality = 'Canada')",
          "SELECT DISTINCT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID INNER JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada' ORDER BY c.Conference_Name ASC"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT S.name FROM staff S WHERE EXISTS (SELECT 1 FROM conference_participation CP WHERE CP.staff_ID = S.staff_ID AND CP.role = 'speaker') AND EXISTS (SELECT 1 FROM conference_participation CP WHERE CP.staff_ID = S.staff_ID AND CP.role = 'sponsor')",
          "SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker' INTERSECT SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation GROUP BY staff_ID HAVING SUM(CASE WHEN role = 'speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN role = 'sponsor' THEN 1 ELSE 0 END) > 0)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role = 'speaker' AND staff.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT name FROM staff WHERE EXISTS (SELECT staff_ID FROM conference_participation WHERE conference_participation.staff_ID = staff.staff_ID AND role = 'speaker') AND EXISTS (SELECT staff_ID FROM conference_participation WHERE conference_participation.staff_ID = staff.staff_ID AND role = 'sponsor')",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role IN ('speaker', 'sponsor') GROUP BY staff_ID HAVING COUNT(DISTINCT role) = 2)",
          "WITH Speaker AS (SELECT staff_ID FROM conference_participation WHERE role = 'speaker'), Sponsor AS (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor') SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM Speaker) AND staff_ID IN (SELECT staff_ID FROM Sponsor)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker' UNION ALL SELECT staff_ID FROM conference_participation WHERE role = 'sponsor' HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') INTERSECT SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT S.name FROM staff S JOIN conference_participation CP1 ON S.staff_ID = CP1.staff_ID WHERE CP1.role = 'speaker' AND EXISTS (SELECT 1 FROM conference_participation CP2 WHERE CP2.staff_ID = S.staff_ID AND CP2.role = 'sponsor')",
          "SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role IN ('speaker', 'sponsor') GROUP BY staff_ID HAVING COUNT(DISTINCT role) = 2)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation GROUP BY staff_ID HAVING SUM(CASE WHEN role = 'speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN role = 'sponsor' THEN 1 ELSE 0 END) > 0)",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND role = 'speaker') AND EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND role = 'sponsor')",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')",
          "SELECT name FROM staff INNER JOIN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AS Speakers ON staff.staff_ID = Speakers.staff_ID INNER JOIN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor') AS Sponsors ON staff.staff_ID = Sponsors.staff_ID",
          "WITH SpeakerIDs AS (SELECT staff_ID FROM conference_participation WHERE role = 'speaker'), SponsorIDs AS (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor') SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM SpeakerIDs) AND staff_ID IN (SELECT staff_ID FROM SponsorIDs)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker' UNION ALL SELECT staff_ID FROM conference_participation WHERE role = 'sponsor' HAVING COUNT(*) > 1)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP WHERE CP.role = 'speaker' OR CP.role = 'sponsor' GROUP BY CP.staff_ID HAVING COUNT(DISTINCT CP.role) = 2)"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))",
          "SELECT S.name FROM staff S JOIN conference_participation CP ON S.staff_ID = CP.staff_ID JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' INTERSECT SELECT S.name FROM staff S JOIN conference_participation CP ON S.staff_ID = CP.staff_ID JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'Naccl'",
          "SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name IN ('ACL', 'Naccl') GROUP BY staff_ID HAVING COUNT(DISTINCT C.Conference_Name) = 2)",
          "WITH ACL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')), Naccl_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')) SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM ACL_Participants INTERSECT SELECT staff_ID FROM Naccl_Participants)",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' AND CP.staff_ID = staff.staff_ID) AND EXISTS (SELECT 1 FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'Naccl' AND CP.staff_ID = staff.staff_ID)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP1 WHERE CP1.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation CP2 WHERE CP2.staff_ID = CP1.staff_ID AND CP2.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT CP.staff_ID FROM conference_participation CP INNER JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL') AND staff_ID IN (SELECT CP.staff_ID FROM conference_participation CP INNER JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'Naccl')",
          "SELECT DISTINCT S.name FROM staff S, conference_participation CP, conference C WHERE S.staff_ID = CP.staff_ID AND CP.Conference_ID = C.Conference_ID AND C.Conference_Name = 'ACL' AND S.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL') INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'Naccl')"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))",
          "SELECT S.name FROM staff S JOIN conference_participation CP ON S.staff_ID = CP.staff_ID JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' INTERSECT SELECT S.name FROM staff S JOIN conference_participation CP ON S.staff_ID = CP.staff_ID JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'NACCL'",
          "SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))",
          "WITH ACL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')), NACCL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')) SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM ACL_Participants INTERSECT SELECT staff_ID FROM NACCL_Participants)",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name IN ('ACL', 'NACCL') GROUP BY staff_ID HAVING COUNT(DISTINCT C.Conference_Name) = 2)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP1 WHERE CP1.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation CP2 WHERE CP2.staff_ID = CP1.staff_ID AND CP2.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT CP.staff_ID FROM conference_participation CP INNER JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL') AND staff_ID IN (SELECT CP.staff_ID FROM conference_participation CP INNER JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'NACCL')",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') UNION SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL') HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004)",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004))",
          "SELECT DISTINCT staff.name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2003 OR conference.Year = 2004",
          "SELECT staff.name FROM staff, conference_participation, conference WHERE staff.staff_ID = conference_participation.staff_ID AND conference_participation.Conference_ID = conference.Conference_ID AND (conference.Year = 2003 OR conference.Year = 2004)",
          "SELECT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year IN (2003, 2004)",
          "SELECT DISTINCT s.name FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference_participation.staff_ID = staff.staff_ID AND (conference.Year = 2003 OR conference.Year = 2004))",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004))",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004)",
          "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004)"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004)",
          "SELECT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND (c.Year = 2003 OR c.Year = 2004)",
          "SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2003 OR Year = 2004))",
          "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE cp.staff_ID = staff.staff_ID AND c.Year BETWEEN 2003 AND 2004)",
          "SELECT DISTINCT s.name FROM staff AS s INNER JOIN conference_participation AS cp ON s.staff_ID = cp.staff_ID INNER JOIN conference AS c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004",
          "SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004))",
          "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year IN (2003, 2004)",
          "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004 GROUP BY s.name",
          "SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004)))",
          "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_ID = cp.staff_ID INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004 ORDER BY s.name"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT Conference_Name, Year, COUNT(staff_ID) AS Num_Participants FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name, Year",
          "SELECT c.Conference_Name, c.Year, COUNT(*) AS Total_Participants FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT c.Conference_Name AS Name, c.Year AS Year, COUNT(cp.staff_ID) AS Participant_Count FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.Conference_ID) AS NumberOfParticipants FROM conference c LEFT OUTER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT Conference_Name, Year, COUNT(DISTINCT staff_ID) AS Participants FROM conference JOIN conference_participation USING(Conference_ID) GROUP BY Conference_Name, Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS TotalParticipants FROM conference AS c JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year",
          "SELECT Conference_Name, Year, COUNT(staff_ID) FROM conference JOIN conference_participation ON Conference_ID GROUP BY Conference_Name, Year",
          "SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS CountOfParticipants FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Participants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_ID, Conference_Name, Year, COUNT(staff_ID) AS Num_Participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.Conference_ID) AS Total_Participants FROM conference AS c INNER JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, (SELECT COUNT(*) FROM conference_participation WHERE Conference_ID = c.Conference_ID) AS Participant_Count FROM conference c",
          "SELECT Conference_ID, Conference_Name, Year, (SELECT COUNT(*) FROM conference_participation cp WHERE cp.Conference_ID = conference.Conference_ID) AS Participants FROM conference",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(*) AS NumOfParticipants FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.Conference_ID) FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID",
          "SELECT Conference_ID, Conference_Name, Year, COUNT(Conference_ID) AS Participant_Count FROM conference LEFT JOIN conference_participation ON Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID",
          "SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.Conference_ID) AS Participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC FETCH FIRST 2 ROWS ONLY",
          "SELECT TOP 2 Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(staff_ID) DESC)",
          "SELECT Conference_Name FROM (SELECT Conference_Name, RANK() OVER (ORDER BY COUNT(cp.Conference_ID) DESC) AS rank FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name) WHERE rank <= 2",
          "SELECT Conference_Name FROM conference c JOIN (SELECT Conference_ID, COUNT(*) as total FROM conference_participation GROUP BY Conference_ID ORDER BY total DESC LIMIT 2) cp ON c.Conference_ID = cp.Conference_ID",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name HAVING COUNT(cp.staff_ID) IN (SELECT COUNT(staff_ID) FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(staff_ID) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c WHERE c.Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name ORDER BY COUNT(cp.Conference_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM (SELECT c.Conference_Name, COUNT(*) AS Num_Attendants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY Num_Attendants DESC LIMIT 2) AS TopConferences"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2",
          "SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC FETCH FIRST 2 ROWS ONLY",
          "SELECT TOP 2 c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC",
          "SELECT c.Conference_Name FROM conference c, conference_participation cp WHERE c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name HAVING COUNT(cp.staff_ID) IN (SELECT TOP 2 COUNT(cp2.staff_ID) FROM conference_participation cp2 GROUP BY cp2.Conference_ID ORDER BY COUNT(cp2.staff_ID) DESC)",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(DISTINCT cp.staff_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c WHERE c.Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp GROUP BY cp.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2)",
          "SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.Conference_ID) DESC LIMIT 2",
          "SELECT c.Conference_Name FROM conference c INNER JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name HAVING COUNT(cp.staff_ID) >= ALL (SELECT COUNT(cp2.staff_ID) FROM conference_participation cp2 GROUP BY cp2.Conference_ID ORDER BY COUNT(cp2.staff_ID) DESC LIMIT 2)"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID IS NULL",
          "SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID)",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT DISTINCT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT NULL FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND s.staff_ID = cp.staff_ID)",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL')",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp WHERE cp.Conference_ID IN (SELECT c.Conference_ID FROM conference c WHERE c.Conference_Name = 'ACL'))"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT S.name, S.Nationality FROM staff S LEFT JOIN conference_participation CP ON S.staff_ID = CP.staff_ID LEFT JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' AND CP.staff_ID IS NULL",
          "SELECT name, Nationality FROM staff WHERE NOT EXISTS (SELECT 1 FROM conference_participation WHERE staff_ID = staff.staff_ID AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation CP JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL')",
          "SELECT DISTINCT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff EXCEPT SELECT name, Nationality FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name = 'ACL'",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation, conference WHERE conference_participation.Conference_ID = conference.Conference_ID AND conference.Conference_Name = 'ACL')",
          "SELECT name, Nationality FROM staff AS S WHERE NOT EXISTS (SELECT NULL FROM conference_participation AS CP JOIN conference AS C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' AND CP.staff_ID = S.staff_ID)",
          "SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))",
          "SELECT S.name, S.Nationality FROM staff S WHERE NOT EXISTS (SELECT NULL FROM conference_participation CP INNER JOIN conference C ON CP.Conference_ID = C.Conference_ID WHERE C.Conference_Name = 'ACL' AND CP.staff_ID = S.staff_ID)"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)",
          "SELECT name, location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE Year = 2004)",
          "SELECT Institution_Name, Location FROM institution WHERE NOT EXISTS (SELECT * FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004 AND staff.Institution_ID = institution.Institution_ID)",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID AND c.Year = 2004 WHERE cp.Conference_ID IS NULL",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff, conference_participation, conference WHERE staff.staff_ID = conference_participation.staff_ID AND conference_participation.Conference_ID = conference.Conference_ID AND conference.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution i WHERE i.Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s INNER JOIN conference_participation cp ON s.staff_ID = cp.staff_ID INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT name AS Institution_Name, location AS Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004))"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "conference",
      "infer_predictions": [
        [
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)",
          "SELECT name, location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE Year = 2004)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff, conference_participation, conference WHERE staff.staff_ID = conference_participation.staff_ID AND conference_participation.Conference_ID = conference.Conference_ID AND conference.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) sub ON i.Institution_ID = sub.Institution_ID WHERE sub.Institution_ID IS NULL",
          "SELECT Institution_Name, Location FROM institution WHERE NOT EXISTS (SELECT * FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004 AND staff.Institution_ID = institution.Institution_ID)",
          "SELECT Institution_Name, Location FROM institution AS i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s, conference_participation cp, conference c WHERE s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)",
          "SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID INNER JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year = 2004)"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)",
          "SELECT TOP 1 pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills LIMIT 1)",
          "SELECT pilot_name FROM (SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name) ORDER BY max_age DESC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING age = MAX(age)",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (SELECT MAX(age) FROM PilotSkills)",
          "SELECT pilot_name, age FROM PilotSkills ORDER BY age DESC LIMIT 1",
          "SELECT FIRST(pilot_name) FROM PilotSkills ORDER BY age DESC"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)",
          "SELECT TOP 1 pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (SELECT MAX(age) FROM PilotSkills)",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills ORDER BY age DESC) AS subquery LIMIT 1",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name, age HAVING age = MAX(age)",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills LIMIT 1)",
          "SELECT pilot_name FROM PilotSkills AS ps WHERE ps.age = (SELECT MAX(age) FROM PilotSkills AS ps2)",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY PilotSkills.age ASC",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY P.age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills AS PS) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY age ASCENDING",
          "SELECT PS.pilot_name FROM PilotSkills PS WHERE PS.age < (SELECT AVG(PS2.age) FROM PilotSkills PS2) ORDER BY PS.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY P.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills AS PS) ORDER BY PilotSkills.age ASC",
          "SELECT PS.pilot_name FROM PilotSkills PS WHERE PS.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY PS.age",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(P.age) FROM PilotSkills P) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(PilotSkills.age) FROM PilotSkills) ORDER BY PilotSkills.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT * FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT PilotSkills.* FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY age",
          "SELECT * FROM PilotSkills WHERE age < 30 ORDER BY pilot_name",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY pilot_name, plane_name",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY age DESC",
          "SELECT * FROM PilotSkills WHERE age < 30 ORDER BY age ASC",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY plane_name",
          "SELECT * FROM PilotSkills WHERE age < 30 ORDER BY pilot_name ASC, age ASC"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT * FROM PilotSkills WHERE age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30",
          "SELECT PilotSkills.* FROM PilotSkills WHERE PilotSkills.age < 30",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age BETWEEN 0 AND 29",
          "SELECT * FROM PilotSkills WHERE age <= 29",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY age",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY age ASC",
          "SELECT * FROM PilotSkills WHERE age < 30 ORDER BY pilot_name",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY pilot_name ASC",
          "SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30 ORDER BY pilot_name DESC"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age <= 34",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name LIKE 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age BETWEEN 1 AND 34",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name HAVING COUNT(*) = 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 AND pilot_name IS NOT NULL",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 AND pilot_name != ''"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'",
          "SELECT PS.pilot_name FROM PilotSkills AS PS WHERE PS.age < 35 AND PS.plane_name = 'Piper Cub'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub') AND age < 35",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age BETWEEN 0 AND 34",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 HAVING COUNT(*) >= 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'",
          "SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name LIKE 'F-14 Fighter'",
          "SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location IS NOT NULL",
          "SELECT location FROM Hangar WHERE plane_name IN ('F-14 Fighter')",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location DESC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location ASC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'",
          "SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name LIKE 'F-14 Fighter'",
          "SELECT H.location FROM Hangar H WHERE H.plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name IN ('F-14 Fighter')",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location IS NOT NULL",
          "SELECT DISTINCT location FROM Hangar WHERE plane_name = 'F-14 Fighter'",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location DESC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE plane_name IS NOT NULL",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE plane_name <> ''",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE NOT plane_name IS NULL",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE plane_name != ''",
          "SELECT COUNT(UNIQUE location) FROM Hangar WHERE plane_name IS NOT NULL",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar WHERE plane_name IS NOT NULL)",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar WHERE plane_name <> '')",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar WHERE NOT plane_name IS NULL)",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar WHERE plane_name != '')",
          "SELECT COUNT(UNIQUE location) FROM Hangar WHERE plane_name <> ''"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT location) FROM Hangar",
          "SELECT COUNT(UNIQUE location) FROM Hangar",
          "SELECT COUNT(*) FROM (SELECT DISTINCT location FROM Hangar) AS unique_locations",
          "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM Hangar) AS locations",
          "SELECT COUNT(DISTINCT location) AS NumberOfLocations FROM Hangar",
          "SELECT COUNT(DISTINCT Hangar.location) FROM Hangar",
          "SELECT COUNT(*) FROM (SELECT location FROM Hangar GROUP BY location) AS distinct_locations",
          "SELECT COUNT(DISTINCT location) FROM Hangar GROUP BY location",
          "SELECT DISTINCT COUNT(location) FROM Hangar",
          "SELECT COUNT(DISTINCT location) FROM Hangar WHERE location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.pilot_name = 'Jones' AND PilotSkills.age = 32",
          "SELECT p.plane_name FROM PilotSkills p WHERE p.pilot_name = 'Jones' AND p.age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name LIKE 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Jones' AND P.age = 32",
          "SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32)",
          "SELECT DISTINCT H.plane_name FROM Hangar AS H, PilotSkills AS P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Jones' AND P.age = 32",
          "SELECT H.plane_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Jones' AND P.age = 32",
          "SELECT plane_name FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 AND plane_name = Hangar.plane_name)",
          "SELECT H.plane_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Jones' AND P.age = 32",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.pilot_name = 'Jones' AND P.age = 32",
          "SELECT plane_name FROM Hangar H WHERE EXISTS (SELECT NULL FROM PilotSkills P WHERE P.plane_name = H.plane_name AND P.pilot_name = 'Jones' AND P.age = 32)",
          "SELECT H.plane_name FROM Hangar AS H JOIN PilotSkills AS P ON H.plane_name = P.plane_name AND P.pilot_name = 'Jones' AND P.age = 32 ORDER BY H.plane_name"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) AS PilotCount FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(DISTINCT pilot_name) AS UniquePilots FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(pilot_name) AS PilotCount FROM PilotSkills WHERE age > 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name",
          "SELECT COUNT(pilot_name) FROM PilotSkills GROUP BY pilot_name HAVING age > 40",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 ORDER BY pilot_name"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age < 35 AND Hangar.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(Hangar.plane_name) AS Total FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age < 35 AND Hangar.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age < 35 AND Hangar.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(*) FROM Hangar h, PilotSkills p WHERE h.plane_name = p.plane_name AND p.age < 35 AND h.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(*) FROM Hangar h INNER JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(1) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name AND p.age < 35 WHERE h.plane_name = 'B-52 Bomber'",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name AND h.plane_name = 'B-52 Bomber' WHERE p.age < 35",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name AND p.age < 35 AND h.plane_name = 'B-52 Bomber'"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age < 35 AND Hangar.plane_name = 'B-52'",
          "SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age < 35 AND Hangar.plane_name = 'B-52'",
          "SELECT COUNT(Hangar.plane_name) FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age < 35 AND Hangar.plane_name = 'B-52'",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52'",
          "SELECT COUNT(*) FROM Hangar h, PilotSkills p WHERE h.plane_name = p.plane_name AND p.age < 35 AND h.plane_name = 'B-52'",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h INNER JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52'",
          "SELECT COUNT(*) FROM Hangar h INNER JOIN PilotSkills p ON h.plane_name = p.plane_name AND p.age < 35 WHERE h.plane_name = 'B-52'",
          "SELECT COUNT(*) FROM (SELECT h.plane_name FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52') AS subquery",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name AND p.age < 35 AND h.plane_name = 'B-52'",
          "SELECT COUNT(*) FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52' GROUP BY h.plane_name"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name = 'Piper Cub'",
          "SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE H.plane_name = 'Piper Cub' ORDER BY P.age LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC) AS SubQuery LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub') ORDER BY age ASC LIMIT 1",
          "WITH YoungestPilot AS (SELECT pilot_name, MIN(age) AS MinAge FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY pilot_name) SELECT pilot_name FROM YoungestPilot WHERE MinAge = (SELECT MIN(MinAge) FROM YoungestPilot)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1",
          "SELECT TOP 1 pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT MIN(pilot_name) FROM PilotSkills WHERE plane_name = 'Piper Cub' GROUP BY pilot_name ORDER BY age ASC LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age LIMIT 1",
          "SELECT pilot_name FROM (SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC) AS youngest LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC ROWS 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') LIMIT 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age, pilot_name ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) DESC LIMIT 1",
          "SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1)",
          "SELECT TOP 1 H.plane_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) DESC",
          "SELECT H.plane_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.plane_name HAVING COUNT(P.pilot_name) = (SELECT MAX(COUNT) FROM (SELECT COUNT(P.pilot_name) AS COUNT FROM PilotSkills P GROUP BY P.plane_name) AS T)",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(pilot_name) AS popularity FROM PilotSkills GROUP BY plane_name) AS PopularityRank ORDER BY popularity DESC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT H.plane_name FROM Hangar H RIGHT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) DESC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H JOIN (SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name) P ON H.plane_name = P.plane_name ORDER BY P.num_pilots DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(*) AS frequency FROM PilotSkills GROUP BY plane_name) AS subquery ORDER BY frequency DESC LIMIT 1",
          "SELECT P.plane_name FROM PilotSkills AS P GROUP BY P.plane_name ORDER BY COUNT(P.plane_name) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM PilotSkills GROUP BY plane_name) AS counts)",
          "SELECT plane_name, COUNT(*) AS total_flights FROM PilotSkills GROUP BY plane_name ORDER BY total_flights DESC LIMIT 1",
          "WITH PlaneFrequency AS (SELECT plane_name, COUNT(*) AS frequency FROM PilotSkills GROUP BY plane_name) SELECT plane_name FROM PlaneFrequency WHERE frequency = (SELECT MAX(frequency) FROM PlaneFrequency)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT FIRST(plane_name) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) ASC LIMIT 1",
          "SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT TOP 1 H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) ASC",
          "SELECT plane_name FROM Hangar ORDER BY (SELECT COUNT(*) FROM PilotSkills WHERE PilotSkills.plane_name = Hangar.plane_name) ASC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H WHERE H.plane_name = (SELECT P.plane_name FROM PilotSkills P GROUP BY P.plane_name ORDER BY COUNT(P.pilot_name) ASC LIMIT 1)",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name) AS SubQuery ORDER BY pilot_count ASC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H JOIN (SELECT plane_name, COUNT(*) as cnt FROM PilotSkills GROUP BY plane_name) P ON H.plane_name = P.plane_name ORDER BY P.cnt ASC LIMIT 1",
          "SELECT plane_name FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(pilot_name) = (SELECT MIN(COUNT(pilot_name)) FROM PilotSkills GROUP BY plane_name))",
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name HAVING COUNT(P.pilot_name) = (SELECT MIN(COUNT(pilot_name)) FROM PilotSkills GROUP BY plane_name)",
          "SELECT plane_name FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.plane_name) ASC LIMIT 1",
          "SELECT TOP 1 plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*)",
          "SELECT plane_name FROM (SELECT plane_name, COUNT(*) AS flight_count FROM PilotSkills GROUP BY plane_name) AS FlightCounts ORDER BY flight_count ASC LIMIT 1",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM PilotSkills GROUP BY plane_name) AS SubQuery)",
          "WITH PlaneUsage AS (SELECT plane_name, COUNT(*) AS usage_count FROM PilotSkills GROUP BY plane_name) SELECT plane_name FROM PlaneUsage WHERE usage_count = (SELECT MIN(usage_count) FROM PlaneUsage)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(plane_name) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT P.plane_name FROM PilotSkills P GROUP BY P.plane_name HAVING COUNT(P.plane_name) = (SELECT MIN(COUNT(plane_name)) FROM PilotSkills GROUP BY plane_name)",
          "SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC FETCH FIRST ROW ONLY",
          "SELECT plane_name, COUNT(*) AS num_flights FROM PilotSkills GROUP BY plane_name ORDER BY num_flights ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(*) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Chicago')",
          "SELECT COUNT(DISTINCT p.pilot_name) FROM PilotSkills p INNER JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Chicago'",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago') AS unique_pilots",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago' GROUP BY pilot_name",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills LEFT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(UNIQUE pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago')",
          "SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills LEFT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills RIGHT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills FULL OUTER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'",
          "SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41)",
          "SELECT DISTINCT H.plane_name FROM Hangar AS H, PilotSkills AS P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT H.plane_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE plane_name = Hangar.plane_name AND pilot_name = 'Smith' AND age = 41)",
          "SELECT H.plane_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41 ORDER BY H.plane_name",
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM Hangar H WHERE EXISTS (SELECT NULL FROM PilotSkills P WHERE P.plane_name = H.plane_name AND P.pilot_name = 'Smith' AND P.age = 41)"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41)",
          "SELECT H.plane_name FROM Hangar AS H INNER JOIN PilotSkills AS P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT DISTINCT plane_name FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.pilot_name = 'Smith' AND PilotSkills.age = 41",
          "SELECT plane_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM Hangar JOIN PilotSkills USING (plane_name) WHERE pilot_name = 'Smith' AND age = 41",
          "SELECT plane_name FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND pilot_name = 'Smith' AND age = 41)",
          "SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith' AND P.age = 41",
          "SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 AND plane_name IN (SELECT plane_name FROM Hangar)"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills",
          "SELECT COUNT(UNIQUE plane_name) FROM PilotSkills",
          "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills)",
          "SELECT COUNT(DISTINCT plane_name) AS total_planes FROM PilotSkills",
          "SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes",
          "SELECT DISTINCT COUNT(plane_name) FROM PilotSkills",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills GROUP BY plane_name",
          "SELECT COUNT(*) FROM (SELECT plane_name FROM PilotSkills GROUP BY plane_name)",
          "SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p",
          "SELECT DISTINCT COUNT(p.plane_name) FROM PilotSkills p"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills",
          "SELECT COUNT(DISTINCT T1.plane_name) FROM PilotSkills AS T1",
          "SELECT COUNT(UNIQUE plane_name) FROM PilotSkills",
          "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name",
          "SELECT COUNT(DISTINCT T1.plane_name) FROM PilotSkills T1 INNER JOIN Hangar T2 ON T1.plane_name = T2.plane_name",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT COUNT(DISTINCT T1.plane_name) FROM PilotSkills T1 WHERE EXISTS (SELECT 1 FROM Hangar T2 WHERE T1.plane_name = T2.plane_name)",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name",
          "SELECT DISTINCT COUNT(plane_name) OVER () FROM PilotSkills"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'",
          "SELECT COUNT(UNIQUE H.plane_name) FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Smith'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT H.plane_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith') AS SubQuery",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT COUNT(DISTINCT P.plane_name) FROM PilotSkills P WHERE P.pilot_name = 'Smith' AND EXISTS (SELECT 1 FROM Hangar H WHERE H.plane_name = P.plane_name)",
          "SELECT COUNT(*) FROM (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' INTERSECT SELECT plane_name FROM Hangar) AS OwnedPlanes",
          "SELECT COUNT(DISTINCT P.plane_name) FROM PilotSkills P LEFT JOIN Hangar H ON P.plane_name = H.plane_name WHERE P.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT P.plane_name) FROM PilotSkills P, Hangar H WHERE P.plane_name = H.plane_name AND P.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith')",
          "SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.pilot_name = 'Smith'"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith')) AS OwnedPlanes",
          "SELECT COUNT(UNIQUE H.plane_name) FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT COUNT(*) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith')",
          "SELECT COUNT(DISTINCT H.plane_name) FROM Hangar AS H INNER JOIN PilotSkills AS P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE pilot_name = 'Smith' INTERSECT SELECT plane_name FROM Hangar",
          "SELECT COUNT(*) FROM (SELECT H.plane_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith') AS SmithPlanes",
          "SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name = Hangar.plane_name)"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age > 40",
          "SELECT COUNT(UNIQUE Hangar.plane_name) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age > 40",
          "SELECT COUNT(*) FROM (SELECT Hangar.plane_name FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age > 40 GROUP BY Hangar.plane_name)",
          "SELECT COUNT(DISTINCT p.plane_name) FROM Hangar p JOIN PilotSkills s ON p.plane_name = s.plane_name WHERE s.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age > 40)",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h, PilotSkills ps WHERE h.plane_name = ps.plane_name AND ps.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age > 40",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h INNER JOIN PilotSkills ps ON h.plane_name = ps.plane_name AND ps.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age > 40",
          "SELECT COUNT(UNIQUE Hangar.plane_name) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age > 40",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Hangar.plane_name FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age > 40)",
          "SELECT COUNT(DISTINCT p.plane_name) FROM Hangar p JOIN PilotSkills s ON p.plane_name = s.plane_name WHERE s.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar h, PilotSkills ps WHERE h.plane_name = ps.plane_name AND ps.age > 40",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h INNER JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar AS h JOIN PilotSkills AS ps ON h.plane_name = ps.plane_name WHERE ps.age > 40",
          "SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age > 40)",
          "SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name AND ps.age > 40"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age",
          "SELECT PilotSkills.pilot_name FROM PilotSkills WHERE PilotSkills.age >= 30 AND PilotSkills.age <= 40 ORDER BY PilotSkills.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE (age BETWEEN 30 AND 40) ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 SORT BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 SORT BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASCENDING"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age",
          "SELECT PilotSkills.pilot_name FROM PilotSkills WHERE PilotSkills.age >= 30 AND PilotSkills.age <= 40 ORDER BY PilotSkills.age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE (age BETWEEN 30 AND 40) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 ORDER BY age ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 SORT BY age ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age >= 30 AND age <= 40 SORT ASC BY age",
          "SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASCENDING"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills SORT BY age DESCENDING",
          "SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESCENDING",
          "SELECT pilot_name AS Pilot FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age IN DESCENDING ORDER",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT ALL",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC; -- Sorted by age in descending order"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESCENDING",
          "SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC",
          "SELECT pilot_name FROM PilotSkills SORT BY age DESC",
          "SELECT pilot_name AS Name FROM PilotSkills ORDER BY age DESC",
          "SELECT pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESCENDING",
          "SELECT pilot_name FROM PilotSkills ORDER BY age IN DESCENDING ORDER",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT ALL",
          "SELECT pilot_name FROM PilotSkills ORDER BY age DESC, pilot_name"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar SORT BY plane_name ASC",
          "SELECT Hangar.location FROM Hangar ORDER BY Hangar.plane_name ASC",
          "SELECT location FROM Hangar GROUP BY location, plane_name ORDER BY plane_name",
          "SELECT DISTINCT location FROM Hangar ORDER BY plane_name ASC",
          "SELECT location FROM Hangar ORDER BY plane_name ASCENDING",
          "SELECT location FROM Hangar ORDER BY plane_name, location",
          "SELECT * FROM Hangar ORDER BY plane_name ASC SELECT location",
          "SELECT location, plane_name FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar ORDER BY plane_name COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar GROUP BY plane_name ORDER BY plane_name",
          "SELECT DISTINCT location FROM Hangar ORDER BY plane_name ASC",
          "SELECT location FROM Hangar GROUP BY location, plane_name ORDER BY plane_name",
          "SELECT location, plane_name FROM Hangar ORDER BY plane_name",
          "SELECT location FROM Hangar WHERE plane_name IS NOT NULL ORDER BY plane_name",
          "SELECT location FROM Hangar GROUP BY plane_name, location ORDER BY plane_name ASC",
          "SELECT location FROM Hangar ORDER BY plane_name ASC",
          "SELECT location, plane_name FROM Hangar GROUP BY plane_name, location ORDER BY plane_name",
          "SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM Hangar ORDER BY plane_name)"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY H.plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills) ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY plane_name ASC",
          "SELECT DISTINCT p.plane_name FROM PilotSkills p INNER JOIN Hangar h ON p.plane_name = h.plane_name ORDER BY p.plane_name ASC",
          "SELECT DISTINCT h.plane_name FROM Hangar h, PilotSkills p WHERE h.plane_name = p.plane_name ORDER BY h.plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar JOIN PilotSkills USING (plane_name) ORDER BY plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar h WHERE EXISTS (SELECT 1 FROM PilotSkills p WHERE p.plane_name = h.plane_name) ORDER BY plane_name ASC",
          "SELECT DISTINCT plane_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name ORDER BY plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name IN (SELECT DISTINCT plane_name FROM PilotSkills) ORDER BY plane_name ASC",
          "SELECT DISTINCT Hangar.plane_name FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY Hangar.plane_name ASC"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC",
          "SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name",
          "SELECT plane_name FROM Hangar ORDER BY plane_name ASC",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY 1",
          "SELECT plane_name FROM (SELECT DISTINCT plane_name FROM Hangar) AS unique_planes ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name COLLATE NOCASE",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASCENDING",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC, plane_name",
          "SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE (age > 40) OR (age < 30)",
          "SELECT COUNT(pilot_name) AS TotalPilots FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(DISTINCT pilot_name) AS EligiblePilots FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) AS NumberOfPilots FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(pilot_name) AS PilotCount FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE age NOT BETWEEN 30 AND 40",
          "SELECT COUNT(DISTINCT pilot_name) AS TotalPilots FROM PilotSkills WHERE age > 40 OR age < 30",
          "SELECT COUNT(*) FROM PilotSkills WHERE (age > 40 OR age < 30)",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE (age > 40 OR age < 30)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age IN (SELECT age FROM PilotSkills WHERE age > 40 OR age < 30)"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT name AS pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills PS WHERE (PS.plane_name = 'Piper Cub' AND PS.age > 35) OR (PS.plane_name = 'F-14 Fighter' AND PS.age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) UNION SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 UNION ALL SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND age < 30",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) ORDER BY pilot_name",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name AS Name, age AS Age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) GROUP BY pilot_name, age"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT PS.pilot_name, PS.age FROM PilotSkills AS PS WHERE (PS.plane_name = 'Piper Cub' AND PS.age > 35) OR (PS.plane_name = 'F-14 Fighter' AND PS.age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) UNION SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) ORDER BY pilot_name",
          "SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) GROUP BY pilot_name, age",
          "SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30) HAVING age > 35 OR age < 30"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills P2 WHERE P2.pilot_name = P.pilot_name AND P2.plane_name = 'B-52 Bomber')",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT pilot_name FROM PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM B52BomberPilots)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills P1 WHERE P1.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills P2 WHERE P2.plane_name = 'B-52 Bomber' AND P2.pilot_name = P1.pilot_name)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' MINUS SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT pilot_name FROM PilotSkills P WHERE P.plane_name = 'Piper Cub' AND P.pilot_name NOT IN (SELECT P2.pilot_name FROM PilotSkills P2 WHERE P2.plane_name = 'B-52 Bomber')",
          "SELECT P.pilot_name FROM PilotSkills P LEFT JOIN PilotSkills P2 ON P.pilot_name = P2.pilot_name AND P2.plane_name = 'B-52 Bomber' WHERE P.plane_name = 'Piper Cub' AND P2.pilot_name IS NULL",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)",
          "SELECT p.pilot_name FROM PilotSkills p LEFT JOIN PilotSkills q ON p.pilot_name = q.pilot_name AND q.plane_name = 'B-52 Bomber' WHERE p.plane_name = 'Piper Cub' AND q.pilot_name IS NULL",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT pilot_name FROM PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM B52BomberPilots)",
          "SELECT pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT NULL FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT q.pilot_name FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT q.pilot_name FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE P.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY P.pilot_name HAVING COUNT(DISTINCT P.plane_name) = 2",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' HAVING COUNT(*) > 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT PiperCubPilots.pilot_name FROM PiperCubPilots JOIN B52BomberPilots ON PiperCubPilots.pilot_name = B52BomberPilots.pilot_name",
          "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT plane_name) AS num_planes FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name) AS subquery WHERE num_planes = 2",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING SUM(CASE WHEN plane_name = 'Piper Cub' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN plane_name = 'B-52 Bomber' THEN 1 ELSE 0 END) > 0",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND EXISTS (SELECT 1 FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND PilotSkills.pilot_name = pilot_name)"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') INTERSECT SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')",
          "SELECT P.pilot_name FROM PilotSkills P JOIN PilotSkills Q ON P.pilot_name = Q.pilot_name WHERE P.plane_name = 'Piper Cub' AND Q.plane_name = 'B-52 Bomber'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2",
          "WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT PiperCubPilots.pilot_name FROM PiperCubPilots JOIN B52BomberPilots ON PiperCubPilots.pilot_name = B52BomberPilots.pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' HAVING COUNT(*) > 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber' GROUP BY pilot_name HAVING COUNT(*) = 2",
          "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT plane_name) AS cnt FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name) AS subquery WHERE cnt = 2",
          "SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING SUM(CASE WHEN plane_name = 'Piper Cub' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN plane_name = 'B-52 Bomber' THEN 1 ELSE 0 END) > 0",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS AverageAge, MIN(PilotSkills.age) AS MinAge FROM PilotSkills",
          "SELECT AVG(age), MIN(age) FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS avg_age, MIN(PilotSkills.age) AS min_age FROM PilotSkills",
          "SELECT average(age) AS avg_age, minimum(age) AS min_age FROM PilotSkills",
          "SELECT AVG(age) average_age, MIN(age) smallest_age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) average_age, MIN(PilotSkills.age) smallest_age FROM PilotSkills",
          "SELECT AVG(age) AS 'Average Age', MIN(age) AS 'Minimum Age' FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) 'Average Age', MIN(PilotSkills.age) 'Minimum Age' FROM PilotSkills",
          "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills GROUP BY pilot_name"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS AverageAge, MIN(PilotSkills.age) AS MinAge FROM PilotSkills",
          "SELECT AVG(age), MIN(age) FROM PilotSkills",
          "SELECT average(age) as avg_age, minimum(age) as min_age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS Average_Age, MIN(PilotSkills.age) AS Minimum_Age FROM PilotSkills",
          "SELECT AVG(age) AS AverageAge, MIN(age) AS MinimumAge FROM PilotSkills",
          "SELECT AVG(age) average_age, MIN(age) minimum_age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) average, MIN(PilotSkills.age) minimum FROM PilotSkills",
          "SELECT AVG(age) AS Avg_Age, MIN(age) AS Min_Age FROM PilotSkills",
          "SELECT AVG(PilotSkills.age) AS AvgAge, MIN(PilotSkills.age) AS MinAge FROM PilotSkills"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')",
          "SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE H.location = 'Austin' INTERSECT SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE H.location = 'Boston'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston')) GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2",
          "WITH AustinPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'), BostonPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Boston') SELECT pilot_name FROM AustinPilots INTERSECT SELECT pilot_name FROM BostonPilots",
          "SELECT pilot_name FROM PilotSkills PS WHERE EXISTS (SELECT 1 FROM Hangar H WHERE H.plane_name = PS.plane_name AND H.location = 'Austin') AND EXISTS (SELECT 1 FROM Hangar H WHERE H.plane_name = PS.plane_name AND H.location = 'Boston')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston'))",
          "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT location) AS loc_count FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location IN ('Austin', 'Boston') GROUP BY pilot_name) WHERE loc_count = 2",
          "SELECT pilot_name FROM PilotSkills PS1 WHERE EXISTS (SELECT 1 FROM Hangar H1 WHERE H1.plane_name = PS1.plane_name AND H1.location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills PS2 WHERE EXISTS (SELECT 1 FROM Hangar H2 WHERE H2.plane_name = PS2.plane_name AND H2.location = 'Boston')",
          "SELECT pilot_name FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin' UNION SELECT pilot_name FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name WHERE H.location = 'Boston' HAVING COUNT(DISTINCT H.location) > 1",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' UNION ALL SELECT plane_name FROM Hangar WHERE location = 'Boston') GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')",
          "SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE H.location IN ('Austin', 'Boston') GROUP BY P.pilot_name HAVING COUNT(DISTINCT H.location) = 2",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston') GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston'))",
          "WITH AustinPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')), BostonPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')) SELECT pilot_name FROM AustinPilots WHERE pilot_name IN (SELECT pilot_name FROM BostonPilots)",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin' UNION SELECT plane_name FROM Hangar WHERE location = 'Boston') HAVING COUNT(DISTINCT location) = 2",
          "SELECT pilot_name FROM PilotSkills PS WHERE EXISTS (SELECT 1 FROM Hangar H WHERE H.plane_name = PS.plane_name AND H.location = 'Austin') AND EXISTS (SELECT 1 FROM Hangar H WHERE H.plane_name = PS.plane_name AND H.location = 'Boston')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston') HAVING COUNT(*) > 1",
          "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT location) AS loc_count FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location IN ('Austin', 'Boston') GROUP BY pilot_name) WHERE loc_count = 2",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')) GROUP BY pilot_name HAVING COUNT(DISTINCT location) = 2"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name LIKE 'Piper Cub' OR plane_name LIKE 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' GROUP BY pilot_name HAVING COUNT(*) >= 1",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND pilot_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' GROUP BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION DISTINCT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY pilot_name DESC"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name, AVG(P.age) AS avg_age FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name",
          "SELECT H.plane_name, AVG(P.age) FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name",
          "SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name",
          "SELECT H.plane_name AS Plane_Type, AVG(P.age) AS Average_Age FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name",
          "SELECT H.plane_name, AVG(P.age) AS Average_Pilot_Age FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name",
          "SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) > 0",
          "SELECT H.plane_name, AVG(P.age) FROM Hangar H LEFT OUTER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name",
          "SELECT H.plane_name, AVG(P.age) AS Average_Age FROM Hangar H RIGHT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name",
          "SELECT p.plane_name, AVG(p.age) AS avg_age FROM PilotSkills p GROUP BY p.plane_name",
          "SELECT ps.plane_name, AVG(ps.age) average_age FROM PilotSkills ps GROUP BY ps.plane_name",
          "SELECT PilotSkills.plane_name, AVG(PilotSkills.age) AS AverageAge FROM PilotSkills GROUP BY PilotSkills.plane_name",
          "SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name",
          "SELECT p.plane_name, AVG(p.age) FROM PilotSkills p GROUP BY p.plane_name",
          "SELECT ps.plane_name, AVG(ps.age) FROM PilotSkills ps GROUP BY ps.plane_name",
          "SELECT PilotSkills.plane_name, AVG(PilotSkills.age) FROM PilotSkills GROUP BY PilotSkills.plane_name",
          "SELECT plane_name, average(age) AS avg_age FROM PilotSkills GROUP BY plane_name",
          "SELECT p.plane_name, average(p.age) AS avg_age FROM PilotSkills p GROUP BY p.plane_name"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location, COUNT(plane_name) AS num_planes FROM Hangar GROUP BY location",
          "SELECT location, COUNT(*) AS num_planes FROM Hangar GROUP BY location",
          "SELECT COUNT(plane_name), location FROM Hangar GROUP BY location",
          "SELECT location, COUNT(plane_name) FROM Hangar GROUP BY location",
          "SELECT COUNT(*), location FROM Hangar GROUP BY location",
          "SELECT location, COUNT(plane_name) AS plane_count FROM Hangar GROUP BY location",
          "SELECT location, COUNT(*) AS plane_count FROM Hangar GROUP BY location",
          "SELECT location AS plane_type, COUNT(plane_name) AS number_of_planes FROM Hangar GROUP BY location",
          "SELECT location AS plane_type, COUNT(*) AS number_of_planes FROM Hangar GROUP BY location",
          "SELECT COUNT(plane_name) AS number_of_planes, location AS plane_type FROM Hangar GROUP BY location"
        ]
      ]
    },
    {
      "id": 1156,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, COUNT(*) AS num_entries FROM Hangar GROUP BY plane_name",
          "SELECT plane_name, COUNT(plane_name) AS count FROM Hangar GROUP BY plane_name",
          "SELECT COUNT(*) AS total, plane_name FROM Hangar GROUP BY plane_name",
          "SELECT plane_name, COUNT(plane_name) FROM Hangar GROUP BY plane_name",
          "SELECT plane_name, COUNT(1) AS count FROM Hangar GROUP BY plane_name",
          "SELECT COUNT(*) FROM Hangar GROUP BY plane_name",
          "SELECT plane_name, COUNT(*) FROM Hangar GROUP BY plane_name ORDER BY plane_name",
          "SELECT plane_name, COUNT(*) AS NumberOfEntries FROM Hangar GROUP BY plane_name",
          "SELECT plane_name, COUNT(plane_name) AS TotalCount FROM Hangar GROUP BY plane_name ORDER BY TotalCount DESC",
          "SELECT plane_name, COUNT(*) AS EntryCount FROM Hangar GROUP BY plane_name ORDER BY EntryCount DESC"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = T1.plane_name) ORDER BY T1.plane_name",
          "SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rank FROM PilotSkills) AS Ranked WHERE rank = 1 ORDER BY plane_name",
          "SELECT p.plane_name, ps.pilot_name FROM PilotSkills ps INNER JOIN Hangar p ON ps.plane_name = p.plane_name GROUP BY p.plane_name, ps.pilot_name HAVING ps.age = MAX(ps.age) ORDER BY p.plane_name",
          "SELECT a.plane_name, b.pilot_name FROM Hangar a, PilotSkills b WHERE a.plane_name = b.plane_name AND b.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = a.plane_name) ORDER BY a.plane_name",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name",
          "SELECT DISTINCT ON (plane_name) plane_name, pilot_name FROM PilotSkills ORDER BY plane_name, age DESC",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills ps2 WHERE PilotSkills.plane_name = ps2.plane_name) ORDER BY plane_name",
          "SELECT p.plane_name, MAX(ps.age) AS MaxAge, ps.pilot_name FROM PilotSkills ps JOIN Hangar p ON ps.plane_name = p.plane_name GROUP BY p.plane_name, ps.pilot_name ORDER BY p.plane_name",
          "SELECT plane_name, FIRST_VALUE(pilot_name) OVER (PARTITION BY plane_name ORDER BY age DESC) AS oldest_pilot FROM PilotSkills ORDER BY plane_name",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE age >= ALL (SELECT age FROM PilotSkills AS ps2 WHERE PilotSkills.plane_name = ps2.plane_name) ORDER BY plane_name"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) AS MaxP ON P.plane_name = MaxP.plane_name AND P.age = MaxP.max_age ORDER BY H.plane_name",
          "SELECT H.plane_name, (SELECT P.pilot_name FROM PilotSkills P WHERE P.plane_name = H.plane_name AND P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name)) AS pilot_name FROM Hangar H ORDER BY H.plane_name",
          "SELECT DISTINCT H.plane_name, FIRST_VALUE(P.pilot_name) OVER (PARTITION BY H.plane_name ORDER BY P.age DESC) AS pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name, P.pilot_name, P.age HAVING P.age = MAX(P.age) ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name) ORDER BY H.plane_name",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN (SELECT plane_name, pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name, pilot_name) P ON H.plane_name = P.plane_name ORDER BY H.plane_name"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)",
          "SELECT P1.plane_name, P1.pilot_name FROM PilotSkills P1 JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) P2 ON P1.plane_name = P2.plane_name AND P1.age = P2.max_age",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills P WHERE P.plane_name = PilotSkills.plane_name)",
          "SELECT A.plane_name, A.pilot_name FROM PilotSkills A INNER JOIN (SELECT plane_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY plane_name) B ON A.plane_name = B.plane_name AND A.age = B.MaxAge",
          "WITH RankedPilots AS (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rank FROM PilotSkills) SELECT plane_name, pilot_name FROM RankedPilots WHERE rank = 1",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name HAVING plane_name = PilotSkills.plane_name)",
          "SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) rank FROM PilotSkills) WHERE rank = 1",
          "SELECT DISTINCT P.plane_name, FIRST_VALUE(P.pilot_name) OVER (PARTITION BY P.plane_name ORDER BY P.age DESC) AS OldestPilot FROM PilotSkills P",
          "SELECT plane_name, MAX(pilot_name) KEEP (DENSE_RANK FIRST ORDER BY age DESC) FROM PilotSkills GROUP BY plane_name",
          "SELECT plane_name, ARRAY_AGG(pilot_name ORDER BY age DESC)[1] AS oldest_pilot FROM PilotSkills GROUP BY plane_name"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = T1.plane_name)",
          "SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name HAVING P.age = MIN(P.age)",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MIN(age) FROM PilotSkills GROUP BY plane_name)",
          "SELECT h.plane_name, p.pilot_name FROM Hangar h INNER JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age = (SELECT MIN(age) FROM PilotSkills ps WHERE ps.plane_name = p.plane_name)",
          "SELECT DISTINCT h.plane_name, (SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = h.plane_name ORDER BY p.age ASC LIMIT 1) AS pilot_name FROM Hangar h",
          "SELECT h.plane_name, p.pilot_name FROM Hangar h, PilotSkills p WHERE h.plane_name = p.plane_name AND p.age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = h.plane_name)",
          "SELECT h.plane_name, p.pilot_name FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age = (SELECT MIN(age) FROM PilotSkills ps WHERE ps.plane_name = h.plane_name GROUP BY ps.plane_name)",
          "SELECT plane_name, pilot_name FROM PilotSkills WHERE age IN (SELECT MIN(age) FROM PilotSkills GROUP BY plane_name) AND plane_name IN (SELECT plane_name FROM Hangar)",
          "SELECT h.plane_name, MIN(p.age), p.pilot_name FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name GROUP BY h.plane_name, p.pilot_name HAVING p.age = MIN(p.age)",
          "SELECT h.plane_name, p.pilot_name FROM Hangar h JOIN (SELECT plane_name, pilot_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name) p ON h.plane_name = p.plane_name AND p.min_age = (SELECT MIN(age) FROM PilotSkills ps WHERE ps.plane_name = p.plane_name)"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(PilotSkills.age) AS MaximumAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT PilotSkills.pilot_name, MAX(PilotSkills.age) FROM PilotSkills GROUP BY PilotSkills.pilot_name",
          "SELECT p.pilot_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.pilot_name",
          "SELECT p.pilot_name, MAX(p.age) FROM PilotSkills AS p GROUP BY p.pilot_name",
          "SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name ASC",
          "SELECT pilot_name AS PilotName, MAX(age) AS MaxAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name AS PilotName, MAX(age) FROM PilotSkills GROUP BY pilot_name"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name",
          "SELECT DISTINCT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name",
          "SELECT pilot_name, MAX(age) AS maximum_age FROM PilotSkills GROUP BY pilot_name ORDER BY maximum_age DESC",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY MAX(age) DESC",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name ASC",
          "SELECT pilot_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT DISTINCT pilot_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY pilot_name",
          "SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name HAVING MAX(age) > 0"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.location, COUNT(P.pilot_name) AS num_pilots, AVG(P.age) AS avg_age FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.location",
          "SELECT location AS city, COUNT(pilot_name) AS total_pilots, AVG(age) AS average_age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, COUNT(DISTINCT pilot_name), AVG(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location, COUNT(*) AS pilot_count, AVG(age) AS average_pilot_age FROM Hangar LEFT JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT location AS City, COUNT(pilot_name) AS NumberOfPilots, AVG(age) AS AverageAge FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location, COUNT(P.pilot_name) AS PilotCount, AVG(P.age) AS AvgAge FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name) AS num_pilots, AVG(age) AS avg_age FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name GROUP BY location",
          "SELECT location AS City, COUNT(pilot_name) AS TotalPilots, AVG(age) AS AveragePilotAge FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY Hangar.location",
          "SELECT location, COUNT(pilot_name) AS NumberOfPilots, AVG(age) AS AverageAge FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location AS City, COUNT(P.pilot_name) AS TotalPilots, AVG(P.age) AS AvgAge FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.location"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.location, COUNT(P.pilot_name) AS num_pilots, AVG(P.age) AS avg_age FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name) AS pilot_count, AVG(age) AS average_age FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT location, COUNT(DISTINCT pilot_name), AVG(age) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location AS HangarLocation, COUNT(P.pilot_name) AS TotalPilots, AVG(P.age) AS AverageAge FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name) AS NumberOfPilots, AVG(age) AS AveragePilotAge FROM Hangar LEFT JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location, COUNT(*) AS PilotCount, AVG(P.age) AS AvgAge FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name), AVG(age) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location ORDER BY location",
          "SELECT H.location AS Location, COUNT(P.pilot_name) AS Pilots, AVG(P.age) AS Average_Age FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.location",
          "SELECT location, COUNT(pilot_name) AS pilot_count, AVG(age) AS avg_pilot_age FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location",
          "SELECT H.location, COUNT(P.pilot_name) AS NumberOfPilots, AVG(P.age) AS AvgPilotAge FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.location"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT COUNT(pilot_name), plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT p.plane_name, COUNT(p.pilot_name) FROM PilotSkills p GROUP BY p.plane_name HAVING AVG(p.age) < 35",
          "SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT p.plane_name, COUNT(p.pilot_name) AS pilot_count FROM PilotSkills p WHERE p.plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY p.plane_name",
          "SELECT plane_name, COUNT(pilot_name) AS NumberOfPilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT COUNT(pilot_name), plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT p.plane_name, COUNT(*) FROM PilotSkills p GROUP BY p.plane_name HAVING AVG(p.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35 ORDER BY plane_name",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT T1.plane_name, COUNT(T2.pilot_name) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.plane_name HAVING AVG(T2.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT H.plane_name, COUNT(P.pilot_name) FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name HAVING AVG(P.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT p.plane_name, COUNT(*) FROM PilotSkills p WHERE (SELECT AVG(age) FROM PilotSkills WHERE plane_name = p.plane_name) < 35 GROUP BY p.plane_name",
          "SELECT DISTINCT p.plane_name, COUNT(s.pilot_name) FROM Hangar p JOIN PilotSkills s ON p.plane_name = s.plane_name GROUP BY p.plane_name HAVING AVG(s.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35",
          "SELECT p.plane_name, COUNT(*) AS num_pilots FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name GROUP BY p.plane_name HAVING AVG(p.age) < 35",
          "SELECT plane_name, COUNT(pilot_name) FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name",
          "SELECT p.plane_name, COUNT(DISTINCT p.pilot_name) FROM PilotSkills p WHERE (SELECT AVG(age) FROM PilotSkills ps WHERE ps.plane_name = p.plane_name) < 35 GROUP BY p.plane_name"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT H.location FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY P.age ASC LIMIT 1",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age LIMIT 1)",
          "SELECT H.location FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.age = (SELECT MIN(age) FROM PilotSkills)",
          "SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))",
          "SELECT TOP 1 H.location FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY P.age",
          "SELECT H.location FROM Hangar H WHERE EXISTS (SELECT 1 FROM PilotSkills P WHERE P.plane_name = H.plane_name ORDER BY P.age ASC LIMIT 1)",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))",
          "SELECT H.location FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MIN(P2.age) FROM PilotSkills P2)",
          "SELECT location FROM (SELECT H.location, P.age FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name) AS SubQuery ORDER BY age LIMIT 1",
          "SELECT H.location FROM Hangar H INNER JOIN (SELECT plane_name, MIN(age) AS MinAge FROM PilotSkills GROUP BY plane_name) P ON H.plane_name = P.plane_name WHERE P.MinAge = (SELECT MIN(age) FROM PilotSkills)"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))",
          "SELECT H.location FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MIN(age) FROM PilotSkills)",
          "SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))",
          "SELECT H.location FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name AND P.age = (SELECT MIN(age) FROM PilotSkills)",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1)",
          "SELECT H.location FROM Hangar H INNER JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MIN(P2.age) FROM PilotSkills P2)",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT TOP 1 plane_name FROM PilotSkills ORDER BY age)",
          "SELECT H.location FROM Hangar H WHERE EXISTS (SELECT 1 FROM PilotSkills P WHERE P.plane_name = H.plane_name AND P.age = (SELECT MIN(age) FROM PilotSkills))",
          "SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills) LIMIT 1)",
          "SELECT H.location FROM Hangar H JOIN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills)) AS P ON H.plane_name = P.plane_name"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT PilotSkills.pilot_name, PilotSkills.age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT ps.pilot_name, ps.age FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'",
          "SELECT name, age FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'",
          "SELECT p.pilot_name AS Name, p.age AS Age FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Austin'",
          "SELECT pilot_name AS PilotName, age AS PilotAge FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin' ORDER BY pilot_name",
          "SELECT p.pilot_name, p.age FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT PilotSkills.pilot_name, PilotSkills.age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT ps.pilot_name, ps.age FROM PilotSkills ps INNER JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'",
          "SELECT name, age FROM PilotSkills, Hangar WHERE PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'",
          "SELECT p.pilot_name AS Name, p.age AS Age FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE location = 'Austin'",
          "SELECT pilot_name AS PilotName, age AS PilotAge FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT DISTINCT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'",
          "SELECT pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin' ORDER BY pilot_name",
          "SELECT p.pilot_name, p.age FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin' GROUP BY p.pilot_name, p.age",
          "SELECT pilot_name, age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY P.pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY name",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1) ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(P.age) FROM PilotSkills P WHERE P.plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills PS WHERE PS.plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASCENDING"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY P.pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(P.age) FROM PilotSkills P WHERE P.plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT P.pilot_name FROM PilotSkills P WHERE P.age > (SELECT MAX(PS.age) FROM PilotSkills PS WHERE PS.plane_name = 'Piper Cub') ORDER BY P.pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASCENDING",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = 'Piper Cub') ORDER BY pilot_name ASC",
          "SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills ps WHERE ps.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills ps1 WHERE ps1.age < (SELECT MAX(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY plane_name)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills ps WHERE ps.plane_name = 'F-14 Fighter' AND ps.plane_name = PilotSkills.plane_name)",
          "SELECT COUNT(*) FROM PilotSkills ps1 WHERE ps1.age < (SELECT MAX(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter' AND ps2.plane_name = ps1.plane_name)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' AND plane_name = PilotSkills.plane_name)"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(P.age) FROM PilotSkills P WHERE P.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(P.age) FROM PilotSkills P WHERE P.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills P1 WHERE P1.age < (SELECT MAX(P2.age) FROM PilotSkills P2 WHERE P2.plane_name = 'F-14 Fighter')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY plane_name)",
          "SELECT COUNT(*) FROM PilotSkills P1 WHERE P1.age < (SELECT MAX(P2.age) FROM PilotSkills P2 WHERE P2.plane_name = 'F-14 Fighter' GROUP BY P2.plane_name)",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(P.age) FROM PilotSkills P WHERE P.plane_name = 'F-14 Fighter' GROUP BY P.plane_name)"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar WHERE INSTR(plane_name, 'Bomber') > 0",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' DISTINCT",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name CONTAINS 'Bomber'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE CHARINDEX('Bomber', plane_name) > 0",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name REGEXP '.*Bomber.*'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE POSITION('Bomber' IN plane_name) > 0",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar WHERE LOWER(plane_name) LIKE '%bomber%'"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar WHERE INSTR(plane_name, 'Bomber') > 0",
          "SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' DISTINCT",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name CONTAINS 'Bomber'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE CHARINDEX('Bomber', plane_name) > 0",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name REGEXP 'Bomber'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name",
          "SELECT DISTINCT plane_name FROM Hangar WHERE LOWER(plane_name) LIKE '%bomber%'",
          "SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' AND plane_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ANY (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' LIMIT 1)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1)",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT AVG(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND ROWNUM = 1)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT TOP 1 age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC)"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "pilot_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(PilotSkills.age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.plane_name = 'Piper Cub')",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age IS NOT NULL)",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name = 'Piper Cub'",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name IN (SELECT plane_name FROM Hangar WHERE plane_name = 'Piper Cub')",
          "SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') GROUP BY pilot_name",
          "SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')) AS OlderPilots",
          "SELECT COUNT(*) FROM PilotSkills WHERE age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub'))"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1",
          "SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district)",
          "SELECT d.Name FROM district d WHERE d.Area_km = (SELECT MAX(Area_km) FROM district)",
          "SELECT TOP 1 Name FROM district ORDER BY Area_km DESC",
          "SELECT Name FROM district WHERE Area_km IN (SELECT MAX(Area_km) FROM district)",
          "SELECT Name FROM (SELECT Name, Area_km FROM district ORDER BY Area_km DESC) AS subquery LIMIT 1",
          "SELECT Name FROM district ORDER BY Area_km DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM district d ORDER BY d.Area_km DESC LIMIT 1",
          "SELECT Name FROM district AS d WHERE d.Area_km = (SELECT MAX(Area_km) FROM district AS sub)",
          "SELECT Name FROM district d1 WHERE d1.Area_km >= ALL (SELECT d2.Area_km FROM district d2)"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1",
          "SELECT d.Area_km, d.Government_website FROM district d WHERE d.Population = (SELECT MIN(Population) FROM district)",
          "SELECT Area_km, Government_website FROM district WHERE Population IN (SELECT MIN(Population) FROM district)",
          "SELECT TOP 1 Area_km, Government_website FROM district ORDER BY Population",
          "SELECT Area_km, Government_website FROM district d1 WHERE Population = (SELECT MIN(Population) FROM district d2)",
          "SELECT Area_km, Government_website FROM (SELECT * FROM district ORDER BY Population LIMIT 1) AS smallest",
          "SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district) LIMIT 1",
          "SELECT d.Area_km, d.Government_website FROM (SELECT * FROM district ORDER BY Population ASC) d LIMIT 1",
          "SELECT Area_km, Government_website FROM district d ORDER BY d.Population ASC FETCH FIRST 1 ROW ONLY",
          "SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district) FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT d.Name, d.Population FROM district d WHERE d.Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district AS d)",
          "SELECT district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district)",
          "SELECT Name, Population FROM district d WHERE d.Area_km > (SELECT AVG(Area_km) FROM district d)",
          "SELECT d.Name, d.Population FROM district d WHERE d.Area_km > (SELECT AVG(Area_km) FROM district)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district d WHERE d.District_ID = district.District_ID)",
          "SELECT Name, Population FROM district d1 WHERE d1.Area_km > (SELECT AVG(d2.Area_km) FROM district d2)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district GROUP BY District_ID)",
          "SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district d WHERE d.District_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT MAX(Area_km) AS MaxArea, AVG(Area_km) AS AvgArea FROM district",
          "SELECT MAX(district.Area_km) AS LargestArea, AVG(district.Area_km) AS AverageArea FROM district",
          "SELECT MAX(Area_km) AS MaximumArea, AVG(Area_km) AS MeanArea FROM district",
          "SELECT MAX(Area_km) AS 'Biggest Area', AVG(Area_km) AS 'Average Area' FROM district",
          "SELECT MAX(Area_km) AS 'Max Area', AVG(Area_km) AS 'Avg Area' FROM district",
          "SELECT MAX(Area_km) AS Maximum_Area, AVG(Area_km) AS Average_Area FROM district",
          "SELECT MAX(Area_km) AS 'Max Area km', AVG(Area_km) AS 'Avg Area km' FROM district",
          "SELECT MAX(Area_km) AS Max_Area, AVG(Area_km) AS Avg_Area FROM district",
          "SELECT MAX(Area_km) AS 'Maximum Area (km)', AVG(Area_km) AS 'Average Area (km)' FROM district",
          "SELECT MAX(Area_km) AS 'Largest Area (km)', AVG(Area_km) AS 'Mean Area (km)' FROM district"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT TOP 3 Area_km FROM district ORDER BY Area_km DESC)",
          "SELECT SUM(d.Population) FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC FETCH FIRST 3 ROWS ONLY)",
          "SELECT SUM(Population) FROM (SELECT Population FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district d JOIN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) t ON d.Area_km = t.Area_km",
          "SELECT SUM(Population) FROM district WHERE Area_km >= (SELECT MIN(Area_km) FROM (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3))",
          "SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) AS subquery)",
          "SELECT TOTAL(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)",
          "SELECT SUM(Population) FROM district WHERE EXISTS (SELECT 1 FROM district AS sub WHERE sub.Area_km = district.Area_km ORDER BY sub.Area_km DESC LIMIT 3)"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population",
          "SELECT d.District_ID, d.Name, d.Government_website FROM district d ORDER BY d.Population ASC",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population DESC",
          "SELECT * FROM district ORDER BY Population",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASC",
          "SELECT d.District_ID, d.Name, d.Government_website FROM district AS d ORDER BY d.Population",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population DESC",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASC",
          "SELECT d.District_ID, d.Name, d.Government_website FROM district d ORDER BY d.Population DESC",
          "SELECT District_ID, Name, Government_website FROM district ORDER BY Population"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov'",
          "SELECT Name FROM district WHERE Government_website LIKE 'gov%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov.%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov.%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov.com%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov.com%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%.gov.org%'",
          "SELECT Name FROM district WHERE Government_website LIKE '%gov.org%'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000",
          "SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000",
          "SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000;",
          "SELECT `District_ID`, `Name` FROM `district` WHERE `Population` > 4000 OR `Area_km` > 3000",
          "SELECT District_ID AS id, Name AS district_name FROM district WHERE Population > 4000 OR Area_km > 3000",
          "SELECT d.District_ID, d.Name FROM district AS d WHERE d.Population > 4000 OR d.Area_km > 3000",
          "SELECT District_ID, Name FROM district WHERE (Population > 4000) OR (Area_km > 3000)",
          "SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000;",
          "SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000 ORDER BY Name",
          "SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000 ORDER BY District_ID"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name, Speach_title FROM spokesman",
          "SELECT s.Name, s.Speach_title FROM spokesman s",
          "SELECT spokesman.Name AS SpokesmanName, spokesman.Speach_title AS SpeechTitle FROM spokesman",
          "SELECT Name AS SpokesmanName, Speach_title AS SpeechTitle FROM spokesman",
          "SELECT `Name`, `Speach_title` FROM `spokesman`",
          "SELECT Name, Speach_title FROM spokesman ORDER BY Name",
          "SELECT DISTINCT Name, Speach_title FROM spokesman",
          "SELECT Name, Speach_title FROM spokesman WHERE Name IS NOT NULL AND Speach_title IS NOT NULL",
          "SELECT Name, Speach_title FROM spokesman GROUP BY Name, Speach_title",
          "SELECT * FROM spokesman WHERE Speach_title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1188,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT AVG(Points) AS Average_Points, AVG(Age) AS Average_Age FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) AS avg_points, AVG(Age) AS avg_age FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(spokesman.Points) AS AveragePoints, AVG(spokesman.Age) AS AverageAge FROM spokesman WHERE spokesman.Rank_position = 1",
          "SELECT AVG(Points), AVG(Age) FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) average_points, AVG(Age) average_age FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(Points) AS AveragePoints, AVG(Age) AS AverageAge FROM spokesman WHERE Rank_position = 1",
          "SELECT AVG(spokesman.Points) AS AvgPoints, AVG(spokesman.Age) AS AvgAge FROM spokesman WHERE spokesman.Rank_position = 1",
          "SELECT AVG(Points) AS Avg_Points, AVG(Age) AS Avg_Age FROM spokesman WHERE Rank_position = '1'",
          "SELECT AVG(Points) AS AveragePoints, AVG(Age) AS AverageAge FROM spokesman WHERE Rank_position = '1'",
          "SELECT AVG(Points) AS AvgPoints, AVG(Age) AS AvgAge FROM spokesman WHERE Rank_position = 1"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name, Points FROM spokesman WHERE Age < 40",
          "SELECT s.Name, s.Points FROM spokesman s WHERE s.Age < 40",
          "SELECT Name, Points FROM spokesman WHERE Age < '40'",
          "SELECT Name, Points FROM spokesman WHERE Age <= 39",
          "SELECT Name, Points FROM spokesman WHERE Age BETWEEN 0 AND 39",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Name",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 ORDER BY Points DESC",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 AND Points IS NOT NULL",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 AND Points > 0",
          "SELECT Name, Points FROM spokesman WHERE Age < 40 AND Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1",
          "SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman)",
          "SELECT TOP 1 Name FROM spokesman ORDER BY Age DESC",
          "SELECT Name FROM spokesman WHERE Age IN (SELECT MAX(Age) FROM spokesman)",
          "SELECT Name FROM spokesman AS s WHERE s.Age = (SELECT MAX(Age) FROM spokesman AS s2)",
          "SELECT s.Name FROM spokesman s ORDER BY s.Age DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM (SELECT Name, Age FROM spokesman ORDER BY Age DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman) LIMIT 1",
          "SELECT Name FROM spokesman ORDER BY Age DESC, Name ASC LIMIT 1",
          "SELECT Name FROM spokesman WHERE Age >= ALL (SELECT Age FROM spokesman)"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(Points) FROM spokesman)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) AS AveragePoints FROM spokesman)",
          "SELECT Name FROM spokesman s WHERE s.Points < (SELECT AVG(p.Points) FROM spokesman p)",
          "SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(sp.Points) FROM spokesman sp)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman GROUP BY Points)",
          "SELECT Name FROM spokesman AS s WHERE s.Points < (SELECT AVG(Points) FROM spokesman AS sp)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman WHERE Points IS NOT NULL)",
          "SELECT Name FROM spokesman s WHERE s.Points < (SELECT AVG(Points) FROM spokesman WHERE Points > 0)",
          "SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman HAVING COUNT(Points) > 0)"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT D.Name FROM district D JOIN spokesman_district SD ON D.District_ID = SD.District_ID GROUP BY D.District_ID ORDER BY COUNT(SD.Spokesman_ID) DESC LIMIT 1",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 D.Name FROM district D INNER JOIN spokesman_district SD ON D.District_ID = SD.District_ID GROUP BY D.Name ORDER BY COUNT(SD.Spokesman_ID) DESC",
          "SELECT D.Name FROM district D, spokesman_district SD WHERE D.District_ID = SD.District_ID GROUP BY D.Name HAVING COUNT(SD.Spokesman_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM spokesman_district GROUP BY District_ID) T)",
          "SELECT D.Name FROM (SELECT District_ID, COUNT(Spokesman_ID) AS SpokesmanCount FROM spokesman_district GROUP BY District_ID) AS SubQuery JOIN district D ON SubQuery.District_ID = D.District_ID ORDER BY SpokesmanCount DESC LIMIT 1",
          "SELECT D.Name FROM district D WHERE D.District_ID = (SELECT District_ID FROM spokesman_district GROUP BY District_ID ORDER BY COUNT(Spokesman_ID) DESC LIMIT 1)",
          "SELECT D.Name FROM district AS D JOIN (SELECT District_ID, COUNT(*) AS TotalSpokesmen FROM spokesman_district GROUP BY District_ID) AS SD ON D.District_ID = SD.District_ID ORDER BY SD.TotalSpokesmen DESC LIMIT 1",
          "SELECT district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.Name ORDER BY COUNT(spokesman_district.Spokesman_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Name FROM (SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS NumSpokesmen FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.Name ORDER BY NumSpokesmen DESC) WHERE ROWNUM = 1",
          "SELECT D.Name FROM district D LEFT JOIN spokesman_district SD ON D.District_ID = SD.District_ID GROUP BY D.Name ORDER BY COUNT(SD.Spokesman_ID) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004",
          "SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004)",
          "SELECT DISTINCT s.Name FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004",
          "SELECT s.Name FROM spokesman AS s INNER JOIN spokesman_district AS sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < '2004'",
          "SELECT Name FROM spokesman WHERE EXISTS (SELECT 1 FROM spokesman_district WHERE Spokesman_ID = spokesman.Spokesman_ID AND Start_year < 2004)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID IN (SELECT sd.Spokesman_ID FROM spokesman_district sd WHERE sd.Start_year < 2004)",
          "SELECT Name FROM spokesman INNER JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE Start_year < 2004",
          "SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004",
          "SELECT DISTINCT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004)",
          "SELECT s.Name FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004 ORDER BY s.Name"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT d.Name, COUNT(sd.Spokesman_ID) AS NumberOfSpokesmen FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name",
          "SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS SpokesmenCount FROM district INNER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.Name",
          "SELECT d.Name AS DistrictName, COUNT(*) AS TotalSpokesmen FROM district d, spokesman_district sd WHERE d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name",
          "SELECT Name, COUNT(Spokesman_ID) FROM district JOIN spokesman_district USING (District_ID) GROUP BY District_ID, Name",
          "SELECT Name AS District, COUNT(Spokesman_ID) AS Spokesmen_Number FROM district LEFT JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY District_ID, Name",
          "SELECT d.Name, COUNT(sd.Spokesman_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name",
          "SELECT Name, COUNT(Spokesman_ID) AS NumOfSpokesmen FROM district d INNER JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name",
          "SELECT d.Name AS District, COUNT(sd.Spokesman_ID) AS CountOfSpokesmen FROM district d LEFT OUTER JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name",
          "SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS NumberOfSpokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.Name ORDER BY district.Name",
          "SELECT d.Name, COUNT(sd.Spokesman_ID) AS SpokesmenTotal FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name ORDER BY SpokesmenTotal DESC"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 1)) INTERSECT SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position = 2))",
          "SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1 INTERSECT SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2",
          "SELECT DISTINCT d.Name FROM district d, spokesman_district sd, spokesman s WHERE d.District_ID = sd.District_ID AND sd.Spokesman_ID = s.Spokesman_ID AND s.Rank_position IN (1, 2) GROUP BY d.Name HAVING COUNT(DISTINCT s.Rank_position) = 2",
          "WITH Rank1 AS (SELECT District_ID FROM spokesman_district JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE Rank_position = 1), Rank2 AS (SELECT District_ID FROM spokesman_district JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE Rank_position = 2) SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM Rank1 INTERSECT SELECT District_ID FROM Rank2)",
          "SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 2)",
          "SELECT d.Name FROM district d WHERE d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1) AND d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2)",
          "SELECT d.Name FROM district d INNER JOIN (SELECT District_ID FROM spokesman_district sd INNER JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1) r1 ON d.District_ID = r1.District_ID INNER JOIN (SELECT District_ID FROM spokesman_district sd INNER JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2) r2 ON d.District_ID = r2.District_ID",
          "SELECT d.Name FROM district d WHERE (SELECT COUNT(DISTINCT s.Rank_position) FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position IN (1, 2)) = 2",
          "SELECT d.Name FROM district d WHERE d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID GROUP BY sd.District_ID HAVING SUM(CASE WHEN s.Rank_position IN (1, 2) THEN 1 ELSE 0 END) = 2)",
          "SELECT d.Name FROM district d WHERE d.District_ID IN (SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1 UNION ALL SELECT sd.District_ID FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2 HAVING COUNT(*) = 2)"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT D.Name FROM district D JOIN spokesman_district SD ON D.District_ID = SD.District_ID GROUP BY D.District_ID HAVING COUNT(SD.Spokesman_ID) > 1",
          "SELECT district.Name FROM district INNER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(spokesman_district.Spokesman_ID) > 1",
          "SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) > 1)",
          "SELECT d.Name FROM district d, spokesman_district sd WHERE d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1",
          "SELECT Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(DISTINCT sd.Spokesman_ID) > 1",
          "SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name HAVING COUNT(sd.Spokesman_ID) > 1",
          "SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID GROUP BY sd.District_ID HAVING COUNT(sd.Spokesman_ID) > 1)",
          "SELECT d.Name FROM district AS d JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(*) > 1",
          "SELECT d.Name FROM district d INNER JOIN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) > 1) sd ON d.District_ID = sd.District_ID",
          "SELECT d.Name FROM district d WHERE (SELECT COUNT(*) FROM spokesman_district WHERE District_ID = d.District_ID) > 1"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT DISTINCT District_ID FROM spokesman_district)",
          "SELECT COUNT(District_ID) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)",
          "SELECT COUNT(*) FROM district d WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)",
          "SELECT COUNT(District_ID) FROM district WHERE District_ID NOT IN (SELECT DISTINCT District_ID FROM spokesman_district WHERE District_ID IS NOT NULL)",
          "SELECT COUNT(*) FROM district AS d LEFT JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL",
          "SELECT COUNT(DISTINCT d.District_ID) FROM district d WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)",
          "SELECT COUNT(*) FROM (SELECT District_ID FROM district EXCEPT SELECT District_ID FROM spokesman_district) AS subquery",
          "SELECT COUNT(DISTINCT district.District_ID) FROM district LEFT OUTER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.District_ID IS NULL",
          "SELECT COUNT(*) FROM district d WHERE d.District_ID NOT IN (SELECT sd.District_ID FROM spokesman_district sd)",
          "SELECT COUNT(DISTINCT d.District_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
          "SELECT s.Name FROM spokesman s LEFT JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Spokesman_ID IS NULL",
          "SELECT Name FROM spokesman WHERE NOT EXISTS (SELECT 1 FROM spokesman_district WHERE Spokesman_ID = spokesman.Spokesman_ID)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
          "SELECT Name FROM spokesman EXCEPT SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID",
          "SELECT Name FROM spokesman s WHERE NOT EXISTS (SELECT NULL FROM spokesman_district sd WHERE sd.Spokesman_ID = s.Spokesman_ID)",
          "SELECT DISTINCT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT sd.Spokesman_ID FROM spokesman_district sd)",
          "SELECT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT DISTINCT sd.Spokesman_ID FROM spokesman_district sd)",
          "SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT DISTINCT Spokesman_ID FROM spokesman_district)",
          "SELECT s.Name FROM spokesman s WHERE NOT EXISTS (SELECT * FROM spokesman_district sd WHERE sd.Spokesman_ID = s.Spokesman_ID)"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "district_spokesman",
      "infer_predictions": [
        [
          "SELECT SUM(d.Population) AS TotalPopulation, AVG(d.Population) AS AveragePopulation FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID",
          "SELECT SUM(Population) Total, AVG(Population) Average FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)",
          "SELECT SUM(Population), AVG(Population) FROM district WHERE District_ID IN (SELECT DISTINCT District_ID FROM spokesman_district)",
          "SELECT TotalPopulation, AveragePopulation FROM (SELECT SUM(Population) AS TotalPopulation, AVG(Population) AS AveragePopulation FROM district INNER JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID) AS subquery",
          "SELECT (SELECT SUM(Population) FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)) AS TotalPopulation, (SELECT AVG(Population) FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)) AS AveragePopulation",
          "SELECT SUM(d.Population) AS Total, AVG(d.Population) AS Avg FROM district d, spokesman_district sd WHERE d.District_ID = sd.District_ID GROUP BY sd.District_ID",
          "SELECT SUM(Population) AS TotalPop, AVG(Population) AS AvgPop FROM district d INNER JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY sd.District_ID",
          "SELECT SUM(d.Population) TotalPop, AVG(d.Population) AvgPop FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)",
          "SELECT Aggregate.Total, Aggregate.Average FROM (SELECT SUM(Population) AS Total, AVG(Population) AS Average FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)) AS Aggregate",
          "SELECT SUM(Population) AS TotalPopulation, AVG(Population) AS AveragePopulation FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID)"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT S.title FROM Sculptures S WHERE S.year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT title FROM Sculptures WHERE year IN (SELECT MAX(year) FROM Sculptures)",
          "SELECT S.title FROM Sculptures S ORDER BY S.year DESC LIMIT 1",
          "SELECT title FROM Sculptures ORDER BY year DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 title FROM Sculptures ORDER BY year DESC",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(S.year) FROM Sculptures S)",
          "SELECT title FROM (SELECT title, year FROM Sculptures ORDER BY year DESC) WHERE ROWNUM = 1",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures AS S)",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(S.year) FROM Sculptures S)"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT TOP 1 title FROM Sculptures ORDER BY year DESC",
          "SELECT title FROM Sculptures WHERE year IN (SELECT MAX(year) FROM Sculptures)",
          "SELECT S.title FROM Sculptures S WHERE S.year = (SELECT MAX(year) FROM Sculptures)",
          "SELECT title FROM (SELECT title, year FROM Sculptures ORDER BY year DESC) AS Recent LIMIT 1",
          "SELECT title FROM Sculptures ORDER BY year DESC FETCH FIRST 1 ROW ONLY",
          "SELECT title FROM Sculptures WHERE year = (SELECT MAX(S.year) FROM Sculptures S)",
          "SELECT title FROM Sculptures ORDER BY year DESC, sculptureID ASC LIMIT 1",
          "SELECT FIRST(title) FROM Sculptures ORDER BY year DESC"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT P.title, P.location FROM Paintings P WHERE P.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT title, location FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)",
          "SELECT TOP 1 title, location FROM Paintings ORDER BY year",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) LIMIT 1",
          "SELECT title, location FROM (SELECT title, location, year FROM Paintings ORDER BY year ASC) AS oldest LIMIT 1",
          "SELECT title, location FROM Paintings ORDER BY year LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) FETCH FIRST 1 ROWS ONLY",
          "SELECT title, location FROM Paintings AS p WHERE p.year = (SELECT MIN(year) FROM Paintings AS min_year)"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT P.title, P.location FROM Paintings P WHERE P.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT TOP 1 title, location FROM Paintings ORDER BY year",
          "SELECT title, location FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)",
          "SELECT title, location FROM (SELECT title, location, year FROM Paintings ORDER BY year ASC) AS oldest LIMIT 1",
          "SELECT title, location FROM Paintings ORDER BY year ASC FETCH FIRST 1 ROW ONLY",
          "SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) LIMIT 1",
          "SELECT FIRST(title), FIRST(location) FROM Paintings ORDER BY year ASC",
          "SELECT title, location FROM Paintings ORDER BY year LIMIT 1"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 226",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 226",
          "SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = '226'",
          "SELECT title FROM Sculptures WHERE location LIKE '%226%'",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND location IS NOT NULL",
          "SELECT Sculptures.title FROM Sculptures WHERE location = 'gallery 226' AND location IS NOT NULL",
          "SELECT title FROM Sculptures WHERE location = 'gallery 226' AND location IS NOT NULL AND title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Sculptures WHERE location = 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 226",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 'gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE Sculptures.location = 226",
          "SELECT title FROM Sculptures WHERE location LIKE '%226%'",
          "SELECT title FROM Sculptures WHERE location = '226'",
          "SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'",
          "SELECT title FROM Sculptures WHERE location = 'Gallery 226'",
          "SELECT Sculptures.title FROM Sculptures WHERE location LIKE '%gallery 226%'",
          "SELECT Sculptures.title FROM Sculptures WHERE location = 'Gallery 226'"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings",
          "SELECT Paintings.title, Paintings.location FROM Paintings",
          "SELECT p.title, p.location FROM Paintings p",
          "SELECT title AS PaintingTitle, location AS PaintingLocation FROM Paintings",
          "SELECT `title`, `location` FROM `Paintings`",
          "SELECT Paintings.title AS Title, Paintings.location AS Location FROM Paintings",
          "SELECT title, location FROM Paintings WHERE title IS NOT NULL AND location IS NOT NULL",
          "SELECT DISTINCT title, location FROM Paintings",
          "SELECT p.title AS 'Title', p.location AS 'Location' FROM Paintings p",
          "SELECT title, location FROM Paintings ORDER BY title"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Paintings",
          "SELECT Paintings.title, Paintings.location FROM Paintings",
          "SELECT p.title, p.location FROM Paintings p",
          "SELECT title AS PaintingTitle, location AS PaintingLocation FROM Paintings",
          "SELECT DISTINCT title, location FROM Paintings",
          "SELECT title, location FROM Paintings WHERE location IS NOT NULL",
          "SELECT title, location FROM Paintings ORDER BY title",
          "SELECT title, location FROM Paintings GROUP BY title, location",
          "SELECT * FROM Paintings SELECT title, location",
          "SELECT title, location FROM Paintings WHERE title IS NOT NULL AND location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Sculptures",
          "SELECT Sculptures.title, Sculptures.location FROM Sculptures",
          "SELECT s.title, s.location FROM Sculptures s",
          "SELECT title AS SculptureTitle, location AS SculptureLocation FROM Sculptures",
          "SELECT Sculptures.title AS Title, Sculptures.location AS Location FROM Sculptures",
          "SELECT `title`, `location` FROM `Sculptures`",
          "SELECT title, location FROM Sculptures ORDER BY title",
          "SELECT DISTINCT title, location FROM Sculptures",
          "SELECT title, location FROM Sculptures WHERE location IS NOT NULL",
          "SELECT title, location FROM Sculptures WHERE title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, location FROM Sculptures",
          "SELECT Sculptures.title, Sculptures.location FROM Sculptures",
          "SELECT s.title, s.location FROM Sculptures s",
          "SELECT title AS SculptureName, location AS SculptureLocation FROM Sculptures",
          "SELECT Sculptures.title AS 'Sculpture Title', Sculptures.location AS 'Location' FROM Sculptures",
          "SELECT DISTINCT title, location FROM Sculptures",
          "SELECT title, location FROM Sculptures ORDER BY title",
          "SELECT title, location FROM Sculptures WHERE location IS NOT NULL",
          "SELECT * FROM Sculptures SELECT title, location",
          "SELECT title AS Sculpture_Title, location AS Sculpture_Location FROM Sculptures WHERE location <> ''"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium FROM Paintings WHERE paintingID = 80",
          "SELECT p.medium FROM Paintings p WHERE p.paintingID = 80",
          "SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = '80'",
          "SELECT DISTINCT medium FROM Paintings WHERE paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80 LIMIT 1",
          "SELECT p.medium FROM Paintings AS p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80 AND medium IS NOT NULL",
          "SELECT medium FROM Paintings WHERE paintingID = 80 ORDER BY medium",
          "SELECT medium FROM Paintings WHERE paintingID = 80 GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium FROM Paintings WHERE paintingID = 80",
          "SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80",
          "SELECT p.medium FROM Paintings p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = '80'",
          "SELECT DISTINCT medium FROM Paintings WHERE paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80 LIMIT 1",
          "SELECT medium FROM Paintings p WHERE p.paintingID = 80",
          "SELECT p.medium FROM Paintings AS p WHERE p.paintingID = 80",
          "SELECT medium FROM Paintings WHERE paintingID = 80 AND medium IS NOT NULL",
          "SELECT medium FROM Paintings WHERE paintingID = 80 ORDER BY medium DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850",
          "SELECT Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850",
          "SELECT first_name AS fname, last_name AS lname FROM Artists WHERE birth_year > 1850",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.birthYear > 1850",
          "SELECT first_name, last_name FROM Artists WHERE birth_year > 1850",
          "SELECT fname AS FirstName, lname AS LastName FROM Artists WHERE birthYear > 1850",
          "SELECT `fname`, `lname` FROM `Artists` WHERE `birthYear` > 1850",
          "SELECT fname, lname FROM Artists WHERE birthYear > '1850'",
          "SELECT Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > '1850'",
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850 ORDER BY lname"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE birthYear > 1850",
          "SELECT CONCAT(fname, ' ', lname) AS full_name FROM Artists WHERE birthYear > 1850",
          "SELECT fname || ' ' || lname AS full_name FROM Artists WHERE birthYear > 1850",
          "SELECT first_name, last_name FROM Artists WHERE birthYear > 1850",
          "SELECT first_name || ' ' || last_name AS full_name FROM Artists WHERE birthYear > 1850",
          "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM Artists WHERE birthYear > 1850",
          "SELECT fname AS first_name, lname AS last_name FROM Artists WHERE birthYear > 1850",
          "SELECT first_name AS fname, last_name AS lname FROM Artists WHERE birthYear > 1850",
          "SELECT fname AS 'First Name', lname AS 'Last Name' FROM Artists WHERE birthYear > 1850",
          "SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM Artists WHERE birthYear > 1850"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE NOT location = 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location <> 'gallery 226'",
          "SELECT Sculptures.title, Sculptures.year FROM Sculptures WHERE Sculptures.location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT IN ('gallery 226')",
          "SELECT title, year FROM Sculptures WHERE location IS NOT 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'",
          "SELECT S.title, S.year FROM Sculptures AS S WHERE S.location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226' AND location IS NOT NULL",
          "SELECT title, year FROM Sculptures WHERE location NOT EQUALS 'gallery 226'"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE NOT location = 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location <> 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT IN ('gallery 226')",
          "SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'",
          "SELECT S.title, S.year FROM Sculptures AS S WHERE S.location != 'gallery 226'",
          "SELECT S.title, S.year FROM Sculptures S WHERE S.location <> 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location IS NOT 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location NOT EQUALS 'gallery 226'",
          "SELECT title, year FROM Sculptures WHERE location != 'gallery 226' AND location IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT first_name, last_name FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT A.fname AS FirstName, A.lname AS LastName FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT fname AS 'First Name', lname AS 'Last Name' FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < '1900'",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900 ORDER BY A.lname, A.fname",
          "SELECT DISTINCT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year < 1900)"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900",
          "SELECT DISTINCT A.fname AS FirstName, A.lname AS LastName FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)",
          "SELECT DISTINCT Artists.fname, Artists.lname FROM Artists, Sculptures WHERE Artists.artistID = Sculptures.sculptorID AND Sculptures.year < 1900",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID AND S.year < 1900",
          "SELECT DISTINCT first_name, last_name FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year < 1900)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A RIGHT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year < 1900",
          "SELECT DISTINCT fname AS 'First Name', lname AS 'Last Name' FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE year < 1900"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID AND year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE A.artistID IN (SELECT S.sculptorID FROM Sculptures S WHERE S.year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists AS A JOIN Sculptures AS S ON A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID AND S.year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920) ORDER BY birthYear"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year > 1920",
          "SELECT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE A.artistID IN (SELECT S.sculptorID FROM Sculptures S WHERE S.year > 1920)",
          "SELECT DISTINCT birthYear FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920 GROUP BY sculptorID)",
          "SELECT DISTINCT A.birthYear FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920",
          "SELECT DISTINCT A.birthYear FROM Artists A WHERE EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID AND S.year > 1920)",
          "SELECT DISTINCT A.birthYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID AND S.year > 1920"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT A.fname, A.lname FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)",
          "SELECT TOP 1 fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC",
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL)",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC FETCH FIRST ROW ONLY",
          "SELECT first_name AS fname, last_name AS lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL)",
          "SELECT fname, lname FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL ORDER BY (deathYear - birthYear) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT CONCAT(fname, ' ', lname) AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname || ' ' || lname AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT TOP 1 fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC",
          "SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC FETCH FIRST ROW ONLY",
          "SELECT fname, lname FROM Artists WHERE deathYear - birthYear = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1",
          "SELECT TOP 1 CONCAT(fname, ' ', lname) AS full_name FROM Artists ORDER BY (deathYear - birthYear) DESC",
          "SELECT fname || ' ' || lname AS full_name FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MIN(deathYear - birthYear) AS ShortestLifespan FROM Artists",
          "SELECT MIN(deathYear - birthYear) AS Age FROM Artists WHERE deathYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS MinAge FROM Artists WHERE deathYear > birthYear",
          "SELECT (deathYear - birthYear) AS Age FROM Artists ORDER BY Age ASC LIMIT 1",
          "SELECT birthYear, deathYear, (deathYear - birthYear) AS Age FROM Artists ORDER BY Age ASC LIMIT 1",
          "SELECT MIN(deathYear - birthYear) AS ShortestLife FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS ShortestLifespan FROM Artists WHERE deathYear > 0 AND birthYear > 0",
          "SELECT MIN(deathYear - birthYear) AS Age FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS ShortestLifeSpan FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MIN(deathYear - birthYear) AS shortest_lifespan FROM Artists",
          "SELECT MIN(deathYear - birthYear) FROM Artists",
          "SELECT MIN(deathYear - birthYear) AS age FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS min_age FROM Artists WHERE deathYear > birthYear",
          "SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS shortest_life FROM Artists WHERE birthYear IS NOT NULL AND deathYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS min_life_span FROM Artists WHERE deathYear > 0 AND birthYear > 0",
          "SELECT MIN(deathYear - birthYear) AS shortest_life_span FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS minimum_age FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL",
          "SELECT MIN(deathYear - birthYear) AS minimum_lifespan FROM Artists WHERE deathYear IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1",
          "SELECT fname, MAX(deathYear - birthYear) AS age FROM Artists GROUP BY artistID",
          "SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT TOP 1 fname, deathYear - birthYear AS age FROM Artists ORDER BY age DESC",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY deathYear - birthYear DESC FETCH FIRST 1 ROW ONLY",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY (deathYear - birthYear) DESC FETCH FIRST ROW ONLY",
          "SELECT fname, deathYear - birthYear AS Max_Age FROM Artists GROUP BY fname, birthYear, deathYear HAVING (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY age DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1",
          "SELECT fname, MAX(deathYear - birthYear) AS age FROM Artists GROUP BY artistID ORDER BY age DESC LIMIT 1",
          "SELECT TOP 1 fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC",
          "SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY age DESC FETCH FIRST ROW ONLY",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1",
          "SELECT fname, (deathYear - birthYear) AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists) LIMIT 1",
          "SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) DESC, fname ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) AS NumberOfPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) AS PaintingCount FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' GROUP BY location",
          "SELECT location, COUNT(*) FROM Paintings WHERE location = 'gallery 240' GROUP BY location",
          "SELECT COUNT(DISTINCT paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240' AND paintingID IS NOT NULL",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240' AND paintingID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE location = '240'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = '240'",
          "SELECT COUNT(*) AS TotalPaintings FROM Paintings WHERE location = '240'",
          "SELECT COUNT(paintingID) AS TotalPaintings FROM Paintings WHERE location = '240'",
          "SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) AS TotalPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(paintingID) AS TotalPaintings FROM Paintings WHERE location = 'gallery 240'",
          "SELECT COUNT(*) FROM Paintings WHERE location LIKE '%240%'",
          "SELECT COUNT(paintingID) FROM Paintings WHERE location LIKE '%240%'"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)",
          "SELECT COUNT(paintingID) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Paintings.painterID ORDER BY (Artists.deathYear - Artists.birthYear) DESC LIMIT 1",
          "SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "WITH LongestLived AS (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1) SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM LongestLived)",
          "SELECT COUNT(PaintingID) FROM Paintings WHERE painterID = (SELECT TOP 1 artistID FROM Artists ORDER BY (deathYear - birthYear) DESC)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(*) AS TotalPaintings FROM Paintings INNER JOIN (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1) AS LongestLived ON Paintings.painterID = LongestLived.artistID",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE (a.deathYear - a.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)",
          "SELECT COUNT(*) FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND (Artists.deathYear - Artists.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)",
          "SELECT COUNT(paintingID) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.artistID ORDER BY (Artists.deathYear - Artists.birthYear) DESC LIMIT 1",
          "SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "WITH LongestLived AS (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1) SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM LongestLived)",
          "SELECT COUNT(P.paintingID) FROM Paintings P INNER JOIN (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1) A ON P.painterID = A.artistID",
          "SELECT TOP 1 COUNT(*) FROM Paintings WHERE painterID = (SELECT TOP 1 artistID FROM Artists ORDER BY (deathYear - birthYear) DESC) GROUP BY painterID",
          "SELECT COUNT(*) AS PaintingCount FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1)",
          "SELECT COUNT(*) FROM Paintings P WHERE EXISTS (SELECT 1 FROM Artists A WHERE A.artistID = P.painterID AND (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))",
          "SELECT COUNT(*) FROM Paintings, (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1) AS LongestLived WHERE Paintings.painterID = LongestLived.artistID"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.title, P.year FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Mary'",
          "SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary')",
          "SELECT title AS PaintingName, year AS CreationYear FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Mary'",
          "SELECT title, year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT Paintings.title, Paintings.year FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT title, year FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'",
          "SELECT p.title AS 'Name of Painting', p.year AS 'Year of Creation' FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary' ORDER BY p.year",
          "SELECT DISTINCT title, year FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Mary'",
          "SELECT title, year FROM Paintings p LEFT JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT Paintings.title, Paintings.year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'",
          "SELECT title, year FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT title AS PaintingName, year AS CreationYear FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Mary'",
          "SELECT p.title, p.year FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Mary'",
          "SELECT title, year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID AND Artists.fname = 'Mary'",
          "SELECT DISTINCT title, year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'",
          "SELECT title, year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary' ORDER BY year",
          "SELECT p.title AS 'Painting Title', p.year AS 'Year Created' FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary'",
          "SELECT title, year FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary' AND Artists.fname IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.width_mm FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT Paintings.width_mm FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.birthYear < 1850",
          "SELECT p.width_mm FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.birthYear < 1850",
          "SELECT width_mm FROM Paintings AS p JOIN Artists AS a ON p.painterID = a.artistID WHERE a.birthYear < 1850",
          "SELECT p.width_mm FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850 ORDER BY width_mm"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT P.width_mm FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE A.birthYear < 1850",
          "SELECT width_mm FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.birthYear < 1850",
          "SELECT Paintings.width_mm AS Width FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)",
          "SELECT P.width_mm FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.birthYear < 1850",
          "SELECT width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850",
          "SELECT width_mm FROM Paintings WHERE EXISTS (SELECT 1 FROM Artists WHERE Artists.artistID = Paintings.painterID AND Artists.birthYear < 1850)",
          "SELECT width_mm FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850 ORDER BY width_mm",
          "SELECT DISTINCT width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.location, P.medium FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT Paintings.location AS Location, Paintings.medium AS Medium FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'",
          "SELECT p.location, p.medium FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Pablo'",
          "SELECT `location`, `medium` FROM `Paintings` INNER JOIN `Artists` ON `Paintings`.`painterID` = `Artists`.`artistID` WHERE `Artists`.`fname` = 'Pablo'",
          "SELECT loc.location, med.medium FROM Paintings AS med JOIN Artists AS loc ON med.painterID = loc.artistID WHERE loc.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo' ORDER BY location",
          "SELECT DISTINCT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT Paintings.location, Paintings.medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo' AND Artists.lname IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.location, P.medium FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT location AS PaintingLocation, medium AS PaintingMedium FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'",
          "SELECT DISTINCT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'",
          "SELECT P.location, P.medium FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo' ORDER BY location",
          "SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'",
          "SELECT location, medium FROM Paintings p INNER JOIN Artists a ON p.painterID = a.artistID AND a.fname = 'Pablo'",
          "SELECT P.location, P.medium FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Pablo' AND P.year >= 1900",
          "SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo')"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT P.painterID FROM Paintings P) AND A.artistID IN (SELECT S.sculptorID FROM Sculptures S)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings INTERSECT SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID) AND EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT A.fname, A.lname FROM Artists A, Paintings P, Sculptures S WHERE A.artistID = P.painterID AND A.artistID = S.sculptorID",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) INTERSECT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID) AND EXISTS (SELECT * FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures HAVING COUNT(*) > 1)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND A.artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) >= 1)"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) INTERSECT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P, Sculptures S WHERE A.artistID = P.painterID AND A.artistID = S.sculptorID",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE painterID IN (SELECT sculptorID FROM Sculptures))",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID) AND EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings UNION SELECT sculptorID FROM Sculptures HAVING COUNT(*) > 1)",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND A.artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT * FROM Paintings WHERE painterID = Artists.artistID) AND EXISTS (SELECT * FROM Sculptures WHERE sculptorID = Artists.artistID)"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P1, Paintings P2 WHERE A.artistID = P1.painterID AND P1.medium = 'oil' AND A.artistID = P2.painterID AND P2.medium = 'lithographic'",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') AND EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium IN ('oil', 'lithographic') GROUP BY painterID HAVING COUNT(DISTINCT medium) = 2)",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING SUM(CASE WHEN medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN medium = 'lithographic' THEN 1 ELSE 0 END) > 0)",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') INTERSECT SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' UNION SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' UNION ALL SELECT painterID FROM Paintings WHERE medium = 'lithographic') GROUP BY A.artistID HAVING COUNT(DISTINCT medium) = 2"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') AND artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P1, Paintings P2 WHERE A.artistID = P1.painterID AND P1.medium = 'oil' AND A.artistID = P2.painterID AND P2.medium = 'lithographic'",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') AND EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'lithographic')",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium IN ('oil', 'lithographic') GROUP BY painterID HAVING COUNT(DISTINCT medium) = 2)",
          "WITH OilArtists AS (SELECT painterID FROM Paintings WHERE medium = 'oil'), LithoArtists AS (SELECT painterID FROM Paintings WHERE medium = 'lithographic') SELECT A.fname, A.lname FROM Artists A JOIN OilArtists O ON A.artistID = O.painterID JOIN LithoArtists L ON A.artistID = L.painterID",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' UNION ALL SELECT painterID FROM Paintings WHERE medium = 'lithographic') GROUP BY A.fname, A.lname HAVING COUNT(DISTINCT medium) > 1",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING SUM(CASE WHEN medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN medium = 'lithographic' THEN 1 ELSE 0 END) > 0)",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN (SELECT painterID FROM Paintings WHERE medium = 'oil' INTERSECT SELECT painterID FROM Paintings WHERE medium = 'lithographic') P ON A.artistID = P.painterID",
          "SELECT A.fname, A.lname FROM Artists A WHERE (SELECT COUNT(DISTINCT P.medium) FROM Paintings P WHERE P.painterID = A.artistID AND P.medium IN ('oil', 'lithographic')) = 2"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT Artists.birthYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.year = 1884 AND Paintings.mediumOn = 'canvas'",
          "SELECT birthYear FROM Artists a, Paintings p WHERE a.artistID = p.painterID AND p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT a.birthYear FROM Artists a, Paintings p WHERE a.artistID = p.painterID AND p.year = 1884 AND p.mediumOn LIKE 'canvas'",
          "SELECT DISTINCT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT TOP 1 a.birthYear FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas'",
          "SELECT a.birthYear FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas' ORDER BY a.birthYear",
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas')",
          "SELECT a.birthYear FROM Artists a WHERE EXISTS (SELECT 1 FROM Paintings p WHERE p.painterID = a.artistID AND p.year = 1884 AND p.mediumOn = 'canvas')"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.birthYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year = 1884",
          "SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)",
          "SELECT Artists.birthYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year = 1884",
          "SELECT birthYear FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.year = 1884",
          "SELECT A.birthYear FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.year = 1884",
          "SELECT DISTINCT birthYear FROM Artists JOIN Paintings ON artistID = painterID WHERE year = 1884",
          "SELECT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND year = 1884)",
          "SELECT birthYear FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID WHERE P.year = 1884",
          "SELECT TOP 1 A.birthYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year = 1884",
          "SELECT birthYear FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE year = 1884 LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT A.fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241')",
          "SELECT DISTINCT Artists.fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241'",
          "SELECT DISTINCT A.fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' AND P.location = 'gallery 241'",
          "SELECT DISTINCT first_name FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241')",
          "SELECT DISTINCT fname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND medium = 'oil' AND location = 'gallery 241')",
          "SELECT DISTINCT A.fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location LIKE 'gallery 241'",
          "SELECT DISTINCT fname FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = 'gallery 241'",
          "SELECT DISTINCT A.fname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil' AND P.location = 'gallery 241')",
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241')"
        ]
      ]
    },
    {
      "id": 1243,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = '241'",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = '241')",
          "SELECT DISTINCT Artists.fname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = '241'",
          "SELECT fname FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID AND Paintings.medium = 'oil' AND Paintings.location = '241'",
          "SELECT A.fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium LIKE 'oil' AND P.location = '241'",
          "SELECT fname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND medium = 'oil' AND location = '241')",
          "SELECT Artists.fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = '241' ORDER BY Artists.fname",
          "SELECT fname FROM Artists AS A INNER JOIN Paintings AS P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = '241'",
          "SELECT A.fname FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = '241'",
          "SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location = '241')"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, COUNT(*) AS num_works FROM Paintings GROUP BY medium UNION ALL SELECT medium, COUNT(*) AS num_works FROM Sculptures GROUP BY medium",
          "SELECT medium, COUNT(paintingID) AS num_paintings FROM Paintings GROUP BY medium UNION ALL SELECT medium, COUNT(sculptureID) AS num_sculptures FROM Sculptures GROUP BY medium",
          "SELECT 'Painting' AS type, medium, COUNT(*) AS count FROM Paintings GROUP BY medium UNION ALL SELECT 'Sculpture' AS type, medium, COUNT(*) AS count FROM Sculptures GROUP BY medium",
          "SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS combined GROUP BY medium",
          "SELECT medium, COUNT(*) FROM (SELECT medium, paintingID AS workID FROM Paintings UNION ALL SELECT medium, sculptureID AS workID FROM Sculptures) AS all_works GROUP BY medium",
          "SELECT medium, SUM(count) AS total FROM (SELECT medium, COUNT(*) AS count FROM Paintings GROUP BY medium UNION ALL SELECT medium, COUNT(*) AS count FROM Sculptures GROUP BY medium) AS totals GROUP BY medium",
          "SELECT medium, COUNT(*) AS total_number_of_works FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium",
          "SELECT medium_type, COUNT(*) AS number_of_works FROM (SELECT medium AS medium_type FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium_type",
          "SELECT medium, COUNT(*) AS count FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) FROM Sculptures GROUP BY medium ORDER BY medium",
          "SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium ORDER BY total_works DESC"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, COUNT(*) AS count FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS combined GROUP BY medium",
          "SELECT medium, COUNT(medium) AS total FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS all_works GROUP BY medium",
          "SELECT medium, COUNT(*) AS num_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT medium, COUNT(medium) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium",
          "SELECT A.medium, COUNT(A.medium) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) A GROUP BY A.medium",
          "SELECT combined.medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) combined GROUP BY combined.medium",
          "SELECT medium, COUNT(*) AS total_count FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) combined_table GROUP BY medium",
          "SELECT medium, COUNT(*) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS total_mediums GROUP BY medium",
          "SELECT medium, COUNT(medium) AS count_of_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS all_media GROUP BY medium",
          "SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS media GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS avg_height FROM Paintings GROUP BY medium",
          "SELECT Paintings.medium, AVG(Paintings.height_mm) AS AverageHeight FROM Paintings GROUP BY Paintings.medium",
          "SELECT p.medium, AVG(p.height_mm) AS AvgHeight FROM Paintings p GROUP BY p.medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium",
          "SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY medium",
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium ORDER BY AVG(height_mm) DESC",
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium HAVING AVG(height_mm) IS NOT NULL",
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings WHERE height_mm IS NOT NULL GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT medium, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS avg_height FROM Paintings GROUP BY medium",
          "SELECT Paintings.medium, AVG(Paintings.height_mm) AS AverageHeight FROM Paintings GROUP BY Paintings.medium",
          "SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS average_height_mm FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS avgHeight FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS averageHeight FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS Average_Height FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS AverageHeightMillimeters FROM Paintings GROUP BY medium",
          "SELECT medium, AVG(height_mm) AS AvgHeight FROM Paintings GROUP BY medium"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) AS total FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY location",
          "SELECT location, COUNT(paintingID) AS total FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY location",
          "SELECT location, COUNT(*) AS count_of_paintings FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY count_of_paintings DESC",
          "SELECT location, COUNT(paintingID) AS count_of_paintings FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY count_of_paintings DESC",
          "SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location HAVING COUNT(*) > 0",
          "SELECT location, COUNT(paintingID) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location HAVING COUNT(paintingID) > 0"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) AS count FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT COUNT(paintingID), location FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) AS total FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY location",
          "SELECT location, COUNT(paintingID) AS total_paintings FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY total_paintings DESC",
          "SELECT location, COUNT(*) AS count FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY count DESC",
          "SELECT location, COUNT(paintingID) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY location",
          "SELECT location, COUNT(*) AS PaintingsCount FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY PaintingsCount"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.year > 1910 AND Paintings.medium = 'oil'",
          "SELECT p.title FROM Paintings p WHERE p.year > 1910 AND p.medium = 'oil'",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium LIKE 'oil'",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY year",
          "SELECT DISTINCT title FROM Paintings WHERE year > 1910 AND medium = 'oil'",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title",
          "SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil' AND title IS NOT NULL",
          "SELECT title FROM Paintings WHERE (year > 1910) AND (medium = 'oil')"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910",
          "SELECT title FROM Paintings WHERE medium LIKE 'oil' AND year > 1910",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY year",
          "SELECT P.title FROM Paintings P WHERE P.medium = 'oil' AND P.year > 1910",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY title",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY title DESC",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY year DESC",
          "SELECT DISTINCT title FROM Paintings WHERE medium = 'oil' AND year > 1910",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title",
          "SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title HAVING COUNT(*) = 1"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Artists.artistID FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 240'",
          "SELECT DISTINCT A.artistID FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' AND P.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium LIKE 'oil' AND Paintings.location = 'gallery 240'",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'",
          "SELECT DISTINCT A.artistID FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240')",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND medium = 'oil' AND location = 'gallery 240')",
          "SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240' GROUP BY painterID",
          "SELECT DISTINCT artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location = 'gallery 240' GROUP BY A.artistID"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Artists.artistID FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 240'",
          "SELECT DISTINCT a.artistID FROM Artists a, Paintings p WHERE a.artistID = p.painterID AND p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240')",
          "SELECT DISTINCT artistID FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium LIKE 'oil' AND Paintings.location LIKE 'gallery 240'",
          "SELECT DISTINCT a.artistID FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID AND p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID AND medium = 'oil' AND location = 'gallery 240')",
          "SELECT DISTINCT a.artistID FROM Artists a LEFT JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID AND p.medium = 'oil' AND p.location = 'gallery 240'",
          "SELECT DISTINCT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240')"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT P.title FROM Paintings P WHERE P.height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium LIKE 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas') GROUP BY title",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)",
          "SELECT DISTINCT P.title FROM Paintings P WHERE P.height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(P.height_mm) FROM Paintings P WHERE P.medium = 'canvas')",
          "SELECT DISTINCT P.title FROM Paintings P, Paintings Q WHERE P.height_mm > Q.height_mm AND Q.medium = 'canvas'",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas' AND height_mm IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT P.title FROM Paintings P WHERE P.height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium LIKE 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas') GROUP BY title",
          "SELECT DISTINCT P.title FROM Paintings P WHERE P.height_mm > (SELECT MIN(P2.height_mm) FROM Paintings P2 WHERE P2.medium = 'canvas')",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas') AND medium != 'canvas'",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE medium = 'canvas')",
          "SELECT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE medium = 'canvas') AND medium != 'canvas' GROUP BY title",
          "SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ANY (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT P.paintingID FROM Paintings P WHERE EXISTS (SELECT 1 FROM Paintings Q WHERE Q.location = 'gallery 240' AND P.year < Q.year)",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings P1 WHERE P1.year < (SELECT MIN(P2.year) FROM Paintings P2 WHERE P2.location = 'gallery 240')",
          "SELECT DISTINCT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240') AND P.location != 'gallery 240'",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year IS NOT NULL)",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 0)",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 1800)"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < ANY (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT P.paintingID FROM Paintings P WHERE EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.location = 'gallery 240' AND P.year < P2.year)",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT paintingID FROM Paintings P1 WHERE P1.year < ALL (SELECT P2.year FROM Paintings P2 WHERE P2.location = 'gallery 240')",
          "SELECT DISTINCT P1.paintingID FROM Paintings P1, Paintings P2 WHERE P1.year < P2.year AND P2.location = 'gallery 240'",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240' ORDER BY year ASC LIMIT 1)",
          "SELECT DISTINCT paintingID FROM Paintings AS P WHERE P.year < ANY (SELECT year FROM Paintings WHERE location = 'gallery 240' AND year > P.year)",
          "SELECT DISTINCT paintingID FROM Paintings P1 WHERE NOT EXISTS (SELECT * FROM Paintings P2 WHERE P2.location = 'gallery 240' AND P2.year <= P1.year)",
          "SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MAX(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT DISTINCT P1.paintingID FROM Paintings P1 WHERE P1.year < (SELECT P2.year FROM Paintings P2 WHERE P2.location = 'gallery 240' LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT TOP 1 paintingID FROM Paintings ORDER BY year",
          "SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)",
          "SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT paintingID FROM Paintings ORDER BY year LIMIT 1",
          "SELECT paintingID FROM (SELECT paintingID, year FROM Paintings ORDER BY year ASC) AS oldest LIMIT 1",
          "SELECT paintingID FROM Paintings ORDER BY year ASC FETCH FIRST 1 ROW ONLY",
          "SELECT MIN(year), paintingID FROM Paintings GROUP BY paintingID ORDER BY MIN(year) ASC LIMIT 1",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)",
          "SELECT TOP 1 paintingID FROM Paintings ORDER BY year",
          "SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)",
          "SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(year) FROM Paintings)",
          "SELECT paintingID FROM Paintings ORDER BY year LIMIT 1",
          "SELECT paintingID FROM Paintings SORT BY year ASCENDING FETCH FIRST ROW ONLY",
          "SELECT MIN(year), paintingID FROM Paintings GROUP BY paintingID ORDER BY MIN(year) ASC LIMIT 1",
          "SELECT paintingID FROM (SELECT paintingID, year FROM Paintings ORDER BY year ASC) WHERE ROWNUM = 1",
          "SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) LIMIT 1"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT first_name, last_name FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT A.fname AS FirstName, A.lname AS LastName FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.title LIKE '%female%'",
          "SELECT DISTINCT fname, lname FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND title LIKE '%female%')",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE LOWER(S.title) LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE LOWER(title) LIKE '%female%')",
          "SELECT A.fname, A.lname FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists AS A WHERE EXISTS (SELECT * FROM Sculptures AS S WHERE S.sculptorID = A.artistID AND S.title LIKE '%female%')"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.title LIKE '%female%'",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')",
          "SELECT first_name, last_name FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT CONCAT(Artists.fname, ' ', Artists.lname) AS full_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'",
          "SELECT Artists.fname || ' ' || Artists.lname AS full_name FROM Artists, Sculptures WHERE Artists.artistID = Sculptures.sculptorID AND Sculptures.title LIKE '%female%'",
          "SELECT A.fname, A.lname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.title LIKE '%female%'",
          "SELECT DISTINCT fname, lname FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE title LIKE '%female%'",
          "SELECT fname AS first_name, lname AS last_name FROM Artists INNER JOIN Sculptures ON artistID = sculptorID WHERE title LIKE '%female%' ORDER BY lname",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND title LIKE '%female%')",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE LOWER(S.title) LIKE '%female%'"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY title",
          "SELECT title FROM Paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings WHERE title <> '' ORDER BY title ASC",
          "SELECT title FROM Paintings GROUP BY title HAVING COUNT(*) >= 1 ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY title COLLATE NOCASE ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title COLLATE NOCASE",
          "SELECT DISTINCT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC",
          "SELECT title FROM Paintings WHERE title IS NOT NULL AND title <> '' GROUP BY title ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY title",
          "SELECT DISTINCT title FROM Paintings ORDER BY title",
          "SELECT title FROM Paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC",
          "SELECT title FROM (SELECT DISTINCT title FROM Paintings) AS unique_titles ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY title COLLATE NOCASE ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY LOWER(title) ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASCENDING",
          "SELECT DISTINCT title FROM Paintings ORDER BY title ASC, title"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT title FROM Paintings ORDER BY width_mm ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY width_mm",
          "SELECT DISTINCT title FROM Paintings ORDER BY width_mm",
          "SELECT title FROM Paintings ORDER BY width_mm ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY width_mm DESC",
          "SELECT title FROM Paintings ORDER BY width_mm DESC",
          "SELECT DISTINCT title FROM Paintings ORDER BY width_mm ASC, title ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY width_mm DESC, title DESC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY width_mm ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY width_mm DESC"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings ORDER BY height_mm ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC",
          "SELECT title FROM Paintings GROUP BY title ORDER BY height_mm",
          "SELECT title FROM Paintings GROUP BY title HAVING MIN(height_mm) ORDER BY height_mm ASC",
          "SELECT title, MIN(height_mm) AS MinHeight FROM Paintings GROUP BY title ORDER BY MinHeight ASC",
          "SELECT DISTINCT title FROM Paintings ORDER BY height_mm",
          "SELECT title FROM Paintings ORDER BY height_mm",
          "SELECT title, height_mm FROM Paintings ORDER BY height_mm ASC",
          "SELECT DISTINCT title, height_mm FROM Paintings ORDER BY height_mm ASC",
          "SELECT title FROM Paintings WHERE height_mm IS NOT NULL ORDER BY height_mm ASC"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT P.title FROM Paintings AS P WHERE P.year > 1899 AND P.year < 1951 UNION SELECT S.title FROM Sculptures AS S WHERE S.year > 1899 AND S.year < 1951",
          "SELECT 'Painting' AS Type, title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT 'Sculpture', title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS ArtWorks WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950 ORDER BY title",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION DISTINCT SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT artwork_title AS title FROM (SELECT title AS artwork_title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Combined WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year > 1899 AND year < 1951 UNION SELECT title FROM Sculptures WHERE year > 1899 AND year < 1951",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950 ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950",
          "SELECT 'Painting' AS Type, title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT 'Sculpture', title FROM Sculptures WHERE year >= 1900 AND year <= 1950",
          "SELECT title FROM Paintings WHERE year > 1899 AND year < 1951 UNION SELECT title FROM Sculptures WHERE year > 1899 AND year < 1951",
          "SELECT P.title AS Painting, S.title AS Sculpture FROM Paintings P, Sculptures S WHERE P.year BETWEEN 1900 AND 1950 AND S.year BETWEEN 1900 AND 1950",
          "SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Artworks WHERE year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year IN (1900, 1901, ..., 1950) UNION SELECT title FROM Sculptures WHERE year IN (1900, 1901, ..., 1950)",
          "SELECT title FROM Paintings WHERE CAST(year AS INT) BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE CAST(year AS INT) BETWEEN 1900 AND 1950",
          "SELECT Art.title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Art WHERE Art.year BETWEEN 1900 AND 1950",
          "SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950 ORDER BY title",
          "SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950 ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT P.title AS PaintingTitle, S.title AS SculptureTitle FROM Paintings P JOIN Artists A ON P.painterID = A.artistID JOIN Sculptures S ON S.sculptorID = A.artistID WHERE A.artistID = 222",
          "SELECT painting.title AS Painting, sculpture.title AS Sculpture FROM Paintings painting, Sculptures sculpture, Artists artist WHERE painting.painterID = artist.artistID AND sculpture.sculptorID = artist.artistID AND artist.artistID = 222",
          "SELECT 'Painting' AS Type, title FROM Paintings WHERE painterID = 222 UNION ALL SELECT 'Sculpture' AS Type, title FROM Sculptures WHERE sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT P.title FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.artistID = 222 UNION SELECT S.title FROM Sculptures S, Artists A WHERE S.sculptorID = A.artistID AND A.artistID = 222",
          "SELECT CASE WHEN painterID = 222 THEN title END AS Painting, CASE WHEN sculptorID = 222 THEN title END AS Sculpture FROM Paintings, Sculptures WHERE painterID = 222 OR sculptorID = 222",
          "SELECT P.title AS PaintingTitle, S.title AS SculptureTitle FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE A.artistID = 222",
          "SELECT title FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE artistID = 222) UNION ALL SELECT title FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Artists WHERE artistID = 222)",
          "SELECT P.title, S.title FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID WHERE A.artistID = 222",
          "SELECT DISTINCT title FROM (SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222) AS Works"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222",
          "SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222",
          "SELECT 'Painting' AS Type, title FROM Paintings WHERE painterID = 222 UNION SELECT 'Sculpture' AS Type, title FROM Sculptures WHERE sculptorID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title",
          "SELECT title FROM (SELECT title, painterID AS artistID FROM Paintings UNION ALL SELECT title, sculptorID AS artistID FROM Sculptures) AS Works WHERE artistID = 222",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title ASC",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title DESC",
          "SELECT artwork_title FROM (SELECT title AS artwork_title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title AS artwork_title FROM Sculptures WHERE sculptorID = 222) AS combined_artworks",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY 1",
          "SELECT title FROM Paintings WHERE painterID = 222 UNION ALL SELECT title FROM Sculptures WHERE sculptorID = 222 ORDER BY title ASC"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year < 1900 GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT TOP 1 painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC",
          "SELECT painterID FROM (SELECT painterID, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY painterID) AS subquery ORDER BY num_paintings DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Paintings WHERE year < 1900 GROUP BY painterID) AS counts)",
          "SELECT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT painterID, COUNT(*) AS TotalPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY TotalPaintings DESC FETCH FIRST 1 ROWS ONLY",
          "WITH PaintingCounts AS (SELECT painterID, COUNT(*) AS Count FROM Paintings WHERE year < 1900 GROUP BY painterID) SELECT painterID FROM PaintingCounts ORDER BY Count DESC LIMIT 1",
          "SELECT painterID FROM Paintings GROUP BY painterID HAVING year < 1900 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year < 1900 GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT TOP 1 painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC",
          "SELECT painterID FROM (SELECT painterID, COUNT(*) AS cnt FROM Paintings WHERE year < 1900 GROUP BY painterID) AS subquery ORDER BY cnt DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Paintings WHERE year < 1900 GROUP BY painterID) tmp)",
          "SELECT painterID, COUNT(*) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY NumberOfPaintings DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(paintingID) DESC FETCH FIRST ROW ONLY",
          "WITH PaintingCounts AS (SELECT painterID, COUNT(*) AS Total FROM Paintings WHERE year < 1900 GROUP BY painterID) SELECT painterID FROM PaintingCounts ORDER BY Total DESC LIMIT 1",
          "SELECT painterID FROM Paintings GROUP BY painterID HAVING year < 1900 ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname FROM Artists A WHERE A.artistID = (SELECT S.sculptorID FROM Sculptures S GROUP BY S.sculptorID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)",
          "SELECT fname FROM Artists WHERE artistID = (SELECT TOP 1 sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC)",
          "SELECT A.fname FROM Artists A JOIN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1) B ON A.artistID = B.sculptorID",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Sculptures GROUP BY sculptorID) T))",
          "SELECT TOP 1 A.fname FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID, A.fname ORDER BY COUNT(S.sculptureID) DESC",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures DESC LIMIT 1) AS TempTable)",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0)",
          "SELECT A.fname FROM Artists A, (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1) B WHERE A.artistID = B.sculptorID"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname FROM Artists A WHERE A.artistID = (SELECT S.sculptorID FROM Sculptures S GROUP BY S.sculptorID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)",
          "SELECT TOP 1 A.fname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID, A.fname ORDER BY COUNT(S.sculptureID) DESC",
          "SELECT A.fname FROM Artists A INNER JOIN (SELECT sculptorID, COUNT(*) AS NumWorks FROM Sculptures GROUP BY sculptorID ORDER BY NumWorks DESC LIMIT 1) AS MostWorks ON A.artistID = MostWorks.sculptorID",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MAX(WorkCount) FROM (SELECT COUNT(*) AS WorkCount FROM Sculptures GROUP BY sculptorID) AS Counts))",
          "SELECT fname FROM (SELECT A.fname, COUNT(S.sculptureID) AS TotalWorks FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.fname ORDER BY TotalWorks DESC LIMIT 1) AS Result",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID, A.fname HAVING COUNT(S.sculptureID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Sculptures GROUP BY sculptorID) AS MaxCount)",
          "SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS NumSculptures FROM Sculptures GROUP BY sculptorID) AS SculptureCounts ORDER BY NumSculptures DESC LIMIT 1)",
          "SELECT A.fname FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID, A.fname ORDER BY COUNT(S.sculptureID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)",
          "SELECT title FROM Paintings WHERE width_mm < '600' OR height_mm > '800'",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800",
          "SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800);",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 ORDER BY title",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 ORDER BY title ASC",
          "SELECT DISTINCT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)",
          "SELECT Paintings.title FROM Paintings WHERE Paintings.width_mm < 600 OR Paintings.height_mm > 800",
          "SELECT P.title FROM Paintings P WHERE P.width_mm < 600 OR P.height_mm > 800",
          "SELECT title FROM Paintings WHERE width_mm < '600' OR height_mm > '800'",
          "SELECT DISTINCT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800",
          "SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 ORDER BY title",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 GROUP BY title",
          "SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 AND (width_mm IS NOT NULL AND height_mm IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION ALL SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 ORDER BY location",
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location HAVING COUNT(*) > 0",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 ORDER BY location DESC"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930 GROUP BY location",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION ALL SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 DISTINCT",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 ORDER BY location",
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location HAVING COUNT(*) > 0",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 ORDER BY location DESC"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;",
          "SELECT Paintings.paintingID FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000",
          "SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingID",
          "SELECT DISTINCT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 GROUP BY paintingID",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 LIMIT 100",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY height_mm ASC"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > 500 AND P.height_mm < 2000",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999;",
          "SELECT P.paintingID FROM Paintings AS P WHERE P.height_mm > 500 AND P.height_mm < 2000;",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingID",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999 ORDER BY paintingID",
          "SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingID ASC",
          "SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999 ORDER BY paintingID ASC"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE medium IN ('on panel', 'on canvas')",
          "SELECT location FROM Paintings WHERE medium = 'on panel' UNION SELECT location FROM Paintings WHERE medium = 'on canvas'",
          "SELECT P.location FROM Paintings P WHERE P.medium = 'on panel' OR P.medium = 'on canvas'",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.medium IN ('on panel', 'on canvas')",
          "SELECT location FROM Paintings WHERE medium LIKE 'on panel' OR medium LIKE 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE medium = 'on panel' UNION ALL SELECT DISTINCT location FROM Paintings WHERE medium = 'on canvas'",
          "SELECT location FROM Paintings WHERE medium IN ('on panel', 'on canvas') GROUP BY location",
          "SELECT location FROM Paintings WHERE medium = 'on panel' UNION DISTINCT SELECT location FROM Paintings WHERE medium = 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas' ORDER BY location"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE medium = 'on panels' OR medium = 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE medium IN ('on panels', 'on canvas')",
          "SELECT location FROM Paintings WHERE medium = 'on panels' UNION SELECT location FROM Paintings WHERE medium = 'on canvas'",
          "SELECT P.location FROM Paintings P WHERE P.medium = 'on panels' OR P.medium = 'on canvas'",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.medium IN ('on panels', 'on canvas')",
          "SELECT location FROM Paintings WHERE medium LIKE 'on panels' OR medium LIKE 'on canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE medium IN ('on panels', 'on canvas') GROUP BY location",
          "SELECT location FROM Paintings WHERE medium = 'on panels' UNION ALL SELECT location FROM Paintings WHERE medium = 'on canvas'",
          "SELECT location FROM Paintings WHERE medium IN ('on panels', 'on canvas') ORDER BY location",
          "SELECT DISTINCT location FROM Paintings WHERE medium = 'on panels' OR medium = 'on canvas' ORDER BY location"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930",
          "SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930",
          "SELECT location FROM Paintings WHERE year < 1885 UNION DISTINCT SELECT location FROM Paintings WHERE year > 1930",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION ALL SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location",
          "SELECT DISTINCT location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY location",
          "SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 ORDER BY location DESC"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930",
          "SELECT location FROM Paintings WHERE year < 1885 AND location IN (SELECT location FROM Paintings WHERE year > 1930)",
          "SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930",
          "SELECT P1.location FROM Paintings P1, Paintings P2 WHERE P1.location = P2.location AND P1.year < 1885 AND P2.year > 1930",
          "SELECT location FROM Paintings WHERE location IN (SELECT location FROM Paintings WHERE year < 1885) AND location IN (SELECT location FROM Paintings WHERE year > 1930)",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location HAVING COUNT(DISTINCT CASE WHEN year < 1885 THEN 'early' WHEN year > 1930 THEN 'late' END) = 2",
          "WITH Early AS (SELECT location FROM Paintings WHERE year < 1885), Late AS (SELECT location FROM Paintings WHERE year > 1930) SELECT location FROM Early INTERSECT SELECT location FROM Late",
          "SELECT location FROM Paintings WHERE year < 1885 AND EXISTS (SELECT 1 FROM Paintings P2 WHERE Paintings.location = P2.location AND P2.year > 1930)",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND location IN (SELECT location FROM Paintings WHERE year > 1930)",
          "SELECT location FROM (SELECT location FROM Paintings WHERE year < 1885 UNION ALL SELECT location FROM Paintings WHERE year > 1930) GROUP BY location HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(P.height_mm), AVG(P.width_mm) FROM Paintings P WHERE P.medium = 'oil' AND P.location = 'gallery 241'",
          "SELECT AVG(height_mm) average_height, AVG(width_mm) average_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) as AvgHeight, AVG(width_mm) as AvgWidth FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241'",
          "SELECT AVG(height_mm) AS HeightAverage, AVG(width_mm) AS WidthAverage FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) as Height, AVG(width_mm) as Width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) as AverageHeightMM, AVG(width_mm) as AverageWidthMM FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'",
          "SELECT AVG(height_mm) as HeightAvg, AVG(width_mm) as WidthAvg FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(P.height_mm) AS Average_Height, AVG(P.width_mm) AS Average_Width FROM Paintings P WHERE P.medium = 'oil' AND P.location = '241'",
          "SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS AverageWidth FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) average_height, AVG(width_mm) average_width FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) as 'Average Height', AVG(width_mm) as 'Average Width' FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) avg_height, AVG(width_mm) avg_width FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) as AvgHeight, AVG(width_mm) as AvgWidth FROM Paintings WHERE medium = 'oil' AND location = '241'",
          "SELECT AVG(height_mm) as AverageHeight, AVG(width_mm) as AverageWidth FROM Paintings WHERE medium = 'oil' AND location = '241'"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900",
          "SELECT paintingID, MAX(height_mm) AS max_height FROM Paintings WHERE year < 1900 GROUP BY paintingID",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC",
          "SELECT paintingID, height_mm AS MaximumHeight FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC FETCH FIRST ROW ONLY",
          "SELECT paintingID, MAX(height_mm) FROM Paintings WHERE year < 1900 GROUP BY paintingID ORDER BY MAX(height_mm) DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC, paintingID ASC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 HAVING height_mm = MAX(height_mm)",
          "SELECT paintingID, height_mm FROM (SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
          "SELECT paintingID, MAX(height_mm) AS height_mm FROM Paintings WHERE year < 1900",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)",
          "SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC FETCH FIRST ROW ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT paintingID, height_mm FROM (SELECT paintingID, height_mm, RANK() OVER (ORDER BY height_mm DESC) AS rank FROM Paintings WHERE year < 1900) WHERE rank = 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1 OFFSET 0",
          "SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC ROWS 1"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS maxHeight, MAX(width_mm) AS maxWidth FROM Paintings GROUP BY year",
          "SELECT Paintings.year, MAX(Paintings.height_mm) AS MaxHeight, MAX(Paintings.width_mm) AS MaxWidth FROM Paintings GROUP BY Paintings.year",
          "SELECT p.year, MAX(p.height_mm) AS 'Maximum Height', MAX(p.width_mm) AS 'Maximum Width' FROM Paintings p GROUP BY p.year",
          "SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year",
          "SELECT year AS Year, MAX(height_mm) AS 'Max Height', MAX(width_mm) AS 'Max Width' FROM Paintings GROUP BY Year",
          "SELECT Paintings.year AS Year, MAX(Paintings.height_mm) AS 'Max Height mm', MAX(Paintings.width_mm) AS 'Max Width mm' FROM Paintings GROUP BY Year",
          "SELECT year, MAX(height_mm) max_height_mm, MAX(width_mm) max_width_mm FROM Paintings GROUP BY year ORDER BY year",
          "SELECT YEAR(year) AS PaintingYear, MAX(height_mm) AS MaxHeight, MAX(width_mm) AS MaxWidth FROM Paintings GROUP BY YEAR(year)",
          "SELECT year, GREATEST(MAX(height_mm), MAX(width_mm)) AS MaxDimension FROM Paintings GROUP BY year"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS maxHeight, MAX(width_mm) AS maxWidth FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year",
          "SELECT Paintings.year, MAX(Paintings.height_mm) AS 'Max Height', MAX(Paintings.width_mm) AS 'Max Width' FROM Paintings GROUP BY Paintings.year",
          "SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year",
          "SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year",
          "SELECT year AS painting_year, MAX(height_mm) AS max_height_mm, MAX(width_mm) AS max_width_mm FROM Paintings GROUP BY painting_year",
          "SELECT year, GREATEST(MAX(height_mm), MAX(width_mm)) AS max_dimension FROM Paintings GROUP BY year",
          "SELECT year, MAX(height_mm) AS 'Max Height (mm)', MAX(width_mm) AS 'Max Width (mm)' FROM Paintings GROUP BY year ORDER BY year",
          "SELECT DISTINCT year, MAX(height_mm) OVER (PARTITION BY year) AS max_height, MAX(width_mm) OVER (PARTITION BY year) AS max_width FROM Paintings ORDER BY year"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.lname, A.fname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Paintings P JOIN Artists A ON P.painterID = A.artistID GROUP BY A.artistID, A.lname, A.fname ORDER BY A.lname, A.fname",
          "SELECT Artists.lname, Artists.fname, AVG(Paintings.height_mm) AS Average_Height, AVG(Paintings.width_mm) AS Average_Width FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID ORDER BY Artists.lname ASC, Artists.fname ASC",
          "SELECT lname, fname, AVG(height_mm) as AvgHeight, AVG(width_mm) as AvgWidth FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID ORDER BY lname, fname",
          "SELECT A.lname AS LastName, A.fname AS FirstName, AVG(P.height_mm) AS HeightAverage, AVG(P.width_mm) AS WidthAverage FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT lname, fname, average(height_mm) as HeightAvg, average(width_mm) as WidthAvg FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID ORDER BY lname ASC, fname ASC",
          "SELECT A.lname || ', ' || A.fname AS FullName, AVG(P.height_mm) AS AvgHeight, AVG(P.width_mm) AS AvgWidth FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT CONCAT(Artists.lname, ', ', Artists.fname) AS Name, AVG(Paintings.height_mm) AS AvgHeight, AVG(Paintings.width_mm) AS AvgWidth FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID ORDER BY Artists.lname, Artists.fname",
          "SELECT A.lname, A.fname, AVG(P.height_mm) AS AverageHeight, AVG(P.width_mm) AS AverageWidth FROM Artists A LEFT OUTER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT A.lname, A.fname, AVG(P.height_mm) AS Height_Avg, AVG(P.width_mm) AS Width_Avg FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT lname, fname, AVG(height_mm) AS Avg_Height, AVG(width_mm) AS Avg_Width FROM Artists INNER JOIN Paintings ON artistID = painterID GROUP BY artistID ORDER BY lname, fname"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Paintings P JOIN Artists A ON P.painterID = A.artistID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT Artists.fname, Artists.lname, AVG(Paintings.height_mm) AS Average_Height, AVG(Paintings.width_mm) AS Average_Width FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID ORDER BY Artists.lname ASC, Artists.fname ASC",
          "SELECT CONCAT(Artists.fname, ' ', Artists.lname) AS FullName, AVG(Paintings.height_mm) AS AvgHeight, AVG(Paintings.width_mm) AS AvgWidth FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID ORDER BY Artists.lname, Artists.fname",
          "SELECT A.fname || ' ' || A.lname AS full_name, AVG(P.height_mm) AS average_height, AVG(P.width_mm) AS average_width FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT first_name, last_name, average_height, average_width FROM (SELECT A.fname AS first_name, A.lname AS last_name, AVG(P.height_mm) AS average_height, AVG(P.width_mm) AS average_width FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID) AS subquery ORDER BY last_name, first_name",
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A RIGHT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A FULL OUTER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A CROSS JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname",
          "SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, COUNT(P.paintingID) AS NumberOfPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2",
          "SELECT Artists.fname, COUNT(*) FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(*) >= 2",
          "SELECT fname, COUNT(paintingID) AS PaintingsCount FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING PaintingsCount >= 2",
          "SELECT A.fname, COUNT(P.paintingID) FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(*) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT A.fname, COUNT(P.paintingID) FROM Artists A RIGHT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) > 1",
          "SELECT A.fname, COUNT(*) AS TotalPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING TotalPaintings >= 2",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, COUNT(P.paintingID) AS NumberOfPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2",
          "SELECT fname, COUNT(*) as TotalPaintings FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(*) > 1",
          "SELECT Artists.fname, COUNT(Paintings.paintingID) AS PaintingsCount FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(Paintings.paintingID) >= 2",
          "SELECT A.fname, COUNT(*) AS Works FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(*) >= 2",
          "SELECT fname, COUNT(paintingID) AS NumberOfWorks FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) > 1",
          "SELECT first_name AS fname, COUNT(painting_id) AS total_paintings FROM Artists JOIN Paintings ON artist_id = painter_id GROUP BY artist_id HAVING COUNT(painting_id) >= 2",
          "SELECT A.fname, COUNT(P.paintingID) AS TotalWorks FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) > 1",
          "SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2",
          "SELECT A.fname, COUNT(P.paintingID) AS PaintingsCount FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.fname HAVING COUNT(P.paintingID) > 1",
          "SELECT fname, COUNT(*) FROM Artists INNER JOIN Paintings ON artistID = painterID GROUP BY fname HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID GROUP BY P.painterID HAVING COUNT(*) <= 3)",
          "SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3 OR COUNT(P.paintingID) IS NULL",
          "SELECT A.deathYear FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)",
          "SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4)",
          "SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID) < 4",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) < 4)",
          "SELECT A.deathYear FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID GROUP BY P.painterID HAVING COUNT(P.paintingID) < 4)",
          "SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4",
          "SELECT A.deathYear FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(*) < 4)",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings P GROUP BY painterID HAVING COUNT(P.paintingID) < 4)",
          "SELECT A.deathYear FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.deathYear FROM Artists A WHERE A.artistID = (SELECT S.sculptorID FROM Sculptures S GROUP BY S.sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Sculptures GROUP BY sculptorID) AS Sub))",
          "SELECT A.deathYear FROM Artists A JOIN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID)) B ON A.artistID = B.sculptorID",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures ASC LIMIT 1) AS Temp)",
          "SELECT TOP 1 A.deathYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY A.artistID, A.deathYear ORDER BY COUNT(S.sculptureID) ASC",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(num_sculptures) FROM (SELECT COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID) AS SculptureCounts))",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.deathYear FROM Artists A WHERE EXISTS (SELECT 1 FROM Sculptures S WHERE A.artistID = S.sculptorID GROUP BY S.sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID))"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID ORDER BY COUNT(S.sculptureID) ASC LIMIT 1",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Sculptures GROUP BY sculptorID) AS counts))",
          "SELECT TOP 1 A.deathYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID GROUP BY S.sculptorID, A.deathYear ORDER BY COUNT(S.sculptureID)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures ASC) AS temp LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID))",
          "SELECT A.deathYear FROM Artists A WHERE A.artistID = (SELECT S.sculptorID FROM Sculptures S GROUP BY S.sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) ASC LIMIT 1)",
          "SELECT A.deathYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY S.sculptorID HAVING COUNT(S.sculptureID) = (SELECT MIN(COUNT(*)) FROM Sculptures GROUP BY sculptorID)"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1",
          "SELECT P.paintingID, P.height_mm FROM Paintings P WHERE P.location = 'gallery 240' ORDER BY P.width_mm DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC FETCH FIRST ROW ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC, paintingID ASC LIMIT 1",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0 ROWS FETCH FIRST 1 ROW ONLY"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, height_mm FROM Paintings WHERE width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = '240') AND location = '240'",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1",
          "SELECT P.paintingID, P.height_mm FROM Paintings P WHERE P.location = '240' AND P.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = '240')",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = '240')",
          "SELECT TOP 1 paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC",
          "SELECT paintingID, height_mm FROM Paintings WHERE width_mm = (SELECT MAX(P.width_mm) FROM Paintings P WHERE P.location = '240') AND location = '240'",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' AND width_mm >= ALL (SELECT width_mm FROM Paintings WHERE location = '240')",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC FETCH FIRST 1 ROW ONLY",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings P WHERE P.location = '240')",
          "SELECT paintingID, height_mm FROM Paintings WHERE location = '240' AND width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = '240')"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(P2.year) FROM Paintings P2 WHERE P2.location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(P.year) FROM Paintings P WHERE P.location = 'gallery 240')",
          "SELECT id FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year IS NOT NULL)",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 0)",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 1000)",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year IS NOT NULL AND year > 0)"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240')",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(P2.year) FROM Paintings P2 WHERE P2.location = '240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240' GROUP BY location)",
          "SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND P.location != '240'",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND location != '240'",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') ORDER BY year",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND location = '240'",
          "SELECT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = '240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND location IN ('240')",
          "SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND location NOT IN ('240')"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(P.height_mm) FROM Paintings P WHERE P.year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 AND height_mm < P.height_mm)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 GROUP BY year)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) AND year > 1900",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) AND P.year > 1900",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings P WHERE P.year > 1900)"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(P.height_mm) FROM Paintings P WHERE P.year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 AND P.year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) AND year > 1900",
          "SELECT paintingID FROM Paintings WHERE height_mm > ALL (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > ALL (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) ORDER BY height_mm DESC",
          "SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) ORDER BY P.height_mm DESC",
          "SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900) AND year > 1900 ORDER BY height_mm DESC"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS NumberOfPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY NumberOfPaintings DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(*) AS OilPaintings FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY OilPaintings DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT TOP 3 A.fname, A.lname, COUNT(P.paintingID) AS OilPaintCount FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY OilPaintCount DESC",
          "SELECT FIRST 3 A.fname, A.lname, COUNT(P.paintingID) AS TotalOilPaintings FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID ORDER BY TotalOilPaintings DESC",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS OilWorks FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium LIKE 'oil' GROUP BY A.artistID ORDER BY OilWorks DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS CountOfOilPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID ORDER BY CountOfOilPaintings DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(*) FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY COUNT(P.paintingID) DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS OilPaintingCount FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY OilPaintingCount DESC LIMIT 3",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS NumberOfOilPaintings FROM Artists A RIGHT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY NumberOfOilPaintings DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY COUNT(P.paintingID) DESC LIMIT 1",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 A.fname, A.lname, COUNT(*) AS OilPaintings FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY OilPaintings DESC",
          "SELECT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname HAVING COUNT(P.paintingID) = (SELECT MAX(PaintCount) FROM (SELECT COUNT(*) AS PaintCount FROM Paintings WHERE medium = 'oil' GROUP BY painterID) Temp)",
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY COUNT(P.paintingID) DESC FETCH FIRST ROW ONLY",
          "SELECT first_name, last_name FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(paintingID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS NumberOfOilPaintings FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY NumberOfOilPaintings DESC LIMIT 1",
          "WITH OilPainters AS (SELECT painterID, COUNT(*) AS CountOfPaintings FROM Paintings WHERE medium = 'oil' GROUP BY painterID) SELECT A.fname, A.lname FROM Artists A JOIN OilPainters OP ON A.artistID = OP.painterID ORDER BY OP.CountOfPaintings DESC LIMIT 1",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT 1 FROM Paintings P WHERE P.painterID = A.artistID AND P.medium = 'oil') GROUP BY A.artistID, A.fname, A.lname ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT A.fname, A.lname, COUNT(P.paintingID) AS OilCount FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname HAVING OilCount = (SELECT MAX(OilCount) FROM (SELECT COUNT(*) AS OilCount FROM Paintings WHERE medium = 'oil' GROUP BY painterID) Temp)"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium LIKE 'oil' ORDER BY year ASC",
          "SELECT P.paintingID, P.location, P.title FROM Paintings P WHERE P.medium = 'oil' ORDER BY P.year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year DESC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY Paintings.year ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY Paintings.year DESC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASCENDING",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year DESCENDING",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, paintingID",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, title"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium LIKE 'oil' ORDER BY year ASC",
          "SELECT P.paintingID, P.location, P.title FROM Paintings P WHERE P.medium = 'oil' ORDER BY P.year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASCENDING",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY Paintings.year",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, paintingID",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC, paintingID ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC, title ASC",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year, location",
          "SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC, location ASC"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title",
          "SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title, year",
          "SELECT Paintings.year AS Year, Paintings.location AS Location, Paintings.title AS Title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title ASC",
          "SELECT * FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title DESC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY LENGTH(title)",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title ASC",
          "SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000mm ORDER BY title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > '1000' ORDER BY title ASC",
          "SELECT Paintings.year AS Year, Paintings.location AS Location, Paintings.title AS Title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASCENDING",
          "SELECT * FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title",
          "SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT P.painterID FROM Paintings P) AND A.artistID NOT IN (SELECT S.sculptorID FROM Sculptures S)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID)",
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.sculptorID IS NULL",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND A.artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings EXCEPT SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) EXCEPT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT NULL FROM Paintings P WHERE P.painterID = A.artistID) AND NOT EXISTS (SELECT NULL FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.sculptorID IS NULL",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID)",
          "SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings) AND NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT DISTINCT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND A.artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings EXCEPT SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A WHERE EXISTS (SELECT * FROM Paintings P WHERE P.painterID = A.artistID) AND A.artistID NOT IN (SELECT sculptorID FROM Sculptures)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) EXCEPT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures)",
          "SELECT A.fname, A.lname FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID WHERE NOT EXISTS (SELECT 1 FROM Sculptures S WHERE S.sculptorID = A.artistID)",
          "SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures WHERE sculptorID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 AND location NOT IN (SELECT location FROM Paintings WHERE mediumOn = 'canvas')",
          "SELECT DISTINCT P.location FROM Paintings P WHERE P.year < 1885 AND NOT EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.location = P.location AND P2.mediumOn = 'canvas')",
          "SELECT P.location FROM Paintings P LEFT JOIN Paintings P2 ON P.location = P2.location AND P2.mediumOn = 'canvas' WHERE P.year < 1885 AND P2.paintingID IS NULL",
          "SELECT location FROM Paintings WHERE year < 1885 EXCEPT SELECT location FROM Paintings WHERE mediumOn = 'canvas'",
          "WITH CanvasLocations AS (SELECT location FROM Paintings WHERE mediumOn = 'canvas') SELECT location FROM Paintings WHERE year < 1885 AND location NOT IN (SELECT location FROM CanvasLocations)",
          "SELECT location FROM Paintings WHERE year < 1885 AND location NOT IN (SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'canvas')",
          "SELECT P.location FROM Paintings P WHERE P.year < 1885 AND P.location NOT IN (SELECT P2.location FROM Paintings P2 WHERE P2.mediumOn = 'canvas')",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND location NOT IN (SELECT location FROM Paintings WHERE mediumOn = 'canvas') GROUP BY location",
          "SELECT location FROM Paintings WHERE year < 1885 AND NOT EXISTS (SELECT location FROM Paintings WHERE mediumOn = 'canvas' AND Paintings.location = location)",
          "SELECT location FROM Paintings WHERE year < 1885 MINUS SELECT location FROM Paintings WHERE mediumOn = 'canvas'"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "art_1",
      "infer_predictions": [
        [
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'",
          "SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND NOT mediumOn = 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn <> 'canvas'",
          "SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn NOT LIKE 'canvas')",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas')",
          "SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn IS NOT 'canvas')",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas' GROUP BY location",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT LIKE '%canvas%'",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT ILIKE 'canvas'",
          "SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT EQUALS 'canvas'"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM race",
          "SELECT COUNT(Race_Name) FROM race",
          "SELECT COUNT(*) AS TotalRaces FROM race",
          "SELECT COUNT(Race_Name) AS NumberOfRaces FROM race",
          "SELECT COUNT(1) FROM race",
          "SELECT COUNT(DISTINCT Race_Name) FROM race",
          "SELECT COUNT(DISTINCT Race_Name) AS UniqueRaces FROM race",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Race_Name FROM race) AS UniqueRaces",
          "SELECT COUNT(Race_Name) FROM race WHERE Race_Name IS NOT NULL",
          "SELECT COUNT(*) FROM race WHERE Race_Name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM race",
          "SELECT COUNT(Race_Name) FROM race",
          "SELECT COUNT(1) FROM race",
          "SELECT COUNT(*) AS NumberOfRaces FROM race",
          "SELECT COUNT(DISTINCT Race_Name) FROM race",
          "SELECT COUNT(DISTINCT Road) FROM race",
          "SELECT COUNT(*) FROM (SELECT * FROM race) AS total_races",
          "SELECT COUNT(Race_Name) AS TotalRaces FROM race",
          "SELECT COUNT(*) FROM race WHERE Race_Name IS NOT NULL",
          "SELECT COUNT(*) FROM race GROUP BY Race_Name HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
          "SELECT r.Winning_driver, r.Winning_team FROM race r ORDER BY r.Winning_team ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team",
          "SELECT Winning_driver AS Driver, Winning_team AS Team FROM race ORDER BY Team ASC",
          "SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC",
          "SELECT Winning_driver, Winning_team FROM race SORT BY Winning_team ASCENDING",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASCENDING",
          "SELECT d.Driver_Name AS Winning_driver, r.Winning_team FROM race r JOIN driver d ON r.Winning_driver = d.Driver_ID ORDER BY r.Winning_team ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
          "SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC",
          "SELECT r.Winning_driver, r.Winning_team FROM race r ORDER BY r.Winning_team ASC",
          "SELECT Winning_driver AS Driver, Winning_team AS Team FROM race ORDER BY Winning_team",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team, Winning_driver",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC, Winning_driver ASC",
          "SELECT DISTINCT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC",
          "SELECT Winning_driver, Winning_team FROM race GROUP BY Winning_driver, Winning_team ORDER BY Winning_team ASC",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC LIMIT ALL",
          "SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC FETCH FIRST ALL ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous'",
          "SELECT DISTINCT Winning_driver FROM race WHERE NOT Pole_Position = 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT IN ('Junior Strous')",
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT LIKE 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position IS NOT 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE NOT (Pole_Position = 'Junior Strous')",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT EQUAL TO 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE 'Junior Strous' <> Pole_Position",
          "SELECT Winning_driver FROM race WHERE 'Junior Strous' NOT IN (Pole_Position)"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE NOT Pole_Position = 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT IN ('Junior Strous')",
          "SELECT r.Winning_driver FROM race r WHERE r.Pole_Position != 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position IS NOT 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' AND Winning_driver IS NOT NULL",
          "SELECT Winning_driver FROM race WHERE Pole_Position NOT LIKE 'Junior Strous'",
          "SELECT Winning_driver FROM race r WHERE r.Pole_Position NOT IN (SELECT Pole_Position FROM race WHERE Pole_Position = 'Junior Strous')",
          "SELECT DISTINCT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
          "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' ORDER BY Race_Name"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age",
          "SELECT Constructor FROM driver GROUP BY Constructor, Age ORDER BY Age",
          "SELECT Constructor, Age FROM driver ORDER BY Age ASC",
          "SELECT Constructor FROM driver SORT BY Age ASCENDING",
          "SELECT Constructor, Driver_Name FROM driver ORDER BY Age ASC",
          "SELECT Constructor FROM driver WHERE Age IS NOT NULL ORDER BY Age ASC",
          "SELECT Constructor, MIN(Age) AS MinAge FROM driver GROUP BY Constructor ORDER BY MinAge ASC",
          "SELECT Constructor FROM driver ORDER BY Age ASCENDING",
          "SELECT Constructor FROM driver ORDER BY Age ASC, Driver_Name ASC"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC",
          "SELECT Constructor FROM driver GROUP BY Constructor, Age ORDER BY Age",
          "SELECT DISTINCT Constructor FROM driver GROUP BY Constructor ORDER BY Age ASC",
          "SELECT Constructor FROM driver WHERE Constructor IS NOT NULL GROUP BY Constructor ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IS NOT NULL ORDER BY Age",
          "SELECT Constructor, MIN(Age) AS MinAge FROM driver GROUP BY Constructor ORDER BY MinAge ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age",
          "SELECT DISTINCT Constructor FROM driver WHERE Age IS NOT NULL ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver GROUP BY Constructor HAVING COUNT(*) >= 1 ORDER BY Age ASC",
          "SELECT DISTINCT Constructor FROM driver ORDER BY Age ASCENDING"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant",
          "SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant",
          "SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant IS NOT NULL",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant ASC",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant DESC",
          "SELECT DISTINCT d.Entrant FROM driver AS d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(*) > 0",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant <> ''"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant",
          "SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant",
          "SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant ASC",
          "SELECT DISTINCT d.Entrant FROM driver AS d WHERE d.Age >= 20",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant IS NOT NULL",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant DESC",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(*) > 0",
          "SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 ORDER BY Entrant ASC, Age DESC"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM driver",
          "SELECT MAX(driver.Age) AS MaxAge, MIN(driver.Age) AS MinAge FROM driver",
          "SELECT MAX(Age), MIN(Age) FROM driver",
          "SELECT (SELECT MAX(Age) FROM driver) AS MaximumAge, (SELECT MIN(Age) FROM driver) AS MinimumAge",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM driver",
          "SELECT MAX(Age) 'Max Age', MIN(Age) 'Min Age' FROM driver",
          "SELECT MAX(Age) AS 'Maximum Age', MIN(Age) AS 'Minimum Age' FROM driver",
          "SELECT MAX(driver.Age) AS 'Max Driver Age', MIN(driver.Age) AS 'Min Driver Age' FROM driver",
          "SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver",
          "SELECT MAX(Age) AS 'Oldest Driver', MIN(Age) AS 'Youngest Driver' FROM driver"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM driver",
          "SELECT MAX(driver.Age) AS MaximumAge, MIN(driver.Age) AS MinimumAge FROM driver",
          "SELECT (SELECT MAX(Age) FROM driver) AS MaximumAge, (SELECT MIN(Age) FROM driver) AS MinimumAge",
          "SELECT MAX(Age), MIN(Age) FROM driver",
          "SELECT MAX(Age) Maximum, MIN(Age) Minimum FROM driver",
          "SELECT MAX(Age) as 'Max Age', MIN(Age) as 'Min Age' FROM driver",
          "SELECT MAX(Age) 'Max Driver Age', MIN(Age) 'Min Driver Age' FROM driver",
          "SELECT MAX(Age) MaxDriverAge, MIN(Age) MinDriverAge FROM driver",
          "SELECT (SELECT MAX(Age) FROM driver) MaxAge, (SELECT MIN(Age) FROM driver) MinAge",
          "SELECT MAX(Age) AS 'Maximum Age', MIN(Age) AS 'Minimum Age' FROM driver"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(UNIQUE Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT Engine) AS EngineCount FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age NOT BETWEEN 20 AND 30",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE (Age > 30) OR (Age < 20)",
          "SELECT DISTINCT COUNT(Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver GROUP BY Engine HAVING Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age IN (SELECT Age FROM driver WHERE Age > 30 OR Age < 20)",
          "SELECT DISTINCT COUNT(Engine) FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Engine"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(UNIQUE Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT Engine) AS EngineCount FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT driver.Engine) FROM driver WHERE driver.Age > 30 OR driver.Age < 20",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Engine FROM driver WHERE Age > 30 OR Age < 20) AS unique_engines",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age NOT BETWEEN 20 AND 30",
          "SELECT DISTINCT COUNT(Engine) FROM driver WHERE Age > 30 OR Age < 20",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE (Age > 30 OR Age < 20)",
          "SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age IN (SELECT Age FROM driver WHERE Age > 30 OR Age < 20)",
          "SELECT DISTINCT COUNT(Engine) FROM driver GROUP BY Engine HAVING Age > 30 OR Age < 20"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
          "SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESCENDING",
          "SELECT d.Driver_Name FROM driver AS d ORDER BY d.Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC, Driver_ID ASC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC LIMIT ALL",
          "SELECT * FROM driver ORDER BY Driver_Name DESC",
          "SELECT Driver_Name AS Name FROM driver ORDER BY Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY LENGTH(Driver_Name) DESC, Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name COLLATE NOCASE DESC"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESCENDING",
          "SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC, Driver_ID ASC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC LIMIT ALL",
          "SELECT DISTINCT Driver_Name FROM driver ORDER BY Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC",
          "SELECT Driver_Name FROM driver ORDER BY LENGTH(Driver_Name) DESC, Driver_Name DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name COLLATE NOCASE DESC",
          "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC FETCH FIRST ALL ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT D.Driver_Name, R.Race_Name FROM driver D INNER JOIN race R ON D.Driver_ID = R.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name AS DriverName, r.Race_Name AS RaceName FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT driver.Driver_Name, race.Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver AS d JOIN race AS r ON d.Driver_ID = r.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT D.Driver_Name, R.Race_Name FROM driver D INNER JOIN race R ON D.Driver_ID = R.Driver_ID",
          "SELECT Driver_Name, Race_Name FROM driver, race WHERE driver.Driver_ID = race.Driver_ID",
          "SELECT d.Driver_Name, r.Race_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID",
          "SELECT name.Driver_Name, name.Race_Name FROM driver AS name JOIN race AS name ON name.Driver_ID = name.Driver_ID",
          "SELECT a.Driver_Name, b.Race_Name FROM driver a JOIN race b ON a.Driver_ID = b.Driver_ID",
          "SELECT driver.Driver_Name AS DriverName, race.Race_Name AS RaceName FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT DISTINCT driver.Driver_Name, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT driver.Driver_Name, race.Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID ORDER BY driver.Driver_Name",
          "SELECT CONCAT(driver.Driver_Name), CONCAT(race.Race_Name) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) AS Races_Participated FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(*) AS Race_Count FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) AS NumberOfRaces FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(race.Driver_ID) FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(*) FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(Driver_ID) AS Races FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY Driver_Name",
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) AS Total_Races FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(r.Driver_ID) AS RaceCount FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name ORDER BY RaceCount DESC",
          "SELECT d.Driver_Name, COUNT(r.Driver_ID) FROM driver d LEFT OUTER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name",
          "SELECT Driver_Name, COUNT(*) AS TotalRaces FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY Driver_Name HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT driver.Driver_Name, COUNT(*) AS Races_Participated FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT D.Driver_Name, COUNT(R.Driver_ID) AS Race_Count FROM driver D INNER JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID",
          "SELECT driver.Driver_Name, COUNT(race.Driver_ID) FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT D.Driver_Name, COUNT(*) FROM driver D, race R WHERE D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID",
          "SELECT driver.Driver_Name, COUNT(race.Race_Name) AS NumberOfRaces FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT D.Driver_Name, COUNT(R.Race_Name) FROM driver D LEFT JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID",
          "SELECT driver.Driver_Name, COUNT(race.Driver_ID) AS TotalRaces FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT D.Driver_Name, COUNT(R.Driver_ID) FROM driver D RIGHT JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID",
          "SELECT driver.Driver_Name, COUNT(*) FROM driver LEFT OUTER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID",
          "SELECT D.Driver_Name, COUNT(R.Driver_ID) FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID ORDER BY COUNT(R.Driver_ID) DESC"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(r.Driver_ID) DESC LIMIT 1)",
          "SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM race GROUP BY Driver_ID) AS subquery))",
          "SELECT d.Age FROM driver d JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) r ON d.Driver_ID = r.Driver_ID",
          "SELECT TOP 1 d.Age FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID, d.Age ORDER BY COUNT(r.Driver_ID) DESC",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT TOP 1 r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC)",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM (SELECT Driver_ID, COUNT(*) AS RacesCount FROM race GROUP BY Driver_ID) AS RaceCounts ORDER BY RacesCount DESC LIMIT 1)",
          "SELECT d.Age FROM driver d, (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) AS MostRaces WHERE d.Driver_ID = MostRaces.Driver_ID",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(Driver_ID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID GROUP BY r.Driver_ID HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM race GROUP BY Driver_ID))"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(r.Driver_ID) DESC LIMIT 1)",
          "SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM race GROUP BY Driver_ID) AS subquery))",
          "SELECT driver.Age FROM driver JOIN (SELECT Driver_ID, COUNT(*) AS Races_Count FROM race GROUP BY Driver_ID ORDER BY Races_Count DESC LIMIT 1) AS Most_Races ON driver.Driver_ID = Most_Races.Driver_ID",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT TOP 1 Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC)",
          "SELECT d.Age FROM driver d INNER JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) r ON d.Driver_ID = r.Driver_ID",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM (SELECT Driver_ID, COUNT(*) AS Race_Count FROM race GROUP BY Driver_ID ORDER BY Race_Count DESC LIMIT 1) AS Temp)",
          "SELECT d.Age FROM driver d, (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) as MostRaces WHERE d.Driver_ID = MostRaces.Driver_ID",
          "SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT D.Driver_Name, D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Driver_ID) >= 2",
          "SELECT driver.Driver_Name, driver.Age FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Driver_ID) >= 2",
          "SELECT name, age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D, race R WHERE D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Driver_ID) >= 2",
          "SELECT driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(*) >= 2",
          "SELECT D.Driver_Name, D.Age FROM driver D WHERE EXISTS (SELECT 1 FROM race R WHERE R.Driver_ID = D.Driver_ID GROUP BY R.Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D WHERE D.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D INNER JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2) R ON D.Driver_ID = R.Driver_ID",
          "SELECT D.Driver_Name, D.Age FROM driver AS D JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2) AS R ON D.Driver_ID = R.Driver_ID"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT D.Driver_Name, D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Driver_ID) >= 2",
          "SELECT driver.Driver_Name, driver.Age FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Driver_ID) >= 2",
          "SELECT name, age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D WHERE D.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT driver.Driver_Name, driver.Age FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Driver_ID) >= 2",
          "SELECT D.Driver_Name, D.Age FROM driver D, race R WHERE D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(R.Driver_ID) >= 2",
          "SELECT Driver_Name, Age FROM driver WHERE EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(*) >= 2)",
          "SELECT D.Driver_Name, D.Age FROM driver D JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2) R ON D.Driver_ID = R.Driver_ID",
          "SELECT D.Driver_Name, D.Age FROM driver D WHERE EXISTS (SELECT Driver_ID FROM race WHERE race.Driver_ID = D.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT r.Race_Name FROM race r, driver d WHERE r.Driver_ID = d.Driver_ID AND d.Age >= 26",
          "SELECT Race_Name FROM race INNER JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26",
          "SELECT DISTINCT Race_Name FROM race r INNER JOIN driver d ON r.Driver_ID = d.Driver_ID AND d.Age >= 26",
          "SELECT r.Race_Name FROM race AS r JOIN driver AS d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Race_Name",
          "SELECT DISTINCT r.Race_Name FROM race r, driver d WHERE r.Driver_ID = d.Driver_ID AND d.Age >= 26",
          "SELECT r.Race_Name FROM race r LEFT JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT r.Race_Name FROM race r RIGHT JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT r.Race_Name FROM race r INNER JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 GROUP BY r.Race_Name",
          "SELECT DISTINCT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Race_Name ASC"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT r.Race_Name FROM race r, driver d WHERE r.Driver_ID = d.Driver_ID AND d.Age >= 26 GROUP BY r.Race_Name",
          "SELECT Race_Name FROM race WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age >= 26)",
          "SELECT r.Race_Name FROM race AS r INNER JOIN driver AS d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT DISTINCT Race_Name FROM race INNER JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26",
          "SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID AND d.Age >= 26",
          "SELECT Race_Name FROM race r WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Driver_ID = r.Driver_ID AND d.Age >= 26)",
          "SELECT r.Race_Name FROM race r, driver d WHERE r.Driver_ID = d.Driver_ID AND d.Age >= 26",
          "SELECT DISTINCT r.Race_Name FROM race r LEFT JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26",
          "SELECT r.Race_Name FROM race r INNER JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Race_Name"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Constructor <> 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE NOT Constructor = 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT IN ('Bugatti')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor <> 'Bugatti'",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor != 'Bugatti'",
          "SELECT d.Driver_Name FROM driver d WHERE NOT d.Constructor = 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT LIKE 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor IS NOT 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT EQUALS 'Bugatti'"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Constructor <> 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE NOT Constructor = 'Bugatti'",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor != 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT IN ('Bugatti')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Constructor NOT LIKE 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor IS NOT 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE Constructor NOT EQUALS 'Bugatti'",
          "SELECT Driver_Name FROM driver WHERE 'Bugatti' <> Constructor",
          "SELECT Driver_Name FROM driver WHERE 'Bugatti' NOT IN (Constructor)",
          "SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(*) AS DriverCount FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(Driver_ID) AS TotalDrivers FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor",
          "SELECT d.Constructor, COUNT(*) FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor HAVING COUNT(Driver_ID) > 0",
          "SELECT d.Constructor, COUNT(d.Driver_ID) AS DriversCount FROM driver d GROUP BY d.Constructor",
          "SELECT Constructor, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Constructor ORDER BY Constructor"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(*) AS DriverCount FROM driver GROUP BY Constructor",
          "SELECT COUNT(Driver_ID), Constructor FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor",
          "SELECT COUNT(*), Constructor FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(Driver_ID) AS TotalDrivers FROM driver GROUP BY Constructor ORDER BY Constructor",
          "SELECT Constructor, COUNT(*) FROM driver GROUP BY Constructor ORDER BY COUNT(*) DESC",
          "SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor ORDER BY COUNT(Driver_ID) DESC",
          "SELECT Constructor, COUNT(*) AS CountOfDrivers FROM driver GROUP BY Constructor",
          "SELECT Constructor, COUNT(Driver_ID) AS DriversPerConstructor FROM driver GROUP BY Constructor"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine, COUNT(*) AS count FROM driver GROUP BY Engine ORDER BY count DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1",
          "SELECT TOP 1 Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC",
          "SELECT Engine FROM (SELECT Engine, COUNT(*) AS Frequency FROM driver GROUP BY Engine) AS subquery WHERE Frequency = (SELECT MAX(Frequency) FROM (SELECT COUNT(*) AS Frequency FROM driver GROUP BY Engine) AS subquery2)",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM driver GROUP BY Engine) AS counts)",
          "SELECT Engine, COUNT(Engine) AS EngineCount FROM driver GROUP BY Engine ORDER BY EngineCount DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) = (SELECT MAX(COUNT(Engine)) FROM driver GROUP BY Engine)",
          "SELECT Engine, MAX(count) FROM (SELECT Engine, COUNT(*) AS count FROM driver GROUP BY Engine) AS EngineCounts",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Engine, COUNT(*) AS Total FROM driver GROUP BY Engine ORDER BY Total DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine, COUNT(*) AS Frequency FROM driver GROUP BY Engine ORDER BY Frequency DESC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC",
          "SELECT Engine FROM (SELECT Engine, COUNT(*) as Count FROM driver GROUP BY Engine) AS EngineCounts ORDER BY Count DESC LIMIT 1",
          "SELECT Engine, MAX(Count) FROM (SELECT Engine, COUNT(*) AS Count FROM driver GROUP BY Engine) AS EngineFrequency",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM driver GROUP BY Engine) AS SubQuery)",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Engine, COUNT(*) AS Total FROM driver GROUP BY Engine ORDER BY Total DESC FETCH FIRST ROW ONLY",
          "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC, Engine ASC LIMIT 1",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM driver GROUP BY Engine)"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
          "SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1)",
          "SELECT Engine FROM (SELECT Engine, COUNT(DISTINCT Driver_ID) AS NumDrivers FROM driver GROUP BY Engine) AS subquery WHERE NumDrivers >= 2",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(DISTINCT d.Driver_ID) >= 2",
          "SELECT Engine, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Engine HAVING DriverCount > 1",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1",
          "SELECT d.Engine FROM (SELECT Engine, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Engine) d WHERE d.DriverCount >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2 ORDER BY Engine",
          "SELECT DISTINCT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2",
          "SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2",
          "SELECT Engine FROM (SELECT Engine, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Engine) AS subquery WHERE num_drivers >= 2",
          "SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2)",
          "WITH EngineCounts AS (SELECT Engine, COUNT(Driver_ID) AS Count FROM driver GROUP BY Engine) SELECT Engine FROM EngineCounts WHERE Count >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) >= 2",
          "SELECT DISTINCT d.Engine FROM driver d INNER JOIN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2) AS sub ON d.Engine = sub.Engine",
          "SELECT Engine, COUNT(*) AS DriverCount FROM driver GROUP BY Engine HAVING DriverCount >= 2",
          "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2 ORDER BY Engine",
          "SELECT Engine FROM driver d GROUP BY d.Engine HAVING COUNT(DISTINCT d.Driver_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)",
          "SELECT Driver_Name FROM driver WHERE NOT EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Driver_ID IS NOT NULL)",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT r.Driver_ID FROM race r)",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Driver_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver WHERE NOT EXISTS (SELECT 1 FROM race WHERE race.Driver_ID = driver.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT Driver_ID FROM race)",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID",
          "SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race)",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT r.Driver_ID FROM race r)",
          "SELECT Driver_Name FROM driver AS d WHERE NOT EXISTS (SELECT * FROM race AS r WHERE r.Driver_ID = d.Driver_ID)"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) INTERSECT SELECT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT DISTINCT d1.Constructor FROM driver d1 JOIN driver d2 ON d1.Constructor = d2.Constructor WHERE d1.Age < 20 AND d2.Age > 30",
          "SELECT d.Constructor FROM driver d WHERE d.Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) AND d.Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT DISTINCT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "WITH YoungDrivers AS (SELECT Constructor FROM driver WHERE Age < 20), OldDrivers AS (SELECT Constructor FROM driver WHERE Age > 30) SELECT Constructor FROM YoungDrivers WHERE Constructor IN (SELECT Constructor FROM OldDrivers)",
          "SELECT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30 GROUP BY Constructor)",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20 UNION SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT Constructor FROM (SELECT Constructor FROM driver WHERE Age < 20) AS YoungDrivers WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30 GROUP BY Constructor HAVING COUNT(*) > 1)",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver GROUP BY Constructor HAVING MIN(Age) < 20 AND MAX(Age) > 30)"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) INTERSECT SELECT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT DISTINCT d1.Constructor FROM driver d1 JOIN driver d2 ON d1.Constructor = d2.Constructor WHERE d1.Age < 20 AND d2.Age > 30",
          "SELECT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT d.Constructor FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age < 20) AND EXISTS (SELECT 1 FROM driver WHERE Constructor = d.Constructor AND Age > 30)",
          "WITH YoungDrivers AS (SELECT Constructor FROM driver WHERE Age < 20), OldDrivers AS (SELECT Constructor FROM driver WHERE Age > 30) SELECT Constructor FROM YoungDrivers WHERE Constructor IN (SELECT Constructor FROM OldDrivers)",
          "SELECT Constructor FROM driver WHERE Age < 20 UNION ALL SELECT Constructor FROM driver WHERE Age > 30 HAVING COUNT(*) > 1",
          "SELECT Constructor FROM (SELECT Constructor, COUNT(DISTINCT CASE WHEN Age < 20 THEN 'young' WHEN Age > 30 THEN 'old' END) AS AgeGroups FROM driver GROUP BY Constructor) sub WHERE AgeGroups = 2",
          "SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30)",
          "SELECT DISTINCT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT DISTINCT Constructor FROM driver WHERE Age > 30",
          "SELECT Constructor FROM driver GROUP BY Constructor HAVING SUM(CASE WHEN Age < 20 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Age > 30 THEN 1 ELSE 0 END) > 0"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1",
          "SELECT Winning_team, COUNT(*) AS Wins FROM race GROUP BY Winning_team HAVING Wins > 1",
          "SELECT team FROM (SELECT Winning_team AS team, COUNT(*) AS total_wins FROM race GROUP BY Winning_team) AS subquery WHERE total_wins > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
          "WITH WinningCounts AS (SELECT Winning_team, COUNT(*) AS WinCount FROM race GROUP BY Winning_team) SELECT Winning_team FROM WinningCounts WHERE WinCount > 1",
          "SELECT Winning_team FROM (SELECT Winning_team, COUNT(*) FROM race GROUP BY Winning_team) AS WinningData WHERE WinningData.count > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT team FROM (SELECT Winning_team AS team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1) AS Winners",
          "SELECT Winning_team FROM race WHERE Winning_team IN (SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team, COUNT(*) AS Wins FROM race GROUP BY Winning_team HAVING Wins > 1",
          "SELECT Winning_team FROM race WHERE Winning_team IS NOT NULL GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1",
          "SELECT Winning_team, COUNT(Winning_team) AS TotalWins FROM race GROUP BY Winning_team HAVING TotalWins > 1",
          "SELECT Winning_team FROM (SELECT Winning_team, COUNT(*) AS TotalWins FROM race GROUP BY Winning_team) AS subquery WHERE TotalWins > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team, COUNT(*) FROM race GROUP BY Winning_team HAVING COUNT(*) > 1",
          "SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1",
          "SELECT Winning_team, COUNT(Winning_team) FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) = 2",
          "SELECT d.Driver_Name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe') AND EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'Carl Skerlong')",
          "SELECT DISTINCT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'James Hinchcliffe' AND d.Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "WITH James AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'), Carl AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') SELECT d.Driver_Name FROM driver d JOIN James j ON d.Driver_ID = j.Driver_ID JOIN Carl c ON d.Driver_ID = c.Driver_ID",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' UNION ALL SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') GROUP BY Driver_Name HAVING COUNT(*) = 2",
          "SELECT Driver_Name FROM driver d WHERE (SELECT COUNT(*) FROM race WHERE Driver_ID = d.Driver_ID AND Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')) = 2",
          "SELECT d.Driver_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'James Hinchcliffe' OR r.Pole_Position = 'Carl Skerlong' GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) > 1",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') AND Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong')"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position = 'Carl Skerlong'",
          "SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'Carl Skerlong'",
          "SELECT d.Driver_Name FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) = 2",
          "SELECT DISTINCT d.Driver_Name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe') AND EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe') AND d.Driver_ID IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'Carl Skerlong')",
          "WITH James AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'), Carl AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') SELECT d.Driver_Name FROM driver d JOIN James j ON d.Driver_ID = j.Driver_ID JOIN Carl c ON d.Driver_ID = c.Driver_ID",
          "SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' UNION SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') HAVING COUNT(*) > 1",
          "SELECT Driver_Name FROM driver d WHERE EXISTS (SELECT * FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe') AND EXISTS (SELECT * FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'Carl Skerlong')",
          "SELECT d.Driver_Name FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID JOIN race r2 ON d.Driver_ID = r2.Driver_ID WHERE r1.Pole_Position = 'James Hinchcliffe' AND r2.Pole_Position = 'Carl Skerlong'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'James Hinchcliffe' WHERE r.Driver_ID IS NULL",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position LIKE 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT DISTINCT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position = 'James Hinchcliffe'",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' AND r.Driver_ID = d.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe') AND d.Driver_Name IS NOT NULL",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "car_road_race",
      "infer_predictions": [
        [
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position LIKE 'James Hinchcliffe')",
          "SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position <> 'James Hinchcliffe' OR r.Pole_Position IS NULL",
          "SELECT Driver_Name FROM driver EXCEPT SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position = 'James Hinchcliffe'",
          "SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Pole_Position = 'James Hinchcliffe' AND r.Driver_ID = d.Driver_ID)",
          "SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT DISTINCT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')",
          "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM languages",
          "SELECT COUNT(id) FROM languages",
          "SELECT COUNT(language.id) FROM languages AS language",
          "SELECT COUNT(DISTINCT name) FROM languages",
          "SELECT COUNT(DISTINCT id) FROM languages",
          "SELECT COUNT(languages.id) FROM languages",
          "SELECT COUNT(*) AS total_languages FROM languages",
          "SELECT COUNT(languages.name) FROM languages",
          "SELECT COUNT(DISTINCT languages.name) FROM languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM languages",
          "SELECT COUNT(id) FROM languages",
          "SELECT COUNT(language.id) FROM languages AS language",
          "SELECT COUNT(languages.id) FROM languages",
          "SELECT COUNT(DISTINCT id) FROM languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages",
          "SELECT COUNT(DISTINCT name) FROM languages",
          "SELECT COUNT(*) AS total_languages FROM languages",
          "SELECT COUNT(languages.name) FROM languages",
          "SELECT COUNT(language.name) FROM languages AS language"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages ORDER BY name ASC",
          "SELECT name FROM languages ORDER BY name",
          "SELECT languages.name FROM languages ORDER BY languages.name ASC",
          "SELECT l.name FROM languages l ORDER BY l.name ASC",
          "SELECT name AS LanguageName FROM languages ORDER BY LanguageName ASC",
          "SELECT name FROM languages SORT BY name ASCENDING",
          "SELECT name FROM languages ORDER BY name ASCENDING",
          "SELECT * FROM languages ORDER BY name ASC",
          "SELECT languages.name FROM languages ORDER BY name",
          "SELECT DISTINCT name FROM languages ORDER BY name ASC"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages ORDER BY name ASC",
          "SELECT name FROM languages ORDER BY name",
          "SELECT languages.name FROM languages ORDER BY languages.name ASC",
          "SELECT languages.name FROM languages ORDER BY languages.name",
          "SELECT name AS LanguageName FROM languages ORDER BY LanguageName",
          "SELECT name AS LanguageName FROM languages ORDER BY LanguageName ASC",
          "SELECT L.name FROM languages L ORDER BY L.name ASC",
          "SELECT L.name FROM languages L ORDER BY L.name",
          "SELECT DISTINCT name FROM languages ORDER BY name ASC",
          "SELECT DISTINCT name FROM languages ORDER BY name"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name ILIKE '%ish%'",
          "SELECT name FROM languages WHERE name LIKE '%%ish%%'",
          "SELECT name FROM languages WHERE name CONTAINS 'ish'",
          "SELECT name FROM languages WHERE INSTR(name, 'ish') > 0",
          "SELECT name FROM languages WHERE POSITION('ish' IN name) > 0",
          "SELECT name FROM languages WHERE CHARINDEX('ish', name) > 0",
          "SELECT name FROM languages WHERE name REGEXP '.*ish.*'",
          "SELECT name FROM languages WHERE name SIMILAR TO '%(ish)%'",
          "SELECT name FROM languages WHERE name LIKE '%ish' OR name LIKE 'ish%' OR name LIKE '%ish%'"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE name LIKE '%ish%'",
          "SELECT name FROM languages WHERE name ILIKE '%ish%'",
          "SELECT name FROM languages WHERE name LIKE '%%ish%%'",
          "SELECT name FROM languages WHERE name CONTAINS 'ish'",
          "SELECT name FROM languages WHERE INSTR(name, 'ish') > 0",
          "SELECT name FROM languages WHERE POSITION('ish' IN name) > 0",
          "SELECT name FROM languages WHERE CHARINDEX('ish', name) > 0",
          "SELECT name FROM languages WHERE name REGEXP '.*ish.*'",
          "SELECT name FROM languages WHERE name SIMILAR TO '%(ish)%'",
          "SELECT name FROM languages WHERE name LIKE '%ish' OR name LIKE 'ish%' OR name LIKE '%ish%'"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY overall_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.overall_score DESC",
          "SELECT name FROM countries SORT BY overall_score DESCENDING",
          "SELECT name AS CountryName FROM countries ORDER BY overall_score DESC",
          "SELECT c.name FROM countries c ORDER BY c.overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESCENDING",
          "SELECT countries.name FROM countries ORDER BY DESC overall_score",
          "SELECT name FROM countries ORDER BY overall_score DESC, name ASC",
          "SELECT name FROM countries ORDER BY overall_score DESC LIMIT ALL",
          "SELECT name, overall_score FROM countries ORDER BY overall_score DESC"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY overall_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESCENDING",
          "SELECT c.name FROM countries c ORDER BY c.overall_score DESC",
          "SELECT name FROM countries SORT BY overall_score DESC",
          "SELECT name FROM countries ORDER BY DESC overall_score",
          "SELECT countries.name AS CountryName FROM countries ORDER BY countries.overall_score DESC",
          "SELECT name AS CountryName FROM countries ORDER BY overall_score DESC",
          "SELECT name FROM countries ORDER BY overall_score DESC, name ASC",
          "SELECT name FROM countries ORDER BY overall_score DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(justice_score) FROM countries",
          "SELECT AVG(justice_score) AS AverageJusticeScore FROM countries",
          "SELECT AVG(countries.justice_score) FROM countries",
          "SELECT AVG(countries.justice_score) AS AverageJustice FROM countries",
          "SELECT AVG(justice_score) FROM countries AS avg_justice",
          "SELECT AVG(justice_score) AS avg_justice_score FROM countries",
          "SELECT AVG(justice_score) FROM countries GROUP BY id",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score IS NOT NULL",
          "SELECT AVG(justice_score) AS AverageJusticeScore FROM countries WHERE justice_score > 0",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score IS NOT NULL GROUP BY id"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(justice_score) FROM countries",
          "SELECT AVG(justice_score) AS AverageJusticeScore FROM countries",
          "SELECT AVG(countries.justice_score) FROM countries",
          "SELECT AVG(countries.justice_score) AS AverageJustice FROM countries",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score IS NOT NULL",
          "SELECT AVG(justice_score) AS AverageJustice FROM countries WHERE justice_score IS NOT NULL",
          "SELECT AVG(justice_score) FROM countries WHERE justice_score > 0",
          "SELECT AVG(justice_score) AS AvgJusticeScore FROM countries",
          "SELECT AVG(justice_score) FROM countries GROUP BY 'all'",
          "SELECT AVG(justice_score) AS AverageJusticeScore FROM countries WHERE justice_score > 0"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score) AS max_health, MIN(health_score) AS min_health FROM countries WHERE name <> 'Norway'",
          "SELECT MAX(c.health_score), MIN(c.health_score) FROM countries c WHERE c.name NOT IN ('Norway')",
          "SELECT MAX(health_score) maximum_health, MIN(health_score) minimum_health FROM countries WHERE NOT name = 'Norway'",
          "SELECT (SELECT MAX(health_score) FROM countries WHERE name != 'Norway') AS MaxHealth, (SELECT MIN(health_score) FROM countries WHERE name != 'Norway') AS MinHealth",
          "SELECT MAX(health_score) max_health_score, MIN(health_score) min_health_score FROM countries WHERE name NOT LIKE 'Norway'",
          "SELECT MAX(health_score) as MaximumHealthScore, MIN(health_score) as MinimumHealthScore FROM countries WHERE name NOT EQUALS 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name NOT IN (SELECT name FROM countries WHERE name = 'Norway')",
          "SELECT MAX(health_score) as MaxHealth, MIN(health_score) as MinHealth FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score) as HighestHealthScore, MIN(health_score) as LowestHealthScore FROM countries WHERE name NOT IN ('Norway')"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name != 'Norway'",
          "SELECT MAX(health_score), MIN(health_score) FROM countries WHERE NOT name = 'Norway'",
          "SELECT MAX(health_score) AS MaximumHealth, MIN(health_score) AS MinimumHealth FROM countries WHERE name <> 'Norway'",
          "SELECT MAX(c.health_score), MIN(c.health_score) FROM countries c WHERE c.name != 'Norway'",
          "SELECT (SELECT MAX(health_score) FROM countries WHERE name != 'Norway') AS MaxHealth, (SELECT MIN(health_score) FROM countries WHERE name != 'Norway') AS MinHealth",
          "SELECT MAX(health_score) AS HighestHealthScore, MIN(health_score) AS LowestHealthScore FROM countries WHERE name NOT IN ('Norway')",
          "SELECT MAX(health_score) AS MaxScore, MIN(health_score) AS MinScore FROM countries WHERE name NOT LIKE 'Norway'",
          "SELECT MAX(health_score) AS MaxHealth, MIN(health_score) AS MinHealth FROM countries WHERE name NOT EQUAL TO 'Norway'",
          "SELECT MAX(health_score) AS Maximum, MIN(health_score) AS Minimum FROM countries WHERE name IS NOT 'Norway'",
          "SELECT MAX(health_score) AS MaxHealth, MIN(health_score) AS MinHealth FROM countries WHERE name NOT IN (SELECT name FROM countries WHERE name = 'Norway')"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT language_id) FROM official_languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages JOIN official_languages ON languages.id = official_languages.language_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages) AS unique_languages",
          "SELECT COUNT(UNIQUE language_id) FROM official_languages",
          "SELECT COUNT(DISTINCT lang.id) FROM languages lang INNER JOIN official_languages ol ON lang.id = ol.language_id",
          "SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol",
          "SELECT COUNT(DISTINCT id) FROM (SELECT language_id AS id FROM official_languages) AS distinct_languages",
          "SELECT COUNT(language_id) FROM (SELECT DISTINCT language_id FROM official_languages) AS languages",
          "SELECT COUNT(DISTINCT L.id) FROM languages L, official_languages OL WHERE L.id = OL.language_id",
          "SELECT DISTINCT COUNT(language_id) FROM official_languages"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT language_id) FROM official_languages",
          "SELECT COUNT(DISTINCT languages.id) FROM languages JOIN official_languages ON languages.id = official_languages.language_id",
          "SELECT COUNT(UNIQUE official_languages.language_id) FROM official_languages",
          "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages) AS unique_languages",
          "SELECT COUNT(DISTINCT L.id) FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id",
          "SELECT COUNT(DISTINCT id) FROM (SELECT language_id AS id FROM official_languages) AS unique_langs",
          "SELECT COUNT(DISTINCT language_id) AS total_languages FROM official_languages",
          "SELECT COUNT(DISTINCT OL.language_id) FROM official_languages OL",
          "SELECT COUNT(*) FROM (SELECT language_id FROM official_languages GROUP BY language_id) AS distinct_languages",
          "SELECT DISTINCT COUNT(language_id) FROM official_languages GROUP BY language_id"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY education_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESCENDING",
          "SELECT c.name FROM countries c ORDER BY c.education_score DESC",
          "SELECT name FROM countries SORT BY education_score DESC",
          "SELECT name FROM countries WHERE education_score IS NOT NULL ORDER BY education_score DESC",
          "SELECT name AS CountryName FROM countries ORDER BY education_score DESC",
          "SELECT countries.name AS CountryName FROM countries ORDER BY countries.education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESC, name ASC",
          "SELECT name FROM countries ORDER BY education_score DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries ORDER BY education_score DESC",
          "SELECT countries.name FROM countries ORDER BY countries.education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESCENDING",
          "SELECT name AS CountryName FROM countries ORDER BY education_score DESC",
          "SELECT c.name FROM countries c ORDER BY c.education_score DESC",
          "SELECT name FROM countries SORT BY education_score DESC",
          "SELECT name FROM countries ORDER BY education_score DESC, name ASC",
          "SELECT name, education_score FROM countries ORDER BY education_score DESC",
          "SELECT countries.name FROM countries ORDER BY education_score DESC, countries.name",
          "SELECT name FROM countries ORDER BY education_score DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
          "SELECT TOP 1 name FROM countries ORDER BY politics_score DESC",
          "SELECT name FROM countries WHERE politics_score IN (SELECT MAX(politics_score) FROM countries)",
          "SELECT c.name FROM countries c WHERE c.politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT c.name FROM countries c ORDER BY c.politics_score DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name FROM countries WHERE politics_score >= ALL (SELECT politics_score FROM countries)",
          "SELECT name FROM countries AS c WHERE c.politics_score = (SELECT MAX(politics_score) FROM countries AS sub)",
          "SELECT name FROM (SELECT name, politics_score FROM countries ORDER BY politics_score DESC) WHERE ROWNUM = 1",
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
          "SELECT TOP 1 name FROM countries ORDER BY politics_score DESC",
          "SELECT name FROM countries WHERE politics_score IN (SELECT MAX(politics_score) FROM countries)",
          "SELECT c.name FROM countries c WHERE c.politics_score = (SELECT MAX(politics_score) FROM countries)",
          "SELECT c.name FROM countries c ORDER BY c.politics_score DESC FETCH FIRST 1 ROW ONLY",
          "SELECT name FROM countries WHERE politics_score >= ALL (SELECT politics_score FROM countries)",
          "SELECT name FROM countries AS c WHERE c.politics_score = (SELECT MAX(politics_score) FROM countries AS sub)",
          "SELECT name FROM (SELECT name, politics_score FROM countries ORDER BY politics_score DESC) WHERE ROWNUM = 1",
          "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id",
          "SELECT countries.name AS Country_Name, languages.name AS Language_Name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id",
          "SELECT country.name, language.name FROM countries AS country, languages AS language, official_languages AS ol WHERE country.id = ol.country_id AND language.id = ol.language_id",
          "SELECT `name` AS `Country`, (SELECT name FROM languages WHERE id = official_languages.language_id) AS `Official Language` FROM countries WHERE id IN (SELECT country_id FROM official_languages)",
          "SELECT DISTINCT country.name AS Country, lang.name AS Language FROM countries country LEFT JOIN official_languages ol ON country.id = ol.country_id LEFT JOIN languages lang ON ol.language_id = lang.id",
          "SELECT c.name, l.name FROM countries c, languages l, official_languages ol WHERE c.id = ol.country_id AND l.id = ol.language_id",
          "SELECT country_name, language_name FROM (SELECT countries.name AS country_name, languages.name AS language_name, official_languages.country_id, official_languages.language_id FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id) AS subquery",
          "SELECT c.name AS 'Country', l.name AS 'Language' FROM countries c CROSS JOIN languages l JOIN official_languages ol ON c.id = ol.country_id AND l.id = ol.language_id",
          "SELECT Country.name AS 'Country Name', Language.name AS 'Official Language' FROM countries Country JOIN official_languages OL ON Country.id = OL.country_id JOIN languages Language ON OL.language_id = Language.id ORDER BY Country.name",
          "SELECT c.name AS Country, l.name AS Language FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON l.id = ol.language_id ORDER BY c.name ASC, l.name ASC"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id",
          "SELECT country_name, language_name FROM (SELECT name AS country_name, id AS country_id FROM countries) AS c JOIN (SELECT name AS language_name, language_id, country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id) AS ol ON c.country_id = ol.country_id",
          "SELECT countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id",
          "SELECT a.name AS CountryName, b.name AS LanguageName FROM countries a, languages b, official_languages c WHERE a.id = c.country_id AND b.id = c.language_id",
          "SELECT 'Country' = countries.name, 'Language' = languages.name FROM countries, languages, official_languages WHERE countries.id = official_languages.country_id AND languages.id = official_languages.language_id",
          "SELECT DISTINCT countries.name AS Country, languages.name AS Language FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON languages.id = official_languages.language_id",
          "SELECT c.name, l.name FROM countries AS c JOIN official_languages AS ol ON c.id = ol.country_id JOIN languages AS l ON l.id = ol.language_id",
          "SELECT Country.name, Language.name FROM countries AS Country JOIN official_languages AS OfficialLang ON Country.id = OfficialLang.country_id JOIN languages AS Language ON OfficialLang.language_id = Language.id",
          "SELECT country.name, language.name FROM countries country JOIN official_languages ol ON country.id = ol.country_id JOIN languages language ON ol.language_id = language.id ORDER BY country.name, language.name",
          "SELECT c.name AS 'Country Name', l.name AS 'Language Name' FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id LEFT JOIN languages l ON ol.language_id = l.id"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name, COUNT(DISTINCT O.country_id) AS num_countries FROM languages L JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
          "SELECT languages.name, COUNT(DISTINCT official_languages.country_id) AS country_count FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name",
          "SELECT name, COUNT(DISTINCT country_id) AS count_of_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name",
          "SELECT L.name AS Language, COUNT(DISTINCT O.country_id) AS Countries_Speaking FROM languages L, official_languages O WHERE L.id = O.language_id GROUP BY L.name ORDER BY L.name",
          "SELECT languages.name, COUNT(*) AS number_of_countries FROM languages, official_languages WHERE languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(*) > 0",
          "SELECT L.name, COUNT(DISTINCT O.country_id) FROM languages L LEFT JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
          "SELECT DISTINCT L.name, (SELECT COUNT(*) FROM official_languages WHERE language_id = L.id) AS num_countries FROM languages L",
          "SELECT L.name AS Language_Name, COUNT(DISTINCT O.country_id) AS Total_Countries FROM languages L LEFT OUTER JOIN official_languages O ON L.id = O.language_id GROUP BY L.name ORDER BY Total_Countries DESC",
          "SELECT name, COUNT(country_id) AS countries_count FROM languages JOIN official_languages ON id = language_id GROUP BY name ORDER BY countries_count",
          "SELECT L.name, COUNT(DISTINCT country_id) AS count FROM languages L INNER JOIN official_languages O ON L.id = O.language_id GROUP BY L.name ORDER BY count DESC"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name, COUNT(DISTINCT O.country_id) AS num_countries FROM languages L JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
          "SELECT name, COUNT(DISTINCT country_id) AS num_countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name",
          "SELECT languages.name, COUNT(DISTINCT official_languages.country_id) AS num_countries FROM languages, official_languages WHERE languages.id = official_languages.language_id GROUP BY languages.name",
          "SELECT name AS Language, COUNT(DISTINCT country_id) AS Countries FROM languages JOIN official_languages ON id = language_id GROUP BY name ORDER BY name",
          "SELECT L.name AS Language_Name, COUNT(DISTINCT O.country_id) AS Country_Count FROM languages L INNER JOIN official_languages O ON L.id = O.language_id GROUP BY L.name ORDER BY L.name",
          "SELECT languages.name, COUNT(DISTINCT official_languages.country_id) FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY languages.name",
          "SELECT name, COUNT(DISTINCT country_id) FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name",
          "SELECT L.name AS Language, COUNT(DISTINCT O.country_id) AS Number_of_Countries FROM languages L LEFT JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
          "SELECT DISTINCT languages.name, COUNT(official_languages.country_id) OVER (PARTITION BY languages.name) AS num_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id",
          "SELECT name, COUNT(country_id) FROM (SELECT DISTINCT name, country_id FROM languages JOIN official_languages ON languages.id = official_languages.language_id) AS sub GROUP BY name"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY OL.language_id ORDER BY COUNT(OL.country_id) DESC LIMIT 1",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(OL.country_id) DESC",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(country_id) AS cnt FROM official_languages GROUP BY language_id) AS subquery))",
          "SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(OL.country_id) = (SELECT MAX(C) FROM (SELECT COUNT(country_id) AS C FROM official_languages GROUP BY language_id) AS sub)",
          "SELECT name FROM (SELECT L.name, COUNT(OL.country_id) AS num_countries FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY num_countries DESC LIMIT 1) AS result",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT L.name FROM languages L WHERE L.id = (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(OL.country_id) DESC LIMIT 1)",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 1)",
          "SELECT L.name FROM languages L INNER JOIN (SELECT language_id, COUNT(country_id) AS num_countries FROM official_languages GROUP BY language_id ORDER BY num_countries DESC LIMIT 1) AS T ON L.id = T.language_id"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT TOP 1 L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(OL.language_id) DESC",
          "SELECT name FROM (SELECT name, COUNT(OL.language_id) AS lang_count FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY name) AS subquery ORDER BY lang_count DESC LIMIT 1",
          "SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.name HAVING COUNT(OL.language_id) = (SELECT MAX(count) FROM (SELECT COUNT(language_id) AS count FROM official_languages GROUP BY language_id) AS counts)",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(OL.language_id) DESC FETCH FIRST ROW ONLY",
          "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = MAX(COUNT(language_id)))",
          "SELECT L.name FROM languages L WHERE L.id = (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT FIRST(name) FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name ORDER BY COUNT(official_languages.language_id) DESC"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id HAVING COUNT(DISTINCT OL.country_id) > 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1)",
          "SELECT DISTINCT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY OL.language_id HAVING COUNT(DISTINCT OL.country_id) > 1",
          "SELECT L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(DISTINCT OL.country_id) > 1",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) > 1)",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL WHERE L.id = OL.language_id GROUP BY OL.language_id HAVING COUNT(OL.country_id) > 1)",
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(*) > 1",
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) > 1)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages OL GROUP BY OL.language_id HAVING COUNT(DISTINCT OL.country_id) > 1)",
          "SELECT L.name FROM languages L INNER JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1) AS Sub ON L.id = Sub.language_id"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id HAVING COUNT(DISTINCT OL.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2)",
          "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id HAVING COUNT(DISTINCT official_languages.country_id) >= 2",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL WHERE OL.language_id = L.id GROUP BY OL.language_id HAVING COUNT(OL.country_id) >= 2)",
          "SELECT DISTINCT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY OL.language_id HAVING COUNT(OL.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) >= 2)",
          "SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.id HAVING COUNT(DISTINCT OL.country_id) >= 2",
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(OL.country_id) >= 2",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) >= 2)",
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id HAVING COUNT(DISTINCT OL.country_id) >= 2)"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English'))",
          "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) AS AverageScore FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English')",
          "SELECT AVG(c.overall_score) FROM countries c, official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id AND l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE official_languages.country_id = countries.id AND languages.name = 'English')",
          "SELECT AVG(countries.overall_score) FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' GROUP BY countries.id",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English')"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English'))",
          "SELECT AVG(overall_score) AS AverageScore FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
          "SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English')",
          "SELECT AVG(overall_score) FROM (SELECT c.overall_score FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English') AS EnglishSpeakingCountries",
          "SELECT AVG(overall_score) FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'",
          "SELECT AVG(c.overall_score) FROM countries c, official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id AND l.name = 'English'",
          "SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE official_languages.country_id = countries.id AND languages.name = 'English')",
          "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English' GROUP BY l.name"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 3)",
          "SELECT TOP 3 L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(OL.language_id) DESC",
          "SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id GROUP BY language.name ORDER BY COUNT(ol.language_id) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT L.name, COUNT(*) AS Frequency FROM languages L LEFT JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY Frequency DESC LIMIT 3",
          "SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.name HAVING COUNT(OL.language_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(OL2.language_id) AS Cnt FROM official_languages OL2 GROUP BY OL2.language_id) T) LIMIT 3",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT NULL FROM official_languages OL WHERE OL.language_id = L.id) GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 3",
          "WITH LanguageCounts AS (SELECT language_id, COUNT(*) AS Cnt FROM official_languages GROUP BY language_id) SELECT L.name FROM languages L JOIN LanguageCounts LC ON L.id = LC.language_id ORDER BY LC.Cnt DESC LIMIT 3",
          "SELECT L.name FROM languages L JOIN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3) AS MostCommon ON L.id = MostCommon.language_id",
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(DISTINCT OL.country_id) DESC LIMIT 3",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(DISTINCT country_id) DESC LIMIT 3)",
          "SELECT TOP 3 L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(DISTINCT OL.country_id) DESC",
          "SELECT language.name FROM languages language JOIN official_languages ON language.id = official_languages.language_id GROUP BY language.name ORDER BY COUNT(DISTINCT official_languages.country_id) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.name HAVING COUNT(DISTINCT OL.country_id) >= ALL (SELECT COUNT(DISTINCT country_id) FROM official_languages GROUP BY language_id) LIMIT 3",
          "SELECT L.name FROM languages L LEFT JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(DISTINCT OL.country_id) DESC LIMIT 3",
          "SELECT DISTINCT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(DISTINCT OL.country_id) DESC LIMIT 3",
          "SELECT L.name FROM (SELECT language_id, COUNT(DISTINCT country_id) AS country_count FROM official_languages GROUP BY language_id ORDER BY country_count DESC LIMIT 3) AS MostSpoken JOIN languages L ON MostSpoken.language_id = L.id",
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(DISTINCT country_id) DESC LIMIT 3)",
          "SELECT L.name FROM languages L JOIN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(DISTINCT country_id) DESC LIMIT 3) AS TopLanguages ON L.id = TopLanguages.language_id"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name, AVG(C.overall_score) AS avg_score FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C ON OL.country_id = C.id GROUP BY L.name ORDER BY avg_score DESC",
          "SELECT name, AVG(overall_score) AS average_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY name ORDER BY average_score DESC",
          "SELECT language_name, AVG(score) AS average_score FROM (SELECT languages.name AS language_name, countries.overall_score AS score FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id) AS subquery GROUP BY language_name ORDER BY average_score DESC",
          "SELECT lang.name, AVG(country.overall_score) AS average_score FROM languages lang, official_languages o_lang, countries country WHERE lang.id = o_lang.language_id AND o_lang.country_id = country.id GROUP BY lang.name ORDER BY average_score DESC",
          "SELECT languages.name AS Language, AVG(countries.overall_score) AS AverageScore FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AverageScore DESC",
          "SELECT lang.name FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY lang.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id) GROUP BY name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT language_name FROM (SELECT languages.name AS language_name, AVG(countries.overall_score) AS avg_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name) AS result ORDER BY avg_score DESC",
          "SELECT DISTINCT languages.name, average_score FROM languages JOIN (SELECT language_id, AVG(overall_score) AS average_score FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id) AS scores ON languages.id = scores.language_id ORDER BY average_score DESC",
          "SELECT L.name FROM languages L, official_languages OL, countries C WHERE L.id = OL.language_id AND OL.country_id = C.id GROUP BY L.name HAVING AVG(C.overall_score) ORDER BY AVG(C.overall_score) DESC"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C ON OL.country_id = C.id GROUP BY L.name ORDER BY AVG(C.overall_score) DESC",
          "SELECT language.name FROM languages language INNER JOIN official_languages ol ON language.id = ol.language_id INNER JOIN countries ON ol.country_id = countries.id GROUP BY language.name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id) GROUP BY name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT lang.name FROM languages lang, official_languages ol, countries c WHERE lang.id = ol.language_id AND ol.country_id = c.id GROUP BY lang.name ORDER BY AVG(c.overall_score) DESC",
          "SELECT DISTINCT languages.name, AVG(countries.overall_score) OVER (PARTITION BY languages.name) AS avg_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id ORDER BY avg_score DESC",
          "SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name HAVING AVG(countries.overall_score) ORDER BY AVG(countries.overall_score) DESC",
          "SELECT languages.name, AVG(countries.overall_score) AS average_score FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id LEFT JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY average_score DESC",
          "SELECT languages.name FROM languages INNER JOIN (SELECT language_id, AVG(overall_score) AS avg_score FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id) AS scores ON languages.id = scores.language_id ORDER BY scores.avg_score DESC",
          "SELECT languages.name FROM languages, official_languages, countries WHERE languages.id = official_languages.language_id AND official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
          "SELECT languages.name AS Language, AVG(countries.overall_score) AS AverageScore FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY Language ORDER BY AverageScore DESC"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT C.name FROM countries C JOIN (SELECT country_id, COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id ORDER BY lang_count DESC LIMIT 1) T ON C.id = T.country_id",
          "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(lang_count) FROM (SELECT country_id, COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS subquery))",
          "SELECT TOP 1 C.name FROM countries C INNER JOIN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC) AS T ON C.id = T.country_id",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.name FROM countries C WHERE C.id = (SELECT O.country_id FROM official_languages O GROUP BY O.country_id ORDER BY COUNT(O.language_id) DESC LIMIT 1)",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT C.name FROM countries C, (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1) AS MaxLang WHERE C.id = MaxLang.country_id",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM (SELECT country_id, COUNT(language_id) AS total FROM official_languages GROUP BY country_id) AS LangCount ORDER BY total DESC LIMIT 1)",
          "SELECT C.name FROM countries C WHERE EXISTS (SELECT 1 FROM official_languages O WHERE O.country_id = C.id GROUP BY O.country_id HAVING COUNT(O.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS subquery))"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
          "SELECT c.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
          "SELECT TOP 1 c.name FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.id ORDER BY COUNT(ol.language_id) DESC",
          "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY country_id) sub))",
          "SELECT c.name FROM countries c WHERE c.id = (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT name FROM (SELECT c.name, COUNT(ol.language_id) AS lang_count FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.name ORDER BY lang_count DESC LIMIT 1) AS result",
          "SELECT c.name FROM countries c, official_languages ol WHERE c.id = ol.country_id GROUP BY c.id, c.name ORDER BY COUNT(ol.language_id) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY)",
          "SELECT c.name FROM countries c JOIN (SELECT country_id, COUNT(language_id) AS num_languages FROM official_languages GROUP BY country_id) ol ON c.id = ol.country_id ORDER BY ol.num_languages DESC LIMIT 1",
          "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT L.name FROM languages L LEFT JOIN official_languages O ON L.id = O.language_id WHERE O.language_id IS NULL",
          "SELECT name FROM languages WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE language_id = languages.id)",
          "SELECT name FROM languages EXCEPT SELECT L.name FROM languages L INNER JOIN official_languages O ON L.id = O.language_id",
          "SELECT L.name FROM languages L WHERE L.id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT DISTINCT name FROM languages WHERE id NOT IN (SELECT DISTINCT language_id FROM official_languages)",
          "SELECT name FROM languages L WHERE NOT EXISTS (SELECT NULL FROM official_languages O WHERE O.language_id = L.id)",
          "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages GROUP BY language_id)",
          "SELECT languages.name FROM languages LEFT OUTER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL",
          "SELECT name FROM languages AS L WHERE L.id NOT IN (SELECT O.language_id FROM official_languages AS O)"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT L.name FROM languages L LEFT JOIN official_languages O ON L.id = O.language_id WHERE O.language_id IS NULL",
          "SELECT name FROM languages WHERE id NOT IN (SELECT DISTINCT language_id FROM official_languages)",
          "SELECT languages.name FROM languages WHERE languages.id NOT IN (SELECT official_languages.language_id FROM official_languages)",
          "SELECT name FROM languages EXCEPT SELECT L.name FROM languages L INNER JOIN official_languages O ON L.id = O.language_id",
          "SELECT L.name FROM languages L WHERE NOT EXISTS (SELECT 1 FROM official_languages O WHERE O.language_id = L.id)",
          "SELECT name FROM languages WHERE id NOT EXISTS (SELECT language_id FROM official_languages WHERE languages.id = official_languages.language_id)",
          "SELECT name FROM languages AS L WHERE NOT EXISTS (SELECT NULL FROM official_languages AS O WHERE O.language_id = L.id)",
          "SELECT L.name FROM languages L WHERE L.id NOT IN (SELECT language_id FROM official_languages)",
          "SELECT DISTINCT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT C.name FROM countries C LEFT JOIN official_languages O ON C.id = O.country_id WHERE O.country_id IS NULL",
          "SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE country_id = countries.id)",
          "SELECT countries.name FROM countries LEFT OUTER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.country_id IS NULL",
          "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
          "SELECT C.name FROM countries C WHERE C.id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT name FROM countries AS C WHERE NOT EXISTS (SELECT NULL FROM official_languages AS O WHERE O.country_id = C.id)",
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages GROUP BY country_id)",
          "SELECT C.name FROM countries C WHERE NOT EXISTS (SELECT * FROM official_languages O WHERE O.country_id = C.id)",
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages WHERE country_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
          "SELECT C.name FROM countries C LEFT JOIN official_languages O ON C.id = O.country_id WHERE O.country_id IS NULL",
          "SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE country_id = countries.id)",
          "SELECT countries.name FROM countries WHERE countries.id NOT IN (SELECT official_languages.country_id FROM official_languages)",
          "SELECT name FROM countries AS C WHERE C.id NOT IN (SELECT country_id FROM official_languages AS O)",
          "SELECT C.name FROM countries C WHERE C.id NOT IN (SELECT O.country_id FROM official_languages O)",
          "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
          "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages WHERE country_id IS NOT NULL)",
          "SELECT C.name FROM countries C WHERE NOT EXISTS (SELECT NULL FROM official_languages O WHERE O.country_id = C.id)",
          "SELECT name FROM countries EXCEPT SELECT C.name FROM countries C JOIN official_languages O ON C.id = O.country_id"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT DISTINCT L.name FROM languages AS L JOIN official_languages AS OL ON L.id = OL.language_id JOIN countries AS C1 ON OL.country_id = C1.id JOIN countries AS C2 ON OL.country_id = C2.id WHERE C1.overall_score > 95 AND C2.overall_score < 90",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score > 95) AND EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score < 90)",
          "WITH HighScore AS (SELECT language_id FROM official_languages JOIN countries ON country_id = id WHERE overall_score > 95), LowScore AS (SELECT language_id FROM official_languages JOIN countries ON country_id = id WHERE overall_score < 90) SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM HighScore INTERSECT SELECT language_id FROM LowScore)",
          "SELECT DISTINCT L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id INNER JOIN countries C ON OL.country_id = C.id WHERE C.overall_score > 95 AND L.id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = id WHERE overall_score < 90)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score > 95) AND id IN (SELECT language_id FROM official_languages, countries WHERE official_languages.country_id = countries.id AND countries.overall_score < 90)",
          "SELECT DISTINCT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id JOIN countries high ON ol.country_id = high.id AND high.overall_score > 95 JOIN countries low ON ol.country_id = low.id AND low.overall_score < 90",
          "SELECT DISTINCT L.name FROM languages L, official_languages OL, countries C1, countries C2 WHERE L.id = OL.language_id AND OL.country_id = C1.id AND C1.overall_score > 95 AND OL.country_id = C2.id AND C2.overall_score < 90",
          "SELECT name FROM languages WHERE id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id HAVING MAX(C.overall_score) > 95 AND MIN(C.overall_score) < 90)",
          "SELECT DISTINCT L.name FROM languages L WHERE EXISTS (SELECT * FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id GROUP BY OL.language_id HAVING MAX(C.overall_score) > 95 AND MIN(C.overall_score) < 90)"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "country_language",
      "infer_predictions": [
        [
          "SELECT L.name FROM languages L WHERE L.id IN (SELECT O.language_id FROM official_languages O JOIN countries C ON O.country_id = C.id WHERE C.overall_score > 95 INTERSECT SELECT O.language_id FROM official_languages O JOIN countries C ON O.country_id = C.id WHERE C.overall_score < 90)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT DISTINCT L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id INNER JOIN countries C1 ON OL.country_id = C1.id INNER JOIN countries C2 ON OL.country_id = C2.id WHERE C1.overall_score > 95 AND C2.overall_score < 90",
          "SELECT L.name FROM languages L, official_languages OL, countries C WHERE L.id = OL.language_id AND OL.country_id = C.id AND C.overall_score > 95 AND L.id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT name FROM languages WHERE id IN (SELECT OL.language_id FROM official_languages OL, countries C WHERE OL.country_id = C.id AND C.overall_score > 95) AND id IN (SELECT OL.language_id FROM official_languages OL, countries C WHERE OL.country_id = C.id AND C.overall_score < 90)",
          "WITH HighScore AS (SELECT language_id FROM official_languages JOIN countries ON country_id = id WHERE overall_score > 95), LowScore AS (SELECT language_id FROM official_languages JOIN countries ON country_id = id WHERE overall_score < 90) SELECT name FROM languages WHERE id IN (SELECT language_id FROM HighScore INTERSECT SELECT language_id FROM LowScore)",
          "SELECT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score > 95) AND EXISTS (SELECT 1 FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score < 90)",
          "SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = id GROUP BY language_id HAVING MAX(overall_score) > 95 AND MIN(overall_score) < 90)",
          "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95)) AND id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))",
          "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C ON OL.country_id = C.id GROUP BY L.id HAVING MAX(C.overall_score) > 95 AND MIN(C.overall_score) < 90"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT country, town_city FROM Addresses",
          "SELECT country, town_city FROM Addresses GROUP BY country, town_city",
          "SELECT DISTINCT Addresses.country, Addresses.town_city FROM Addresses",
          "SELECT DISTINCT A.country, A.town_city FROM Addresses A",
          "SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city",
          "SELECT country, town_city FROM Addresses WHERE country IS NOT NULL AND town_city IS NOT NULL GROUP BY country, town_city",
          "SELECT DISTINCT country, town_city FROM Addresses WHERE country IS NOT NULL AND town_city IS NOT NULL",
          "SELECT DISTINCT country AS Country, town_city AS City FROM Addresses",
          "SELECT DISTINCT A.country AS Country, A.town_city AS City FROM Addresses A",
          "SELECT country, town_city FROM Addresses WHERE country <> '' AND town_city <> '' GROUP BY country, town_city"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT country, town_city FROM Addresses",
          "SELECT DISTINCT country, town_city FROM Addresses",
          "SELECT Addresses.country, Addresses.town_city FROM Addresses",
          "SELECT a.country, a.town_city FROM Addresses a",
          "SELECT country AS Country, town_city AS City FROM Addresses",
          "SELECT DISTINCT a.country, a.town_city FROM Addresses a",
          "SELECT country, town_city FROM Addresses ORDER BY country, town_city",
          "SELECT country, town_city FROM Addresses GROUP BY country, town_city",
          "SELECT Addresses.country, Addresses.town_city FROM Addresses ORDER BY Addresses.country, Addresses.town_city",
          "SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT P.property_id, A.county_state_province FROM Properties P JOIN Addresses A ON P.property_address_id = A.address_id",
          "SELECT property_id, county_state_province FROM Properties INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT Properties.property_id AS PropertyID, Addresses.county_state_province AS State FROM Properties, Addresses WHERE Properties.property_address_id = Addresses.address_id",
          "SELECT p.property_id, a.county_state_province FROM Properties p, Addresses a WHERE p.property_address_id = a.address_id",
          "SELECT property_id, county_state_province FROM Properties JOIN Addresses USING(address_id)",
          "SELECT Properties.property_id, Addresses.county_state_province FROM Properties LEFT JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT DISTINCT Properties.property_id, Addresses.county_state_province FROM Properties INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT p.property_id, a.county_state_province FROM Properties AS p INNER JOIN Addresses AS a ON p.property_address_id = a.address_id",
          "SELECT Properties.property_id, Addresses.county_state_province FROM Properties RIGHT JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT property_id, county_state_province FROM Properties CROSS JOIN Addresses WHERE Properties.property_address_id = Addresses.address_id"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT P.property_id, A.county_state_province FROM Properties P JOIN Addresses A ON P.property_address_id = A.address_id",
          "SELECT property_id, county_state_province FROM Properties INNER JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT Properties.property_id AS PropertyID, Addresses.county_state_province AS StateOrProvince FROM Properties, Addresses WHERE Properties.property_address_id = Addresses.address_id",
          "SELECT property_id, county_state_province FROM Properties, Addresses WHERE Properties.property_address_id = Addresses.address_id",
          "SELECT P.property_id, A.county_state_province FROM Properties AS P INNER JOIN Addresses AS A ON P.property_address_id = A.address_id",
          "SELECT property_id, county_state_province FROM Properties LEFT JOIN Addresses ON Properties.property_address_id = Addresses.address_id",
          "SELECT DISTINCT P.property_id, A.county_state_province FROM Properties P, Addresses A WHERE P.property_address_id = A.address_id",
          "SELECT P.property_id, A.county_state_province FROM Properties P INNER JOIN Addresses A ON P.property_address_id = A.address_id ORDER BY P.property_id",
          "SELECT property_id, county_state_province FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Addresses.county_state_province IS NOT NULL",
          "SELECT P.property_id, A.county_state_province FROM Properties P LEFT OUTER JOIN Addresses A ON P.property_address_id = A.address_id"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'",
          "SELECT Features.feature_description FROM Features WHERE Features.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' LIMIT 1",
          "SELECT feature_description FROM Features WHERE LOWER(feature_name) = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' AND feature_description IS NOT NULL",
          "SELECT DISTINCT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 feature_description FROM Features WHERE feature_name = 'rooftop'"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT Features.feature_description FROM Features WHERE Features.feature_name = 'rooftop'",
          "SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' LIMIT 1",
          "SELECT DISTINCT feature_description FROM Features WHERE feature_name = 'rooftop'",
          "SELECT feature_description FROM Features WHERE LOWER(feature_name) = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name COLLATE NOCASE = 'rooftop'",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' AND feature_description IS NOT NULL",
          "SELECT feature_description FROM Features WHERE feature_name = 'rooftop' ORDER BY feature_id DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE F.feature_id = (SELECT PF.feature_id FROM Property_Features PF GROUP BY PF.feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC LIMIT 1)",
          "SELECT name, description FROM Features WHERE feature_id = (SELECT TOP 1 feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC)",
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON F.feature_id = MostCommon.feature_id",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = MAX(COUNT(*)))",
          "SELECT F.feature_name, F.feature_description FROM Features F INNER JOIN (SELECT feature_id, COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id ORDER BY cnt DESC LIMIT 1) PF ON F.feature_id = PF.feature_id",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE EXISTS (SELECT 1 FROM Property_Features PF WHERE PF.feature_id = F.feature_id GROUP BY PF.feature_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Property_Features GROUP BY feature_id))",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM (SELECT feature_id, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Property_Features GROUP BY feature_id) WHERE rank = 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE F.feature_id = (SELECT PF.feature_id FROM Property_Features PF GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT F.feature_name, F.feature_description FROM Features F JOIN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) AS PF ON F.feature_id = PF.feature_id",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id IN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE F.feature_id = (SELECT PF.feature_id FROM Property_Features PF GROUP BY PF.feature_id ORDER BY COUNT(PF.feature_id) DESC LIMIT 1)",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT TOP 1 feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC)",
          "SELECT F.feature_name, F.feature_description FROM Features F INNER JOIN (SELECT feature_id, COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id ORDER BY cnt DESC LIMIT 1) PF ON F.feature_id = PF.feature_id",
          "SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id) T))",
          "SELECT F.feature_name, F.feature_description FROM Features F, (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) PF WHERE F.feature_id = PF.feature_id",
          "SELECT feature_name, feature_description FROM Features WHERE EXISTS (SELECT 1 FROM Property_Features WHERE Features.feature_id = Property_Features.feature_id GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE F.feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT F.feature_name, F.feature_description FROM Features F WHERE F.feature_id = (SELECT feature_id FROM (SELECT feature_id, COUNT(*) AS frequency FROM Property_Features GROUP BY feature_id ORDER BY frequency DESC LIMIT 1) AS MostCommon)"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT MIN(room_count) FROM Rooms",
          "SELECT MIN(room_count) AS MinimumRoomCount FROM Rooms",
          "SELECT MIN(room_count) FROM Rooms WHERE room_count IS NOT NULL",
          "SELECT MIN(room_count) FROM Rooms GROUP BY property_id",
          "SELECT property_id, MIN(room_count) FROM Rooms GROUP BY property_id",
          "SELECT MIN(room_count) AS MinRooms FROM Rooms",
          "SELECT MIN(room_count) FROM Rooms WHERE room_count > 0",
          "SELECT MIN(room_count) FROM Rooms WHERE room_count >= 1",
          "SELECT MIN(room_count) FROM Rooms WHERE room_count > 0 GROUP BY property_id",
          "SELECT MIN(room_count) FROM Rooms WHERE room_count >= 1 GROUP BY property_id"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT MIN(room_count) FROM Properties",
          "SELECT MIN(room_count) AS LowestRoomCount FROM Properties",
          "SELECT MIN(Properties.room_count) FROM Properties",
          "SELECT * FROM (SELECT MIN(room_count) FROM Properties) AS LowestRoomCount",
          "SELECT room_count FROM Properties ORDER BY room_count ASC LIMIT 1",
          "SELECT room_count FROM Properties WHERE room_count = (SELECT MIN(room_count) FROM Properties)",
          "SELECT TOP 1 room_count FROM Properties ORDER BY room_count ASC",
          "SELECT room_count FROM Properties ORDER BY room_count LIMIT 1",
          "SELECT MIN(room_count) FROM Properties GROUP BY property_id",
          "SELECT MIN(room_count) AS MinimumRoomCount FROM Properties"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(property_id) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(DISTINCT property_id) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(*) AS NumberOfProperties FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE (parking_lots = 1) OR (garage_yn = 'Y')",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 UNION ALL SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 UNION SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR (garage_yn = 'Y' AND parking_lots <> 1)",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn LIKE 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y' GROUP BY garage_yn, parking_lots"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(property_id) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(*) AS NumberOfProperties FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(DISTINCT property_id) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE (parking_lots = 1) OR (garage_yn = 'Y')",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 UNION ALL SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 UNION SELECT COUNT(*) FROM Properties WHERE garage_yn = 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn LIKE 'Y'",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y' GROUP BY parking_lots, garage_yn",
          "SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y' HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.age_category_description FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE U.other_user_details LIKE '%Mother%'",
          "SELECT R.age_category_description FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND U.other_user_details LIKE '%Mother%' GROUP BY R.age_category_description",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT DISTINCT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details CONTAINS 'Mother')",
          "SELECT DISTINCT R.age_category_description FROM Users U INNER JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code AND U.other_user_details LIKE '%Mother%'",
          "SELECT DISTINCT R.age_category_description FROM Users U LEFT JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE U.other_user_details LIKE '%Mother%'",
          "SELECT DISTINCT R.age_category_description FROM Users U RIGHT JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE U.other_user_details LIKE '%Mother%'",
          "SELECT DISTINCT R.age_category_description FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND POSITION('Mother' IN U.other_user_details) > 0",
          "SELECT DISTINCT R.age_category_description FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE INSTR(U.other_user_details, 'Mother') > 0",
          "SELECT DISTINCT R.age_category_description FROM Users U CROSS JOIN Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND U.other_user_details LIKE '%Mother%'"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT RAC.age_category_description FROM Users U JOIN Ref_Age_Categories RAC ON U.age_category_code = RAC.age_category_code WHERE U.other_user_details LIKE '%Mother%'",
          "SELECT RAC.age_category_description FROM Users U INNER JOIN Ref_Age_Categories RAC ON U.age_category_code = RAC.age_category_code WHERE U.other_user_details LIKE '%Mother%' GROUP BY RAC.age_category_description",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT DISTINCT age_category_description FROM Ref_Age_Categories RAC, Users U WHERE RAC.age_category_code = U.age_category_code AND U.other_user_details LIKE '%Mother%'",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code WHERE CONTAINS(U.other_user_details, 'Mother')",
          "SELECT DISTINCT RAC.age_category_description FROM Ref_Age_Categories RAC INNER JOIN Users U ON RAC.age_category_code = U.age_category_code WHERE POSITION('Mother' IN U.other_user_details) > 0",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC WHERE EXISTS (SELECT 1 FROM Users U WHERE U.age_category_code = RAC.age_category_code AND U.other_user_details LIKE '%Mother%')",
          "SELECT DISTINCT RAC.age_category_description FROM Ref_Age_Categories RAC WHERE RAC.age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = ANY (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')",
          "SELECT DISTINCT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code WHERE U.other_user_details LIKE '%Mother%' ORDER BY RAC.age_category_description"
        ]
      ]
    },
    {
      "id": 1412,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) P ON U.user_id = P.owner_user_id",
          "SELECT U.first_name FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(property_count) FROM (SELECT owner_user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id) AS Temp))",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) = (SELECT MAX(count) FROM (SELECT COUNT(property_id) AS count FROM Properties GROUP BY owner_user_id) AS counts))",
          "SELECT U.first_name FROM Users U, (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOwner WHERE U.user_id = MaxOwner.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT TOP 1 owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC)",
          "SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Properties GROUP BY owner_user_id))",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT U.first_name FROM Users U INNER JOIN (SELECT owner_user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id ORDER BY property_count DESC LIMIT 1) P ON U.user_id = P.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0 ROWS)"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) P ON U.user_id = P.owner_user_id",
          "SELECT U.first_name FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(property_count) FROM (SELECT COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id) AS Temp))",
          "SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT TOP 1 owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC)",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U INNER JOIN (SELECT owner_user_id, COUNT(*) AS cnt FROM Properties GROUP BY owner_user_id ORDER BY cnt DESC LIMIT 1) P ON U.user_id = P.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT U.first_name FROM Users U, (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOwner WHERE U.user_id = MaxOwner.owner_user_id",
          "SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(P.room_count) FROM Properties P JOIN Property_Features PF ON P.property_id = PF.property_id JOIN Features F ON PF.feature_id = F.feature_id WHERE F.feature_name = 'garden'",
          "SELECT AVG(room_count) AS AverageRoomCount FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden'))",
          "SELECT AVG(Properties.room_count) FROM Properties INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden'",
          "SELECT AVG(room_count) FROM Properties WHERE EXISTS (SELECT 1 FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Property_Features.property_id = Properties.property_id AND Features.feature_name = 'garden')",
          "SELECT AVG(room_count) FROM Properties P, Property_Features PF, Features F WHERE P.property_id = PF.property_id AND PF.feature_id = F.feature_id AND F.feature_name = 'garden'",
          "WITH GardenProperties AS (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden') SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM GardenProperties)",
          "SELECT AVG(room_count) FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id AND Features.feature_name = 'garden'",
          "SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT Property_Features.property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden')",
          "SELECT AVG(Properties.room_count) AS AverageRoomCount FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden' GROUP BY Properties.property_id",
          "SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT * FROM Property_Features pf INNER JOIN Features f ON pf.feature_id = f.feature_id WHERE pf.property_id = p.property_id AND f.feature_name = 'garden')"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM (SELECT COUNT(*) AS room_count FROM Rooms WHERE property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE feature_name = 'garden') GROUP BY property_id) AS room_counts",
          "SELECT AVG(COUNT(*)) FROM Rooms JOIN Properties ON Rooms.property_id = Properties.property_id JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden' GROUP BY Properties.property_id",
          "SELECT AVG(room_total) FROM (SELECT property_id, COUNT(*) AS room_total FROM Rooms WHERE property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden') GROUP BY property_id) AS property_rooms",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id HAVING property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE feature_name = 'garden')) AS rooms_with_garden",
          "SELECT AVG(room_count) FROM (SELECT Rooms.property_id, COUNT(*) AS room_count FROM Rooms INNER JOIN Property_Features ON Rooms.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden' GROUP BY Rooms.property_id) AS garden_property_rooms",
          "SELECT AVG(total_rooms) FROM (SELECT COUNT(*) AS total_rooms FROM Rooms WHERE property_id IN (SELECT Properties.property_id FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden') GROUP BY property_id) AS room_totals",
          "SELECT AVG(room_count) FROM (SELECT COUNT(Rooms.room_number) AS room_count FROM Rooms JOIN Property_Features ON Rooms.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden' GROUP BY Rooms.property_id) AS room_counts",
          "SELECT AVG(number_of_rooms) FROM (SELECT property_id, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY property_id HAVING property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden')) AS rooms_info",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(*) AS room_count FROM Rooms WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden')) GROUP BY property_id) AS room_data",
          "SELECT AVG(room_count) FROM (SELECT Rooms.property_id, COUNT(*) AS room_count FROM Rooms INNER JOIN Property_Features ON Rooms.property_id = Property_Features.property_id WHERE Property_Features.feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'garden') GROUP BY Rooms.property_id) AS garden_rooms"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')))",
          "SELECT DISTINCT town_city FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool'",
          "SELECT DISTINCT a.town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE EXISTS (SELECT 1 FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Properties.property_address_id = Addresses.address_id AND Features.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE EXISTS (SELECT 1 FROM Property_Features pf JOIN Features f ON pf.feature_id = f.feature_id WHERE pf.property_id = p.property_id AND f.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a WHERE a.address_id IN (SELECT p.property_address_id FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool'))",
          "SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE LOWER(f.feature_name) = 'swimming pool'"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')))",
          "SELECT DISTINCT town_city FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool'",
          "SELECT DISTINCT a.town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'swimming pool'",
          "SELECT DISTINCT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE EXISTS (SELECT 1 FROM Property_Features pf JOIN Features f ON pf.feature_id = f.feature_id WHERE pf.property_id = p.property_id AND f.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a WHERE EXISTS (SELECT 1 FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE p.property_address_id = a.address_id AND f.feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id WHERE pf.feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')",
          "SELECT DISTINCT town_city FROM Addresses WHERE EXISTS (SELECT * FROM Properties INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Properties.property_address_id = Addresses.address_id AND Features.feature_name = 'swimming pool')",
          "SELECT DISTINCT a.town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name LIKE 'swimming pool'"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT property_id, MIN(vendor_requested_price) AS LowestPrice FROM Properties GROUP BY property_id ORDER BY LowestPrice ASC LIMIT 1",
          "SELECT TOP 1 property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT P.property_id, P.vendor_requested_price FROM Properties P WHERE P.vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IN (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT FIRST(property_id), FIRST(vendor_requested_price) FROM Properties ORDER BY vendor_requested_price",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC FETCH FIRST ROW ONLY",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC ROWS 1"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, MIN(vendor_requested_price) AS lowest_price FROM Properties",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1",
          "SELECT TOP 1 property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC",
          "SELECT property_id FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IN (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT P.property_id, P.vendor_requested_price FROM Properties P WHERE P.vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1",
          "SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)",
          "SELECT FIRST(property_id), FIRST(vendor_requested_price) FROM Properties ORDER BY vendor_requested_price",
          "SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM (SELECT COUNT(*) AS room_count FROM Rooms GROUP BY property_id) AS room_counts",
          "SELECT AVG(room_counts) FROM (SELECT property_id, COUNT(room_number) AS room_counts FROM Rooms GROUP BY property_id) subquery",
          "SELECT AVG(total_rooms) FROM (SELECT COUNT(room_number) AS total_rooms FROM Rooms GROUP BY property_id) AS room_totals",
          "SELECT AVG(room_totals.count) FROM (SELECT COUNT(*) AS count FROM Rooms GROUP BY property_id) room_totals",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(*) AS room_count FROM Rooms GROUP BY property_id) AS property_rooms",
          "SELECT AVG(count) FROM (SELECT COUNT(room_number) AS count FROM Rooms GROUP BY property_id) AS room_counts",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_summary",
          "SELECT AVG(room_number_count) FROM (SELECT COUNT(room_number) AS room_number_count FROM Rooms GROUP BY property_id) AS counts",
          "SELECT AVG(number_of_rooms) FROM (SELECT property_id, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY property_id) AS room_data",
          "SELECT AVG(room_quantity) FROM (SELECT COUNT(room_number) AS room_quantity FROM Rooms GROUP BY property_id) AS quantity_table"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT AVG(room_count) FROM Properties",
          "SELECT AVG(COUNT(room_number)) FROM Rooms GROUP BY property_id",
          "SELECT property_id, AVG(COUNT(room_number)) OVER () FROM Rooms GROUP BY property_id",
          "SELECT AVG(total_rooms) FROM (SELECT property_id, COUNT(room_number) AS total_rooms FROM Rooms GROUP BY property_id) AS room_counts",
          "SELECT AVG(room_counts) FROM (SELECT COUNT(room_number) AS room_counts FROM Rooms GROUP BY property_id) AS subquery",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(*) AS room_count FROM Rooms GROUP BY property_id) AS property_rooms",
          "SELECT AVG(room_count) FROM (SELECT COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_summary",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_totals",
          "SELECT AVG(number_of_rooms) FROM (SELECT COUNT(room_number) AS number_of_rooms FROM Rooms GROUP BY property_id) AS room_data",
          "SELECT AVG(room_count) FROM (SELECT property_id, COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_info"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT room_size) FROM Rooms",
          "SELECT COUNT(UNIQUE room_size) FROM Rooms",
          "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM Rooms) AS unique_sizes",
          "SELECT COUNT(DISTINCT room_size) AS total_unique_sizes FROM Rooms",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms",
          "SELECT COUNT(room_size) FROM (SELECT DISTINCT room_size FROM Rooms) temp",
          "SELECT COUNT(*) FROM (SELECT room_size FROM Rooms GROUP BY room_size) AS distinct_sizes",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size IS NOT NULL",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms WHERE room_size IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM Rooms WHERE room_size IS NOT NULL) AS sizes"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT room_size) AS unique_room_sizes FROM Rooms",
          "SELECT COUNT(DISTINCT Rooms.room_size) FROM Rooms",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms AS R",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms",
          "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM Rooms) AS unique_sizes",
          "SELECT COUNT(DISTINCT R.room_size) FROM Rooms R",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms GROUP BY room_size",
          "SELECT DISTINCT COUNT(room_size) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(DISTINCT room_size) FROM Rooms WHERE room_size IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, S.search_string FROM Users U JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) >= 2",
          "SELECT user_id, search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
          "SELECT U.user_id, S.search_string FROM Users U INNER JOIN User_Searches S ON U.user_id = S.user_id WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2)",
          "SELECT DISTINCT U.user_id, S.search_string FROM Users U, User_Searches S WHERE U.user_id = S.user_id AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
          "SELECT U.user_id, GROUP_CONCAT(S.search_string) AS searches FROM Users U JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) >= 2",
          "SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(*) >= 2",
          "SELECT U.user_id, S.search_string FROM Users U LEFT JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) >= 2",
          "SELECT U.user_id, S.search_string FROM Users U RIGHT JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) >= 2",
          "SELECT user_id, search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) ORDER BY user_id",
          "SELECT U.user_id, ARRAY_AGG(S.search_string) AS searches FROM Users U JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) >= 2"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, US.search_seq FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id, US.search_seq HAVING COUNT(US.search_seq) >= 2",
          "SELECT user_id, search_seq FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id GROUP BY user_id, search_seq HAVING COUNT(search_seq) >= 2",
          "SELECT Users.user_id, User_Searches.search_seq FROM Users, User_Searches WHERE Users.user_id = User_Searches.user_id GROUP BY Users.user_id, User_Searches.search_seq HAVING COUNT(User_Searches.search_seq) >= 2",
          "SELECT DISTINCT U.user_id, US.search_seq FROM Users U, User_Searches US WHERE U.user_id = US.user_id GROUP BY U.user_id, US.search_seq HAVING COUNT(*) >= 2",
          "SELECT U.user_id, US.search_seq FROM Users U LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id, US.search_seq HAVING COUNT(US.search_seq) >= 2",
          "SELECT user_id, search_seq FROM Users JOIN User_Searches USING(user_id) GROUP BY user_id, search_seq HAVING COUNT(search_seq) >= 2",
          "SELECT U.user_id, array_agg(US.search_seq) AS search_sequences FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(US.search_seq) >= 2",
          "SELECT U.user_id, US.search_seq FROM Users AS U INNER JOIN User_Searches AS US ON U.user_id = US.user_id GROUP BY U.user_id, US.search_seq HAVING COUNT(US.search_seq) >= 2",
          "SELECT U.user_id, US.search_seq FROM Users U CROSS JOIN User_Searches US ON U.user_id = US.user_id WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = U.user_id) >= 2 GROUP BY U.user_id, US.search_seq",
          "SELECT U.user_id, US.search_seq FROM Users U JOIN User_Searches US ON U.user_id = US.user_id WHERE EXISTS (SELECT 1 FROM User_Searches WHERE user_id = U.user_id HAVING COUNT(*) >= 2) GROUP BY U.user_id, US.search_seq"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT MAX(search_datetime) FROM User_Searches",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1",
          "SELECT TOP 1 search_datetime FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM User_Searches)",
          "SELECT search_datetime FROM (SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC) AS latest_search LIMIT 1",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC FETCH FIRST ROW ONLY",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime IN (SELECT MAX(search_datetime) FROM User_Searches)",
          "SELECT MAX(search_datetime) AS LatestSearchTime FROM User_Searches",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1 OFFSET 0",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC ROWS 1"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT MAX(search_datetime) FROM User_Searches",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1",
          "SELECT TOP 1 search_datetime FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM User_Searches)",
          "SELECT search_datetime FROM (SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC) AS recent_search LIMIT 1",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC FETCH FIRST ROW ONLY",
          "SELECT MAX(search_datetime) AS MostRecentSearch FROM User_Searches",
          "SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC ROWS 1",
          "SELECT FIRST(search_datetime) FROM User_Searches ORDER BY search_datetime DESC",
          "SELECT search_datetime FROM User_Searches WHERE search_datetime IN (SELECT MAX(search_datetime) FROM User_Searches)"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_datetime AS Time, search_string AS Content FROM User_Searches ORDER BY Content DESC",
          "SELECT U.search_datetime, U.search_string FROM User_Searches U ORDER BY U.search_string DESC",
          "SELECT * FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY 2 DESC",
          "SELECT search_datetime, search_string FROM User_Searches SORT BY search_string DESCENDING",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESCENDING",
          "SELECT `search_datetime`, `search_string` FROM `User_Searches` ORDER BY `search_string` DESC",
          "SELECT search_datetime AS SearchTime, search_string AS SearchContent FROM User_Searches ORDER BY SearchContent DESC",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC, search_datetime DESC"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESCENDING",
          "SELECT User_Searches.search_string, User_Searches.search_datetime FROM User_Searches ORDER BY User_Searches.search_string DESC",
          "SELECT search_string AS SearchString, search_datetime AS SearchTime FROM User_Searches ORDER BY SearchString DESC",
          "SELECT * FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches SORT BY search_string DESCENDING",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY 1 DESC",
          "SELECT U.search_string, U.search_datetime FROM User_Searches U ORDER BY U.search_string DESC",
          "SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC, search_datetime ASC"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT DISTINCT a.zip_postcode FROM Addresses a JOIN Properties p ON p.property_address_id = a.address_id WHERE p.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
          "SELECT DISTINCT Addresses.zip_postcode FROM Addresses INNER JOIN Properties ON Properties.property_address_id = Addresses.address_id WHERE Properties.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
          "SELECT DISTINCT a.zip_postcode FROM Addresses a WHERE EXISTS (SELECT 1 FROM Properties p WHERE p.property_address_id = a.address_id AND p.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)",
          "SELECT DISTINCT zip_postcode FROM Addresses a INNER JOIN Properties p ON a.address_id = p.property_address_id WHERE p.owner_user_id NOT IN (SELECT owner_user_id FROM (SELECT owner_user_id, COUNT(*) AS cnt FROM Properties GROUP BY owner_user_id) tmp WHERE cnt <= 2)",
          "SELECT DISTINCT a.zip_postcode FROM Addresses a, Properties p WHERE a.address_id = p.property_address_id AND p.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
          "SELECT DISTINCT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id LEFT JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2) q ON p.owner_user_id = q.owner_user_id WHERE q.owner_user_id IS NULL",
          "SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
          "SELECT DISTINCT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE NOT EXISTS (SELECT NULL FROM Properties pp WHERE pp.owner_user_id = p.owner_user_id GROUP BY pp.owner_user_id HAVING COUNT(pp.property_id) <= 2)"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))",
          "SELECT A.zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2)",
          "SELECT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_address_id = A.address_id AND P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties GROUP BY owner_user_id HAVING COUNT(owner_user_id) > 2)",
          "SELECT A.zip_postcode FROM Addresses A, Properties P WHERE A.address_id = P.property_address_id AND P.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) > 2)",
          "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties P WHERE NOT EXISTS (SELECT NULL FROM Properties WHERE owner_user_id = P.owner_user_id GROUP BY owner_user_id HAVING COUNT(*) <= 2))",
          "SELECT A.zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id GROUP BY P.owner_user_id HAVING COUNT(P.owner_user_id) > 2",
          "SELECT DISTINCT A.zip_postcode FROM Addresses A WHERE A.address_id IN (SELECT P.property_address_id FROM Properties P LEFT JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2) AS Sub ON P.owner_user_id = Sub.owner_user_id WHERE Sub.owner_user_id IS NULL)",
          "SELECT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT NULL FROM Properties P WHERE P.property_address_id = A.address_id GROUP BY P.owner_user_id HAVING COUNT(P.owner_user_id) > 2)"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, R.user_category_description FROM Users U JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT user_id, user_category_description FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT U.user_id, R.user_category_description FROM Users U, Ref_User_Categories R WHERE U.user_category_code = R.user_category_code AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT Users.user_id, Ref_User_Categories.user_category_description FROM Users INNER JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Users.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT DISTINCT U.user_id, R.user_category_description FROM Users U JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.search_seq) = 1",
          "SELECT U.user_id, R.user_category_description FROM Users U LEFT JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT U.user_id, R.user_category_description FROM Users U JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE EXISTS (SELECT 1 FROM User_Searches WHERE Users.user_id = User_Searches.user_id GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT U.user_id, R.user_category_description FROM Users U JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
          "SELECT U.user_id, R.user_category_description FROM Users U JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT user_id, user_category_description FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, U.user_category_code FROM Users U JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.user_id) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(user_id) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE EXISTS (SELECT 1 FROM User_Searches S WHERE S.user_id = U.user_id GROUP BY S.user_id HAVING COUNT(*) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) = 1",
          "SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)",
          "SELECT DISTINCT U.user_id, U.user_category_code FROM Users U INNER JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.user_id) = 1",
          "SELECT U.user_id, U.user_category_code FROM Users U, User_Searches S WHERE U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.user_id) = 1",
          "SELECT U.user_id, U.user_category_code FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(user_id) = 1)",
          "SELECT U.user_id, U.user_category_code FROM Users U LEFT JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(S.user_id) = 1",
          "SELECT U.user_id, U.user_category_code FROM Users U JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1) AS S ON U.user_id = S.user_id"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1))",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories AS RAC, Users AS U, User_Searches AS US WHERE RAC.age_category_code = U.age_category_code AND U.user_id = US.user_id ORDER BY US.search_datetime FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 RAC.age_category_description FROM Ref_Age_Categories RAC INNER JOIN Users U ON RAC.age_category_code = U.age_category_code INNER JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime",
          "SELECT (SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))) AS AgeCategoryDescription",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))",
          "WITH FirstSearch AS (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1) SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM FirstSearch))",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC WHERE EXISTS (SELECT 1 FROM Users U JOIN User_Searches US ON U.user_id = US.user_id WHERE U.age_category_code = RAC.age_category_code ORDER BY US.search_datetime ASC LIMIT 1)",
          "SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT U.age_category_code FROM Users U JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))",
          "SELECT R.age_category_description FROM Ref_Age_Categories R JOIN Users U ON R.age_category_code = U.age_category_code WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1)",
          "SELECT R.age_category_description FROM Ref_Age_Categories R, Users U WHERE R.age_category_code = U.age_category_code AND U.user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime FETCH FIRST ROW ONLY)",
          "SELECT description FROM Ref_Age_Categories WHERE age_category_code = (SELECT U.age_category_code FROM Users U JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT (SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = U.age_category_code) FROM Users U WHERE U.user_id = (SELECT TOP 1 user_id FROM User_Searches ORDER BY search_datetime)",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT MIN(user_id) FROM User_Searches GROUP BY user_id ORDER BY MIN(search_datetime)))",
          "SELECT TOP 1 R.age_category_description FROM Ref_Age_Categories R INNER JOIN Users U ON R.age_category_code = U.age_category_code INNER JOIN User_Searches S ON U.user_id = S.user_id ORDER BY S.search_datetime",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))",
          "SELECT R.age_category_description FROM Ref_Age_Categories R INNER JOIN Users U ON R.age_category_code = U.age_category_code WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT U.age_category_code FROM Users U WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.login_name FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'senior citizen' ORDER BY U.first_name",
          "SELECT login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'senior citizen' ORDER BY first_name ASC",
          "SELECT Users.login_name FROM Users, Ref_Age_Categories WHERE Users.age_category_code = Ref_Age_Categories.age_category_code AND Ref_Age_Categories.age_category_description = 'senior citizen' ORDER BY Users.first_name ASC",
          "SELECT login_name FROM Users u JOIN Ref_Age_Categories rac ON u.age_category_code = rac.age_category_code AND rac.age_category_description = 'senior citizen' ORDER BY u.first_name",
          "SELECT U.login_name FROM Users AS U INNER JOIN Ref_Age_Categories AS R ON U.age_category_code = R.age_category_code WHERE R.age_category_description LIKE 'senior citizen' ORDER BY U.first_name ASC",
          "SELECT login_name FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'senior citizen') ORDER BY first_name",
          "SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'senior citizen' ORDER BY U.first_name ASC",
          "SELECT DISTINCT U.login_name FROM Users U LEFT JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'senior citizen' ORDER BY U.first_name",
          "SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'senior citizen') ORDER BY U.first_name",
          "SELECT login_name FROM Users JOIN Ref_Age_Categories USING (age_category_code) WHERE age_category_description = 'senior citizen' ORDER BY first_name ASC"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.login_name FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizens' ORDER BY U.first_name",
          "SELECT login_name FROM Users WHERE age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizens') ORDER BY first_name",
          "SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description LIKE 'Senior Citizens' ORDER BY U.first_name ASC",
          "SELECT login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizens' ORDER BY first_name",
          "SELECT U.login_name FROM Users U INNER JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code AND R.age_category_description = 'Senior Citizens' ORDER BY U.first_name",
          "SELECT U.login_name FROM Users AS U JOIN Ref_Age_Categories AS R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizens' ORDER BY U.first_name ASC",
          "SELECT login_name FROM Users WHERE age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizens') ORDER BY first_name ASC",
          "SELECT U.login_name FROM Users U LEFT JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizens' ORDER BY U.first_name ASC",
          "SELECT login_name FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizens' ORDER BY Users.first_name",
          "SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'Senior Citizens') ORDER BY U.first_name"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 1",
          "SELECT COUNT(User_Searches.search_seq) AS TotalSearches FROM User_Searches INNER JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 'true'",
          "SELECT COUNT(*) AS NumberOfSearches FROM User_Searches, Users WHERE User_Searches.user_id = Users.user_id AND Users.is_buyer = true",
          "SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = 1)",
          "SELECT COUNT(search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'",
          "SELECT COUNT(*) FROM User_Searches AS US JOIN Users AS U ON US.user_id = U.user_id WHERE U.is_buyer = true",
          "SELECT COUNT(*) FROM User_Searches US INNER JOIN Users U ON US.user_id = U.user_id AND U.is_buyer = 1",
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = true)",
          "SELECT COUNT(*) FROM User_Searches US, Users U WHERE US.user_id = U.user_id AND U.is_buyer = 'true'",
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 1)"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 1",
          "SELECT COUNT(User_Searches.search_seq) FROM User_Searches INNER JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 'true'",
          "SELECT COUNT(*) AS NumberOfSearches FROM User_Searches, Users WHERE User_Searches.user_id = Users.user_id AND Users.is_buyer = 1",
          "SELECT COUNT(DISTINCT User_Searches.search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 'true'",
          "SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 1)",
          "SELECT COUNT(*) FROM User_Searches US JOIN Users U ON US.user_id = U.user_id WHERE U.is_buyer = 1",
          "SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = 1)",
          "SELECT COUNT(*) FROM User_Searches US, Users U WHERE US.user_id = U.user_id AND U.is_buyer = 'true'",
          "SELECT COUNT(*) FROM User_Searches INNER JOIN Users ON User_Searches.user_id = Users.user_id AND Users.is_buyer = 1",
          "SELECT COUNT(User_Searches.search_seq) FROM User_Searches, Users WHERE User_Searches.user_id = Users.user_id AND Users.is_buyer = 'true'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT Users.date_registered FROM Users WHERE Users.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' LIMIT 1",
          "SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' ORDER BY date_registered DESC LIMIT 1",
          "SELECT TOP 1 date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' FETCH FIRST 1 ROWS ONLY",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' AND date_registered IS NOT NULL",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione' ORDER BY date_registered ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT Users.date_registered FROM Users WHERE Users.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'",
          "SELECT date_registered FROM Users WHERE login_name = 'ratione'"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = 1",
          "SELECT first_name AS FirstName, middle_name AS MiddleName, last_name AS LastName, login_name AS LoginName FROM Users WHERE is_seller = 1",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = TRUE",
          "SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = 1",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1 ORDER BY last_name",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1 AND first_name IS NOT NULL",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1 AND login_name IS NOT NULL",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1 AND last_name <> ''"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = TRUE",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1",
          "SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = 'true'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'yes'",
          "SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = TRUE",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'TRUE'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Y'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'T'",
          "SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 'Yes'"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Users U JOIN Addresses A ON U.user_address_id = A.address_id WHERE U.age_category_code = 'SC'",
          "SELECT line_1_number_building AS Building, line_2_number_street AS Street, town_city AS City FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE age_category_code = 'SC')",
          "SELECT building, street, city FROM (SELECT line_1_number_building AS building, line_2_number_street AS street, town_city AS city, user_address_id FROM Addresses) A INNER JOIN (SELECT user_address_id FROM Users WHERE age_category_code = 'SC') U ON A.user_address_id = U.user_address_id",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Users.age_category_code = 'SC'",
          "SELECT A.line_1_number_building AS 'Building', A.line_2_number_street AS 'Street', A.town_city AS 'City' FROM Users U, Addresses A WHERE U.user_address_id = A.address_id AND U.age_category_code = 'SC'",
          "SELECT DISTINCT line_1_number_building, line_2_number_street, town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code = 'SC'",
          "SELECT building, street, city FROM Addresses JOIN (SELECT user_address_id FROM Users WHERE age_category_code = 'SC') AS SeniorUsers ON Addresses.address_id = SeniorUsers.user_address_id",
          "SELECT line_1_number_building AS Building, line_2_number_street AS Street, town_city AS City FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE age_category_code = 'SC'",
          "SELECT building, street, city FROM (SELECT address_id, line_1_number_building AS building, line_2_number_street AS street, town_city AS city FROM Addresses) Addr JOIN (SELECT user_address_id FROM Users WHERE age_category_code = 'SC') Usr ON Addr.address_id = Usr.user_address_id",
          "SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Users U LEFT JOIN Addresses A ON U.user_address_id = A.address_id WHERE U.age_category_code = 'SC'"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Addresses A JOIN Users U ON A.address_id = U.user_address_id JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior'",
          "SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior'",
          "SELECT building, street, city FROM (SELECT line_1_number_building AS building, line_2_number_street AS street, town_city AS city, Users.age_category_code FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id) AS AddressInfo JOIN Ref_Age_Categories ON AddressInfo.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior'",
          "SELECT address.line_1_number_building AS Building, address.line_2_number_street AS Street, address.town_city AS City FROM Addresses address, Users user, Ref_Age_Categories ageCat WHERE address.address_id = user.user_address_id AND user.age_category_code = ageCat.age_category_code AND ageCat.age_category_description = 'Senior'",
          "SELECT build, street, city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description LIKE 'Senior' SELECT build AS line_1_number_building, street AS line_2_number_street, city AS town_city",
          "SELECT DISTINCT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior'",
          "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id JOIN Ref_Age_Categories r ON u.age_category_code = r.age_category_code WHERE r.age_category_description = 'Senior'",
          "SELECT building, street, city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior' SELECT Addresses.line_1_number_building AS building, Addresses.line_2_number_street AS street, Addresses.town_city AS city",
          "SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses, Users, Ref_Age_Categories WHERE Addresses.address_id = Users.user_address_id AND Users.age_category_code = Ref_Age_Categories.age_category_code AND Ref_Age_Categories.age_category_description = 'Senior'",
          "SELECT building, street, city FROM (SELECT line_1_number_building AS building, line_2_number_street AS street, town_city AS city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior')) AS SeniorAddresses"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS subquery",
          "SELECT COUNT(property_id) FROM (SELECT property_id, COUNT(feature_id) AS feature_count FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS result",
          "SELECT COUNT(DISTINCT P.property_id) FROM Properties P JOIN Property_Features PF ON P.property_id = PF.property_id GROUP BY P.property_id HAVING COUNT(PF.feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2) AS properties_with_features",
          "SELECT COUNT(property_id) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2) AS feature_count",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id, COUNT(feature_id) AS num_features FROM Property_Features GROUP BY property_id HAVING num_features >= 2) AS feature_table",
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2)",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS count_properties"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS subquery",
          "SELECT COUNT(property_id) FROM (SELECT property_id, COUNT(feature_id) AS feature_count FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS filtered_properties",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2) AS result",
          "SELECT COUNT(*) FROM (SELECT PF.property_id FROM Property_Features PF GROUP BY PF.property_id HAVING COUNT(PF.feature_id) >= 2) AS count_result",
          "SELECT COUNT(property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id, COUNT(*) AS num_features FROM Property_Features GROUP BY property_id HAVING num_features >= 2) AS feature_count",
          "SELECT COUNT(*) FROM (SELECT COUNT(feature_id) AS feature_count, property_id FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS property_count",
          "SELECT COUNT(property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2",
          "SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(*) >= 2) AS valid_properties"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id",
          "SELECT p.property_id, COUNT(p.photo_seq) AS num_photos FROM Property_Photos p GROUP BY p.property_id",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) AS total_photos FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id",
          "SELECT p.property_id, COUNT(p.photo_seq) FROM Property_Photos p GROUP BY p.property_id",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT property_id, COUNT(photo_seq) FROM Property_Photos GROUP BY property_id ORDER BY property_id",
          "SELECT p.property_id, COUNT(*) FROM Property_Photos p GROUP BY p.property_id ORDER BY COUNT(*) DESC",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) AS photo_count FROM Properties LEFT JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT property_id, COUNT(photo_seq) AS number_of_photos FROM Property_Photos GROUP BY property_id HAVING COUNT(photo_seq) > 0"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) AS photo_count FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT p.property_id, COUNT(pp.photo_seq) AS num_photos FROM Properties p INNER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
          "SELECT property_id, COUNT(*) AS total_photos FROM Property_Photos GROUP BY property_id",
          "SELECT a.property_id, COUNT(b.photo_seq) AS photo_count FROM Properties a, Property_Photos b WHERE a.property_id = b.property_id GROUP BY a.property_id",
          "SELECT property_id, COUNT(photo_seq) FROM Property_Photos GROUP BY property_id",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) FROM Properties LEFT JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
          "SELECT property_id, COUNT(photo_seq) AS count_of_photos FROM Property_Photos GROUP BY property_id ORDER BY property_id",
          "SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) AS NumberOfPhotos FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id",
          "SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY photo_count DESC"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, COUNT(P.photo_seq) AS num_photos FROM Users U JOIN Properties PR ON U.user_id = PR.owner_user_id JOIN Property_Photos P ON PR.property_id = P.property_id GROUP BY U.user_id",
          "SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS photo_count FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id",
          "SELECT user_id, COUNT(photo_seq) AS total_photos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY user_id",
          "SELECT U.user_id AS UserID, COUNT(PH.photo_seq) AS NumberOfPhotos FROM Users U, Properties PR, Property_Photos PH WHERE U.user_id = PR.owner_user_id AND PR.property_id = PH.property_id GROUP BY U.user_id",
          "SELECT owner_user_id, COUNT(photo_seq) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT U.user_id, COUNT(*) AS photos_count FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN Property_Photos PP ON P.property_id = PP.property_id GROUP BY U.user_id",
          "SELECT owner_user_id AS UserID, COUNT(photo_seq) AS TotalPhotos FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT U.user_id, COUNT(PP.photo_seq) AS PhotoCount FROM Users U LEFT OUTER JOIN Properties PR ON U.user_id = PR.owner_user_id LEFT OUTER JOIN Property_Photos PP ON PR.property_id = PP.property_id GROUP BY U.user_id",
          "SELECT U.user_id, COUNT(DISTINCT PP.photo_seq) AS NumberOfPhotos FROM Users U JOIN Properties PR ON U.user_id = PR.owner_user_id JOIN Property_Photos PP ON PR.property_id = PP.property_id GROUP BY U.user_id",
          "SELECT U.user_id, COUNT(PP.photo_seq) AS TotalPhotos FROM Users U, Properties PR, Property_Photos PP WHERE U.user_id = PR.owner_user_id AND PR.property_id = PP.property_id GROUP BY U.user_id"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
          "SELECT owner_user_id, COUNT(photo_seq) AS num_photos FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS total_photos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id",
          "SELECT u.user_id, COUNT(pp.photo_seq) FROM Users u INNER JOIN Properties p ON u.user_id = p.owner_user_id INNER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id",
          "SELECT owner_user_id AS user_id, COUNT(*) AS photo_count FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT p.owner_user_id, COUNT(*) AS NumberOfPhotos FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
          "SELECT owner_user_id, COUNT(photo_seq) FROM Properties, Property_Photos WHERE Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id",
          "SELECT DISTINCT p.owner_user_id, (SELECT COUNT(*) FROM Property_Photos WHERE property_id = p.property_id) AS photo_count FROM Properties p WHERE EXISTS (SELECT 1 FROM Property_Photos pp WHERE pp.property_id = p.property_id) GROUP BY p.owner_user_id",
          "SELECT owner_user_id, COUNT(photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY owner_user_id ORDER BY owner_user_id",
          "SELECT p.owner_user_id, COUNT(pp.photo_seq) AS total_photos FROM Properties p LEFT OUTER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id HAVING COUNT(pp.photo_seq) > 0"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('single mother', 'student')",
          "SELECT SUM(P.price_max) AS TotalMaxPrice FROM Properties P INNER JOIN Users U ON P.owner_user_id = U.user_id WHERE U.user_category_code IN ('single mother', 'student')",
          "SELECT SUM(price_max) AS TotalMaximumPrice FROM Properties, Users WHERE Properties.owner_user_id = Users.user_id AND (Users.user_category_code = 'single mother' OR Users.user_category_code = 'student')",
          "SELECT SUM(price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code = 'single mother' OR Users.user_category_code = 'student'",
          "SELECT SUM(Properties.price_max) FROM Properties LEFT JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('single mother', 'student')",
          "SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code = 'single mother' OR u.user_category_code = 'student'",
          "SELECT SUM(price_max) FROM Properties p, Users u WHERE p.owner_user_id = u.user_id AND (u.user_category_code = 'single mother' OR u.user_category_code = 'student')",
          "SELECT SUM(price_max) AS TotalPrice FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('single mother', 'student') GROUP BY Users.user_category_code",
          "SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code = 'single mother' UNION SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code = 'student'",
          "SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN ('single mother', 'student')"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description IN ('single mother', 'student')))",
          "SELECT SUM(P.price_max) FROM Properties P JOIN Users U ON P.owner_user_id = U.user_id JOIN Ref_User_Categories R ON U.user_category_code = R.user_category_code WHERE R.user_category_description = 'single mother' OR R.user_category_description = 'student'",
          "SELECT SUM(price_max) AS TotalMaxPrice FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE user_category_description IN ('single mother', 'student'))",
          "SELECT SUM(Properties.price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id INNER JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description IN ('single mother', 'student')",
          "SELECT SUM(price_max) FROM Properties, Users, Ref_User_Categories WHERE Properties.owner_user_id = Users.user_id AND Users.user_category_code = Ref_User_Categories.user_category_code AND (Ref_User_Categories.user_category_description = 'single mother' OR Ref_User_Categories.user_category_description = 'student')",
          "SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description IN ('single mother', 'student')",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT Users.user_id FROM Users, Ref_User_Categories WHERE Users.user_category_code = Ref_User_Categories.user_category_code AND Ref_User_Categories.user_category_description IN ('single mother', 'student'))",
          "SELECT SUM(price_max) FROM Properties p WHERE EXISTS (SELECT 1 FROM Users u JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE u.user_id = p.owner_user_id AND r.user_category_description IN ('single mother', 'student'))",
          "SELECT SUM(p.price_max) FROM Properties p, Users u, Ref_User_Categories r WHERE p.owner_user_id = u.user_id AND u.user_category_code = r.user_category_code AND (r.user_category_description = 'single mother' OR r.user_category_description = 'student')",
          "SELECT SUM(price_max) FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Users WHERE user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'single mother' OR user_category_description = 'student'))"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT UPH.datestamp, P.property_name FROM User_Property_History UPH JOIN Properties P ON UPH.property_id = P.property_id ORDER BY UPH.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp ASC",
          "SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp",
          "SELECT a.datestamp, b.property_name FROM User_Property_History AS a JOIN Properties AS b ON a.property_id = b.property_id ORDER BY a.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties USING(property_id) ORDER BY datestamp",
          "SELECT UPH.datestamp AS Date, P.property_name AS Property FROM User_Property_History UPH, Properties P WHERE UPH.property_id = P.property_id ORDER BY Date",
          "SELECT UPH.datestamp, P.property_name FROM User_Property_History UPH INNER JOIN Properties P ON UPH.property_id = P.property_id ORDER BY UPH.datestamp ASC",
          "SELECT datestamp, property_name FROM User_Property_History UPH LEFT JOIN Properties P ON UPH.property_id = P.property_id ORDER BY datestamp",
          "SELECT UPH.datestamp, P.property_name FROM User_Property_History UPH, Properties P WHERE UPH.property_id = P.property_id ORDER BY UPH.datestamp ASC",
          "SELECT datestamp, property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT UPH.datestamp, P.property_name FROM User_Property_History UPH JOIN Properties P ON UPH.property_id = P.property_id ORDER BY UPH.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp ASC",
          "SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History, Properties WHERE User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC",
          "SELECT a.datestamp, b.property_name FROM User_Property_History AS a JOIN Properties AS b ON a.property_id = b.property_id ORDER BY a.datestamp",
          "SELECT `datestamp`, `property_name` FROM `User_Property_History` JOIN `Properties` ON `User_Property_History`.`property_id` = `Properties`.`property_id` ORDER BY `datestamp` ASC",
          "SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp ASCENDING",
          "SELECT UPH.datestamp AS Date, P.property_name AS Property FROM User_Property_History UPH INNER JOIN Properties P ON UPH.property_id = P.property_id ORDER BY Date",
          "SELECT datestamp, property_name FROM User_Property_History UPH INNER JOIN Properties P ON UPH.property_id = P.property_id SORT BY datestamp",
          "SELECT TOP 100 PERCENT UPH.datestamp, P.property_name FROM User_Property_History UPH LEFT JOIN Properties P ON UPH.property_id = P.property_id ORDER BY UPH.datestamp",
          "SELECT datestamp, property_name FROM User_Property_History UPH, Properties P WHERE UPH.property_id = P.property_id ORDER BY datestamp"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 WHERE T1.property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT description, type_code FROM Ref_Property_Types WHERE type_code = (SELECT TOP 1 property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC)",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R JOIN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) P ON R.property_type_code = P.property_type_code",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code HAVING COUNT(*) = MAX(COUNT(*)))",
          "SELECT A.property_type_description, A.property_type_code FROM Ref_Property_Types A, (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) B WHERE A.property_type_code = B.property_type_code",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)",
          "SELECT TOP 1 R.property_type_description, R.property_type_code FROM Ref_Property_Types R INNER JOIN (SELECT property_type_code, COUNT(*) AS qty FROM Properties GROUP BY property_type_code ORDER BY qty DESC) P ON R.property_type_code = P.property_type_code",
          "SELECT property_type_description, property_type_code FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM (SELECT property_type_code, COUNT(*) AS total FROM Properties GROUP BY property_type_code ORDER BY total DESC) AS temp LIMIT 1)",
          "SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_type_code = R.property_type_code GROUP BY P.property_type_code ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT TOP 1 R.property_type_description FROM Properties P JOIN Ref_Property_Types R ON P.property_type_code = R.property_type_code GROUP BY P.property_type_code ORDER BY COUNT(*) DESC",
          "SELECT R.property_type_description FROM Ref_Property_Types R WHERE R.property_type_code = (SELECT TOP 1 property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC)",
          "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)",
          "SELECT R.property_type_description FROM (SELECT property_type_code, COUNT(*) as cnt FROM Properties GROUP BY property_type_code ORDER BY cnt DESC LIMIT 1) AS MostCommon JOIN Ref_Property_Types R ON MostCommon.property_type_code = R.property_type_code",
          "WITH MostCommon AS (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) SELECT R.property_type_description FROM Ref_Property_Types R JOIN MostCommon M ON M.property_type_code = R.property_type_code",
          "SELECT R.property_type_description FROM Ref_Property_Types R, (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY) AS MostCommon WHERE R.property_type_code = MostCommon.property_type_code",
          "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT R.property_type_description FROM Ref_Property_Types R INNER JOIN (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) P ON R.property_type_code = P.property_type_code",
          "SELECT FIRST(property_type_description) FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code HAVING COUNT(*) = MAX(COUNT(*)))"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT Ref_Age_Categories.age_category_description FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_code = 'Over 60'",
          "SELECT description FROM Ref_Age_Categories WHERE code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN ('Over 60')",
          "SELECT * FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' LIMIT 1",
          "SELECT description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' AND age_category_description IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'",
          "SELECT Ref_Age_Categories.age_category_description FROM Ref_Age_Categories WHERE Ref_Age_Categories.age_category_code = 'Over 60'",
          "SELECT description FROM Ref_Age_Categories WHERE code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' LIMIT 1",
          "SELECT TOP 1 age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN ('Over 60')",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' AND age_category_description IS NOT NULL",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' ORDER BY age_category_description DESC LIMIT 1",
          "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT room_size, COUNT(*) AS count FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) AS total FROM Rooms GROUP BY room_size",
          "SELECT COUNT(*) AS number_of_rooms, room_size FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) AS room_count FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size ORDER BY COUNT(*) DESC",
          "SELECT room_size, COUNT(room_size) AS count_of_rooms FROM Rooms GROUP BY room_size ORDER BY count_of_rooms",
          "SELECT room_size, COUNT(*) AS total_rooms FROM Rooms GROUP BY room_size ORDER BY total_rooms DESC",
          "SELECT room_size, COUNT(room_size) AS quantity FROM Rooms GROUP BY room_size ORDER BY quantity DESC",
          "SELECT room_size, COUNT(*) AS number FROM Rooms GROUP BY room_size ORDER BY room_size ASC"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT room_size, COUNT(*) AS room_count FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) AS number_of_rooms FROM Rooms GROUP BY room_size",
          "SELECT COUNT(room_size) AS count_of_rooms, room_size FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(room_size) FROM Rooms GROUP BY room_size",
          "SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size",
          "SELECT COUNT(*) AS total_rooms, room_size FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(room_size) AS total_rooms FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(*) AS count_rooms FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(room_size) AS room_count FROM Rooms GROUP BY room_size ORDER BY room_size",
          "SELECT room_size, COUNT(*) AS total_rooms FROM Rooms GROUP BY room_size ORDER BY room_size DESC"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie'",
          "SELECT Addresses.country FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT country FROM Addresses, Users WHERE Users.user_address_id = Addresses.address_id AND Users.first_name = 'Robbie'",
          "SELECT a.country FROM Addresses a, Users u WHERE u.user_address_id = a.address_id AND u.first_name = 'Robbie'",
          "SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id AND Users.first_name = 'Robbie'",
          "SELECT DISTINCT country FROM Addresses a INNER JOIN Users u ON a.address_id = u.user_address_id WHERE u.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie' LIMIT 1)",
          "SELECT a.country FROM Users u LEFT JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie'",
          "SELECT TOP 1 Addresses.country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT A.country FROM Users U JOIN Addresses A ON U.user_address_id = A.address_id WHERE U.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT country FROM Addresses, Users WHERE Users.user_address_id = Addresses.address_id AND Users.first_name = 'Robbie'",
          "SELECT A.country FROM Addresses A, Users U WHERE U.user_address_id = A.address_id AND U.first_name = 'Robbie'",
          "SELECT country FROM Addresses INNER JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'",
          "SELECT Addresses.country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'",
          "SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')",
          "SELECT A.country FROM Users U, Addresses A WHERE U.user_address_id = A.address_id AND U.first_name = 'Robbie'",
          "SELECT country FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE first_name = 'Robbie'",
          "SELECT country FROM Addresses AS A JOIN Users AS U ON A.address_id = U.user_address_id WHERE U.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_address_id = user_address_id)",
          "SELECT first_name, middle_name, last_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id AND Users.user_address_id = Properties.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT DISTINCT first_name, middle_name, last_name FROM Users WHERE EXISTS (SELECT 1 FROM Properties WHERE owner_user_id = Users.user_id AND property_address_id = user_address_id)",
          "SELECT first_name, middle_name, last_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Addresses ON Users.user_address_id = Addresses.address_id AND Properties.property_address_id = Addresses.address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id JOIN Addresses A ON U.user_address_id = A.address_id AND P.property_address_id = A.address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_address_id = user_address_id AND owner_user_id = user_id)",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U WHERE EXISTS (SELECT * FROM Properties P WHERE P.owner_user_id = U.user_id AND P.property_address_id = U.user_address_id)",
          "SELECT first_name, middle_name, last_name FROM Users U WHERE U.user_id IN (SELECT P.owner_user_id FROM Properties P WHERE P.property_address_id = U.user_address_id)"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties WHERE property_address_id = user_address_id)",
          "SELECT CONCAT(U.first_name, ' ', U.middle_name, ' ', U.last_name) AS full_name FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name || ' ' || U.middle_name || ' ' || U.last_name AS full_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT first_name, middle_name, last_name FROM Users WHERE EXISTS (SELECT 1 FROM Properties WHERE owner_user_id = Users.user_id AND property_address_id = user_address_id)",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U WHERE U.user_id IN (SELECT P.owner_user_id FROM Properties P WHERE P.property_address_id = U.user_address_id)",
          "SELECT DISTINCT U.first_name, U.middle_name, U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id",
          "SELECT U.first_name, U.middle_name, U.last_name FROM Users U WHERE U.user_id = ANY (SELECT P.owner_user_id FROM Properties P WHERE P.property_address_id = U.user_address_id)"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches AS US LEFT JOIN Properties AS P ON US.user_id = P.owner_user_id WHERE P.owner_user_id IS NULL",
          "SELECT search_string FROM User_Searches WHERE NOT EXISTS (SELECT 1 FROM Properties WHERE owner_user_id = User_Searches.user_id)",
          "SELECT US.search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT DISTINCT P.owner_user_id FROM Properties P)",
          "SELECT search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT owner_user_id FROM Properties WHERE owner_user_id IS NOT NULL)",
          "SELECT US.search_string FROM User_Searches US WHERE NOT EXISTS (SELECT NULL FROM Properties P WHERE P.owner_user_id = US.user_id)",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT DISTINCT owner_user_id FROM Properties WHERE owner_user_id IS NOT NULL)",
          "SELECT US.search_string FROM User_Searches US WHERE US.user_id NOT IN (SELECT P.owner_user_id FROM Properties P WHERE P.owner_user_id IS NOT NULL)",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties WHERE owner_user_id IS NOT NULL)",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches AS US LEFT JOIN Properties AS P ON US.user_id = P.owner_user_id WHERE P.owner_user_id IS NULL",
          "SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT DISTINCT owner_user_id FROM Properties)",
          "SELECT US.search_string FROM User_Searches AS US WHERE NOT EXISTS (SELECT 1 FROM Properties AS P WHERE P.owner_user_id = US.user_id)",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT owner_user_id FROM Properties))",
          "SELECT US.search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT P.owner_user_id FROM Properties AS P)",
          "SELECT search_string FROM User_Searches AS US WHERE NOT EXISTS (SELECT NULL FROM Properties AS P WHERE P.owner_user_id = US.user_id)",
          "SELECT US.search_string FROM User_Searches AS US LEFT JOIN Properties AS P ON US.user_id = P.owner_user_id WHERE P.property_id IS NULL",
          "SELECT search_string FROM User_Searches WHERE user_id IN (SELECT U.user_id FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE P.owner_user_id IS NULL)",
          "SELECT US.search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT owner_user_id FROM Properties WHERE owner_user_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.last_name, U.user_id FROM Users U JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) P ON U.user_id = P.owner_user_id JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) S ON U.user_id = S.user_id",
          "SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2)",
          "SELECT U.last_name, U.user_id FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(*) >= 2) AND EXISTS (SELECT 1 FROM User_Searches S WHERE S.user_id = U.user_id GROUP BY S.user_id HAVING COUNT(*) <= 2)",
          "SELECT U.last_name, U.user_id FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id INNER JOIN User_Searches S ON U.user_id = S.user_id GROUP BY U.user_id, U.last_name HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT S.search_seq) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2)",
          "SELECT DISTINCT U.last_name, U.user_id FROM Users U, Properties P, User_Searches S WHERE U.user_id = P.owner_user_id AND U.user_id = S.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT S.search_seq) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U WHERE (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U, Properties P WHERE U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(P.property_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) <= 2",
          "SELECT U.last_name, U.user_id FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(P.property_id) >= 2 AND NOT EXISTS (SELECT 1 FROM User_Searches S WHERE S.user_id = U.user_id GROUP BY S.user_id HAVING COUNT(*) > 2)",
          "SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) INTERSECT SELECT U.user_id FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2)"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "real_estate_rentals",
      "infer_predictions": [
        [
          "SELECT U.user_id, U.last_name FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) AND U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2)",
          "SELECT U.user_id, U.last_name FROM Users U JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) S ON U.user_id = S.user_id JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) P ON U.user_id = P.owner_user_id",
          "SELECT U.user_id, U.last_name FROM Users U WHERE EXISTS (SELECT 1 FROM User_Searches S WHERE S.user_id = U.user_id GROUP BY S.user_id HAVING COUNT(*) <= 2) AND EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(*) >= 2)",
          "SELECT U.user_id, U.last_name FROM Users U INNER JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) AS S ON U.user_id = S.user_id INNER JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) AS P ON U.user_id = P.owner_user_id",
          "SELECT DISTINCT U.user_id, U.last_name FROM Users U, User_Searches S, Properties P WHERE U.user_id = S.user_id AND U.user_id = P.owner_user_id GROUP BY U.user_id, U.last_name HAVING COUNT(DISTINCT S.search_seq) <= 2 AND COUNT(DISTINCT P.property_id) >= 2",
          "SELECT user_id, last_name FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2)",
          "SELECT U.user_id, U.last_name FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties P WHERE P.owner_user_id = U.user_id) >= 2",
          "SELECT U.user_id, U.last_name FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) INTERSECT SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2",
          "SELECT U.user_id, U.last_name FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = U.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties WHERE owner_user_id = U.user_id) >= 2",
          "SELECT U.user_id, U.last_name FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) AND U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) ORDER BY U.last_name"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM bike WHERE weight > 780",
          "SELECT COUNT(id) FROM bike WHERE weight > 780",
          "SELECT COUNT(*) AS NumberOfBikes FROM bike WHERE weight > 780",
          "SELECT COUNT(bike.id) FROM bike WHERE bike.weight > 780",
          "SELECT COUNT(*) FROM bike WHERE weight > 780.0",
          "SELECT COUNT(*) FROM bike b WHERE b.weight > 780",
          "SELECT COUNT(DISTINCT id) FROM bike WHERE weight > 780",
          "SELECT COUNT(DISTINCT bike.id) FROM bike WHERE bike.weight > 780",
          "SELECT COUNT(*) FROM bike WHERE weight > 780 GROUP BY id",
          "SELECT COUNT(*) FROM bike b WHERE b.weight > 780 GROUP BY b.id"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT product_name, weight FROM bike ORDER BY price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price",
          "SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC",
          "SELECT product_name, weight FROM bike SORT BY price ASCENDING",
          "SELECT product_name, weight FROM bike WHERE price IS NOT NULL ORDER BY price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price ASCENDING",
          "SELECT product_name, weight FROM bike ORDER BY price IN ASCENDING ORDER",
          "SELECT * FROM bike ORDER BY price ASC",
          "SELECT product_name, weight FROM bike ORDER BY price ASC, product_name",
          "SELECT product_name, weight FROM bike ORDER BY price ASC, weight DESC"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT heat, name, nation FROM cyclist",
          "SELECT c.heat, c.name, c.nation FROM cyclist c",
          "SELECT cyclist.heat, cyclist.name, cyclist.nation FROM cyclist",
          "SELECT `heat`, `name`, `nation` FROM `cyclist`",
          "SELECT heat AS Heat, name AS Name, nation AS Nation FROM cyclist",
          "SELECT * FROM cyclist SELECT heat, name, nation",
          "SELECT name, nation, heat FROM cyclist",
          "SELECT heat, name, nation FROM cyclist ORDER BY name",
          "SELECT DISTINCT heat, name, nation FROM cyclist",
          "SELECT heat, name, nation FROM cyclist WHERE heat IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT MAX(weight), MIN(weight) FROM bike",
          "SELECT MAX(bike.weight) AS max_weight, MIN(bike.weight) AS min_weight FROM bike",
          "SELECT (SELECT MAX(weight) FROM bike) AS MaximumWeight, (SELECT MIN(weight) FROM bike) AS MinimumWeight",
          "SELECT MAX(weight) AS MaxWeight, MIN(weight) AS MinWeight FROM bike",
          "SELECT MAX(b.weight), MIN(b.weight) FROM bike b",
          "SELECT MAX(b.weight) AS Maximum_Weight, MIN(b.weight) AS Minimum_Weight FROM bike b",
          "SELECT (SELECT MAX(weight) FROM bike) AS Max_Weight, (SELECT MIN(weight) FROM bike) AS Min_Weight",
          "SELECT MAX(b.weight) AS MaxWeight, MIN(b.weight) AS MinWeight FROM bike AS b",
          "SELECT MAX(weight) AS MaximumWeight, MIN(weight) AS MinimumWeight FROM bike",
          "SELECT MAX(bike.weight), MIN(bike.weight) FROM bike"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'",
          "SELECT AVG(bike.price) AS AveragePrice FROM bike WHERE bike.material = 'Carbon CC'",
          "SELECT AVG(price) AS AvgPrice FROM bike WHERE material LIKE 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' GROUP BY material",
          "SELECT AVG(price) AS Average_Price FROM bike WHERE material = 'Carbon CC'",
          "SELECT AVG(bike.price) FROM bike WHERE bike.material = 'Carbon CC'",
          "SELECT AVG(price) FROM bike b WHERE b.material = 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price IS NOT NULL",
          "SELECT AVG(price) AS AveragePrice FROM bike b WHERE b.material = 'Carbon CC'",
          "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price > 0"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT name, result FROM cyclist WHERE nation <> 'Russia'",
          "SELECT name, result FROM cyclist WHERE NOT nation = 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation != 'Russia'",
          "SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation NOT IN ('Russia')",
          "SELECT c.name, c.result FROM cyclist c WHERE c.nation != 'Russia'",
          "SELECT c.name, c.result FROM cyclist c WHERE c.nation NOT LIKE 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation NOT IN ('Russia')",
          "SELECT name, result FROM cyclist WHERE nation IS NOT 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation NOT EQUALS 'Russia'",
          "SELECT name, result FROM cyclist WHERE nation NOT IN (SELECT nation FROM cyclist WHERE nation = 'Russia')"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
          "SELECT DISTINCT b.id AS BikeID, b.product_name AS BikeName FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id AND cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike AS b INNER JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id WHERE cob.purchase_year > '2015'",
          "SELECT DISTINCT b.id, b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.bike_id = b.id AND cob.purchase_year > 2015)",
          "SELECT DISTINCT b.id, b.product_name FROM bike b WHERE b.id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
          "SELECT DISTINCT b.id, b.product_name FROM bike b LEFT JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
          "SELECT DISTINCT b.id, b.product_name FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015 ORDER BY b.id",
          "SELECT DISTINCT b.id, b.product_name FROM bike b CROSS JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id, b.product_name HAVING COUNT(cob.cyclist_id) >= 4",
          "SELECT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4",
          "SELECT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4)",
          "SELECT b.id, b.product_name FROM bike b WHERE (SELECT COUNT(*) FROM cyclists_own_bikes cob WHERE cob.bike_id = b.id) >= 4",
          "SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4",
          "SELECT DISTINCT b.id, b.product_name FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id GROUP BY b.id, b.product_name HAVING COUNT(cob.cyclist_id) >= 4",
          "SELECT bike.id, bike.product_name FROM bike, cyclists_own_bikes WHERE bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4",
          "SELECT b.id, b.product_name FROM bike b INNER JOIN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(cyclist_id) >= 4) cob ON b.id = cob.bike_id",
          "SELECT b.id, b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.bike_id = b.id GROUP BY cob.bike_id HAVING COUNT(cob.cyclist_id) >= 4)",
          "SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id HAVING COUNT(*) >= 4"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(cob.bike_id) DESC LIMIT 1",
          "SELECT cyclist.id, cyclist.name FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id, cyclist.name HAVING COUNT(cyclists_own_bikes.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery)",
          "SELECT id, name FROM cyclist WHERE id IN (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(bike_id) DESC LIMIT 1)",
          "SELECT TOP 1 c.id, c.name FROM cyclist c, cyclists_own_bikes cob WHERE c.id = cob.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(cob.bike_id) DESC",
          "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id, c.name HAVING COUNT(cob.bike_id) = (SELECT MAX(bike_count) FROM (SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) t)",
          "SELECT c.id, c.name FROM cyclist c WHERE c.id = (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(bike_id) DESC LIMIT 1)",
          "SELECT c.id, c.name FROM cyclist c INNER JOIN (SELECT cyclist_id, COUNT(bike_id) AS total_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY total_bikes DESC LIMIT 1) cob ON c.id = cob.cyclist_id",
          "SELECT c.id, c.name FROM cyclist c WHERE EXISTS (SELECT NULL FROM cyclists_own_bikes cob WHERE c.id = cob.cyclist_id GROUP BY cob.cyclist_id HAVING COUNT(cob.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery))",
          "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT c.id, c.name FROM cyclist c WHERE c.id = (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id HAVING COUNT(bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery))"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain'))",
          "SELECT DISTINCT product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation = 'Russia' OR cyclist.nation = 'Great Britain'",
          "SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclist_id = id WHERE nation IN ('Russia', 'Great Britain'))",
          "SELECT DISTINCT product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')",
          "SELECT DISTINCT product_name FROM bike AS b JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id JOIN cyclist AS c ON cob.cyclist_id = c.id WHERE c.nation = 'Russia' OR c.nation = 'Great Britain'",
          "SELECT DISTINCT b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE cob.bike_id = b.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain'))",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' UNION SELECT id FROM cyclist WHERE nation = 'Great Britain'))",
          "SELECT DISTINCT b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT heat) FROM cyclist",
          "SELECT DISTINCT COUNT(heat) FROM cyclist",
          "SELECT COUNT(UNIQUE heat) FROM cyclist",
          "SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist)",
          "SELECT DISTINCT heat FROM cyclist COUNT(*)",
          "SELECT COUNT(DISTINCT heat) AS NumberOfHeats FROM cyclist",
          "SELECT COUNT(*) FROM (SELECT heat FROM cyclist GROUP BY heat)",
          "SELECT COUNT(heat) FROM (SELECT DISTINCT heat FROM cyclist) AS unique_heats",
          "SELECT COUNT(DISTINCT heat) FROM cyclist GROUP BY heat",
          "SELECT DISTINCT COUNT(heat) FROM cyclist GROUP BY heat"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
          "SELECT COUNT(DISTINCT id) FROM cyclist WHERE id NOT IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
          "SELECT COUNT(id) FROM cyclist WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes WHERE cyclist_id = cyclist.id AND purchase_year > 2015)",
          "SELECT COUNT(*) FROM cyclist c WHERE NOT EXISTS (SELECT NULL FROM cyclists_own_bikes b WHERE b.cyclist_id = c.id AND b.purchase_year > 2015)",
          "WITH RecentPurchases AS (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015) SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM RecentPurchases)",
          "SELECT COUNT(*) FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id AND b.purchase_year > 2015 WHERE b.cyclist_id IS NULL",
          "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015 GROUP BY cyclist_id)",
          "SELECT COUNT(*) FROM (SELECT id FROM cyclist EXCEPT SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015) AS NonPurchasers",
          "SELECT COUNT(c.id) FROM cyclist c WHERE c.id NOT IN (SELECT b.cyclist_id FROM cyclists_own_bikes b WHERE b.purchase_year > 2015)",
          "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015 AND cyclist_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558'))",
          "SELECT DISTINCT product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558'",
          "SELECT DISTINCT name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558')",
          "SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'",
          "SELECT DISTINCT product_name FROM bike WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclists_own_bikes.bike_id = bike.id AND cyclist.result < '4:21.558')",
          "SELECT DISTINCT product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558')",
          "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558'))",
          "SELECT DISTINCT b.product_name FROM bike b WHERE EXISTS (SELECT * FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE cob.bike_id = b.id AND c.result < '4:21.558')",
          "SELECT DISTINCT b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Bradley Wiggins') INTERSECT SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Antonio Tauler')",
          "SELECT B.product_name, B.price FROM bike B WHERE B.id IN (SELECT COB.bike_id FROM cyclists_own_bikes COB INNER JOIN cyclist C ON COB.cyclist_id = C.id WHERE C.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY COB.bike_id HAVING COUNT(DISTINCT C.name) = 2)",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
          "SELECT DISTINCT B.product_name, B.price FROM bike B JOIN cyclists_own_bikes COB ON B.id = COB.bike_id JOIN cyclist C ON COB.cyclist_id = C.id WHERE C.name = 'Bradley Wiggins' AND B.id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclist_id = cyclist.id WHERE name = 'Antonio Tauler')",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins')) AND id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id = (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike_id HAVING COUNT(DISTINCT cyclist.name) = 2)",
          "SELECT B.product_name, B.price FROM bike B WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes COB JOIN cyclist C ON COB.cyclist_id = C.id WHERE C.name = 'Bradley Wiggins' AND COB.bike_id = B.id) AND EXISTS (SELECT 1 FROM cyclists_own_bikes COB JOIN cyclist C ON COB.cyclist_id = C.id WHERE C.name = 'Antonio Tauler' AND COB.bike_id = B.id)",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND bike_id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')))",
          "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') UNION SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
          "SELECT B.product_name, B.price FROM bike B INNER JOIN cyclists_own_bikes COB ON B.id = COB.bike_id WHERE COB.cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND B.id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'))",
          "SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id LEFT JOIN bike b ON cob.bike_id = b.id WHERE b.product_name = 'racing bike' AND cob.bike_id IS NULL",
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE bike.product_name = 'racing bike')",
          "SELECT c.name, c.nation, c.result FROM cyclist c WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN bike b ON cob.bike_id = b.id WHERE cob.cyclist_id = c.id AND b.product_name = 'racing bike')",
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name LIKE '%racing bike%'))",
          "SELECT c.name, c.nation, c.result FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob INNER JOIN bike b ON cob.bike_id = b.id WHERE b.product_name = 'racing bike')",
          "SELECT name, nation, result FROM cyclist c WHERE NOT EXISTS (SELECT NULL FROM cyclists_own_bikes cob INNER JOIN bike b ON cob.bike_id = b.id WHERE cob.cyclist_id = c.id AND b.product_name = 'racing bike')",
          "SELECT c.name, c.nation, c.result FROM cyclist c LEFT OUTER JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id LEFT OUTER JOIN bike b ON cob.bike_id = b.id WHERE b.product_name <> 'racing bike' OR b.product_name IS NULL",
          "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes JOIN bike ON cyclists_own_bikes.bike_id = bike.id AND bike.product_name = 'racing bike')",
          "SELECT c.name, c.nation, c.result FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob, bike b WHERE cob.bike_id = b.id AND b.product_name = 'racing bike')"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'",
          "SELECT product_name FROM bike WHERE material LIKE '%fiber%'"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "bike_racing",
      "infer_predictions": [
        [
          "SELECT c.id, COUNT(b.bike_id) AS num_bikes FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT cyclist.id, COUNT(cyclists_own_bikes.bike_id) AS bike_count FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY cyclist.id",
          "SELECT c.id AS cyclist_id, COUNT(b.bike_id) AS total_bikes FROM cyclist c INNER JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id ASC",
          "SELECT cyclist.id, COUNT(cyclists_own_bikes.bike_id) FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY cyclist.id",
          "SELECT c.id, COUNT(b.bike_id) FROM cyclist c, cyclists_own_bikes b WHERE c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id AS CyclistID, COUNT(b.bike_id) AS NumberOfBikes FROM cyclist c LEFT OUTER JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id, COUNT(b.bike_id) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id ASC",
          "SELECT cyclist.id, COUNT(cyclists_own_bikes.bike_id) AS bike_count FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id ORDER BY cyclist.id ASC",
          "SELECT c.id, COUNT(b.bike_id) AS TotalBikes FROM cyclist c JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id",
          "SELECT c.id AS cyclist_id, COUNT(b.bike_id) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MAX(Price) AS HighestPrice FROM goods WHERE Food = 'cake'",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1",
          "SELECT TOP 1 Flavor, Price FROM goods WHERE Food = 'cake' ORDER BY Price DESC",
          "SELECT Flavor FROM goods WHERE Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake') AND Food = 'cake'",
          "SELECT g.Flavor, g.Price FROM goods g WHERE g.Food = 'cake' AND g.Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake')",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake')",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cake' ORDER BY Price DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Flavor, Price FROM (SELECT Flavor, Price, RANK() OVER (ORDER BY Price DESC) AS rank FROM goods WHERE Food = 'cake') WHERE rank = 1",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cake' HAVING Price = MAX(Price)",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cake' ORDER BY Price DESC, Flavor ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake') AND Food = 'cake'",
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cake' ORDER BY g.Price DESC LIMIT 1",
          "SELECT top 1 Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake')",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price >= ALL (SELECT Price FROM goods WHERE Food = 'cake')",
          "SELECT Id, Flavor FROM (SELECT Id, Flavor, RANK() OVER (ORDER BY Price DESC) as rank FROM goods WHERE Food = 'cake') as ranked WHERE rank = 1",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake') FETCH FIRST 1 ROWS ONLY",
          "SELECT Id, Flavor FROM goods g1 WHERE g1.Food = 'cake' AND NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'cake' AND g2.Price > g1.Price)",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake') LIMIT 1",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods g WHERE g.Food = 'cake')"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MIN(Price) AS LowestPrice FROM goods WHERE Food = 'cookie' GROUP BY Flavor ORDER BY LowestPrice ASC LIMIT 1",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1",
          "SELECT TOP 1 Flavor, Price FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')",
          "SELECT g.Flavor, g.Price FROM goods AS g WHERE g.Food = 'cookie' ORDER BY g.Price ASC FETCH FIRST 1 ROW ONLY",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')",
          "SELECT FIRST(Flavor), FIRST(Price) FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Flavor, Price FROM (SELECT Flavor, Price, RANK() OVER (ORDER BY Price ASC) AS rnk FROM goods WHERE Food = 'cookie') sub WHERE rnk = 1",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cookie' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT Flavor, Price FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie') LIMIT 1"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1",
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cookie' ORDER BY g.Price ASC FETCH FIRST ROW ONLY",
          "SELECT TOP 1 Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price LIMIT 1",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC, Id ASC LIMIT 1",
          "SELECT FIRST(Id), FIRST(Flavor) FROM goods WHERE Food = 'cookie' ORDER BY Price",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie') LIMIT 1",
          "SELECT Id, Flavor FROM (SELECT Id, Flavor, Price FROM goods WHERE Food = 'cookie' ORDER BY Price ASC) WHERE ROWNUM = 1"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor LIKE 'apple'",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE",
          "SELECT DISTINCT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT Id FROM goods WHERE LOWER(Flavor) = 'apple'",
          "SELECT goods.Id FROM goods WHERE Flavor = 'apple' AND Flavor IS NOT NULL",
          "SELECT Id FROM goods WHERE Flavor IN ('apple')",
          "SELECT Id FROM goods WHERE Flavor = 'apple' ORDER BY Id"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor LIKE 'apple'",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'apple'",
          "SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE",
          "SELECT DISTINCT Id FROM goods WHERE Flavor = 'apple'",
          "SELECT Id FROM goods WHERE LOWER(Flavor) = 'apple'",
          "SELECT goods.Id FROM goods WHERE Flavor = 'apple' AND Flavor IS NOT NULL",
          "SELECT Id FROM goods WHERE Flavor IN ('apple')",
          "SELECT Id FROM goods WHERE Flavor = 'apple' ORDER BY Id"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price < 3",
          "SELECT goods.Id FROM goods WHERE goods.Price < 3",
          "SELECT Id FROM goods WHERE Price < $3",
          "SELECT goods.Id FROM goods WHERE Price < 3.00",
          "SELECT Id FROM goods WHERE Price < '3'",
          "SELECT Id FROM goods WHERE Price < 3.0",
          "SELECT goods.Id FROM goods WHERE Price < '3.00'",
          "SELECT Id FROM goods WHERE Price < 3 AND Price > 0",
          "SELECT goods.Id FROM goods WHERE Price < 3 AND Price >= 0",
          "SELECT Id FROM goods WHERE Price < 3 ORDER BY Price ASC"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price < 3",
          "SELECT goods.Id FROM goods WHERE goods.Price < 3",
          "SELECT Id FROM goods WHERE Price < 3.00",
          "SELECT g.Id FROM goods g WHERE g.Price < 3",
          "SELECT Id FROM goods WHERE Price < $3",
          "SELECT goods.Id FROM goods WHERE Price < '3'",
          "SELECT Id FROM goods WHERE Price < 3.0",
          "SELECT Id FROM goods g WHERE g.Price < 3",
          "SELECT goods.Id FROM goods WHERE Price < 3.00",
          "SELECT Id FROM goods WHERE Price < '3.00'"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'cake' AND goods.Flavor = 'lemon'",
          "SELECT DISTINCT c.Id FROM customers AS c JOIN receipts AS r ON c.Id = r.CustomerId JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'",
          "SELECT DISTINCT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cake' AND Flavor = 'lemon')))",
          "SELECT DISTINCT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Food = 'cake' AND g.Flavor = 'lemon')",
          "SELECT DISTINCT c.Id FROM customers c INNER JOIN (receipts r INNER JOIN (items i INNER JOIN goods g ON i.Item = g.Id AND g.Food = 'cake' AND g.Flavor = 'lemon') ON r.ReceiptNumber = i.Receipt) ON c.Id = r.CustomerId",
          "SELECT DISTINCT c.Id FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon')",
          "SELECT DISTINCT Id FROM customers WHERE EXISTS (SELECT * FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.Id = receipts.CustomerId AND goods.Food = 'cake' AND goods.Flavor = 'lemon')"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'lemon' AND goods.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'lemon' AND Food = 'cake')))",
          "SELECT DISTINCT c.Id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Flavor = 'lemon' AND g.Food = 'cake')",
          "SELECT DISTINCT c.Id FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'",
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor LIKE 'lemon' AND g.Food LIKE 'cake'",
          "SELECT DISTINCT c.Id FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake')",
          "SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food LIKE 'cake'",
          "SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake' ORDER BY c.Id"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT G.Food, COUNT(DISTINCT R.CustomerId) AS CustomerCount FROM goods G JOIN items I ON G.Id = I.Item JOIN receipts R ON I.Receipt = R.ReceiptNumber GROUP BY G.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS NumCustomers FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT goods.Food, COUNT(DISTINCT customers.Id) AS TotalCustomers FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = customers.Id GROUP BY goods.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT G.Food, COUNT(DISTINCT C.Id) AS CustomerCount FROM goods G, items I, receipts R, customers C WHERE G.Id = I.Item AND I.Receipt = R.ReceiptNumber AND R.CustomerId = C.Id GROUP BY G.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM (SELECT Food, CustomerId FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber) AS SubQuery GROUP BY Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS Customers FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food",
          "SELECT goods.Food, COUNT(DISTINCT receipts.CustomerId) FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY goods.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS UniqueCustomers FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT goods.Food, COUNT(DISTINCT customers.Id) AS CustomerCount FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY goods.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS NumberOfCustomers FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber JOIN customers ON receipts.CustomerId = customers.Id GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT c.Id) AS TotalCustomers FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber INNER JOIN customers ON receipts.CustomerId = customers.Id GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT c.Id) FROM goods g, items i, receipts r, customers c WHERE g.Id = i.Item AND i.Receipt = r.ReceiptNumber AND r.CustomerId = c.Id GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS CustomerCount FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber LEFT JOIN customers ON receipts.CustomerId = customers.Id GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT c.Id) AS Customers FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) AS NumberOfCustomers FROM goods, items, receipts, customers WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = customers.Id GROUP BY Food",
          "SELECT g.Food, COUNT(DISTINCT c.Id) AS CustomerCount FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN customers c ON r.CustomerId = c.Id GROUP BY g.Food",
          "SELECT Food, COUNT(DISTINCT CustomerId) FROM goods g CROSS JOIN items i ON g.Id = i.Item CROSS JOIN receipts r ON i.Receipt = r.ReceiptNumber CROSS JOIN customers c ON r.CustomerId = c.Id GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId FROM (SELECT receipts.CustomerId, COUNT(*) AS times FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY receipts.CustomerId) AS subquery WHERE times >= 15",
          "SELECT CustomerId FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY CustomerId HAVING COUNT(*) >= 15",
          "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(r.CustomerId) >= 15",
          "SELECT DISTINCT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'bakery')) GROUP BY CustomerId HAVING COUNT(*) >= 15",
          "SELECT CustomerId FROM (SELECT CustomerId, COUNT(*) AS visit_count FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id WHERE Food = 'bakery' GROUP BY CustomerId) AS bakery_visits WHERE visit_count >= 15",
          "SELECT CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Food = 'bakery' GROUP BY CustomerId HAVING COUNT(*) >= 15",
          "SELECT CustomerId FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id WHERE Food = 'bakery' GROUP BY CustomerId HAVING COUNT(*) >= 15",
          "SELECT DISTINCT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(*) >= 15",
          "SELECT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(DISTINCT r.ReceiptNumber) >= 15",
          "SELECT CustomerId FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Food = 'bakery' GROUP BY CustomerId HAVING COUNT(*) >= 15"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(receipts.ReceiptNumber) >= 15",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15)",
          "SELECT DISTINCT customers.Id FROM customers, receipts WHERE customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(*) >= 15",
          "SELECT c.Id FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT Id FROM (SELECT customers.Id AS Id, COUNT(receipts.ReceiptNumber) AS ReceiptCount FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id) AS SubQuery WHERE ReceiptCount >= 15",
          "SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(DISTINCT receipts.ReceiptNumber) >= 15",
          "SELECT c.Id FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15",
          "SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15)",
          "SELECT customers.Id FROM customers LEFT JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(receipts.ReceiptNumber) >= 15"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.LastName FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) > 10)",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)",
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c INNER JOIN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10) AS frequent_customers ON c.Id = frequent_customers.CustomerId",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM (SELECT CustomerId, COUNT(ReceiptNumber) AS num_receipts FROM receipts GROUP BY CustomerId) AS receipt_counts WHERE num_receipts > 10)",
          "SELECT c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c, (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10) AS frequent_customers WHERE c.Id = frequent_customers.CustomerId",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c WHERE (SELECT COUNT(*) FROM receipts r WHERE r.CustomerId = c.Id) > 10"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)",
          "SELECT c.LastName FROM customers c WHERE (SELECT COUNT(*) FROM receipts r WHERE r.CustomerId = c.Id) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE EXISTS (SELECT 1 FROM receipts WHERE customers.Id = CustomerId GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)",
          "SELECT c.LastName FROM customers c WHERE (SELECT COUNT(r.ReceiptNumber) FROM receipts r WHERE r.CustomerId = c.Id) > 10",
          "SELECT c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10",
          "SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(UNIQUE Flavor) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake')",
          "SELECT COUNT(Flavor) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake')",
          "SELECT COUNT(DISTINCT Flavor) AS CakeTypes FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(*) FROM (SELECT Flavor FROM goods WHERE Food = 'Cake' GROUP BY Flavor)",
          "SELECT COUNT(Flavor) FROM goods WHERE Food = 'Cake' GROUP BY Flavor",
          "SELECT DISTINCT COUNT(Flavor) FROM goods WHERE Food = 'Cake'",
          "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake' GROUP BY Flavor",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' GROUP BY Flavor)"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'cake') AS unique_cakes",
          "SELECT COUNT(UNIQUE Id) FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(*) FROM goods WHERE Food = 'cake' GROUP BY Flavor",
          "SELECT COUNT(DISTINCT Flavor) AS CakeTypes FROM goods WHERE Food = 'cake'",
          "SELECT COUNT(*) FROM (SELECT Flavor FROM goods WHERE Food = 'cake' GROUP BY Flavor) AS CakeVarieties",
          "SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food LIKE '%cake%'",
          "SELECT COUNT(*) FROM goods WHERE Food = 'cake' GROUP BY Id",
          "SELECT DISTINCT COUNT(Flavor) FROM goods WHERE Food = 'cake'"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food LIKE 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor IS NOT NULL",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor <> ''",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' ORDER BY Flavor",
          "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Croissant'",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor != ''",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant' ORDER BY Flavor ASC",
          "SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor IS NOT NULL ORDER BY Flavor"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant'",
          "SELECT Flavor FROM goods WHERE Food LIKE 'croissant' GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' AND Flavor IS NOT NULL",
          "SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'croissant'",
          "SELECT Flavor FROM goods WHERE LOWER(Food) = 'croissant'",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant' AND Flavor <> ''",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' ORDER BY Flavor",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant' AND Flavor IS NOT NULL ORDER BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'croissant' GROUP BY Flavor HAVING COUNT(*) > 0",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant' AND Flavor IS NOT NULL AND Flavor <> ''"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT G.Flavor, G.Food FROM goods G JOIN items I ON G.Id = I.Item JOIN receipts R ON I.Receipt = R.ReceiptNumber WHERE R.CustomerId = 15",
          "SELECT DISTINCT goods.Flavor, goods.Food FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15",
          "SELECT DISTINCT Flavor, Food FROM goods WHERE Id IN (SELECT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15))",
          "SELECT DISTINCT G.Flavor, G.Food FROM goods AS G, items AS I, receipts AS R WHERE G.Id = I.Item AND I.Receipt = R.ReceiptNumber AND R.CustomerId = 15",
          "SELECT DISTINCT goods.Flavor, goods.Food FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT Flavor, Food FROM goods WHERE Id IN (SELECT Item FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15)",
          "SELECT DISTINCT G.Flavor, G.Food FROM goods G, items I, receipts R WHERE G.Id = I.Item AND I.Receipt = R.ReceiptNumber AND R.CustomerId = 15",
          "SELECT DISTINCT Flavor, Food FROM goods INNER JOIN items ON goods.Id = items.Item INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT goods.Flavor, goods.Food FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT G.Flavor, G.Food FROM goods G JOIN items I ON G.Id = I.Item JOIN receipts R ON I.Receipt = R.ReceiptNumber AND R.CustomerId = 15"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15",
          "SELECT DISTINCT g.Flavor FROM goods g INNER JOIN items i ON g.Id = i.Item INNER JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15",
          "SELECT DISTINCT Flavor FROM goods WHERE Id IN (SELECT Item FROM items WHERE Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15))",
          "SELECT DISTINCT Flavor FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15",
          "SELECT DISTINCT g.Flavor FROM goods g, items i, receipts r WHERE g.Id = i.Item AND i.Receipt = r.ReceiptNumber AND r.CustomerId = 15",
          "SELECT DISTINCT Flavor FROM goods WHERE Id IN (SELECT Item FROM items INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15)",
          "SELECT DISTINCT Flavor FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber AND r.CustomerId = 15",
          "SELECT DISTINCT Flavor FROM goods WHERE Id IN (SELECT i.Item FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15)",
          "SELECT DISTINCT Flavor FROM goods INNER JOIN (SELECT Item FROM items INNER JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE CustomerId = 15) AS PurchasedItems ON goods.Id = PurchasedItems.Item",
          "SELECT DISTINCT g.Flavor FROM goods g WHERE EXISTS (SELECT 1 FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15 AND i.Item = g.Id)"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AveragePrice, MAX(Price) MaxPrice, MIN(Price) MinPrice FROM goods GROUP BY Food",
          "SELECT Food, average(Price) as AveragePrice, maximum(Price) as MaxPrice, minimum(Price) as MinPrice FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AvgPrice, MAX(g.Price) AS MaximumPrice, MIN(g.Price) AS MinimumPrice FROM goods g GROUP BY g.Food",
          "SELECT Food, AVG(Price) as 'Average Price', MAX(Price) as 'Maximum Price', MIN(Price) as 'Minimum Price' FROM goods GROUP BY Food",
          "SELECT Food, average(Price) as 'Average Price', max(Price) as 'Max Price', min(Price) as 'Min Price' FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Avg_Price, MAX(Price) AS Max_Price, MIN(Price) AS Min_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Average_Price, MAX(Price) AS Maximum_Price, MIN(Price) AS Minimum_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice, MAX(Price) AS MaximumPrice, MIN(Price) AS MinimumPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AvgPrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food",
          "SELECT Food, average(Price) as AveragePrice, minimum(Price) as MinPrice, maximum(Price) as MaxPrice FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS MinPrice, MAX(g.Price) AS MaxPrice FROM goods g GROUP BY g.Food",
          "SELECT Food, AVG(Price) as 'Average Price', MIN(Price) as 'Minimum Price', MAX(Price) as 'Maximum Price' FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AveragePrice, MIN(Price) MinPrice, MAX(Price) MaxPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AvgPrice, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Average_Price, MIN(Price) AS Minimum_Price, MAX(Price) AS Maximum_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, AVG(Price) AS Average_Price, MIN(Price) AS Min_Price, MAX(Price) AS Max_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food ORDER BY AveragePrice DESC"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' INTERSECT SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cookie'",
          "SELECT Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('Cake', 'Cookie') GROUP BY Receipt HAVING COUNT(DISTINCT g.Food) = 2",
          "SELECT DISTINCT i1.Receipt FROM items i1, items i2 JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie' AND i1.Receipt = i2.Receipt",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' AND i.Receipt = r.ReceiptNumber) AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie' AND i.Receipt = r.ReceiptNumber)",
          "WITH CakeReceipts AS (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake'), CookieReceipts AS (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cookie') SELECT Receipt FROM CakeReceipts INTERSECT SELECT Receipt FROM CookieReceipts",
          "SELECT Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' AND Receipt IN (SELECT Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie')",
          "SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cake' UNION SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'Cookie' HAVING COUNT(*) > 1",
          "SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id GROUP BY i.Receipt HAVING SUM(CASE WHEN g.Food = 'Cake' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN g.Food = 'Cookie' THEN 1 ELSE 0 END) > 0",
          "SELECT Receipt FROM (SELECT Receipt, COUNT(DISTINCT Food) AS FoodCount FROM items JOIN goods ON items.Item = goods.Id WHERE Food IN ('Cake', 'Cookie') GROUP BY Receipt) AS SubQuery WHERE FoodCount = 2",
          "SELECT DISTINCT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake') AND Receipt IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie'))"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cakes') INTERSECT SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookies')",
          "SELECT DISTINCT i1.Receipt FROM items i1 JOIN goods g1 ON i1.Item = g1.Id WHERE g1.Food = 'cakes' INTERSECT SELECT DISTINCT i2.Receipt FROM items i2 JOIN goods g2 ON i2.Item = g2.Id WHERE g2.Food = 'cookies'",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cakes' AND i.Receipt = r.ReceiptNumber) AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies' AND i.Receipt = r.ReceiptNumber)",
          "SELECT r1.ReceiptNumber FROM receipts r1 JOIN items i1 ON r1.ReceiptNumber = i1.Receipt JOIN goods g1 ON i1.Item = g1.Id WHERE g1.Food = 'cakes' AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.Item = g2.Id WHERE g2.Food = 'cookies' AND i2.Receipt = r1.ReceiptNumber)",
          "WITH Cakes AS (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cakes')), Cookies AS (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookies')) SELECT Receipt FROM Cakes INTERSECT SELECT Receipt FROM Cookies",
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cakes')) AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'cookies'))",
          "SELECT DISTINCT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Food IN ('cakes', 'cookies') GROUP BY i.Receipt HAVING COUNT(DISTINCT g.Food) = 2",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cakes') AND r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies')",
          "SELECT Receipt FROM items i1 WHERE EXISTS (SELECT 1 FROM goods g1 WHERE i1.Item = g1.Id AND g1.Food = 'cakes') AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.Item = g2.Id WHERE i2.Receipt = i1.Receipt AND g2.Food = 'cookies')",
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Food = 'cakes') INTERSECT SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Food = 'cookies')"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant'",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'LOGAN' AND goods.Food = 'Croissant'",
          "SELECT r.ReceiptNumber FROM receipts AS r, customers AS c, items AS i, goods AS g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'LOGAN' AND g.Food = 'Croissant'",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Croissant'))",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'LOGAN' AND g.Food = 'Croissant'",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant'",
          "SELECT r.ReceiptNumber FROM receipts r LEFT JOIN customers c ON r.CustomerId = c.Id LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant'",
          "SELECT r.ReceiptNumber FROM receipts r INNER JOIN customers c ON r.CustomerId = c.Id INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant' GROUP BY r.ReceiptNumber",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND UPPER(c.LastName) = 'LOGAN' AND UPPER(g.Food) = 'CROISSANT'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName LIKE 'LOGAN' AND g.Food LIKE 'Croissant'"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Flavor = 'croissant'",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'croissant'))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Flavor = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts AS r INNER JOIN customers AS c ON r.CustomerId = c.Id INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Flavor = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'croissant'))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN customers c ON r.CustomerId = c.Id INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Food = 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Flavor LIKE 'croissant'",
          "SELECT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Flavor LIKE 'croissant'"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods)))",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item = (SELECT Id FROM goods ORDER BY Price DESC LIMIT 1))",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE receipts.ReceiptNumber = items.Receipt AND goods.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.ReceiptNumber = (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods) LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT R.ReceiptNumber, R.Date FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND G.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT receipts.ReceiptNumber, receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price = (SELECT MAX(Price) FROM goods)",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R WHERE EXISTS (SELECT 1 FROM items I JOIN goods G ON I.Item = G.Id WHERE I.Receipt = R.ReceiptNumber AND G.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R WHERE R.ReceiptNumber IN (SELECT I.Receipt FROM items I JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods))",
          "SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods)))",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods) GROUP BY R.ReceiptNumber, R.Date",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R WHERE R.ReceiptNumber = (SELECT I.Receipt FROM items I JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods) LIMIT 1)",
          "SELECT R.ReceiptNumber, R.Date FROM receipts R JOIN (SELECT Receipt, MAX(Price) AS MaxPrice FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt) AS MaxItems ON R.ReceiptNumber = MaxItems.Receipt WHERE MaxItems.MaxPrice = (SELECT MAX(Price) FROM goods)"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT goods.Flavor, goods.Food FROM goods WHERE goods.Id = (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT G.Flavor, G.Food FROM goods G JOIN (SELECT Item, COUNT(*) AS cnt FROM items GROUP BY Item ORDER BY cnt ASC LIMIT 1) I ON G.Id = I.Item",
          "SELECT Flavor, Food FROM goods WHERE Id IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) = (SELECT MIN(cnt) FROM (SELECT COUNT(Item) AS cnt FROM items GROUP BY Item) AS subquery))",
          "SELECT Flavor, Food FROM goods WHERE Id = (SELECT TOP 1 Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC)",
          "SELECT G.Flavor, G.Food FROM goods G INNER JOIN (SELECT Item, COUNT(*) AS ItemCount FROM items GROUP BY Item ORDER BY ItemCount ASC LIMIT 1) AS LeastBought ON G.Id = LeastBought.Item",
          "SELECT Flavor, Food FROM goods WHERE Id = (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC FETCH FIRST 1 ROWS ONLY)",
          "SELECT Flavor, Food FROM goods WHERE Id = (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT G.Flavor, G.Food FROM goods G, (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1) AS MinItem WHERE G.Id = MinItem.Item",
          "SELECT Flavor, Food FROM goods WHERE Id = (SELECT Item FROM (SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item ORDER BY Count ASC) WHERE ROWNUM = 1)",
          "SELECT G.Flavor, G.Food FROM goods G WHERE G.Id = (SELECT I.Item FROM items I GROUP BY I.Item ORDER BY COUNT(I.Item) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item GROUP BY items.Item ORDER BY COUNT(*) ASC LIMIT 1",
          "SELECT G.Flavor FROM goods G INNER JOIN items I ON G.Id = I.Item GROUP BY I.Item HAVING COUNT(I.Item) = (SELECT MIN(item_count) FROM (SELECT COUNT(*) AS item_count FROM items GROUP BY Item) AS counts)",
          "SELECT TOP 1 goods.Flavor FROM goods, items WHERE goods.Id = items.Item GROUP BY items.Item ORDER BY COUNT(items.Item) ASC",
          "SELECT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Flavor ORDER BY COUNT(items.Item) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Flavor FROM goods WHERE Id IN (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT goods.Flavor FROM goods INNER JOIN (SELECT Item, COUNT(*) AS ItemCount FROM items GROUP BY Item) AS ItemCounts ON goods.Id = ItemCounts.Item ORDER BY ItemCounts.ItemCount ASC LIMIT 1",
          "SELECT Flavor FROM goods WHERE Id = (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT goods.Flavor FROM goods WHERE goods.Id = (SELECT items.Item FROM items GROUP BY items.Item ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT G.Flavor FROM goods G WHERE G.Id = (SELECT I.Item FROM items I GROUP BY I.Item ORDER BY COUNT(I.Item) ASC LIMIT 1)",
          "SELECT Flavor FROM goods WHERE Id = (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM items GROUP BY Item) AS SubQuery))"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(*) AS NumberOfGoods FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) AS TotalGoods FROM goods GROUP BY Food",
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
          "SELECT g.Food, COUNT(g.Id) FROM goods g GROUP BY g.Food",
          "SELECT Food, COUNT(Id) FROM goods GROUP BY Food",
          "SELECT COUNT(*) AS Count, Food FROM goods GROUP BY Food",
          "SELECT Food, COUNT(*) AS Count FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, COUNT(Id) AS GoodsCount FROM goods GROUP BY Food ORDER BY GoodsCount DESC",
          "SELECT Food, COUNT(*) AS Total FROM goods GROUP BY Food ORDER BY Total DESC",
          "SELECT Food, COUNT(Id) FROM goods GROUP BY Food ORDER BY Food ASC"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, COUNT(Id) AS NumberOfGoods FROM goods GROUP BY Food",
          "SELECT Food, COUNT(*) AS Total FROM goods GROUP BY Food",
          "SELECT COUNT(Id), Food FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) FROM goods GROUP BY Food",
          "SELECT Food, COUNT(*) FROM goods GROUP BY Food",
          "SELECT COUNT(Id) AS CountOfGoods, Food FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) AS Count FROM goods GROUP BY Food",
          "SELECT COUNT(*) AS TotalGoods, Food FROM goods GROUP BY Food",
          "SELECT Food, COUNT(Id) AS TotalCount FROM goods GROUP BY Food",
          "SELECT COUNT(*) AS GoodsCount, Food FROM goods GROUP BY Food"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AvgPrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
          "SELECT goods.Food, AVG(goods.Price) AS AveragePrice FROM goods GROUP BY goods.Food",
          "SELECT goods.Food, AVG(goods.Price) FROM goods GROUP BY goods.Food",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food ORDER BY AveragePrice",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food ORDER BY Average_Price",
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food ORDER BY Food ASC"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS AvgPrice FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) AS Average_Price FROM goods g GROUP BY g.Food",
          "SELECT Food, AVG(Price) FROM goods GROUP BY Food",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food",
          "SELECT g.Food, AVG(g.Price) FROM goods g GROUP BY g.Food",
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food ORDER BY AveragePrice",
          "SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food ORDER BY Average_Price DESC",
          "SELECT Food, AVG(Price) AS Avg_Price FROM goods GROUP BY Food ORDER BY Avg_Price"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'Apricot' AND g.Price < 5",
          "SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price <= 4.99",
          "SELECT goods.Id FROM goods WHERE Flavor = 'Apricot' AND Price < $5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < '5'",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.0",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price BETWEEN 0 AND 4.99"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5",
          "SELECT goods.Id FROM goods WHERE goods.Flavor = 'Apricot' AND goods.Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'Apricot' AND g.Price < 5",
          "SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price <= 4.99",
          "SELECT goods.Id FROM goods WHERE Flavor = 'Apricot' AND Price BETWEEN 0 AND 4.99",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < $5",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5 ORDER BY Price",
          "SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.00",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 ORDER BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.0",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 AND Flavor IS NOT NULL",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'cake' AND Price > 10",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10",
          "SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.00",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 ORDER BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10 GROUP BY Flavor",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.0",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > $10",
          "SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10.00 ORDER BY Flavor ASC"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods AS g)",
          "SELECT Id, Price FROM goods GROUP BY Id, Price HAVING Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods g1 WHERE g1.Price < (SELECT AVG(g2.Price) FROM goods g2)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(g2.Price) FROM goods g2)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)",
          "SELECT DISTINCT Id, Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods WHERE Id = g.Id)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Price IS NOT NULL)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Price > 0)"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods AS g)",
          "SELECT Id, Price FROM goods GROUP BY Id, Price HAVING Price < (SELECT AVG(Price) FROM goods)",
          "SELECT DISTINCT Id, Price FROM goods g1 WHERE Price < (SELECT AVG(g2.Price) FROM goods g2)",
          "SELECT DISTINCT g.Id, g.Price FROM goods AS g WHERE g.Price < (SELECT AVG(Price) FROM goods AS sub)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods GROUP BY Id)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Price IS NOT NULL)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Price > 0)",
          "SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT g1.Id FROM goods g1 WHERE g1.Price < ANY (SELECT g2.Price FROM goods g2 WHERE g2.Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods AS g WHERE EXISTS (SELECT 1 FROM goods AS t WHERE t.Flavor = 'Tart' AND g.Price < t.Price)",
          "SELECT DISTINCT Id FROM goods WHERE Price IN (SELECT Price FROM goods WHERE Flavor = 'Tart' AND Price > (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart'))",
          "SELECT DISTINCT Id FROM goods g1 WHERE g1.Price < (SELECT MIN(Price) FROM goods g2 WHERE g2.Flavor = 'Tart')",
          "SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < ALL (SELECT MAX(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods g WHERE g.Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT Price FROM goods WHERE Flavor = 'Tart' ORDER BY Price DESC LIMIT 1)",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart')"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id FROM goods WHERE Price < ANY (SELECT Price FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE EXISTS (SELECT 1 FROM goods t WHERE t.Flavor = 'Tart' AND g.Price < t.Price)",
          "SELECT DISTINCT Id FROM goods g1 WHERE g1.Price < ALL (SELECT Price FROM goods g2 WHERE g2.Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(t.Price) FROM goods t WHERE t.Flavor = 'Tart')",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods t WHERE t.Flavor = 'Tart')",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT Price FROM goods WHERE Flavor = 'Tart' ORDER BY Price ASC LIMIT 1)",
          "SELECT DISTINCT Id FROM goods g WHERE g.Price < (SELECT Price FROM goods t WHERE t.Flavor = 'Tart' ORDER BY Price LIMIT 1)",
          "SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts AS r INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE receipts.ReceiptNumber = items.Receipt AND goods.Price > 13)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 13)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13 ORDER BY r.ReceiptNumber",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 13 ORDER BY r.ReceiptNumber ASC"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Price > 13",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13))",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id AND g.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 13)",
          "SELECT DISTINCT ReceiptNumber FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 13",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13 ORDER BY r.ReceiptNumber"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))",
          "SELECT DISTINCT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15",
          "SELECT r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT Date FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 AND items.Receipt = receipts.ReceiptNumber)",
          "SELECT r.Date FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 AND i.Receipt = r.ReceiptNumber)",
          "SELECT receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 15",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15 ORDER BY r.Date",
          "SELECT r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 GROUP BY r.Date"
        ]
      ]
    },
    {
      "id": 1534,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))",
          "SELECT receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 15",
          "SELECT DISTINCT receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 15",
          "SELECT Date FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE items.Receipt = receipts.ReceiptNumber AND goods.Price > 15)",
          "SELECT r.Date FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 15)",
          "SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 ORDER BY receipts.Date",
          "SELECT r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 15",
          "SELECT Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 GROUP BY Date"
        ]
      ]
    },
    {
      "id": 1535,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE '%%APP%%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%%APP%%'",
          "SELECT Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE Id LIKE 'APP%'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP'",
          "SELECT Id FROM goods WHERE Id LIKE 'APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE 'APP%'"
        ]
      ]
    },
    {
      "id": 1536,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE 'APP%'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'",
          "SELECT Id FROM goods WHERE Id LIKE 'APP%'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP'",
          "SELECT Id FROM goods WHERE Id LIKE '%APP%'",
          "SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%'"
        ]
      ]
    },
    {
      "id": 1537,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70'",
          "SELECT Flavor, Price FROM goods WHERE Id = '70'",
          "SELECT Flavor, Price FROM goods WHERE CAST(Id AS VARCHAR) LIKE '%70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '_70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%_70%'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '%70_'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '70_'",
          "SELECT Flavor, Price FROM goods WHERE Id LIKE '_70_'"
        ]
      ]
    },
    {
      "id": 1538,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70%'",
          "SELECT goods.Id, goods.Price FROM goods WHERE goods.Id LIKE '%70%'",
          "SELECT Id, Price FROM goods WHERE CAST(Id AS VARCHAR) LIKE '%70%'",
          "SELECT g.Id, g.Price FROM goods g WHERE g.Id LIKE '%70%'",
          "SELECT Id, Price FROM goods WHERE Id LIKE '70%' OR Id LIKE '%70' OR Id LIKE '%70%'",
          "SELECT Id, Price FROM goods WHERE POSITION('70' IN Id) > 0",
          "SELECT Id, Price FROM goods WHERE Id LIKE CONCAT('%', '70', '%')",
          "SELECT Id, Price FROM goods WHERE CHARINDEX('70', Id) > 0",
          "SELECT Id, Price FROM goods WHERE Id LIKE '%70%' ESCAPE '\\'",
          "SELECT Id, Price FROM goods WHERE INSTR(Id, '70') > 0"
        ]
      ]
    },
    {
      "id": 1539,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName",
          "SELECT c.LastName FROM customers c ORDER BY c.LastName ASC",
          "SELECT customers.LastName FROM customers ORDER BY customers.LastName ASC",
          "SELECT LastName FROM customers SORT BY LastName ASC",
          "SELECT DISTINCT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName AS CustomerLastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName COLLATE NOCASE ASC",
          "SELECT * FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY ASCII(LastName)"
        ]
      ]
    },
    {
      "id": 1540,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName",
          "SELECT c.LastName FROM customers c ORDER BY c.LastName ASC",
          "SELECT c.LastName FROM customers AS c ORDER BY c.LastName",
          "SELECT LastName FROM customers SORT BY LastName ASC",
          "SELECT DISTINCT LastName FROM customers ORDER BY LastName ASC",
          "SELECT LastName FROM customers ORDER BY LastName ASCENDING",
          "SELECT LastName FROM customers ORDER BY 1",
          "SELECT * FROM customers ORDER BY LastName ASC",
          "SELECT LastName AS CustomerLastName FROM customers ORDER BY CustomerLastName ASC"
        ]
      ]
    },
    {
      "id": 1541,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods ORDER BY Id",
          "SELECT goods.Id FROM goods ORDER BY goods.Id ASC",
          "SELECT Id FROM goods ORDER BY Id ASC",
          "SELECT * FROM goods ORDER BY Id",
          "SELECT goods.Id AS GoodID FROM goods ORDER BY GoodID",
          "SELECT Id AS OrderedGoods FROM goods ORDER BY OrderedGoods ASC",
          "SELECT `Id` FROM `goods` ORDER BY `Id` ASC",
          "SELECT Id FROM goods ORDER BY Id ASCENDING",
          "SELECT Id FROM goods SORT BY Id",
          "SELECT Id FROM goods ORDER BY Id IN ASCENDING ORDER"
        ]
      ]
    },
    {
      "id": 1542,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Id FROM goods ORDER BY Id",
          "SELECT DISTINCT goods.Id FROM goods ORDER BY goods.Id ASC",
          "SELECT Id FROM goods GROUP BY Id ORDER BY Id",
          "SELECT DISTINCT Id FROM goods ORDER BY Id ASC",
          "SELECT DISTINCT goods.Id FROM goods ORDER BY Id ASC",
          "SELECT DISTINCT Id FROM goods ORDER BY Id DESC",
          "SELECT DISTINCT Id AS GoodId FROM goods ORDER BY GoodId",
          "SELECT DISTINCT goods.Id AS GoodId FROM goods ORDER BY GoodId ASC",
          "SELECT DISTINCT Id FROM goods ORDER BY Id ASC",
          "SELECT DISTINCT Id FROM goods ORDER BY Id DESC"
        ]
      ]
    },
    {
      "id": 1543,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE (goods.Flavor = 'apple' AND goods.Food = 'pie') OR receipts.CustomerId = 12",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts AS R, items AS I, goods AS G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND (G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12)",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND (G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12)",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R LEFT JOIN items I ON R.ReceiptNumber = I.Receipt LEFT JOIN goods G ON I.Item = G.Id WHERE G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE (G.Flavor = 'apple' AND G.Food = 'pie') OR R.CustomerId = 12",
          "SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'pie' OR receipts.CustomerId = 12",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R INNER JOIN items I ON R.ReceiptNumber = I.Receipt INNER JOIN goods G ON I.Item = G.Id WHERE G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND (G.Flavor = 'apple' AND G.Food = 'pie') OR R.CustomerId = 12",
          "SELECT DISTINCT R.ReceiptNumber FROM receipts R LEFT JOIN items I ON R.ReceiptNumber = I.Receipt LEFT JOIN goods G ON I.Item = G.Id WHERE (G.Flavor = 'apple' AND G.Food = 'pie') OR R.CustomerId = 12"
        ]
      ]
    },
    {
      "id": 1544,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 UNION SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie'",
          "SELECT DISTINCT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'pie'))",
          "SELECT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = 12 OR (g.Flavor = 'apple' AND g.Food = 'pie')",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND ((g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Flavor = 'apple' AND g.Food = 'pie') OR r.CustomerId = 12",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 OR r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie')",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'apple' AND g.Food = 'pie') UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12"
        ]
      ]
    },
    {
      "id": 1545,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date IN (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(d.Date) FROM receipts d)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts AS r)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT MAX(Date) FROM receipts AS rec)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(r.Date) FROM receipts r)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(Date) FROM receipts WHERE Date IS NOT NULL)",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts WHERE Date IS NOT NULL)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT MAX(Date) FROM receipts r WHERE Date IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1546,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber, MAX(Date) FROM receipts",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1",
          "SELECT TOP 1 ReceiptNumber, Date FROM receipts ORDER BY Date DESC",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r ORDER BY r.Date DESC LIMIT 1",
          "SELECT ReceiptNumber, Date FROM receipts WHERE Date IN (SELECT MAX(Date) FROM receipts)",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC FETCH FIRST ROW ONLY",
          "SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(Date) FROM receipts)",
          "SELECT ReceiptNumber, MAX(Date) AS LatestDate FROM receipts GROUP BY ReceiptNumber ORDER BY LatestDate DESC LIMIT 1",
          "SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC, ReceiptNumber DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1547,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 AND i.Receipt = r.ReceiptNumber)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) UNION SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 10",
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) UNION ALL SELECT i.Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 10",
          "SELECT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10",
          "WITH EarliestDate AS (SELECT MIN(Date) AS MinDate FROM receipts), HighPriceItems AS (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Price > 10) SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MinDate FROM EarliestDate) OR ReceiptNumber IN (SELECT Receipt FROM HighPriceItems)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM receipts rx WHERE rx.Date = (SELECT MIN(Date) FROM receipts) AND rx.ReceiptNumber = r.ReceiptNumber) OR EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 AND i.Receipt = r.ReceiptNumber)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR r.ReceiptNumber IN (SELECT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Price > 10)"
        ]
      ]
    },
    {
      "id": 1548,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 10) OR r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 10) UNION SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10 UNION SELECT Id FROM goods WHERE Price = (SELECT MIN(Price) FROM goods)))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) UNION SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10",
          "SELECT DISTINCT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND (g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 10)",
          "SELECT r.ReceiptNumber FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Price > 10 UNION SELECT r.ReceiptNumber FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts))"
        ]
      ]
    },
    {
      "id": 1549,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price >= 3 AND Price <= 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND (Price >= 3 AND Price <= 7)",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price > 2 AND Price < 8",
          "SELECT Id FROM goods WHERE Food = 'Cookie' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cake' AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price > 2.99 AND Price < 7.01",
          "SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price >= 3.00 AND Price <= 7.00",
          "SELECT Id FROM goods WHERE Food = 'Cookie' AND Price BETWEEN 3 AND 7 UNION ALL SELECT Id FROM goods WHERE Food = 'Cake' AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3.0 AND 7.0"
        ]
      ]
    },
    {
      "id": 1550,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price >= 3 AND Price <= 7",
          "SELECT goods.Id FROM goods WHERE goods.Food IN ('Cookies', 'Cakes') AND goods.Price >= 3 AND goods.Price <= 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND (Price >= 3 AND Price <= 7)",
          "SELECT g.Id FROM goods g WHERE g.Food IN ('Cookies', 'Cakes') AND g.Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price > 2 AND Price < 8",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price > 2.99 AND Price < 7.01",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cakes' AND Price BETWEEN 3 AND 7",
          "SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price >= 3.00 AND Price <= 7.00",
          "SELECT goods.Id FROM goods WHERE (goods.Food = 'Cookies' OR goods.Food = 'Cakes') AND (goods.Price BETWEEN 3 AND 7)"
        ]
      ]
    },
    {
      "id": 1551,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId AND r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT r.CustomerId FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT TOP 1 c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date ASC",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id AND r.Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) FETCH FIRST 1 ROW ONLY)"
        ]
      ]
    },
    {
      "id": 1552,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts ORDER BY Date ASC LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId AND r.Date = (SELECT MIN(Date) FROM receipts)",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT r.CustomerId FROM receipts r WHERE r.Date = (SELECT MIN(r2.Date) FROM receipts r2))",
          "SELECT TOP 1 c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date ASC",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date LIMIT 1)",
          "SELECT c.FirstName, c.LastName FROM customers c WHERE c.Id = (SELECT r.CustomerId FROM receipts r WHERE r.Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts))",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts)"
        ]
      ]
    },
    {
      "id": 1553,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) AS AveragePrice FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor LIKE 'blackberry' OR Flavor LIKE 'blueberry'",
          "SELECT AVG(g.Price) FROM goods g WHERE g.Flavor = 'blackberry' OR g.Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION ALL SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN (SELECT Flavor FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry')",
          "SELECT AVG(Price) FROM goods WHERE Flavor = ANY (ARRAY['blackberry', 'blueberry'])",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN (SELECT DISTINCT Flavor FROM goods WHERE Flavor IN ('blackberry', 'blueberry'))"
        ]
      ]
    },
    {
      "id": 1554,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) AS AveragePrice FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor LIKE '%blackberry%' OR Flavor LIKE '%blueberry%'",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' UNION ALL SELECT AVG(Price) FROM goods WHERE Flavor = 'blueberry'",
          "SELECT AVG(Price) AS Average_Price FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor",
          "SELECT 'Average Price' AS Description, AVG(Price) AS Price FROM goods WHERE Flavor IN ('blackberry', 'blueberry')",
          "SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY Flavor HAVING COUNT(*) > 0",
          "SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry' GROUP BY Flavor ORDER BY AVG(Price)"
        ]
      ]
    },
    {
      "id": 1555,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1",
          "SELECT * FROM (SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price) AS prices LIMIT 1",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price LIMIT 1",
          "SELECT TOP 1 Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' AND Price = (SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese')",
          "SELECT MIN(g.Price) AS CheapestPrice FROM goods g WHERE g.Flavor = 'cheese'",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price FETCH FIRST ROW ONLY",
          "SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Price AS Cheapest FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1556,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1",
          "SELECT Id, Flavor, Food, Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1",
          "SELECT TOP 1 * FROM goods WHERE Flavor = 'cheese' ORDER BY Price",
          "SELECT MIN(Price), Id, Flavor, Food FROM goods WHERE Flavor = 'cheese' GROUP BY Id, Flavor, Food",
          "SELECT Id, Flavor, Food, Price FROM goods WHERE Flavor LIKE 'cheese' ORDER BY Price ASC FETCH FIRST ROW ONLY",
          "SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price LIMIT 1",
          "SELECT Id, Flavor, Food, Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT goods.* FROM goods WHERE goods.Flavor = 'cheese' ORDER BY goods.Price ASC LIMIT 1",
          "SELECT Id, Flavor, Food, Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price, Id LIMIT 1",
          "SELECT Id, Flavor, Food, Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC, Id ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1557,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MAX(Price) AS Highest, MIN(Price) AS Lowest, AVG(Price) AS Average FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) HighestPrice, MIN(Price) LowestPrice, AVG(Price) AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT g.Flavor, MAX(g.Price) as MaxPrice, MIN(g.Price) as MinPrice, AVG(g.Price) as AvgPrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor",
          "SELECT Flavor, MAX(Price) as 'Highest Price', MIN(Price) as 'Lowest Price', AVG(Price) as 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, highest_price, lowest_price, average_price FROM (SELECT Flavor, MAX(Price) as highest_price, MIN(Price) as lowest_price, AVG(Price) as average_price FROM goods GROUP BY Flavor) as prices ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) as Max_Price, MIN(Price) as Min_Price, AVG(Price) as Average_Price FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as MaximumPrice, MIN(Price) as MinimumPrice, AVG(Price) as AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as TopPrice, MIN(Price) as BottomPrice, AVG(Price) as MeanPrice FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) as HighPrice, MIN(Price) as LowPrice, AVG(Price) as AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) as Highest_Price, MIN(Price) as Lowest_Price, AVG(Price) as Average_Price FROM goods GROUP BY Flavor ORDER BY Flavor ASC"
        ]
      ]
    },
    {
      "id": 1558,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS MaximumPrice, MIN(Price) AS MinimumPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT g.Flavor, MAX(g.Price) AS MaxPrice, MIN(g.Price) AS MinPrice, AVG(g.Price) AS AveragePrice FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor",
          "SELECT Flavor, MAX(Price), MIN(Price), AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAXIMUM(Price), MINIMUM(Price), AVERAGE(Price) FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, HighestPrice = MAX(Price), LowestPrice = MIN(Price), AveragePrice = AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor",
          "SELECT Flavor, MAX(Price) AS 'Max Price', MIN(Price) AS 'Min Price', AVG(Price) AS 'Avg Price' FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) AS Maximum, MIN(Price) AS Minimum, AVG(Price) AS Average FROM goods GROUP BY Flavor ORDER BY Flavor ASCENDING",
          "SELECT Flavor, MAX(Price) AS Max_Price, MIN(Price) AS Min_Price, AVG(Price) AS Avg_Price FROM goods GROUP BY Flavor ORDER BY Flavor ASC",
          "SELECT Flavor, MAX(Price) AS 'Maximum Price', MIN(Price) AS 'Minimum Price', AVG(Price) AS 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor ASC"
        ]
      ]
    },
    {
      "id": 1559,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT g.Food, MIN(g.Price) AS Lowest, MAX(g.Price) AS Highest FROM goods g GROUP BY g.Food ORDER BY g.Food",
          "SELECT Food, MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS Min_Price, MAX(Price) AS Max_Price FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS LowPrice, MAX(Price) AS HighPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS Lowest_Price, MAX(Price) AS Highest_Price FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food ASCENDING",
          "SELECT Food, MIN(Price) AS Minimum_Price, MAX(Price) AS Maximum_Price FROM goods GROUP BY Food ORDER BY Food ASCENDING"
        ]
      ]
    },
    {
      "id": 1560,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price), MAX(Price) FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT g.Food, MIN(g.Price) AS MinimumPrice, MAX(g.Price) AS MaximumPrice FROM goods g GROUP BY g.Food ORDER BY g.Food",
          "SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS Min_Price, MAX(Price) AS Max_Price FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MINIMUM(Price), MAXIMUM(Price) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, LEAST(Price), GREATEST(Price) FROM goods GROUP BY Food ORDER BY Food",
          "SELECT Food, MIN(Price) AS Minimum, MAX(Price) AS Maximum FROM goods GROUP BY Food ORDER BY Food ASC",
          "SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food ASCENDING",
          "SELECT Food, MIN(Price) AS MinimumPrice, MAX(Price) AS MaximumPrice FROM goods GROUP BY Food ORDER BY Food ASCENDING"
        ]
      ]
    },
    {
      "id": 1561,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3",
          "SELECT Date, COUNT(ReceiptNumber) AS TotalReceipts FROM receipts GROUP BY Date ORDER BY TotalReceipts DESC LIMIT 3",
          "SELECT Date FROM (SELECT Date, COUNT(*) AS NumReceipts FROM receipts GROUP BY Date) AS ReceiptCounts ORDER BY NumReceipts DESC LIMIT 3",
          "SELECT TOP 3 Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC",
          "SELECT Date FROM receipts GROUP BY Date HAVING COUNT(ReceiptNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(ReceiptNumber) AS Count FROM receipts GROUP BY Date) AS Counts) LIMIT 3",
          "SELECT Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT Date, COUNT(ReceiptNumber) AS NumberOfReceipts FROM receipts GROUP BY Date ORDER BY NumberOfReceipts DESC LIMIT 3",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC, Date ASC LIMIT 3",
          "SELECT Date, COUNT(*) FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1562,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3",
          "SELECT Date, COUNT(ReceiptNumber) AS NumReceipts FROM receipts GROUP BY Date ORDER BY NumReceipts DESC LIMIT 3",
          "SELECT Date FROM (SELECT Date, COUNT(*) AS TotalReceipts FROM receipts GROUP BY Date) AS ReceiptCounts ORDER BY TotalReceipts DESC LIMIT 3",
          "SELECT TOP 3 Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC",
          "SELECT Date FROM receipts GROUP BY Date HAVING COUNT(ReceiptNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(ReceiptNumber) AS Count FROM receipts GROUP BY Date) AS Counts) LIMIT 3",
          "SELECT Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT r.Date FROM receipts r GROUP BY r.Date ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 3",
          "SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC, Date ASC LIMIT 3",
          "SELECT Date, COUNT(ReceiptNumber) AS Total FROM receipts GROUP BY Date ORDER BY Total DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1563,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT FirstName, LastName, COUNT(ReceiptNumber) AS ShoppingCount FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY ShoppingCount DESC LIMIT 1",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS TimesShopped FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY TimesShopped DESC LIMIT 1",
          "SELECT TOP 1 customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS NumberOfVisits FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id, customers.FirstName, customers.LastName ORDER BY NumberOfVisits DESC",
          "SELECT FirstName, LastName, COUNT(*) AS TotalVisits FROM customers, receipts WHERE customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY TotalVisits DESC FETCH FIRST 1 ROW ONLY",
          "SELECT c.FirstName, c.LastName, COUNT(*) AS VisitCount FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM receipts GROUP BY CustomerId) AS MaxCount)",
          "SELECT FirstName, LastName, MAX(Count) FROM (SELECT customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS Count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id) AS SubQuery",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS TotalReceipts FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY TotalReceipts DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(ReceiptNumber) AS NumberOfReceipts FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY NumberOfReceipts DESC LIMIT 1",
          "SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1",
          "SELECT FirstName, LastName, COUNT(ReceiptNumber) AS ReceiptCount FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY ReceiptCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1564,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId, COUNT(*) AS NumberOfPurchases FROM receipts GROUP BY CustomerId ORDER BY NumberOfPurchases DESC LIMIT 1",
          "SELECT TOP 1 CustomerId, COUNT(CustomerId) AS TotalPurchases FROM receipts GROUP BY CustomerId ORDER BY TotalPurchases DESC",
          "SELECT r.CustomerId, COUNT(r.CustomerId) AS PurchaseCount FROM receipts AS r GROUP BY r.CustomerId ORDER BY PurchaseCount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM receipts GROUP BY CustomerId) AS SubQuery)",
          "WITH PurchaseCounts AS (SELECT CustomerId, COUNT(*) AS NumPurchases FROM receipts GROUP BY CustomerId) SELECT CustomerId, NumPurchases FROM PurchaseCounts WHERE NumPurchases = (SELECT MAX(NumPurchases) FROM PurchaseCounts)",
          "SELECT CustomerId, COUNT(*) AS TotalPurchases FROM receipts GROUP BY CustomerId ORDER BY TotalPurchases DESC LIMIT 1",
          "SELECT r.CustomerId, COUNT(*) AS PurchaseCount FROM receipts r GROUP BY r.CustomerId ORDER BY PurchaseCount DESC LIMIT 1",
          "SELECT CustomerId, COUNT(CustomerId) AS PurchaseCount FROM receipts GROUP BY CustomerId ORDER BY PurchaseCount DESC LIMIT 1",
          "SELECT CustomerId, COUNT(*) AS NumberOfPurchases FROM receipts GROUP BY CustomerId HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM receipts GROUP BY CustomerId) t)",
          "SELECT CustomerId, COUNT(*) AS PurchaseCount FROM receipts GROUP BY CustomerId ORDER BY PurchaseCount DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1565,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) AS distinct_customers FROM receipts GROUP BY receipts.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS unique_visitors FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) FROM receipts r GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date ORDER BY Date",
          "SELECT r.Date, COUNT(DISTINCT c.Id) FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date HAVING COUNT(DISTINCT CustomerId) > 0",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) AS NumberOfDistinctCustomers FROM receipts r GROUP BY r.Date ORDER BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS DistinctCustomerCount FROM receipts GROUP BY Date ORDER BY Date DESC",
          "SELECT r.Date, COUNT(DISTINCT c.Id) AS DistinctVisitors FROM receipts r INNER JOIN customers c ON r.CustomerId = c.Id GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS TotalDistinctCustomers FROM receipts GROUP BY Date WITH ROLLUP"
        ]
      ]
    },
    {
      "id": 1566,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date, COUNT(DISTINCT CustomerId) AS customer_count FROM receipts GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) AS NumberOfCustomers FROM receipts r GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date",
          "SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) FROM receipts GROUP BY receipts.Date",
          "SELECT Date, COUNT(*) FROM (SELECT DISTINCT Date, CustomerId FROM receipts) AS UniqueVisits GROUP BY Date",
          "SELECT r.Date, COUNT(DISTINCT c.Id) AS customer_count FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS TotalCustomers FROM receipts GROUP BY Date ORDER BY Date",
          "SELECT Date AS VisitDate, COUNT(DISTINCT CustomerId) AS TotalVisitors FROM receipts GROUP BY VisitDate",
          "SELECT r.Date, COUNT(DISTINCT r.CustomerId) AS Visitors FROM receipts r GROUP BY r.Date ORDER BY r.Date",
          "SELECT Date, COUNT(DISTINCT CustomerId) AS CountOfCustomers FROM receipts GROUP BY Date ORDER BY Date DESC"
        ]
      ]
    },
    {
      "id": 1567,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart')))",
          "SELECT DISTINCT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT c.FirstName, c.LastName FROM customers AS c INNER JOIN receipts AS r ON c.Id = r.CustomerId INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts INNER JOIN items ON ReceiptNumber = Receipt INNER JOIN goods ON Item = Id WHERE Flavor = 'apple' AND Food = 'Tart')",
          "SELECT c.FirstName, c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Flavor = 'apple' AND g.Food = 'Tart')",
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart' GROUP BY c.FirstName, c.LastName",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart')",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tart' ORDER BY c.LastName, c.FirstName",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN (receipts r INNER JOIN (items i INNER JOIN goods g ON i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tart') ON r.ReceiptNumber = i.Receipt) ON c.Id = r.CustomerId"
        ]
      ]
    },
    {
      "id": 1568,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tarts')))",
          "SELECT DISTINCT customers.FirstName, customers.LastName FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT c.FirstName, c.LastName FROM customers AS c INNER JOIN receipts AS r ON c.Id = r.CustomerId INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts INNER JOIN items ON ReceiptNumber = Receipt INNER JOIN goods ON Item = Id WHERE Flavor = 'apple' AND Food = 'Tarts')",
          "SELECT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tarts'",
          "SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tarts'",
          "SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts')",
          "SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts' ORDER BY c.LastName, c.FirstName",
          "SELECT DISTINCT FirstName, LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'Tarts'"
        ]
      ]
    },
    {
      "id": 1569,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(price) FROM goods WHERE Food = 'Croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cookies' AND g.Price < (SELECT MIN(price) FROM goods WHERE Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cookies' AND goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'Croissant')",
          "SELECT Id FROM goods AS g WHERE g.Food = 'Cookies' AND g.Price < (SELECT MIN(Price) FROM goods AS g2 WHERE g2.Food = 'Croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cookies' AND EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Croissant' AND g.Price < g2.Price)",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < ALL (SELECT Price FROM goods WHERE Food = 'Croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cookies' AND g.Price < ALL (SELECT Price FROM goods g2 WHERE g2.Food = 'Croissant')",
          "SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods g WHERE g.Food = 'Croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cookies' AND goods.Price < ANY (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')"
        ]
      ]
    },
    {
      "id": 1570,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'cookies' AND goods.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods AS g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods g WHERE g.Food = 'croissant')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods g WHERE g.Food = 'croissant')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'cookies' AND goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE Food = 'croissant')",
          "SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')"
        ]
      ]
    },
    {
      "id": 1571,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods g WHERE g.Food = 'Tart')",
          "SELECT g1.Id FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Price >= (SELECT AVG(g2.Price) FROM goods g2 WHERE g2.Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart' GROUP BY Food)",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart' GROUP BY Food)",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods g WHERE g.Food = 'Tart' GROUP BY g.Food)",
          "SELECT g1.Id FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Price >= (SELECT AVG(g2.Price) FROM goods g2 WHERE g2.Food = 'Tart' GROUP BY g2.Food)",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart' HAVING Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart' HAVING Food = 'Tart')"
        ]
      ]
    },
    {
      "id": 1572,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods g WHERE g.Food = 'Tart')",
          "SELECT goods.Id FROM goods WHERE goods.Food = 'Cake' AND goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart')",
          "SELECT Id FROM goods AS g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods AS t WHERE t.Food = 'Tart')",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(t.Price) FROM goods t WHERE t.Food = 'Tart')",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods t WHERE t.Food = 'Tart' GROUP BY t.Food)",
          "SELECT Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart' GROUP BY Food)",
          "SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods t WHERE t.Food = 'Tart' HAVING AVG(Price) > 0)",
          "SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(t.Price) FROM goods t WHERE t.Food = 'Tart' HAVING AVG(t.Price) > 0)"
        ]
      ]
    },
    {
      "id": 1573,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT g.Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)",
          "SELECT goods.Id FROM goods WHERE goods.Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) AS AvgPrice FROM goods)",
          "SELECT g.Id FROM goods AS g WHERE g.Price > (2 * (SELECT AVG(Price) FROM goods AS sub))",
          "SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods)",
          "SELECT Id FROM goods g WHERE g.Price > (SELECT AVG(Price) * 2 FROM goods)",
          "SELECT goods.Id FROM goods WHERE goods.Price > (SELECT AVG(Price) FROM goods) * 2",
          "SELECT Id FROM goods WHERE Price > (2 * (SELECT AVG(Price) FROM goods WHERE Price IS NOT NULL))"
        ]
      ]
    },
    {
      "id": 1574,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT g.Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)",
          "SELECT goods.Id FROM goods WHERE goods.Price > 2 * (SELECT AVG(Price) FROM goods)",
          "SELECT Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(Price) FROM goods g)",
          "SELECT g.Id FROM goods g WHERE g.Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT Id FROM goods WHERE Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT goods.Id FROM goods WHERE goods.Price > (2 * (SELECT AVG(Price) FROM goods))",
          "SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(g.Price) FROM goods g)",
          "SELECT g.Id FROM goods g WHERE g.Price > 2 * (SELECT AVG(p.Price) FROM goods p)"
        ]
      ]
    },
    {
      "id": 1575,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price ASC",
          "SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC",
          "SELECT Id AS ItemID, Flavor AS Taste, Food AS Type FROM goods ORDER BY Price ASC",
          "SELECT * FROM goods ORDER BY Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price DESC",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY Price DESC",
          "SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY Price DESC",
          "SELECT Id AS ItemID, Flavor AS Taste, Food AS Type FROM goods ORDER BY Price DESC",
          "SELECT * FROM goods ORDER BY Price DESC"
        ]
      ]
    },
    {
      "id": 1576,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price ASC",
          "SELECT g.Id, g.Flavor, g.Food FROM goods AS g ORDER BY g.Price",
          "SELECT Id AS ItemID, Flavor AS Taste, Food AS Type FROM goods ORDER BY Price ASC",
          "SELECT * FROM goods ORDER BY Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price DESC",
          "SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY Price",
          "SELECT Id, Flavor, Food FROM goods g ORDER BY g.Price ASC",
          "SELECT Id, Flavor, Food FROM goods ORDER BY Price ASC, Id ASC",
          "SELECT Id, Flavor, Food, Price FROM goods ORDER BY Price ASC"
        ]
      ]
    },
    {
      "id": 1577,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cakes' ORDER BY Flavor",
          "SELECT g.Id, g.Flavor FROM goods AS g WHERE g.Food = 'Cakes' ORDER BY g.Flavor ASC",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'Cakes' ORDER BY goods.Flavor ASC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cakes' ORDER BY Flavor ASC",
          "SELECT DISTINCT Id, Flavor FROM goods WHERE Food = 'Cakes' ORDER BY Flavor",
          "SELECT g.Id AS GoodsID, g.Flavor AS CakeFlavor FROM goods g WHERE g.Food = 'Cakes' ORDER BY g.Flavor",
          "SELECT Id AS CakeID, Flavor AS CakeFlavor FROM goods WHERE Food = 'Cakes' ORDER BY Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods INNER JOIN items ON goods.Id = items.Item WHERE goods.Food = 'Cakes' ORDER BY goods.Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'Cakes' GROUP BY Id, Flavor ORDER BY Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods LEFT JOIN items ON goods.Id = items.Item WHERE goods.Food = 'Cakes' ORDER BY goods.Flavor ASC"
        ]
      ]
    },
    {
      "id": 1578,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cake' ORDER BY g.Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor ASC",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cake' ORDER BY goods.Flavor ASC",
          "SELECT Id AS CakeID, Flavor AS CakeFlavor FROM goods WHERE Food = 'cake' ORDER BY Flavor",
          "SELECT goods.Id, goods.Flavor FROM goods WHERE Food LIKE 'cake' ORDER BY Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor, Id",
          "SELECT g.Id, g.Flavor FROM goods AS g WHERE g.Food = 'cake' ORDER BY g.Flavor ASC",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor DESC",
          "SELECT DISTINCT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor",
          "SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor ASC, Id ASC"
        ]
      ]
    },
    {
      "id": 1579,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10)",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND g.Id NOT IN (SELECT i.Item FROM items i GROUP BY i.Item HAVING COUNT(i.Item) > 10)",
          "SELECT goods.Id FROM goods WHERE Flavor = 'chocolate' AND NOT EXISTS (SELECT 1 FROM items WHERE goods.Id = items.Item GROUP BY items.Item HAVING COUNT(items.Item) > 10)",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) > 10)",
          "SELECT g.Id FROM goods g LEFT JOIN (SELECT Item, COUNT(*) as cnt FROM items GROUP BY Item HAVING COUNT(*) > 10) i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' AND i.Item IS NULL",
          "SELECT DISTINCT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND g.Id NOT IN (SELECT i.Item FROM items i GROUP BY i.Item HAVING COUNT(*) > 10)",
          "SELECT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND g.Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10)",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' EXCEPT SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10",
          "SELECT goods.Id FROM goods LEFT JOIN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10) as PopularItems ON goods.Id = PopularItems.Item WHERE goods.Flavor = 'chocolate' AND PopularItems.Item IS NULL",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) > 10)"
        ]
      ]
    },
    {
      "id": 1580,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(*) <= 10",
          "SELECT G.Id FROM goods G INNER JOIN items I ON G.Id = I.Item WHERE G.Flavor = 'chocolate' GROUP BY I.Item HAVING COUNT(I.Item) <= 10",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) <= 10)",
          "SELECT DISTINCT goods.Id FROM goods, items WHERE goods.Id = items.Item AND goods.Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(items.Item) <= 10",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(items.Item) <= 10",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(*) <= 10)",
          "SELECT goods.Id FROM goods INNER JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(*) <= 10",
          "SELECT G.Id FROM goods G, items I WHERE G.Id = I.Item AND G.Flavor = 'chocolate' GROUP BY I.Item HAVING COUNT(*) <= 10",
          "SELECT Id FROM goods WHERE Flavor = 'chocolate' AND Id IN (SELECT Item FROM items GROUP BY Item HAVING COUNT(Item) <= 10)",
          "SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(items.Item) <= 10"
        ]
      ]
    },
    {
      "id": 1581,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)",
          "SELECT g.Flavor FROM goods g LEFT JOIN goods t ON g.Flavor = t.Flavor AND t.Food = 'Tart' WHERE g.Food = 'Cake' AND t.Flavor IS NULL",
          "WITH CakeFlavors AS (SELECT Flavor FROM goods WHERE Food = 'Cake'), TartFlavors AS (SELECT Flavor FROM goods WHERE Food = 'Tart') SELECT Flavor FROM CakeFlavors WHERE Flavor NOT IN (SELECT Flavor FROM TartFlavors)",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT Flavor FROM (SELECT Flavor FROM goods WHERE Food = 'Cake') AS CakeFlavors WHERE Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' MINUS SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT NULL FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)"
        ]
      ]
    },
    {
      "id": 1582,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods WHERE Flavor = g.Flavor AND Food = 'Tart')",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'",
          "SELECT DISTINCT g1.Flavor FROM goods g1 LEFT JOIN goods g2 ON g1.Flavor = g2.Flavor AND g2.Food = 'Tart' WHERE g1.Food = 'Cake' AND g2.Flavor IS NULL",
          "SELECT Flavor FROM (SELECT Flavor FROM goods WHERE Food = 'Cake') AS CakeFlavors WHERE Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT Flavor FROM goods AS g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT * FROM goods AS g2 WHERE g2.Food = 'Tart' AND g1.Flavor = g2.Flavor)",
          "WITH TartFlavors AS (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Tart') SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM TartFlavors)",
          "SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart') GROUP BY Flavor",
          "SELECT DISTINCT Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')",
          "SELECT DISTINCT g.Flavor FROM goods g LEFT OUTER JOIN goods t ON g.Flavor = t.Flavor AND t.Food = 'Tart' WHERE g.Food = 'Cake' AND t.Flavor IS NULL"
        ]
      ]
    },
    {
      "id": 1583,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT G.Flavor, G.Food, COUNT(*) AS Popularity FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Id ORDER BY Popularity DESC LIMIT 3",
          "SELECT Flavor, Food, COUNT(Item) AS TotalSold FROM goods INNER JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY TotalSold DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT TOP 3 goods.Flavor, goods.Food, COUNT(items.Item) AS Count FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id, goods.Flavor, goods.Food ORDER BY Count DESC",
          "SELECT goods.Flavor, goods.Food, COUNT(*) AS NumberOfSales FROM goods, items WHERE goods.Id = items.Item GROUP BY goods.Id ORDER BY NumberOfSales DESC LIMIT 3",
          "SELECT Flavor, Food FROM goods WHERE Id IN (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3)",
          "SELECT G.Flavor, G.Food FROM goods G, items I WHERE G.Id = I.Item GROUP BY G.Id, G.Flavor, G.Food ORDER BY COUNT(I.Item) DESC LIMIT 3",
          "SELECT FIRST 3 Flavor, Food, COUNT(Item) AS Popularity FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY Popularity DESC",
          "SELECT Flavor, Food, COUNT(Item) AS Popularity FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY Popularity DESC LIMIT 3",
          "SELECT * FROM (SELECT goods.Flavor, goods.Food, COUNT(items.Item) AS TotalSales FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY TotalSales DESC) WHERE ROWNUM <= 3",
          "SELECT goods.Flavor, goods.Food, COUNT(items.Item) AS TotalOrders FROM goods LEFT JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY TotalOrders DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1584,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT G.Food, COUNT(*) AS TotalPurchases FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY TotalPurchases DESC LIMIT 3",
          "SELECT TOP 3 G.Food, COUNT(I.Item) AS NumberOfPurchases FROM goods G INNER JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY NumberOfPurchases DESC",
          "SELECT G.Food FROM goods G, items I WHERE G.Id = I.Item GROUP BY G.Food ORDER BY COUNT(I.Item) DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT G.Food, COUNT(*) AS PurchaseCount FROM goods G LEFT JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY PurchaseCount DESC LIMIT 3",
          "SELECT G.Food, COUNT(I.Item) AS Total FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food HAVING COUNT(I.Item) > 0 ORDER BY Total DESC LIMIT 3",
          "SELECT G.Food FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY COUNT(*) DESC LIMIT 3",
          "SELECT FIRST 3 G.Food, COUNT(*) AS TotalOrders FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY TotalOrders DESC",
          "SELECT G.Food, COUNT(I.Item) AS TotalPurchases FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY TotalPurchases DESC LIMIT 3",
          "SELECT G.Food, COUNT(*) AS TotalCount FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY TotalCount DESC LIMIT 3",
          "SELECT G.Food, COUNT(I.Item) AS PurchaseFrequency FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY PurchaseFrequency DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 1585,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId HAVING SUM(Price) > 150",
          "SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT DISTINCT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT c.Id FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150)",
          "SELECT CustomerId FROM (SELECT CustomerId, SUM(Price) AS TotalSpent FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId) AS Spending WHERE TotalSpent > 150",
          "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT CustomerId FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId HAVING SUM(Price) > 150",
          "SELECT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING SUM(g.Price) > 150"
        ]
      ]
    },
    {
      "id": 1586,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING SUM(goods.Price) > 150",
          "SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT DISTINCT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT r.CustomerId FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT CustomerId FROM (SELECT receipts.CustomerId, SUM(goods.Price) AS TotalSpent FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.CustomerId) AS SubQuery WHERE TotalSpent > 150",
          "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE SUM(g.Price) > 150 GROUP BY r.CustomerId",
          "SELECT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING SUM(g.Price) > 150",
          "SELECT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150",
          "SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150"
        ]
      ]
    },
    {
      "id": 1587,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId FROM (SELECT receipts.CustomerId, AVG(goods.Price) AS AvgSpending FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.CustomerId) AS Spending WHERE AvgSpending > 5",
          "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT DISTINCT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT CustomerId FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5",
          "SELECT CustomerId FROM (SELECT CustomerId, AVG(Price) AS AveragePrice FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId) sub WHERE AveragePrice > 5",
          "SELECT DISTINCT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING AVG(g.Price) > 5",
          "SELECT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING AVG(g.Price) > 5",
          "SELECT CustomerId FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId HAVING AVG(Price) > 5",
          "SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5"
        ]
      ]
    },
    {
      "id": 1588,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5",
          "SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT DISTINCT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT c.Id FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5)",
          "SELECT r.CustomerId FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT CustomerId FROM (SELECT r.CustomerId, AVG(g.Price) AS AveragePrice FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId) AS SubQuery WHERE AveragePrice > 5",
          "SELECT DISTINCT CustomerId FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY CustomerId HAVING AVG(Price) > 5",
          "SELECT r.CustomerId FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5",
          "SELECT CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING AVG(g.Price) > 5",
          "SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5"
        ]
      ]
    },
    {
      "id": 1589,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT R.Date FROM receipts AS R JOIN items AS I ON R.ReceiptNumber = I.Receipt JOIN goods AS G ON I.Item = G.Id GROUP BY R.Date HAVING SUM(G.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 100))",
          "SELECT receipts.Date, SUM(goods.Price) AS TotalSales FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date HAVING TotalSales > 100",
          "SELECT Date FROM (SELECT receipts.Date, SUM(goods.Price) AS Total FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date) AS Sales WHERE Total > 100",
          "SELECT DISTINCT receipts.Date FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY receipts.Date HAVING SUM(goods.Price) > 100",
          "SELECT R.Date FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id GROUP BY R.Date HAVING SUM(G.Price) > 100",
          "SELECT Date FROM receipts JOIN items ON ReceiptNumber = Receipt JOIN goods ON Item = Id GROUP BY Date HAVING SUM(Price) > 100",
          "SELECT Date FROM receipts r JOIN (SELECT Receipt, SUM(Price) AS TotalPrice FROM items JOIN goods ON Item = Id GROUP BY Receipt) t ON r.ReceiptNumber = t.Receipt WHERE TotalPrice > 100 GROUP BY Date",
          "SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date HAVING SUM(goods.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt HAVING SUM(Price) > 100)"
        ]
      ]
    },
    {
      "id": 1590,
      "db_id": "bakery_1",
      "infer_predictions": [
        [
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods GROUP BY Receipt HAVING SUM(Price) > 100))",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM (SELECT receipts.Date, SUM(goods.Price) AS Total FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date) AS Sales WHERE Total > 100",
          "SELECT DISTINCT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT r.Date FROM receipts r INNER JOIN (SELECT Receipt, SUM(Price) AS TotalPrice FROM items JOIN goods ON items.Item = goods.Id GROUP BY Receipt) AS TotalSales ON r.ReceiptNumber = TotalSales.Receipt WHERE TotalSales.TotalPrice > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items i JOIN goods g ON i.Item = g.Id GROUP BY Receipt HAVING SUM(Price) > 100)",
          "SELECT r.Date FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber GROUP BY i.Receipt HAVING SUM(g.Price) > 100)",
          "SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100",
          "SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items GROUP BY Receipt HAVING SUM((SELECT Price FROM goods WHERE Id = Item)) > 100)",
          "SELECT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100"
        ]
      ]
    },
    {
      "id": 1591,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver",
          "SELECT COUNT(Driver_ID) FROM driver",
          "SELECT COUNT(Driver) FROM driver",
          "SELECT COUNT(1) FROM driver",
          "SELECT COUNT(Driver_ID) AS NumberOfDrivers FROM driver",
          "SELECT COUNT(*) AS TotalDrivers FROM driver",
          "SELECT COUNT(Driver) AS DriverCount FROM driver",
          "SELECT COUNT(DISTINCT Driver_ID) FROM driver",
          "SELECT COUNT(DISTINCT Driver) FROM driver",
          "SELECT COUNT(DISTINCT Driver_ID) AS UniqueDriverCount FROM driver"
        ]
      ]
    },
    {
      "id": 1592,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver",
          "SELECT COUNT(Driver_ID) FROM driver",
          "SELECT COUNT(1) FROM driver",
          "SELECT COUNT(Driver_ID) AS TotalDrivers FROM driver",
          "SELECT COUNT(*) AS TotalDrivers FROM driver",
          "SELECT COUNT(Driver) FROM driver",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID IS NOT NULL",
          "SELECT COUNT(*) FROM driver WHERE Driver_ID IS NOT NULL",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID > 0",
          "SELECT COUNT(*) FROM driver WHERE Driver IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1593,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) AS DriverCount FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(*) FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS NumberOfDrivers FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT d.Make, COUNT(*) AS DriverCount FROM driver d WHERE d.Points > 150 GROUP BY d.Make"
        ]
      ]
    },
    {
      "id": 1594,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(*) AS DriverCount FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(*) FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(Driver) FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(*) AS NumberOfDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d WHERE d.Points > 150 GROUP BY d.Make",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make HAVING MAX(Points) > 150",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make HAVING Points > 150",
          "SELECT Make, COUNT(*) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make",
          "SELECT Make, COUNT(Driver_ID) AS CountOfDrivers FROM driver WHERE Points > 150 GROUP BY Make"
        ]
      ]
    },
    {
      "id": 1595,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
          "SELECT driver.Make, AVG(driver.Age) AS Avg_Age FROM driver GROUP BY driver.Make",
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) AS AverageAge FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) AS AvgAge FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Make",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Average_Age DESC",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Average_Age ASC",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Make ASC",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Make DESC"
        ]
      ]
    },
    {
      "id": 1596,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make",
          "SELECT driver.Make, AVG(driver.Age) AS Avg_Age FROM driver GROUP BY driver.Make",
          "SELECT Make, AVG(Age) FROM driver GROUP BY Make",
          "SELECT AVG(Age), Make FROM driver GROUP BY Make",
          "SELECT Make, AVG(Age) AS AverageAge FROM driver GROUP BY Make ORDER BY Make",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Average_Age DESC",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Average_Age ASC",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make HAVING AVG(Age) IS NOT NULL",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver WHERE Age IS NOT NULL GROUP BY Make",
          "SELECT Make, AVG(Age) AS Average_Age FROM driver WHERE Age > 0 GROUP BY Make"
        ]
      ]
    },
    {
      "id": 1597,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(Laps) FROM driver WHERE Age < 20",
          "SELECT AVG(Laps) AS AverageLaps FROM driver WHERE Age < 20",
          "SELECT AVG(driver.Laps) FROM driver WHERE driver.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 GROUP BY Age",
          "SELECT AVG(Laps) AS Average_Laps FROM driver WHERE Age < 20",
          "SELECT AVG(Laps) FROM driver d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps IS NOT NULL",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps > 0",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps >= 0",
          "SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps IS NOT NULL AND Laps > 0"
        ]
      ]
    },
    {
      "id": 1598,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(Laps) FROM driver WHERE Age < 20",
          "SELECT AVG(Laps) AS AverageLaps FROM driver WHERE Age < 20",
          "SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20",
          "SELECT AVG(Laps) FROM driver WHERE Age BETWEEN 0 AND 19",
          "SELECT AVG(Laps) FROM driver WHERE Age <= 19",
          "SELECT AVG(Laps) FROM driver GROUP BY Age HAVING Age < 20",
          "SELECT AVG(Laps) AS Average_Laps FROM driver WHERE Age < 20",
          "SELECT AVG(Laps) FROM driver d WHERE d.Age < 20 GROUP BY d.Age",
          "SELECT AVG(Laps) FROM driver WHERE Age IN (SELECT Age FROM driver WHERE Age < 20)",
          "SELECT AVG(Laps) FROM driver d WHERE d.Age < 20 AND d.Laps IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1599,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner",
          "SELECT Manager, Sponsor FROM team SORT BY Car_Owner",
          "SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT Manager AS Team_Manager, Sponsor AS Team_Sponsor FROM team ORDER BY Car_Owner",
          "SELECT `Manager`, `Sponsor` FROM `team` ORDER BY `Car_Owner`",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner, Sponsor",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner DESC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner, Manager",
          "SELECT Manager, Sponsor, Car_Owner FROM team ORDER BY Car_Owner"
        ]
      ]
    },
    {
      "id": 1600,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner",
          "SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner",
          "SELECT Manager AS Team_Manager, Sponsor AS Team_Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT `Manager`, `Sponsor` FROM `team` ORDER BY `Car_Owner`",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team t ORDER BY t.Car_Owner ASC",
          "SELECT t.Manager, t.Sponsor FROM team AS t ORDER BY t.Car_Owner ASC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner, Team_ID",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner DESC",
          "SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC, Team_ID ASC"
        ]
      ]
    },
    {
      "id": 1601,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(DISTINCT Team_ID) > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(t.Team_ID) > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(*) > 1",
          "SELECT Make FROM (SELECT Make, COUNT(Team_ID) AS TeamCount FROM team GROUP BY Make) AS subquery WHERE TeamCount > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1 ORDER BY Make",
          "SELECT DISTINCT Make FROM team WHERE Make IN (SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1)",
          "SELECT Make, COUNT(Team_ID) AS NumberOfTeams FROM team GROUP BY Make HAVING NumberOfTeams > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1 LIMIT 100",
          "SELECT Make, COUNT(*) FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1"
        ]
      ]
    },
    {
      "id": 1602,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1",
          "SELECT Make, COUNT(*) AS TeamCount FROM team GROUP BY Make HAVING TeamCount > 1",
          "SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(t.Team_ID) > 1",
          "SELECT Make FROM (SELECT Make, COUNT(*) AS num_teams FROM team GROUP BY Make) AS subquery WHERE num_teams > 1",
          "SELECT DISTINCT Make FROM team WHERE Make IN (SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1)",
          "SELECT Make, COUNT(Team_ID) AS NumberOfTeams FROM team GROUP BY Make HAVING NumberOfTeams > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(DISTINCT Team_ID) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1",
          "SELECT Make, COUNT(*) FROM team GROUP BY Make HAVING COUNT(*) > 1",
          "SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1"
        ]
      ]
    },
    {
      "id": 1603,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'",
          "SELECT DISTINCT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner LIKE 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner LIKE 'Buddy Arrington'",
          "SELECT DISTINCT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' GROUP BY Make",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' AND Make IS NOT NULL",
          "SELECT t.Make FROM team AS t WHERE t.Car_Owner = 'Buddy Arrington'"
        ]
      ]
    },
    {
      "id": 1604,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'",
          "SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner LIKE 'Buddy Arrington'",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' LIMIT 1",
          "SELECT DISTINCT Make FROM team WHERE Car_Owner = 'Buddy Arrington'",
          "SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington' AND Make IS NOT NULL",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' AND Make <> ''",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' ORDER BY Make",
          "SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington' GROUP BY Make"
        ]
      ]
    },
    {
      "id": 1605,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver",
          "SELECT MAX(Points) MaximumPoints, MIN(Points) MinimumPoints FROM driver",
          "SELECT MAX(driver.Points) AS Maximum_Points, MIN(driver.Points) AS Minimum_Points FROM driver",
          "SELECT MAX(Points), MIN(Points) FROM driver",
          "SELECT (SELECT MAX(Points) FROM driver) AS MaxPoints, (SELECT MIN(Points) FROM driver) AS MinPoints",
          "SELECT MAX(Points) Max_Points, MIN(Points) Min_Points FROM driver",
          "SELECT MAX(Points) as 'Maximum Points', MIN(Points) as 'Minimum Points' FROM driver",
          "SELECT MAX(Points) 'Max Points', MIN(Points) 'Min Points' FROM driver",
          "SELECT MAX(Points) FROM driver AS MaximumPoints, MIN(Points) FROM driver AS MinimumPoints",
          "SELECT MAX(Points) AS 'Max Points', MIN(Points) AS 'Min Points' FROM driver"
        ]
      ]
    },
    {
      "id": 1606,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(Points) AS HighestPoints, MIN(Points) AS LowestPoints FROM driver",
          "SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver",
          "SELECT MAX(Points) Highest, MIN(Points) Lowest FROM driver",
          "SELECT (SELECT MAX(Points) FROM driver) AS HighestPoints, (SELECT MIN(Points) FROM driver) AS LowestPoints",
          "SELECT MAX(d.Points) AS Highest, MIN(d.Points) AS Lowest FROM driver d",
          "SELECT TOP 1 MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver",
          "SELECT MAX(Points) AS MaximumPoints, MIN(Points) AS MinimumPoints FROM driver",
          "SELECT MAX(Points) AS 'Highest Points', MIN(Points) AS 'Lowest Points' FROM driver",
          "SELECT MAX(Points), MIN(Points) FROM driver",
          "SELECT MAX(Points) AS Max_Points, MIN(Points) AS Min_Points FROM driver"
        ]
      ]
    },
    {
      "id": 1607,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) AS NumberOfDrivers FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points BETWEEN 0 AND 149",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points BETWEEN 0 AND 149",
          "SELECT COUNT(*) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points <= 149"
        ]
      ]
    },
    {
      "id": 1608,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150",
          "SELECT COUNT(*) AS NumberOfDrivers FROM driver WHERE Points < 150",
          "SELECT COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points BETWEEN 0 AND 149",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points BETWEEN 0 AND 149",
          "SELECT COUNT(*) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(Driver_ID) FROM driver d WHERE d.Points < 150",
          "SELECT COUNT(*) FROM driver WHERE Points <= 149",
          "SELECT COUNT(Driver_ID) FROM driver WHERE Points <= 149"
        ]
      ]
    },
    {
      "id": 1609,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Age ASC",
          "SELECT Driver FROM driver ORDER BY Age",
          "SELECT Driver FROM driver WHERE Age IS NOT NULL ORDER BY Age ASC",
          "SELECT d.Driver FROM driver d ORDER BY d.Age ASC",
          "SELECT Driver FROM driver ORDER BY Age ASCENDING",
          "SELECT Driver, Age FROM driver ORDER BY Age ASC",
          "SELECT Driver FROM driver SORT BY Age ASC",
          "SELECT Driver FROM driver AS d ORDER BY d.Age ASC",
          "SELECT Driver FROM driver ORDER BY CONVERT(INT, Age) ASC",
          "SELECT Driver FROM driver ORDER BY CAST(Age AS INTEGER) ASC"
        ]
      ]
    },
    {
      "id": 1610,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Age ASC",
          "SELECT Driver FROM driver ORDER BY Age",
          "SELECT Driver FROM driver SORT BY Age ASCENDING",
          "SELECT Driver FROM driver WHERE Age IS NOT NULL ORDER BY Age",
          "SELECT Driver FROM driver WHERE Age > 0 ORDER BY Age ASC",
          "SELECT Driver FROM driver ORDER BY Age ASCENDING",
          "SELECT Driver, Age FROM driver ORDER BY Age",
          "SELECT Driver AS Name FROM driver ORDER BY Age ASC",
          "SELECT d.Driver FROM driver d ORDER BY d.Age ASC",
          "SELECT Driver FROM driver ORDER BY Age ASC, Driver ASC"
        ]
      ]
    },
    {
      "id": 1611,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver FROM driver ORDER BY Points DESC",
          "SELECT driver.Driver FROM driver ORDER BY driver.Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESCENDING",
          "SELECT d.Driver FROM driver d ORDER BY d.Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver ASC",
          "SELECT Driver, Points FROM driver ORDER BY Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESC, Driver",
          "SELECT Driver FROM driver d ORDER BY d.Points DESC",
          "SELECT Driver AS DriverName FROM driver ORDER BY Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1612,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver, Points FROM driver ORDER BY Points DESC",
          "SELECT Driver, Points FROM driver ORDER BY Points DESCENDING",
          "SELECT d.Driver, d.Points FROM driver d ORDER BY d.Points DESC",
          "SELECT Driver AS DriverName, Points AS DriverPoints FROM driver ORDER BY Points DESC",
          "SELECT * FROM driver ORDER BY Points DESC",
          "SELECT Driver FROM driver ORDER BY Points DESC",
          "SELECT Driver, Points FROM driver ORDER BY Points DESC, Driver ASC",
          "SELECT Driver, Points FROM driver ORDER BY Points DESC LIMIT ALL",
          "SELECT Driver, Points FROM driver ORDER BY Points DESC, Driver",
          "SELECT Driver, Points FROM driver ORDER BY Points DESCENDING, Driver ASCENDING"
        ]
      ]
    },
    {
      "id": 1613,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver, Country FROM driver",
          "SELECT driver.Driver, driver.Country FROM driver",
          "SELECT d.Driver, d.Country FROM driver d",
          "SELECT Driver AS DriverName, Country AS DriverCountry FROM driver",
          "SELECT `Driver`, `Country` FROM `driver`",
          "SELECT Driver, Country FROM driver ORDER BY Country",
          "SELECT DISTINCT Driver, Country FROM driver",
          "SELECT driver.Driver, driver.Country FROM driver ORDER BY driver.Driver",
          "SELECT Driver, Country FROM driver WHERE Driver IS NOT NULL",
          "SELECT Driver, Country FROM driver GROUP BY Driver, Country"
        ]
      ]
    },
    {
      "id": 1614,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Driver, Country FROM driver",
          "SELECT d.Driver, d.Country FROM driver AS d",
          "SELECT driver.Driver AS Name, driver.Country AS Nationality FROM driver",
          "SELECT `Driver`, `Country` FROM `driver`",
          "SELECT Driver AS DriverName, Country AS DriverCountry FROM driver",
          "SELECT d.Driver, d.Country FROM driver d",
          "SELECT Driver, Country FROM driver ORDER BY Driver",
          "SELECT DISTINCT Driver, Country FROM driver",
          "SELECT driver.Driver, driver.Country FROM driver GROUP BY Driver, Country",
          "SELECT * FROM driver SELECT Driver, Country"
        ]
      ]
    },
    {
      "id": 1615,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'",
          "SELECT MAX(Points) AS MaxPoints FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'",
          "SELECT MAX(d.Points) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d JOIN country c ON d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(d.Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(d.Points) AS MaximumPoints FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver WHERE Country = (SELECT Country_Id FROM country WHERE Capital = 'Dublin')",
          "SELECT MAX(Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id AND c.Capital = 'Dublin' GROUP BY d.Country"
        ]
      ]
    },
    {
      "id": 1616,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'",
          "SELECT MAX(Points) AS MaximumPoints FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver INNER JOIN country ON driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(driver.Points) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Capital = 'Dublin'",
          "SELECT MAX(Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin' GROUP BY driver.Country",
          "SELECT MAX(Points) FROM driver AS d JOIN country AS c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1617,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) AS AverageAge FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver, country WHERE driver.Country = country.Country_Id AND country.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver JOIN country ON driver.Country = country.Country_Id AND country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d INNER JOIN country c ON d.Country = c.Country_Id AND c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver LEFT JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d, country c WHERE d.Country = c.Country_Id AND c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'"
        ]
      ]
    },
    {
      "id": 1618,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country WHERE c.Official_native_language = 'English'",
          "SELECT AVG(Age) AS Average_Age FROM driver INNER JOIN country ON driver.Country = country.Country WHERE country.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver, country WHERE driver.Country = country.Country AND country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d, country c WHERE d.Country = c.Country AND c.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver JOIN country ON driver.Country = country.Country WHERE country.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) AS AverageDriverAge FROM driver JOIN country ON driver.Country = country.Country WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver INNER JOIN country ON driver.Country = country.Country AND country.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver INNER JOIN country ON driver.Country = country.Country WHERE country.Official_native_language = 'English'",
          "SELECT AVG(Age) FROM driver d INNER JOIN country c ON d.Country = c.Country WHERE c.Official_native_language = 'English'",
          "SELECT AVG(driver.Age) FROM driver, country WHERE driver.Country = country.Country AND country.Official_native_language = 'English' GROUP BY country.Official_native_language"
        ]
      ]
    },
    {
      "id": 1619,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT Country FROM driver WHERE Points > 150",
          "SELECT Country FROM driver WHERE Points > 150 GROUP BY Country",
          "SELECT Country FROM driver GROUP BY Country HAVING MAX(Points) > 150",
          "SELECT DISTINCT d.Country FROM driver d WHERE d.Points > 150",
          "SELECT d.Country FROM driver d WHERE d.Points > 150 GROUP BY d.Country",
          "SELECT d.Country FROM driver d GROUP BY d.Country HAVING MAX(d.Points) > 150",
          "SELECT Country FROM (SELECT Country, Points FROM driver) AS subquery WHERE Points > 150",
          "SELECT DISTINCT Country FROM driver d WHERE d.Points > 150",
          "SELECT Country FROM driver WHERE Points > 150 ORDER BY Country",
          "SELECT DISTINCT Country FROM (SELECT Country, Points FROM driver) AS subquery WHERE Points > 150"
        ]
      ]
    },
    {
      "id": 1620,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT DISTINCT Country FROM driver WHERE Points > 150",
          "SELECT Country FROM driver WHERE Points > 150 GROUP BY Country",
          "SELECT DISTINCT Country FROM driver GROUP BY Country HAVING MAX(Points) > 150",
          "SELECT Country FROM driver GROUP BY Country HAVING Points > 150",
          "SELECT Country FROM (SELECT Country, Points FROM driver) AS subquery WHERE Points > 150 GROUP BY Country",
          "SELECT DISTINCT d.Country FROM driver d WHERE d.Points > 150",
          "SELECT Country FROM driver WHERE Points > 150 DISTINCT",
          "SELECT DISTINCT Country FROM driver d WHERE d.Points > 150 ORDER BY Country",
          "SELECT Country FROM driver WHERE Points > 150 GROUP BY Country HAVING COUNT(*) > 0",
          "SELECT DISTINCT Country FROM driver WHERE Points > 150 ORDER BY Country ASC"
        ]
      ]
    },
    {
      "id": 1621,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT C.Capital FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT country.Capital FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT Capital FROM country WHERE Country_Id IN (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver))",
          "SELECT C.Capital FROM country AS C, driver AS D WHERE C.Country_Id = D.Country AND D.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points >= ALL (SELECT Points FROM driver))",
          "SELECT C.Capital FROM country C WHERE EXISTS (SELECT 1 FROM driver D WHERE D.Country = C.Country_Id AND D.Points = (SELECT MAX(Points) FROM driver))",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT TOP 1 Country FROM driver ORDER BY Points DESC)",
          "SELECT C.Capital FROM country C WHERE C.Country_Id = (SELECT D.Country FROM driver D ORDER BY D.Points DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM (SELECT Country, MAX(Points) AS MaxPoints FROM driver GROUP BY Country ORDER BY MaxPoints DESC LIMIT 1))"
        ]
      ]
    },
    {
      "id": 1622,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)",
          "SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT country.Capital FROM country INNER JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT Capital FROM country WHERE Country_Id IN (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver))",
          "SELECT c.Capital FROM country c, driver d WHERE c.Country_Id = d.Country AND d.Points = (SELECT MAX(Points) FROM driver)",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver))",
          "SELECT c.Capital FROM country AS c JOIN (SELECT Country FROM driver WHERE Points = (SELECT MAX(Points) FROM driver)) AS d ON c.Country_Id = d.Country",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM (SELECT Country, MAX(Points) AS MaxPoints FROM driver GROUP BY Country) AS MaxPointsDriver)",
          "SELECT c.Capital FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Points = (SELECT MAX(Points) FROM driver))",
          "SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC FETCH FIRST 1 ROW ONLY)"
        ]
      ]
    },
    {
      "id": 1623,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(*) AS NumberOfDrivers FROM driver GROUP BY Make",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make",
          "SELECT Make, COUNT(*) FROM driver GROUP BY Make",
          "SELECT Make, COUNT(Driver) AS TotalDrivers FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(*) AS NumDrivers FROM driver AS d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make",
          "SELECT Make, COUNT(Driver) FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS DriversPerMake FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(*) AS CountOfDrivers FROM driver GROUP BY Make",
          "SELECT Make, COUNT(Driver_ID) AS Count FROM driver GROUP BY Make"
        ]
      ]
    },
    {
      "id": 1624,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Make",
          "SELECT Make, COUNT(*) AS DriverCount FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) AS DriverCount FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make",
          "SELECT Make, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(*) FROM driver AS d GROUP BY d.Make",
          "SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Make",
          "SELECT Make, COUNT(DISTINCT Driver_ID) AS TotalDrivers FROM driver GROUP BY Make",
          "SELECT d.Make, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Make",
          "SELECT Make, COUNT(*) AS CountOfDrivers FROM driver GROUP BY Make"
        ]
      ]
    },
    {
      "id": 1625,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT D.Make FROM driver D JOIN team_driver TD ON D.Driver_ID = TD.Driver_ID GROUP BY D.Make ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Make FROM (SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make ORDER BY DriverCount DESC LIMIT 1) AS MostDrivers",
          "SELECT TOP 1 Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC",
          "SELECT Make FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM team_driver) GROUP BY Make ORDER BY COUNT(Driver_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Make, COUNT(*) as TotalDrivers FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make ORDER BY TotalDrivers DESC LIMIT 1",
          "SELECT Make FROM driver D WHERE EXISTS (SELECT 1 FROM team_driver TD WHERE TD.Driver_ID = D.Driver_ID) GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make) AS SubQuery)",
          "SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make ORDER BY NumberOfDrivers DESC LIMIT 1",
          "WITH DriverCounts AS (SELECT Make, COUNT(*) AS TotalDrivers FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make) SELECT Make FROM DriverCounts WHERE TotalDrivers = (SELECT MAX(TotalDrivers) FROM DriverCounts)",
          "SELECT Make FROM driver D, team_driver TD WHERE D.Driver_ID = TD.Driver_ID GROUP BY Make ORDER BY COUNT(D.Driver_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1626,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make ORDER BY DriverCount DESC LIMIT 1",
          "SELECT TOP 1 Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC",
          "SELECT Make FROM (SELECT Make, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Make) AS subquery ORDER BY num_drivers DESC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Driver_ID) AS count FROM driver GROUP BY Make) AS counts)",
          "SELECT Make, MAX(count) FROM (SELECT Make, COUNT(Driver_ID) AS count FROM driver GROUP BY Make) AS DriverCounts",
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Make, COUNT(*) AS TotalDrivers FROM driver GROUP BY Make ORDER BY TotalDrivers DESC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC, Make ASC LIMIT 1",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= ALL (SELECT COUNT(Driver_ID) FROM driver GROUP BY Make)"
        ]
      ]
    },
    {
      "id": 1627,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3",
          "SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(DISTINCT d.Driver_ID) >= 3",
          "SELECT Make FROM (SELECT Make, COUNT(DISTINCT Driver_ID) AS num_drivers FROM driver GROUP BY Make) AS subquery WHERE num_drivers >= 3",
          "SELECT DISTINCT Make FROM driver WHERE Make IN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3)",
          "SELECT Make, COUNT(DISTINCT Driver_ID) AS DriverCount FROM driver GROUP BY Make HAVING DriverCount >= 3",
          "SELECT Make FROM driver d GROUP BY d.Make HAVING COUNT(DISTINCT d.Driver_ID) >= 3",
          "SELECT d.Make FROM driver d INNER JOIN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3) sub ON d.Make = sub.Make",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3 ORDER BY Make",
          "SELECT Make, COUNT(*) AS TotalDrivers FROM driver GROUP BY Make HAVING TotalDrivers >= 3",
          "SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3 ORDER BY COUNT(DISTINCT Driver_ID) DESC"
        ]
      ]
    },
    {
      "id": 1628,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT D.Make FROM driver D JOIN team_driver TD ON D.Driver_ID = TD.Driver_ID GROUP BY D.Make HAVING COUNT(DISTINCT D.Driver_ID) >= 3",
          "SELECT Make FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM team_driver GROUP BY Driver_ID HAVING COUNT(*) >= 3)",
          "SELECT Make FROM (SELECT Make, COUNT(Driver_ID) AS NumDrivers FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make) AS SubQuery WHERE NumDrivers >= 3",
          "SELECT driver.Make FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Make HAVING COUNT(*) >= 3",
          "SELECT Make FROM driver d INNER JOIN team_driver td ON d.Driver_ID = td.Driver_ID GROUP BY Make HAVING COUNT(DISTINCT d.Driver_ID) >= 3",
          "SELECT DISTINCT Make FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM team_driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 3)",
          "SELECT Make, COUNT(Driver_ID) AS DriverCount FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY Make HAVING DriverCount >= 3",
          "SELECT Make FROM driver d JOIN team_driver td ON d.Driver_ID = td.Driver_ID GROUP BY Make HAVING COUNT(DISTINCT td.Driver_ID) >= 3",
          "SELECT d.Make FROM driver d, team_driver td WHERE d.Driver_ID = td.Driver_ID GROUP BY d.Make HAVING COUNT(td.Driver_ID) >= 3",
          "SELECT Make FROM driver WHERE EXISTS (SELECT 1 FROM team_driver WHERE driver.Driver_ID = team_driver.Driver_ID GROUP BY Driver_ID HAVING COUNT(*) >= 3)"
        ]
      ]
    },
    {
      "id": 1629,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT t.Team FROM team t LEFT JOIN team_driver td ON t.Team_ID = td.Team_ID WHERE td.Team_ID IS NULL",
          "SELECT Team FROM team WHERE NOT EXISTS (SELECT 1 FROM team_driver WHERE team_driver.Team_ID = team.Team_ID)",
          "SELECT Team FROM team t WHERE t.Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT NULL FROM team_driver td WHERE td.Team_ID = t.Team_ID)",
          "SELECT DISTINCT Team FROM team WHERE Team_ID NOT IN (SELECT DISTINCT Team_ID FROM team_driver)",
          "SELECT Team FROM team t LEFT OUTER JOIN team_driver td ON t.Team_ID = td.Team_ID WHERE td.Team_ID IS NULL",
          "SELECT Team FROM team EXCEPT SELECT Team FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID",
          "SELECT t.Team FROM team t WHERE t.Team_ID NOT IN (SELECT Team_ID FROM team_driver td)",
          "SELECT Team FROM team t WHERE NOT EXISTS (SELECT Team_ID FROM team_driver td WHERE td.Team_ID = t.Team_ID)"
        ]
      ]
    },
    {
      "id": 1630,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT T.Team FROM team T WHERE T.Team_ID NOT IN (SELECT TD.Team_ID FROM team_driver TD)",
          "SELECT Team FROM team WHERE NOT EXISTS (SELECT 1 FROM team_driver WHERE team.Team_ID = team_driver.Team_ID)",
          "SELECT T.Team FROM team T LEFT JOIN team_driver TD ON T.Team_ID = TD.Team_ID WHERE TD.Team_ID IS NULL",
          "SELECT Team FROM team EXCEPT SELECT Team FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID",
          "SELECT Team FROM team t WHERE NOT EXISTS (SELECT NULL FROM team_driver td WHERE td.Team_ID = t.Team_ID)",
          "SELECT DISTINCT Team FROM team WHERE Team_ID NOT IN (SELECT DISTINCT Team_ID FROM team_driver)",
          "SELECT Team FROM team t1 WHERE NOT EXISTS (SELECT * FROM team_driver t2 WHERE t1.Team_ID = t2.Team_ID)",
          "SELECT Team FROM team AS t WHERE t.Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
          "SELECT t.Team FROM team t LEFT OUTER JOIN team_driver td ON t.Team_ID = td.Team_ID WHERE td.Team_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1631,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet'",
          "SELECT d1.Country FROM driver d1 JOIN driver d2 ON d1.Country = d2.Country WHERE d1.Make = 'Dodge' AND d2.Make = 'Chevrolet'",
          "SELECT DISTINCT d.Country FROM driver d WHERE d.Make = 'Dodge' AND d.Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT Country FROM (SELECT Country FROM driver WHERE Make = 'Dodge') AS DodgeDrivers WHERE Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "WITH DodgeCountries AS (SELECT Country FROM driver WHERE Make = 'Dodge'), ChevroletCountries AS (SELECT Country FROM driver WHERE Make = 'Chevrolet') SELECT Country FROM DodgeCountries WHERE Country IN (SELECT Country FROM ChevroletCountries)",
          "SELECT Country FROM driver WHERE Make = 'Dodge' AND Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet') GROUP BY Country",
          "SELECT d.Country FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Make = 'Dodge' AND Country = d.Country) AND EXISTS (SELECT 1 FROM driver WHERE Make = 'Chevrolet' AND Country = d.Country)",
          "SELECT Country FROM driver WHERE Make IN ('Dodge', 'Chevrolet') GROUP BY Country HAVING COUNT(DISTINCT Make) = 2",
          "SELECT d.Country FROM driver d WHERE d.Make = 'Dodge' AND d.Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT DISTINCT Country FROM driver WHERE Country IN (SELECT Country FROM driver WHERE Make = 'Dodge') AND Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')"
        ]
      ]
    },
    {
      "id": 1632,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet'",
          "SELECT d1.Country FROM driver d1 JOIN driver d2 ON d1.Country = d2.Country WHERE d1.Make = 'Dodge' AND d2.Make = 'Chevrolet'",
          "SELECT DISTINCT d.Country FROM driver d WHERE d.Make IN ('Dodge', 'Chevrolet') GROUP BY d.Country HAVING COUNT(DISTINCT d.Make) = 2",
          "SELECT Country FROM (SELECT Country FROM driver WHERE Make = 'Dodge') AS DodgeDrivers JOIN (SELECT Country FROM driver WHERE Make = 'Chevrolet') AS ChevroletDrivers ON DodgeDrivers.Country = ChevroletDrivers.Country",
          "WITH Dodge AS (SELECT Country FROM driver WHERE Make = 'Dodge'), Chevrolet AS (SELECT Country FROM driver WHERE Make = 'Chevrolet') SELECT Dodge.Country FROM Dodge JOIN Chevrolet ON Dodge.Country = Chevrolet.Country",
          "SELECT Country FROM driver WHERE Make = 'Dodge' AND Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT d.Country FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE Make = 'Dodge' AND Country = d.Country) AND EXISTS (SELECT 1 FROM driver WHERE Make = 'Chevrolet' AND Country = d.Country)",
          "SELECT Country FROM driver WHERE Make = 'Dodge' UNION SELECT Country FROM driver WHERE Make = 'Chevrolet' HAVING COUNT(*) > 1",
          "SELECT Country FROM driver WHERE Country IN (SELECT Country FROM driver WHERE Make = 'Dodge') AND Country IN (SELECT Country FROM driver WHERE Make = 'Chevrolet')",
          "SELECT DISTINCT Country FROM driver WHERE Make = 'Dodge' OR Make = 'Chevrolet' GROUP BY Country HAVING COUNT(DISTINCT Make) > 1"
        ]
      ]
    },
    {
      "id": 1633,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
          "SELECT SUM(Points) Total_Points, AVG(Points) Average_Points FROM driver",
          "SELECT SUM(driver.Points) AS TotalPoints, AVG(driver.Points) AS AveragePoints FROM driver",
          "SELECT SUM(Points) as 'Total Points', AVG(Points) as 'Average Points' FROM driver",
          "SELECT SUM(driver.Points) Total, AVG(driver.Points) Average FROM driver",
          "SELECT SUM(Points), AVG(Points) FROM driver",
          "SELECT 'Total Points' = SUM(Points), 'Average Points' = AVG(Points) FROM driver",
          "SELECT SUM(Points) TotalPoints, AVG(Points) AvgPoints FROM driver",
          "SELECT (SELECT SUM(Points) FROM driver) AS TotalPoints, (SELECT AVG(Points) FROM driver) AS AveragePoints",
          "SELECT SUM(Points) AS Total, AVG(Points) AS Average FROM driver"
        ]
      ]
    },
    {
      "id": 1634,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver",
          "SELECT SUM(Points) Total_Points, AVG(Points) Average_Points FROM driver",
          "SELECT SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver",
          "SELECT SUM(driver.Points) Total_Points, AVG(driver.Points) Average_Points FROM driver",
          "SELECT (SELECT SUM(Points) FROM driver) AS Total_Points, (SELECT AVG(Points) FROM driver) AS Average_Points",
          "SELECT (SELECT SUM(Points) FROM driver) Total_Points, (SELECT AVG(Points) FROM driver) Average_Points",
          "SELECT SUM(Points) AS 'Total Points', AVG(Points) AS 'Average Points' FROM driver",
          "SELECT SUM(Points) 'Total Points', AVG(Points) 'Average Points' FROM driver",
          "SELECT SUM(Points) AS Total, AVG(Points) AS Average FROM driver",
          "SELECT SUM(Points) Total, AVG(Points) Average FROM driver"
        ]
      ]
    },
    {
      "id": 1635,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver)",
          "SELECT c.Country FROM country AS c WHERE c.Country NOT IN (SELECT d.Country FROM driver AS d)",
          "SELECT Country FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Country)",
          "SELECT c.Country FROM country c LEFT JOIN driver d ON c.Country = d.Country WHERE d.Country IS NULL",
          "SELECT Country FROM country WHERE Country NOT IN (SELECT Country FROM driver GROUP BY Country)",
          "SELECT Country FROM country c WHERE NOT EXISTS (SELECT NULL FROM driver d WHERE d.Country = c.Country)",
          "SELECT DISTINCT c.Country FROM country c WHERE c.Country NOT IN (SELECT Country FROM driver)",
          "SELECT Country FROM country EXCEPT SELECT Country FROM driver",
          "SELECT c.Country FROM country c WHERE c.Country NOT IN (SELECT DISTINCT d.Country FROM driver d)",
          "SELECT Country FROM country WHERE Country NOT IN (SELECT Country FROM driver WHERE Country IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1636,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Country FROM country WHERE Country NOT IN (SELECT DISTINCT Country FROM driver)",
          "SELECT c.Country FROM country AS c LEFT JOIN driver AS d ON c.Country = d.Country WHERE d.Driver_ID IS NULL",
          "SELECT Country FROM country WHERE NOT EXISTS (SELECT 1 FROM driver WHERE driver.Country = country.Country)",
          "SELECT Country FROM country c WHERE c.Country NOT IN (SELECT Country FROM driver)",
          "SELECT c.Country FROM country c WHERE NOT EXISTS (SELECT NULL FROM driver d WHERE d.Country = c.Country)",
          "SELECT DISTINCT c.Country FROM country c WHERE c.Country NOT IN (SELECT Country FROM driver)",
          "SELECT Country FROM country WHERE Country NOT IN (SELECT Country FROM driver GROUP BY Country)",
          "SELECT c.Country FROM country c LEFT OUTER JOIN driver d ON c.Country = d.Country WHERE d.Country IS NULL",
          "SELECT Country FROM country EXCEPT SELECT Country FROM driver",
          "SELECT Country FROM country c WHERE c.Country NOT IN (SELECT DISTINCT d.Country FROM driver d)"
        ]
      ]
    },
    {
      "id": 1637,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT t.Manager, t.Sponsor FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY td.Team_ID ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) sub))",
          "SELECT t.Manager, t.Sponsor FROM team t WHERE t.Team_ID = (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT TOP 1 Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC)",
          "SELECT t.Manager, t.Sponsor FROM team t INNER JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1) max_team ON t.Team_ID = max_team.Team_ID",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM (SELECT Team_ID, COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID) AS DriverCounts ORDER BY DriverCount DESC LIMIT 1)",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT t.Manager, t.Sponsor FROM team t WHERE EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) sub))",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1 OFFSET 0 ROWS)"
        ]
      ]
    },
    {
      "id": 1638,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)",
          "SELECT t.Manager, t.Sponsor FROM team t JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1) td ON t.Team_ID = td.Team_ID",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) tmp))",
          "SELECT t.Manager, t.Sponsor FROM team t WHERE t.Team_ID = (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1)",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT TOP 1 Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC)",
          "SELECT t.Manager, t.Sponsor FROM team t INNER JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1) sub ON t.Team_ID = sub.Team_ID",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM (SELECT Team_ID, COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID ORDER BY DriverCount DESC LIMIT 1) AS MostDrivers)",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT t.Manager, t.Sponsor FROM team t WHERE EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) tmp))",
          "SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1639,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT t.Manager, t.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2)",
          "SELECT t.Manager, t.Car_Owner FROM team t WHERE EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) >= 2)",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) > 1)",
          "SELECT t.Manager, t.Car_Owner FROM team t INNER JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2) td ON t.Team_ID = td.Team_ID",
          "SELECT Manager, Car_Owner FROM team t WHERE (SELECT COUNT(*) FROM team_driver WHERE Team_ID = t.Team_ID) >= 2",
          "SELECT t.Manager, t.Car_Owner FROM team t WHERE t.Team_ID IN (SELECT Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2)",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) >= 2)",
          "SELECT t.Manager, t.Car_Owner FROM team t WHERE (SELECT COUNT(Driver_ID) FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1640,
      "db_id": "car_racing",
      "infer_predictions": [
        [
          "SELECT T.Manager, T.Car_Owner FROM team T JOIN team_driver TD ON T.Team_ID = TD.Team_ID GROUP BY T.Team_ID HAVING COUNT(DISTINCT TD.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)",
          "SELECT team.Manager, team.Car_Owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(DISTINCT team_driver.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE EXISTS (SELECT 1 FROM team_driver WHERE team.Team_ID = team_driver.Team_ID GROUP BY Team_ID HAVING COUNT(Driver_ID) > 1)",
          "SELECT t.Manager, t.Car_Owner FROM team t WHERE (SELECT COUNT(*) FROM team_driver td WHERE td.Team_ID = t.Team_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team t JOIN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) > 1) td ON t.Team_ID = td.Team_ID",
          "SELECT t.Manager, t.Car_Owner FROM team t, team_driver td WHERE t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) > 1",
          "SELECT DISTINCT t.Manager, t.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID, t.Manager, t.Car_Owner HAVING COUNT(td.Driver_ID) >= 2",
          "SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2)",
          "SELECT t.Manager, t.Car_Owner FROM team t LEFT JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1641,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM institution",
          "SELECT COUNT(Institution_ID) FROM institution",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution",
          "SELECT COUNT(1) FROM institution",
          "SELECT COUNT(*) AS total_institutions FROM institution",
          "SELECT COUNT(DISTINCT Name) FROM institution",
          "SELECT COUNT(*) FROM institution GROUP BY Institution_ID",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Institution_ID FROM institution) AS unique_institutions",
          "SELECT COUNT(Institution_ID) FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT COUNT(*) FROM institution WHERE Institution_ID <> ''"
        ]
      ]
    },
    {
      "id": 1642,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM institution",
          "SELECT COUNT(Institution_ID) FROM institution",
          "SELECT COUNT(1) FROM institution",
          "SELECT COUNT(*) AS NumberOfInstitutions FROM institution",
          "SELECT COUNT(Institution_ID) AS InstitutionCount FROM institution",
          "SELECT COUNT(DISTINCT Institution_ID) FROM institution",
          "SELECT COUNT(DISTINCT Name) FROM institution",
          "SELECT COUNT(*) FROM institution WHERE Institution_ID IS NOT NULL",
          "SELECT COUNT(*) FROM institution GROUP BY Institution_ID",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Institution_ID FROM institution) AS UniqueInstitutions"
        ]
      ]
    },
    {
      "id": 1643,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Name ASC",
          "SELECT Name FROM institution ORDER BY Name",
          "SELECT institution.Name FROM institution ORDER BY institution.Name ASC",
          "SELECT Name FROM institution SORT BY Name ASCENDING",
          "SELECT institution.Name FROM institution SORT BY institution.Name ASCENDING",
          "SELECT Name FROM institution ORDER BY Name ASCENDING",
          "SELECT Name FROM institution ORDER BY Name ASC, Institution_ID ASC",
          "SELECT Name FROM institution ORDER BY Name, Institution_ID",
          "SELECT institution.Name FROM institution ORDER BY institution.Name, institution.Institution_ID ASC",
          "SELECT Name FROM institution ORDER BY Name COLLATE NOCASE ASC"
        ]
      ]
    },
    {
      "id": 1644,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Name ASC",
          "SELECT Name FROM institution ORDER BY Name",
          "SELECT institution.Name FROM institution ORDER BY institution.Name",
          "SELECT Name FROM institution ORDER BY Name COLLATE NOCASE",
          "SELECT institution.Name FROM institution ORDER BY Name ASC",
          "SELECT Name AS InstitutionName FROM institution ORDER BY Name ASC",
          "SELECT Name FROM institution ORDER BY UPPER(Name)",
          "SELECT Name FROM institution ORDER BY LOWER(Name) ASC",
          "SELECT Name FROM institution ORDER BY Name ASCENDING",
          "SELECT Name FROM institution ORDER BY Name ALPHABETICALLY"
        ]
      ]
    },
    {
      "id": 1645,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Founded ASC",
          "SELECT Name FROM institution ORDER BY Founded",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded ASC",
          "SELECT Name FROM institution SORT BY Founded ASCENDING",
          "SELECT institution.Name FROM institution SORT BY institution.Founded ASC",
          "SELECT Name FROM institution ORDER BY Founded ASCENDING",
          "SELECT Name FROM institution ORDER BY Founded YEAR ASC",
          "SELECT Name FROM institution ORDER BY Founded YEAR ASCENDING",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded YEAR ASC",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded YEAR ASCENDING"
        ]
      ]
    },
    {
      "id": 1646,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution ORDER BY Founded",
          "SELECT Name FROM institution ORDER BY Founded ASC",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded",
          "SELECT Name FROM institution ORDER BY Founded ASCENDING",
          "SELECT Name FROM institution ORDER BY Founded YEAR",
          "SELECT Name FROM institution ORDER BY Founded YEAR ASC",
          "SELECT Name FROM institution ORDER BY Founded ASC, Name",
          "SELECT Name FROM institution ORDER BY Founded ASC, Name ASC",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded ASC",
          "SELECT institution.Name FROM institution ORDER BY institution.Founded ASCENDING"
        ]
      ]
    },
    {
      "id": 1647,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution",
          "SELECT DISTINCT City, Province FROM institution",
          "SELECT City AS CityName, Province AS ProvinceName FROM institution",
          "SELECT i.City, i.Province FROM institution i",
          "SELECT `City`, `Province` FROM `institution`",
          "SELECT City, Province FROM institution ORDER BY City",
          "SELECT City, Province FROM institution GROUP BY City, Province",
          "SELECT * FROM institution WHERE City IS NOT NULL AND Province IS NOT NULL",
          "SELECT City, Province FROM institution WHERE City <> '' AND Province <> ''"
        ]
      ]
    },
    {
      "id": 1648,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT City, Province FROM institution",
          "SELECT institution.City, institution.Province FROM institution",
          "SELECT City AS CityName, Province AS ProvinceName FROM institution",
          "SELECT DISTINCT City, Province FROM institution",
          "SELECT i.City, i.Province FROM institution i",
          "SELECT `City`, `Province` FROM `institution`",
          "SELECT City, Province FROM institution ORDER BY City",
          "SELECT City, Province FROM institution GROUP BY City, Province",
          "SELECT * FROM institution SELECT City, Province",
          "SELECT City, Province FROM institution WHERE City IS NOT NULL AND Province IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1649,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT MAX(Enrollment), MIN(Enrollment) FROM institution",
          "SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution",
          "SELECT (SELECT MAX(Enrollment) FROM institution) AS MaximumEnrollment, (SELECT MIN(Enrollment) FROM institution) AS MinimumEnrollment",
          "SELECT MAX(i.Enrollment), MIN(i.Enrollment) FROM institution i",
          "SELECT TOP 1 MAX(Enrollment), MIN(Enrollment) FROM institution GROUP BY Enrollment",
          "SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution",
          "SELECT MAX(Enrollment) 'Max Enrollment', MIN(Enrollment) 'Min Enrollment' FROM institution",
          "SELECT MAX(Enrollment) AS 'Maximum Enrollment', MIN(Enrollment) AS 'Minimum Enrollment' FROM institution",
          "SELECT MAX(Enrollment) Max_Enrollment, MIN(Enrollment) Min_Enrollment FROM institution",
          "SELECT MAX(Enrollment) AS MaximumEnroll, MIN(Enrollment) AS MinimumEnroll FROM institution"
        ]
      ]
    },
    {
      "id": 1650,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT MAX(Enrollment) AS MaximumEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM institution",
          "SELECT MAX(Enrollment), MIN(Enrollment) FROM institution",
          "SELECT (SELECT MAX(Enrollment) FROM institution) AS MaxEnrollment, (SELECT MIN(Enrollment) FROM institution) AS MinEnrollment",
          "SELECT MAX(i.Enrollment) AS Max_Enrollment, MIN(i.Enrollment) AS Min_Enrollment FROM institution i",
          "SELECT TOP 1 MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution GROUP BY Enrollment",
          "SELECT MAX(Enrollment) AS HighestEnrollment, MIN(Enrollment) AS LowestEnrollment FROM institution",
          "SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution",
          "SELECT MAX(Enrollment) 'Maximum Enrollment', MIN(Enrollment) 'Minimum Enrollment' FROM institution",
          "SELECT (SELECT MAX(Enrollment) FROM institution) MaximumEnrollment, (SELECT MIN(Enrollment) FROM institution) MinimumEnrollment",
          "SELECT MAX(Enrollment) AS MaxEnroll, MIN(Enrollment) AS MinEnroll FROM institution"
        ]
      ]
    },
    {
      "id": 1651,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution WHERE City <> 'Vancouver'",
          "SELECT DISTINCT Affiliation FROM institution WHERE City != 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT City = 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')",
          "SELECT Affiliation FROM institution WHERE City IS NOT 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT LIKE 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT EQUALS 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT (City = 'Vancouver')",
          "SELECT Affiliation FROM institution WHERE City <> 'Vancouver' AND City IS NOT NULL",
          "SELECT Affiliation FROM institution WHERE City != 'Vancouver' AND City IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1652,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution WHERE City <> 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT LIKE 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT City = 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City != 'Vancouver'",
          "SELECT DISTINCT Affiliation FROM institution WHERE City <> 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')",
          "SELECT Affiliation FROM institution WHERE City IS NOT 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE NOT (City = 'Vancouver')",
          "SELECT Affiliation FROM institution WHERE City NOT EQUALS 'Vancouver'",
          "SELECT Affiliation FROM institution WHERE City NOT EQUAL TO 'Vancouver'"
        ]
      ]
    },
    {
      "id": 1653,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESCENDING",
          "SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC",
          "SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC",
          "SELECT Stadium AS StadiumName FROM institution ORDER BY Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `Capacity` DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC, Stadium ASC",
          "SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC LIMIT ALL",
          "SELECT DISTINCT Stadium FROM institution ORDER BY Capacity DESC"
        ]
      ]
    },
    {
      "id": 1654,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESCENDING",
          "SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC, Stadium ASC",
          "SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium AS StadiumName FROM institution ORDER BY Capacity DESC",
          "SELECT `Stadium` FROM `institution` ORDER BY `Capacity` DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC LIMIT ALL",
          "SELECT DISTINCT Stadium FROM institution ORDER BY Capacity DESC",
          "SELECT Stadium FROM institution ORDER BY Capacity DESC, Name ASC"
        ]
      ]
    },
    {
      "id": 1655,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1",
          "SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)",
          "SELECT top 1 Stadium FROM institution ORDER BY Enrollment DESC",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC FETCH FIRST 1 ROW ONLY",
          "SELECT i.Stadium FROM institution i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution i)",
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution LIMIT 1)",
          "SELECT Stadium FROM (SELECT Stadium, Enrollment FROM institution ORDER BY Enrollment DESC) WHERE ROWNUM = 1",
          "SELECT Stadium FROM institution i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1656,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1",
          "SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT i.Stadium FROM institution i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution)",
          "SELECT TOP 1 Stadium FROM institution ORDER BY Enrollment DESC",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)",
          "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
          "SELECT Stadium FROM (SELECT Stadium, Enrollment, RANK() OVER (ORDER BY Enrollment DESC) AS rank FROM institution) WHERE rank = 1",
          "SELECT Stadium FROM institution i WHERE i.Enrollment >= ALL (SELECT Enrollment FROM institution)"
        ]
      ]
    },
    {
      "id": 1657,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT institution.Name, Championship.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT i.Name, c.Nickname FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name AS Institution_Name, Nickname AS Institution_Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT inst.Name, champ.Nickname FROM institution inst JOIN Championship champ ON inst.Institution_ID = champ.Institution_ID",
          "SELECT `Name`, `Nickname` FROM `institution` JOIN `Championship` ON `institution`.`Institution_ID` = `Championship`.`Institution_ID`",
          "SELECT institution.Name, Championship.Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Name",
          "SELECT DISTINCT institution.Name, Championship.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT institution.Name AS 'Institution Name', Championship.Nickname AS 'Institution Nickname' FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID"
        ]
      ]
    },
    {
      "id": 1658,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT Name, Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT institution.Name AS InstitutionName, Championship.Nickname AS InstitutionNickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID",
          "SELECT i.Name, c.Nickname FROM institution AS i, Championship AS c WHERE i.Institution_ID = c.Institution_ID",
          "SELECT Name AS 'Institution Name', Nickname AS 'Institution Nickname' FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT DISTINCT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID",
          "SELECT i.Name, c.Nickname FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Name",
          "SELECT Name, Nickname FROM institution LEFT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID"
        ]
      ]
    },
    {
      "id": 1659,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
          "SELECT TOP 1 C.Nickname FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment",
          "SELECT C.Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID AND I.Enrollment = (SELECT MIN(Enrollment) FROM institution)",
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Enrollment = (SELECT MIN(Enrollment) FROM institution)",
          "SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment LIMIT 1)",
          "SELECT C.Nickname FROM Championship AS C INNER JOIN institution AS I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment LIMIT 1",
          "SELECT FIRST(C.Nickname) FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment",
          "SELECT C.Nickname FROM Championship C WHERE C.Institution_ID = (SELECT I.Institution_ID FROM institution I ORDER BY I.Enrollment ASC LIMIT 1)",
          "SELECT C.Nickname FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1660,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment ASC LIMIT 1",
          "SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)",
          "SELECT TOP 1 C.Nickname FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment",
          "SELECT C.Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID AND I.Enrollment = (SELECT MIN(Enrollment) FROM institution)",
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Enrollment = (SELECT MIN(Enrollment) FROM institution)",
          "SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment LIMIT 1)",
          "SELECT C.Nickname FROM Championship AS C INNER JOIN institution AS I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment LIMIT 1",
          "SELECT C.Nickname FROM Championship C LEFT JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Enrollment = (SELECT MIN(Enrollment) FROM institution)",
          "SELECT C.Nickname FROM Championship C RIGHT JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Enrollment ASC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1661,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT i.Name, COUNT(c.Number_of_Championships) AS Championships_Count FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Name ORDER BY Championships_Count DESC",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID ORDER BY COUNT(*) DESC)",
          "SELECT inst.Name FROM institution inst INNER JOIN Championship champ ON inst.Institution_ID = champ.Institution_ID GROUP BY inst.Name ORDER BY COUNT(champ.Number_of_Championships) DESC",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID GROUP BY i.Name ORDER BY COUNT(c.Number_of_Championships) DESC",
          "SELECT Name FROM (SELECT Name, COUNT(*) as TotalChampionships FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name) AS SubQuery ORDER BY TotalChampionships DESC",
          "SELECT institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY institution.Name ORDER BY COUNT(Championship.Number_of_Championships) DESC",
          "SELECT i.Name, COUNT(*) AS Total FROM institution i LEFT JOIN Championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Name ORDER BY Total DESC",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID HAVING COUNT(*) > 0) ORDER BY (SELECT COUNT(*) FROM Championship WHERE Institution_ID = institution.Institution_ID) DESC",
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Name HAVING COUNT(c.Number_of_Championships) > 0 ORDER BY COUNT(c.Number_of_Championships) DESC",
          "SELECT Name, COUNT(Championship.Institution_ID) AS TotalWins FROM institution LEFT JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name ORDER BY TotalWins DESC"
        ]
      ]
    },
    {
      "id": 1662,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship ORDER BY Number_of_Championships DESC)",
          "SELECT institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC",
          "SELECT Name FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship ORDER BY Number_of_Championships DESC) GROUP BY Name",
          "SELECT institution.Name, COUNT(Championship.Number_of_Championships) AS Championships FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY institution.Name ORDER BY Championships DESC",
          "SELECT Name FROM (SELECT Name, Number_of_Championships FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID) AS subquery ORDER BY Number_of_Championships DESC",
          "SELECT Name FROM institution i LEFT JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC",
          "SELECT DISTINCT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC"
        ]
      ]
    },
    {
      "id": 1663,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT DISTINCT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID",
          "SELECT i.Name FROM institution i WHERE EXISTS (SELECT 1 FROM Championship c WHERE c.Institution_ID = i.Institution_ID)",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship)",
          "SELECT i.Name FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Name",
          "SELECT DISTINCT Name FROM institution WHERE Institution_ID IN (SELECT DISTINCT Institution_ID FROM Championship)",
          "SELECT Name FROM institution i WHERE i.Institution_ID IN (SELECT c.Institution_ID FROM Championship c)",
          "SELECT DISTINCT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID",
          "SELECT i.Name FROM institution i WHERE EXISTS (SELECT * FROM Championship c WHERE i.Institution_ID = c.Institution_ID)",
          "SELECT Name FROM institution WHERE EXISTS (SELECT * FROM Championship WHERE Institution_ID = institution.Institution_ID)",
          "SELECT i.Name FROM institution i INNER JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Institution_ID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1664,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)",
          "SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1",
          "SELECT institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Championship.Number_of_Championships >= 1",
          "SELECT DISTINCT Name FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID AND Championship.Number_of_Championships >= 1",
          "SELECT Name FROM institution WHERE EXISTS (SELECT 1 FROM Championship WHERE Institution_ID = institution.Institution_ID AND Number_of_Championships >= 1)",
          "SELECT i.Name FROM institution i, Championship c WHERE i.Institution_ID = c.Institution_ID AND c.Number_of_Championships >= 1",
          "SELECT Name FROM institution i WHERE (SELECT COUNT(*) FROM Championship c WHERE c.Institution_ID = i.Institution_ID AND c.Number_of_Championships >= 1) > 0",
          "SELECT institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID HAVING COUNT(Championship.Number_of_Championships) >= 1",
          "SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID HAVING SUM(Number_of_Championships) >= 1)",
          "SELECT Name FROM institution i WHERE 1 <= (SELECT COUNT(*) FROM Championship c WHERE c.Institution_ID = i.Institution_ID AND c.Number_of_Championships >= 1)"
        ]
      ]
    },
    {
      "id": 1665,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'public'",
          "SELECT SUM(c.Number_of_Championships) AS Total_Championships FROM Championship c INNER JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'public'",
          "SELECT TOTAL(Championship.Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'",
          "SELECT SUM(Number_of_Championships) AS TotalChampionships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'public'",
          "SELECT SUM(Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship LEFT JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'public'",
          "SELECT SUM(c.Number_of_Championships) FROM Championship c, institution i WHERE c.Institution_ID = i.Institution_ID AND i.Affiliation = 'public'",
          "SELECT SUM(c.Number_of_Championships) FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'public' GROUP BY i.Affiliation",
          "SELECT SUM(c.Number_of_Championships) FROM Championship AS c JOIN institution AS i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'public'"
        ]
      ]
    },
    {
      "id": 1666,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(c.Number_of_Championships) AS Total_Championships FROM Championship c INNER JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'Public'",
          "SELECT TOTAL(Championship.Number_of_Championships) FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) AS TotalChampionships FROM Championship LEFT JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation LIKE 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'Public' GROUP BY institution.Affiliation",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'Public'",
          "SELECT SUM(Championship.Number_of_Championships) FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public' GROUP BY institution.Affiliation HAVING institution.Affiliation = 'Public'"
        ]
      ]
    },
    {
      "id": 1667,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) AS InstitutionCount FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(DISTINCT Institution_ID) FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) AS TotalInstitutions FROM institution GROUP BY Affiliation ORDER BY Affiliation",
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC",
          "SELECT Affiliation, COUNT(Institution_ID) AS CountOfInstitutions FROM institution GROUP BY Affiliation ORDER BY CountOfInstitutions",
          "SELECT DISTINCT Affiliation, COUNT(Institution_ID) OVER (PARTITION BY Affiliation) AS NumInstitutions FROM institution",
          "SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation HAVING COUNT(Institution_ID) > 0",
          "SELECT Affiliation, COUNT(*) AS NumberOfInstitutions FROM institution GROUP BY Affiliation HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1668,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation",
          "SELECT COUNT(Institution_ID), Affiliation FROM institution GROUP BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation",
          "SELECT COUNT(*), Affiliation FROM institution GROUP BY Affiliation ORDER BY Affiliation",
          "SELECT Affiliation, COUNT(Institution_ID) AS InstitutionCount FROM institution GROUP BY Affiliation ORDER BY InstitutionCount DESC",
          "SELECT Affiliation, COUNT(Institution_ID) AS TotalInstitutions FROM institution GROUP BY Affiliation HAVING COUNT(Institution_ID) > 0",
          "SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation HAVING COUNT(*) > 1",
          "SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation ORDER BY COUNT(Institution_ID) DESC",
          "SELECT Affiliation, COUNT(*) AS CountOfInstitutions FROM institution GROUP BY Affiliation ORDER BY CountOfInstitutions"
        ]
      ]
    },
    {
      "id": 1669,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC",
          "SELECT Affiliation, COUNT(Affiliation) AS Frequency FROM institution GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS Counts)",
          "SELECT Affiliation, MAX(Count) FROM (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS AffiliationCounts",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC FETCH FIRST 1 ROWS ONLY",
          "WITH AffiliationCounts AS (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) SELECT Affiliation FROM AffiliationCounts WHERE Count = (SELECT MAX(Count) FROM AffiliationCounts)",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation ORDER BY Total DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1670,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC",
          "SELECT Affiliation, COUNT(*) AS Frequency FROM institution GROUP BY Affiliation ORDER BY Frequency DESC LIMIT 1",
          "SELECT Affiliation FROM (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS SubQuery ORDER BY Count DESC LIMIT 1",
          "SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS Counts)",
          "WITH AffiliationCounts AS (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) SELECT Affiliation FROM AffiliationCounts WHERE Count = (SELECT MAX(Count) FROM AffiliationCounts)",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation ORDER BY Total DESC FETCH FIRST ROW ONLY",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC FETCH FIRST ROW WITH TIES",
          "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC, Affiliation ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1671,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT Founded AS Year FROM institution GROUP BY Year HAVING COUNT(Institution_ID) > 1",
          "SELECT i.Founded FROM institution i GROUP BY i.Founded HAVING COUNT(i.Institution_ID) > 1",
          "SELECT YEAR(Founded) AS YearFounded FROM institution GROUP BY YearFounded HAVING COUNT(*) > 1",
          "SELECT DISTINCT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded, COUNT(*) AS NumInstitutions FROM institution GROUP BY Founded HAVING NumInstitutions > 1",
          "SELECT Founded AS Year FROM institution GROUP BY Year HAVING COUNT(*) > 1 ORDER BY Year",
          "SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1 ORDER BY Founded",
          "SELECT Founded, COUNT(Institution_ID) AS CountOfInstitutions FROM institution GROUP BY Founded HAVING CountOfInstitutions > 1",
          "SELECT Founded AS YearFounded, COUNT(*) FROM institution GROUP BY YearFounded HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1672,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Founded, COUNT(*) AS NumInstitutions FROM institution GROUP BY Founded HAVING COUNT(*) > 1",
          "SELECT Founded AS Year, COUNT(Institution_ID) AS Count FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded, COUNT(Institution_ID) FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1",
          "SELECT Founded AS YearFounded, COUNT(*) AS TotalInstitutions FROM institution GROUP BY YearFounded HAVING TotalInstitutions > 1",
          "SELECT i.Founded, COUNT(i.Institution_ID) AS NumberOfInstitutions FROM institution i GROUP BY i.Founded HAVING COUNT(i.Institution_ID) > 1",
          "SELECT Founded AS Year, COUNT(*) FROM institution GROUP BY Year HAVING COUNT(*) > 1",
          "SELECT Founded, COUNT(Institution_ID) AS InstitutionsCount FROM institution GROUP BY Founded HAVING InstitutionsCount > 1",
          "SELECT Founded AS YearOfFoundation, COUNT(*) AS InstitutionCount FROM institution GROUP BY YearOfFoundation HAVING InstitutionCount > 1",
          "SELECT Founded, COUNT(*) AS CountOfInstitutions FROM institution WHERE Founded IS NOT NULL GROUP BY Founded HAVING CountOfInstitutions > 1",
          "SELECT Founded AS YearFounded, COUNT(*) AS NumberOfInstitutions FROM institution WHERE Founded IS NOT NULL GROUP BY YearFounded HAVING NumberOfInstitutions > 1"
        ]
      ]
    },
    {
      "id": 1673,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT C.Nickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Capacity DESC",
          "SELECT `Nickname` FROM `Championship`, `institution` WHERE `Championship`.`Institution_ID` = `institution`.`Institution_ID` ORDER BY `institution`.`Capacity` DESC",
          "SELECT Nickname FROM Championship AS C, institution AS I WHERE C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT C.Nickname FROM Championship C INNER JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT Nickname FROM Championship JOIN institution USING(Institution_ID) ORDER BY Capacity DESC",
          "SELECT institution.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT C.Nickname FROM Championship C LEFT JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC",
          "SELECT DISTINCT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT TOP 100 PERCENT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Capacity DESC"
        ]
      ]
    },
    {
      "id": 1674,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT c.Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC",
          "SELECT `Nickname` FROM `Championship`, `institution` WHERE `Championship`.`Institution_ID` = `institution`.`Institution_ID` ORDER BY `institution`.`Capacity` DESC",
          "SELECT Nickname FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID ORDER BY Capacity DESC",
          "SELECT c.Nickname FROM Championship AS c INNER JOIN institution AS i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT c.Nickname FROM Championship c, institution i WHERE c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship JOIN institution USING(Institution_ID) ORDER BY Capacity DESC",
          "SELECT c.Nickname FROM Championship c LEFT JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC",
          "SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC, institution.Name ASC"
        ]
      ]
    },
    {
      "id": 1675,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT SUM(Enrollment) AS Total_Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' UNION ALL SELECT SUM(Enrollment) FROM institution WHERE City = 'Calgary'",
          "SELECT TOTAL(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' UNION SELECT SUM(Enrollment) FROM institution WHERE City = 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City LIKE 'Vancouver' OR City LIKE 'Calgary'",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary' GROUP BY City",
          "SELECT City, SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') GROUP BY City",
          "SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') GROUP BY City",
          "SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary' GROUP BY City"
        ]
      ]
    },
    {
      "id": 1676,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')",
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City = 'Vancouver' UNION SELECT Enrollment FROM institution WHERE City = 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City LIKE 'Vancouver' OR City LIKE 'Calgary'",
          "SELECT Enrollment FROM institution WHERE City = ANY (ARRAY['Vancouver', 'Calgary'])",
          "SELECT Enrollment FROM institution WHERE City IN (SELECT City FROM institution WHERE City = 'Vancouver' OR City = 'Calgary')",
          "SELECT Enrollment FROM institution WHERE City IN (SELECT DISTINCT City FROM institution WHERE City IN ('Vancouver', 'Calgary'))",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary') ORDER BY City",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary') GROUP BY Enrollment",
          "SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary') AND Enrollment IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1677,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT i1.Province FROM institution i1 JOIN institution i2 ON i1.Province = i2.Province WHERE i1.Founded < 1920 AND i2.Founded > 1950",
          "SELECT i.Province FROM institution i WHERE EXISTS (SELECT 1 FROM institution WHERE Province = i.Province AND Founded < 1920) AND EXISTS (SELECT 1 FROM institution WHERE Province = i.Province AND Founded > 1950)",
          "WITH EarlyInstitutions AS (SELECT Province FROM institution WHERE Founded < 1920), LateInstitutions AS (SELECT Province FROM institution WHERE Founded > 1950) SELECT Province FROM EarlyInstitutions WHERE Province IN (SELECT Province FROM LateInstitutions)",
          "SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950",
          "SELECT i.Province FROM institution i WHERE i.Province IN (SELECT Province FROM institution WHERE Founded < 1920) INTERSECT SELECT Province FROM institution WHERE Founded > 1950",
          "SELECT Province FROM (SELECT Province, MIN(Founded) AS Earliest, MAX(Founded) AS Latest FROM institution GROUP BY Province) WHERE Earliest < 1920 AND Latest > 1950",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT Province FROM institution GROUP BY Province HAVING MIN(Founded) < 1920 AND MAX(Founded) > 1950",
          "SELECT DISTINCT Province FROM institution a WHERE EXISTS (SELECT * FROM institution b WHERE a.Province = b.Province AND b.Founded < 1920) AND EXISTS (SELECT * FROM institution c WHERE a.Province = c.Province AND c.Founded > 1950)"
        ]
      ]
    },
    {
      "id": 1678,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT i1.Province FROM institution i1 JOIN institution i2 ON i1.Province = i2.Province WHERE i1.Founded < 1920 AND i2.Founded > 1950",
          "SELECT Province FROM (SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950) AS subquery",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT DISTINCT Province FROM institution WHERE Founded > 1950",
          "WITH Before1920 AS (SELECT Province FROM institution WHERE Founded < 1920), After1950 AS (SELECT Province FROM institution WHERE Founded > 1950) SELECT Province FROM Before1920 INTERSECT SELECT Province FROM After1950",
          "SELECT DISTINCT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) INTERSECT SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT Province FROM institution a WHERE EXISTS (SELECT 1 FROM institution b WHERE a.Province = b.Province AND b.Founded < 1920) AND EXISTS (SELECT 1 FROM institution c WHERE a.Province = c.Province AND c.Founded > 1950)",
          "SELECT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT Province FROM institution WHERE Founded < 1920 AND Province IN (SELECT DISTINCT Province FROM institution WHERE Founded > 1950)",
          "SELECT DISTINCT i.Province FROM institution i WHERE EXISTS (SELECT * FROM institution WHERE Province = i.Province AND Founded < 1920) AND EXISTS (SELECT * FROM institution WHERE Province = i.Province AND Founded > 1950)"
        ]
      ]
    },
    {
      "id": 1679,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Province) FROM institution",
          "SELECT COUNT(UNIQUE Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) AS NumberOfProvinces FROM institution",
          "SELECT DISTINCT COUNT(Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT COUNT(Province) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) FROM institution WHERE Province IS NOT NULL",
          "SELECT DISTINCT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT COUNT(DISTINCT Province) FROM institution GROUP BY Province HAVING Province IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1680,
      "db_id": "institution_sports",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Province) FROM institution",
          "SELECT COUNT(UNIQUE Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) AS NumberOfProvinces FROM institution",
          "SELECT COUNT(*) FROM (SELECT Province FROM institution GROUP BY Province)",
          "SELECT COUNT(DISTINCT Province) FROM institution WHERE Province IS NOT NULL",
          "SELECT DISTINCT COUNT(Province) FROM institution",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution WHERE Province IS NOT NULL)",
          "SELECT COUNT(Province) FROM (SELECT DISTINCT Province FROM institution)",
          "SELECT COUNT(DISTINCT Province) FROM institution GROUP BY Province HAVING Province IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1681,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT * FROM Warehouses",
          "SELECT Code, Location, Capacity FROM Warehouses",
          "SELECT Warehouses.* FROM Warehouses",
          "SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses",
          "SELECT Code AS WarehouseCode, Location AS WarehouseLocation, Capacity AS WarehouseCapacity FROM Warehouses",
          "SELECT * FROM Warehouses WHERE 1=1",
          "SELECT Warehouses.Code, Location, Capacity FROM Warehouses ORDER BY Code",
          "SELECT ALL * FROM Warehouses",
          "SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses WHERE Code IS NOT NULL",
          "SELECT * FROM Warehouses WHERE Code <> ''"
        ]
      ]
    },
    {
      "id": 1682,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT * FROM Warehouses",
          "SELECT Code, Location, Capacity FROM Warehouses",
          "SELECT Warehouses.* FROM Warehouses",
          "SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses",
          "SELECT W.* FROM Warehouses W",
          "SELECT W.Code, W.Location, W.Capacity FROM Warehouses W",
          "SELECT ALL * FROM Warehouses",
          "SELECT ALL Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses",
          "SELECT Code AS WarehouseCode, Location AS WarehouseLocation, Capacity AS WarehouseCapacity FROM Warehouses",
          "SELECT DISTINCT * FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1683,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT Boxes.Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b LEFT JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1684,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT B.Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT Boxes.Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York'",
          "SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code AND w.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')"
        ]
      ]
    },
    {
      "id": 1685,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Value > 150",
          "SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150",
          "SELECT b.Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > $150",
          "SELECT Contents FROM Boxes WHERE Value > 150.00",
          "SELECT `Contents` FROM `Boxes` WHERE `Value` > 150",
          "SELECT Contents FROM Boxes WHERE Value > '150'",
          "SELECT Contents FROM Boxes WHERE Value > (SELECT 150)",
          "SELECT Contents FROM Boxes WHERE Value > (150)",
          "SELECT Contents FROM Boxes WHERE Value > (SELECT MAX(150))"
        ]
      ]
    },
    {
      "id": 1686,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Value > 150",
          "SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150",
          "SELECT b.Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150.0",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 ORDER BY Contents",
          "SELECT Contents FROM Boxes WHERE Value > 150 AND Contents IS NOT NULL",
          "SELECT Contents FROM Boxes b WHERE b.Value > 150",
          "SELECT Contents FROM Boxes WHERE Value > 150 GROUP BY Contents",
          "SELECT Contents FROM Boxes WHERE Value > 150 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1687,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, AVG(Boxes.Value) AS AvgValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, AVG(b.Value) FROM Warehouses w INNER JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, AVG(b.Value) AS AverageValue FROM Warehouses AS w JOIN Boxes AS b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, AVG(Value) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Code",
          "SELECT w.Code, AVG(b.Value) FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, AVG(Value) AS AvgBoxValue FROM Warehouses INNER JOIN Boxes ON Code = Warehouse GROUP BY Code",
          "SELECT w.Code, AVG(b.Value) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageBoxValue FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, AVG(b.Value) AS AvgValue FROM Warehouses w RIGHT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code"
        ]
      ]
    },
    {
      "id": 1688,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(B.Value), W.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Code",
          "SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code",
          "SELECT W.Code, AVG(B.Value) FROM Warehouses W, Boxes B WHERE B.Warehouse = W.Code GROUP BY W.Code",
          "SELECT AVG(Value), Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code",
          "SELECT Code, AVG(Value) AS AvgValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Code",
          "SELECT AVG(Value) AS AverageValue, Code FROM Boxes JOIN Warehouses ON Warehouse = Code GROUP BY Code",
          "SELECT Code, AVG(Value) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Code",
          "SELECT AVG(B.Value) AS AverageBoxValue, W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT W.Code, AVG(B.Value) AS AvgValue FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT AVG(Value), Code FROM Boxes JOIN Warehouses ON Warehouse = Code GROUP BY Code"
        ]
      ]
    },
    {
      "id": 1689,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Value) AS Average_Value, SUM(Value) AS Total_Value FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue, SUM(Boxes.Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Boxes.Value) AS 'Average Value', SUM(Boxes.Value) AS 'Total Value' FROM Boxes",
          "SELECT AVG(Value), SUM(Value) FROM Boxes",
          "SELECT AVG(Value) Average, SUM(Value) Total FROM Boxes",
          "SELECT AVG(Value) as AverageValue, SUM(Value) as TotalValue FROM Boxes",
          "SELECT AVG(Boxes.Value) as Average_Value, SUM(Boxes.Value) as Total_Value FROM Boxes",
          "SELECT AVG(Value) 'Average Value', SUM(Value) 'Total Value' FROM Boxes",
          "SELECT AVG(Value) average_value, SUM(Value) total_value FROM Boxes"
        ]
      ]
    },
    {
      "id": 1690,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Value) AS Average_Value, SUM(Value) AS Total_Value FROM Boxes",
          "SELECT AVG(Value) AverageValue, SUM(Value) TotalValue FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue, SUM(Boxes.Value) AS TotalValue FROM Boxes",
          "SELECT AVG(Boxes.Value) AS Average_Value, SUM(Boxes.Value) AS Total_Value FROM Boxes",
          "SELECT AVG(Boxes.Value) AverageValue, SUM(Boxes.Value) TotalValue FROM Boxes",
          "SELECT AVG(Value), SUM(Value) FROM Boxes",
          "SELECT AVG(Value) AS AvgValue, SUM(Value) AS SumValue FROM Boxes",
          "SELECT AVG(Value) AvgValue, SUM(Value) SumValue FROM Boxes",
          "SELECT AVG(Value) AS Average, SUM(Value) AS Total FROM Boxes"
        ]
      ]
    },
    {
      "id": 1691,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT AVG(Capacity) AS Average_Capacity, SUM(Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity), SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT (SELECT AVG(Capacity) FROM Warehouses) AS AverageCapacity, (SELECT SUM(Capacity) FROM Warehouses) AS TotalCapacity FROM Warehouses LIMIT 1",
          "SELECT (SELECT AVG(Capacity) FROM Warehouses) AS Average_Capacity, (SELECT SUM(Capacity) FROM Warehouses) AS Total_Capacity FROM Warehouses LIMIT 1",
          "SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses GROUP BY 'AllWarehouses'",
          "SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses GROUP BY 'AllWarehouses'"
        ]
      ]
    },
    {
      "id": 1692,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT AVG(Capacity) AS Average_Capacity, SUM(Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AS AvgCapacity, SUM(Warehouses.Capacity) AS SumCapacity FROM Warehouses",
          "SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses",
          "SELECT AVG(Capacity) AverageCapacity, SUM(Capacity) TotalCapacity FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) AverageCapacity, SUM(Warehouses.Capacity) TotalCapacity FROM Warehouses",
          "SELECT AVG(Capacity) as 'Average Capacity', SUM(Capacity) as 'Total Capacity' FROM Warehouses",
          "SELECT AVG(Capacity) 'Average Capacity', SUM(Capacity) 'Total Capacity' FROM Warehouses",
          "SELECT AVG(Warehouses.Capacity) 'Avg Capacity', SUM(Warehouses.Capacity) 'Total Capacity' FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1693,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, AVG(Value) AS AverageValue, MAX(Value) AS MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS AvgValue, MAX(Value) AS MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Maximum_Value FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, average(Value) as AverageValue, maximum(Value) as MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, mean(Value) AS AverageValue, max(Value) AS MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) average_value, MAX(Value) maximum_value FROM Boxes GROUP BY Contents",
          "SELECT B.Contents, AVG(B.Value) AS AverageValue, MAX(B.Value) AS MaxValue FROM Boxes B GROUP BY B.Contents",
          "SELECT Contents, AVG(Value) AS Avg_Val, MAX(Value) AS Max_Val FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Max_Value FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1694,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Maximum_Value FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) as AvgValue, MAX(Value) as MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, average(Value) as AverageValue, maximum(Value) as MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AverageValue, MAX(Value) MaximumValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) as Average_Value, MAX(Value) as Maximum_Value FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) average_value, MAX(Value) maximum_value FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS 'Average Value', MAX(Value) AS 'Maximum Value' FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS AverageValue, MAX(Value) AS MaxValue FROM Boxes GROUP BY Contents",
          "SELECT Contents, AVG(Value) AS 'Avg Value', MAX(Value) AS 'Max Value' FROM Boxes GROUP BY Contents"
        ]
      ]
    },
    {
      "id": 1695,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1",
          "SELECT Contents, MAX(total_value) FROM (SELECT Contents, SUM(Value) AS total_value FROM Boxes GROUP BY Contents) AS subquery",
          "SELECT TOP 1 Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC",
          "SELECT Contents FROM (SELECT Contents, SUM(Value) AS total_value FROM Boxes GROUP BY Contents ORDER BY total_value DESC) WHERE ROWNUM = 1",
          "SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(total_sum) FROM (SELECT SUM(Value) AS total_sum FROM Boxes GROUP BY Contents))",
          "SELECT Contents, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC FETCH FIRST ROW ONLY",
          "SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) >= ALL (SELECT SUM(Value) FROM Boxes GROUP BY Contents)",
          "SELECT Contents, MAX(SumValue) FROM (SELECT Contents, SUM(Value) AS SumValue FROM Boxes GROUP BY Contents) AS ValueSums",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1696,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes)",
          "SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1",
          "SELECT TOP 1 Contents FROM Boxes ORDER BY Value DESC",
          "SELECT B.Contents FROM Boxes B WHERE B.Value = (SELECT MAX(Value) FROM Boxes)",
          "SELECT Contents FROM Boxes WHERE Value IN (SELECT MAX(Value) FROM Boxes)",
          "SELECT Contents FROM Boxes ORDER BY Value DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Contents FROM (SELECT Contents, Value, RANK() OVER (ORDER BY Value DESC) AS rank FROM Boxes) WHERE rank = 1",
          "SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes) LIMIT 1",
          "SELECT Contents FROM Boxes AS B WHERE B.Value = (SELECT MAX(B2.Value) FROM Boxes B2)",
          "SELECT Contents FROM Boxes WHERE Value >= ALL (SELECT Value FROM Boxes)"
        ]
      ]
    },
    {
      "id": 1697,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) FROM Boxes",
          "SELECT AVG(Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Boxes.Value) FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Value) AS Average_Value FROM Boxes",
          "SELECT AVG(Boxes.Value) AS Average_Value FROM Boxes",
          "SELECT AVG(Value) FROM Boxes AS AverageValue",
          "SELECT AVG(Value) FROM Boxes AS Average_Value",
          "SELECT AVG(Boxes.Value) FROM Boxes AS AverageValue",
          "SELECT AVG(Boxes.Value) FROM Boxes AS Average_Value"
        ]
      ]
    },
    {
      "id": 1698,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT AVG(Value) FROM Boxes",
          "SELECT AVG(Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Boxes.Value) FROM Boxes",
          "SELECT AVG(Boxes.Value) AS AverageValue FROM Boxes",
          "SELECT AVG(Value) AS Average_Value FROM Boxes",
          "SELECT AVG(Boxes.Value) AS Average_Value FROM Boxes",
          "SELECT AVG(Value) FROM Boxes AS AverageValue",
          "SELECT AVG(Value) FROM Boxes AS Average_Value",
          "SELECT AVG(Boxes.Value) FROM Boxes AS AverageValue",
          "SELECT AVG(Boxes.Value) FROM Boxes AS Average_Value"
        ]
      ]
    },
    {
      "id": 1699,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes",
          "SELECT DISTINCT Boxes.Contents FROM Boxes",
          "SELECT DISTINCT b.Contents FROM Boxes b",
          "SELECT DISTINCT c FROM (SELECT Contents AS c FROM Boxes) AS subquery",
          "SELECT DISTINCT Contents FROM Boxes GROUP BY Contents",
          "SELECT DISTINCT Contents AS UniqueContents FROM Boxes",
          "SELECT DISTINCT(Contents) FROM Boxes",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents IS NOT NULL",
          "SELECT DISTINCT Contents FROM Boxes HAVING COUNT(*) >= 1"
        ]
      ]
    },
    {
      "id": 1700,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes",
          "SELECT Contents FROM Boxes GROUP BY Contents",
          "SELECT DISTINCT(Contents) FROM Boxes",
          "SELECT Contents FROM Boxes WHERE Contents IS NOT NULL GROUP BY Contents",
          "SELECT DISTINCT B.Contents FROM Boxes B",
          "SELECT DISTINCT Contents AS BoxContents FROM Boxes",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents <> ''",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents IS NOT NULL",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents != ''"
        ]
      ]
    },
    {
      "id": 1701,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Contents) FROM Boxes",
          "SELECT COUNT(UNIQUE Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes)",
          "SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes AS B)",
          "SELECT DISTINCT COUNT(Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT B.Contents) FROM Boxes B",
          "SELECT COUNT(*) FROM (SELECT DISTINCT B.Contents FROM Boxes B)",
          "SELECT DISTINCT COUNT(*) OVER (PARTITION BY Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT Contents) AS DistinctContentsCount FROM Boxes"
        ]
      ]
    },
    {
      "id": 1702,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Contents) FROM Boxes",
          "SELECT COUNT(UNIQUE Contents) FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes)",
          "SELECT DISTINCT COUNT(Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT Contents) AS UniqueContents FROM Boxes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) AS UniqueContents",
          "SELECT COUNT(DISTINCT Boxes.Contents) FROM Boxes",
          "SELECT DISTINCT COUNT(Boxes.Contents) FROM Boxes",
          "SELECT COUNT(DISTINCT Contents) FROM Boxes GROUP BY Contents",
          "SELECT COUNT(*) FROM (SELECT Contents FROM Boxes GROUP BY Contents)"
        ]
      ]
    },
    {
      "id": 1703,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Location FROM Warehouses",
          "SELECT Location FROM Warehouses GROUP BY Location",
          "SELECT DISTINCT Location FROM Warehouses ORDER BY Location",
          "SELECT DISTINCT Location AS WarehouseLocation FROM Warehouses",
          "SELECT DISTINCT W.Location FROM Warehouses W",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location <> ''",
          "SELECT DISTINCT Location FROM Warehouses ORDER BY Location ASC",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location != ''",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL ORDER BY Location"
        ]
      ]
    },
    {
      "id": 1704,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Location FROM Warehouses",
          "SELECT Location FROM Warehouses GROUP BY Location",
          "SELECT DISTINCT Location AS WarehouseLocation FROM Warehouses",
          "SELECT Location FROM Warehouses WHERE Location IS NOT NULL GROUP BY Location",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location <> ''",
          "SELECT DISTINCT Location FROM Warehouses ORDER BY Location",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location != ''",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location IS NOT NULL ORDER BY Location",
          "SELECT DISTINCT Location FROM Warehouses WHERE Location <> '' ORDER BY Location"
        ]
      ]
    },
    {
      "id": 1705,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND (w.Location = 'Chicago' OR w.Location = 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT DISTINCT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes AS B WHERE EXISTS (SELECT 1 FROM Warehouses AS W WHERE W.Code = B.Warehouse AND W.Location IN ('Chicago', 'New York'))",
          "SELECT Boxes.Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT B.Code FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1706,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND (w.Location = 'Chicago' OR w.Location = 'New York')",
          "SELECT DISTINCT Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')",
          "SELECT Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT Boxes.Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago' OR w.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1707,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND (W.Location = 'Chicago' OR W.Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT SUM(Boxes.Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code AND W.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Boxes.Value) FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))",
          "SELECT SUM(Value) AS TotalBoxValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT SUM(B.Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'"
        ]
      ]
    },
    {
      "id": 1708,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT SUM(Boxes.Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT SUM(Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location IN ('Chicago', 'New York')",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT SUM(Value) FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'",
          "SELECT SUM(Boxes.Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Location",
          "SELECT SUM(Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT SUM(B.Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location IN ('Chicago', 'New York')"
        ]
      ]
    },
    {
      "id": 1709,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT B.Contents FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' OR W.Location = 'New York'",
          "SELECT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND (Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York')",
          "SELECT B.Contents FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location IN ('Chicago', 'New York')",
          "SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' UNION SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')",
          "SELECT Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT B.Contents FROM Boxes B LEFT JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')",
          "SELECT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code AND Warehouses.Location IN ('Chicago', 'New York')",
          "SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))"
        ]
      ]
    },
    {
      "id": 1710,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') INTERSECT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')",
          "SELECT B.Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' INTERSECT SELECT B.Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York'",
          "SELECT DISTINCT B1.Contents FROM Boxes B1 INNER JOIN Warehouses W1 ON B1.Warehouse = W1.Code WHERE W1.Location = 'Chicago' AND B1.Contents IN (SELECT B2.Contents FROM Boxes B2 INNER JOIN Warehouses W2 ON B2.Warehouse = W2.Code WHERE W2.Location = 'New York')",
          "WITH ChicagoBoxes AS (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'Chicago'), NewYorkBoxes AS (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'New York') SELECT ChicagoBoxes.Contents FROM ChicagoBoxes JOIN NewYorkBoxes ON ChicagoBoxes.Contents = NewYorkBoxes.Contents",
          "SELECT Contents FROM Boxes B WHERE EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location = 'Chicago') AND EXISTS (SELECT 1 FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location = 'New York')",
          "SELECT B.Contents FROM Boxes B, Warehouses W1, Warehouses W2 WHERE B.Warehouse = W1.Code AND W1.Location = 'Chicago' AND B.Warehouse = W2.Code AND W2.Location = 'New York'",
          "SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) GROUP BY Contents HAVING COUNT(DISTINCT Warehouse) > 1",
          "SELECT Contents FROM (SELECT Contents, COUNT(DISTINCT Location) AS LocationsCount FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location IN ('Chicago', 'New York') GROUP BY Contents) AS SubQuery WHERE LocationsCount = 2",
          "SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Contents IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'))",
          "SELECT DISTINCT Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago' UNION SELECT DISTINCT Contents FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'New York' HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1711,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Contents NOT IN (SELECT DISTINCT B2.Contents FROM Boxes B2 INNER JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "SELECT DISTINCT Contents FROM Boxes B WHERE NOT EXISTS (SELECT 1 FROM Boxes B2 JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York' AND B2.Contents = B.Contents)",
          "WITH NYContents AS (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York') SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM NYContents)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York')",
          "SELECT Contents FROM Boxes GROUP BY Contents HAVING Contents NOT IN (SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B1 WHERE NOT EXISTS (SELECT NULL FROM Boxes B2 JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York' AND B1.Contents = B2.Contents)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B LEFT JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location != 'New York' OR W.Location IS NULL"
        ]
      ]
    },
    {
      "id": 1712,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Contents NOT IN (SELECT DISTINCT B2.Contents FROM Boxes B2 INNER JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'",
          "WITH NYContents AS (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York') SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM NYContents)",
          "SELECT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York') GROUP BY Contents",
          "SELECT DISTINCT Contents FROM Boxes B LEFT JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location != 'New York' OR W.Location IS NULL",
          "SELECT DISTINCT Contents FROM Boxes WHERE NOT EXISTS (SELECT 1 FROM Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes B WHERE NOT EXISTS (SELECT 1 FROM Boxes B2 JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York' AND B2.Contents = B.Contents)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')",
          "SELECT DISTINCT Contents FROM Boxes b1 WHERE NOT EXISTS (SELECT NULL FROM Boxes b2 JOIN Warehouses w ON b2.Warehouse = w.Code WHERE w.Location = 'New York' AND b2.Contents = b1.Contents)"
        ]
      ]
    },
    {
      "id": 1713,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Contents = 'Rocks' AND B.Warehouse = W.Code) AND NOT EXISTS (SELECT 1 FROM Boxes B WHERE B.Contents = 'Scissors' AND B.Warehouse = W.Code)",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' AND W.Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes B2 WHERE B2.Contents = 'Scissors' AND B2.Warehouse = W.Code)",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks' AND W.Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Location FROM Warehouses W WHERE EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND NOT EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W JOIN Boxes B1 ON W.Code = B1.Warehouse WHERE B1.Contents = 'Rocks' AND NOT EXISTS (SELECT * FROM Boxes B2 WHERE B2.Warehouse = W.Code AND B2.Contents = 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND NOT EXISTS (SELECT * FROM Boxes WHERE Contents = 'Scissors' AND Warehouse = Code)"
        ]
      ]
    },
    {
      "id": 1714,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Contents = 'Rocks' AND B.Warehouse = W.Code) AND NOT EXISTS (SELECT 1 FROM Boxes B WHERE B.Contents = 'Scissors' AND B.Warehouse = W.Code)",
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' AND W.Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Rocks') EXCEPT SELECT W.Location FROM Warehouses W WHERE W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks' GROUP BY W.Location HAVING SUM(CASE WHEN B.Contents = 'Scissors' THEN 1 ELSE 0 END) = 0",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING MAX(Contents = 'Rocks') = 1 AND MAX(Contents = 'Scissors') = 0)",
          "SELECT W.Location FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse AND B.Contents = 'Scissors' WHERE B.Warehouse IS NULL AND EXISTS (SELECT 1 FROM Boxes B2 WHERE B2.Warehouse = W.Code AND B2.Contents = 'Rocks')",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B1 WHERE B1.Warehouse = W.Code AND B1.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes B2 WHERE B2.Warehouse = W.Code AND B2.Contents = 'Scissors')"
        ]
      ]
    },
    {
      "id": 1715,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT Warehouses.Code FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors'",
          "SELECT W.Code FROM Warehouses AS W, Boxes AS B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')",
          "SELECT DISTINCT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))",
          "SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT Warehouses.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse AND Boxes.Contents IN ('Rocks', 'Scissors')",
          "SELECT W.Code FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' UNION SELECT W.Code FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Scissors'",
          "SELECT DISTINCT W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors'",
          "SELECT DISTINCT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Warehouses.Code AND Contents IN ('Rocks', 'Scissors'))"
        ]
      ]
    },
    {
      "id": 1716,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT Warehouses.Code FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks' OR Boxes.Contents = 'Scissors'",
          "SELECT DISTINCT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')",
          "SELECT DISTINCT w.Code FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse AND (b.Contents = 'Rocks' OR b.Contents = 'Scissors')",
          "SELECT DISTINCT Warehouses.Code FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Boxes.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT w.Code FROM Warehouses AS w JOIN Boxes AS b ON w.Code = b.Warehouse WHERE b.Contents = 'Rocks' UNION SELECT DISTINCT w.Code FROM Warehouses AS w JOIN Boxes AS b ON w.Code = b.Warehouse WHERE b.Contents = 'Scissors'",
          "SELECT DISTINCT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Warehouses.Code AND (Contents = 'Rocks' OR Contents = 'Scissors'))",
          "SELECT DISTINCT w.Code FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT Warehouses.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse AND Boxes.Contents IN ('Rocks', 'Scissors')",
          "SELECT DISTINCT w.Code FROM Warehouses w INNER JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents = 'Rocks' OR b.Contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1717,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Location FROM Warehouses W WHERE W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Rocks') AND W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors') GROUP BY Warehouse HAVING COUNT(DISTINCT Contents) = 2)",
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' INTERSECT SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Scissors'",
          "SELECT W1.Location FROM Warehouses W1 JOIN Boxes B1 ON W1.Code = B1.Warehouse WHERE B1.Contents = 'Rocks' JOIN Warehouses W2 JOIN Boxes B2 ON W2.Code = B2.Warehouse WHERE B2.Contents = 'Scissors' AND W1.Code = W2.Code",
          "WITH Rocks AS (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'), Scissors AS (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors') SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Rocks INTERSECT SELECT Warehouse FROM Scissors)",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION ALL SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors' HAVING COUNT(*) > 1)",
          "SELECT W.Location FROM Warehouses W, Boxes B1, Boxes B2 WHERE W.Code = B1.Warehouse AND W.Code = B2.Warehouse AND B1.Contents = 'Rocks' AND B2.Contents = 'Scissors'",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Rocks') AND Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') INTERSECT SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING SUM(CASE WHEN Contents = 'Rocks' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Contents = 'Scissors' THEN 1 ELSE 0 END) > 0)"
        ]
      ]
    },
    {
      "id": 1718,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors') GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) = 2",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' INTERSECT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' OR B.Contents = 'Scissors' GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) >= 2",
          "SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors') GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) = 2",
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks' AND W.Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT W.Location FROM Warehouses W WHERE W.Code IN (SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Rocks' GROUP BY B.Warehouse INTERSECT SELECT B.Warehouse FROM Boxes B WHERE B.Contents = 'Scissors' GROUP BY B.Warehouse)",
          "SELECT DISTINCT W.Location FROM Warehouses W JOIN Boxes B1 ON W.Code = B1.Warehouse JOIN Boxes B2 ON W.Code = B2.Warehouse WHERE B1.Contents = 'Rocks' AND B2.Contents = 'Scissors'",
          "SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' AND Warehouse IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors'))"
        ]
      ]
    },
    {
      "id": 1719,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASCENDING",
          "SELECT Code, Contents FROM Boxes SORT BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Boxes.Value ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value IN ASCENDING ORDER",
          "SELECT `Code`, `Contents` FROM `Boxes` ORDER BY `Value`",
          "SELECT Code AS BoxCode, Contents AS BoxContents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC, Code ASC"
        ]
      ]
    },
    {
      "id": 1720,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASCENDING",
          "SELECT Code, Contents FROM Boxes ORDER BY Boxes.Value",
          "SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC, Code",
          "SELECT Code, Contents FROM Boxes ORDER BY Value, Code",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC, Contents",
          "SELECT Code, Contents FROM Boxes ORDER BY Value DESC"
        ]
      ]
    },
    {
      "id": 1721,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value ASC LIMIT 1",
          "SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)",
          "SELECT TOP 1 Code, Contents FROM Boxes ORDER BY Value ASC",
          "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value = (SELECT MIN(B2.Value) FROM Boxes B2)",
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes LIMIT 1)",
          "SELECT Code, Contents FROM Boxes ORDER BY Value ASC FETCH FIRST 1 ROW ONLY",
          "SELECT FIRST(Code), FIRST(Contents) FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(Value) FROM Boxes AS B2)"
        ]
      ]
    },
    {
      "id": 1722,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value = (SELECT MIN(Value) FROM Boxes)",
          "SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)",
          "SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value ASC LIMIT 1",
          "SELECT Code, Contents FROM Boxes ORDER BY Value LIMIT 1",
          "SELECT TOP 1 Code, Contents FROM Boxes ORDER BY Value",
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(B.Value) FROM Boxes B)",
          "SELECT B1.Code, B1.Contents FROM Boxes B1 WHERE B1.Value = (SELECT MIN(B2.Value) FROM Boxes B2)",
          "SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes AS B)",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value = (SELECT MIN(Value) FROM Boxes) ORDER BY B.Value ASC"
        ]
      ]
    },
    {
      "id": 1723,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(B.Value) FROM Boxes B)",
          "SELECT DISTINCT Contents FROM Boxes B1 WHERE B1.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)",
          "SELECT DISTINCT B.Contents FROM Boxes AS B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes AS B2)",
          "SELECT DISTINCT Contents FROM Boxes B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes GROUP BY Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes WHERE Value IS NOT NULL)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes WHERE Contents IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1724,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(Value) FROM Boxes)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)",
          "SELECT DISTINCT Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT B.Contents FROM Boxes B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes GROUP BY Warehouse)",
          "SELECT DISTINCT Contents FROM Boxes B1 WHERE B1.Value > (SELECT AVG(B2.Value) FROM Boxes B2)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes WHERE Value IS NOT NULL)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes WHERE Value > 0)",
          "SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes WHERE Contents IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1725,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes GROUP BY Contents ORDER BY Contents ASC",
          "SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents",
          "SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY 1",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents COLLATE NOCASE",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASCENDING",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents, Code"
        ]
      ]
    },
    {
      "id": 1726,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents",
          "SELECT Contents FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT DISTINCT Contents FROM Boxes SORT BY Contents ASCENDING",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ALPHABETICALLY",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents COLLATE NOCASE",
          "SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY UPPER(Contents)",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY LOWER(Contents) ASC",
          "SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASCENDING"
        ]
      ]
    },
    {
      "id": 1727,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B1.Code FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents IN ('Rocks'))",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes B WHERE B.Contents = 'Rocks')",
          "SELECT Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')"
        ]
      ]
    },
    {
      "id": 1728,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT B1.Code FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents IN ('Rocks'))",
          "SELECT Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes B WHERE B.Contents = 'Rocks')",
          "SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')"
        ]
      ]
    },
    {
      "id": 1729,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT B1.Code, B1.Contents FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > ALL (SELECT B2.Value FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' GROUP BY Contents)",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents IN ('Scissors'))",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' AND Value IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1730,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors')",
          "SELECT B1.Code, B1.Contents FROM Boxes B1 WHERE B1.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Scissors')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Scissors')",
          "SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE '%Scissors%')",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents IN ('Scissors'))",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' GROUP BY Contents)",
          "SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' AND Value IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1731,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "WITH MaxCapacity AS (SELECT MAX(Capacity) AS Capacity FROM Warehouses) SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses, MaxCapacity WHERE Warehouses.Capacity = MaxCapacity.Capacity)",
          "SELECT SUM(Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes B INNER JOIN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)) W ON B.Warehouse = W.Code",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity >= ALL (SELECT Capacity FROM Warehouses))",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT TOP 1 Code FROM Warehouses ORDER BY Capacity DESC)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))"
        ]
      ]
    },
    {
      "id": 1732,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity >= ALL (SELECT Capacity FROM Warehouses))",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT TOP 1 Code FROM Warehouses ORDER BY Capacity DESC)",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(Value) FROM Boxes B INNER JOIN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses)) W ON B.Warehouse = W.Code",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))",
          "SELECT SUM(B.Value) FROM Boxes B WHERE B.Warehouse = (SELECT W.Code FROM Warehouses W WHERE W.Capacity = (SELECT MAX(W2.Capacity) FROM Warehouses W2))"
        ]
      ]
    },
    {
      "id": 1733,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code, AVG(B.Value) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150",
          "SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AverageValue > 150",
          "SELECT Code, AVG(Value) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Code HAVING AVG(Value) > 150",
          "SELECT W.Code, AVG(B.Value) AS AvgValue FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AvgValue > 150",
          "SELECT Code, AVG(Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Code HAVING AVG(Value) > 150",
          "SELECT W.Code, AVG(B.Value) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150",
          "SELECT W.Code, AVG(B.Value) AS AverageValue FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Value IS NOT NULL GROUP BY W.Code HAVING AverageValue > 150",
          "SELECT W.Code, AVG(B.Value) FROM Warehouses W RIGHT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150",
          "SELECT W.Code, AVG(B.Value) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150",
          "SELECT W.Code, AVG(B.Value) AS AvgBoxValue FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AvgBoxValue > 150"
        ]
      ]
    },
    {
      "id": 1734,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT B.Warehouse, AVG(B.Value) AS AverageValue FROM Boxes B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes WHERE AVG(Value) > 150 GROUP BY Warehouse",
          "SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT B.Warehouse, AVG(B.Value) FROM Boxes B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse HAVING AverageValue > 150",
          "SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT B.Warehouse, AVG(B.Value) AS AvgValue FROM Boxes AS B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150",
          "SELECT Warehouse, AVG(Value) AS AverageValue FROM Boxes GROUP BY Warehouse HAVING AverageValue > 150"
        ]
      ]
    },
    {
      "id": 1735,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS Total_Value, COUNT(*) AS Box_Count FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) TotalValue, COUNT(Code) NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value), COUNT(Code) FROM Boxes GROUP BY Contents",
          "SELECT B.Contents, SUM(B.Value) AS TotalValue, COUNT(B.Code) AS NumberOfBoxes FROM Boxes B GROUP BY B.Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, TOTAL(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents HAVING COUNT(Code) > 0",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC"
        ]
      ]
    },
    {
      "id": 1736,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) TotalValue, COUNT(*) NumberOfBoxes FROM Boxes GROUP BY Contents",
          "SELECT B.Contents, SUM(B.Value) AS TotalValue, COUNT(B.Code) AS NumberOfBoxes FROM Boxes B GROUP BY B.Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS BoxCount FROM Boxes GROUP BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents ORDER BY Contents",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents ORDER BY NumberOfBoxes DESC",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents HAVING COUNT(Code) > 0",
          "SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents HAVING SUM(Value) > 0"
        ]
      ]
    },
    {
      "id": 1737,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, TOTAL(Capacity) AS Total, AVG(Capacity) AS Average, MAX(Capacity) AS Maximum FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Avg_Capacity, MAX(Capacity) AS Max_Capacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) total_capacity, AVG(Capacity) average_capacity, MAX(Capacity) maximum_capacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) TotalCapacity, AVG(Capacity) AverageCapacity, MAX(Capacity) MaximumCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS 'Total Capacity', AVG(Capacity) AS 'Average Capacity', MAX(Capacity) AS 'Max Capacity' FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location ORDER BY Location",
          "SELECT Location, SUM(Capacity) AS Total, AVG(Capacity) AS Average, MAX(Capacity) AS Max FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location"
        ]
      ]
    },
    {
      "id": 1738,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) TotalCapacity, AVG(Capacity) AverageCapacity, MAX(Capacity) MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, TOTAL(Capacity) AS TotalCapacity, AVERAGE(Capacity) AS AverageCapacity, MAXIMUM(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS 'Total Capacity', AVG(Capacity) AS 'Average Capacity', MAX(Capacity) AS 'Maximum Capacity' FROM Warehouses GROUP BY Location",
          "SELECT W.Location, SUM(W.Capacity) AS TotalCapacity, AVG(W.Capacity) AS AverageCapacity, MAX(W.Capacity) AS MaxCapacity FROM Warehouses W GROUP BY W.Location",
          "SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location",
          "SELECT Location AS WarehouseLocation, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AvgCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, Aggregate(SUM, Capacity) AS TotalCapacity, Aggregate(AVG, Capacity) AS AverageCapacity, Aggregate(MAX, Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM Warehouses GROUP BY Location",
          "SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location ORDER BY Location"
        ]
      ]
    },
    {
      "id": 1739,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT SUM(Capacity) FROM Warehouses",
          "SELECT TOTAL(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT TOTAL(Warehouses.Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses",
          "SELECT SUM(Capacity) FROM Warehouses AS TotalCapacity",
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses GROUP BY 'Total'",
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses WHERE Capacity IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1740,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT TOTAL(Capacity) FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) FROM Warehouses",
          "SELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses",
          "SELECT TOTAL(Warehouses.Capacity) FROM Warehouses",
          "SELECT SUM(Capacity) FROM Warehouses AS Total",
          "SELECT SUM(Capacity) AS Total FROM Warehouses",
          "SELECT SUM(Capacity) TotalCapacity FROM Warehouses",
          "SELECT TOTAL(Capacity) AS TotalCapacity FROM Warehouses"
        ]
      ]
    },
    {
      "id": 1741,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Location, MAX(B.Value) AS MaxValue FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Location",
          "SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location",
          "SELECT W.Location AS WarehouseLocation, MAX(B.Value) AS HighestValue FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaxBoxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location ORDER BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) AS MaxValue FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaximumValue FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Location ORDER BY MaximumValue DESC",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location ORDER BY MAX(B.Value) DESC"
        ]
      ]
    },
    {
      "id": 1742,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Location, MAX(B.Value) AS MaxValue FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location",
          "SELECT W.Location AS WarehouseLocation, MAX(B.Value) AS HighestValue FROM Warehouses AS W INNER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaxBoxValue FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Location ORDER BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) AS MaxValue FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location",
          "SELECT Location, MAX(Value) AS MaximumValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location",
          "SELECT W.Location, MAX(B.Value) FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Location"
        ]
      ]
    },
    {
      "id": 1743,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code, COUNT(B.Code) AS NumberOfBoxes FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS BoxCount FROM Warehouses",
          "SELECT Warehouses.Code AS WarehouseCode, COUNT(*) AS TotalBoxes FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, (SELECT COUNT(*) FROM Boxes B WHERE B.Warehouse = W.Code) AS BoxesCount FROM Warehouses W",
          "SELECT Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT OUTER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Code",
          "SELECT W.Code, IFNULL(B.TotalBoxes, 0) AS NumberOfBoxes FROM Warehouses W LEFT JOIN (SELECT Warehouse, COUNT(*) AS TotalBoxes FROM Boxes GROUP BY Warehouse) B ON W.Code = B.Warehouse",
          "SELECT Warehouses.Code, COUNT(Boxes.Warehouse) AS NumberOfBoxes FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(B.Warehouse) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code"
        ]
      ]
    },
    {
      "id": 1744,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code, COUNT(B.Code) AS BoxCount FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code AS WarehouseCode, COUNT(*) AS NumberOfBoxes FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS TotalBoxes FROM Warehouses",
          "SELECT Warehouses.Code, COUNT(Boxes.Code) AS TotalBoxes FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(B.Code) FROM Warehouses AS W LEFT JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT W.Code, IFNULL(COUNT(B.Code), 0) AS BoxCount FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT W.Code, COUNT(B.Code) AS BoxesInWarehouse FROM Warehouses W LEFT OUTER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT W.Code AS Warehouse_Code, COUNT(B.Code) AS Count_of_Boxes FROM Warehouses AS W JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT W.Code, COUNT(B.Code) AS NumberOfBoxes FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code ORDER BY W.Code"
        ]
      ]
    },
    {
      "id": 1745,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT W.Location) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT COUNT(UNIQUE Location) FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks'",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Boxes.Contents = 'Rocks')",
          "SELECT COUNT(DISTINCT W.Location) FROM Warehouses AS W, Boxes AS B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks')",
          "SELECT COUNT(DISTINCT Location) FROM (SELECT Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks') AS UniqueLocations",
          "SELECT COUNT(DISTINCT W.Location) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse AND B.Contents = 'Rocks'",
          "SELECT DISTINCT COUNT(Location) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Location) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse AND Boxes.Contents = 'Rocks'"
        ]
      ]
    },
    {
      "id": 1746,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT B.Warehouse) FROM Boxes B WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT W.Code) FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents LIKE 'Rocks'",
          "SELECT COUNT(DISTINCT B.Warehouse) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(UNIQUE B.Warehouse) FROM Boxes B WHERE B.Contents = 'Rocks'",
          "SELECT COUNT(DISTINCT Warehouse) AS NumberOfWarehouses FROM Boxes WHERE Contents = 'Rocks'",
          "SELECT DISTINCT COUNT(Warehouse) FROM Boxes WHERE Contents = 'Rocks' GROUP BY Warehouse",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks') AS UniqueWarehouses",
          "SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks' AND Warehouse IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1747,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT code, location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT b.code AS BoxCode, w.location AS WarehouseLocation FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code",
          "SELECT Code, Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT Boxes.Code AS Box_Code, Warehouses.Location AS City FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT b.Code, w.Location FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code",
          "SELECT Code, Location FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT b.Code AS 'Box Code', w.Location AS 'Warehouse City' FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code"
        ]
      ]
    },
    {
      "id": 1748,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code",
          "SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code",
          "SELECT code AS BoxCode, location AS WarehouseLocation FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT b.code, w.location FROM boxes b, warehouses w WHERE b.warehouse = w.code",
          "SELECT `Code`, `Location` FROM `Boxes` JOIN `Warehouses` ON `Boxes`.`Warehouse` = `Warehouses`.`Code`",
          "SELECT Boxes.Code AS Box_Code, Warehouses.Location AS Warehouse_Location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code",
          "SELECT DISTINCT b.Code, w.Location FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code",
          "SELECT Code, Location FROM Boxes JOIN Warehouses ON Warehouse = Code",
          "SELECT b.Code AS 'Box Code', w.Location AS 'Warehouse Location' FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code ORDER BY b.Code",
          "SELECT Code AS BoxCode, Location AS WarehouseLocation FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1749,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'Chicago'",
          "SELECT Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'Chicago'",
          "SELECT DISTINCT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT Code FROM Boxes AS B INNER JOIN Warehouses AS W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago'",
          "SELECT B.Code FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code AND W.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses WHERE Location = 'Chicago')"
        ]
      ]
    },
    {
      "id": 1750,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT B.Code FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT Boxes.Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'Chicago'",
          "SELECT Code FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'Chicago'",
          "SELECT DISTINCT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT Boxes.Code FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'",
          "SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'",
          "SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location LIKE 'Chicago')",
          "SELECT Code FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code AND Warehouses.Location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1751,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, COUNT(Boxes.Code) AS NumberOfBoxes FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) AS BoxCount FROM Warehouses w INNER JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, COUNT(*) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) FROM Warehouses AS w, Boxes AS b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT w.Code AS WarehouseCode, COUNT(b.Code) AS TotalBoxes FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, COUNT(Boxes.Code) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code AS WarehouseID, COUNT(Boxes.Code) AS BoxesCount FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) AS CountOfBoxes FROM Warehouses w LEFT OUTER JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, COUNT(Boxes.Code) AS NumberOfBoxesStored FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code"
        ]
      ]
    },
    {
      "id": 1752,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) AS NumberOfBoxes FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT w.Code AS WarehouseCode, COUNT(b.Code) AS TotalBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, COUNT(*) AS BoxesInWarehouse FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS BoxCount FROM Warehouses",
          "SELECT Warehouses.Code, IFNULL(COUNT(Boxes.Code), 0) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(b.Code) AS BoxesCount FROM Warehouses AS w LEFT OUTER JOIN Boxes AS b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, COUNT(Boxes.Code) AS CountOfBoxes FROM Warehouses LEFT OUTER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Code",
          "SELECT w.Code, COUNT(b.Code) AS TotalBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY w.Code"
        ]
      ]
    },
    {
      "id": 1753,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DistinctContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(DISTINCT B.Contents) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT w.Code, COUNT(DISTINCT b.Contents) FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code AS WarehouseCode, COUNT(DISTINCT b.Contents) AS UniqueContents FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, COUNT(DISTINCT Contents) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Code",
          "SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT DISTINCT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT Code, COUNT(DISTINCT Contents) AS NumberOfDistinctContents FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(DISTINCT b.Contents) AS TypesOfContents FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code"
        ]
      ]
    },
    {
      "id": 1754,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS TypesOfContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT W.Code, COUNT(DISTINCT B.Contents) FROM Warehouses W INNER JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code",
          "SELECT w.Code, COUNT(DISTINCT b.Contents) AS ContentVariety FROM Warehouses w, Boxes b WHERE w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, COUNT(DISTINCT Contents) FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Code",
          "SELECT w.Code, COUNT(DISTINCT b.Contents) FROM Warehouses AS w LEFT JOIN Boxes AS b ON w.Code = b.Warehouse GROUP BY w.Code",
          "SELECT Code, COUNT(DISTINCT Contents) AS UniqueContents FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY Code",
          "SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code",
          "SELECT w.Code, COUNT(DISTINCT b.Contents) FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY w.Code",
          "SELECT Code, COUNT(DISTINCT Contents) AS DifferentContents FROM Warehouses JOIN Boxes ON Code = Warehouse GROUP BY Code ORDER BY Code",
          "SELECT DISTINCT w.Code, COUNT(DISTINCT b.Contents) AS Types FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code"
        ]
      ]
    },
    {
      "id": 1755,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code FROM Warehouses W WHERE W.Capacity < (SELECT SUM(B.Value) FROM Boxes B WHERE B.Warehouse = W.Code)",
          "SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING SUM(Value) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))",
          "SELECT W.Code FROM Warehouses W JOIN (SELECT Warehouse, SUM(Value) AS TotalValue FROM Boxes GROUP BY Warehouse) AS B ON W.Code = B.Warehouse WHERE B.TotalValue > W.Capacity",
          "SELECT Warehouses.Code FROM Warehouses INNER JOIN (SELECT Warehouse, SUM(Value) AS TotalValue FROM Boxes GROUP BY Warehouse) AS BoxTotals ON Warehouses.Code = BoxTotals.Warehouse WHERE BoxTotals.TotalValue > Warehouses.Capacity",
          "SELECT Code FROM Warehouses WHERE (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code) > Capacity",
          "SELECT W.Code FROM Warehouses W, (SELECT Warehouse, SUM(Value) AS TotalValue FROM Boxes GROUP BY Warehouse) AS B WHERE W.Code = B.Warehouse AND B.TotalValue > W.Capacity",
          "SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY B.Warehouse HAVING SUM(B.Value) > W.Capacity",
          "SELECT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Code GROUP BY Warehouse HAVING SUM(Value) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))",
          "SELECT W.Code FROM Warehouses W WHERE W.Capacity < (SELECT SUM(Value) FROM Boxes WHERE Warehouse = W.Code GROUP BY Warehouse)",
          "SELECT Code FROM Warehouses W WHERE Capacity < (SELECT SUM(Value) FROM Boxes B WHERE B.Warehouse = W.Code GROUP BY B.Warehouse)"
        ]
      ]
    },
    {
      "id": 1756,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT W.Code FROM Warehouses W WHERE (SELECT COUNT(*) FROM Boxes B WHERE B.Warehouse = W.Code) > W.Capacity",
          "SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(*) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))",
          "SELECT W.Code FROM Warehouses W JOIN (SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse) AS B ON W.Code = B.Warehouse WHERE B.BoxCount > W.Capacity",
          "SELECT Warehouses.Code FROM Warehouses INNER JOIN (SELECT Warehouse, COUNT(*) AS TotalBoxes FROM Boxes GROUP BY Warehouse) AS BoxCounts ON Warehouses.Code = BoxCounts.Warehouse WHERE BoxCounts.TotalBoxes > Warehouses.Capacity",
          "SELECT Code FROM Warehouses WHERE (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) > Capacity",
          "SELECT W.Code FROM Warehouses W, (SELECT Warehouse, COUNT(*) AS NumBoxes FROM Boxes GROUP BY Warehouse) AS B WHERE W.Code = B.Warehouse AND B.NumBoxes > W.Capacity",
          "SELECT W.Code FROM Warehouses W LEFT JOIN (SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse) B ON W.Code = B.Warehouse WHERE B.BoxCount > W.Capacity",
          "SELECT Code FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code GROUP BY B.Warehouse HAVING COUNT(B.Code) > W.Capacity)",
          "SELECT W.Code FROM Warehouses W WHERE W.Capacity < (SELECT COUNT(*) FROM Boxes B WHERE B.Warehouse = W.Code)",
          "SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse GROUP BY W.Code, W.Capacity HAVING COUNT(B.Code) > W.Capacity"
        ]
      ]
    },
    {
      "id": 1757,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B LEFT JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location <> 'Chicago' OR W.Location IS NULL",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes WHERE NOT EXISTS (SELECT 1 FROM Warehouses WHERE Code = Boxes.Warehouse AND Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes B WHERE NOT EXISTS (SELECT * FROM Warehouses W WHERE W.Code = B.Warehouse AND W.Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes AS B WHERE B.Warehouse NOT IN (SELECT W.Code FROM Warehouses AS W WHERE W.Location = 'Chicago')",
          "SELECT SUM(B.Value) FROM Boxes B WHERE B.Warehouse NOT IN (SELECT W.Code FROM Warehouses W WHERE W.Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location LIKE 'Chicago')",
          "SELECT SUM(Value) FROM Boxes B WHERE B.Warehouse NOT IN (SELECT Code FROM Warehouses W WHERE W.Location = 'Chicago')",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')"
        ]
      ]
    },
    {
      "id": 1758,
      "db_id": "warehouse_1",
      "infer_predictions": [
        [
          "SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location <> 'Chicago'",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location != 'Chicago')",
          "SELECT SUM(B.Value) AS TotalValue FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE NOT W.Location = 'Chicago'",
          "SELECT SUM(Value) FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code AND Warehouses.Location NOT LIKE 'Chicago'",
          "SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location <> 'Chicago'",
          "SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')",
          "SELECT SUM(B.Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Location <> 'Chicago'",
          "SELECT SUM(Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location NOT IN ('Chicago')",
          "SELECT SUM(Boxes.Value) FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location != 'Chicago'",
          "SELECT SUM(Value) FROM Boxes B LEFT OUTER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location NOT IN ('Chicago')"
        ]
      ]
    },
    {
      "id": 1759,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name ASC",
          "SELECT u.University_Name, u.City, u.State FROM university AS u ORDER BY u.University_Name ASC",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name",
          "SELECT name AS University_Name, city AS City, state AS State FROM university ORDER BY name",
          "SELECT * FROM university ORDER BY University_Name ASC",
          "SELECT University_Name, City, State FROM university ORDER BY 1",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name ASCENDING",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name, City, State",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC, City ASC, State ASC"
        ]
      ]
    },
    {
      "id": 1760,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name, City, State FROM university ORDER BY University_Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name",
          "SELECT U.University_Name, U.City, U.State FROM university U ORDER BY U.University_Name ASC",
          "SELECT University_Name AS Name, City, State FROM university ORDER BY Name",
          "SELECT * FROM university ORDER BY University_Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY University_Name ASC",
          "SELECT University_Name, City, State FROM university ORDER BY University_Name",
          "SELECT Name, City, State FROM university AS U ORDER BY Name ASC",
          "SELECT university.University_Name, university.City, university.State FROM university ORDER BY University_Name ASCENDING",
          "SELECT University_Name, City, State FROM university ORDER BY 1"
        ]
      ]
    },
    {
      "id": 1761,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(DISTINCT University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(*) AS NumberOfUniversities FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State IN ('IL', 'OH')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'IL' OR State = 'OH'",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION ALL SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(*) FROM university WHERE State LIKE 'Illinois' OR State LIKE 'Ohio'",
          "SELECT COUNT(*) FROM university WHERE State = 'IL' OR State = 'OH'"
        ]
      ]
    },
    {
      "id": 1762,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(University_ID) AS TotalUniversities FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(*) AS NumberOfUniversities FROM university WHERE State = 'Illinois' OR State = 'Ohio'",
          "SELECT COUNT(DISTINCT University_ID) FROM university WHERE State IN ('Illinois', 'Ohio')",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' UNION ALL SELECT COUNT(University_ID) FROM university WHERE State = 'Ohio'",
          "SELECT SUM(CASE WHEN State = 'Illinois' THEN 1 WHEN State = 'Ohio' THEN 1 ELSE 0 END) AS Total FROM university",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' UNION SELECT COUNT(*) FROM university WHERE State = 'Ohio'",
          "SELECT COUNT(University_ID) FROM university WHERE State IN ('Illinois', 'Ohio') GROUP BY State",
          "SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio' GROUP BY State",
          "SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio' GROUP BY State"
        ]
      ]
    },
    {
      "id": 1763,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT MAX(Enrollment) AS Maximum, AVG(Enrollment) AS Average, MIN(Enrollment) AS Minimum FROM university",
          "SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university",
          "SELECT MAX(u.Enrollment) AS Max_Enrollment, AVG(u.Enrollment) AS Avg_Enrollment, MIN(u.Enrollment) AS Min_Enrollment FROM university u",
          "SELECT MAX(Enrollment) Maximum_Enrollment, AVG(Enrollment) Average_Enrollment, MIN(Enrollment) Minimum_Enrollment FROM university",
          "SELECT MAX(Enrollment) 'Max Enrollment', AVG(Enrollment) 'Average Enrollment', MIN(Enrollment) 'Min Enrollment' FROM university",
          "SELECT 'Maximum' = MAX(Enrollment), 'Average' = AVG(Enrollment), 'Minimum' = MIN(Enrollment) FROM university",
          "SELECT MAX(Enrollment) AS 'Max Enrollment', AVG(Enrollment) AS 'Avg Enrollment', MIN(Enrollment) AS 'Min Enrollment' FROM university",
          "SELECT MAX(Enrollment) AS MaxEnrollment, AVG(Enrollment) AS AvgEnrollment, MIN(Enrollment) AS MinEnrollment FROM university",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, AVG(Enrollment) AS AverageEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM university",
          "SELECT MAX(Enrollment) AS 'Maximum Enrollment', AVG(Enrollment) AS 'Average Enrollment', MIN(Enrollment) AS 'Minimum Enrollment' FROM university"
        ]
      ]
    },
    {
      "id": 1764,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT MAX(Enrollment) AS Maximum, AVG(Enrollment) AS Average, MIN(Enrollment) AS Minimum FROM university",
          "SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university",
          "SELECT MAX(u.Enrollment) AS MaxEnrollment, AVG(u.Enrollment) AS AvgEnrollment, MIN(u.Enrollment) AS MinEnrollment FROM university u",
          "SELECT MAX(Enrollment) Maximum_Enrollment, AVG(Enrollment) Average_Enrollment, MIN(Enrollment) Minimum_Enrollment FROM university",
          "SELECT MAX(Enrollment) 'Max Enrollment', AVG(Enrollment) 'Average Enrollment', MIN(Enrollment) 'Min Enrollment' FROM university",
          "SELECT MAX(Enrollment) AS MaxEnroll, AVG(Enrollment) AS AvgEnroll, MIN(Enrollment) AS MinEnroll FROM university",
          "SELECT MAX(Enrollment) AS 'Maximum Enrollment', AVG(Enrollment) AS 'Average Enrollment', MIN(Enrollment) AS 'Minimum Enrollment' FROM university",
          "SELECT MAX(Enrollment) AS MaximumEnrollment, AVG(Enrollment) AS AverageEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM university",
          "SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university",
          "SELECT MAX(Enrollment) AS 'Max Enrollment', AVG(Enrollment) AS 'Avg Enrollment', MIN(Enrollment) AS 'Min Enrollment' FROM university"
        ]
      ]
    },
    {
      "id": 1765,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university AS U)",
          "SELECT university.Team_Name FROM university WHERE Enrollment > (SELECT AVG(U.Enrollment) FROM university U)",
          "SELECT U.Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university GROUP BY University_ID)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(university.Enrollment) FROM university)",
          "SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university AS Univ)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university WHERE Enrollment IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1766,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(university.Enrollment) FROM university)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university AS U)",
          "SELECT U.Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(U2.Enrollment) FROM university AS U2)",
          "SELECT university.Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university GROUP BY University_ID)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university GROUP BY State)",
          "SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(Enrollment) FROM university WHERE Enrollment IS NOT NULL)",
          "SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university WHERE Enrollment > 0)",
          "SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university U2 WHERE U2.Enrollment IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1767,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university",
          "SELECT DISTINCT Home_Conference FROM university",
          "SELECT university.Home_Conference FROM university",
          "SELECT DISTINCT university.Home_Conference FROM university",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT university.Home_Conference FROM university GROUP BY university.Home_Conference",
          "SELECT Home_Conference AS Conference FROM university",
          "SELECT DISTINCT Home_Conference AS Conference FROM university",
          "SELECT Home_Conference FROM university ORDER BY Home_Conference",
          "SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference"
        ]
      ]
    },
    {
      "id": 1768,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT DISTINCT Home_Conference FROM university",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT UNIQUE Home_Conference FROM university",
          "SELECT Home_Conference FROM university WHERE Home_Conference IS NOT NULL GROUP BY Home_Conference",
          "SELECT Home_Conference FROM university WHERE Home_Conference <> '' GROUP BY Home_Conference",
          "SELECT DISTINCT u.Home_Conference FROM university u",
          "SELECT DISTINCT Home_Conference FROM university ORDER BY Home_Conference",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(*) > 0",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL",
          "SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference <> ''"
        ]
      ]
    },
    {
      "id": 1769,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference, COUNT(*) AS University_Count FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Num_Universities FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(u.University_ID) AS Total_Universities FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_Name) FROM university GROUP BY Home_Conference",
          "SELECT COUNT(*) AS Count, Home_Conference FROM university GROUP BY Home_Conference ORDER BY Count DESC",
          "SELECT Home_Conference, COUNT(*) FROM university GROUP BY Home_Conference ORDER BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference ORDER BY COUNT(University_ID) DESC",
          "SELECT COUNT(University_ID) AS University_Count, Home_Conference FROM university GROUP BY Home_Conference ORDER BY University_Count",
          "SELECT Home_Conference, COUNT(*) AS Total FROM university GROUP BY Home_Conference HAVING COUNT(*) > 1",
          "SELECT Home_Conference, COUNT(University_ID) AS University_Count FROM university GROUP BY Home_Conference HAVING COUNT(University_ID) > 0"
        ]
      ]
    },
    {
      "id": 1770,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference, COUNT(University_ID) AS University_Count FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(*) AS Num_Universities FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference",
          "SELECT COUNT(University_ID), Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(DISTINCT University_ID) AS Total_Universities FROM university GROUP BY Home_Conference",
          "SELECT u.Home_Conference, COUNT(u.University_ID) AS University_Count FROM university u GROUP BY u.Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Count_of_Universities FROM university GROUP BY Home_Conference ORDER BY Home_Conference",
          "SELECT COUNT(*) AS University_Count, Home_Conference FROM university GROUP BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS Num_of_Universities FROM university GROUP BY Home_Conference ORDER BY Home_Conference",
          "SELECT Home_Conference, COUNT(University_ID) AS University_Count FROM university GROUP BY Home_Conference ORDER BY COUNT(University_ID) DESC"
        ]
      ]
    },
    {
      "id": 1771,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT State, COUNT(*) AS UniversityCount FROM university GROUP BY State ORDER BY UniversityCount DESC LIMIT 1",
          "SELECT TOP 1 State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC",
          "SELECT State FROM (SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State) AS subquery ORDER BY num_universities DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)",
          "SELECT State, MAX(count) FROM (SELECT State, COUNT(*) AS count FROM university GROUP BY State) AS university_counts",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT State, COUNT(*) AS total_universities FROM university GROUP BY State ORDER BY total_universities DESC FETCH FIRST ROW ONLY",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1",
          "SELECT State, COUNT(University_ID) AS UniversityCount FROM university GROUP BY State ORDER BY UniversityCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1772,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT State, COUNT(*) AS UniversityCount FROM university GROUP BY State ORDER BY UniversityCount DESC LIMIT 1",
          "SELECT TOP 1 State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC",
          "SELECT State FROM (SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State) AS state_counts ORDER BY num_universities DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)",
          "SELECT State, COUNT(University_ID) AS TotalUniversities FROM university GROUP BY State ORDER BY TotalUniversities DESC FETCH FIRST 1 ROW ONLY",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC FETCH FIRST ROW ONLY",
          "SELECT State, MAX(uni_count) FROM (SELECT State, COUNT(*) AS uni_count FROM university GROUP BY State) AS uni_totals GROUP BY State ORDER BY uni_count DESC LIMIT 1",
          "SELECT State FROM university GROUP BY State HAVING COUNT(University_ID) = (SELECT MAX(UniversityCount) FROM (SELECT COUNT(University_ID) AS UniversityCount FROM university GROUP BY State) subquery)",
          "SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1773,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT DISTINCT Home_Conference FROM university WHERE Enrollment > 2000",
          "SELECT Home_Conference, AVG(Enrollment) AS AvgEnrollment FROM university GROUP BY Home_Conference HAVING AvgEnrollment > 2000",
          "SELECT Home_Conference FROM (SELECT Home_Conference, AVG(Enrollment) AS AverageEnrollment FROM university GROUP BY Home_Conference) AS SubQuery WHERE AverageEnrollment > 2000",
          "WITH EnrollmentStats AS (SELECT Home_Conference, AVG(Enrollment) AS AvgEnrollment FROM university GROUP BY Home_Conference) SELECT Home_Conference FROM EnrollmentStats WHERE AvgEnrollment > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > (SELECT AVG(Enrollment) FROM university WHERE Enrollment > 2000)",
          "SELECT DISTINCT u.Home_Conference FROM university u WHERE u.Enrollment > 2000 GROUP BY u.Home_Conference",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > (2000)",
          "SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1774,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000",
          "SELECT DISTINCT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000",
          "SELECT Home_Conference FROM (SELECT Home_Conference, AVG(Enrollment) AS AvgEnrollment FROM university GROUP BY Home_Conference) AS subquery WHERE AvgEnrollment > 2000",
          "SELECT Home_Conference FROM university WHERE Home_Conference IN (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000)",
          "SELECT DISTINCT u.Home_Conference FROM university u WHERE (SELECT AVG(Enrollment) FROM university WHERE Home_Conference = u.Home_Conference) > 2000",
          "SELECT Home_Conference, AVG(Enrollment) AS AverageEnrollment FROM university GROUP BY Home_Conference HAVING AverageEnrollment > 2000",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000 ORDER BY Home_Conference",
          "SELECT DISTINCT Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000 ORDER BY u.Home_Conference",
          "SELECT Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000 ORDER BY AVG(u.Enrollment) DESC"
        ]
      ]
    },
    {
      "id": 1775,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1",
          "SELECT Home_Conference FROM (SELECT Home_Conference, SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference) AS ConferenceEnrollment ORDER BY TotalEnrollment ASC LIMIT 1",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference ORDER BY SUM(u.Enrollment) ASC LIMIT 1",
          "SELECT TOP 1 Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment)",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(TotalEnrollment) FROM (SELECT SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference) AS TempTable)",
          "SELECT Home_Conference, MIN(Total_Enrollment) FROM (SELECT Home_Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference) AS SubQuery GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1",
          "SELECT Home_Conference, SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference ORDER BY TotalEnrollment ASC LIMIT 1",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(SUM(Enrollment)) FROM university GROUP BY Home_Conference)"
        ]
      ]
    },
    {
      "id": 1776,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1",
          "SELECT Home_Conference, MIN(total_enrollment) FROM (SELECT Home_Conference, SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) sub_query",
          "SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING SUM(u.Enrollment) = (SELECT MIN(total_enrollment) FROM (SELECT SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) AS temp)",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(SUM(Enrollment)) FROM university GROUP BY Home_Conference)",
          "SELECT TOP 1 Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC",
          "SELECT Home_Conference FROM (SELECT Home_Conference, SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference ORDER BY total_enrollment ASC) WHERE ROWNUM = 1",
          "SELECT Home_Conference, MIN(total_enrollment) AS MinEnrollment FROM (SELECT Home_Conference, SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) GROUP BY Home_Conference ORDER BY MinEnrollment ASC LIMIT 1",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(SUM(Enrollment)) FROM university GROUP BY Home_Conference)",
          "SELECT Home_Conference, total_enrollment FROM (SELECT Home_Conference, SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference ORDER BY total_enrollment ASC) AS sub_query LIMIT 1"
        ]
      ]
    },
    {
      "id": 1777,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code",
          "SELECT m.Major_Name, m.Major_Code FROM major m ORDER BY m.Major_Code ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code DESC",
          "SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code",
          "SELECT Major_Name AS Name, Major_Code AS Code FROM major ORDER BY Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASCENDING",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code DESCENDING",
          "SELECT * FROM major ORDER BY Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code, Major_Name"
        ]
      ]
    },
    {
      "id": 1778,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code",
          "SELECT m.Major_Name, m.Major_Code FROM major m ORDER BY m.Major_Code ASC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC",
          "SELECT Major_Name AS Name, Major_Code AS Code FROM major ORDER BY Major_Code",
          "SELECT major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASCENDING",
          "SELECT * FROM major ORDER BY Major_Code",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code DESC",
          "SELECT Major_Name, Major_Code FROM major ORDER BY 1",
          "SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC, Major_Name ASC"
        ]
      ]
    },
    {
      "id": 1779,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'",
          "SELECT major.Major_Name AS Major, major_ranking.Rank AS Ranking FROM major, major_ranking, university WHERE major.Major_ID = major_ranking.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'",
          "SELECT m.Major_Name, r.Rank FROM major AS m, major_ranking AS r, university AS u WHERE m.Major_ID = r.Major_ID AND r.University_ID = u.University_ID AND u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major JOIN major_ranking USING (Major_ID) JOIN university USING (University_ID) WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM major m, major_ranking mr, university u WHERE m.Major_ID = mr.Major_ID AND mr.University_ID = u.University_ID AND u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major m CROSS JOIN major_ranking mr ON m.Major_ID = mr.Major_ID CROSS JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'",
          "SELECT DISTINCT Major_Name, Rank FROM major NATURAL JOIN major_ranking NATURAL JOIN university WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name AS 'Major', mr.Rank AS 'Rank' FROM major m INNER JOIN major_ranking mr ON m.Major_ID = mr.Major_ID INNER JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College' ORDER BY mr.Rank",
          "SELECT Major_Name, Rank FROM major LEFT JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID LEFT JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'"
        ]
      ]
    },
    {
      "id": 1780,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT major.Major_Name, major_ranking.Rank FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.University_Name = 'Augustana College'",
          "SELECT M.Major_Name, MR.Rank FROM major M INNER JOIN major_ranking MR ON M.Major_ID = MR.Major_ID INNER JOIN university U ON MR.University_ID = U.University_ID WHERE U.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major, major_ranking, university WHERE major.Major_ID = major_ranking.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM major m, major_ranking mr, university u WHERE m.Major_ID = mr.Major_ID AND mr.University_ID = u.University_ID AND u.University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID INNER JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name AS Major, mr.Rank AS Ranking FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College' ORDER BY mr.Rank",
          "SELECT Major_Name, Rank FROM major JOIN major_ranking USING(Major_ID) JOIN university USING(University_ID) WHERE University_Name = 'Augustana College'",
          "SELECT Major_Name, Rank FROM major NATURAL JOIN major_ranking NATURAL JOIN university WHERE University_Name = 'Augustana College'",
          "SELECT DISTINCT Major_Name, Rank FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'",
          "SELECT m.Major_Name, mr.Rank FROM major AS m JOIN major_ranking AS mr ON m.Major_ID = mr.Major_ID JOIN university AS u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College' ORDER BY mr.Rank ASC"
        ]
      ]
    },
    {
      "id": 1781,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT university.University_Name, university.City, university.State FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major_ranking.Rank = 1 AND major.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university AS U, major_ranking AS MR, major AS M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U LEFT JOIN major_ranking MR ON U.University_ID = MR.University_ID LEFT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U RIGHT JOIN major_ranking MR ON U.University_ID = MR.University_ID RIGHT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U CROSS JOIN major_ranking MR ON U.University_ID = MR.University_ID CROSS JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting' ORDER BY U.University_Name",
          "SELECT DISTINCT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT TOP 1 U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'"
        ]
      ]
    },
    {
      "id": 1782,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT university.University_Name, university.City, university.State FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major_ranking.Rank = 1 AND major.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university AS U, major_ranking AS MR, major AS M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U LEFT JOIN major_ranking MR ON U.University_ID = MR.University_ID LEFT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U RIGHT JOIN major_ranking MR ON U.University_ID = MR.University_ID RIGHT JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U CROSS JOIN major_ranking MR CROSS JOIN major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting' ORDER BY U.University_Name",
          "SELECT DISTINCT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'",
          "SELECT TOP 1 U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'"
        ]
      ]
    },
    {
      "id": 1783,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.University_Name FROM university U INNER JOIN (SELECT University_ID, COUNT(*) AS Rank1Count FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) MR ON U.University_ID = MR.University_ID ORDER BY MR.Rank1Count DESC LIMIT 1",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))",
          "SELECT TOP 1 U.University_Name FROM university U JOIN major_ranking M ON U.University_ID = M.University_ID WHERE M.Rank = 1 GROUP BY U.University_ID, U.University_Name ORDER BY COUNT(*) DESC",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT TOP 1 University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC)",
          "SELECT U.University_Name FROM university U JOIN (SELECT University_ID, COUNT(*) AS Total FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS Ranked ON U.University_ID = Ranked.University_ID ORDER BY Ranked.Total DESC LIMIT 1",
          "SELECT U.University_Name FROM university U, (SELECT University_ID, COUNT(*) AS Rank1Count FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS SubQuery WHERE U.University_ID = SubQuery.University_ID ORDER BY SubQuery.Rank1Count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking M WHERE M.University_ID = U.University_ID AND M.Rank = 1 GROUP BY M.University_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT University_ID FROM major_ranking GROUP BY University_ID HAVING Rank = 1 AND COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1784,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT U.University_Name FROM university U INNER JOIN (SELECT University_ID, COUNT(*) AS CountRank FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) MR ON U.University_ID = MR.University_ID ORDER BY MR.CountRank DESC LIMIT 1",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(CountRank) FROM (SELECT COUNT(*) AS CountRank FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))",
          "SELECT TOP 1 U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID WHERE MR.Rank = 1 GROUP BY U.University_ID, U.University_Name ORDER BY COUNT(MR.Major_ID) DESC",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT TOP 1 University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC)",
          "SELECT U.University_Name FROM (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1) AS RankedUni JOIN university U ON RankedUni.University_ID = U.University_ID",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking GROUP BY University_ID HAVING Rank = 1 AND COUNT(*) = (SELECT MAX(CountRank) FROM (SELECT COUNT(*) AS CountRank FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS SubQuery))",
          "SELECT U.University_Name FROM university U JOIN (SELECT University_ID, COUNT(*) AS RankCount FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1) MR ON U.University_ID = MR.University_ID",
          "SELECT U.University_Name FROM university U, (SELECT University_ID, COUNT(*) AS Total FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1) MR WHERE U.University_ID = MR.University_ID",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR WHERE MR.University_ID = U.University_ID AND MR.Rank = 1 GROUP BY MR.University_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS Sub)) ORDER BY U.University_Name"
        ]
      ]
    },
    {
      "id": 1785,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT DISTINCT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT JOIN major_ranking m ON u.University_ID = m.University_ID AND m.Rank = 1 WHERE m.University_ID IS NULL",
          "SELECT University_Name FROM university EXCEPT SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)",
          "SELECT DISTINCT u.University_Name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1 GROUP BY m.University_ID)",
          "SELECT University_Name FROM university u WHERE u.University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID)",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT NULL FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)"
        ]
      ]
    },
    {
      "id": 1786,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u LEFT JOIN major_ranking m ON u.University_ID = m.University_ID AND m.Rank = 1 WHERE m.University_ID IS NULL",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT DISTINCT University_ID FROM major_ranking WHERE Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)",
          "SELECT DISTINCT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT NULL FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID)",
          "SELECT University_Name FROM university EXCEPT SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1",
          "SELECT u.University_Name FROM university u LEFT JOIN major_ranking m ON u.University_ID = m.University_ID WHERE m.Rank <> 1 OR m.Rank IS NULL"
        ]
      ]
    },
    {
      "id": 1787,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Accounting') AND EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Urban Education')",
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name IN ('Accounting', 'Urban Education') GROUP BY U.University_Name HAVING COUNT(DISTINCT M.Major_Name) = 2",
          "SELECT DISTINCT U.University_Name FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')) INTERSECT SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "WITH Accounting_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')), Urban_Education_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM Accounting_Universities) AND U.University_ID IN (SELECT University_ID FROM Urban_Education_Universities)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting') AND U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Urban Education')",
          "SELECT U.University_Name FROM university U WHERE (SELECT COUNT(DISTINCT M.Major_Name) FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name IN ('Accounting', 'Urban Education')) = 2",
          "SELECT U.University_Name FROM university U JOIN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')) A ON U.University_ID = A.University_ID JOIN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) UE ON U.University_ID = UE.University_ID",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT * FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Accounting') AND EXISTS (SELECT * FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Urban Education')",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR WHERE MR.Major_ID IN (SELECT M.Major_ID FROM major M WHERE M.Major_Name = 'Accounting') INTERSECT SELECT MR.University_ID FROM major_ranking MR WHERE MR.Major_ID IN (SELECT M.Major_ID FROM major M WHERE M.Major_Name = 'Urban Education'))"
        ]
      ]
    },
    {
      "id": 1788,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') INTERSECT SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name IN ('Accounting', 'Urban Education') GROUP BY u.University_ID HAVING COUNT(DISTINCT m.Major_Name) = 2",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.University_ID = u.University_ID) AND EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' AND mr.University_ID = u.University_ID)",
          "SELECT DISTINCT u.University_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' AND u.University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education'))",
          "WITH Accounting_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')), Urban_Education_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM Accounting_Universities INTERSECT SELECT University_ID FROM Urban_Education_Universities)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Accounting')) AND u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Urban Education'))",
          "SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') INTERSECT SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) AS uni_ids ON u.University_ID = uni_ids.University_ID",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' INTERSECT SELECT mr.University_ID FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education')",
          "SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr INNER JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.University_ID = u.University_ID) AND EXISTS (SELECT 1 FROM major_ranking mr INNER JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' AND mr.University_ID = u.University_ID)",
          "SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr, major m WHERE mr.Major_ID = m.Major_ID AND m.Major_Name = 'Accounting' GROUP BY mr.University_ID HAVING COUNT(*) > 0 INTERSECT SELECT mr.University_ID FROM major_ranking mr, major m WHERE mr.Major_ID = m.Major_ID AND m.Major_Name = 'Urban Education' GROUP BY mr.University_ID HAVING COUNT(*) > 0)"
        ]
      ]
    },
    {
      "id": 1789,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Rank FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin'",
          "SELECT U.University_Name AS Name, O.Rank AS Ranking FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT Name, Rank FROM (SELECT University_Name AS Name, Rank FROM university JOIN overall_ranking USING (University_ID) WHERE State = 'Wisconsin') AS WisconsinUniversities",
          "SELECT U.University_Name, O.Rank FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND U.State = 'WI'",
          "SELECT U.University_Name, O.Rank FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT University_Name, Rank FROM university NATURAL JOIN overall_ranking WHERE State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT DISTINCT U.University_Name, O.Rank FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin' ORDER BY U.University_Name"
        ]
      ]
    },
    {
      "id": 1790,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Rank FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin'",
          "SELECT name, rank FROM (SELECT University_Name AS name, Rank FROM university JOIN overall_ranking USING (University_ID) WHERE State = 'Wisconsin') AS subquery",
          "SELECT U.University_Name AS Name, O.Rank AS Rank FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT University_Name, Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND U.State = 'Wisconsin'",
          "SELECT DISTINCT U.University_Name, O.Rank FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name, O.Rank FROM university U FULL OUTER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'",
          "SELECT U.University_Name AS University, O.Rank AS Ranking FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1791,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC LIMIT 1",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT TOP 1 U.University_Name FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Research_point = (SELECT MAX(Research_point) FROM overall_ranking)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC FETCH FIRST ROW ONLY)",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Research_point DESC FETCH FIRST ROW ONLY)",
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Research_point >= ALL (SELECT Research_point FROM overall_ranking)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT University_ID FROM overall_ranking WHERE Research_point >= ALL (SELECT Research_point FROM overall_ranking))",
          "SELECT University_Name FROM (SELECT U.University_Name, RANK() OVER (ORDER BY O.Research_point DESC) AS rk FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID) WHERE rk = 1",
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1792,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC LIMIT 1",
          "SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT TOP 1 U.University_Name FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Research_point = (SELECT MAX(Research_point) FROM overall_ranking)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Research_point DESC LIMIT 1)",
          "SELECT U.University_Name FROM university U JOIN (SELECT University_ID, MAX(Research_point) AS MaxResearch FROM overall_ranking GROUP BY University_ID) O ON U.University_ID = O.University_ID",
          "SELECT U.University_Name FROM university U WHERE U.University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)",
          "SELECT FIRST U.University_Name FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC",
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Research_point DESC FETCH FIRST ROW ONLY"
        ]
      ]
    },
    {
      "id": 1793,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT name FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT University_Name FROM university JOIN overall_ranking USING (University_ID) ORDER BY Reputation_point ASC",
          "SELECT U.University_Name FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT U.University_Name FROM university AS U JOIN overall_ranking AS O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASCENDING",
          "SELECT U.University_Name FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID SORT BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASCENDING"
        ]
      ]
    },
    {
      "id": 1794,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC",
          "SELECT name FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT University_Name FROM university JOIN overall_ranking USING (University_ID) ORDER BY Reputation_point ASC",
          "SELECT U.University_Name FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university AS U INNER JOIN overall_ranking AS O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASCENDING",
          "SELECT DISTINCT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC"
        ]
      ]
    },
    {
      "id": 1795,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT university.University_Name FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3",
          "SELECT U.University_Name FROM university AS U, major_ranking AS MR, major AS M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank >= 3)",
          "SELECT U.University_Name FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3 ORDER BY MR.Rank DESC",
          "SELECT DISTINCT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT U.University_Name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3)",
          "SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3)",
          "SELECT U.University_Name FROM university AS U INNER JOIN major_ranking AS MR ON U.University_ID = MR.University_ID INNER JOIN major AS M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3"
        ]
      ]
    },
    {
      "id": 1796,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT university.University_Name FROM university INNER JOIN major_ranking ON university.University_ID = major_ranking.University_ID INNER JOIN major ON major_ranking.Major_ID = major.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3",
          "SELECT U.University_Name FROM university AS U, major_ranking AS MR, major AS M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT DISTINCT U.University_Name FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT U.University_Name FROM university U LEFT JOIN major_ranking MR ON U.University_ID = MR.University_ID LEFT JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT U.University_Name FROM university U RIGHT JOIN major_ranking MR ON U.University_ID = MR.University_ID RIGHT JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3",
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3 ORDER BY U.University_Name",
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3 GROUP BY U.University_Name",
          "SELECT U.University_Name FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3 HAVING COUNT(*) > 0",
          "SELECT U.University_Name FROM university U CROSS JOIN major_ranking MR ON U.University_ID = MR.University_ID CROSS JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3"
        ]
      ]
    },
    {
      "id": 1797,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(Enrollment) AS Total_Enrollment FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT SUM(u.Enrollment) FROM university u, overall_ranking o WHERE u.University_ID = o.University_ID AND o.Rank <= 5",
          "SELECT TOTAL(university.Enrollment) FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE EXISTS (SELECT 1 FROM overall_ranking WHERE University_ID = university.University_ID AND Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university u INNER JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5 GROUP BY o.University_ID",
          "SELECT SUM(Enrollment) FROM university u WHERE u.University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking o WHERE o.Rank <= 5)",
          "SELECT SUM(u.Enrollment) FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID WHERE o.Rank <= 5"
        ]
      ]
    },
    {
      "id": 1798,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)",
          "SELECT SUM(Enrollment) AS Total_Students FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT TOTAL(university.Enrollment) FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5",
          "SELECT SUM(u.Enrollment) FROM university u, overall_ranking r WHERE u.University_ID = r.University_ID AND r.Rank <= 5",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5) GROUP BY University_ID",
          "SELECT SUM(Enrollment) FROM university u WHERE EXISTS (SELECT 1 FROM overall_ranking r WHERE r.University_ID = u.University_ID AND r.Rank <= 5)",
          "SELECT SUM(Enrollment) FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID AND overall_ranking.Rank <= 5",
          "SELECT SUM(u.Enrollment) FROM university u INNER JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5 GROUP BY r.University_ID",
          "SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5) AND Enrollment IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1799,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT min(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS Sub)",
          "SELECT university.University_Name, overall_ranking.Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Reputation_point >= ALL (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS Temp)",
          "SELECT U.University_Name, O.Citation_point FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable)",
          "SELECT U.University_Name, O.Citation_point FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable)",
          "SELECT U.University_Name, O.Citation_point FROM university U CROSS JOIN overall_ranking O WHERE U.University_ID = O.University_ID AND O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable)",
          "SELECT U.University_Name, O.Citation_point FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable)",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable) ORDER BY O.Reputation_point DESC",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable) ORDER BY O.Reputation_point ASC",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC FETCH FIRST 3 ROWS ONLY) AS TempTable)"
        ]
      ]
    },
    {
      "id": 1800,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT university.University_Name, overall_ranking.Citation_point FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT U.University_Name, O.Citation_point FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT U.University_Name, O.Citation_point FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT TOP 3 U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC",
          "SELECT U.University_Name, O.Citation_point FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT U.University_Name, O.Citation_point FROM university U RIGHT JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT U.University_Name, O.Citation_point FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3",
          "SELECT U.University_Name, O.Citation_point FROM university U CROSS JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point IN (SELECT MAX(Reputation_point) FROM overall_ranking GROUP BY University_ID ORDER BY Reputation_point DESC LIMIT 3)",
          "SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= ALL (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)"
        ]
      ]
    },
    {
      "id": 1801,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2",
          "SELECT State FROM university GROUP BY State HAVING COUNT(University_ID) > 2 AND MIN(Enrollment) < 3000",
          "SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2",
          "SELECT State, COUNT(*) AS UniCount FROM university WHERE Enrollment < 3000 GROUP BY State HAVING UniCount > 2",
          "SELECT State FROM (SELECT State, COUNT(*) AS Total FROM university WHERE Enrollment < 3000 GROUP BY State) AS SubQuery WHERE Total > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2",
          "WITH Filtered AS (SELECT State FROM university WHERE Enrollment < 3000) SELECT State FROM Filtered GROUP BY State HAVING COUNT(*) > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2",
          "SELECT State, COUNT(University_ID) AS UniversityCount FROM university WHERE Enrollment < 3000 GROUP BY State HAVING UniversityCount > 2"
        ]
      ]
    },
    {
      "id": 1802,
      "db_id": "university_rank",
      "infer_predictions": [
        [
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2",
          "SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2",
          "SELECT State FROM (SELECT State, COUNT(*) AS UniCount FROM university WHERE Enrollment < 3000 GROUP BY State) AS SubQuery WHERE UniCount > 2",
          "SELECT DISTINCT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2",
          "SELECT State, COUNT(*) AS UniversityCount FROM university WHERE Enrollment < 3000 GROUP BY State HAVING UniversityCount > 2",
          "WITH FilteredUniversities AS (SELECT State FROM university WHERE Enrollment < 3000) SELECT State FROM FilteredUniversities GROUP BY State HAVING COUNT(*) > 2",
          "SELECT State FROM university GROUP BY State HAVING SUM(CASE WHEN Enrollment < 3000 THEN 1 ELSE 0 END) > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2",
          "SELECT u.State FROM university u GROUP BY u.State HAVING COUNT(CASE WHEN u.Enrollment < 3000 THEN 1 ELSE NULL END) > 2",
          "SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2"
        ]
      ]
    },
    {
      "id": 1803,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating IS NULL",
          "SELECT Title FROM Movies WHERE Rating = ''",
          "SELECT M.Title FROM Movies M WHERE M.Rating IS NULL",
          "SELECT M.Title FROM Movies AS M WHERE M.Rating IS NULL",
          "SELECT Title FROM Movies WHERE Rating = 'NULL'",
          "SELECT Title FROM Movies WHERE COALESCE(Rating, '') = ''",
          "SELECT Title FROM Movies WHERE LENGTH(Rating) = 0",
          "SELECT Title FROM Movies WHERE TRIM(Rating) IS NULL",
          "SELECT Title FROM Movies WHERE IFNULL(Rating, '') = ''",
          "SELECT Title FROM Movies WHERE Rating NOT IN (SELECT Rating FROM Movies WHERE Rating IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1804,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating IS NULL",
          "SELECT Title FROM Movies WHERE Rating = ''",
          "SELECT Title FROM Movies WHERE Rating = 'NULL'",
          "SELECT Title FROM Movies WHERE Rating NOT IN (SELECT Rating FROM Movies WHERE Rating IS NOT NULL)",
          "SELECT m.Title FROM Movies m WHERE m.Rating IS NULL",
          "SELECT m.Title FROM Movies m LEFT JOIN Movies r ON m.Code = r.Code WHERE r.Rating IS NULL",
          "SELECT Title FROM Movies WHERE COALESCE(Rating, '') = ''",
          "SELECT Title FROM Movies WHERE LENGTH(Rating) = 0",
          "SELECT Title FROM Movies WHERE Rating IS NULL OR Rating = ''",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM Movies WHERE Rating IS NOT NULL AND Movies.Code = Code)"
        ]
      ]
    },
    {
      "id": 1805,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Movies.Title FROM Movies WHERE Movies.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating LIKE 'G'",
          "SELECT m.Title FROM Movies m WHERE m.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL",
          "SELECT DISTINCT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating IN ('G')",
          "SELECT Title FROM Movies m WHERE m.Rating = 'G'",
          "SELECT Title FROM Movies WHERE UPPER(Rating) = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' ORDER BY Title"
        ]
      ]
    },
    {
      "id": 1806,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Movies.Title FROM Movies WHERE Movies.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating LIKE 'G'",
          "SELECT m.Title FROM Movies m WHERE m.Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' ORDER BY Title",
          "SELECT DISTINCT Title FROM Movies WHERE Rating = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' GROUP BY Title",
          "SELECT Title FROM Movies m WHERE m.Rating = 'G'",
          "SELECT Title FROM Movies WHERE UPPER(Rating) = 'G'",
          "SELECT Title FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1807,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon'",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon'",
          "SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT DISTINCT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')"
        ]
      ]
    },
    {
      "id": 1808,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name = 'Odeon'",
          "SELECT DISTINCT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')",
          "SELECT Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie AND mt.Name = 'Odeon'",
          "SELECT m.Title FROM Movies m INNER JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name = 'Odeon'",
          "SELECT Title FROM Movies WHERE Code = ANY (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')"
        ]
      ]
    },
    {
      "id": 1809,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie",
          "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT title AS MovieName, name AS TheaterName FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT DISTINCT Movies.Title, MovieTheaters.Name FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title, t.Name FROM Movies m, MovieTheaters t WHERE m.Code = t.Movie ORDER BY m.Title",
          "SELECT Title, Name FROM Movies JOIN MovieTheaters ON Code = Movie",
          "SELECT MovieTheaters.Name, Movies.Title FROM MovieTheaters LEFT JOIN Movies ON MovieTheaters.Movie = Movies.Code",
          "SELECT a.Title, b.Name FROM Movies a CROSS JOIN MovieTheaters b WHERE a.Code = b.Movie",
          "SELECT `Title`, `Name` FROM `Movies` INNER JOIN `MovieTheaters` ON `Movies`.`Code` = `MovieTheaters`.`Movie`",
          "SELECT Title AS Movie_Title, Name AS Theater_Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie ORDER BY Name"
        ]
      ]
    },
    {
      "id": 1810,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie",
          "SELECT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT title AS MovieName, name AS TheaterName FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title, t.Name FROM Movies m, MovieTheaters t WHERE m.Code = t.Movie",
          "SELECT Title, Name FROM Movies JOIN MovieTheaters ON Code = Movie",
          "SELECT MovieTheaters.Name, Movies.Title FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code",
          "SELECT DISTINCT Movies.Title, MovieTheaters.Name FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT Title AS Movie_Title, Name AS Theater_Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT m.Title AS Movie_Title, t.Name AS Theater_Name FROM Movies m INNER JOIN MovieTheaters t ON m.Code = t.Movie",
          "SELECT Title, Name FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie ORDER BY Name"
        ]
      ]
    },
    {
      "id": 1811,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Title) AS NumberOfMovies FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) AS G_Rated_Movies FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating LIKE 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' GROUP BY Rating",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(DISTINCT Title) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' AND Code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1812,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(Title) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) AS G_Rated_Movies FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating LIKE 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' GROUP BY Rating",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(DISTINCT Title) FROM Movies WHERE Rating = 'G'",
          "SELECT COUNT(*) FROM Movies WHERE Rating = 'G' AND Title IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE UPPER(Rating) = 'G'"
        ]
      ]
    },
    {
      "id": 1813,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Movies.Code) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters)",
          "SELECT COUNT(DISTINCT M.Code) FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MT.Movie) FROM MovieTheaters MT",
          "SELECT COUNT(*) FROM (SELECT Movie FROM MovieTheaters GROUP BY Movie)",
          "SELECT COUNT(DISTINCT Movie) AS TotalMovies FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) AS NumberOfMovies FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1814,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters)",
          "SELECT COUNT(UNIQUE Movie) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Movie FROM MovieTheaters)",
          "SELECT COUNT(DISTINCT M.Code) FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie",
          "SELECT COUNT(DISTINCT MovieTheaters.Movie) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT MT.Movie) FROM MovieTheaters MT",
          "SELECT COUNT(*) FROM (SELECT DISTINCT MT.Movie FROM MovieTheaters MT)",
          "SELECT COUNT(DISTINCT MT.Movie) FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code",
          "SELECT COUNT(DISTINCT Movie) FROM MovieTheaters WHERE Movie IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1815,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movies.Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters)",
          "SELECT COUNT(UNIQUE Movies.Title) FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT M.Title) FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie) AS UniqueMovies",
          "SELECT COUNT(DISTINCT Title) FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Title) AS DistinctMovies FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Movies.Title) FROM MovieTheaters LEFT JOIN Movies ON MovieTheaters.Movie = Movies.Code",
          "SELECT DISTINCT COUNT(Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie"
        ]
      ]
    },
    {
      "id": 1816,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Movies.Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(UNIQUE Movies.Title) FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie) AS UniqueMovies",
          "SELECT COUNT(DISTINCT M.Title) FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Movies.Title) AS NumberOfUniqueMovies FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT COUNT(DISTINCT Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Title",
          "SELECT DISTINCT COUNT(Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie"
        ]
      ]
    },
    {
      "id": 1817,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Code) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Code FROM MovieTheaters) AS unique_theaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Name FROM MovieTheaters) AS unique_theaters",
          "SELECT COUNT(UNIQUE Code) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Name) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Code) AS TotalTheaters FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) AS TotalTheaters FROM MovieTheaters",
          "SELECT DISTINCT COUNT(Code) FROM MovieTheaters",
          "SELECT DISTINCT COUNT(Name) FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1818,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Code) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) FROM MovieTheaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Code FROM MovieTheaters) AS unique_theaters",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Name FROM MovieTheaters) AS unique_theaters",
          "SELECT COUNT(UNIQUE Code) FROM MovieTheaters",
          "SELECT COUNT(UNIQUE Name) FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Code) AS NumberOfTheaters FROM MovieTheaters",
          "SELECT COUNT(DISTINCT Name) AS NumberOfTheaters FROM MovieTheaters",
          "SELECT DISTINCT COUNT(Code) FROM MovieTheaters",
          "SELECT DISTINCT COUNT(Name) FROM MovieTheaters"
        ]
      ]
    },
    {
      "id": 1819,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT m.Rating FROM Movies m WHERE m.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters)",
          "SELECT Movies.Rating FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Title LIKE '%Citizen%'",
          "SELECT DISTINCT Rating FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND Title LIKE '%Citizen%'",
          "SELECT m.Rating FROM Movies m INNER JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE m.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code)",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT m.Rating FROM Movies m, MovieTheaters mt WHERE m.Code = mt.Movie AND m.Title LIKE '%Citizen%'"
        ]
      ]
    },
    {
      "id": 1820,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT m.Rating FROM Movies m WHERE m.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Movie FROM MovieTheaters)",
          "SELECT m.Rating FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE m.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND Code IN (SELECT Code FROM MovieTheaters WHERE Movie = Movies.Code)",
          "SELECT m.Rating FROM Movies m, MovieTheaters mt WHERE m.Title LIKE '%Citizen%' AND m.Code = mt.Movie",
          "SELECT DISTINCT Rating FROM Movies WHERE Title LIKE '%Citizen%'",
          "SELECT m.Rating FROM Movies m INNER JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE m.Title LIKE '%Citizen%'",
          "SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%' AND EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code)",
          "SELECT m.Rating FROM Movies m WHERE m.Title LIKE '%Citizen%' AND EXISTS (SELECT 1 FROM MovieTheaters mt WHERE mt.Movie = m.Code)"
        ]
      ]
    },
    {
      "id": 1821,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')",
          "SELECT DISTINCT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND (Movies.Rating = 'G' OR Movies.Rating = 'PG')",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND M.Rating IN ('G', 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND (M.Rating = 'G' OR M.Rating = 'PG')",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' UNION SELECT Code FROM Movies WHERE Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code AND M.Rating IN ('G', 'PG')"
        ]
      ]
    },
    {
      "id": 1822,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')",
          "SELECT DISTINCT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G' OR Movies.Rating = 'PG'",
          "SELECT MT.Name FROM MovieTheaters AS MT, Movies AS M WHERE MT.Movie = M.Code AND (M.Rating = 'G' OR M.Rating = 'PG')",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'",
          "SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code AND Movies.Rating IN ('G', 'PG')",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating IN ('G', 'PG'))",
          "SELECT MT.Name FROM MovieTheaters MT CROSS JOIN Movies M WHERE MT.Movie = M.Code AND (M.Rating = 'G' OR M.Rating = 'PG')"
        ]
      ]
    },
    {
      "id": 1823,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial')",
          "SELECT DISTINCT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial'",
          "SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND (MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial')",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))",
          "SELECT DISTINCT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')",
          "SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE Movies.Code = Movie AND Name IN ('Odeon', 'Imperial'))",
          "SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial'"
        ]
      ]
    },
    {
      "id": 1824,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial')",
          "SELECT Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial'",
          "SELECT DISTINCT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND (MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name IN ('Odeon', 'Imperial'))",
          "SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND (MT.Name = 'Odeon' OR MT.Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))",
          "SELECT Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IN ('Odeon', 'Imperial')",
          "SELECT DISTINCT m.Title FROM Movies m INNER JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IN ('Odeon', 'Imperial')",
          "SELECT Title FROM Movies m WHERE EXISTS (SELECT * FROM MovieTheaters mt WHERE mt.Movie = m.Code AND mt.Name IN ('Odeon', 'Imperial'))"
        ]
      ]
    },
    {
      "id": 1825,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2",
          "SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT1, MovieTheaters MT2 WHERE M.Code = MT1.Movie AND MT1.Name = 'Odeon' AND M.Code = MT2.Movie AND MT2.Name = 'Imperial'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' UNION ALL SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') GROUP BY Title HAVING COUNT(*) > 1",
          "WITH OdeonMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'), ImperialMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM OdeonMovies INTERSECT SELECT Movie FROM ImperialMovies)",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code AND Name = 'Odeon') AND EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code AND Name = 'Imperial')",
          "SELECT Title FROM Movies M INNER JOIN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') O ON M.Code = O.Movie INNER JOIN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') I ON M.Code = I.Movie",
          "SELECT M.Title FROM Movies M WHERE M.Code IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon') AND M.Code IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial') GROUP BY Movie HAVING COUNT(DISTINCT Name) = 2)"
        ]
      ]
    },
    {
      "id": 1826,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2",
          "SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie AND MT.Name = 'Odeon' AND M.Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' UNION ALL SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') GROUP BY Title HAVING COUNT(*) > 1",
          "WITH OdeonMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'), ImperialMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM OdeonMovies INTERSECT SELECT Movie FROM ImperialMovies)",
          "SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon') AND EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Imperial')",
          "SELECT M.Title FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon') INTERSECT SELECT M.Title FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Imperial')",
          "SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon' INTERSECT SELECT M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Imperial'",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') AND Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')",
          "SELECT Title FROM Movies M WHERE (SELECT COUNT(DISTINCT Name) FROM MovieTheaters WHERE Movie = M.Code AND Name IN ('Odeon', 'Imperial')) = 2"
        ]
      ]
    },
    {
      "id": 1827,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name = 'Odeon' WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies EXCEPT SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' GROUP BY Movie)",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT DISTINCT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon')",
          "SELECT Title FROM Movies AS M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters AS MT WHERE MT.Name = 'Odeon')"
        ]
      ]
    },
    {
      "id": 1828,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT WHERE MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name = 'Odeon' WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies EXCEPT SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')",
          "SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' GROUP BY Movie)",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' AND Movie IS NOT NULL)",
          "SELECT Title FROM Movies AS M WHERE NOT EXISTS (SELECT * FROM MovieTheaters AS MT WHERE MT.Name = 'Odeon' AND MT.Movie = M.Code)"
        ]
      ]
    },
    {
      "id": 1829,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Title ASC",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC",
          "SELECT Movies.Title AS MovieTitles FROM Movies ORDER BY MovieTitles",
          "SELECT Title AS SortedTitles FROM Movies ORDER BY SortedTitles ASC",
          "SELECT DISTINCT Title FROM Movies ORDER BY Title ASC",
          "SELECT DISTINCT Movies.Title FROM Movies ORDER BY Movies.Title",
          "SELECT Title FROM Movies SORT BY Title ASCENDING",
          "SELECT * FROM Movies ORDER BY Title ASC",
          "SELECT Title FROM Movies ORDER BY Title ASCENDING"
        ]
      ]
    },
    {
      "id": 1830,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Title ASC",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC",
          "SELECT Title AS MovieName FROM Movies ORDER BY MovieName",
          "SELECT Title FROM Movies SORT BY Title ASCENDING",
          "SELECT Title FROM Movies ORDER BY Title ASCENDING",
          "SELECT * FROM Movies ORDER BY Title ASC",
          "SELECT Title FROM Movies ORDER BY Title COLLATE NOCASE",
          "SELECT DISTINCT Title FROM Movies ORDER BY Title",
          "SELECT Title FROM Movies ORDER BY UPPER(Title)"
        ]
      ]
    },
    {
      "id": 1831,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Rating DESC",
          "SELECT Title FROM Movies ORDER BY Rating",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Rating DESC",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Rating",
          "SELECT Title FROM Movies SORT BY Rating DESC",
          "SELECT Title FROM Movies SORT BY Rating",
          "SELECT m.Title FROM Movies m ORDER BY m.Rating DESC",
          "SELECT m.Title FROM Movies m ORDER BY m.Rating",
          "SELECT Title FROM Movies ORDER BY Rating DESCENDING",
          "SELECT Title FROM Movies ORDER BY Rating ASCENDING"
        ]
      ]
    },
    {
      "id": 1832,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies ORDER BY Rating",
          "SELECT M.Title FROM Movies M ORDER BY M.Rating",
          "SELECT Title FROM Movies ORDER BY Rating DESC",
          "SELECT Movies.Title FROM Movies ORDER BY Movies.Rating ASC",
          "SELECT Title FROM Movies ORDER BY Rating ASC",
          "SELECT M.Title FROM Movies AS M ORDER BY M.Rating DESC",
          "SELECT Title FROM Movies ORDER BY Rating DESC, Title ASC",
          "SELECT DISTINCT Title FROM Movies ORDER BY Rating",
          "SELECT Title FROM Movies ORDER BY Rating, Title",
          "SELECT Title FROM Movies ORDER BY Rating DESC, Title DESC"
        ]
      ]
    },
    {
      "id": 1833,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC LIMIT 1",
          "SELECT TOP 1 Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC",
          "SELECT Name FROM (SELECT Name, COUNT(DISTINCT Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery ORDER BY MovieCount DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(DISTINCT Movie) = (SELECT MAX(MovieCount) FROM (SELECT COUNT(DISTINCT Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery)",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Movie FROM Movies) GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT M.Name FROM MovieTheaters M JOIN Movies MV ON M.Movie = MV.Code GROUP BY M.Name ORDER BY COUNT(DISTINCT M.Movie) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC LIMIT 1 OFFSET 0 ROWS",
          "WITH MovieCount AS (SELECT Name, COUNT(DISTINCT Movie) AS TotalMovies FROM MovieTheaters GROUP BY Name) SELECT Name FROM MovieCount WHERE TotalMovies = (SELECT MAX(TotalMovies) FROM MovieCount)",
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC LIMIT 1 OFFSET 0",
          "SELECT Name, COUNT(DISTINCT Movie) AS MovieCount FROM MovieTheaters GROUP BY Name ORDER BY MovieCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1834,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1",
          "SELECT T1.Name FROM MovieTheaters AS T1 GROUP BY T1.Name ORDER BY COUNT(T1.Movie) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC",
          "SELECT Name FROM (SELECT Name, COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery ORDER BY MovieCount DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = (SELECT MAX(MovieCount) FROM (SELECT COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery)",
          "WITH MovieCount AS (SELECT Name, COUNT(Movie) AS TotalMovies FROM MovieTheaters GROUP BY Name) SELECT Name FROM MovieCount WHERE TotalMovies = (SELECT MAX(TotalMovies) FROM MovieCount)",
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(DISTINCT Movie) DESC LIMIT 1",
          "SELECT Name, COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name ORDER BY MovieCount DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Movie FROM Movies) GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1835,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT M.Title FROM Movies M JOIN (SELECT Movie, COUNT(*) AS cnt FROM MovieTheaters GROUP BY Movie ORDER BY cnt DESC LIMIT 1) T ON M.Code = T.Movie",
          "SELECT M.Title FROM Movies M WHERE M.Code IN (SELECT T.Movie FROM MovieTheaters T GROUP BY T.Movie ORDER BY COUNT(T.Movie) DESC LIMIT 1)",
          "SELECT Title FROM Movies WHERE Code = (SELECT TOP 1 Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC)",
          "SELECT M.Title FROM Movies M INNER JOIN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(*) DESC LIMIT 1) AS MostPlayed ON M.Code = MostPlayed.Movie",
          "SELECT (SELECT Title FROM Movies WHERE Code = MT.Movie) AS MovieTitle FROM MovieTheaters MT GROUP BY MT.Movie ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(*) = MAX((SELECT COUNT(*) FROM MovieTheaters GROUP BY Movie)))",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM (SELECT Movie, COUNT(*) AS Count FROM MovieTheaters GROUP BY Movie) AS Temp ORDER BY Count DESC LIMIT 1)",
          "SELECT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie GROUP BY MT.Movie ORDER BY COUNT(MT.Movie) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 1836,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1)",
          "SELECT TOP 1 M.Title FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(MT.Movie) DESC",
          "SELECT M.Title FROM Movies M WHERE M.Code = (SELECT MT.Movie FROM MovieTheaters MT GROUP BY MT.Movie ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT Title FROM (SELECT M.Title, COUNT(*) AS TheaterCount FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title) AS SubQuery ORDER BY TheaterCount DESC LIMIT 1",
          "SELECT M.Title FROM Movies M, MovieTheaters MT WHERE M.Code = MT.Movie GROUP BY M.Title HAVING COUNT(MT.Movie) = (SELECT MAX(Count) FROM (SELECT COUNT(Movie) AS Count FROM MovieTheaters GROUP BY Movie) AS SubCount)",
          "SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title HAVING COUNT(MT.Movie) >= ALL (SELECT COUNT(Movie) FROM MovieTheaters GROUP BY Movie)",
          "SELECT FIRST(M.Title) FROM Movies M INNER JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC",
          "SELECT M.Title FROM Movies M WHERE EXISTS (SELECT 1 FROM MovieTheaters MT WHERE M.Code = MT.Movie GROUP BY MT.Movie HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM MovieTheaters GROUP BY Movie))",
          "SELECT M.Title FROM Movies M JOIN (SELECT Movie, COUNT(*) AS Cnt FROM MovieTheaters GROUP BY Movie) MT ON M.Code = MT.Movie ORDER BY MT.Cnt DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1837,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating, COUNT(Code) AS NumberOfMovies FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(*) AS MovieCount FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) AS Count FROM Movies GROUP BY Rating",
          "SELECT Movies.Rating, COUNT(Movies.Code) AS TotalMovies FROM Movies GROUP BY Movies.Rating",
          "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) AS MovieQuantity FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) AS Total FROM Movies GROUP BY Rating",
          "SELECT Movies.Rating, COUNT(*) AS NumberOfMovies FROM Movies GROUP BY Movies.Rating",
          "SELECT Rating, COUNT(Code) AS NumMovies FROM Movies GROUP BY Rating"
        ]
      ]
    },
    {
      "id": 1838,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Rating, COUNT(Code) AS MovieCount FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(*) AS TotalMovies FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) FROM Movies GROUP BY Rating",
          "SELECT COUNT(Code), Rating FROM Movies GROUP BY Rating",
          "SELECT Rating, COUNT(Code) AS CountOfMovies FROM Movies GROUP BY Rating ORDER BY Rating",
          "SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating ORDER BY COUNT(*) DESC",
          "SELECT Rating, COUNT(Code) AS NumberOfMovies FROM Movies GROUP BY Rating ORDER BY Rating ASC",
          "SELECT Rating, COUNT(*) AS Total FROM Movies GROUP BY Rating ORDER BY Total DESC",
          "SELECT Rating, COUNT(Code) AS MovieCount FROM Movies GROUP BY Rating ORDER BY MovieCount",
          "SELECT Rating, COUNT(*) AS Count FROM Movies GROUP BY Rating ORDER BY Count DESC"
        ]
      ]
    },
    {
      "id": 1839,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(1) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Movies.Code) FROM Movies WHERE Movies.Rating IS NOT NULL",
          "SELECT COUNT(*) AS NumberOfMovies FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE NOT (Rating IS NULL)",
          "SELECT COUNT(*) FROM Movies WHERE Rating <> ''",
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL AND Rating <> ''",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating"
        ]
      ]
    },
    {
      "id": 1840,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Rating) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) AS NumberOfMovies FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(Movies.Code) FROM Movies WHERE Movies.Rating IS NOT NULL",
          "SELECT COUNT(1) FROM Movies WHERE NOT Rating IS NULL",
          "SELECT COUNT(*) FROM Movies WHERE Rating <> ''",
          "SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL AND Rating <> ''",
          "SELECT COUNT(DISTINCT Code) FROM Movies WHERE Rating IS NOT NULL",
          "SELECT COUNT(*) FROM Movies WHERE NOT (Rating IS NULL)",
          "SELECT COUNT(*) FROM Movies WHERE LENGTH(Rating) > 0"
        ]
      ]
    },
    {
      "id": 1841,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies)",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code",
          "SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE MT.Movie = M.Code)",
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL AND Movie <> ''",
          "SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) > 0",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code",
          "SELECT DISTINCT Name FROM MovieTheaters MT WHERE MT.Movie IN (SELECT Code FROM Movies)",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1842,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie)",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies)",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code GROUP BY MT.Name",
          "SELECT Name FROM MovieTheaters MT WHERE MT.Movie IS NOT NULL",
          "SELECT DISTINCT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code",
          "SELECT Name FROM MovieTheaters AS MT WHERE EXISTS (SELECT Code FROM Movies AS M WHERE M.Code = MT.Movie)",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT DISTINCT Code FROM Movies)"
        ]
      ]
    },
    {
      "id": 1843,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = 'NULL'",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NOT NULL",
          "SELECT Name FROM MovieTheaters WHERE IFNULL(Movie, 'None') = 'None'",
          "SELECT Name FROM MovieTheaters WHERE COALESCE(Movie, '') = ''",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL OR Movie = ''",
          "SELECT Name FROM MovieTheaters WHERE LENGTH(Movie) = 0",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL OR Movie = 'None'",
          "SELECT Name FROM MovieTheaters WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1844,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = NULL",
          "SELECT Name FROM MovieTheaters WHERE Movie = ''",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NOT NOT NULL",
          "SELECT Name FROM MovieTheaters WHERE TRIM(Movie) IS NULL",
          "SELECT Name FROM MovieTheaters WHERE LENGTH(Movie) = 0",
          "SELECT Name FROM MovieTheaters WHERE Movie IS NULL OR Movie = ''",
          "SELECT Name FROM MovieTheaters WHERE IFNULL(Movie, '') = ''",
          "SELECT Name FROM MovieTheaters WHERE COALESCE(Movie, '') = ''",
          "SELECT Name FROM MovieTheaters WHERE NULLIF(Movie, '') IS NULL"
        ]
      ]
    },
    {
      "id": 1845,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters AS MT, Movies AS M WHERE MT.Movie = M.Code AND M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE M.Code = MT.Movie AND M.Rating = 'G')",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT DISTINCT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT RIGHT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'"
        ]
      ]
    },
    {
      "id": 1846,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')",
          "SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'",
          "SELECT DISTINCT Name FROM MovieTheaters, Movies WHERE MovieTheaters.Movie = Movies.Code AND Movies.Rating = 'G'",
          "SELECT Name FROM MovieTheaters MT, Movies M WHERE MT.Movie = M.Code AND M.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code AND M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating = 'G')",
          "SELECT Name FROM MovieTheaters AS MT JOIN Movies AS M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'",
          "SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')"
        ]
      ]
    },
    {
      "id": 1847,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies",
          "SELECT Movies.Title FROM Movies",
          "SELECT m.Title FROM Movies m",
          "SELECT Title AS MovieTitle FROM Movies",
          "SELECT DISTINCT Title FROM Movies",
          "SELECT * FROM Movies SELECT Title",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT Title FROM Movies GROUP BY Title",
          "SELECT Movies.Title AS Title FROM Movies",
          "SELECT Title FROM Movies WHERE Title IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1848,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies",
          "SELECT DISTINCT Title FROM Movies",
          "SELECT Movies.Title FROM Movies",
          "SELECT Title AS MovieNames FROM Movies",
          "SELECT m.Title FROM Movies m",
          "SELECT DISTINCT m.Title FROM Movies m",
          "SELECT Title FROM Movies ORDER BY Title",
          "SELECT DISTINCT Title FROM Movies ORDER BY Title ASC",
          "SELECT Movies.Title AS MovieNames FROM Movies",
          "SELECT m.Title AS MovieNames FROM Movies m"
        ]
      ]
    },
    {
      "id": 1849,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Rating FROM Movies",
          "SELECT Rating FROM Movies GROUP BY Rating",
          "SELECT UNIQUE Rating FROM Movies",
          "SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL",
          "SELECT DISTINCT Rating FROM Movies ORDER BY Rating",
          "SELECT DISTINCT Rating AS UniqueRatings FROM Movies",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating <> ''",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating > ''",
          "SELECT DISTINCT Rating FROM Movies WHERE LENGTH(Rating) > 0"
        ]
      ]
    },
    {
      "id": 1850,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT DISTINCT Rating FROM Movies",
          "SELECT Rating FROM Movies GROUP BY Rating",
          "SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating",
          "SELECT DISTINCT(Rating) FROM Movies",
          "SELECT Rating FROM Movies GROUP BY Rating HAVING COUNT(*) > 0",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating <> ''",
          "SELECT DISTINCT Rating FROM Movies ORDER BY Rating",
          "SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating ORDER BY Rating",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL AND Rating <> ''",
          "SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL ORDER BY Rating ASC"
        ]
      ]
    },
    {
      "id": 1851,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT * FROM Movies WHERE Rating = 'unrated'",
          "SELECT Movies.* FROM Movies WHERE Movies.Rating = 'unrated'",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating = 'unrated'",
          "SELECT * FROM Movies WHERE Rating IS NULL OR Rating = 'unrated'",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL OR Rating = 'unrated'",
          "SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating = 'unrated'",
          "SELECT * FROM Movies WHERE UPPER(Rating) = 'UNRATED'",
          "SELECT * FROM Movies WHERE LOWER(Rating) = 'unrated'",
          "SELECT * FROM Movies WHERE Rating LIKE 'unrated'",
          "SELECT * FROM Movies WHERE Rating = 'unrated' OR Rating IS NULL"
        ]
      ]
    },
    {
      "id": 1852,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT * FROM Movies WHERE Rating = 'unrated'",
          "SELECT Movies.* FROM Movies WHERE Movies.Rating = 'unrated'",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating = 'unrated'",
          "SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating = 'unrated'",
          "SELECT * FROM Movies WHERE Rating IS 'unrated'",
          "SELECT * FROM Movies WHERE Rating LIKE 'unrated'",
          "SELECT Code, Title, Rating FROM Movies WHERE Rating LIKE 'unrated'",
          "SELECT * FROM Movies WHERE UPPER(Rating) = 'UNRATED'",
          "SELECT * FROM Movies WHERE LOWER(Rating) = 'unrated'",
          "SELECT * FROM Movies WHERE Rating = 'unrated' COLLATE NOCASE"
        ]
      ]
    },
    {
      "id": 1853,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code)",
          "SELECT M.Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code)",
          "SELECT Title FROM Movies EXCEPT SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT Movie FROM MovieTheaters MT WHERE MT.Movie = M.Code)",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters)",
          "SELECT Title FROM Movies M LEFT OUTER JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 1854,
      "db_id": "movie_2",
      "infer_predictions": [
        [
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT)",
          "SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code)",
          "SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Movie IS NULL",
          "SELECT Title FROM Movies EXCEPT SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie",
          "SELECT DISTINCT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters)",
          "SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code)",
          "SELECT M.Title FROM Movies M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)",
          "SELECT Title FROM Movies AS M WHERE M.Code NOT IN (SELECT Movie FROM MovieTheaters AS MT WHERE MT.Movie IS NOT NULL)",
          "SELECT Title FROM Movies WHERE Code NOT IN (SELECT DISTINCT Movie FROM MovieTheaters)"
        ]
      ]
    },
    {
      "id": 1855,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient WHERE P.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1)",
          "SELECT Client.Name FROM Client, Package WHERE Client.AccountNumber = Package.Recipient AND Package.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT TOP 1 Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Recipient AND P.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Recipient = C.AccountNumber AND P.Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package WHERE Weight >= ALL (SELECT Weight FROM Package))"
        ]
      ]
    },
    {
      "id": 1856,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient ORDER BY P.Weight DESC LIMIT 1",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package ORDER BY Weight DESC LIMIT 1)",
          "SELECT TOP 1 Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC",
          "SELECT Client.Name FROM Client, Package WHERE Client.AccountNumber = Package.Recipient AND Package.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Recipient AND P.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT Name FROM Client WHERE AccountNumber = (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))",
          "SELECT C.Name FROM Client C INNER JOIN (SELECT Recipient, MAX(Weight) AS MaxWeight FROM Package GROUP BY Recipient) P ON C.AccountNumber = P.Recipient",
          "SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient WHERE Package.Weight = (SELECT MAX(Weight) FROM Package)",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Recipient = C.AccountNumber AND P.Weight = (SELECT MAX(Weight) FROM Package))"
        ]
      ]
    },
    {
      "id": 1857,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(weight) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) AS TotalWeight FROM Package P LEFT JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name = 'Leo Wong'",
          "SELECT TOTAL(Package.Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Client AS C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong' GROUP BY C.Name"
        ]
      ]
    },
    {
      "id": 1858,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(weight) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Client AS C ON P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P LEFT JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P RIGHT JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT SUM(P.Weight) FROM Package P CROSS JOIN Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1859,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT E.Position FROM Employee E WHERE E.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name LIKE 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' LIMIT 1",
          "SELECT Employee.Position FROM Employee WHERE Employee.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND Position IS NOT NULL",
          "SELECT DISTINCT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT TOP 1 Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' ORDER BY EmployeeID ASC LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 1860,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT E.Position FROM Employee E WHERE E.Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name LIKE 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND Position IS NOT NULL",
          "SELECT DISTINCT Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT TOP 1 Position FROM Employee WHERE Name = 'Amy Wong'",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' ORDER BY EmployeeID DESC LIMIT 1",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' FETCH FIRST 1 ROW ONLY",
          "SELECT Position FROM Employee WHERE Name = 'Amy Wong' AND Position <> ''"
        ]
      ]
    },
    {
      "id": 1861,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name LIKE 'Turanga Leela'",
          "SELECT e.Salary, e.Position FROM Employee e WHERE e.Name = 'Turanga Leela'",
          "SELECT Position AS job_title, Salary AS earnings FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT `Salary`, `Position` FROM `Employee` WHERE `Name` = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' LIMIT 1",
          "SELECT TOP 1 Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' AND Position IS NOT NULL",
          "SELECT Employee.Salary, Employee.Position FROM Employee WHERE Employee.Name = 'Turanga Leela'",
          "SELECT Salary AS Employee_Salary, Position AS Employee_Position FROM Employee WHERE Name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1862,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Position, Salary FROM Employee WHERE Name LIKE 'Turanga Leela'",
          "SELECT e.Salary, e.Position FROM Employee e WHERE e.Name = 'Turanga Leela'",
          "SELECT Position AS JobTitle, Salary AS Pay FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' LIMIT 1",
          "SELECT * FROM Employee WHERE Name = 'Turanga Leela' AND Position IS NOT NULL AND Salary IS NOT NULL",
          "SELECT Employee.Salary, Employee.Position FROM Employee WHERE Employee.Name = 'Turanga Leela'",
          "SELECT TOP 1 Salary, Position FROM Employee WHERE Name = 'Turanga Leela'",
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' AND Salary IS NOT NULL",
          "SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' ORDER BY Salary DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1863,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position LIKE 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' GROUP BY Position",
          "SELECT AVG(e.Salary) FROM Employee e WHERE e.Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE LOWER(Position) = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary IS NOT NULL",
          "SELECT AVG(Salary) AS Average_Salary FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary > 0",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary > 0 GROUP BY Position",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' GROUP BY Position HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1864,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position LIKE 'intern'",
          "SELECT AVG(e.Salary) FROM Employee e WHERE e.Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' GROUP BY Position",
          "SELECT AVG(Salary) AS Average_Salary FROM Employee WHERE Position = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE LOWER(Position) = 'intern'",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary IS NOT NULL",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary > 0",
          "SELECT AVG(Salary) FROM Employee WHERE Position = 'intern' AND Salary >= 0"
        ]
      ]
    },
    {
      "id": 1865,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'",
          "SELECT H.Level FROM Has_Clearance AS H INNER JOIN Employee AS E ON H.Employee = E.EmployeeID WHERE E.Position = 'Physician'",
          "SELECT Has_Clearance.Level FROM Has_Clearance, Employee WHERE Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'Physician'",
          "SELECT Level FROM Has_Clearance H, Employee E WHERE H.Employee = E.EmployeeID AND E.Position = 'Physician'",
          "SELECT DISTINCT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Position = 'Physician'",
          "SELECT H.Level FROM Has_Clearance H JOIN Employee E ON H.Employee = E.EmployeeID WHERE E.Position LIKE 'Physician'",
          "SELECT Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician' AND Employee.Position IS NOT NULL",
          "SELECT top 1 Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'",
          "SELECT Level FROM Has_Clearance LEFT JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'",
          "SELECT Level FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee WHERE Employee.Position = 'Physician'"
        ]
      ]
    },
    {
      "id": 1866,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'physician'",
          "SELECT H.Level FROM Has_Clearance H INNER JOIN Employee E ON H.Employee = E.EmployeeID WHERE E.Position = 'physician'",
          "SELECT clearance.Level FROM Has_Clearance clearance, Employee emp WHERE clearance.Employee = emp.EmployeeID AND emp.Position = 'physician'",
          "SELECT Level FROM Has_Clearance, Employee WHERE Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'physician'",
          "SELECT Level AS ClearanceLevel FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Position = 'physician'",
          "SELECT DISTINCT Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'physician'",
          "SELECT Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position LIKE 'physician'",
          "SELECT Level FROM Has_Clearance h, Employee e WHERE h.Employee = e.EmployeeID AND e.Position = 'physician'",
          "SELECT Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID AND Employee.Position = 'physician'",
          "SELECT Level FROM Has_Clearance h INNER JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position = 'physician' ORDER BY Level"
        ]
      ]
    },
    {
      "id": 1867,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT P.PackageNumber FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT pkg.PackageNumber FROM Package AS pkg JOIN Client AS clt ON pkg.Sender = clt.AccountNumber WHERE clt.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name LIKE 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1868,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT COUNT(Package.PackageNumber) FROM Package LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM (SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong') AS LeoWongPackages"
        ]
      ]
    },
    {
      "id": 1869,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Client C ON P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package JOIN Client ON Recipient = AccountNumber WHERE Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package AS p JOIN Client AS c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name LIKE 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong' ORDER BY p.PackageNumber"
        ]
      ]
    },
    {
      "id": 1870,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Client C ON P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p, Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package AS p INNER JOIN Client AS c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT p.PackageNumber FROM Package p WHERE EXISTS (SELECT 1 FROM Client c WHERE p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong')",
          "SELECT Package.PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'",
          "SELECT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Recipient = c.AccountNumber AND c.Name = 'Leo Wong' ORDER BY p.PackageNumber"
        ]
      ]
    },
    {
      "id": 1871,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT Package.* FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT P.* FROM Package P, Client C WHERE (P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber) AND C.Name = 'Leo Wong'",
          "SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT P.* FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT * FROM Package WHERE EXISTS (SELECT 1 FROM Client WHERE (Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber) AND Client.Name = 'Leo Wong')",
          "SELECT P.* FROM Package P LEFT JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT P.* FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Leo Wong' UNION SELECT P.* FROM Package P JOIN Client C ON P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'",
          "SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') UNION SELECT * FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT P.PackageNumber, P.Contents, P.Weight, P.Sender, P.Recipient FROM Package P JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1872,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT DISTINCT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p, Client c WHERE (p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber) AND c.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT Package.PackageNumber FROM Package, Client WHERE (Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber) AND Client.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong' UNION SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT DISTINCT p.PackageNumber FROM Package p LEFT JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong' ORDER BY p.PackageNumber",
          "SELECT DISTINCT p.PackageNumber FROM Package p JOIN Client c ON (p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber) AND c.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1873,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Client AS C1 ON Package.Sender = C1.AccountNumber JOIN Client AS C2 ON Package.Recipient = C2.AccountNumber WHERE C1.Name = 'Ogden Wernstrom' AND C2.Name = 'Leo Wong'",
          "SELECT COUNT(Package.PackageNumber) FROM Package, Client AS Sender, Client AS Recipient WHERE Package.Sender = Sender.AccountNumber AND Package.Recipient = Recipient.AccountNumber AND Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package INNER JOIN Client Sender ON Package.Sender = Sender.AccountNumber INNER JOIN Client Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package LEFT JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber LEFT JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(1) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM (SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')) AS SubQuery",
          "SELECT COUNT(PackageNumber) FROM Package p, Client s, Client r WHERE p.Sender = s.AccountNumber AND p.Recipient = r.AccountNumber AND s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')",
          "SELECT COUNT(*) FROM Package p INNER JOIN Client s ON p.Sender = s.AccountNumber INNER JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package WHERE EXISTS (SELECT 1 FROM Client WHERE Client.AccountNumber = Package.Sender AND Client.Name = 'Ogden Wernstrom') AND EXISTS (SELECT 1 FROM Client WHERE Client.AccountNumber = Package.Recipient AND Client.Name = 'Leo Wong')"
        ]
      ]
    },
    {
      "id": 1874,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Client AS C1 ON Package.Sender = C1.AccountNumber JOIN Client AS C2 ON Package.Recipient = C2.AccountNumber WHERE C1.Name = 'Ogden Wernstrom' AND C2.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) AS TotalPackages FROM Package, Client AS Sender, Client AS Recipient WHERE Package.Sender = Sender.AccountNumber AND Package.Recipient = Recipient.AccountNumber AND Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package INNER JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber INNER JOIN Client AS Receiver ON Package.Recipient = Receiver.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Receiver.Name = 'Leo Wong'",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package LEFT JOIN Client Sender ON Package.Sender = Sender.AccountNumber LEFT JOIN Client Receiver ON Package.Recipient = Receiver.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Receiver.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(Package.PackageNumber) FROM Package JOIN Client SenderClient ON Package.Sender = SenderClient.AccountNumber JOIN Client RecipientClient ON Package.Recipient = RecipientClient.AccountNumber WHERE SenderClient.Name = 'Ogden Wernstrom' AND RecipientClient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p, Client s, Client r WHERE p.Sender = s.AccountNumber AND p.Recipient = r.AccountNumber AND s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package INNER JOIN Client AS SenderClient ON Package.Sender = SenderClient.AccountNumber INNER JOIN Client AS RecipientClient ON Package.Recipient = RecipientClient.AccountNumber WHERE SenderClient.Name = 'Ogden Wernstrom' AND RecipientClient.Name = 'Leo Wong'",
          "SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'",
          "SELECT COUNT(PackageNumber) FROM Package p INNER JOIN Client s ON p.Sender = s.AccountNumber INNER JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1875,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Contents FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT package.Contents FROM package INNER JOIN client ON package.Sender = client.AccountNumber WHERE client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT p.Contents FROM Package p INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package p LEFT JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'"
        ]
      ]
    },
    {
      "id": 1876,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Contents FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT package.Contents FROM package INNER JOIN client ON package.Sender = client.AccountNumber WHERE client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'",
          "SELECT P.Contents FROM Package AS P, Client AS C WHERE P.Sender = C.AccountNumber AND C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')",
          "SELECT Contents FROM Package P LEFT JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'John Zoidfarb'",
          "SELECT P.Contents FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber AND C.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'",
          "SELECT Contents FROM Package P WHERE EXISTS (SELECT 1 FROM Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'John Zoidfarb')"
        ]
      ]
    },
    {
      "id": 1877,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, MAX(Weight) AS MaxWeight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' GROUP BY PackageNumber ORDER BY MaxWeight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT TOP 1 Package.PackageNumber, Package.Weight FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name LIKE '%John%' ORDER BY Package.Weight DESC",
          "SELECT PackageNumber, Weight FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%' ORDER BY Weight DESC FETCH FIRST ROW ONLY",
          "SELECT P.PackageNumber, MAX(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' GROUP BY P.PackageNumber ORDER BY MAX(P.Weight) DESC LIMIT 1",
          "SELECT PackageNumber, Weight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name CONTAINS 'John' ORDER BY Weight DESC LIMIT 1",
          "SELECT FIRST(PackageNumber), FIRST(Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Weight DESC",
          "SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT PackageNumber, MAX(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%' GROUP BY PackageNumber HAVING MAX(Weight) = (SELECT MAX(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%')"
        ]
      ]
    },
    {
      "id": 1878,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Package.PackageNumber, MAX(Package.Weight) AS Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' GROUP BY Package.PackageNumber ORDER BY Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 P.PackageNumber, P.Weight FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name LIKE '%John%' ORDER BY P.Weight DESC",
          "SELECT P.PackageNumber, P.Weight FROM Package AS P JOIN Client AS C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT FIRST(P.PackageNumber), FIRST(P.Weight) FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC",
          "SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name CONTAINS 'John' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1",
          "SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name SIMILAR TO '%John%' ORDER BY P.Weight DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1879,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3",
          "SELECT TOP 3 PackageNumber, Weight FROM Package ORDER BY Weight",
          "SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC FETCH FIRST 3 ROWS ONLY",
          "SELECT * FROM (SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC) WHERE rownum <= 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3 OFFSET 0",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight IN (SELECT MIN(Weight) FROM Package) LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC, PackageNumber DESC LIMIT 3",
          "SELECT PackageNumber, Weight FROM (SELECT PackageNumber, Weight, RANK() OVER (ORDER BY Weight ASC) AS rnk FROM Package) WHERE rnk <= 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3 OFFSET 0 ROWS",
          "SELECT FIRST 3 PackageNumber, Weight FROM Package ORDER BY Weight ASC"
        ]
      ]
    },
    {
      "id": 1880,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3",
          "SELECT P.PackageNumber, P.Weight FROM Package P ORDER BY P.Weight ASC LIMIT 3",
          "SELECT TOP 3 PackageNumber, Weight FROM Package ORDER BY Weight ASC",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight IN (SELECT MIN(Weight) FROM Package) LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC FETCH FIRST 3 ROWS ONLY",
          "SELECT * FROM (SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC) WHERE ROWNUM <= 3",
          "SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC, PackageNumber ASC LIMIT 3",
          "SELECT PackageNumber, Weight FROM Package AS P ORDER BY P.Weight ASC LIMIT 3",
          "SELECT PackageNumber, Weight FROM (SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC) AS Lightest LIMIT 3"
        ]
      ]
    },
    {
      "id": 1881,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(P.PackageNumber) AS NumberOfPackages FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.Name ORDER BY NumberOfPackages DESC LIMIT 1",
          "SELECT Name, COUNT(*) AS TotalPackages FROM Client INNER JOIN Package ON AccountNumber = Sender GROUP BY Name ORDER BY TotalPackages DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Client.Name, COUNT(Package.PackageNumber) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY PackageCount DESC",
          "SELECT Name, COUNT(PackageNumber) AS PackagesSent FROM Client, Package WHERE Client.AccountNumber = Package.Sender GROUP BY Name ORDER BY PackagesSent DESC LIMIT 1",
          "SELECT Client.Name AS ClientName, COUNT(*) AS TotalSentPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY TotalSentPackages DESC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) FROM Client JOIN Package ON AccountNumber = Sender GROUP BY Name HAVING COUNT(PackageNumber) = (SELECT MAX(PackageCount) FROM (SELECT COUNT(PackageNumber) AS PackageCount FROM Package GROUP BY Sender) AS SubQuery) LIMIT 1",
          "SELECT FIRST 1 Client.Name, COUNT(Package.PackageNumber) AS SentPackages FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY SentPackages DESC",
          "SELECT Name, COUNT(*) AS CountOfPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Name ORDER BY CountOfPackages DESC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.Sender) AS NumberOfPackagesSent FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY NumberOfPackagesSent DESC LIMIT 1",
          "SELECT Name, COUNT(PackageNumber) AS TotalPackagesSent FROM Client INNER JOIN Package ON Client.AccountNumber = Sender GROUP BY Name ORDER BY TotalPackagesSent DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1882,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(P.PackageNumber) AS TotalPackages FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.Name ORDER BY TotalPackages DESC LIMIT 1",
          "SELECT Name, COUNT(*) AS PackageCount FROM Client INNER JOIN Package ON AccountNumber = Sender GROUP BY Name ORDER BY PackageCount DESC FETCH FIRST 1 ROW ONLY",
          "SELECT TOP 1 Client.Name, COUNT(Package.PackageNumber) AS NumPackages FROM Client, Package WHERE Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY NumPackages DESC",
          "SELECT Name, COUNT(PackageNumber) FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Name HAVING COUNT(PackageNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(PackageNumber) AS Count FROM Package GROUP BY Sender))",
          "SELECT Client.Name, COUNT(*) AS TotalSentPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY TotalSentPackages DESC LIMIT 1",
          "SELECT Name, MAX(PackageCount) FROM (SELECT Client.Name AS Name, COUNT(Package.PackageNumber) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name) AS SubQuery",
          "SELECT FIRST(Name), FIRST(TotalPackages) FROM (SELECT Client.Name AS Name, COUNT(Package.PackageNumber) AS TotalPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY TotalPackages DESC)",
          "SELECT Name, COUNT(*) AS SentPackages FROM Client INNER JOIN Package ON AccountNumber = Sender GROUP BY Name ORDER BY SentPackages DESC LIMIT 1",
          "SELECT Client.Name, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name ORDER BY NumberOfPackages DESC FETCH FIRST ROW ONLY",
          "SELECT Name, COUNT(PackageNumber) AS PackageCount FROM Client JOIN Package ON AccountNumber = Sender GROUP BY Name ORDER BY PackageCount DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1883,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, COUNT(P.Recipient) AS NumPackages FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient GROUP BY C.Name ORDER BY NumPackages ASC LIMIT 1",
          "SELECT Name, COUNT(Recipient) AS PackageCount FROM Client INNER JOIN Package ON AccountNumber = Recipient GROUP BY Name ORDER BY PackageCount ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT TOP 1 Client.Name, COUNT(Package.Recipient) AS TotalPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY TotalPackages",
          "SELECT Client.Name, MIN(PackageCount) FROM Client LEFT JOIN (SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient) AS PackageSummary ON Client.AccountNumber = PackageSummary.Recipient",
          "SELECT Name, NumPackages FROM (SELECT Client.Name, COUNT(Package.Recipient) AS NumPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name) AS SubQuery ORDER BY NumPackages ASC LIMIT 1",
          "SELECT C.Name, COUNT(*) AS PackagesReceived FROM Client C, Package P WHERE C.AccountNumber = P.Recipient GROUP BY C.Name HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Package GROUP BY Recipient) AS SubQuery)",
          "SELECT FIRST_VALUE(Client.Name) OVER (ORDER BY COUNT(Package.Recipient) ASC) AS ClientName, COUNT(Package.Recipient) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name",
          "SELECT Client.Name, COUNT(Package.Recipient) AS ReceivedPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY ReceivedPackages ASC LIMIT 1",
          "SELECT Name, COUNT(Recipient) AS ReceivedPackages FROM Client LEFT OUTER JOIN Package ON AccountNumber = Recipient GROUP BY Name ORDER BY ReceivedPackages ASC FETCH FIRST ROW ONLY",
          "SELECT C.Name, IFNULL(P.PackageCount, 0) AS PackagesReceived FROM Client C LEFT JOIN (SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient) P ON C.AccountNumber = P.Recipient ORDER BY PackagesReceived ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1884,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name, MIN(PackageCount) FROM (SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient) AS SubQuery JOIN Client C ON SubQuery.Recipient = C.AccountNumber",
          "SELECT Client.Name, COUNT(Package.Recipient) AS NumPackages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Package.Recipient ORDER BY NumPackages ASC LIMIT 1",
          "SELECT TOP 1 Client.Name, COUNT(*) AS PackageCount FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Name ORDER BY PackageCount ASC",
          "SELECT Client.Name, COUNT(Package.Recipient) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY PackageCount ASC FETCH FIRST 1 ROW ONLY",
          "SELECT C.Name FROM Client C WHERE C.AccountNumber = (SELECT P.Recipient FROM Package P GROUP BY P.Recipient ORDER BY COUNT(*) ASC LIMIT 1)",
          "SELECT C.Name, COUNT(P.Recipient) AS TotalPackages FROM Client C LEFT JOIN Package P ON C.AccountNumber = P.Recipient GROUP BY C.Name ORDER BY TotalPackages ASC LIMIT 1",
          "SELECT Client.Name, MIN(CountPackages) FROM Client JOIN (SELECT Recipient, COUNT(*) AS CountPackages FROM Package GROUP BY Recipient) AS PackageCounts ON Client.AccountNumber = PackageCounts.Recipient",
          "SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Recipient GROUP BY C.Name, P.Recipient HAVING COUNT(P.Recipient) = (SELECT MIN(CountPackages) FROM (SELECT COUNT(*) AS CountPackages FROM Package GROUP BY Recipient) AS SubQuery)",
          "SELECT FIRST_VALUE(Client.Name) OVER (ORDER BY COUNT(Package.Recipient) ASC) AS MinRecipient FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Name",
          "SELECT Client.Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package GROUP BY Recipient ORDER BY COUNT(*) ASC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1885,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)",
          "SELECT DISTINCT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.PackageNumber) > 1",
          "SELECT client.Name FROM Client client INNER JOIN Package package ON client.AccountNumber = package.Sender GROUP BY client.AccountNumber HAVING COUNT(package.PackageNumber) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(PackageNumber) > 1)",
          "SELECT C.Name FROM Client C INNER JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(DISTINCT P.PackageNumber) > 1",
          "SELECT Name FROM Client AS C JOIN Package AS P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(*) > 1",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Sender = C.AccountNumber GROUP BY P.Sender HAVING COUNT(P.PackageNumber) > 1)",
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber, C.Name HAVING COUNT(*) > 1",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package P GROUP BY Sender HAVING COUNT(P.PackageNumber) > 1)"
        ]
      ]
    },
    {
      "id": 1886,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)",
          "SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY P.Sender HAVING COUNT(P.Sender) > 1",
          "SELECT DISTINCT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY P.Sender HAVING COUNT(P.Sender) > 1",
          "SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Sender = C.AccountNumber GROUP BY P.Sender HAVING COUNT(*) > 1)",
          "SELECT C.Name FROM Client C INNER JOIN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1) AS S ON C.AccountNumber = S.Sender",
          "SELECT C.Name FROM Client C WHERE C.AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(PackageNumber) > 1)",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package P GROUP BY Sender HAVING COUNT(P.PackageNumber) > 1)",
          "SELECT C.Name FROM Client C WHERE (SELECT COUNT(*) FROM Package P WHERE P.Sender = C.AccountNumber) > 1",
          "SELECT C.Name FROM Client C JOIN (SELECT Sender, COUNT(*) AS NumPackages FROM Package GROUP BY Sender HAVING NumPackages > 1) P ON C.AccountNumber = P.Sender",
          "SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)"
        ]
      ]
    },
    {
      "id": 1887,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars'",
          "SELECT Planet.Coordinates FROM Planet WHERE Planet.Name = 'Mars'",
          "SELECT p.Coordinates FROM Planet p WHERE p.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name LIKE 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' LIMIT 1",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND Coordinates IS NOT NULL",
          "SELECT Coordinates FROM Planet WHERE UPPER(Name) = 'MARS'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' FETCH FIRST ROW ONLY",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' ORDER BY PlanetID ASC LIMIT 1",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND Coordinates <> ''"
        ]
      ]
    },
    {
      "id": 1888,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars'",
          "SELECT p.Coordinates FROM Planet p WHERE p.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name LIKE 'Mars'",
          "SELECT Planet.Coordinates FROM Planet WHERE Planet.Name = 'Mars'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' LIMIT 1",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND PlanetID IS NOT NULL",
          "SELECT Coordinates FROM Planet WHERE UPPER(Name) = 'MARS'",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' ORDER BY PlanetID",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' FETCH FIRST 1 ROWS ONLY",
          "SELECT Coordinates FROM Planet WHERE Name = 'Mars' AND Coordinates IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1889,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC",
          "SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC",
          "SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY PlanetName",
          "SELECT * FROM Planet ORDER BY Name",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Name, Coordinates FROM Planet p ORDER BY p.Name",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name, Coordinates",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC, Coordinates ASC"
        ]
      ]
    },
    {
      "id": 1890,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC",
          "SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC",
          "SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY PlanetName",
          "SELECT * FROM Planet ORDER BY Name",
          "SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASCENDING",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name ASC, Coordinates",
          "SELECT Name, Coordinates FROM Planet ORDER BY Name, Coordinates ASC"
        ]
      ]
    },
    {
      "id": 1891,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment, Employee WHERE Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J. Fry'",
          "SELECT DISTINCT ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name LIKE 'Phillip J. Fry'",
          "SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')",
          "SELECT s.ShipmentID FROM Shipment s, Employee e WHERE s.Manager = e.EmployeeID AND e.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J. Fry'",
          "SELECT ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID AND e.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment AS s JOIN Employee AS e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J. Fry'"
        ]
      ]
    },
    {
      "id": 1892,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment, Employee WHERE Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment s, Employee e WHERE s.Manager = e.EmployeeID AND e.Name = 'Phillip J Fry'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name LIKE 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID AND Employee.Name = 'Phillip J Fry'",
          "SELECT s.ShipmentID FROM Shipment AS s JOIN Employee AS e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'",
          "SELECT ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry' AND e.Position = 'Manager'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry' AND Employee.Position = 'Manager'"
        ]
      ]
    },
    {
      "id": 1893,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Date FROM Shipment",
          "SELECT Shipment.Date FROM Shipment",
          "SELECT DISTINCT Date FROM Shipment",
          "SELECT Shipment.Date AS ShipmentDate FROM Shipment",
          "SELECT `Date` FROM Shipment",
          "SELECT [Date] FROM Shipment",
          "SELECT Shipment.Date FROM Shipment ORDER BY Date",
          "SELECT Date FROM Shipment ORDER BY Date ASC",
          "SELECT * FROM Shipment SELECT Date",
          "SELECT Date AS ShipmentDates FROM Shipment"
        ]
      ]
    },
    {
      "id": 1894,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Date FROM Shipment",
          "SELECT DISTINCT Date FROM Shipment",
          "SELECT Shipment.Date FROM Shipment",
          "SELECT DISTINCT Shipment.Date FROM Shipment",
          "SELECT Date FROM Shipment ORDER BY Date",
          "SELECT Shipment.Date FROM Shipment ORDER BY Shipment.Date",
          "SELECT Date FROM Shipment GROUP BY Date",
          "SELECT Shipment.Date FROM Shipment GROUP BY Shipment.Date",
          "SELECT * FROM Shipment SELECT Date",
          "SELECT * FROM Shipment SELECT Shipment.Date"
        ]
      ]
    },
    {
      "id": 1895,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s, Planet p WHERE s.Planet = p.PlanetID AND p.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1896,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'",
          "SELECT ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment, Planet WHERE Shipment.Planet = Planet.PlanetID AND UPPER(Planet.Name) = UPPER('Mars')",
          "SELECT s.ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID WHERE p.Name LIKE 'Mars'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' ORDER BY Shipment.ShipmentID",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Shipment.ShipmentID IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1897,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT DISTINCT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela' ORDER BY s.ShipmentID",
          "SELECT ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela' ORDER BY ShipmentID",
          "SELECT s.ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND p.Name = 'Mars' AND e.Name = 'Turanga Leela' ORDER BY s.ShipmentID"
        ]
      ]
    },
    {
      "id": 1898,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID JOIN Employee AS e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1899,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND (Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela')",
          "SELECT ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND (p.Name = 'Mars' OR e.Name = 'Turanga Leela')",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela'",
          "SELECT DISTINCT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')",
          "SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT 1 FROM Planet WHERE Shipment.Planet = Planet.PlanetID AND Name = 'Mars') OR EXISTS (SELECT 1 FROM Employee WHERE Shipment.Manager = Employee.EmployeeID AND Name = 'Turanga Leela')",
          "SELECT ShipmentID FROM Shipment s WHERE s.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR s.Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')"
        ]
      ]
    },
    {
      "id": 1900,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT DISTINCT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND p.Name = 'Mars' AND e.Name = 'Turanga Leela'",
          "SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name LIKE 'Mars' AND Employee.Name LIKE 'Turanga Leela'",
          "SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela' ORDER BY s.ShipmentID",
          "SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')",
          "SELECT Shipment.ShipmentID FROM Shipment INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela' GROUP BY Shipment.ShipmentID"
        ]
      ]
    },
    {
      "id": 1901,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, COUNT(S.ShipmentID) AS TotalShipments FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS ShipmentsCount FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name",
          "SELECT Name, COUNT(*) AS Total_Shipments FROM Planet, Shipment WHERE Planet.PlanetID = Shipment.Planet GROUP BY Name",
          "SELECT p.Name AS PlanetName, COUNT(s.ShipmentID) AS NumberOfShipments FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY p.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Planet LEFT JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT Planet.Name, COUNT(Shipment.ShipmentID) FROM Planet LEFT OUTER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name",
          "SELECT p.Name, COUNT(s.ShipmentID) AS Shipments FROM Planet p, Shipment s WHERE p.PlanetID = s.Planet GROUP BY p.Name",
          "SELECT Name AS Planet_Name, COUNT(ShipmentID) AS TotalShipments FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT Planet.Name, COUNT(*) AS Shipments_Total FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY Shipments_Total DESC",
          "SELECT Name, COUNT(ShipmentID) AS Shipments FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY Name HAVING COUNT(ShipmentID) > 0"
        ]
      ]
    },
    {
      "id": 1902,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, COUNT(S.ShipmentID) AS NumberOfShipments FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Planet.Name, COUNT(*) AS ShipmentsCount FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Planet, Shipment WHERE Planet.PlanetID = Shipment.Planet GROUP BY Name",
          "SELECT P.Name AS PlanetName, COUNT(S.ShipmentID) AS TotalShipments FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Name, COUNT(*) FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT P.Name, COUNT(S.Planet) FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name",
          "SELECT Planet.Name, COUNT(Shipment.Planet) AS ShipmentsPerPlanet FROM Planet LEFT JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name",
          "SELECT P.Name AS Planet, COUNT(*) AS Shipments FROM Planet P INNER JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY P.Name",
          "SELECT Name, COUNT(ShipmentID) AS Shipments FROM Planet LEFT OUTER JOIN Shipment ON PlanetID = Planet GROUP BY Name",
          "SELECT P.Name, COUNT(*) AS TotalShipments FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY TotalShipments DESC"
        ]
      ]
    },
    {
      "id": 1903,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(ShipmentID) DESC LIMIT 1)",
          "SELECT TOP 1 Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY COUNT(Shipment.Planet) DESC",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet HAVING COUNT(ShipmentID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(ShipmentID) AS Cnt FROM Shipment GROUP BY Planet) AS Sub))",
          "SELECT Planet.Name FROM Planet, Shipment WHERE Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY COUNT(Shipment.Planet) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID = (SELECT S.Planet FROM Shipment S GROUP BY S.Planet ORDER BY COUNT(S.ShipmentID) DESC LIMIT 1)",
          "SELECT Name FROM (SELECT Name, RANK() OVER (ORDER BY COUNT(S.ShipmentID) DESC) AS rank FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name) WHERE rank = 1",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT P.Name FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name HAVING COUNT(S.ShipmentID) = (SELECT MAX(Count) FROM (SELECT COUNT(ShipmentID) AS Count FROM Shipment GROUP BY Planet) AS Counts)",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM (SELECT Planet, COUNT(*) AS TotalShipments FROM Shipment GROUP BY Planet ORDER BY TotalShipments DESC) AS SubQuery LIMIT 1)"
        ]
      ]
    },
    {
      "id": 1904,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Name FROM Planet WHERE PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 P.Name FROM Planet P INNER JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(S.ShipmentID) DESC",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT S.Planet FROM Shipment S GROUP BY S.Planet HAVING COUNT(S.ShipmentID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Shipment GROUP BY Planet) T))",
          "SELECT P.Name FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name HAVING COUNT(S.ShipmentID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Shipment GROUP BY Planet) T)",
          "SELECT P.Name FROM Planet P JOIN (SELECT Planet, COUNT(*) AS ShipCount FROM Shipment GROUP BY Planet) AS S ON P.PlanetID = S.Planet ORDER BY S.ShipCount DESC LIMIT 1",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Shipment GROUP BY Planet) AS Counts))",
          "SELECT Name FROM (SELECT P.Name, COUNT(S.Planet) AS TotalShipments FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.Name ORDER BY TotalShipments DESC) WHERE ROWNUM = 1",
          "SELECT P.Name FROM Planet P INNER JOIN (SELECT Planet, COUNT(*) AS Total FROM Shipment GROUP BY Planet) AS S ON P.PlanetID = S.Planet ORDER BY S.Total DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID = (SELECT Planet FROM Shipment GROUP BY Planet ORDER BY COUNT(ShipmentID) DESC FETCH FIRST 1 ROW ONLY)"
        ]
      ]
    },
    {
      "id": 1905,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name, COUNT(S.ShipmentID) AS NumberOfShipments FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name, COUNT(ShipmentID) AS ShipmentsCount FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name",
          "SELECT Employee.Name, COUNT(*) AS TotalShipments FROM Employee INNER JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Name",
          "SELECT E.Name AS ManagerName, COUNT(S.ShipmentID) AS ShipmentsManaged FROM Employee E, Shipment S WHERE E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name AS Manager, COUNT(*) AS Shipments FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name ORDER BY Name",
          "SELECT E.Name, COUNT(S.ShipmentID) FROM Employee E LEFT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name HAVING COUNT(S.ShipmentID) > 0",
          "SELECT Name, COUNT(ShipmentID) AS NumberOfShipments FROM Employee INNER JOIN Shipment ON EmployeeID = Manager GROUP BY Name ORDER BY NumberOfShipments DESC",
          "SELECT E.Name AS ManagerName, COUNT(*) AS TotalShipments FROM Employee E RIGHT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT DISTINCT E.Name, COUNT(S.ShipmentID) AS Shipments FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name"
        ]
      ]
    },
    {
      "id": 1906,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name, COUNT(S.ShipmentID) AS NumberOfShipments FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name, COUNT(ShipmentID) AS ShipmentsCount FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name",
          "SELECT Employee.Name, COUNT(*) AS TotalShipments FROM Employee INNER JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name",
          "SELECT Name, COUNT(ShipmentID) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Name",
          "SELECT E.Name AS ManagerName, COUNT(S.ShipmentID) AS ShipmentsManaged FROM Employee E, Shipment S WHERE E.EmployeeID = S.Manager GROUP BY E.Name",
          "SELECT Name AS Manager, COUNT(ShipmentID) AS Shipments FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name ORDER BY Name",
          "SELECT Name, COUNT(Shipment.ShipmentID) AS NumberOfShipments FROM Employee LEFT JOIN Shipment ON EmployeeID = Manager GROUP BY Name",
          "SELECT E.Name, COUNT(S.ShipmentID) AS Shipments FROM Employee E LEFT JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name ORDER BY Shipments DESC",
          "SELECT Name, COUNT(ShipmentID) AS ShipmentsManaged FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name HAVING COUNT(ShipmentID) > 0",
          "SELECT E.Name AS ManagerName, COUNT(*) AS TotalShipments FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.Name ORDER BY TotalShipments DESC"
        ]
      ]
    },
    {
      "id": 1907,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(weight) FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT SUM(weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P, Shipment S, Planet Pl WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Shipment AS S ON P.Shipment = S.ShipmentID JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1908,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT SUM(P.Weight) AS TotalWeight FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(Package.Weight) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "SELECT SUM(weight) AS Total_Weight FROM Package, Shipment, Planet WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Planet.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P, Shipment S, Planet Pl WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package AS P JOIN Shipment AS S ON P.Shipment = S.ShipmentID JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) TotalWeight FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) FROM Package P, Shipment S, Planet Pl WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND Pl.Name = 'Mars' GROUP BY Pl.Name",
          "SELECT SUM(P.Weight) FROM Package AS P INNER JOIN Shipment AS S ON P.Shipment = S.ShipmentID INNER JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'",
          "SELECT SUM(P.Weight) AS TotalWeight FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars' GROUP BY Pl.Name"
        ]
      ]
    },
    {
      "id": 1909,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, SUM(PK.Weight) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name",
          "SELECT P.Name AS PlanetName, SUM(PK.Weight) AS TotalWeight FROM Planet P, Shipment S, Package PK WHERE P.PlanetID = S.Planet AND S.ShipmentID = PK.Shipment GROUP BY P.Name",
          "SELECT P.Name, TOTAL(PK.Weight) FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name ORDER BY Planet.Name",
          "SELECT P.Name AS Planet, SUM(PK.Weight) AS Total_Weight FROM Planet AS P JOIN Shipment AS S ON P.PlanetID = S.Planet JOIN Package AS PK ON S.ShipmentID = PK.Shipment GROUP BY P.Name ORDER BY Total_Weight DESC",
          "SELECT DISTINCT P.Name, SUM(PK.Weight) OVER (PARTITION BY P.Name) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment",
          "SELECT P.Name, SUM(PK.Weight) AS TotalWeight FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet LEFT JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.Name",
          "SELECT P.Name AS PlanetName, Aggregate(PK.Weight) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name"
        ]
      ]
    },
    {
      "id": 1910,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name, SUM(Pa.Weight) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name",
          "SELECT P.Name AS PlanetName, SUM(Pa.Weight) AS TotalWeight FROM Planet P, Shipment S, Package Pa WHERE P.PlanetID = S.Planet AND S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, TOTAL(Package.Weight) FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name",
          "SELECT P.Name, SUM(Pa.Weight) FROM Planet P LEFT JOIN Shipment S ON P.PlanetID = S.Planet LEFT JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT DISTINCT P.Name, SUM(Pa.Weight) OVER (PARTITION BY P.Name) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment",
          "SELECT P.Name AS PlanetName, SUM(Pa.Weight) TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name ORDER BY P.Name",
          "SELECT P.Name, Aggregate(Pa.Weight) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT P.Name, SUM(Pa.Weight) AS TotalWeight FROM Planet AS P JOIN Shipment AS S ON P.PlanetID = S.Planet JOIN Package AS Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.Name",
          "SELECT Planet.Name, SUM(Package.Weight) FROM Planet, Shipment, Package WHERE Planet.PlanetID = Shipment.Planet AND Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name"
        ]
      ]
    },
    {
      "id": 1911,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package K ON S.ShipmentID = K.Shipment GROUP BY P.Name HAVING SUM(K.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Weight) > 30)",
          "SELECT DISTINCT P.Name FROM Planet P, Shipment S, Package K WHERE P.PlanetID = S.Planet AND S.ShipmentID = K.Shipment GROUP BY P.Name HAVING SUM(K.Weight) > 30",
          "SELECT P.Name FROM Planet P INNER JOIN Shipment S ON P.PlanetID = S.Planet INNER JOIN Package K ON S.ShipmentID = K.Shipment GROUP BY P.Name HAVING SUM(K.Weight) > 30",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Shipment S JOIN Package K ON S.ShipmentID = K.Shipment WHERE S.Planet = P.PlanetID GROUP BY S.Planet HAVING SUM(K.Weight) > 30)",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT S.Planet FROM Shipment S INNER JOIN Package K ON S.ShipmentID = K.Shipment GROUP BY S.Planet HAVING SUM(K.Weight) > 30)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment, Package WHERE Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Package.Weight) > 30)",
          "SELECT P.Name FROM Planet AS P JOIN Shipment AS S ON P.PlanetID = S.Planet JOIN Package AS K ON S.ShipmentID = K.Shipment GROUP BY P.Name HAVING SUM(K.Weight) > 30",
          "SELECT P.Name FROM Planet P JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet) AS SubQuery ON P.PlanetID = SubQuery.Planet WHERE SubQuery.TotalWeight > 30",
          "SELECT P.Name FROM Planet P WHERE (SELECT SUM(K.Weight) FROM Shipment S JOIN Package K ON S.ShipmentID = K.Shipment WHERE S.Planet = P.PlanetID GROUP BY S.Planet) > 30"
        ]
      ]
    },
    {
      "id": 1912,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.PlanetID HAVING SUM(Pa.Weight) > 30",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Weight) > 30)",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Shipment S JOIN Package Pa ON S.ShipmentID = Pa.Shipment WHERE S.Planet = P.PlanetID GROUP BY S.Planet HAVING SUM(Pa.Weight) > 30)",
          "SELECT DISTINCT P.Name FROM Planet P, Shipment S, Package Pa WHERE P.PlanetID = S.Planet AND S.ShipmentID = Pa.Shipment GROUP BY P.PlanetID HAVING SUM(Pa.Weight) > 30",
          "SELECT P.Name FROM Planet P INNER JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON ShipmentID = Shipment GROUP BY Planet) AS SP ON P.PlanetID = SP.Planet WHERE SP.TotalWeight > 30",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT S.Planet FROM Shipment S INNER JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY S.Planet HAVING SUM(Pa.Weight) > 30)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet HAVING SUM(Weight) > 30)",
          "SELECT P.Name FROM Planet P JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON ShipmentID = Shipment GROUP BY Planet HAVING TotalWeight > 30) AS SubQuery ON P.PlanetID = SubQuery.Planet",
          "SELECT P.Name FROM Planet P, Shipment S, Package Pa WHERE P.PlanetID = S.Planet AND S.ShipmentID = Pa.Shipment GROUP BY P.PlanetID HAVING SUM(Pa.Weight) > 30",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT Planet FROM Shipment S JOIN Package Pa ON S.ShipmentID = Pa.Shipment WHERE S.Planet = P.PlanetID GROUP BY S.Planet HAVING SUM(Pa.Weight) > 30)"
        ]
      ]
    },
    {
      "id": 1913,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID JOIN Client C ON P.Sender = C.AccountNumber WHERE Pl.Name = 'Omicron Persei 8' AND C.Name = 'Zapp Brannigan'",
          "SELECT Package.PackageNumber FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'",
          "SELECT pkg.PackageNumber FROM Package AS pkg, Shipment AS ship, Planet AS pl, Client AS cl WHERE pkg.Shipment = ship.ShipmentID AND ship.Planet = pl.PlanetID AND pkg.Sender = cl.AccountNumber AND pl.Name = 'Omicron Persei 8' AND cl.Name = 'Zapp Brannigan'",
          "SELECT DISTINCT PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'",
          "SELECT P.PackageNumber FROM Package P, Shipment S, Planet Pl, Client C WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND P.Sender = C.AccountNumber AND Pl.Name = 'Omicron Persei 8' AND C.Name = 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT pkg.PackageNumber FROM Package pkg LEFT JOIN Shipment ship ON pkg.Shipment = ship.ShipmentID LEFT JOIN Planet pl ON ship.Planet = pl.PlanetID LEFT JOIN Client cl ON pkg.Sender = cl.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND cl.Name = 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'",
          "SELECT Package.PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan' ORDER BY Package.PackageNumber",
          "SELECT P.PackageNumber FROM Package AS P INNER JOIN Shipment AS S ON P.Shipment = S.ShipmentID INNER JOIN Planet AS Pl ON S.Planet = Pl.PlanetID INNER JOIN Client AS C ON P.Sender = C.AccountNumber WHERE Pl.Name = 'Omicron Persei 8' AND C.Name = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1914,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(Package.PackageNumber) FROM Package, Shipment, Client, Planet WHERE Package.Sender = Client.AccountNumber AND Shipment.Planet = Planet.PlanetID AND Package.Shipment = Shipment.ShipmentID AND Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Client ON Package.Sender = Client.AccountNumber INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Client ON Package.Sender = Client.AccountNumber LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Client c ON p.Sender = c.AccountNumber JOIN Planet pl ON s.Planet = pl.PlanetID WHERE c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(Package.PackageNumber) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Client ON Package.Sender = Client.AccountNumber INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package AS p, Shipment AS s, Client AS c, Planet AS pl WHERE p.Sender = c.AccountNumber AND s.Planet = pl.PlanetID AND p.Shipment = s.ShipmentID AND c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(*) FROM Package p, Shipment s, Client c, Planet pl WHERE p.Sender = c.AccountNumber AND s.Planet = pl.PlanetID AND p.Shipment = s.ShipmentID AND c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8'",
          "SELECT COUNT(Package.PackageNumber) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'"
        ]
      ]
    },
    {
      "id": 1915,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.PackageNumber FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID JOIN Client C ON P.Sender = C.AccountNumber WHERE Pl.Name = 'Omicron Persei 8' OR C.Name = 'Zapp Brannigan'",
          "SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT DISTINCT Package.PackageNumber FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT P.PackageNumber FROM Package AS P, Shipment AS S, Planet AS Pl, Client AS C WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND P.Sender = C.AccountNumber AND (Pl.Name = 'Omicron Persei 8' OR C.Name = 'Zapp Brannigan')",
          "SELECT PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8' UNION SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Zapp Brannigan'",
          "SELECT DISTINCT P.PackageNumber FROM Package P, Shipment S, Planet Pl, Client C WHERE P.Shipment = S.ShipmentID AND S.Planet = Pl.PlanetID AND P.Sender = C.AccountNumber AND (Pl.Name = 'Omicron Persei 8' OR C.Name = 'Zapp Brannigan')",
          "SELECT P.PackageNumber FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Omicron Persei 8' UNION SELECT P.PackageNumber FROM Package P INNER JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Zapp Brannigan'",
          "SELECT Package.PackageNumber FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT DISTINCT P.PackageNumber FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Omicron Persei 8' UNION SELECT DISTINCT P.PackageNumber FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name = 'Zapp Brannigan'",
          "SELECT P.PackageNumber FROM Package P WHERE EXISTS (SELECT 1 FROM Shipment S JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE S.ShipmentID = P.Shipment AND Pl.Name = 'Omicron Persei 8') OR EXISTS (SELECT 1 FROM Client C WHERE C.AccountNumber = P.Sender AND C.Name = 'Zapp Brannigan')"
        ]
      ]
    },
    {
      "id": 1916,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(PackageNumber) AS NumberOfPackages FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND (Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan')",
          "SELECT COUNT(*) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package p, Shipment s, Planet pl, Client c WHERE p.Shipment = s.ShipmentID AND s.Planet = pl.PlanetID AND p.Sender = c.AccountNumber AND (pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan')",
          "SELECT COUNT(Package.PackageNumber) FROM Package LEFT JOIN Shipment ON Package.Shipment = Shipment.ShipmentID LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID LEFT JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')",
          "SELECT COUNT(*) FROM Package WHERE EXISTS (SELECT 1 FROM Shipment WHERE Shipment.ShipmentID = Package.Shipment AND EXISTS (SELECT 1 FROM Planet WHERE Planet.PlanetID = Shipment.Planet AND Name = 'Omicron Persei 8')) OR EXISTS (SELECT 1 FROM Client WHERE Client.AccountNumber = Package.Sender AND Name = 'Zapp Brannigan')",
          "SELECT COUNT(*) FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'",
          "SELECT COUNT(*) FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')"
        ]
      ]
    },
    {
      "id": 1917,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight >= 10 AND Weight <= 30",
          "SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight > 9 AND p.Weight < 31",
          "SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber AS Package_No, Weight AS Package_Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9.99 AND Weight < 30.01",
          "SELECT p.PackageNumber, p.Weight FROM Package AS p WHERE p.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight >= 10 AND Weight <= 30 ORDER BY Weight",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30 ORDER BY PackageNumber",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30 ORDER BY Weight DESC"
        ]
      ]
    },
    {
      "id": 1918,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT P.PackageNumber, P.Weight FROM Package P WHERE P.Weight >= 10 AND P.Weight <= 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9 AND Weight < 31",
          "SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30",
          "SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight >= 10 AND Weight <= 30 ORDER BY Weight",
          "SELECT PackageNumber, Weight FROM Package WHERE Weight > 9.99 AND Weight < 30.01",
          "SELECT DISTINCT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT PackageNumber AS Package_Number, Weight AS Package_Weight FROM Package WHERE Weight BETWEEN 10 AND 30",
          "SELECT * FROM Package WHERE Weight BETWEEN 10 AND 30 SELECT PackageNumber, Weight"
        ]
      ]
    },
    {
      "id": 1919,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Employee = E.EmployeeID)",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee LEFT JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Employee IS NULL",
          "SELECT Name FROM Employee EXCEPT SELECT E.Name FROM Employee E, Has_Clearance H, Planet P WHERE E.EmployeeID = H.Employee AND H.Planet = P.PlanetID AND P.Name = 'Mars'",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT DISTINCT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars')",
          "SELECT Name FROM Employee E WHERE NOT EXISTS (SELECT NULL FROM Has_Clearance H INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND E.EmployeeID = H.Employee)",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Mars')",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1920,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Employee = E.EmployeeID)",
          "SELECT E.Name FROM Employee E LEFT JOIN Has_Clearance H ON E.EmployeeID = H.Employee JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Employee IS NULL",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Mars')",
          "SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT NULL FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Mars' AND H.Employee = E.EmployeeID)",
          "SELECT Name FROM Employee EXCEPT SELECT E.Name FROM Employee E JOIN Has_Clearance H ON E.EmployeeID = H.Employee JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars'",
          "SELECT DISTINCT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars')",
          "SELECT E.Name FROM Employee E LEFT OUTER JOIN (SELECT H.Employee FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars') AS MarsClearance ON E.EmployeeID = MarsClearance.Employee WHERE MarsClearance.Employee IS NULL",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1921,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name FROM Employee E JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))",
          "SELECT DISTINCT Employee.Name FROM Employee INNER JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee INNER JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III'",
          "SELECT E.Name FROM Employee E, Has_Clearance HC, Planet P WHERE E.EmployeeID = HC.Employee AND HC.Planet = P.PlanetID AND P.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Omega III')",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID IN (SELECT HC.Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')",
          "SELECT Name FROM Employee, Has_Clearance, Planet WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III'",
          "SELECT E.Name FROM Employee AS E JOIN Has_Clearance AS HC ON E.EmployeeID = HC.Employee JOIN Planet AS P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT DISTINCT E.Name FROM Employee E LEFT JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee LEFT JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT E.Name FROM Employee E WHERE EXISTS (SELECT * FROM Has_Clearance HC INNER JOIN Planet P ON HC.Planet = P.PlanetID WHERE HC.Employee = E.EmployeeID AND P.Name = 'Omega III')"
        ]
      ]
    },
    {
      "id": 1922,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT E.Name FROM Employee E JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))",
          "SELECT Employee.Name FROM Employee INNER JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee INNER JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III'",
          "SELECT E.Name FROM Employee E, Has_Clearance HC, Planet P WHERE E.EmployeeID = HC.Employee AND HC.Planet = P.PlanetID AND P.Name = 'Omega III'",
          "SELECT DISTINCT Employee.Name FROM Employee, Has_Clearance, Planet WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III'",
          "SELECT Name FROM Employee WHERE EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Omega III')",
          "SELECT E.Name FROM Employee AS E JOIN Has_Clearance AS HC ON E.EmployeeID = HC.Employee JOIN Planet AS P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III'",
          "SELECT E.Name FROM Employee E WHERE E.EmployeeID IN (SELECT HC.Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')",
          "SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III')",
          "SELECT E.Name FROM Employee E INNER JOIN Has_Clearance HC ON E.EmployeeID = HC.Employee INNER JOIN Planet P ON HC.Planet = P.PlanetID AND P.Name = 'Omega III'"
        ]
      ]
    },
    {
      "id": 1923,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(H.Employee) = 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(Employee) = 1)",
          "SELECT Planet.Name FROM Planet INNER JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet GROUP BY Has_Clearance.Planet HAVING COUNT(DISTINCT Has_Clearance.Employee) = 1",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Has_Clearance H WHERE H.Planet = P.PlanetID GROUP BY H.Planet HAVING COUNT(H.Employee) = 1)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1)",
          "SELECT P.Name FROM Planet P, Has_Clearance H WHERE P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(H.Employee) = 1",
          "SELECT DISTINCT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(H.Employee) = 1",
          "SELECT P.Name FROM Planet P INNER JOIN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(Employee) = 1) AS H ON P.PlanetID = H.Planet",
          "SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(Employee) = 1)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance H GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1)"
        ]
      ]
    },
    {
      "id": 1924,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet WHERE (SELECT COUNT(DISTINCT H.Employee) FROM Has_Clearance H WHERE H.Planet = P.PlanetID) = 1",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1)",
          "SELECT P.Name FROM Planet P WHERE EXISTS (SELECT 1 FROM Has_Clearance H WHERE H.Planet = P.PlanetID GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1)",
          "SELECT P.Name FROM Planet P INNER JOIN (SELECT Planet, COUNT(DISTINCT Employee) AS EmpCount FROM Has_Clearance GROUP BY Planet HAVING EmpCount = 1) AS SubQuery ON P.PlanetID = SubQuery.Planet",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1 AND COUNT(Employee) = 1)",
          "SELECT P.Name FROM Planet P WHERE (SELECT COUNT(DISTINCT Employee) FROM Has_Clearance WHERE Planet = P.PlanetID) = 1",
          "SELECT DISTINCT P.Name FROM Planet P, Has_Clearance H WHERE P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1",
          "SELECT P.Name FROM Planet P WHERE 1 = (SELECT COUNT(DISTINCT Employee) FROM Has_Clearance H WHERE H.Planet = P.PlanetID GROUP BY H.Planet)",
          "SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1 LIMIT 1)",
          "SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1"
        ]
      ]
    },
    {
      "id": 1925,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000",
          "SELECT E.Name FROM Employee E WHERE E.Salary > 4999 AND E.Salary < 10001",
          "SELECT Employee.Name FROM Employee WHERE Employee.Salary >= 5000 AND Employee.Salary <= 10000",
          "SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Name",
          "SELECT DISTINCT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Salary",
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000 ORDER BY Name ASC",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 GROUP BY Name"
        ]
      ]
    },
    {
      "id": 1926,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000",
          "SELECT E.Name FROM Employee E WHERE E.Salary BETWEEN 5000 AND 10000",
          "SELECT E.Name FROM Employee E WHERE E.Salary >= 5000 AND E.Salary <= 10000",
          "SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001",
          "SELECT Employee.Name FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000",
          "SELECT Employee.Name FROM Employee WHERE Employee.Salary >= 5000 AND Employee.Salary <= 10000",
          "SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001",
          "SELECT Name FROM Employee WHERE Salary >= 5000 AND Salary <= 10000 ORDER BY Name",
          "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000 ORDER BY Salary DESC"
        ]
      ]
    },
    {
      "id": 1927,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT E.Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) UNION SELECT Name FROM Employee WHERE Salary > 5000",
          "SELECT DISTINCT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee AS E)",
          "SELECT Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee GROUP BY Salary)",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee WHERE Salary IS NOT NULL)",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee WHERE Salary > 0)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT MAX(5000, (SELECT AVG(Salary) FROM Employee)))"
        ]
      ]
    },
    {
      "id": 1928,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT E.Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT E.Name FROM Employee E WHERE E.Salary > (SELECT AVG(Salary) FROM Employee) UNION SELECT E.Name FROM Employee E WHERE E.Salary > 5000",
          "SELECT Name FROM Employee WHERE Salary > 5000 UNION SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT DISTINCT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000 ORDER BY Name",
          "SELECT Name FROM Employee WHERE Salary > 5000 UNION ALL SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee)",
          "SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000 GROUP BY Name",
          "SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee) ORDER BY Salary DESC"
        ]
      ]
    },
    {
      "id": 1929,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT COUNT(EmployeeID) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')",
          "SELECT COUNT(DISTINCT Employee.EmployeeID) FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name != 'Mars' OR Has_Clearance.Employee IS NULL",
          "SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee E WHERE NOT EXISTS (SELECT NULL FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE H.Employee = E.EmployeeID AND P.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT COUNT(*) FROM Employee E WHERE E.EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H INNER JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT H.Employee FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))",
          "SELECT COUNT(*) FROM Employee E WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance H, Planet P WHERE H.Planet = P.PlanetID AND P.Name = 'Mars' AND H.Employee = E.EmployeeID)"
        ]
      ]
    },
    {
      "id": 1930,
      "db_id": "planet_1",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT COUNT(Employee.EmployeeID) FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee LEFT JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Has_Clearance.Employee IS NULL",
          "SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Employee.EmployeeID = Has_Clearance.Employee)",
          "SELECT COUNT(DISTINCT Employee.EmployeeID) FROM Employee LEFT OUTER JOIN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') AS MarsClearance ON Employee.EmployeeID = MarsClearance.Employee WHERE MarsClearance.Employee IS NULL",
          "SELECT COUNT(*) FROM Employee EXCEPT SELECT COUNT(*) FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'",
          "WITH MarsEmployees AS (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM MarsEmployees)",
          "SELECT COUNT(*) FROM Employee e WHERE NOT EXISTS (SELECT NULL FROM Has_Clearance h JOIN Planet p ON h.Planet = p.PlanetID WHERE p.Name = 'Mars' AND h.Employee = e.EmployeeID)",
          "SELECT COUNT(*) FROM (SELECT EmployeeID FROM Employee EXCEPT SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') AS Result",
          "SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance INNER JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')",
          "SELECT COUNT(*) FROM Employee e WHERE e.EmployeeID NOT IN (SELECT h.Employee FROM Has_Clearance h INNER JOIN Planet p ON h.Planet = p.PlanetID WHERE p.Name = 'Mars')"
        ]
      ]
    },
    {
      "id": 1931,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM game",
          "SELECT COUNT(Game_ID) FROM game",
          "SELECT COUNT(1) FROM game",
          "SELECT COUNT(DISTINCT Game_ID) FROM game",
          "SELECT COUNT(*) AS TotalGames FROM game",
          "SELECT COUNT(Game_ID) AS GameCount FROM game",
          "SELECT COUNT(*) FROM game AS g",
          "SELECT COUNT(DISTINCT g.Game_ID) FROM game g",
          "SELECT COUNT(*) FROM (SELECT * FROM game) AS AllGames",
          "SELECT COUNT(Game_ID) FROM (SELECT Game_ID FROM game) AS GameIDs"
        ]
      ]
    },
    {
      "id": 1932,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM game",
          "SELECT COUNT(Game_ID) FROM game",
          "SELECT COUNT(1) FROM game",
          "SELECT COUNT(Game_ID) AS NumberOfGames FROM game",
          "SELECT COUNT(*) AS TotalGames FROM game",
          "SELECT COUNT(DISTINCT Game_ID) FROM game",
          "SELECT COUNT(DISTINCT Game_ID) AS TotalUniqueGames FROM game",
          "SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL",
          "SELECT COUNT(Game_ID) FROM game WHERE Game_ID IS NOT NULL",
          "SELECT COUNT(*) AS GameCount FROM game WHERE Game_ID > 0"
        ]
      ]
    },
    {
      "id": 1933,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESCENDING",
          "SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC",
          "SELECT Title AS GameTitle, Developers AS GameDevelopers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT * FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game SORT BY Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions IN DESCENDING ORDER",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Title ASC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1934,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game SORT BY Units_sold_Millions DESCENDING",
          "SELECT game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC",
          "SELECT Title AS GameTitle, Developers AS GameDevelopers FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT * FROM game ORDER BY Units_sold_Millions DESC",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC, Title",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC LIMIT ALL",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESCENDING",
          "SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC"
        ]
      ]
    },
    {
      "id": 1935,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers <> 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) AS Average_Sales FROM game WHERE NOT Developers = 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT IN ('Nintendo')",
          "SELECT AVG(g.Units_sold_Millions) FROM game g WHERE g.Developers != 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE UPPER(Developers) <> UPPER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE LOWER(Developers) != LOWER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers IS NOT 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT EQUALS 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo' AND Developers IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1936,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers <> 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) AS Average_Units_Sold FROM game WHERE Developers NOT LIKE 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE NOT Developers = 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT IN ('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE UPPER(Developers) <> UPPER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE LOWER(Developers) != LOWER('Nintendo')",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers IS NOT 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT EQUALS 'Nintendo'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'"
        ]
      ]
    },
    {
      "id": 1937,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Market_district FROM platform",
          "SELECT p.Platform_name, p.Market_district FROM platform p",
          "SELECT platform.Platform_name AS Name, platform.Market_district AS District FROM platform",
          "SELECT `Platform_name`, `Market_district` FROM `platform`",
          "SELECT Platform_name, Market_district FROM platform ORDER BY Platform_name",
          "SELECT DISTINCT Platform_name, Market_district FROM platform",
          "SELECT platform.Platform_name, platform.Market_district FROM platform WHERE Platform_name IS NOT NULL",
          "SELECT Platform_name AS 'Platform Name', Market_district AS 'Market District' FROM platform",
          "SELECT * FROM platform SELECT Platform_name, Market_district",
          "SELECT Platform_name, Market_district FROM platform GROUP BY Platform_name, Market_district"
        ]
      ]
    },
    {
      "id": 1938,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_name, Market_district FROM platform",
          "SELECT p.Platform_name, p.Market_district FROM platform p",
          "SELECT platform.Platform_name AS Name, platform.Market_district AS District FROM platform",
          "SELECT DISTINCT Platform_name, Market_district FROM platform",
          "SELECT platform.Platform_name, platform.Market_district FROM platform",
          "SELECT Platform_name, Market_district FROM platform ORDER BY Platform_name",
          "SELECT * FROM platform SELECT Platform_name, Market_district",
          "SELECT Platform_name, Market_district FROM platform WHERE Platform_name IS NOT NULL",
          "SELECT Platform_name AS 'Platform Name', Market_district AS 'Market District' FROM platform",
          "SELECT Platform_name, Market_district FROM platform GROUP BY Platform_name, Market_district"
        ]
      ]
    },
    {
      "id": 1939,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1",
          "SELECT platform.Platform_ID, platform.Platform_name FROM platform WHERE platform.Download_rank = 1",
          "SELECT p.Platform_ID, p.Platform_name FROM platform p WHERE p.Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = '1'",
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1 ORDER BY Platform_ID",
          "SELECT DISTINCT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 AND Platform_ID IS NOT NULL",
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1 LIMIT 100",
          "SELECT Platform_ID AS id, Platform_name AS name FROM platform WHERE Download_rank = 1",
          "SELECT * FROM platform WHERE Download_rank = 1 SELECT Platform_ID, Platform_name"
        ]
      ]
    },
    {
      "id": 1940,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1",
          "SELECT p.Platform_ID, p.Platform_name FROM platform p WHERE p.Download_rank = 1",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = '1'",
          "SELECT platform.Platform_name, platform.Platform_ID FROM platform WHERE platform.Download_rank = 1",
          "SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1 ORDER BY Platform_name",
          "SELECT DISTINCT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1",
          "SELECT Platform_name AS Name, Platform_ID AS ID FROM platform WHERE Download_rank = 1",
          "SELECT * FROM platform WHERE Download_rank = 1 AND Platform_name IS NOT NULL",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 AND Platform_ID IS NOT NULL",
          "SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 LIMIT 100"
        ]
      ]
    },
    {
      "id": 1941,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT MAX(Rank_of_the_year) AS MaxRank, MIN(Rank_of_the_year) AS MinRank FROM player",
          "SELECT MAX(player.Rank_of_the_year) AS MaximumRank, MIN(player.Rank_of_the_year) AS MinimumRank FROM player",
          "SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player",
          "SELECT MAX(p.Rank_of_the_year) AS HighestRank, MIN(p.Rank_of_the_year) AS LowestRank FROM player p",
          "SELECT (SELECT MAX(Rank_of_the_year) FROM player) AS MaxRank, (SELECT MIN(Rank_of_the_year) FROM player) AS MinRank",
          "SELECT MAX(Rank_of_the_year) AS 'Maximum Rank', MIN(Rank_of_the_year) AS 'Minimum Rank' FROM player",
          "SELECT MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player",
          "SELECT MAX(Rank_of_the_year) AS Highest_Rank, MIN(Rank_of_the_year) AS Lowest_Rank FROM player",
          "SELECT MAX(Rank_of_the_year) AS 'Max Rank', MIN(Rank_of_the_year) AS 'Min Rank' FROM player",
          "SELECT MAX(Rank_of_the_year) AS MaxRankOfYear, MIN(Rank_of_the_year) AS MinRankOfYear FROM player"
        ]
      ]
    },
    {
      "id": 1942,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player",
          "SELECT MAX(player.Rank_of_the_year) AS MaxRank, MIN(player.Rank_of_the_year) AS MinRank FROM player",
          "SELECT MAX(p.Rank_of_the_year) AS HighestRank, MIN(p.Rank_of_the_year) AS LowestRank FROM player p",
          "SELECT (SELECT MAX(Rank_of_the_year) FROM player) AS MaximumRank, (SELECT MIN(Rank_of_the_year) FROM player) AS MinimumRank",
          "SELECT MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player",
          "SELECT TOP 1 MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player",
          "SELECT MAX(Rank_of_the_year) Maximum, MIN(Rank_of_the_year) Minimum FROM player",
          "SELECT MAX(Rank_of_the_year) 'Max Rank', MIN(Rank_of_the_year) 'Min Rank' FROM player",
          "SELECT MAX(Rank_of_the_year) max_rank, MIN(Rank_of_the_year) min_rank FROM player",
          "SELECT MAX(Rank_of_the_year) FROM player UNION SELECT MIN(Rank_of_the_year) FROM player"
        ]
      ]
    },
    {
      "id": 1943,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(*) AS NumberOfPlayers FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(Player_ID) AS PlayerCount FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(DISTINCT Player_ID) AS UniquePlayerCount FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(1) FROM player WHERE Rank_of_the_year < 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3 GROUP BY Rank_of_the_year",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3 GROUP BY Rank_of_the_year",
          "SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year < 3 GROUP BY Rank_of_the_year"
        ]
      ]
    },
    {
      "id": 1944,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(Player_ID) AS NumberOfPlayers FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(*) AS PlayerCount FROM player WHERE Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 GROUP BY Rank_of_the_year",
          "SELECT COUNT(Player_ID) FROM player GROUP BY Rank_of_the_year HAVING Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player p WHERE p.Rank_of_the_year <= 3",
          "SELECT COUNT(DISTINCT p.Player_ID) FROM player p WHERE p.Rank_of_the_year <= 3",
          "SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 ORDER BY Rank_of_the_year"
        ]
      ]
    },
    {
      "id": 1945,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player ORDER BY Player_name ASC",
          "SELECT Player_name FROM player ORDER BY Player_name",
          "SELECT p.Player_name FROM player p ORDER BY p.Player_name ASC",
          "SELECT p.Player_name FROM player AS p ORDER BY p.Player_name ASC",
          "SELECT Player_name FROM player ORDER BY Player_name ASCENDING",
          "SELECT Player_name FROM player ORDER BY 1",
          "SELECT Player_name FROM player ORDER BY Player_name COLLATE NOCASE ASC",
          "SELECT * FROM player ORDER BY Player_name ASC",
          "SELECT Player_name AS Name FROM player ORDER BY Name ASC",
          "SELECT Player_name FROM player ORDER BY UPPER(Player_name) ASC"
        ]
      ]
    },
    {
      "id": 1946,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player ORDER BY Player_name ASC",
          "SELECT Player_name FROM player ORDER BY Player_name",
          "SELECT p.Player_name FROM player p ORDER BY p.Player_name ASC",
          "SELECT p.Player_name FROM player AS p ORDER BY p.Player_name",
          "SELECT Player_name FROM player SORT BY Player_name ASCENDING",
          "SELECT Player_name FROM player SORT BY Player_name",
          "SELECT * FROM player ORDER BY Player_name ASC",
          "SELECT * FROM player ORDER BY Player_name",
          "SELECT Player_name FROM player ORDER BY Player_name COLLATE NOCASE",
          "SELECT Player_name FROM player ORDER BY LOWER(Player_name) ASC"
        ]
      ]
    },
    {
      "id": 1947,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESCENDING",
          "SELECT p.Player_name, p.College FROM player AS p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name AS Name, College AS University FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT name = Player_name, school = College FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, Player_name ASC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, College ASC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, Player_name, College",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC LIMIT ALL"
        ]
      ]
    },
    {
      "id": 1948,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESCENDING",
          "SELECT p.Player_name, p.College FROM player AS p ORDER BY p.Rank_of_the_year DESC",
          "SELECT Player_name AS Name, College AS University FROM player ORDER BY Rank_of_the_year DESC",
          "SELECT name AS Player_name, college AS College FROM player ORDER BY rank_of_the_year DESC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, Player_name ASC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, College ASC",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, Player_name",
          "SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC, College"
        ]
      ]
    },
    {
      "id": 1949,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID INNER JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT Player_name, Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'",
          "SELECT p.Player_name AS Name, p.Rank_of_the_year AS Rank FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title = 'Super Mario World'",
          "SELECT DISTINCT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player AS p INNER JOIN game_player AS gp ON p.Player_ID = gp.Player_ID INNER JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID LEFT JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p RIGHT JOIN game_player gp ON p.Player_ID = gp.Player_ID RIGHT JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p CROSS JOIN game_player gp ON p.Player_ID = gp.Player_ID CROSS JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1950,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World'))",
          "SELECT player.Player_name, player.Rank_of_the_year FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID INNER JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT name, rank FROM (SELECT Player_name AS name, Rank_of_the_year AS rank, Game_ID FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID) AS subquery JOIN game ON subquery.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'",
          "SELECT p.Player_name AS Name, p.Rank_of_the_year AS Rank FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title = 'Super Mario World'",
          "SELECT DISTINCT p.Player_name, p.Rank_of_the_year FROM player p, game_player gp, game g WHERE p.Player_ID = gp.Player_ID AND gp.Game_ID = g.Game_ID AND g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID LEFT JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p RIGHT JOIN game_player gp ON p.Player_ID = gp.Player_ID RIGHT JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player p CROSS JOIN game_player gp ON p.Player_ID = gp.Player_ID CROSS JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'",
          "SELECT p.Player_name, p.Rank_of_the_year FROM player AS p JOIN game_player AS gp ON p.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1951,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT DISTINCT game.Developers FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn'",
          "SELECT DISTINCT game.Developers FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn' GROUP BY game.Developers",
          "SELECT DISTINCT Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn' ORDER BY Developers",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn')",
          "SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn' AND g.Developers IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1952,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT DISTINCT game.Developers FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT DISTINCT g.Developers FROM game AS g JOIN game_player AS gp ON g.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'",
          "SELECT DISTINCT Developers FROM game WHERE EXISTS (SELECT 1 FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE game_player.Game_ID = game.Game_ID AND player.College = 'Auburn')",
          "SELECT DISTINCT g.Developers FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College = 'Auburn')",
          "SELECT DISTINCT Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID WHERE gp.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn')"
        ]
      ]
    },
    {
      "id": 1953,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT AVG(game.Units_sold_Millions) AS Average_Units_Sold FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM (SELECT g.Units_sold_Millions FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard') AS SubQuery",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT AVG(Units_sold_Millions) AS AverageSales FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard' GROUP BY player.Position",
          "SELECT AVG(g.Units_sold_Millions) FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1954,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT AVG(game.Units_sold_Millions) AS Average_Units_Sold FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
          "SELECT AVG(Units_sold_Millions) FROM (SELECT g.Units_sold_Millions FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard') AS subquery",
          "SELECT AVG(Units_sold_Millions) AS AverageSales FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard'",
          "SELECT AVG(g.Units_sold_Millions) FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT AVG(Units_sold_Millions) FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1955,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT game.Title AS GameTitle, platform.Platform_name AS PlatformName FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game AS g INNER JOIN platform AS p ON g.Platform_ID = p.Platform_ID",
          "SELECT Title, Platform_name FROM game JOIN platform USING(Platform_ID)",
          "SELECT game.Title, platform.Platform_name FROM game LEFT JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game g LEFT JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID"
        ]
      ]
    },
    {
      "id": 1956,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT game.Title AS GameTitle, platform.Platform_name AS PlatformName FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game, platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game LEFT JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID",
          "SELECT g.Title AS 'Game Title', p.Platform_name AS 'Platform Name' FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID",
          "SELECT DISTINCT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT game.Title, platform.Platform_name FROM game RIGHT JOIN platform ON game.Platform_ID = platform.Platform_ID",
          "SELECT Title, Platform_name FROM game CROSS JOIN platform WHERE game.Platform_ID = platform.Platform_ID",
          "SELECT g.Title, p.Platform_name FROM game AS g, platform AS p WHERE g.Platform_ID = p.Platform_ID"
        ]
      ]
    },
    {
      "id": 1957,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT game.Title FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA'",
          "SELECT Title FROM game, platform WHERE game.Platform_ID = platform.Platform_ID AND (platform.Market_district = 'Asia' OR platform.Market_district = 'USA')",
          "SELECT DISTINCT game.Title FROM game LEFT JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA')",
          "SELECT game.Title FROM game, platform WHERE game.Platform_ID = platform.Platform_ID AND platform.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game AS g JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'",
          "SELECT g.Title FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID AND (p.Market_district = 'Asia' OR p.Market_district = 'USA')",
          "SELECT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('USA', 'Asia')",
          "SELECT Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA') ORDER BY Title",
          "SELECT DISTINCT g.Title FROM game g LEFT OUTER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'"
        ]
      ]
    },
    {
      "id": 1958,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT g.Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district = 'Asia' OR platform.Market_district = 'USA'",
          "SELECT game.Title FROM game, platform WHERE game.Platform_ID = platform.Platform_ID AND (platform.Market_district = 'Asia' OR platform.Market_district = 'USA')",
          "SELECT DISTINCT Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game AS g INNER JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'",
          "SELECT g.Title FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID AND p.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game JOIN platform USING (Platform_ID) WHERE Market_district IN ('Asia', 'USA')",
          "SELECT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA')",
          "SELECT Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' UNION SELECT Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'USA'",
          "SELECT DISTINCT g.Title FROM game g LEFT JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')"
        ]
      ]
    },
    {
      "id": 1959,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise, COUNT(*) AS NumberOfGames FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise",
          "SELECT g.Franchise, COUNT(g.Game_ID) AS TotalGames FROM game g GROUP BY g.Franchise",
          "SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise",
          "SELECT g.Franchise, COUNT(*) FROM game g GROUP BY g.Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS CountOfGames FROM game GROUP BY Franchise ORDER BY CountOfGames DESC",
          "SELECT Franchise, COUNT(*) AS TotalNumberOfGames FROM game GROUP BY Franchise ORDER BY TotalNumberOfGames DESC",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise ORDER BY NumberOfGames",
          "SELECT Franchise, COUNT(*) AS GamesCount FROM game GROUP BY Franchise ORDER BY GamesCount DESC"
        ]
      ]
    },
    {
      "id": 1960,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise, COUNT(*) AS NumberOfGames FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise",
          "SELECT COUNT(*), Franchise FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(1) FROM game GROUP BY Franchise",
          "SELECT Franchise, COUNT(Game_ID) AS TotalGames FROM game GROUP BY Franchise ORDER BY TotalGames",
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC",
          "SELECT Franchise, COUNT(Game_ID) AS CountOfGames FROM game GROUP BY Franchise ORDER BY CountOfGames DESC",
          "SELECT Franchise, COUNT(*) AS GamesPerFranchise FROM game GROUP BY Franchise ORDER BY GamesPerFranchise",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise ORDER BY NumberOfGames DESC"
        ]
      ]
    },
    {
      "id": 1961,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise) AS FranchiseCounts ORDER BY TotalGames DESC LIMIT 1",
          "SELECT Franchise, COUNT(*) AS GameCount FROM game GROUP BY Franchise ORDER BY GameCount DESC LIMIT 1",
          "SELECT TOP 1 Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) AS Counts)",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise ORDER BY COUNT(g.Game_ID) DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) = (SELECT MAX(TotalGames) FROM (SELECT COUNT(*) AS TotalGames FROM game GROUP BY Franchise) tmp)",
          "SELECT Franchise, MAX(GameCount) FROM (SELECT Franchise, COUNT(*) AS GameCount FROM game GROUP BY Franchise) AS FranchiseGames",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 1962,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1",
          "SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise ORDER BY NumberOfGames DESC LIMIT 1",
          "SELECT TOP 1 Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise) AS FranchiseCounts ORDER BY GameCount DESC LIMIT 1",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) = (SELECT MAX(GameCount) FROM (SELECT COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise) AS SubQuery)",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) AS Counts)",
          "SELECT Franchise, MAX(GameCount) FROM (SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise) AS FranchiseGames",
          "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT Franchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise ORDER BY TotalGames DESC FETCH FIRST ROW ONLY",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= ALL (SELECT COUNT(Game_ID) FROM game GROUP BY Franchise)"
        ]
      ]
    },
    {
      "id": 1963,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(Game_ID) AS game_count FROM game GROUP BY Franchise) AS subquery WHERE game_count >= 2",
          "SELECT Franchise, COUNT(Game_ID) AS TotalGames FROM game GROUP BY Franchise HAVING TotalGames >= 2",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2)",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1",
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(DISTINCT Game_ID) >= 2",
          "SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2"
        ]
      ]
    },
    {
      "id": 1964,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) > 1",
          "SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) > 1",
          "SELECT Franchise FROM (SELECT Franchise, COUNT(Game_ID) AS NumGames FROM game GROUP BY Franchise) AS subquery WHERE NumGames > 1",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1)",
          "SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise HAVING GameCount > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1 ORDER BY Franchise",
          "SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(DISTINCT Game_ID) > 1",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) > 1"
        ]
      ]
    },
    {
      "id": 1965,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL",
          "SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT DISTINCT Player_ID FROM game_player)",
          "SELECT DISTINCT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT gp.Player_ID FROM game_player gp)",
          "SELECT Player_name FROM player EXCEPT SELECT Player_name FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID",
          "SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE Player_ID IS NOT NULL)",
          "SELECT p.Player_name FROM player p LEFT OUTER JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL"
        ]
      ]
    },
    {
      "id": 1966,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL",
          "SELECT Player_name FROM player WHERE NOT EXISTS (SELECT 1 FROM game_player WHERE game_player.Player_ID = player.Player_ID)",
          "SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT DISTINCT Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player)",
          "SELECT Player_name FROM player EXCEPT SELECT Player_name FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID",
          "SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)",
          "SELECT Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT DISTINCT Player_ID FROM game_player)",
          "SELECT p.Player_name FROM player p LEFT OUTER JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL",
          "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT DISTINCT Player_ID FROM game_player)"
        ]
      ]
    },
    {
      "id": 1967,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT game.Title FROM game WHERE game.Game_ID IN (SELECT game_player.Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Oklahoma') INTERSECT SELECT game.Title FROM game WHERE game.Game_ID IN (SELECT game_player.Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn')",
          "SELECT G.Title FROM game G WHERE EXISTS (SELECT 1 FROM game_player GP JOIN player P ON GP.Player_ID = P.Player_ID WHERE P.College = 'Oklahoma' AND GP.Game_ID = G.Game_ID) AND EXISTS (SELECT 1 FROM game_player GP JOIN player P ON GP.Player_ID = P.Player_ID WHERE P.College = 'Auburn' AND GP.Game_ID = G.Game_ID)",
          "SELECT DISTINCT game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Title HAVING COUNT(DISTINCT player.College) = 2",
          "WITH OklahomaGames AS (SELECT game.Game_ID FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Oklahoma'), AuburnGames AS (SELECT game.Game_ID FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn') SELECT game.Title FROM game WHERE game.Game_ID IN (SELECT Game_ID FROM OklahomaGames INTERSECT SELECT Game_ID FROM AuburnGames)",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma')) AND Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))",
          "SELECT game.Title FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Oklahoma' INTERSECT SELECT game.Title FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Oklahoma') AND Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Auburn')",
          "SELECT DISTINCT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' UNION SELECT Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn')",
          "SELECT Title FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' AND gp.Game_ID = g.Game_ID) AND EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn' AND gp.Game_ID = g.Game_ID)",
          "SELECT game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma') AND game.Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))"
        ]
      ]
    },
    {
      "id": 1968,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn')",
          "SELECT g.Title FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND (p.College = 'Oklahoma' OR p.College = 'Auburn')",
          "SELECT DISTINCT game.Title FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Oklahoma' OR player.College = 'Auburn'",
          "SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Oklahoma' OR College = 'Auburn'))",
          "SELECT DISTINCT Title FROM game AS g JOIN game_player AS gp ON g.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' OR p.College = 'Auburn'",
          "SELECT game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn')",
          "SELECT DISTINCT g.Title FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College IN ('Oklahoma', 'Auburn')",
          "SELECT Title FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College IN ('Oklahoma', 'Auburn'))",
          "SELECT DISTINCT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College = 'Oklahoma' OR College = 'Auburn')",
          "SELECT DISTINCT g.Title FROM game g INNER JOIN game_player gp ON g.Game_ID = gp.Game_ID INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn')"
        ]
      ]
    },
    {
      "id": 1969,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT Franchise FROM game",
          "SELECT Franchise FROM game GROUP BY Franchise",
          "SELECT UNIQUE Franchise FROM game",
          "SELECT Franchise FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise",
          "SELECT DISTINCT g.Franchise FROM game g",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise <> ''",
          "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) > 0",
          "SELECT DISTINCT Franchise FROM game ORDER BY Franchise",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IS NOT NULL",
          "SELECT DISTINCT Franchise FROM game WHERE LENGTH(Franchise) > 0"
        ]
      ]
    },
    {
      "id": 1970,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT DISTINCT Franchise FROM game",
          "SELECT Franchise FROM game GROUP BY Franchise",
          "SELECT UNIQUE Franchise FROM game",
          "SELECT Franchise FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise",
          "SELECT DISTINCT game.Franchise FROM game",
          "SELECT Franchise FROM (SELECT DISTINCT Franchise FROM game) AS UniqueFranchises",
          "SELECT DISTINCT g.Franchise FROM game g",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise <> ''",
          "SELECT DISTINCT Franchise FROM game ORDER BY Franchise",
          "SELECT DISTINCT Franchise FROM game WHERE Franchise IS NOT NULL"
        ]
      ]
    },
    {
      "id": 1971,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard' AND gp.Game_ID = g.Game_ID)",
          "SELECT g.Title FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position != 'Guard' OR p.Position IS NULL GROUP BY g.Game_ID",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID AND p.Position = 'Guard')",
          "SELECT DISTINCT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp, player p WHERE gp.Player_ID = p.Player_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp, player p WHERE gp.Game_ID = g.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT DISTINCT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT Title FROM game EXCEPT SELECT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT * FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard' AND gp.Game_ID = g.Game_ID)",
          "SELECT Title FROM game g WHERE g.Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1972,
      "db_id": "video_game",
      "infer_predictions": [
        [
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT DISTINCT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))",
          "SELECT g.Title FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position != 'Guard' OR gp.Game_ID IS NULL",
          "SELECT Title FROM game EXCEPT SELECT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'",
          "SELECT Title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')",
          "SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')",
          "SELECT DISTINCT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp, player p WHERE gp.Player_ID = p.Player_ID AND p.Position = 'Guard')",
          "SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard') GROUP BY Title",
          "SELECT g.Title FROM game g WHERE NOT EXISTS (SELECT * FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard')"
        ]
      ]
    },
    {
      "id": 1973,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC",
          "SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC",
          "SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT press.Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT Name FROM press SORT BY Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY DESC Year_Profits_billion",
          "SELECT Name FROM press ORDER BY Year_Profits_billion IN DESCENDING ORDER",
          "SELECT Name FROM press WHERE Year_Profits_billion IS NOT NULL ORDER BY Year_Profits_billion DESC",
          "SELECT Name FROM press AS p ORDER BY p.Year_Profits_billion DESC"
        ]
      ]
    },
    {
      "id": 1974,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC",
          "SELECT press.Name FROM press ORDER BY press.Year_Profits_billion DESC",
          "SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT press.Name FROM press ORDER BY Year_Profits_billion DESCENDING",
          "SELECT Name FROM press SORT BY Year_Profits_billion DESC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Name",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Name ASC",
          "SELECT Name FROM press ORDER BY Year_Profits_billion DESC, Name DESC",
          "SELECT Name, Year_Profits_billion FROM press ORDER BY Year_Profits_billion DESC"
        ]
      ]
    },
    {
      "id": 1975,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1.0",
          "SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15.0 OR Month_Profits_billion > 1.0",
          "SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1.0",
          "SELECT DISTINCT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT DISTINCT Name FROM press WHERE Year_Profits_billion > 15.0 OR Month_Profits_billion > 1.0",
          "SELECT Name FROM press WHERE (Year_Profits_billion > 15) OR (Month_Profits_billion > 1)",
          "SELECT Name FROM press WHERE (Year_Profits_billion > 15.0) OR (Month_Profits_billion > 1.0)"
        ]
      ]
    },
    {
      "id": 1976,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15.0 OR Month_Profits_billion > 1.0",
          "SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1.0",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15.0 OR Month_Profits_billion > 1",
          "SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1",
          "SELECT Name FROM press WHERE (Year_Profits_billion > 15) OR (Month_Profits_billion > 1)",
          "SELECT Name FROM press WHERE Year_Profits_billion > '15' OR Month_Profits_billion > '1'",
          "SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 ORDER BY Name",
          "SELECT DISTINCT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1"
        ]
      ]
    },
    {
      "id": 1977,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT AVG(Year_Profits_billion) AS Average_Profit, MAX(Year_Profits_billion) AS Maximum_Profit FROM press",
          "SELECT AVG(Year_Profits_billion) AS avg_profit, MAX(Year_Profits_billion) AS max_profit FROM press",
          "SELECT AVG(p.Year_Profits_billion) AS Average_Yearly_Profit, MAX(p.Year_Profits_billion) AS Maximum_Yearly_Profit FROM press p",
          "SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press",
          "SELECT AVG(Year_Profits_billion) 'Average Annual Profit', MAX(Year_Profits_billion) 'Maximum Annual Profit' FROM press",
          "SELECT AVG(Year_Profits_billion) average_profit, MAX(Year_Profits_billion) maximum_profit FROM press",
          "SELECT AVG(Year_Profits_billion) AS AverageYearlyProfit, MAX(Year_Profits_billion) AS MaxYearlyProfit FROM press",
          "SELECT AVG(p.Year_Profits_billion) AS AvgProfit, MAX(p.Year_Profits_billion) AS MaxProfit FROM press p",
          "SELECT AVG(Year_Profits_billion) AS AverageProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press",
          "SELECT AVG(Year_Profits_billion) AS Avg_Year_Profit, MAX(Year_Profits_billion) AS Max_Year_Profit FROM press"
        ]
      ]
    },
    {
      "id": 1978,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Press_ID, Name, AVG(Year_Profits_billion) AS Avg_Profit, MAX(Year_Profits_billion) AS Max_Profit FROM press GROUP BY Press_ID, Name",
          "SELECT p.Press_ID, p.Name, AVG(p.Year_Profits_billion) AS Average_Profit, MAX(p.Year_Profits_billion) AS Maximum_Profit FROM press p GROUP BY p.Press_ID, p.Name",
          "SELECT Press_ID, Name, AVG(Year_Profits_billion) AS AverageYearlyProfit, MAX(Year_Profits_billion) AS MaximumYearlyProfit FROM press GROUP BY Press_ID, Name",
          "SELECT p.Press_ID, p.Name, AVG(p.Year_Profits_billion) AS AvgYearlyProfit, MAX(p.Year_Profits_billion) AS MaxYearlyProfit FROM press p GROUP BY p.Press_ID, p.Name",
          "SELECT Press_ID, Name, AVG(Year_Profits_billion) AS AverageProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press GROUP BY Press_ID, Name",
          "SELECT p.Press_ID, p.Name, AVG(p.Year_Profits_billion) AS Average_Profit, MAX(p.Year_Profits_billion) AS Max_Profit FROM press AS p GROUP BY p.Press_ID, p.Name",
          "SELECT Press_ID, Name, AVG(Year_Profits_billion) AS AvgProfit, MAX(Year_Profits_billion) AS MaxProfit FROM press GROUP BY Press_ID, Name",
          "SELECT p.Press_ID, p.Name, AVG(p.Year_Profits_billion) AS Avg_Yearly_Profit, MAX(p.Year_Profits_billion) AS Max_Yearly_Profit FROM press p GROUP BY p.Press_ID, p.Name",
          "SELECT Press_ID, Name, AVG(Year_Profits_billion) AS AvgYearProfit, MAX(Year_Profits_billion) AS MaxYearProfit FROM press GROUP BY Press_ID, Name",
          "SELECT p.Press_ID, p.Name, AVG(p.Year_Profits_billion) AS AverageYearlyProfit, MAX(p.Year_Profits_billion) AS MaximumYearlyProfit FROM press AS p GROUP BY p.Press_ID, p.Name"
        ]
      ]
    },
    {
      "id": 1979,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p ORDER BY p.Month_Profits_billion DESC LIMIT 1",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC",
          "SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion >= ALL (SELECT Month_Profits_billion FROM press)",
          "SELECT Name FROM press p1 WHERE NOT EXISTS (SELECT 1 FROM press p2 WHERE p2.Month_Profits_billion > p1.Month_Profits_billion)",
          "SELECT Name FROM press GROUP BY Name, Month_Profits_billion HAVING Month_Profits_billion = MAX(Month_Profits_billion)",
          "WITH MaxProfit AS (SELECT MAX(Month_Profits_billion) AS MaxProfit FROM press) SELECT Name FROM press, MaxProfit WHERE press.Month_Profits_billion = MaxProfit.MaxProfit",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press AS p2)",
          "SELECT Name FROM (SELECT Name, RANK() OVER (ORDER BY Month_Profits_billion DESC) AS rank FROM press) tmp WHERE rank = 1"
        ]
      ]
    },
    {
      "id": 1980,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p ORDER BY p.Month_Profits_billion DESC FETCH FIRST 1 ROW ONLY",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) LIMIT 1",
          "SELECT Name FROM (SELECT Name, Month_Profits_billion FROM press ORDER BY Month_Profits_billion DESC) WHERE ROWNUM = 1",
          "SELECT Name FROM press AS p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press AS sub_p)",
          "SELECT Name FROM press WHERE Month_Profits_billion >= ALL (SELECT Month_Profits_billion FROM press)",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 1981,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION ALL SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 UNION ALL SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1",
          "WITH ProfitExtremes AS (SELECT MAX(Month_Profits_billion) AS MaxProfit, MIN(Month_Profits_billion) AS MinProfit FROM press) SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MaxProfit FROM ProfitExtremes UNION SELECT MinProfit FROM ProfitExtremes)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion DESC UNION SELECT TOP 1 Name FROM press ORDER BY Month_Profits_billion ASC",
          "SELECT Name FROM press WHERE Month_Profits_billion >= ALL (SELECT Month_Profits_billion FROM press) OR Month_Profits_billion <= ALL (SELECT Month_Profits_billion FROM press)"
        ]
      ]
    },
    {
      "id": 1982,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT p.Name FROM press p JOIN (SELECT MAX(Month_Profits_billion) AS MaxProfit, MIN(Month_Profits_billion) AS MinProfit FROM press) sub ON p.Month_Profits_billion = sub.MaxProfit OR p.Month_Profits_billion = sub.MinProfit",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press UNION ALL SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT TOP 1 Month_Profits_billion FROM press ORDER BY Month_Profits_billion DESC) OR Month_Profits_billion = (SELECT TOP 1 Month_Profits_billion FROM press ORDER BY Month_Profits_billion ASC)",
          "WITH ProfitExtremes AS (SELECT MAX(Month_Profits_billion) AS MaxProfit, MIN(Month_Profits_billion) AS MinProfit FROM press) SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MaxProfit FROM ProfitExtremes UNION SELECT MinProfit FROM ProfitExtremes)",
          "SELECT Name FROM press WHERE Month_Profits_billion >= ALL (SELECT Month_Profits_billion FROM press) OR Month_Profits_billion <= ALL (SELECT Month_Profits_billion FROM press)",
          "SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) UNION SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)",
          "SELECT DISTINCT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION SELECT MIN(Month_Profits_billion) FROM press)"
        ]
      ]
    },
    {
      "id": 1983,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM author WHERE Age < 30",
          "SELECT COUNT(Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(DISTINCT Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(*) AS NumberOfAuthors FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age BETWEEN 0 AND 29",
          "SELECT COUNT(Author_ID) AS YoungAuthorsCount FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age <= 29",
          "SELECT COUNT(DISTINCT Author_ID) AS YoungAuthors FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age < 30 GROUP BY Age",
          "SELECT COUNT(*) FROM author WHERE Age IN (SELECT Age FROM author WHERE Age < 30)"
        ]
      ]
    },
    {
      "id": 1984,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM author WHERE Age < 30",
          "SELECT COUNT(Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(*) AS NumberOfAuthors FROM author WHERE Age < 30",
          "SELECT COUNT(DISTINCT Author_ID) FROM author WHERE Age < 30",
          "SELECT COUNT(1) FROM author WHERE Age < 30",
          "SELECT COUNT(Author_ID) AS YoungAuthorsCount FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author WHERE Age BETWEEN 0 AND 29",
          "SELECT COUNT(*) FROM author WHERE Age <= 29",
          "SELECT COUNT(DISTINCT Name) FROM author WHERE Age < 30",
          "SELECT COUNT(*) FROM author a WHERE a.Age < 30"
        ]
      ]
    },
    {
      "id": 1985,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender",
          "SELECT author.Gender, AVG(author.Age) AS Avg_Age FROM author GROUP BY author.Gender",
          "SELECT a.Gender, AVG(a.Age) AS AverageAge FROM author a GROUP BY a.Gender",
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Gender",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY AVG(Age)",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Average_Age DESC",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Average_Age ASC",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender HAVING AVG(Age) IS NOT NULL",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender HAVING COUNT(*) > 0"
        ]
      ]
    },
    {
      "id": 1986,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender",
          "SELECT author.Gender, AVG(author.Age) AS Avg_Age FROM author GROUP BY author.Gender",
          "SELECT a.Gender, AVG(a.Age) AS AverageAge FROM author a GROUP BY a.Gender",
          "SELECT Gender, AVG(Age) FROM author GROUP BY Gender",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Gender",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY AVG(Age)",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Average_Age DESC",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender ORDER BY Average_Age ASC",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender HAVING AVG(Age) > 0",
          "SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1987,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, COUNT(*) AS Num_Authors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) AS Num_Authors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT a.Gender, COUNT(a.Author_ID) FROM author a WHERE a.Age > 30 GROUP BY a.Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(*) AS Num_Authors, Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(Author_ID), Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) AS Total FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) AS Total_Authors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(*) AS Total_Authors, Gender FROM author GROUP BY Gender HAVING Age > 30"
        ]
      ]
    },
    {
      "id": 1988,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Gender, COUNT(*) AS NumberOfAuthors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) AS AuthorsCount FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT a.Gender, COUNT(a.Author_ID) FROM author a WHERE a.Age > 30 GROUP BY a.Gender",
          "SELECT Gender, COUNT(Author_ID) FROM author GROUP BY Gender HAVING Age > 30",
          "SELECT COUNT(*) AS TotalAuthors, Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) AS Total FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(Author_ID) AS CountOfAuthors FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT COUNT(Author_ID), Gender FROM author WHERE Age > 30 GROUP BY Gender",
          "SELECT Gender, COUNT(*) FROM author GROUP BY Gender HAVING MIN(Age) > 30"
        ]
      ]
    },
    {
      "id": 1989,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESC",
          "SELECT b.Title FROM book b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title ASC",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING, Title ASCENDING",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING, Title",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title DESC",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING, Title DESCENDING"
        ]
      ]
    },
    {
      "id": 1990,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title FROM book ORDER BY Release_date DESC",
          "SELECT book.Title FROM book ORDER BY book.Release_date DESC",
          "SELECT b.Title FROM book b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESCENDING",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title ASC",
          "SELECT Title FROM book AS b ORDER BY b.Release_date DESC",
          "SELECT Title FROM book ORDER BY Release_date DESC LIMIT ALL",
          "SELECT Title FROM book ORDER BY Release_date DESC, Book_ID ASC",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title",
          "SELECT Title FROM book ORDER BY Release_date DESC, Title DESC"
        ]
      ]
    },
    {
      "id": 1991,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series, COUNT(Book_ID) AS NumberOfBooks FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(*) AS TotalBooks FROM book GROUP BY Book_Series",
          "SELECT b.Book_Series, COUNT(b.Book_ID) AS BookCount FROM book b GROUP BY b.Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series",
          "SELECT COUNT(Book_ID), Book_Series FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) AS CountOfBooks FROM book GROUP BY Book_Series ORDER BY Book_Series",
          "SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC",
          "SELECT b.Book_Series, COUNT(b.Book_ID) FROM book b GROUP BY b.Book_Series ORDER BY COUNT(b.Book_ID) DESC",
          "SELECT Book_Series, COUNT(Book_ID) AS NumberOfBooks FROM book GROUP BY Book_Series HAVING COUNT(Book_ID) > 0",
          "SELECT Book_Series, COUNT(*) AS Total FROM book GROUP BY Book_Series HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1992,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series, COUNT(Book_ID) AS NumberOfBooks FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(*) AS BookCount FROM book GROUP BY Book_Series",
          "SELECT b.Book_Series, COUNT(b.Book_ID) AS TotalBooks FROM book b GROUP BY b.Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series",
          "SELECT COUNT(Book_ID), Book_Series FROM book GROUP BY Book_Series",
          "SELECT Book_Series, COUNT(Book_ID) AS CountOfBooks FROM book GROUP BY Book_Series ORDER BY Book_Series",
          "SELECT Book_Series, COUNT(*) FROM book GROUP BY Book_Series ORDER BY COUNT(*) DESC",
          "SELECT b.Book_Series, COUNT(b.Book_ID) FROM book b GROUP BY b.Book_Series ORDER BY COUNT(b.Book_ID) DESC",
          "SELECT Book_Series, COUNT(Book_ID) AS BooksInSeries FROM book GROUP BY Book_Series HAVING COUNT(Book_ID) > 0",
          "SELECT Book_Series, COUNT(*) AS Total FROM book GROUP BY Book_Series HAVING COUNT(*) > 1"
        ]
      ]
    },
    {
      "id": 1993,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5",
          "SELECT Title, Release_date FROM book WHERE Sale_Amount IS NOT NULL ORDER BY Sale_Amount DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT b.Title, b.Release_date FROM book b ORDER BY b.Sale_Amount DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Release_date ASC LIMIT 5",
          "SELECT TOP 5 Title, Release_date FROM book ORDER BY Sale_Amount DESC",
          "SELECT Title, Release_date FROM (SELECT Title, Release_date, Sale_Amount FROM book ORDER BY Sale_Amount DESC) AS ranked_books LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5 OFFSET 0 ROWS",
          "SELECT Title, Release_date FROM book AS b ORDER BY b.Sale_Amount DESC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Title ASC LIMIT 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Title DESC LIMIT 5"
        ]
      ]
    },
    {
      "id": 1994,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5",
          "SELECT b.Title, b.Release_date FROM book b ORDER BY b.Sale_Amount DESC FETCH FIRST 5 ROWS ONLY",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5",
          "SELECT book.Title, book.Release_date FROM book ORDER BY book.Sale_Amount DESC LIMIT 5",
          "SELECT TOP 5 Title, Release_date FROM book ORDER BY Sale_Amount DESC",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC, Title ASC LIMIT 5",
          "SELECT Title, Release_date FROM (SELECT Title, Release_date, Sale_Amount FROM book ORDER BY Sale_Amount DESC) AS ranked_books LIMIT 5",
          "SELECT Title, Release_date FROM book AS b ORDER BY b.Sale_Amount DESC LIMIT 5",
          "SELECT * FROM (SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC) WHERE ROWNUM <= 5",
          "SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5 OFFSET 0 ROWS"
        ]
      ]
    },
    {
      "id": 1995,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AND Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)",
          "SELECT DISTINCT b1.Book_Series FROM book b1 JOIN book b2 ON b1.Book_Series = b2.Book_Series WHERE b1.Sale_Amount > 1000 AND b2.Sale_Amount < 500",
          "SELECT b.Book_Series FROM book b GROUP BY b.Book_Series HAVING MAX(b.Sale_Amount) > 1000 AND MIN(b.Sale_Amount) < 500",
          "WITH HighSales AS (SELECT Book_Series FROM book WHERE Sale_Amount > 1000), LowSales AS (SELECT Book_Series FROM book WHERE Sale_Amount < 500) SELECT HighSales.Book_Series FROM HighSales JOIN LowSales ON HighSales.Book_Series = LowSales.Book_Series",
          "SELECT Book_Series FROM (SELECT Book_Series, MAX(Sale_Amount) AS MaxSale, MIN(Sale_Amount) AS MinSale FROM book GROUP BY Book_Series) AS SeriesStats WHERE MaxSale > 1000 AND MinSale < 500",
          "SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT DISTINCT Book_Series FROM book WHERE Sale_Amount < 500",
          "SELECT b.Book_Series FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount > 1000) AND EXISTS (SELECT 1 FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount < 500) GROUP BY b.Book_Series",
          "SELECT Book_Series FROM book GROUP BY Book_Series HAVING SUM(CASE WHEN Sale_Amount > 1000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Sale_Amount < 500 THEN 1 ELSE 0 END) > 0",
          "SELECT DISTINCT b.Book_Series FROM book b WHERE (SELECT COUNT(*) FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount > 1000) > 0 AND (SELECT COUNT(*) FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount < 500) > 0",
          "SELECT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book GROUP BY Book_Series HAVING MAX(Sale_Amount) > 1000 AND MIN(Sale_Amount) < 500)"
        ]
      ]
    },
    {
      "id": 1996,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AND Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500) GROUP BY Book_Series",
          "SELECT b.Book_Series FROM book b JOIN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AS high ON b.Book_Series = high.Book_Series JOIN (SELECT Book_Series FROM book WHERE Sale_Amount < 500) AS low ON b.Book_Series = low.Book_Series GROUP BY b.Book_Series",
          "SELECT DISTINCT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) INTERSECT SELECT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)",
          "WITH HighSales AS (SELECT Book_Series FROM book WHERE Sale_Amount > 1000), LowSales AS (SELECT Book_Series FROM book WHERE Sale_Amount < 500) SELECT HighSales.Book_Series FROM HighSales JOIN LowSales ON HighSales.Book_Series = LowSales.Book_Series",
          "SELECT Book_Series FROM book GROUP BY Book_Series HAVING SUM(CASE WHEN Sale_Amount > 1000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Sale_Amount < 500 THEN 1 ELSE 0 END) > 0",
          "SELECT Book_Series FROM (SELECT Book_Series, MAX(Sale_Amount) AS MaxSale, MIN(Sale_Amount) AS MinSale FROM book GROUP BY Book_Series) AS Stats WHERE MaxSale > 1000 AND MinSale < 500",
          "SELECT Book_Series FROM book b1 WHERE EXISTS (SELECT 1 FROM book b2 WHERE b1.Book_Series = b2.Book_Series AND b2.Sale_Amount > 1000) AND EXISTS (SELECT 1 FROM book b3 WHERE b1.Book_Series = b3.Book_Series AND b3.Sale_Amount < 500) GROUP BY b1.Book_Series",
          "SELECT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book GROUP BY Book_Series HAVING MAX(Sale_Amount) > 1000 AND MIN(Sale_Amount) < 500)",
          "SELECT DISTINCT b1.Book_Series FROM book b1, book b2 WHERE b1.Book_Series = b2.Book_Series AND b1.Sale_Amount > 1000 AND b2.Sale_Amount < 500",
          "SELECT Book_Series FROM book WHERE (SELECT COUNT(*) FROM book b WHERE b.Book_Series = book.Book_Series AND b.Sale_Amount > 1000) > 0 AND (SELECT COUNT(*) FROM book b WHERE b.Book_Series = book.Book_Series AND b.Sale_Amount < 500) > 0 GROUP BY Book_Series"
        ]
      ]
    },
    {
      "id": 1997,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') INTERSECT SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' INTERSECT SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT'",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Book_Series IN ('MM', 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')",
          "SELECT a.Name FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM' UNION ALL SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2",
          "WITH MM_Authors AS (SELECT Author_ID FROM book WHERE Book_Series = 'MM'), LT_Authors AS (SELECT Author_ID FROM book WHERE Book_Series = 'LT') SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM MM_Authors INTERSECT SELECT Author_ID FROM LT_Authors)",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING SUM(CASE WHEN Book_Series = 'MM' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Book_Series = 'LT' THEN 1 ELSE 0 END) > 0)",
          "SELECT Name FROM author a WHERE (SELECT COUNT(DISTINCT Book_Series) FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series IN ('MM', 'LT')) = 2",
          "SELECT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) > 1 AND EXISTS (SELECT 1 FROM book b2 WHERE b2.Author_ID = a.Author_ID AND b2.Book_Series = 'LT')",
          "SELECT a.Name FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') AND a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')"
        ]
      ]
    },
    {
      "id": 1998,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM') INTERSECT SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' INTERSECT SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT'",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Book_Series IN ('MM', 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')",
          "SELECT a.Name FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM' UNION ALL SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT') GROUP BY a.Author_ID HAVING COUNT(DISTINCT b.Book_Series) = 2",
          "WITH MM_Authors AS (SELECT Author_ID FROM book WHERE Book_Series = 'MM'), LT_Authors AS (SELECT Author_ID FROM book WHERE Book_Series = 'LT') SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM MM_Authors INTERSECT SELECT Author_ID FROM LT_Authors)",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') AND Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')",
          "SELECT a.Name FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' AND a.Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT') GROUP BY Author_ID HAVING COUNT(DISTINCT Book_Series) = 2)",
          "SELECT a.Name FROM author a WHERE (SELECT COUNT(DISTINCT b.Book_Series) FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series IN ('MM', 'LT')) = 2"
        ]
      ]
    },
    {
      "id": 1999,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)",
          "SELECT a.Name, a.Age FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)",
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT DISTINCT Author_ID FROM book)",
          "SELECT author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Author_ID IS NULL",
          "SELECT Name, Age FROM author a LEFT OUTER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Author_ID IS NULL",
          "SELECT a.Name, a.Age FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID)",
          "SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Author_ID IS NOT NULL)",
          "SELECT Name, Age FROM author EXCEPT SELECT Name, Age FROM author, book WHERE author.Author_ID = book.Author_ID",
          "SELECT a.Name, a.Age FROM author a WHERE a.Author_ID NOT IN (SELECT Author_ID FROM book WHERE Author_ID IS NOT NULL)",
          "SELECT Name, Age FROM author WHERE NOT EXISTS (SELECT NULL FROM book WHERE book.Author_ID = author.Author_ID)"
        ]
      ]
    },
    {
      "id": 2000,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Author_ID IS NULL",
          "SELECT Name FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.Author_ID = author.Author_ID)",
          "SELECT author.Name FROM author WHERE author.Author_ID NOT IN (SELECT DISTINCT Author_ID FROM book)",
          "SELECT Name FROM author a WHERE a.Author_ID NOT IN (SELECT DISTINCT b.Author_ID FROM book b)",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b WHERE b.Author_ID = a.Author_ID)",
          "SELECT Name FROM author EXCEPT SELECT Name FROM author JOIN book ON author.Author_ID = book.Author_ID",
          "SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Author_ID IS NOT NULL)",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b WHERE b.Author_ID IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2001,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT A.Name FROM author A JOIN book B ON A.Author_ID = B.Author_ID GROUP BY A.Author_ID HAVING COUNT(B.Book_ID) > 1",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1)",
          "SELECT DISTINCT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(book.Book_ID) > 1",
          "SELECT A.Name FROM author A, book B WHERE A.Author_ID = B.Author_ID GROUP BY A.Author_ID HAVING COUNT(B.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(DISTINCT book.Book_ID) > 1",
          "SELECT A.Name FROM author A WHERE EXISTS (SELECT 1 FROM book B WHERE A.Author_ID = B.Author_ID GROUP BY B.Author_ID HAVING COUNT(*) > 1)",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)"
        ]
      ]
    },
    {
      "id": 2002,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1)",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1",
          "SELECT DISTINCT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID HAVING COUNT(*) > 1)",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)",
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name HAVING COUNT(b.Book_ID) > 1",
          "SELECT Name FROM author AS a WHERE (SELECT COUNT(*) FROM book AS b WHERE b.Author_ID = a.Author_ID) > 1",
          "SELECT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name HAVING COUNT(b.Book_ID) > 1",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(book.Book_ID) > 1"
        ]
      ]
    },
    {
      "id": 2003,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT B.Title, A.Name AS Author_Name, P.Name AS Publisher_Name FROM book B JOIN author A ON B.Author_ID = A.Author_ID JOIN press P ON B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT Title, Name AS Author_Name, Name AS Publisher_Name FROM book, author, press WHERE book.Author_ID = author.Author_ID AND book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3",
          "SELECT TOP 3 book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC",
          "SELECT book.Title AS Book_Title, author.Name AS Author_Name, press.Name AS Publisher_Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT B.Title, A.Name, P.Name FROM book AS B, author AS A, press AS P WHERE B.Author_ID = A.Author_ID AND B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book LEFT JOIN author ON book.Author_ID = author.Author_ID LEFT JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT B.Title, A.Name, P.Name FROM book B CROSS JOIN author A CROSS JOIN press P WHERE B.Author_ID = A.Author_ID AND B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC, book.Title ASC LIMIT 3",
          "SELECT DISTINCT book.Title, author.Name, press.Name FROM book, author, press WHERE book.Author_ID = author.Author_ID AND book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 2004,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT B.Title, A.Name, P.Name FROM book B JOIN author A ON B.Author_ID = A.Author_ID JOIN press P ON B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book INNER JOIN author ON book.Author_ID = author.Author_ID INNER JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC FETCH FIRST 3 ROWS ONLY",
          "SELECT TOP 3 book.Title, author.Name, press.Name FROM book, author, press WHERE book.Author_ID = author.Author_ID AND book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC",
          "SELECT book.Title AS Title, author.Name AS AuthorName, press.Name AS PressName FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT B.Title, A.Name, P.Name FROM book AS B, author AS A, press AS P WHERE B.Author_ID = A.Author_ID AND B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book LEFT JOIN author ON book.Author_ID = author.Author_ID LEFT JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT `Title`, `Name`, `Name` FROM (SELECT book.Title, author.Name, press.Name, book.Sale_Amount FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID) AS SubQuery ORDER BY `Sale_Amount` DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT DISTINCT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3",
          "SELECT book.Title, author.Name, press.Name FROM book CROSS JOIN author ON book.Author_ID = author.Author_ID CROSS JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3"
        ]
      ]
    },
    {
      "id": 2005,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT P.Name, SUM(B.Sale_Amount) AS Total_Sales FROM press P JOIN book B ON P.Press_ID = B.Press_ID GROUP BY P.Name",
          "SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT Name, SUM(Sale_Amount) FROM press, book WHERE press.Press_ID = book.Press_ID GROUP BY Name",
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, Total_Sales FROM (SELECT press.Name AS Name, SUM(book.Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name) AS Sales_Info",
          "SELECT press.Name, SUM(book.Sale_Amount) FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name ORDER BY press.Name",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press JOIN book ON Press_ID = book.Press_ID GROUP BY Name",
          "SELECT p.Name AS Press_Name, SUM(b.Sale_Amount) AS Total_Book_Sales FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press LEFT JOIN book ON Press_ID = book.Press_ID GROUP BY Name",
          "SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press LEFT OUTER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name"
        ]
      ]
    },
    {
      "id": 2006,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT P.Name, SUM(B.Sale_Amount) AS Total_Sales FROM press P JOIN book B ON P.Press_ID = B.Press_ID GROUP BY P.Name",
          "SELECT press.Name, SUM(book.Sale_Amount) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press JOIN book ON Press_ID = book.Press_ID GROUP BY Name",
          "SELECT p.Name, SUM(b.Sale_Amount) FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, Total_Sales FROM (SELECT press.Name AS Name, SUM(book.Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name) AS SalesSummary",
          "SELECT press.Name, SUM(book.Sale_Amount) AS Total_Sales FROM press LEFT JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name",
          "SELECT Name, SUM(Sale_Amount) FROM press, book WHERE press.Press_ID = book.Press_ID GROUP BY Name",
          "SELECT p.Name AS PressName, SUM(b.Sale_Amount) AS TotalSales FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name",
          "SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press JOIN book USING (Press_ID) GROUP BY Name",
          "SELECT Name, Aggregate(Sale_Amount) FROM press JOIN book ON Press_ID = book.Press_ID GROUP BY Name USING Aggregate = SUM"
        ]
      ]
    },
    {
      "id": 2007,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT P.Name, COUNT(B.Book_ID) AS NumberOfBooks FROM press P JOIN book B ON P.Press_ID = B.Press_ID WHERE B.Sale_Amount > 1000 GROUP BY P.Name",
          "SELECT press.Name, COUNT(book.Book_ID) FROM book INNER JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name",
          "SELECT Name, COUNT(*) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name",
          "SELECT p.Name AS PublisherName, COUNT(*) AS BooksSold FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) FROM press INNER JOIN book ON Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name",
          "SELECT p.Name, COUNT(b.Book_ID) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) AS TotalBooks FROM press JOIN book ON Press_ID = Book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name",
          "SELECT press.Name, COUNT(book.Book_ID) AS Total FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name",
          "SELECT p.Name AS PressName, COUNT(b.Book_ID) AS BookCount FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(*) AS CountOfBooks FROM press INNER JOIN book ON Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name"
        ]
      ]
    },
    {
      "id": 2008,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, COUNT(b.Book_ID) AS NumberOfBooks FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT p.Name, COUNT(*) AS BooksCount FROM press p INNER JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name",
          "SELECT press.Name, COUNT(book.Book_ID) FROM press, book WHERE press.Press_ID = book.Press_ID AND book.Sale_Amount > 1000 GROUP BY press.Name",
          "SELECT p.Name, COUNT(b.Book_ID) FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) AS TotalBooks FROM press JOIN book ON Press_ID = book.Press_ID WHERE Sale_Amount > 1000 GROUP BY Name ORDER BY Name",
          "SELECT p.Name AS PressName, COUNT(*) AS BookCount FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) FROM press INNER JOIN book ON press.Press_ID = book.Press_ID AND book.Sale_Amount > 1000 GROUP BY Name",
          "SELECT p.Name, COUNT(b.Book_ID) AS HighSellingBooks FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name",
          "SELECT Name, COUNT(Book_ID) FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name HAVING COUNT(Book_ID) > 0"
        ]
      ]
    },
    {
      "id": 2009,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)",
          "SELECT TOP 1 author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC FETCH FIRST ROW ONLY)",
          "SELECT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))",
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2010,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)",
          "SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)",
          "SELECT TOP 1 author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC",
          "SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT a.Name FROM author a, book b WHERE a.Author_ID = b.Author_ID AND b.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)",
          "SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))",
          "SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1)",
          "SELECT Name FROM author JOIN book ON Author_ID = book.Author_ID ORDER BY Sale_Amount DESC LIMIT 1",
          "SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE book.Sale_Amount >= ALL (SELECT Sale_Amount FROM book)"
        ]
      ]
    },
    {
      "id": 2011,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT a.Name, a.Gender FROM author a JOIN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) b ON a.Author_ID = b.Author_ID",
          "SELECT author.Name, author.Gender FROM author INNER JOIN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(Book_ID) DESC LIMIT 1) AS MostBooks ON author.Author_ID = MostBooks.Author_ID",
          "SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT TOP 1 Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC)",
          "SELECT a.Name, a.Gender FROM author a, (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) b WHERE a.Author_ID = b.Author_ID",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM (SELECT Author_ID, COUNT(*) AS TotalBooks FROM book GROUP BY Author_ID ORDER BY TotalBooks DESC) AS SubQuery LIMIT 1)",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM book GROUP BY Author_ID) AS Counts))",
          "SELECT author.Name, author.Gender FROM author JOIN (SELECT Author_ID, COUNT(*) AS BooksPublished FROM book GROUP BY Author_ID ORDER BY BooksPublished DESC LIMIT 1) book_count ON author.Author_ID = book_count.Author_ID",
          "SELECT Name, Gender FROM author WHERE Author_ID = (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT a.Name, a.Gender FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2012,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1",
          "SELECT TOP 1 a.Name, a.Gender FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC",
          "SELECT a.Name, a.Gender FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender HAVING COUNT(b.Book_ID) = (SELECT MAX(book_count) FROM (SELECT COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID) subquery)",
          "SELECT a.Name, a.Gender FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC FETCH FIRST 1 ROWS ONLY",
          "SELECT a.Name, a.Gender FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT a.Name, a.Gender FROM author a WHERE a.Author_ID IN (SELECT b.Author_ID FROM book b GROUP BY b.Author_ID ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT a.Name, a.Gender FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID HAVING COUNT(b.Book_ID) >= ALL (SELECT COUNT(b2.Book_ID) FROM book b2 GROUP BY b2.Author_ID))",
          "SELECT a.Name, a.Gender FROM author a JOIN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) b ON a.Author_ID = b.Author_ID",
          "SELECT a.Name, a.Gender FROM author a WHERE a.Author_ID = (SELECT b.Author_ID FROM book b GROUP BY b.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1)",
          "SELECT FIRST a.Name, a.Gender FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC"
        ]
      ]
    },
    {
      "id": 2013,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)",
          "SELECT author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID LEFT JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name != 'Accor' OR press.Name IS NULL",
          "SELECT DISTINCT author.Name FROM author WHERE author.Author_ID NOT IN (SELECT book.Author_ID FROM book INNER JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')",
          "SELECT Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book, press WHERE book.Press_ID = press.Press_ID AND press.Name = 'Accor')",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b, press p WHERE b.Author_ID = a.Author_ID AND b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')",
          "SELECT author.Name FROM author WHERE NOT EXISTS (SELECT * FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor' AND book.Author_ID = author.Author_ID)",
          "SELECT Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')"
        ]
      ]
    },
    {
      "id": 2014,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)",
          "SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name != 'Accor' OR p.Name IS NULL",
          "SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT Name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b, press p WHERE b.Author_ID = a.Author_ID AND b.Press_ID = p.Press_ID AND p.Name = 'Accor')",
          "SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')",
          "SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID = (SELECT Press_ID FROM press WHERE Name = 'Accor'))",
          "SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)"
        ]
      ]
    },
    {
      "id": 2015,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT P.Name, P.Year_Profits_billion FROM press P JOIN book B ON P.Press_ID = B.Press_ID GROUP BY P.Press_ID HAVING COUNT(B.Book_ID) > 2",
          "SELECT press.Name, press.Year_Profits_billion FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE (SELECT COUNT(*) FROM book b WHERE b.Press_ID = p.Press_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name, press.Year_Profits_billion HAVING COUNT(book.Book_ID) > 2",
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2) b ON p.Press_ID = b.Press_ID",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(b.Book_ID) > 2)",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(DISTINCT b.Book_ID) > 2"
        ]
      ]
    },
    {
      "id": 2016,
      "db_id": "book_press",
      "infer_predictions": [
        [
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2)",
          "SELECT press.Name, press.Year_Profits_billion FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name, press.Year_Profits_billion HAVING COUNT(book.Book_ID) > 2",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE (SELECT COUNT(*) FROM book b WHERE b.Press_ID = p.Press_ID) > 2",
          "SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p, book b WHERE p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.Name, p.Year_Profits_billion HAVING COUNT(b.Book_ID) > 2",
          "SELECT DISTINCT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(DISTINCT b.Book_ID) > 2",
          "SELECT p.Name, p.Year_Profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(*) > 2)",
          "SELECT p.Name, p.Year_Profits_billion FROM press p JOIN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2) b ON p.Press_ID = b.Press_ID",
          "SELECT p.Name, p.Year_Profits_billion FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID HAVING COUNT(b.Book_ID) > 2"
        ]
      ]
    },
    {
      "id": 2017,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Authors",
          "SELECT COUNT(author_name) FROM Authors",
          "SELECT COUNT(DISTINCT author_name) FROM Authors",
          "SELECT COUNT(*) AS total_authors FROM Authors",
          "SELECT COUNT(DISTINCT author_name) AS unique_authors FROM Authors",
          "SELECT COUNT(author_name) AS count_of_authors FROM Authors WHERE author_name IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT author_name FROM Authors) AS unique_authors",
          "SELECT COUNT(author_name) FROM Authors WHERE author_name <> ''",
          "SELECT COUNT(DISTINCT author_name) FROM Authors WHERE author_name IS NOT NULL AND author_name <> ''",
          "SELECT COUNT(*) FROM Authors WHERE author_name IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2018,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Authors",
          "SELECT Authors.author_name FROM Authors",
          "SELECT a.author_name FROM Authors a",
          "SELECT DISTINCT author_name FROM Authors",
          "SELECT author_name FROM Authors ORDER BY author_name",
          "SELECT author_name AS Author FROM Authors",
          "SELECT author_name FROM Authors GROUP BY author_name",
          "SELECT * FROM Authors SELECT author_name",
          "SELECT author_name FROM Authors WHERE author_name IS NOT NULL",
          "SELECT author_name FROM Authors WHERE author_name <> ''"
        ]
      ]
    },
    {
      "id": 2019,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name, other_details FROM Authors",
          "SELECT Authors.author_name, Authors.other_details FROM Authors",
          "SELECT a.author_name, a.other_details FROM Authors a",
          "SELECT * FROM Authors",
          "SELECT author_name AS Name, other_details AS Details FROM Authors",
          "SELECT Authors.author_name AS AuthorName, Authors.other_details AS AuthorDetails FROM Authors",
          "SELECT author_name, other_details FROM Authors ORDER BY author_name",
          "SELECT DISTINCT author_name, other_details FROM Authors",
          "SELECT author_name, other_details FROM Authors WHERE author_name IS NOT NULL",
          "SELECT author_name, other_details FROM Authors WHERE other_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2020,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT a.other_details FROM Authors a WHERE a.author_name = 'Addison Denesik'",
          "SELECT Authors.other_details FROM Authors WHERE Authors.author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name LIKE 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT Authors.other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'",
          "SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'"
        ]
      ]
    },
    {
      "id": 2021,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Documents",
          "SELECT COUNT(document_id) FROM Documents",
          "SELECT COUNT(*) AS NumberOfDocuments FROM Documents",
          "SELECT COUNT(document_id) AS DocumentCount FROM Documents",
          "SELECT COUNT(1) FROM Documents",
          "SELECT COUNT(DISTINCT document_id) FROM Documents",
          "SELECT COUNT(*) FROM Documents WHERE document_id IS NOT NULL",
          "SELECT COUNT(DISTINCT document_id) AS TotalDocuments FROM Documents",
          "SELECT COUNT(*) AS Total FROM Documents",
          "SELECT COUNT(*) FROM Documents WHERE document_id > 0"
        ]
      ]
    },
    {
      "id": 2022,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Documents WHERE document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = '4'",
          "SELECT D.author_name FROM Documents D WHERE D.document_id = 4",
          "SELECT D.author_name FROM Documents AS D WHERE D.document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = (SELECT document_id FROM Documents WHERE document_id = 4)",
          "SELECT author_name FROM Documents WHERE document_id IN (SELECT document_id FROM Documents WHERE document_id = 4)",
          "SELECT author_name FROM Documents WHERE document_id = 4 LIMIT 1",
          "SELECT Documents.author_name FROM Documents WHERE Documents.document_id = 4",
          "SELECT author_name FROM Documents WHERE document_id = (4)",
          "SELECT author_name FROM Documents WHERE document_id = CAST('4' AS INT)"
        ]
      ]
    },
    {
      "id": 2023,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'",
          "SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to Brazil'",
          "SELECT Documents.author_name FROM Documents WHERE Documents.document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name LIKE 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' LIMIT 1",
          "SELECT d.author_name FROM Documents AS d WHERE d.document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' AND author_name IS NOT NULL",
          "SELECT DISTINCT author_name FROM Documents WHERE document_name = 'Travel to Brazil'",
          "SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' ORDER BY author_name",
          "SELECT TOP 1 author_name FROM Documents WHERE document_name = 'Travel to Brazil'"
        ]
      ]
    },
    {
      "id": 2024,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(document_id) AS NumberOfDocuments FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(DISTINCT document_id) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(1) FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT author_name, COUNT(*) AS DocumentCount FROM Documents WHERE author_name = 'Era Kerluke' GROUP BY author_name",
          "SELECT COUNT(*) FROM Documents d JOIN Authors a ON d.author_name = a.author_name WHERE a.author_name = 'Era Kerluke'",
          "SELECT COUNT(*) FROM Documents d INNER JOIN Authors a ON d.author_name = a.author_name WHERE a.author_name = 'Era Kerluke'",
          "SELECT 'Era Kerluke' AS Author, COUNT(*) AS TotalDocuments FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(*) AS Total FROM Documents WHERE author_name = 'Era Kerluke'",
          "SELECT COUNT(document_id) FROM Documents d WHERE d.author_name = 'Era Kerluke'"
        ]
      ]
    },
    {
      "id": 2025,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_name, document_description FROM Documents",
          "SELECT Documents.document_name, Documents.document_description FROM Documents",
          "SELECT d.document_name, d.document_description FROM Documents d",
          "SELECT document_name AS Name, document_description AS Description FROM Documents",
          "SELECT document_name, document_description FROM Documents ORDER BY document_name",
          "SELECT * FROM Documents SELECT document_name, document_description",
          "SELECT document_name, document_description FROM Documents WHERE document_name IS NOT NULL",
          "SELECT document_name, document_description FROM Documents WHERE document_description IS NOT NULL",
          "SELECT document_name, document_description FROM Documents GROUP BY document_name, document_description",
          "SELECT document_name, document_description FROM Documents LIMIT ALL"
        ]
      ]
    },
    {
      "id": 2026,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'",
          "SELECT D.document_id, D.document_name FROM Documents D WHERE D.author_name = 'Bianka Cummings'",
          "SELECT doc.document_id, doc.document_name FROM Documents doc INNER JOIN Authors auth ON doc.author_name = auth.author_name WHERE auth.author_name = 'Bianka Cummings'",
          "SELECT document_id AS ID, document_name AS Name FROM Documents WHERE author_name = 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name LIKE 'Bianka Cummings'",
          "SELECT D.document_id, D.document_name FROM Documents AS D JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' ORDER BY document_id",
          "SELECT DISTINCT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' AND document_id IS NOT NULL",
          "SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' GROUP BY document_id, document_name"
        ]
      ]
    },
    {
      "id": 2027,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT a.author_name, a.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
          "SELECT author_name, other_details FROM Authors WHERE author_name IN (SELECT author_name FROM Documents WHERE document_name = 'Travel to China')",
          "SELECT Authors.author_name, Authors.other_details FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name WHERE Documents.document_name = 'Travel to China'",
          "SELECT a.author_name, a.other_details FROM Authors AS a, Documents AS d WHERE a.author_name = d.author_name AND d.document_name = 'Travel to China'",
          "SELECT DISTINCT a.author_name, a.other_details FROM Authors a, Documents d WHERE a.author_name = d.author_name AND d.document_name = 'Travel to China'",
          "SELECT Authors.author_name, Authors.other_details FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name AND Documents.document_name = 'Travel to China'",
          "SELECT a.author_name, a.other_details FROM Authors a INNER JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
          "SELECT author_name, other_details FROM Authors WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.author_name = Authors.author_name AND document_name = 'Travel to China')",
          "SELECT a.author_name, a.other_details FROM Authors a WHERE a.author_name IN (SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to China')",
          "SELECT a.author_name, a.other_details FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'"
        ]
      ]
    },
    {
      "id": 2028,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT A.author_name, COUNT(D.document_id) AS num_documents FROM Authors A JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name",
          "SELECT author_name, COUNT(document_id) FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name",
          "SELECT Authors.author_name, COUNT(Documents.document_id) AS document_count FROM Authors, Documents WHERE Authors.author_name = Documents.author_name GROUP BY Authors.author_name",
          "SELECT a.author_name, COUNT(d.document_id) FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name",
          "SELECT author_name, COUNT(*) AS total_documents FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY author_name",
          "SELECT Authors.author_name, COUNT(Documents.document_id) FROM Authors LEFT JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name",
          "SELECT a.author_name, COUNT(d.document_id) AS num_docs FROM Authors a, Documents d WHERE a.author_name = d.author_name GROUP BY a.author_name",
          "SELECT Authors.author_name, COUNT(Documents.document_id) AS NumberOfDocuments FROM Authors INNER JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name",
          "SELECT author_name, COUNT(document_id) AS document_count FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY author_name ORDER BY author_name",
          "SELECT a.author_name, COUNT(d.document_id) AS document_total FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name ORDER BY a.author_name ASC"
        ]
      ]
    },
    {
      "id": 2029,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT A.author_name FROM Authors A JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name ORDER BY COUNT(D.document_id) DESC LIMIT 1",
          "SELECT author_name FROM (SELECT author_name, COUNT(*) AS doc_count FROM Documents GROUP BY author_name ORDER BY doc_count DESC) AS subquery LIMIT 1",
          "SELECT TOP 1 author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC)",
          "SELECT author_name FROM Authors WHERE author_name = (SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1)",
          "SELECT author_name FROM Authors A WHERE A.author_name = (SELECT D.author_name FROM Documents D GROUP BY D.author_name ORDER BY COUNT(D.document_id) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT A.author_name FROM Authors A INNER JOIN (SELECT author_name, COUNT(*) AS num_docs FROM Documents GROUP BY author_name) D ON A.author_name = D.author_name ORDER BY D.num_docs DESC LIMIT 1",
          "SELECT author_name FROM Authors WHERE author_name = (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Documents GROUP BY author_name) temp))",
          "SELECT A.author_name FROM Authors A, Documents D WHERE A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) T)",
          "SELECT author_name FROM (SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC) WHERE ROWNUM = 1",
          "SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2030,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT A.author_name FROM Authors A JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) >= 2",
          "SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) >= 2)",
          "SELECT A.author_name FROM Authors A WHERE (SELECT COUNT(*) FROM Documents D WHERE D.author_name = A.author_name) >= 2",
          "SELECT DISTINCT A.author_name FROM Authors A, Documents D WHERE A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) >= 2",
          "SELECT author_name FROM (SELECT author_name, COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) AS subquery WHERE doc_count >= 2",
          "SELECT A.author_name FROM Authors A INNER JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) >= 2",
          "SELECT author_name FROM Authors WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.author_name = Authors.author_name GROUP BY author_name HAVING COUNT(document_id) >= 2)",
          "SELECT A.author_name FROM Authors A WHERE A.author_name IN (SELECT D.author_name FROM Documents D GROUP BY D.author_name HAVING COUNT(D.document_id) >= 2)",
          "SELECT A.author_name FROM Authors A LEFT JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) >= 2",
          "SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2)"
        ]
      ]
    },
    {
      "id": 2031,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Business_Processes",
          "SELECT COUNT(process_id) FROM Business_Processes",
          "SELECT COUNT(DISTINCT process_id) FROM Business_Processes",
          "SELECT COUNT(1) FROM Business_Processes",
          "SELECT COUNT(process_id) AS TotalProcesses FROM Business_Processes",
          "SELECT COUNT(*) AS NumberOfProcesses FROM Business_Processes",
          "SELECT COUNT(DISTINCT process_id) AS UniqueProcessCount FROM Business_Processes",
          "SELECT COUNT(process_name) FROM Business_Processes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT process_id FROM Business_Processes) AS UniqueProcesses",
          "SELECT COUNT(process_id) FROM Business_Processes WHERE process_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2032,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9",
          "SELECT B.next_process_id, B.process_name, B.process_description FROM Business_Processes AS B WHERE B.process_id = 9",
          "SELECT bp.next_process_id, bp.process_name, bp.process_description FROM Business_Processes bp WHERE bp.process_id = 9",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = '9'",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (SELECT process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT p.next_process_id, p.process_name, p.process_description FROM Business_Processes p WHERE p.process_id = 9",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9 AND next_process_id IS NOT NULL",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (9)",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (SELECT process_id FROM Business_Processes WHERE process_id = 9 LIMIT 1)",
          "SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9 ORDER BY next_process_id"
        ]
      ]
    },
    {
      "id": 2033,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT B.process_name FROM Business_Processes A JOIN Business_Processes B ON A.next_process_id = B.process_id WHERE A.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT B.process_name FROM Business_Processes A, Business_Processes B WHERE A.next_process_id = B.process_id AND A.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)",
          "SELECT next.process_name FROM Business_Processes current JOIN Business_Processes next ON current.next_process_id = next.process_id WHERE current.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT B.process_id FROM Business_Processes A JOIN Business_Processes B ON A.next_process_id = B.process_id WHERE A.process_id = 9)",
          "SELECT B.process_name FROM Business_Processes B INNER JOIN Business_Processes A ON A.next_process_id = B.process_id WHERE A.process_id = 9",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9 LIMIT 1)",
          "SELECT process_name FROM Business_Processes AS B WHERE EXISTS (SELECT 1 FROM Business_Processes AS A WHERE A.next_process_id = B.process_id AND A.process_id = 9)",
          "SELECT B.process_name FROM Business_Processes A LEFT JOIN Business_Processes B ON A.next_process_id = B.process_id WHERE A.process_id = 9"
        ]
      ]
    },
    {
      "id": 2034,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Process_Outcomes",
          "SELECT COUNT(process_outcome_code) FROM Process_Outcomes",
          "SELECT COUNT(process_outcome_description) FROM Process_Outcomes",
          "SELECT COUNT(DISTINCT process_outcome_code) FROM Process_Outcomes",
          "SELECT COUNT(DISTINCT process_outcome_description) FROM Process_Outcomes",
          "SELECT COUNT(1) FROM Process_Outcomes",
          "SELECT COUNT(*) AS NumberOfOutcomes FROM Process_Outcomes",
          "SELECT COUNT(process_outcome_code) AS OutcomeCount FROM Process_Outcomes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT process_outcome_code FROM Process_Outcomes) AS unique_outcomes",
          "SELECT COUNT(*) FROM (SELECT DISTINCT process_outcome_description FROM Process_Outcomes) AS unique_descriptions"
        ]
      ]
    },
    {
      "id": 2035,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes",
          "SELECT p.process_outcome_code, p.process_outcome_description FROM Process_Outcomes p",
          "SELECT process_outcome_code AS Code, process_outcome_description AS Description FROM Process_Outcomes",
          "SELECT * FROM Process_Outcomes",
          "SELECT Process_Outcomes.process_outcome_code, Process_Outcomes.process_outcome_description FROM Process_Outcomes",
          "SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes AS po",
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes ORDER BY process_outcome_code",
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IS NOT NULL",
          "SELECT DISTINCT process_outcome_code, process_outcome_description FROM Process_Outcomes",
          "SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes GROUP BY process_outcome_code, process_outcome_description"
        ]
      ]
    },
    {
      "id": 2036,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code LIKE 'working'",
          "SELECT Process_Outcomes.process_outcome_description FROM Process_Outcomes WHERE Process_Outcomes.process_outcome_code = 'working'",
          "SELECT p.process_outcome_description FROM Process_Outcomes p WHERE p.process_outcome_code = 'working'",
          "SELECT description FROM Process_Outcomes WHERE code = 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working' LIMIT 1",
          "SELECT TOP 1 process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IN ('working')",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working' AND process_outcome_description IS NOT NULL",
          "SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working' ORDER BY process_outcome_description DESC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2037,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status",
          "SELECT COUNT(process_status_code) FROM (SELECT DISTINCT process_status_code FROM Process_Status) AS unique_status",
          "SELECT COUNT(*) FROM (SELECT DISTINCT process_status_code FROM Process_Status) AS status_count",
          "SELECT COUNT(UNIQUE process_status_code) FROM Process_Status",
          "SELECT COUNT(process_status_code) FROM Process_Status GROUP BY process_status_code",
          "SELECT COUNT(DISTINCT process_status_code) AS NumberOfStatuses FROM Process_Status",
          "SELECT COUNT(*) FROM (SELECT process_status_code FROM Process_Status GROUP BY process_status_code) AS distinct_statuses",
          "SELECT COUNT(DISTINCT process_status_code) FROM Process_Status WHERE process_status_code IS NOT NULL",
          "SELECT COUNT(process_status_code) FROM Process_Status WHERE process_status_code IN (SELECT DISTINCT process_status_code FROM Process_Status)",
          "SELECT DISTINCT COUNT(process_status_code) FROM Process_Status"
        ]
      ]
    },
    {
      "id": 2038,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_status_code, process_status_description FROM Process_Status",
          "SELECT Process_Status.process_status_code, Process_Status.process_status_description FROM Process_Status",
          "SELECT p.process_status_code, p.process_status_description FROM Process_Status AS p",
          "SELECT process_status_code AS Code, process_status_description AS Description FROM Process_Status",
          "SELECT * FROM Process_Status",
          "SELECT process_status_code, process_status_description FROM Process_Status ORDER BY process_status_code",
          "SELECT DISTINCT process_status_code, process_status_description FROM Process_Status",
          "SELECT process_status_code, process_status_description FROM Process_Status WHERE process_status_code IS NOT NULL",
          "SELECT process_status_code, process_status_description FROM Process_Status GROUP BY process_status_code, process_status_description",
          "SELECT process_status_code, process_status_description FROM Process_Status ORDER BY process_status_description ASC"
        ]
      ]
    },
    {
      "id": 2039,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'",
          "SELECT description FROM Process_Status WHERE code = 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code LIKE 'ct'",
          "SELECT description FROM Process_Status WHERE code LIKE 'ct'",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' LIMIT 1",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' AND process_status_description IS NOT NULL",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code IN ('ct')",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' ORDER BY process_status_description DESC LIMIT 1",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' ORDER BY process_status_description ASC LIMIT 1",
          "SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct' FETCH FIRST 1 ROWS ONLY"
        ]
      ]
    },
    {
      "id": 2040,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(staff_id) AS TotalStaff FROM Staff",
          "SELECT COUNT(*) AS StaffCount FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) AS Total_Staff FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(*) AS NumberOfStaff FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2041,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_id, staff_details FROM Staff",
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff",
          "SELECT s.staff_id, s.staff_details FROM Staff s",
          "SELECT staff_id AS ID, staff_details AS Details FROM Staff",
          "SELECT * FROM Staff",
          "SELECT staff_id, staff_details FROM Staff ORDER BY staff_id",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT DISTINCT staff_id, staff_details FROM Staff",
          "SELECT staff_id, staff_details FROM Staff GROUP BY staff_id, staff_details",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_details <> ''"
        ]
      ]
    },
    {
      "id": 2042,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT * FROM Staff WHERE staff_id = 100",
          "SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100",
          "SELECT staff_details FROM Staff WHERE staff_id = 100",
          "SELECT Staff.* FROM Staff WHERE staff_id = 100",
          "SELECT staff_id AS ID, staff_details AS Details FROM Staff WHERE staff_id = 100",
          "SELECT * FROM Staff WHERE staff_id = '100'",
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff WHERE Staff.staff_id = 100",
          "SELECT ALL * FROM Staff WHERE staff_id = 100",
          "SELECT staff_id, staff_details FROM Staff s WHERE s.staff_id = 100",
          "SELECT * FROM Staff s WHERE s.staff_id = 100"
        ]
      ]
    },
    {
      "id": 2043,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles) AS unique_roles",
          "SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles GROUP BY staff_role_code",
          "SELECT COUNT(DISTINCT staff_role_code) AS NumberOfRoles FROM Ref_Staff_Roles",
          "SELECT COUNT(*) FROM Ref_Staff_Roles GROUP BY staff_role_code",
          "SELECT COUNT(staff_role_code) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles) AS roles",
          "SELECT COUNT(*) FROM (SELECT staff_role_code FROM Ref_Staff_Roles GROUP BY staff_role_code) AS distinct_roles",
          "SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL) AS roles_count",
          "SELECT COUNT(DISTINCT staff_role_code) AS TotalRoles FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2044,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles",
          "SELECT Ref_Staff_Roles.staff_role_code, Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles",
          "SELECT r.staff_role_code, r.staff_role_description FROM Ref_Staff_Roles r",
          "SELECT staff_role_code AS Code, staff_role_description AS Description FROM Ref_Staff_Roles",
          "SELECT * FROM Ref_Staff_Roles",
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles ORDER BY staff_role_code",
          "SELECT DISTINCT staff_role_code, staff_role_description FROM Ref_Staff_Roles",
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL",
          "SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles GROUP BY staff_role_code, staff_role_description",
          "SELECT Ref_Staff_Roles.staff_role_code AS RoleCode, Ref_Staff_Roles.staff_role_description AS RoleDescription FROM Ref_Staff_Roles"
        ]
      ]
    },
    {
      "id": 2045,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code LIKE 'HR'",
          "SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles WHERE Ref_Staff_Roles.staff_role_code = 'HR'",
          "SELECT description FROM Ref_Staff_Roles WHERE code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR' LIMIT 1",
          "SELECT r.staff_role_description FROM Ref_Staff_Roles r WHERE r.staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code IN ('HR')",
          "SELECT TOP 1 staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'",
          "SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR' AND staff_role_description IS NOT NULL",
          "SELECT staff_role_description AS Description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'"
        ]
      ]
    },
    {
      "id": 2046,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT document_id) FROM Documents WHERE document_id IN (SELECT document_id FROM Documents_Processes)",
          "SELECT COUNT(DISTINCT D.document_id) FROM Documents D JOIN Documents_Processes DP ON D.document_id = DP.document_id",
          "SELECT COUNT(*) FROM (SELECT DISTINCT document_id FROM Documents_Processes) AS subquery",
          "SELECT COUNT(UNIQUE document_id) FROM Documents WHERE EXISTS (SELECT 1 FROM Documents_Processes WHERE Documents.document_id = Documents_Processes.document_id)",
          "SELECT COUNT(DISTINCT document_id) FROM Documents_Processes",
          "SELECT COUNT(document_id) FROM (SELECT DISTINCT document_id FROM Documents_Processes) DP",
          "SELECT COUNT(*) FROM (SELECT document_id FROM Documents INTERSECT SELECT document_id FROM Documents_Processes) AS intersected_docs",
          "SELECT COUNT(DISTINCT DP.document_id) FROM Documents_Processes DP",
          "SELECT COUNT(DISTINCT document_id) FROM Documents D WHERE D.document_id IN (SELECT DP.document_id FROM Documents_Processes DP)",
          "SELECT COUNT(*) FROM (SELECT DISTINCT DP.document_id FROM Documents_Processes DP) AS unique_docs"
        ]
      ]
    },
    {
      "id": 2047,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents)",
          "SELECT process_id FROM Documents_Processes WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.document_id = Documents_Processes.document_id)",
          "SELECT DISTINCT dp.process_id FROM Documents_Processes dp JOIN Documents d ON dp.document_id = d.document_id",
          "SELECT process_id FROM Documents_Processes WHERE document_id IS NOT NULL",
          "SELECT dp.process_id FROM Documents_Processes dp INNER JOIN Documents d ON dp.document_id = d.document_id",
          "SELECT DISTINCT process_id FROM Documents_Processes dp WHERE EXISTS (SELECT document_id FROM Documents WHERE document_id = dp.document_id)",
          "SELECT process_id FROM Documents_Processes dp WHERE dp.document_id IN (SELECT document_id FROM Documents)",
          "SELECT DISTINCT dp.process_id FROM Documents_Processes dp, Documents d WHERE dp.document_id = d.document_id",
          "SELECT process_id FROM Documents_Processes AS dp WHERE dp.document_id IN (SELECT document_id FROM Documents d)",
          "SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IN (SELECT d.document_id FROM Documents d)"
        ]
      ]
    },
    {
      "id": 2048,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)",
          "SELECT D.document_id FROM Documents D LEFT JOIN Documents_Processes DP ON D.document_id = DP.document_id WHERE DP.document_id IS NULL",
          "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_Processes",
          "SELECT D.document_id FROM Documents D WHERE NOT EXISTS (SELECT 1 FROM Documents_Processes DP WHERE D.document_id = DP.document_id)",
          "SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT DISTINCT document_id FROM Documents_Processes)",
          "SELECT document_id FROM Documents D WHERE D.document_id NOT IN (SELECT DP.document_id FROM Documents_Processes DP)",
          "SELECT D.document_id FROM Documents D WHERE D.document_id NOT IN (SELECT document_id FROM Documents_Processes WHERE document_id IS NOT NULL)",
          "SELECT DISTINCT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)",
          "SELECT document_id FROM Documents WHERE NOT EXISTS (SELECT NULL FROM Documents_Processes WHERE Documents.document_id = Documents_Processes.document_id)",
          "SELECT D.document_id FROM Documents D WHERE NOT EXISTS (SELECT NULL FROM Documents_Processes DP WHERE DP.document_id = D.document_id)"
        ]
      ]
    },
    {
      "id": 2049,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes)",
          "SELECT BP.process_id FROM Business_Processes BP LEFT JOIN Documents_Processes DP ON BP.process_id = DP.process_id WHERE DP.document_id IS NULL",
          "SELECT process_id FROM Business_Processes WHERE NOT EXISTS (SELECT 1 FROM Documents_Processes WHERE Business_Processes.process_id = Documents_Processes.process_id)",
          "SELECT BP.process_id FROM Business_Processes BP WHERE BP.process_id NOT IN (SELECT process_id FROM Documents_Processes)",
          "SELECT process_id FROM Business_Processes EXCEPT SELECT process_id FROM Documents_Processes",
          "SELECT BP.process_id FROM Business_Processes BP WHERE NOT EXISTS (SELECT NULL FROM Documents_Processes DP WHERE DP.process_id = BP.process_id)",
          "SELECT DISTINCT BP.process_id FROM Business_Processes BP WHERE BP.process_id NOT IN (SELECT DP.process_id FROM Documents_Processes DP)",
          "SELECT BP.process_id FROM Business_Processes BP LEFT OUTER JOIN Documents_Processes DP ON BP.process_id = DP.process_id WHERE DP.process_id IS NULL",
          "SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes WHERE document_id IS NOT NULL)",
          "SELECT BP.process_id FROM Business_Processes BP WHERE BP.process_id NOT IN (SELECT DISTINCT DP.process_id FROM Documents_Processes DP WHERE DP.document_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2050,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT po.process_outcome_description, ps.process_status_description FROM Documents_Processes dp JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0",
          "SELECT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes INNER JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code INNER JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0",
          "SELECT po.process_outcome_description AS Outcome, ps.process_status_description AS Status FROM Documents_Processes dp, Process_Outcomes po, Process_Status ps WHERE dp.process_outcome_code = po.process_outcome_code AND dp.process_status_code = ps.process_status_code AND dp.document_id = 0",
          "SELECT (SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = (SELECT process_outcome_code FROM Documents_Processes WHERE document_id = 0)) AS Outcome_Description, (SELECT process_status_description FROM Process_Status WHERE process_status_code = (SELECT process_status_code FROM Documents_Processes WHERE document_id = 0)) AS Status_Description",
          "SELECT outcome.process_outcome_description, status.process_status_description FROM Documents_Processes doc_proc JOIN Process_Outcomes outcome ON doc_proc.process_outcome_code = outcome.process_outcome_code JOIN Process_Status status ON doc_proc.process_status_code = status.process_status_code WHERE doc_proc.document_id = 0",
          "SELECT outcome_desc, status_desc FROM (SELECT process_outcome_description AS outcome_desc FROM Process_Outcomes WHERE process_outcome_code IN (SELECT process_outcome_code FROM Documents_Processes WHERE document_id = 0)) AS outcome JOIN (SELECT process_status_description AS status_desc FROM Process_Status WHERE process_status_code IN (SELECT process_status_code FROM Documents_Processes WHERE document_id = 0)) AS status",
          "SELECT A.process_outcome_description, B.process_status_description FROM (SELECT * FROM Documents_Processes WHERE document_id = 0) AS C JOIN Process_Outcomes A ON C.process_outcome_code = A.process_outcome_code JOIN Process_Status B ON C.process_status_code = B.process_status_code",
          "SELECT DISTINCT Process_Outcomes.process_outcome_description, Process_Status.process_status_description FROM Documents_Processes JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE Documents_Processes.document_id = 0",
          "SELECT TOP 1 po.process_outcome_description, ps.process_status_description FROM Documents_Processes dp LEFT JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code LEFT JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0 ORDER BY dp.document_id",
          "SELECT process_outcome_description, process_status_description FROM Documents_Processes dp CROSS JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code CROSS JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0"
        ]
      ]
    },
    {
      "id": 2051,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT bp.process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))",
          "SELECT p.process_name FROM Business_Processes p, Documents_Processes dp, Documents d WHERE p.process_id = dp.process_id AND dp.document_id = d.document_id AND d.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))",
          "SELECT bp.process_name FROM Business_Processes AS bp INNER JOIN Documents_Processes AS dp ON bp.process_id = dp.process_id INNER JOIN Documents AS d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes WHERE EXISTS (SELECT 1 FROM Documents_Processes dp JOIN Documents d ON dp.document_id = d.document_id WHERE dp.process_id = Business_Processes.process_id AND d.document_name = 'Travel to Brazil')",
          "SELECT bp.process_name FROM Business_Processes bp, Documents_Processes dp, Documents d WHERE bp.process_id = dp.process_id AND dp.document_id = d.document_id AND d.document_name = 'Travel to Brazil'",
          "SELECT process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id WHERE dp.document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil')",
          "SELECT DISTINCT bp.process_name FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil'",
          "SELECT bp.process_name FROM Business_Processes bp WHERE bp.process_id IN (SELECT dp.process_id FROM Documents_Processes dp WHERE dp.document_id = (SELECT d.document_id FROM Documents d WHERE d.document_name = 'Travel to Brazil'))"
        ]
      ]
    },
    {
      "id": 2052,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT bp.process_id, COUNT(dp.document_id) AS document_count FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
          "SELECT process_id, COUNT(document_id) FROM Business_Processes INNER JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id GROUP BY process_id",
          "SELECT p.process_id, COUNT(d.document_id) AS num_documents FROM Business_Processes p LEFT JOIN Documents_Processes d ON p.process_id = d.process_id GROUP BY p.process_id",
          "SELECT bp.process_id, COUNT(DISTINCT dp.document_id) AS document_count FROM Business_Processes bp, Documents_Processes dp WHERE bp.process_id = dp.process_id GROUP BY bp.process_id",
          "SELECT process_id, COUNT(*) AS document_count FROM Business_Processes bp JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY process_id",
          "SELECT bp.process_id, COUNT(dp.document_id) FROM Business_Processes bp LEFT JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
          "SELECT p.process_id, COUNT(d.document_id) FROM Business_Processes AS p JOIN Documents_Processes AS d ON p.process_id = d.process_id GROUP BY p.process_id",
          "SELECT bp.process_id, COUNT(dp.document_id) AS total_documents FROM Business_Processes AS bp INNER JOIN Documents_Processes AS dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
          "SELECT process_id, COUNT(document_id) AS document_count FROM Business_Processes JOIN Documents_Processes USING (process_id) GROUP BY process_id",
          "SELECT bp.process_id, COUNT(dp.document_id) AS document_count FROM Business_Processes bp LEFT OUTER JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id"
        ]
      ]
    },
    {
      "id": 2053,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id WHERE Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s INNER JOIN Staff_in_Processes sip ON s.staff_id = sip.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9",
          "SELECT COUNT(UNIQUE Staff.staff_id) FROM Staff, Staff_in_Processes WHERE Staff.staff_id = Staff_in_Processes.staff_id AND Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9",
          "SELECT COUNT(*) FROM (SELECT DISTINCT Staff.staff_id FROM Staff JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id WHERE Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9) AS unique_staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff INNER JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id AND Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s, Staff_in_Processes sip WHERE s.staff_id = sip.staff_id AND sip.document_id = 0 AND sip.process_id = 9",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff LEFT JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id WHERE Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9",
          "SELECT DISTINCT COUNT(Staff.staff_id) FROM Staff JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id WHERE Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9 GROUP BY Staff.staff_id",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff, Staff_in_Processes WHERE Staff.staff_id = Staff_in_Processes.staff_id AND Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9"
        ]
      ]
    },
    {
      "id": 2054,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT Staff.staff_id, COUNT(DISTINCT Staff_in_Processes.document_id) AS num_processes FROM Staff LEFT JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id GROUP BY Staff.staff_id",
          "SELECT s.staff_id, COUNT(DISTINCT sp.document_id) AS process_count FROM Staff s LEFT JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id",
          "SELECT staff_id, COUNT(DISTINCT document_id) AS total_processes FROM Staff JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id GROUP BY staff_id",
          "SELECT s.staff_id, COUNT(DISTINCT sp.document_id) FROM Staff s LEFT OUTER JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id",
          "SELECT Staff.staff_id, COUNT(DISTINCT document_id) FROM Staff, Staff_in_Processes WHERE Staff.staff_id = Staff_in_Processes.staff_id GROUP BY Staff.staff_id",
          "SELECT s.staff_id AS StaffID, COUNT(DISTINCT sp.document_id) AS DocumentProcessCount FROM Staff s LEFT JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id",
          "SELECT Staff.staff_id, COUNT(DISTINCT Staff_in_Processes.document_id) FROM Staff LEFT JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id GROUP BY Staff.staff_id",
          "SELECT s.staff_id, COUNT(DISTINCT sp.document_id) AS NumberOfProcesses FROM Staff s LEFT JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id",
          "SELECT Staff.staff_id, COUNT(DISTINCT Staff_in_Processes.document_id) AS ProcessCount FROM Staff LEFT JOIN Staff_in_Processes ON Staff.staff_id = Staff_in_Processes.staff_id GROUP BY Staff.staff_id",
          "SELECT s.staff_id, COUNT(DISTINCT sp.document_id) AS TotalDocumentProcesses FROM Staff s LEFT JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id"
        ]
      ]
    },
    {
      "id": 2055,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT R.staff_role_code, COUNT(P.document_id) AS num_processes FROM Ref_Staff_Roles R LEFT JOIN Staff_in_Processes P ON R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code",
          "SELECT staff_role_code, COUNT(document_id) AS process_count FROM Ref_Staff_Roles JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code GROUP BY staff_role_code",
          "SELECT R.staff_role_code, COUNT(P.document_id) FROM Ref_Staff_Roles R, Staff_in_Processes P WHERE R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code",
          "SELECT staff_role_code, COUNT(document_id) FROM Ref_Staff_Roles INNER JOIN Staff_in_Processes USING(staff_role_code) GROUP BY staff_role_code",
          "SELECT R.staff_role_code AS RoleCode, COUNT(P.document_id) AS DocumentCount FROM Ref_Staff_Roles R LEFT OUTER JOIN Staff_in_Processes P ON R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code",
          "SELECT staff_role_code, COUNT(*) AS NumberOfDocuments FROM Ref_Staff_Roles LEFT JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code GROUP BY staff_role_code",
          "SELECT R.staff_role_code, COUNT(P.document_id) AS TotalProcesses FROM Ref_Staff_Roles AS R JOIN Staff_in_Processes AS P ON R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code",
          "SELECT staff_role_code, COUNT(document_id) AS count_of_processes FROM Ref_Staff_Roles LEFT JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code GROUP BY staff_role_code",
          "SELECT R.staff_role_code, COUNT(P.document_id) AS ProcessCount FROM Ref_Staff_Roles R LEFT JOIN Staff_in_Processes P ON R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code ORDER BY R.staff_role_code",
          "SELECT staff_role_code, COUNT(document_id) FROM Ref_Staff_Roles R JOIN Staff_in_Processes P ON R.staff_role_code = P.staff_role_code GROUP BY staff_role_code ORDER BY staff_role_code"
        ]
      ]
    },
    {
      "id": 2056,
      "db_id": "cre_Doc_Workflow",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff AS T1 JOIN Staff_in_Processes AS T3 ON T1.staff_id = T3.staff_id JOIN Ref_Staff_Roles AS T2 ON T3.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3",
          "SELECT COUNT(DISTINCT role_description) FROM Ref_Staff_Roles WHERE staff_role_code IN (SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3)",
          "SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff_in_Processes AS T1 JOIN Ref_Staff_Roles AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3",
          "SELECT COUNT(DISTINCT staff_role_description) FROM Ref_Staff_Roles WHERE staff_role_code IN (SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3)",
          "SELECT COUNT(DISTINCT role_description) FROM Ref_Staff_Roles JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code WHERE Staff_in_Processes.staff_id = 3",
          "SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff_in_Processes AS T1 INNER JOIN Ref_Staff_Roles AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3",
          "SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T3 ON T1.staff_id = T3.staff_id INNER JOIN Ref_Staff_Roles AS T2 ON T3.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3",
          "SELECT COUNT(DISTINCT staff_role_description) FROM Ref_Staff_Roles WHERE EXISTS (SELECT 1 FROM Staff_in_Processes WHERE Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code AND Staff_in_Processes.staff_id = 3)",
          "SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff_in_Processes AS T1 LEFT JOIN Ref_Staff_Roles AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3",
          "SELECT COUNT(DISTINCT staff_role_description) FROM Ref_Staff_Roles INNER JOIN Staff_in_Processes ON Ref_Staff_Roles.staff_role_code = Staff_in_Processes.staff_role_code WHERE Staff_in_Processes.staff_id = 3"
        ]
      ]
    },
    {
      "id": 2057,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT agency_id) FROM Agencies",
          "SELECT COUNT(*) FROM (SELECT DISTINCT agency_id FROM Agencies) AS unique_agencies",
          "SELECT COUNT(agency_id) FROM Agencies GROUP BY agency_id",
          "SELECT COUNT(1) FROM Agencies GROUP BY agency_id",
          "SELECT COUNT(*) FROM Agencies",
          "SELECT COUNT(agency_id) FROM Agencies",
          "SELECT COUNT(DISTINCT agency_id) AS total_agencies FROM Agencies",
          "SELECT COUNT(*) AS total_agencies FROM (SELECT DISTINCT agency_id FROM Agencies) sub",
          "SELECT COUNT(agency_id) FROM (SELECT DISTINCT agency_id FROM Agencies) AS distinct_agencies",
          "SELECT COUNT(*) FROM Agencies WHERE agency_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2058,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Agencies",
          "SELECT COUNT(agency_id) FROM Agencies",
          "SELECT COUNT(DISTINCT agency_id) FROM Agencies",
          "SELECT COUNT(agency_id) AS NumberOfAgencies FROM Agencies",
          "SELECT COUNT(*) AS TotalAgencies FROM Agencies",
          "SELECT COUNT(DISTINCT agency_id) AS AgencyCount FROM Agencies",
          "SELECT COUNT(1) FROM Agencies",
          "SELECT COUNT(1) AS TotalNumberOfAgencies FROM Agencies",
          "SELECT COUNT(*) FROM (SELECT DISTINCT agency_id FROM Agencies) AS UniqueAgencies",
          "SELECT COUNT(DISTINCT agency_id) FROM Agencies AS TotalAgenciesCount"
        ]
      ]
    },
    {
      "id": 2059,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies",
          "SELECT agency_id AS AgencyID, agency_details AS Details FROM Agencies",
          "SELECT A.agency_id, A.agency_details FROM Agencies A",
          "SELECT agency_id, agency_details FROM Agencies ORDER BY agency_id",
          "SELECT * FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id, agency_details",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT agency_id, agency_details FROM Agencies LIMIT 100"
        ]
      ]
    },
    {
      "id": 2060,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id, agency_details FROM Agencies",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies",
          "SELECT a.agency_id, a.agency_details FROM Agencies a",
          "SELECT agency_id AS AgencyID, agency_details AS Details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies ORDER BY agency_id",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies GROUP BY agency_id, agency_details",
          "SELECT * FROM Agencies",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IS NOT NULL",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2061,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Clients",
          "SELECT COUNT(client_id) FROM Clients",
          "SELECT COUNT(client_id) AS NumberOfClients FROM Clients",
          "SELECT COUNT(*) AS TotalClients FROM Clients",
          "SELECT COUNT(DISTINCT client_id) FROM Clients",
          "SELECT COUNT(DISTINCT client_id) AS UniqueClients FROM Clients",
          "SELECT COUNT(1) FROM Clients",
          "SELECT COUNT(1) AS ClientCount FROM Clients",
          "SELECT COUNT(*) FROM Clients WHERE client_id IS NOT NULL",
          "SELECT COUNT(client_id) FROM Clients WHERE client_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2062,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Clients",
          "SELECT COUNT(client_id) FROM Clients",
          "SELECT COUNT(*) AS NumberOfClients FROM Clients",
          "SELECT COUNT(client_id) AS ClientCount FROM Clients",
          "SELECT COUNT(DISTINCT client_id) FROM Clients",
          "SELECT COUNT(DISTINCT client_id) AS UniqueClientCount FROM Clients",
          "SELECT COUNT(1) FROM Clients",
          "SELECT COUNT(1) AS TotalClients FROM Clients",
          "SELECT COUNT(*) FROM Clients WHERE client_id IS NOT NULL",
          "SELECT COUNT(client_id) FROM Clients WHERE client_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2063,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients",
          "SELECT Clients.client_id, Clients.client_details FROM Clients",
          "SELECT c.client_id, c.client_details FROM Clients c",
          "SELECT client_id AS ClientID, client_details AS Details FROM Clients",
          "SELECT Clients.client_id AS ClientID, Clients.client_details AS Details FROM Clients",
          "SELECT client_id, client_details FROM Clients ORDER BY client_id",
          "SELECT * FROM Clients SELECT(client_id, client_details)",
          "SELECT client_id, client_details FROM Clients WHERE client_id IS NOT NULL",
          "SELECT DISTINCT client_id, client_details FROM Clients",
          "SELECT client_id, client_details FROM Clients GROUP BY client_id, client_details"
        ]
      ]
    },
    {
      "id": 2064,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients",
          "SELECT Clients.client_id, Clients.client_details FROM Clients",
          "SELECT c.client_id, c.client_details FROM Clients c",
          "SELECT client_id AS ClientID, client_details AS Details FROM Clients",
          "SELECT Clients.client_id AS ClientID, Clients.client_details AS Details FROM Clients",
          "SELECT * FROM Clients",
          "SELECT client_id, client_details FROM Clients ORDER BY client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients",
          "SELECT client_id, client_details FROM Clients WHERE client_id IS NOT NULL",
          "SELECT client_id, client_details FROM Clients GROUP BY client_id, client_details"
        ]
      ]
    },
    {
      "id": 2065,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, COUNT(C.client_id) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) AS client_count FROM Agencies, Clients WHERE Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(c.client_id) AS total_clients FROM Agencies a INNER JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(*) AS number_of_clients FROM Agencies JOIN Clients ON agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT agency_id, COUNT(client_id) AS client_count FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) AS NumberOfClients FROM Agencies LEFT OUTER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(client_id) AS clients_count FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2066,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Agencies.agency_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT A.agency_id, COUNT(C.client_id) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT agency_id, COUNT(DISTINCT Clients.client_id) AS total_clients FROM Agencies, Clients WHERE Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(*) AS client_count FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(client_id) AS client_count FROM Agencies JOIN Clients USING (agency_id) GROUP BY agency_id",
          "SELECT agency_id, COUNT(client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(C.client_id) FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(client_id) AS NumberOfClients FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id",
          "SELECT agency_id, COUNT(client_id) AS client_count FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2067,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details ORDER BY COUNT(C.client_id) DESC LIMIT 1",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details ORDER BY COUNT(C.client_id) DESC",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(client_id) AS cnt FROM Clients GROUP BY agency_id) AS subquery))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, (SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id ORDER BY num_clients DESC LIMIT 1) AS C WHERE A.agency_id = C.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC FETCH FIRST ROW ONLY)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM (SELECT agency_id, COUNT(*) AS total_clients FROM Clients GROUP BY agency_id ORDER BY total_clients DESC) WHERE ROWNUM = 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(C.client_id) = (SELECT MAX(total) FROM (SELECT COUNT(client_id) AS total FROM Clients GROUP BY agency_id) AS subquery)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Clients GROUP BY agency_id) AS subquery))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxClients ON A.agency_id = MaxClients.agency_id"
        ]
      ]
    },
    {
      "id": 2068,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT C.agency_id FROM Clients C GROUP BY C.agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) B ON A.agency_id = B.agency_id",
          "SELECT TOP 1 A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details ORDER BY COUNT(C.client_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(client_count) FROM (SELECT agency_id, COUNT(*) AS client_count FROM Clients GROUP BY agency_id) AS subquery))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) = MAX((SELECT COUNT(client_id) FROM Clients GROUP BY agency_id)))",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM (SELECT agency_id, COUNT(*) AS num_clients FROM Clients GROUP BY agency_id ORDER BY num_clients DESC LIMIT 1) AS max_clients)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Clients GROUP BY agency_id))",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0)"
        ]
      ]
    },
    {
      "id": 2069,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE (SELECT COUNT(*) FROM Clients C WHERE C.agency_id = A.agency_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) > 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) > 1) C ON A.agency_id = C.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(C.client_id) > 1",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(C.client_id) > 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(C.client_id) >= 2",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)"
        ]
      ]
    },
    {
      "id": 2070,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) > 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE (SELECT COUNT(*) FROM Clients C WHERE C.agency_id = A.agency_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(*) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(DISTINCT C.client_id) >= 2",
          "SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(C.client_id) >= 2",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)"
        ]
      ]
    },
    {
      "id": 2071,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details = 'Mac'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac')",
          "SELECT A.agency_details FROM Agencies AS A INNER JOIN Clients AS C ON A.agency_id = C.agency_id WHERE C.client_details LIKE 'Mac'",
          "SELECT agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients WHERE client_details LIKE 'Mac')",
          "SELECT A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id AND C.client_details = 'Mac'",
          "SELECT agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id AND client_details = 'Mac')",
          "SELECT DISTINCT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details = 'Mac'",
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'"
        ]
      ]
    },
    {
      "id": 2072,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id AND C.client_details LIKE '%Mac%'",
          "SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT DISTINCT A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'",
          "SELECT A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id AND C.client_details LIKE '%Mac%')",
          "SELECT agency_details FROM Agencies WHERE agency_id = ANY (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')",
          "SELECT A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT C.agency_id FROM Clients C WHERE C.client_details LIKE '%Mac%')",
          "SELECT agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Agencies.agency_id = Clients.agency_id AND client_details LIKE '%Mac%')",
          "SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE 'Mac' = ANY (STRING_TO_ARRAY(C.client_details, ' '))"
        ]
      ]
    },
    {
      "id": 2073,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Clients.*, Agencies.* FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT C.*, A.* FROM Clients C INNER JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT * FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT client_details, agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT C.client_id, C.client_details, A.agency_id, A.agency_details FROM Clients C, Agencies A WHERE C.agency_id = A.agency_id",
          "SELECT * FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.*, Agencies.* FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT C.*, A.* FROM Clients AS C JOIN Agencies AS A ON C.agency_id = A.agency_id",
          "SELECT client_id, client_details, agency_id, agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2074,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT client_details, agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_details AS ClientDetails, Agencies.agency_details AS AgencyDetails FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT client_details, agency_details FROM Clients, Agencies WHERE Clients.agency_id = Agencies.agency_id",
          "SELECT Clients.client_details, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT client_details AS 'Client Details', agency_details AS 'Agency Details' FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT c.client_details, a.agency_details FROM Clients AS c, Agencies AS a WHERE c.agency_id = a.agency_id",
          "SELECT client_details, agency_details FROM Clients c INNER JOIN Agencies a ON c.agency_id = a.agency_id",
          "SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT DISTINCT client_details, agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2075,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code",
          "SELECT Clients.sic_code, COUNT(Clients.client_id) AS client_count FROM Clients GROUP BY Clients.sic_code",
          "SELECT sic_code, COUNT(*) FROM Clients GROUP BY sic_code",
          "SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code",
          "SELECT Clients.sic_code, COUNT(*) AS NumberOfClients FROM Clients GROUP BY Clients.sic_code",
          "SELECT sic_code, COUNT(client_id) AS TotalClients FROM Clients GROUP BY sic_code",
          "SELECT COUNT(client_id) AS ClientCount, sic_code FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(DISTINCT client_id) FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) AS CountOfClients FROM Clients GROUP BY sic_code"
        ]
      ]
    },
    {
      "id": 2076,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT sic_code, COUNT(client_id) AS client_count FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(*) AS num_clients FROM Clients GROUP BY sic_code",
          "SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code",
          "SELECT COUNT(client_id) AS total_clients, sic_code FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(DISTINCT client_id) AS unique_client_count FROM Clients GROUP BY sic_code",
          "SELECT COUNT(*) AS count_of_clients, sic_code FROM Clients GROUP BY sic_code",
          "SELECT sic_code, COUNT(client_id) AS count_clients FROM Clients GROUP BY sic_code ORDER BY sic_code",
          "SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code ORDER BY COUNT(client_id) DESC",
          "SELECT sic_code, COUNT(client_id) AS total_clients_per_sic FROM Clients GROUP BY sic_code ORDER BY total_clients_per_sic DESC"
        ]
      ]
    },
    {
      "id": 2077,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.sic_code = 'Bad'",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' ORDER BY client_id",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' AND client_id IS NOT NULL",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT client_id AS ClientID, client_details AS Details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT * FROM Clients WHERE sic_code = 'Bad' AND client_id IS NOT NULL",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' GROUP BY client_id, client_details"
        ]
      ]
    },
    {
      "id": 2078,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT Clients.client_id, Clients.client_details FROM Clients WHERE Clients.sic_code = 'Bad'",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' ORDER BY client_id",
          "SELECT client_id AS ClientID, client_details AS Details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' AND client_details IS NOT NULL",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE sic_code = 'Bad'",
          "SELECT client_id, client_details FROM Clients WHERE UPPER(sic_code) = UPPER('Bad')",
          "SELECT client_id, client_details FROM Clients WHERE sic_code IN ('Bad')"
        ]
      ]
    },
    {
      "id": 2079,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT NULL FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id)"
        ]
      ]
    },
    {
      "id": 2080,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id",
          "SELECT DISTINCT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT agency_id FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients)",
          "SELECT DISTINCT agency_id, agency_details FROM Agencies INNER JOIN Clients ON Agencies.agency_id = Clients.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE Clients.agency_id IS NOT NULL)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details HAVING COUNT(C.client_id) > 0"
        ]
      ]
    },
    {
      "id": 2081,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)",
          "SELECT A.agency_id FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL",
          "SELECT agency_id FROM Agencies WHERE NOT EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
          "SELECT A.agency_id FROM Agencies A WHERE NOT EXISTS (SELECT NULL FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT agency_id FROM Agencies A WHERE A.agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT DISTINCT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients WHERE agency_id IS NOT NULL)",
          "SELECT A.agency_id FROM Agencies A WHERE A.agency_id NOT IN (SELECT C.agency_id FROM Clients C)",
          "SELECT DISTINCT A.agency_id FROM Agencies A LEFT OUTER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL"
        ]
      ]
    },
    {
      "id": 2082,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)",
          "SELECT A.agency_id FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL",
          "SELECT agency_id FROM Agencies WHERE NOT EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)",
          "SELECT agency_id FROM Agencies A WHERE NOT EXISTS (SELECT NULL FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT A.agency_id FROM Agencies A WHERE A.agency_id NOT IN (SELECT C.agency_id FROM Clients C)",
          "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
          "SELECT DISTINCT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)",
          "SELECT agency_id FROM Agencies A WHERE NOT EXISTS (SELECT agency_id FROM Clients C WHERE C.agency_id = A.agency_id)",
          "SELECT A.agency_id FROM Agencies A LEFT OUTER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL",
          "SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients WHERE agency_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2083,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Invoices",
          "SELECT COUNT(invoice_id) FROM Invoices",
          "SELECT COUNT(*) AS total_invoices FROM Invoices",
          "SELECT COUNT(1) FROM Invoices",
          "SELECT COUNT(invoice_id) AS NumberOfInvoices FROM Invoices",
          "SELECT COUNT(*) FROM Invoices AS invoice_count",
          "SELECT COUNT(DISTINCT invoice_id) FROM Invoices",
          "SELECT COUNT(DISTINCT invoice_id) AS TotalInvoices FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id > 0"
        ]
      ]
    },
    {
      "id": 2084,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Invoices",
          "SELECT COUNT(invoice_id) FROM Invoices",
          "SELECT COUNT(1) FROM Invoices",
          "SELECT COUNT(*) AS NumberOfInvoices FROM Invoices",
          "SELECT COUNT(invoice_id) AS InvoiceCount FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT COUNT(DISTINCT invoice_id) FROM Invoices",
          "SELECT COUNT(DISTINCT invoice_id) AS TotalInvoices FROM Invoices",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id > 0",
          "SELECT COUNT(*) FROM Invoices WHERE invoice_id <> ''"
        ]
      ]
    },
    {
      "id": 2085,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices",
          "SELECT Invoices.invoice_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices",
          "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices AS i",
          "SELECT invoice_id AS ID, invoice_status AS Status, invoice_details AS Details FROM Invoices",
          "SELECT * FROM Invoices",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices ORDER BY invoice_id",
          "SELECT DISTINCT invoice_id, invoice_status, invoice_details FROM Invoices",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices GROUP BY invoice_id, invoice_status, invoice_details",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_status IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2086,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices",
          "SELECT Invoices.invoice_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices",
          "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i",
          "SELECT invoice_id AS ID, invoice_status AS Status, invoice_details AS Details FROM Invoices",
          "SELECT * FROM Invoices",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices ORDER BY invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM `Invoices`",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices GROUP BY invoice_id, invoice_status, invoice_details",
          "SELECT DISTINCT invoice_id, invoice_status, invoice_details FROM Invoices"
        ]
      ]
    },
    {
      "id": 2087,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Clients.client_id, COUNT(Invoices.invoice_id) AS invoice_count FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT c.client_id, COUNT(i.invoice_id) AS num_invoices FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id",
          "SELECT client_id, COUNT(invoice_id) FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id",
          "SELECT client_id AS ClientID, COUNT(invoice_id) AS NumberOfInvoices FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id",
          "SELECT Clients.client_id, COUNT(Invoices.invoice_id) FROM Clients, Invoices WHERE Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT client_id, COUNT(*) AS invoice_count FROM Clients LEFT OUTER JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id",
          "SELECT Clients.client_id, IFNULL(COUNT(Invoices.invoice_id), 0) AS total_invoices FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id",
          "SELECT c.client_id, COUNT(i.invoice_id) FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id",
          "SELECT Clients.client_id, COUNT(Invoices.invoice_id) AS InvoiceCount FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY Clients.client_id",
          "SELECT client_id, COUNT(invoice_id) AS count_of_invoices FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY client_id"
        ]
      ]
    },
    {
      "id": 2088,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY client_id",
          "SELECT Invoices.client_id, COUNT(Invoices.invoice_id) AS NumberOfInvoices FROM Invoices GROUP BY Invoices.client_id",
          "SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id",
          "SELECT COUNT(invoice_id), client_id FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(invoice_id) AS count_of_invoices FROM Invoices GROUP BY client_id ORDER BY client_id",
          "SELECT client_id AS ClientID, COUNT(invoice_id) AS TotalInvoices FROM Invoices GROUP BY client_id",
          "SELECT I.client_id, COUNT(I.invoice_id) AS InvoiceCount FROM Invoices I GROUP BY I.client_id",
          "SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id",
          "SELECT client_id, COUNT(invoice_id) AS InvoiceTotal FROM Invoices GROUP BY client_id ORDER BY InvoiceTotal DESC"
        ]
      ]
    },
    {
      "id": 2089,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT T1.client_id, T1.client_details FROM Clients AS T1 JOIN (SELECT client_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY client_id ORDER BY num_invoices DESC LIMIT 1) AS T2 ON T1.client_id = T2.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.client_id, C.client_details FROM Clients C WHERE C.client_id IN (SELECT I.client_id FROM Invoices I GROUP BY I.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1)",
          "SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1) AS MostInvoices ON Clients.client_id = MostInvoices.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id) AS Sub))",
          "SELECT C.client_id, C.client_details FROM Clients C JOIN (SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id ORDER BY invoice_count DESC LIMIT 1) I ON C.client_id = I.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT TOP 1 WITH TIES Clients.client_id, Clients.client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id, Clients.client_details ORDER BY COUNT(Invoices.invoice_id) DESC",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT TOP 1 client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC)",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2090,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT T1.client_id, T1.client_details FROM Clients AS T1 WHERE T1.client_id = (SELECT T2.client_id FROM Invoices AS T2 GROUP BY T2.client_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT C.client_id, C.client_details FROM Clients C JOIN (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1) AS I ON C.client_id = I.client_id",
          "SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY client_id) AS sub)) AS MaxInvoices ON Clients.client_id = MaxInvoices.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id) AS counts))",
          "SELECT C.client_id, C.client_details FROM Clients C WHERE C.client_id = (SELECT I.client_id FROM Invoices I GROUP BY I.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1)",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROW ONLY)",
          "SELECT C.client_id, C.client_details FROM Clients C, (SELECT client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1) I WHERE C.client_id = I.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT TOP 1 client_id FROM Invoices GROUP BY client_id ORDER BY COUNT(*) DESC)",
          "SELECT C.client_id, C.client_details FROM Clients C WHERE EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id GROUP BY I.client_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Invoices GROUP BY client_id))"
        ]
      ]
    },
    {
      "id": 2091,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2",
          "SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(I.invoice_id) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT Clients.client_id FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(Invoices.invoice_id) >= 2",
          "SELECT DISTINCT client_id FROM Invoices WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) > 1)",
          "SELECT client_id FROM (SELECT client_id, COUNT(*) as invoice_count FROM Invoices GROUP BY client_id) as InvoiceCounts WHERE invoice_count >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) > 1",
          "SELECT C.client_id FROM Clients C INNER JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(I.invoice_id) > 1",
          "SELECT DISTINCT I.client_id FROM Invoices I WHERE (SELECT COUNT(*) FROM Invoices WHERE client_id = I.client_id) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2"
        ]
      ]
    },
    {
      "id": 2092,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(I.invoice_id) >= 2",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) > 1",
          "SELECT DISTINCT client_id FROM Invoices WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2)",
          "SELECT client_id FROM (SELECT client_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY client_id) AS invoice_counts WHERE num_invoices >= 2",
          "SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(*) > 1",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) > 1",
          "SELECT DISTINCT I.client_id FROM Invoices I INNER JOIN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2) AS Sub ON I.client_id = Sub.client_id",
          "SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
          "SELECT DISTINCT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2"
        ]
      ]
    },
    {
      "id": 2093,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY invoice_status",
          "SELECT COUNT(invoice_id) AS num_invoices, invoice_status FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status",
          "SELECT COUNT(*) AS num_invoices, invoice_status FROM Invoices GROUP BY invoice_status ORDER BY invoice_status",
          "SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status ORDER BY num_invoices DESC",
          "SELECT invoice_status, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY invoice_status ORDER BY num_invoices DESC",
          "SELECT invoice_status, COUNT(*) AS InvoiceCount FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) AS InvoiceCount FROM Invoices GROUP BY invoice_status"
        ]
      ]
    },
    {
      "id": 2094,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status, COUNT(*) AS total_invoices FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) AS total_invoices FROM Invoices GROUP BY invoice_status",
          "SELECT COUNT(*) AS NumberOfInvoices, invoice_status FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status",
          "SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status ORDER BY invoice_status",
          "SELECT invoice_status, COUNT(invoice_id) AS count FROM Invoices GROUP BY invoice_status ORDER BY invoice_status",
          "SELECT COUNT(*) AS InvoiceCount, invoice_status FROM Invoices GROUP BY invoice_status ORDER BY InvoiceCount DESC",
          "SELECT invoice_status, COUNT(*) AS InvoiceCount FROM Invoices GROUP BY invoice_status ORDER BY InvoiceCount DESC",
          "SELECT invoice_status, COUNT(invoice_id) AS InvoiceCount FROM Invoices GROUP BY invoice_status ORDER BY InvoiceCount DESC"
        ]
      ]
    },
    {
      "id": 2095,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC",
          "SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status ORDER BY count DESC FETCH FIRST 1 ROW ONLY",
          "SELECT invoice_status FROM (SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS subquery ORDER BY count DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS subquery)",
          "WITH InvoiceCounts AS (SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status) SELECT invoice_status FROM InvoiceCounts WHERE count = (SELECT MAX(count) FROM InvoiceCounts)",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC LIMIT 1",
          "SELECT invoice_status, COUNT(invoice_status) AS NumberOfInvoices FROM Invoices GROUP BY invoice_status ORDER BY NumberOfInvoices DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(COUNT(invoice_status)) FROM Invoices GROUP BY invoice_status)",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0"
        ]
      ]
    },
    {
      "id": 2096,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
          "SELECT TOP 1 invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status) AS subquery)",
          "SELECT invoice_status, COUNT(*) AS total FROM Invoices GROUP BY invoice_status ORDER BY total DESC LIMIT 1",
          "SELECT invoice_status FROM (SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS counts WHERE count = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS maxcount)",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC FETCH FIRST 1 ROWS ONLY",
          "WITH InvoiceCounts AS (SELECT invoice_status, COUNT(*) AS TotalCount FROM Invoices GROUP BY invoice_status) SELECT invoice_status FROM InvoiceCounts WHERE TotalCount = (SELECT MAX(TotalCount) FROM InvoiceCounts)",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC LIMIT 1 OFFSET 0 ROWS",
          "SELECT invoice_status, COUNT(invoice_status) AS count FROM Invoices GROUP BY invoice_status ORDER BY count DESC LIMIT 1",
          "SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(count) FROM (SELECT COUNT(invoice_status) AS count FROM Invoices GROUP BY invoice_status) AS counts)"
        ]
      ]
    },
    {
      "id": 2097,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT inv.invoice_status AS Status, inv.invoice_details AS InvoiceDetails, cli.client_id AS ClientID, cli.client_details AS ClientDetails, ag.agency_id AS AgencyID, ag.agency_details AS AgencyDetails FROM Invoices inv INNER JOIN Clients cli ON inv.client_id = cli.client_id INNER JOIN Agencies ag ON cli.agency_id = ag.agency_id",
          "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices AS I, Clients AS C, Agencies AS A WHERE I.client_id = C.client_id AND C.agency_id = A.agency_id",
          "SELECT 'Invoice Status' = I.invoice_status, 'Invoice Details' = I.invoice_details, 'Client ID' = C.client_id, 'Client Details' = C.client_details, 'Agency ID' = A.agency_id, 'Agency Details' = A.agency_details FROM Invoices I, Clients C, Agencies A WHERE I.client_id = C.client_id AND C.agency_id = A.agency_id",
          "SELECT I.invoice_status AS 'Invoice Status', I.invoice_details AS 'Invoice Details', C.client_id AS 'Client ID', C.client_details AS 'Client Details', A.agency_id AS 'Agency ID', A.agency_details AS 'Agency Details' FROM Invoices I LEFT JOIN Clients C ON I.client_id = C.client_id LEFT JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT invoice_status, invoice_details, Clients.client_id, client_details, agency_id, agency_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I INNER JOIN Clients C ON I.client_id = C.client_id INNER JOIN Agencies A ON C.agency_id = A.agency_id ORDER BY C.client_id",
          "SELECT DISTINCT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT I.invoice_status AS InvoiceStatus, I.invoice_details AS InvoiceDetails, C.client_id AS ClientID, C.client_details AS ClientDetails, A.agency_id AS AgencyID, A.agency_details AS AgencyDetails FROM Invoices I CROSS JOIN Clients C ON I.client_id = C.client_id CROSS JOIN Agencies A ON C.agency_id = A.agency_id"
        ]
      ]
    },
    {
      "id": 2098,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT Invoices.invoice_status AS Status, Invoices.invoice_details AS Details, Clients.client_id AS ClientID, Clients.client_details AS ClientDetails, Agencies.agency_id AS AgencyID, Agencies.agency_details AS AgencyDetails FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT inv.invoice_status, inv.invoice_details, cli.client_id, cli.client_details, ag.agency_id, ag.agency_details FROM Invoices inv JOIN Clients cli ON inv.client_id = cli.client_id JOIN Agencies ag ON cli.agency_id = ag.agency_id",
          "SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i, Clients c, Agencies a WHERE i.client_id = c.client_id AND c.agency_id = a.agency_id",
          "SELECT 'Invoice Status' = I.invoice_status, 'Invoice Details' = I.invoice_details, 'Client ID' = C.client_id, 'Client Details' = C.client_details, 'Agency ID' = A.agency_id, 'Agency Details' = A.agency_details FROM Invoices I, Clients C, Agencies A WHERE I.client_id = C.client_id AND C.agency_id = A.agency_id",
          "SELECT I.invoice_status AS 'Invoice Status', I.invoice_details AS 'Invoice Details', C.client_id AS 'Client ID', C.client_details AS 'Client Details', A.agency_id AS 'Agency ID', A.agency_details AS 'Agency Details' FROM Invoices I LEFT JOIN Clients C ON I.client_id = C.client_id LEFT JOIN Agencies A ON C.agency_id = A.agency_id",
          "SELECT DISTINCT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id",
          "SELECT TOP 100 PERCENT invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id ORDER BY client_id",
          "SELECT invoice_status AS 'Status', invoice_details AS 'Details', client_id AS 'Client ID', client_details AS 'Client Details', agency_id AS 'Agency ID', agency_details AS 'Agency Details' FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2099,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, other_details FROM Meetings",
          "SELECT Meetings.meeting_type, Meetings.other_details FROM Meetings",
          "SELECT m.meeting_type, m.other_details FROM Meetings m",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings",
          "SELECT DISTINCT m.meeting_type, m.other_details FROM Meetings m",
          "SELECT meeting_type AS Type, other_details AS Details FROM Meetings",
          "SELECT m.meeting_type AS MeetingType, m.other_details AS MeetingDetails FROM Meetings m",
          "SELECT * FROM Meetings WHERE meeting_type IS NOT NULL AND other_details IS NOT NULL",
          "SELECT meeting_type, other_details FROM Meetings WHERE meeting_type IS NOT NULL",
          "SELECT meeting_type, other_details FROM Meetings ORDER BY meeting_type"
        ]
      ]
    },
    {
      "id": 2100,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, other_details FROM Meetings",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings",
          "SELECT Meetings.meeting_type, Meetings.other_details FROM Meetings",
          "SELECT m.meeting_type, m.other_details FROM Meetings m",
          "SELECT DISTINCT m.meeting_type, m.other_details FROM Meetings m",
          "SELECT meeting_type AS Type, other_details AS Details FROM Meetings",
          "SELECT DISTINCT meeting_type AS Type, other_details AS Details FROM Meetings",
          "SELECT * FROM Meetings WHERE meeting_type IS NOT NULL AND other_details IS NOT NULL",
          "SELECT meeting_type, other_details FROM Meetings WHERE meeting_type IS NOT NULL",
          "SELECT DISTINCT meeting_type, other_details FROM Meetings WHERE other_details IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2101,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT Meetings.meeting_outcome, Meetings.purpose_of_meeting FROM Meetings",
          "SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m",
          "SELECT purpose_of_meeting, meeting_outcome FROM Meetings",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM Meetings",
          "SELECT `meeting_outcome`, `purpose_of_meeting` FROM `Meetings`",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings ORDER BY meeting_outcome",
          "SELECT * FROM Meetings WHERE meeting_outcome IS NOT NULL AND purpose_of_meeting IS NOT NULL",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome <> '' AND purpose_of_meeting <> ''"
        ]
      ]
    },
    {
      "id": 2102,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings GROUP BY meeting_outcome, purpose_of_meeting",
          "SELECT DISTINCT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM Meetings",
          "SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL AND purpose_of_meeting IS NOT NULL",
          "SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings ORDER BY meeting_outcome, purpose_of_meeting",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome <> '' AND purpose_of_meeting <> ''",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL",
          "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings WHERE purpose_of_meeting IS NOT NULL",
          "SELECT DISTINCT CONCAT(meeting_outcome, ' - ', purpose_of_meeting) AS 'Meeting Details' FROM Meetings"
        ]
      ]
    },
    {
      "id": 2103,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id AS PaymentID, payment_details AS Details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments JOIN Invoices USING (invoice_id) WHERE invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2104,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id AS PaymentID, payment_details AS Details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
          "SELECT Payments.payment_id, Payments.payment_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id AND Invoices.invoice_status = 'Working'",
          "SELECT payment_id, payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'",
          "SELECT p.payment_id, p.payment_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2105,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices EXCEPT SELECT invoice_id, invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE NOT EXISTS (SELECT 1 FROM Payments p WHERE p.invoice_id = i.invoice_id)",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT DISTINCT invoice_id FROM Payments)",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p)",
          "SELECT invoice_id, invoice_status FROM Invoices i WHERE NOT EXISTS (SELECT NULL FROM Payments p WHERE p.invoice_id = i.invoice_id)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p WHERE p.invoice_id IS NOT NULL)",
          "SELECT invoice_id, invoice_status FROM Invoices AS i WHERE NOT EXISTS (SELECT * FROM Payments AS p WHERE i.invoice_id = p.invoice_id)"
        ]
      ]
    },
    {
      "id": 2106,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL",
          "SELECT invoice_id, invoice_status FROM Invoices EXCEPT SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments)",
          "SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices WHERE NOT EXISTS (SELECT 1 FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE NOT EXISTS (SELECT 1 FROM Payments p WHERE p.invoice_id = i.invoice_id)",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT DISTINCT invoice_id FROM Payments)",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p)",
          "SELECT invoice_id, invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT invoice_id FROM Payments)",
          "SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p WHERE p.payment_id IS NOT NULL)",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments WHERE payment_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2107,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments",
          "SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments",
          "SELECT COUNT(*) AS TotalPayments FROM Payments",
          "SELECT COUNT(1) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT COUNT(*) FROM Payments WHERE payment_id > 0",
          "SELECT COUNT(DISTINCT payment_id) FROM Payments",
          "SELECT COUNT(DISTINCT payment_id) AS UniquePayments FROM Payments",
          "SELECT COUNT(*) FROM Payments WHERE payment_id IS NOT NULL"
        ]
      ]
    },
    {
      "id": 2108,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Payments",
          "SELECT COUNT(payment_id) FROM Payments",
          "SELECT COUNT(1) FROM Payments",
          "SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments",
          "SELECT COUNT(*) AS TotalPayments FROM Payments",
          "SELECT COUNT(*) FROM Payments AS p",
          "SELECT COUNT(payment_id) FROM Payments AS p",
          "SELECT COUNT(*) FROM Payments p",
          "SELECT COUNT(payment_id) FROM Payments p",
          "SELECT COUNT(*) AS PaymentCount FROM Payments"
        ]
      ]
    },
    {
      "id": 2109,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Payments.payment_id, Payments.invoice_id, Invoices.invoice_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id",
          "SELECT p.payment_id, p.invoice_id, i.invoice_details FROM Payments p INNER JOIN Invoices i ON p.invoice_id = i.invoice_id",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id",
          "SELECT payment_id AS PaymentID, invoice_id AS InvoiceID, invoice_details AS Details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id",
          "SELECT p.payment_id, p.invoice_id, i.invoice_details FROM Payments AS p JOIN Invoices AS i ON p.invoice_id = i.invoice_id",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments INNER JOIN Invoices USING(invoice_id)",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments LEFT JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments RIGHT JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id",
          "SELECT payment_id, invoice_id, invoice_details FROM Payments CROSS JOIN Invoices WHERE Payments.invoice_id = Invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2110,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT payment_id, invoice_id, payment_details FROM Payments",
          "SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments",
          "SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p",
          "SELECT payment_id AS PaymentID, invoice_id AS InvoiceID, payment_details AS Details FROM Payments",
          "SELECT * FROM Payments",
          "SELECT payment_id, invoice_id, payment_details FROM Payments WHERE payment_id IS NOT NULL",
          "SELECT payment_id, invoice_id, payment_details FROM Payments ORDER BY payment_id",
          "SELECT payment_id, invoice_id, payment_details FROM Payments GROUP BY payment_id, invoice_id, payment_details",
          "SELECT DISTINCT payment_id, invoice_id, payment_details FROM Payments",
          "SELECT payment_id, invoice_id, payment_details FROM Payments LIMIT 100"
        ]
      ]
    },
    {
      "id": 2111,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, invoice_status FROM Invoices",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices",
          "SELECT I.invoice_id, I.invoice_status FROM Invoices I",
          "SELECT invoice_id AS InvoiceID, invoice_status AS Status FROM Invoices",
          "SELECT * FROM Invoices WHERE invoice_id IS NOT NULL",
          "SELECT invoice_id, invoice_status FROM Invoices ORDER BY invoice_id",
          "SELECT invoice_id, invoice_status FROM Invoices GROUP BY invoice_id, invoice_status",
          "SELECT DISTINCT I.invoice_id, I.invoice_status FROM Invoices I ORDER BY I.invoice_id",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_status IS NOT NULL",
          "SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Invoices)"
        ]
      ]
    },
    {
      "id": 2112,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i INNER JOIN Payments p ON i.invoice_id = p.invoice_id",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices, Payments WHERE Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT invoice_id AS InvoiceID, invoice_status AS Status FROM Invoices JOIN Payments USING (invoice_id)",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices, Payments WHERE Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i, Payments p WHERE i.invoice_id = p.invoice_id",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id",
          "SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices AS i JOIN Payments AS p ON i.invoice_id = p.invoice_id",
          "SELECT DISTINCT invoice_id, invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id"
        ]
      ]
    },
    {
      "id": 2113,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Invoices.invoice_id, COUNT(Payments.payment_id) AS payment_count FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id",
          "SELECT i.invoice_id, COUNT(p.payment_id) AS num_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) AS total_payments FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY invoice_id",
          "SELECT inv.invoice_id, COUNT(pay.payment_id) AS payment_count FROM Invoices inv LEFT JOIN Payments pay ON inv.invoice_id = pay.invoice_id GROUP BY inv.invoice_id",
          "SELECT a.invoice_id, COUNT(b.payment_id) AS count_of_payments FROM Invoices a LEFT JOIN Payments b ON a.invoice_id = b.invoice_id GROUP BY a.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY invoice_id",
          "SELECT Invoices.invoice_id AS InvoiceID, COUNT(Payments.payment_id) AS NumberOfPayments FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY InvoiceID",
          "SELECT i.invoice_id, (SELECT COUNT(*) FROM Payments p WHERE p.invoice_id = i.invoice_id) AS payment_count FROM Invoices i",
          "SELECT invoice_id, (SELECT COUNT(*) FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id) AS payment_count FROM Invoices",
          "SELECT invoice_id, COUNT(payment_id) AS payment_count FROM Invoices LEFT JOIN Payments USING (invoice_id) GROUP BY invoice_id"
        ]
      ]
    },
    {
      "id": 2114,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT invoice_id, COUNT(payment_id) AS payment_count FROM Payments GROUP BY invoice_id",
          "SELECT p.invoice_id, COUNT(p.payment_id) AS num_payments FROM Payments p GROUP BY p.invoice_id",
          "SELECT invoice_id, COUNT(*) AS total_payments FROM Payments GROUP BY invoice_id",
          "SELECT Payments.invoice_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.invoice_id",
          "SELECT p.invoice_id, COUNT(*) FROM Payments p GROUP BY p.invoice_id",
          "SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id ORDER BY invoice_id",
          "SELECT Payments.invoice_id AS InvoiceID, COUNT(Payments.payment_id) AS NumberOfPayments FROM Payments GROUP BY Payments.invoice_id",
          "SELECT COUNT(payment_id), invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) > 0",
          "SELECT invoice_id, COUNT(payment_id) AS count_of_payments FROM Payments GROUP BY invoice_id ORDER BY count_of_payments DESC",
          "SELECT p.invoice_id, COUNT(p.payment_id) AS payment_count FROM Payments p WHERE p.invoice_id IS NOT NULL GROUP BY p.invoice_id"
        ]
      ]
    },
    {
      "id": 2115,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_id = (SELECT T2.invoice_id FROM Payments AS T2 GROUP BY T2.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN (SELECT invoice_id, COUNT(*) AS num_payments FROM Payments GROUP BY invoice_id ORDER BY num_payments DESC LIMIT 1) P ON I.invoice_id = P.invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id = (SELECT P.invoice_id FROM Payments P GROUP BY P.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT TOP 1 I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I INNER JOIN Payments P ON I.invoice_id = P.invoice_id GROUP BY I.invoice_id, I.invoice_status, I.invoice_details ORDER BY COUNT(P.payment_id) DESC",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE EXISTS (SELECT 1 FROM Payments P WHERE P.invoice_id = I.invoice_id GROUP BY P.invoice_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Payments GROUP BY invoice_id))",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id = (SELECT P.invoice_id FROM Payments P GROUP BY P.invoice_id HAVING COUNT(P.payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))"
        ]
      ]
    },
    {
      "id": 2116,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_id IN (SELECT T2.invoice_id FROM Payments AS T2 GROUP BY T2.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Payments GROUP BY invoice_id) AS sub)) AS P ON I.invoice_id = P.invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE EXISTS (SELECT 1 FROM Payments P WHERE P.invoice_id = I.invoice_id GROUP BY P.invoice_id HAVING COUNT(P.payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id IN (SELECT P.invoice_id FROM Payments P GROUP BY P.invoice_id ORDER BY COUNT(P.payment_id) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT TOP 1 invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC)",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC FETCH FIRST ROW ONLY)",
          "SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I INNER JOIN (SELECT invoice_id, COUNT(*) AS num_payments FROM Payments GROUP BY invoice_id ORDER BY num_payments DESC LIMIT 1) P ON I.invoice_id = P.invoice_id",
          "SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)"
        ]
      ]
    },
    {
      "id": 2117,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(1) FROM Staff",
          "SELECT COUNT(staff_id) AS NumberOfStaff FROM Staff",
          "SELECT COUNT(*) AS TotalStaff FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) AS TotalUniqueStaff FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(*) AS StaffCount FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id > 0"
        ]
      ]
    },
    {
      "id": 2118,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff",
          "SELECT COUNT(staff_id) FROM Staff",
          "SELECT COUNT(*) AS NumberOfStaff FROM Staff",
          "SELECT COUNT(staff_id) AS StaffCount FROM Staff",
          "SELECT COUNT(1) FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff",
          "SELECT COUNT(DISTINCT staff_id) AS UniqueStaffCount FROM Staff",
          "SELECT COUNT(*) FROM Staff WHERE staff_id IS NOT NULL",
          "SELECT COUNT(*) FROM Staff GROUP BY agency_id",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff) AS StaffCount"
        ]
      ]
    },
    {
      "id": 2119,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS staff_count FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id",
          "SELECT a.agency_id, COUNT(s.staff_id) AS num_staff FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT agency_id, COUNT(staff_id) AS total_staff FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(S.staff_id) FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(*) AS staff_count FROM Staff GROUP BY agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id",
          "SELECT A.agency_id, (SELECT COUNT(*) FROM Staff S WHERE S.agency_id = A.agency_id) AS staff_count FROM Agencies A",
          "SELECT agency_id, COUNT(staff_id) AS number_of_staff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(S.staff_id) AS staff_total FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id"
        ]
      ]
    },
    {
      "id": 2120,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, COUNT(S.staff_id) AS num_staff FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id",
          "SELECT agency_id, COUNT(*) AS staff_count FROM Agencies INNER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(S.staff_id) FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(staff_id) AS total_staff FROM Agencies LEFT JOIN Staff ON agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT Agencies.agency_id, COUNT(Staff.staff_id) AS NumberOfStaff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id",
          "SELECT A.agency_id, COUNT(S.staff_id) AS StaffCount FROM Agencies A JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(staff_id) FROM Agencies LEFT OUTER JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY agency_id",
          "SELECT A.agency_id, COUNT(S.staff_id) AS staff_number FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id",
          "SELECT agency_id, COUNT(staff_id) AS count_of_staff FROM Agencies INNER JOIN Staff ON agency_id = Staff.agency_id GROUP BY agency_id"
        ]
      ]
    },
    {
      "id": 2121,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT S.agency_id FROM Staff S GROUP BY S.agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxStaff ON A.agency_id = MaxStaff.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(staff_id) = (SELECT MAX(staff_count) FROM (SELECT COUNT(staff_id) AS staff_count FROM Staff GROUP BY agency_id) AS Counts))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) B ON A.agency_id = B.agency_id",
          "SELECT TOP 1 A.agency_id, A.agency_details FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id, A.agency_details ORDER BY COUNT(S.staff_id) DESC",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT TOP 1 agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM (SELECT agency_id, COUNT(*) AS num_staff FROM Staff GROUP BY agency_id ORDER BY num_staff DESC) AS TempTable LIMIT 1)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC FETCH FIRST 1 ROWS ONLY)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Staff S WHERE S.agency_id = A.agency_id GROUP BY S.agency_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Staff GROUP BY agency_id))"
        ]
      ]
    },
    {
      "id": 2122,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) S ON A.agency_id = S.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT TOP 1 agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = MAX(COUNT(*)))",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) >= ALL (SELECT COUNT(*) FROM Staff GROUP BY agency_id))",
          "SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Staff S WHERE S.agency_id = A.agency_id GROUP BY S.agency_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Staff GROUP BY agency_id))",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM (SELECT agency_id, COUNT(*) AS num_staff FROM Staff GROUP BY agency_id ORDER BY num_staff DESC) WHERE ROWNUM = 1)",
          "SELECT A.agency_id, A.agency_details FROM Agencies A INNER JOIN (SELECT agency_id, COUNT(*) AS staff_count FROM Staff GROUP BY agency_id ORDER BY staff_count DESC LIMIT 1) S ON A.agency_id = S.agency_id",
          "SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC FETCH FIRST 1 ROWS ONLY)"
        ]
      ]
    },
    {
      "id": 2123,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, COUNT(meeting_id) AS num_meetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) AS meeting_count FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome",
          "SELECT Meetings.meeting_outcome, COUNT(Meetings.meeting_id) AS TotalMeetings FROM Meetings GROUP BY Meetings.meeting_outcome",
          "SELECT m.meeting_outcome, COUNT(m.meeting_id) AS MeetingCount FROM Meetings m GROUP BY m.meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) AS NumberOfMeetings FROM Meetings GROUP BY meeting_outcome ORDER BY COUNT(meeting_id)",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) AS count_of_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY count_of_meetings DESC",
          "SELECT COUNT(meeting_id) AS meeting_counts, meeting_outcome FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) AS total_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY total_meetings DESC"
        ]
      ]
    },
    {
      "id": 2124,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_outcome, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) AS total_meetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT COUNT(meeting_id) AS total_meetings, meeting_outcome FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome",
          "SELECT COUNT(*) AS total_meetings, meeting_outcome FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome",
          "SELECT COUNT(*) FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) AS count_of_meetings FROM Meetings GROUP BY meeting_outcome",
          "SELECT COUNT(meeting_id), meeting_outcome FROM Meetings GROUP BY meeting_outcome",
          "SELECT meeting_outcome, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome"
        ]
      ]
    },
    {
      "id": 2125,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Clients.client_id, COUNT(Meetings.meeting_id) AS num_meetings FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id",
          "SELECT c.client_id, COUNT(m.meeting_id) AS meeting_count FROM Clients c INNER JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id",
          "SELECT client_id, COUNT(*) AS total_meetings FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id",
          "SELECT Clients.client_id, COUNT(Meetings.meeting_id) FROM Clients, Meetings WHERE Clients.client_id = Meetings.client_id GROUP BY Clients.client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY client_id",
          "SELECT Clients.client_id AS ClientID, COUNT(Meetings.meeting_id) AS MeetingsCount FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id",
          "SELECT c.client_id, COUNT(m.meeting_id) FROM Clients c JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id",
          "SELECT Clients.client_id, COUNT(Meetings.client_id) AS NumberOfMeetings FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id",
          "SELECT client_id, COUNT(meeting_id) AS meeting_count FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY client_id",
          "SELECT Clients.client_id, COUNT(Meetings.meeting_id) AS TotalMeetings FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id"
        ]
      ]
    },
    {
      "id": 2126,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT client_id, COUNT(*) AS meeting_count FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) AS total_meetings FROM Meetings GROUP BY client_id",
          "SELECT Meetings.client_id, COUNT(*) FROM Meetings GROUP BY Meetings.client_id",
          "SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY client_id",
          "SELECT M.client_id, COUNT(M.meeting_id) AS meetings_count FROM Meetings M GROUP BY M.client_id",
          "SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id",
          "SELECT client_id, COUNT(meeting_id) AS count_of_meetings FROM Meetings GROUP BY client_id",
          "SELECT Meetings.client_id, COUNT(Meetings.meeting_id) AS TotalMeetings FROM Meetings GROUP BY Meetings.client_id",
          "SELECT client_id, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY client_id"
        ]
      ]
    },
    {
      "id": 2127,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.meeting_type, COUNT(*) AS num_meetings, M.client_id FROM Meetings M GROUP BY M.client_id, M.meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) AS meeting_count, client_id FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT client_id, meeting_type, COUNT(*) AS total_meetings FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT Meetings.meeting_type, COUNT(Meetings.meeting_id) AS NumberOfMeetings, Meetings.client_id FROM Meetings GROUP BY Meetings.client_id, Meetings.meeting_type",
          "SELECT M.client_id, M.meeting_type, COUNT(M.meeting_id) AS MeetingCount FROM Meetings M GROUP BY M.client_id, M.meeting_type",
          "SELECT client_id, meeting_type, COUNT(meeting_id) FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT meeting_type, client_id, COUNT(*) FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT Meetings.client_id, Meetings.meeting_type, COUNT(*) AS TotalMeetings FROM Meetings GROUP BY Meetings.client_id, Meetings.meeting_type",
          "SELECT client_id, meeting_type, COUNT(meeting_id) AS count_of_meetings FROM Meetings GROUP BY client_id, meeting_type",
          "SELECT M.client_id, M.meeting_type, COUNT(*) AS meeting_count FROM Meetings AS M GROUP BY M.client_id, M.meeting_type"
        ]
      ]
    },
    {
      "id": 2128,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_type, COUNT(*) AS total_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) AS total_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT COUNT(*) AS total_meetings, meeting_type FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) FROM Meetings GROUP BY meeting_type",
          "SELECT COUNT(*) FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(*) AS count_of_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT meeting_type, COUNT(meeting_id) AS count_of_meetings FROM Meetings GROUP BY meeting_type",
          "SELECT COUNT(meeting_id) AS total_meetings, meeting_type FROM Meetings GROUP BY meeting_type",
          "SELECT COUNT(meeting_id), meeting_type FROM Meetings GROUP BY meeting_type"
        ]
      ]
    },
    {
      "id": 2129,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT Meetings.meeting_id AS 'Meeting ID', Meetings.meeting_outcome AS 'Outcome', Meetings.meeting_type AS 'Type', Clients.client_details AS 'Client Details' FROM Meetings, Clients WHERE Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m, Clients c WHERE m.client_id = c.client_id",
          "SELECT 'Meeting ID' = m.meeting_id, 'Outcome' = m.meeting_outcome, 'Type' = m.meeting_type, 'Client Details' = c.client_details FROM Meetings m INNER JOIN Clients c ON m.client_id = c.client_id",
          "SELECT m.meeting_id AS MeetingID, m.meeting_outcome AS Outcome, m.meeting_type AS Type, c.client_details AS ClientDetails FROM Meetings m JOIN Clients c ON m.client_id = c.client_id",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT DISTINCT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id ORDER BY m.meeting_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m CROSS JOIN Clients c ON m.client_id = c.client_id"
        ]
      ]
    },
    {
      "id": 2130,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT Meetings.meeting_id AS 'Meeting ID', Meetings.meeting_outcome AS 'Outcome', Meetings.meeting_type AS 'Type', Clients.client_details AS 'Client Details' FROM Meetings, Clients WHERE Meetings.client_id = Clients.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m, Clients c WHERE m.client_id = c.client_id",
          "SELECT 'Meeting ID' = Meetings.meeting_id, 'Outcome' = Meetings.meeting_outcome, 'Type' = Meetings.meeting_type, 'Client Details' = Clients.client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id",
          "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m INNER JOIN Clients AS c ON m.client_id = c.client_id",
          "SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id",
          "SELECT DISTINCT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id",
          "SELECT m.meeting_id AS MeetingID, m.meeting_outcome AS Outcome, m.meeting_type AS Type, c.client_details AS ClientDetails FROM Meetings m INNER JOIN Clients c ON m.client_id = c.client_id ORDER BY m.meeting_id"
        ]
      ]
    },
    {
      "id": 2131,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT m.meeting_id, COUNT(DISTINCT s.staff_id) AS staff_count FROM Meetings m JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT Meetings.meeting_id, COUNT(DISTINCT Staff_in_Meetings.staff_id) AS num_staff FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id GROUP BY Meetings.meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) AS staff_count FROM Meetings m, Staff_in_Meetings s WHERE m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT meeting_id, COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT m.meeting_id, COUNT(*) AS staff_count FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT Meetings.meeting_id, COUNT(Staff_in_Meetings.staff_id) FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id GROUP BY Meetings.meeting_id",
          "SELECT m.meeting_id, COUNT(DISTINCT s.staff_id) FROM Meetings AS m JOIN Staff_in_Meetings AS s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT meeting_id, COUNT(staff_id) AS total_staff FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m INNER JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
          "SELECT m.meeting_id, COUNT(DISTINCT s.staff_id) FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id"
        ]
      ]
    },
    {
      "id": 2132,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT meeting_id, COUNT(staff_id) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(DISTINCT staff_id) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(*) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id, COUNT(*) FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id AS MeetingID, COUNT(staff_id) AS NumberOfStaff FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id AS MeetingID, COUNT(DISTINCT staff_id) AS NumberOfStaff FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id AS MeetingID, COUNT(*) AS NumberOfStaff FROM Staff_in_Meetings GROUP BY meeting_id",
          "SELECT meeting_id AS MeetingID, COUNT(staff_id) AS NumberOfStaff FROM Staff_in_Meetings GROUP BY meeting_id"
        ]
      ]
    },
    {
      "id": 2133,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT staff_id, num_meetings FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery WHERE num_meetings = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery2)",
          "SELECT S.staff_id, COUNT(M.meeting_id) AS num_meetings FROM Staff_in_Meetings AS M JOIN Staff AS S ON M.staff_id = S.staff_id GROUP BY S.staff_id HAVING COUNT(M.meeting_id) = (SELECT MIN(num_meetings) FROM (SELECT COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS subquery)",
          "SELECT staff_id, COUNT(meeting_id) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings GROUP BY staff_id)",
          "WITH MeetingCounts AS (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) SELECT staff_id, num_meetings FROM MeetingCounts WHERE num_meetings = (SELECT MIN(num_meetings) FROM MeetingCounts)",
          "SELECT staff_id, num_meetings FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) sub WHERE num_meetings = (SELECT MIN(num_meetings) FROM (SELECT COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) sub2)",
          "SELECT A.staff_id, A.num_meetings FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) A WHERE A.num_meetings = (SELECT MIN(B.num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) B)",
          "SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id ORDER BY num_meetings ASC LIMIT 1",
          "SELECT TOP 1 WITH TIES staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id ORDER BY num_meetings",
          "SELECT staff_id, MIN(num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) GROUP BY staff_id HAVING MIN(num_meetings) = (SELECT MIN(num_meetings) FROM (SELECT COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id))",
          "SELECT staff_id, num_meetings FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS result WHERE num_meetings = (SELECT MIN(num_meetings) FROM (SELECT COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS result2)"
        ]
      ]
    },
    {
      "id": 2134,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) AS subquery)",
          "SELECT S.staff_id FROM Staff_in_Meetings S GROUP BY S.staff_id HAVING COUNT(S.meeting_id) > 0 ORDER BY COUNT(S.meeting_id) ASC LIMIT 1",
          "SELECT TOP 1 staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id)",
          "WITH MeetingCounts AS (SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) SELECT staff_id FROM MeetingCounts WHERE num_meetings = (SELECT MIN(num_meetings) FROM MeetingCounts WHERE num_meetings > 0)",
          "SELECT staff_id FROM (SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) AS MeetingCounts WHERE num_meetings = (SELECT MIN(num_meetings) FROM MeetingCounts WHERE num_meetings > 0)",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) ASC FETCH FIRST 1 ROWS ONLY",
          "SELECT staff_id, MIN(num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) GROUP BY staff_id ORDER BY num_meetings ASC LIMIT 1",
          "SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 AND COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0)",
          "SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC LIMIT 1",
          "SELECT staff_id FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) AS SubQuery ORDER BY num_meetings ASC LIMIT 1"
        ]
      ]
    },
    {
      "id": 2135,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT sim.staff_id) FROM Staff_in_Meetings sim",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id",
          "SELECT COUNT(UNIQUE Staff_in_Meetings.staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AS unique_staff",
          "SELECT COUNT(DISTINCT sim.staff_id) FROM Staff_in_Meetings AS sim INNER JOIN Staff AS s ON sim.staff_id = s.staff_id",
          "SELECT COUNT(DISTINCT staff_id) AS Total_Staff_Attended FROM Staff_in_Meetings",
          "SELECT DISTINCT COUNT(staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings WHERE staff_id IS NOT NULL",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id"
        ]
      ]
    },
    {
      "id": 2136,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT sim.staff_id) FROM Staff_in_Meetings sim",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id",
          "SELECT COUNT(DISTINCT sim.staff_id) FROM Staff_in_Meetings sim JOIN Staff s ON sim.staff_id = s.staff_id",
          "SELECT DISTINCT COUNT(staff_id) FROM Staff_in_Meetings",
          "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AS unique_staff",
          "SELECT COUNT(DISTINCT staff_id) AS DistinctStaffCount FROM Staff_in_Meetings",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id",
          "SELECT DISTINCT COUNT(sim.staff_id) FROM Staff_in_Meetings sim JOIN Staff s ON sim.staff_id = s.staff_id"
        ]
      ]
    },
    {
      "id": 2137,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE Staff.staff_id = Staff_in_Meetings.staff_id)",
          "SELECT COUNT(*) FROM Staff LEFT JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.staff_id IS NULL",
          "WITH Attended AS (SELECT DISTINCT staff_id FROM Staff_in_Meetings) SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Attended)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id)",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff EXCEPT SELECT staff_id FROM Staff_in_Meetings) AS NonAttendees",
          "SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff LEFT OUTER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.staff_id IS NULL",
          "SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT NULL FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2138,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT COUNT(*) FROM Staff WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE Staff.staff_id = Staff_in_Meetings.staff_id)",
          "SELECT COUNT(*) FROM Staff s WHERE s.staff_id NOT IN (SELECT sm.staff_id FROM Staff_in_Meetings sm)",
          "SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id)",
          "SELECT COUNT(*) FROM (SELECT staff_id FROM Staff EXCEPT SELECT staff_id FROM Staff_in_Meetings) AS Subquery",
          "SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT NULL FROM Staff_in_Meetings sm WHERE sm.staff_id = s.staff_id)",
          "SELECT COUNT(*) FROM Staff s WHERE s.staff_id NOT IN (SELECT DISTINCT sm.staff_id FROM Staff_in_Meetings sm WHERE sm.staff_id IS NOT NULL)",
          "SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IS NOT NULL)"
        ]
      ]
    },
    {
      "id": 2139,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c WHERE EXISTS (SELECT 1 FROM Meetings m WHERE m.client_id = c.client_id) OR EXISTS (SELECT 1 FROM Invoices i WHERE i.client_id = c.client_id)",
          "SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id UNION SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id UNION SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices)",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients, Meetings, Invoices WHERE Clients.client_id = Meetings.client_id OR Clients.client_id = Invoices.client_id",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION ALL SELECT i.client_id FROM Invoices i)",
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c LEFT JOIN Meetings m ON c.client_id = m.client_id LEFT JOIN Invoices i ON c.client_id = i.client_id WHERE m.client_id IS NOT NULL OR i.client_id IS NOT NULL",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients LEFT OUTER JOIN Meetings ON Clients.client_id = Meetings.client_id LEFT OUTER JOIN Invoices ON Clients.client_id = Invoices.client_id WHERE Meetings.client_id IS NOT NULL OR Invoices.client_id IS NOT NULL",
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c WHERE EXISTS (SELECT * FROM Meetings m WHERE m.client_id = c.client_id) OR EXISTS (SELECT * FROM Invoices i WHERE i.client_id = c.client_id)"
        ]
      ]
    },
    {
      "id": 2140,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c WHERE EXISTS (SELECT 1 FROM Meetings m WHERE m.client_id = c.client_id) OR EXISTS (SELECT 1 FROM Invoices i WHERE i.client_id = c.client_id)",
          "SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id UNION SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id",
          "SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id WHERE Meetings.client_id IS NOT NULL OR Invoices.client_id IS NOT NULL",
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c, Meetings m, Invoices i WHERE c.client_id = m.client_id OR c.client_id = i.client_id",
          "SELECT DISTINCT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings) OR client_id IN (SELECT client_id FROM Invoices)",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION ALL SELECT i.client_id FROM Invoices i)",
          "SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients INNER JOIN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices) AS Sub ON Clients.client_id = Sub.client_id",
          "SELECT DISTINCT c.client_id, c.client_details FROM Clients c WHERE EXISTS (SELECT * FROM Meetings m WHERE m.client_id = c.client_id) OR EXISTS (SELECT * FROM Invoices i WHERE i.client_id = c.client_id)",
          "SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT client_id FROM Meetings UNION DISTINCT SELECT client_id FROM Invoices)"
        ]
      ]
    },
    {
      "id": 2141,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT Staff.staff_id, Staff.staff_details FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff.staff_details LIKE '%s%' GROUP BY Staff.staff_id HAVING COUNT(Staff_in_Meetings.meeting_id) >= 1",
          "SELECT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) > 0",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id AND s.staff_details LIKE '%s%' AND EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE staff_id = s.staff_id)",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) >= 1)",
          "SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(*) >= 1",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT NULL FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id HAVING COUNT(sim.meeting_id) >= 1) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND (SELECT COUNT(*) FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id) >= 1",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0)",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' AND COUNT(sim.meeting_id) >= 1 GROUP BY s.staff_id",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) >= 1)"
        ]
      ]
    },
    {
      "id": 2142,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) >= 1",
          "SELECT DISTINCT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' AND EXISTS (SELECT 1 FROM Staff_in_Meetings WHERE staff_id = s.staff_id)",
          "SELECT s.staff_id, s.staff_details FROM Staff s, Staff_in_Meetings sim WHERE s.staff_id = sim.staff_id AND s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(DISTINCT sim.meeting_id) > 0",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) >= 1)",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT NULL FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id HAVING COUNT(*) > 0) AND s.staff_details LIKE '%s%'",
          "SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(*) >= 1",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings)",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE CHARINDEX('s', s.staff_details) > 0 AND s.staff_id IN (SELECT staff_id FROM Staff_in_Meetings sim GROUP BY sim.staff_id HAVING COUNT(sim.meeting_id) >= 1)",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND (SELECT COUNT(*) FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id) >= 1",
          "SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)"
        ]
      ]
    },
    {
      "id": 2143,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE C.client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND C.client_id IN (SELECT client_id FROM Invoices)",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT DISTINCT client_id FROM Invoices)",
          "SELECT Clients.client_id, Clients.sic_code, Clients.agency_id FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(DISTINCT Meetings.meeting_id) = 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE EXISTS (SELECT 1 FROM Meetings WHERE Meetings.client_id = Clients.client_id GROUP BY Meetings.client_id HAVING COUNT(*) = 1) AND EXISTS (SELECT 1 FROM Invoices WHERE Invoices.client_id = Clients.client_id)",
          "SELECT DISTINCT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id AND C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1 INTERSECT SELECT client_id FROM Invoices)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C INNER JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) M ON C.client_id = M.client_id INNER JOIN Invoices I ON C.client_id = I.client_id",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE C.client_id IN (SELECT M.client_id FROM Meetings M GROUP BY M.client_id HAVING COUNT(M.meeting_id) = 1) AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices WHERE invoice_id IS NOT NULL)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)"
        ]
      ]
    },
    {
      "id": 2144,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN Meetings M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices)",
          "SELECT DISTINCT C.client_id, C.sic_code, C.agency_id FROM Clients C, Meetings M, Invoices I WHERE C.client_id = M.client_id AND C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(M.meeting_id) = 1",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C INNER JOIN Meetings M ON C.client_id = M.client_id INNER JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(M.meeting_id) = 1",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE EXISTS (SELECT 1 FROM Meetings M WHERE M.client_id = C.client_id GROUP BY M.client_id HAVING COUNT(*) = 1) AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C LEFT JOIN Meetings M ON C.client_id = M.client_id LEFT JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id HAVING COUNT(DISTINCT M.meeting_id) = 1 AND COUNT(DISTINCT I.invoice_id) >= 1",
          "SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM Invoices)",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C JOIN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) M ON C.client_id = M.client_id JOIN Invoices I ON C.client_id = I.client_id",
          "SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE C.client_id IN (SELECT M.client_id FROM Meetings M GROUP BY M.client_id HAVING COUNT(M.meeting_id) = 1) AND C.client_id IN (SELECT I.client_id FROM Invoices I)"
        ]
      ]
    },
    {
      "id": 2145,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings, Clients, Staff_in_Meetings, Staff WHERE Meetings.client_id = Clients.client_id AND Meetings.meeting_id = Staff_in_Meetings.meeting_id AND Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time AS 'Start Time', M.end_date_time AS 'End Time', C.client_details AS 'Client Details', S.staff_details AS 'Staff Details' FROM Meetings M, Clients C, Staff_in_Meetings SM, Staff S WHERE M.client_id = C.client_id AND M.meeting_id = SM.meeting_id AND SM.staff_id = S.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings AS M JOIN Clients AS C ON M.client_id = C.client_id JOIN Staff_in_Meetings AS SM ON M.meeting_id = SM.meeting_id JOIN Staff AS S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M LEFT JOIN Clients C ON M.client_id = C.client_id LEFT JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id LEFT JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings M CROSS JOIN Clients C ON M.client_id = C.client_id CROSS JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id CROSS JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings M, Clients C, Staff S WHERE M.client_id = C.client_id AND EXISTS (SELECT 1 FROM Staff_in_Meetings SM WHERE M.meeting_id = SM.meeting_id AND SM.staff_id = S.staff_id)",
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M INNER JOIN Clients C ON M.client_id = C.client_id INNER JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id INNER JOIN Staff S ON SM.staff_id = S.staff_id ORDER BY M.start_date_time"
        ]
      ]
    },
    {
      "id": 2146,
      "db_id": "advertising_agencies",
      "infer_predictions": [
        [
          "SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id JOIN Staff S ON SM.staff_id = S.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT Meetings.start_date_time AS Start, Meetings.end_date_time AS End, Clients.client_details AS Client, Staff.staff_details AS Staff FROM Meetings, Clients, Staff_in_Meetings, Staff WHERE Meetings.client_id = Clients.client_id AND Meetings.meeting_id = Staff_in_Meetings.meeting_id AND Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT a.start_date_time, a.end_date_time, b.client_details, d.staff_details FROM Meetings a JOIN Clients b ON a.client_id = b.client_id JOIN Staff_in_Meetings c ON a.meeting_id = c.meeting_id JOIN Staff d ON c.staff_id = d.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients USING (client_id) JOIN Staff_in_Meetings USING (meeting_id) JOIN Staff USING (staff_id)",
          "SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM Meetings m, Clients c, Staff_in_Meetings sm, Staff s WHERE m.client_id = c.client_id AND m.meeting_id = sm.meeting_id AND sm.staff_id = s.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings m CROSS JOIN Clients c ON m.client_id = c.client_id CROSS JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id CROSS JOIN Staff s ON sm.staff_id = s.staff_id",
          "SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id WHERE Meetings.meeting_id = Staff_in_Meetings.meeting_id",
          "SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id LEFT JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id LEFT JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id",
          "SELECT DISTINCT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id"
        ]
      ]
    }
  ]