[
    {
      "id": 0,
      "db_id": "soccer_3",
      "gold": "SELECT count(*) FROM club",
      "infer_predictions": [
        [
          "select count ( * ) from club",
          "select count ( * ) , club.name from club join player on club.club_id = player.club_id",
          "select count ( * ) , club.name from club club , club club_id",
          "select count ( * ) from club"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "soccer_3",
      "gold": "SELECT count(*) FROM club",
      "infer_predictions": [
        [
          "select count ( * ) from club"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from club order by name asc",
          "select name from club order by name asc , name asc",
          "select name from club order by name asc",
          "select name from club order by name asc"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from club order by name asc"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "soccer_3",
      "gold": "SELECT Manager ,  Captain FROM club",
      "infer_predictions": [
        [
          "select manager , captain from club"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "soccer_3",
      "gold": "SELECT Manager ,  Captain FROM club",
      "infer_predictions": [
        [
          "select manager , captain from club",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'Steve McManus'",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'James Bond'",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'David James'",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'Steve McLaren'",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'John Smith'",
          "select manager , captain from club where club.manager = 'John Smith' or club.manager = 'Steve McManus'",
          "select manager , captain from club where club.manager = 'John Smith' or club.captain = 'Steve Smith'"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
      "infer_predictions": [
        [
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer != 'Nike' or manufacturer = 'United Sports'",
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer != 'Nike' or manufacturer = 'Unknown'"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
      "infer_predictions": [
        [
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer not in ( select manufacturer from club where name = 'Nike' )",
          "select name from club where manufacturer not in ( select manufacturer from club where manufacturer = 'Nike' )"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
      "infer_predictions": [
        [
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc , name asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
      "infer_predictions": [
        [
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "Select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "select name from player order by wins_count asc",
          "Select name from player order by wins_count asc",
          "select name from player order by wins_count asc"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from player order by earnings desc limit 1",
          "select name from player where earnings = ( select max ( earnings ) from player )",
          "select name from player order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings desc limit 1",
          "select name from player where earnings = ( select max ( earnings ) from player )",
          "select name from player where earnings = ( select max ( earnings ) from player )"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "soccer_3",
      "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
      "infer_predictions": [
        [
          "select distinct country from player where earnings > 1200000",
          "select distinct country from player where earnings > 1200000",
          "select distinct country from player where earnings > 120000",
          "select distinct country from player where earnings >1200000"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "soccer_3",
      "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1200000",
          "select distinct country from player where earnings > 1200000",
          "select distinct country from player where earnings > 1200000 != 'United States'",
          "select country from player where earnings > 1200000 != 'United States'"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country from player where wins_count > 2 and earnings = ( select max ( earnings ) from player where wins_count > 2 )",
          "select country from player where wins_count > 2 and earnings = ( select earnings from player group by earnings having count ( wins_count ) > 2 ) order by earnings desc limit 1",
          "select country from player where wins_count > 2 and earnings = ( select max ( earnings ) from player where wins_count > 2 )",
          "select country from player where wins_count in ( select wins_count from player group by wins_count having count ( * ) > 2 ) order by earnings desc limit 1",
          "select country from player where wins_count > 2 and earnings = ( select max ( earnings ) from player group by earnings having count ( wins_count ) > 2 ) order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country from player where wins_count > 2 group by country order by sum ( earnings ) desc limit 1",
          "select country from player where wins_count > 2 group by country having count ( * ) = ( select max ( earnings ) from ( select count ( * ) as earnings from player where wins_count > 2 group by country ) )",
          "select country from player where wins_count > 2 group by country having count ( * ) = ( select max ( earnings ) from player ) order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
      "infer_predictions": [
        [
          "select player.name , club.name from club join player on club.club_id = player.club_id",
          "select player.name , club.name from player join club on player.club_id = club.club_id"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
      "infer_predictions": [
        [
          "select player.name , club.name from club join player on club.club_id = player.club_id",
          "select player.name , club.name from player join club on player.club_id = club.club_id",
          "select player.name , club.Name from club join player on club.club_id = player.club_id"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
      "infer_predictions": [
        [
          "select club.name from club where club_id in ( select club_id from player where wins_count > 2 )",
          "select name from club where club_id in ( select club_id from player where wins_count > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having max ( wins_count ) > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having sum ( wins_count ) > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having count ( wins_count ) > 2 )",
          "select name from club where club_id in ( select club_id from player group by club_id having max ( wins_count ) > 2 )",
          "select club.name from club where club.club_id in ( select club_id from player where wins_count > 2 )"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
      "infer_predictions": [
        [
          "select club.name from club where club_id in ( select club_id from player group by club_id having count ( wins_count ) > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having sum ( wins_count ) > 2 )",
          "select club.name from club where club_id in ( select club_id from player where wins_count > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having total ( wins_count ) > 2 )",
          "select club.name from club where club_id in ( select club_id from player group by club_id having max ( wins_count ) > 2 )",
          "select name from club where club_id in ( select club_id from player group by club_id having count ( wins_count ) > 2 )"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
      "infer_predictions": [
        [
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from player join club on player.club_id = club.club_id where club.manager = 'Sam Allardyce'",
          "select name from player where exists ( select 1 from club where club_id = player.club_id and manager = 'Sam Allardyce' )",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce' or club.name = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
      "infer_predictions": [
        [
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from player join club on player.club_id = club.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce' or club.name = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce' and club.name = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce' or club.name = 'Southampton Wanderers'"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id group by club.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id order by player.earnings desc",
          "select club.name from player join club on player.club_id = club.club_id group by club.club_id order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by club.name order by avg ( player.earnings ) desc"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id group by club.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id order by player.earnings desc",
          "select club.name from club join player on club.club_id = player.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by club.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by club.club_id order by avg ( player.earnings ) desc"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
      "infer_predictions": [
        [
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select sub.manufacturer , count ( sub.club_id ) from club sub group by sub.manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
      "infer_predictions": [
        [
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer as manufacturer_name , count ( * ) from club group by manufacturer",
          "select manufacturer as manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer != club.manufacturer"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( count ) from ( select count ( manufacturer ) as count from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select count ( manufacturer ) as cnt from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( counts ) from ( select count ( manufacturer ) as counts from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select count ( * ) as cnt from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( count ) from ( select count ( manufacturer ) as count from club group by manufacturer ) as counts )"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select count ( manufacturer ) as cnt from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( c ) from ( select count ( manufacturer ) as c from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select count ( * ) as cnt from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select count ( manufacturer ) as cnt from club group by manufacturer ) tmp )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( count ) from ( select count ( manufacturer ) as count from club group by manufacturer ) )",
          "select manufacturer from club group by manufacturer having count ( manufacturer ) = ( select max ( cnt ) from ( select manufacturer , count ( * ) as cnt from club group by manufacturer ) tmp )",
          "with clubcounts as ( select manufacturer , count ( * ) as cnt from club group by manufacturer ) select manufacturer from clubcounts where cnt = ( select max ( cnt ) from clubcounts )",
          "with clubcounts as ( select manufacturer , count ( * ) as num from club group by manufacturer ) select manufacturer from clubcounts where num = ( select max ( num ) from clubcounts )"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from ( select manufacturer , count ( distinct club_id ) as num_clubs from club group by manufacturer having num_clubs > 1 )",
          "select manufacturer from ( select manufacturer , count ( distinct club_id ) as num_clubs from club group by manufacturer having num_clubs > 1 )"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( distinct club_id ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
      "infer_predictions": [
        [
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select distinct club_id from player )",
          "select club.name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
      "infer_predictions": [
        [
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )",
          "select club.name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select distinct club_id from player )",
          "Select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1400000 and earnings < 1100000",
          "select distinct country from player where earnings > 1400000 and earnings < 1100000",
          "select country from player where earnings > 1400000 union select country from player where earnings < 1100000"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1400000 intersect select country from player where earnings < 1100000",
          "select country from player group by country having max ( earnings ) > 1400000 and min ( earnings ) < 1100000",
          "select country from player where earnings > 140000 intersect select country from player where earnings < 1100000",
          "select country from player where earnings > 1400000 intersect select country from player where earnings <= 1100000"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "soccer_3",
      "gold": "SELECT COUNT (DISTINCT Country) FROM player",
      "infer_predictions": [
        [
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "soccer_3",
      "gold": "SELECT COUNT (DISTINCT Country) FROM player",
      "infer_predictions": [
        [
          "select count ( distinct country ) from player"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "soccer_3",
      "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
      "infer_predictions": [
        [
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select sum ( earnings ) from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' OR country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwa'",
          "Select earnings from player where country = 'Australia' or country = 'Zimbabwe'"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "soccer_3",
      "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
      "infer_predictions": [
        [
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwa'",
          "select sum ( earnings ) from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwi'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabuwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
      "infer_predictions": [
        [
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 union select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
      "infer_predictions": [
        [
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 union select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 2",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by orders.customer_id having count ( * ) > 2 intersect select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by orders.customer_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
      "infer_predictions": [
        [
          "select orders.order_id , orders.order_status_code , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_id , orders.order_status_code , sum ( order_items.product_id ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select o.order_id , o.order_status_code , count ( distinct oi.product_id ) as total_products from orders o left join order_items oi on o.order_id = oi.order_id group by o.order_id , o.order_status_code",
          "select orders.order_id , orders.order_status_code , count ( * ) from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id",
          "select distinct orders.order_id , orders.order_status_code , ( select count ( distinct product_id ) from order_items where order_items.order_id = orders.order_id ) as product_count from orders",
          "select orders.order_id , orders.order_status_code , ( select count ( distinct product_id ) from order_items where order_items.order_id = orders.order_id ) as total_products from orders",
          "select distinct orders.order_id , orders.order_status_code , ( select count ( * ) from order_items where order_items.order_id = orders.order_id ) as product_count from orders",
          "select distinct orders.order_id , orders.order_status_code , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
      "infer_predictions": [
        [
          "select count ( * ) , orders.order_status_code , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( order_items.product_id ) as total_products from orders left join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( order_items.product_id ) as number_of_products , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( * ) as number_of_items , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( order_items.product_id ) as number_of_items from orders left join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( order_items.product_id ) as number_of_items , orders.order_id from orders left join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , count ( * ) as number_of_products , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , ( select count ( distinct product_id ) from order_items where order_items.order_id = orders.order_id ) as product_count from orders"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "e_commerce",
      "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select date_order_placed from orders where date_order_placed = ( select min ( date_order_placed ) from orders ) or order_id in ( select order_id from order_items group by order_id having count ( * ) > 1 )"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "e_commerce",
      "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select min ( date_order_placed ) , max ( date_order_placed ) from orders group by date_order_placed having count ( * ) > 1",
          "select orders.date_order_placed , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by orders.date_order_placed asc limit 1",
          "select orders.date_order_placed , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id order by orders.date_order_placed asc limit 1"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "e_commerce",
      "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select customer_id from orders )",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select o.customer_id from orders as o )",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select o.customer_id from orders o )",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select o.customer_id from orders as o group by o.customer_id having count ( o.order_id ) > 0 )",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select o.customer_id from orders o )",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers where customer_id not in ( select o.customer_id from orders as o group by o.customer_id having count ( o.order_id ) > 1 )"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "e_commerce",
      "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select customer_id from orders )",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select o.customer_id from orders o )",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select o.customer_id from orders as o )",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select customer_id from orders )",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select customer_id from orders )",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers where customer_id not in ( select customer_id from orders )"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "e_commerce",
      "gold": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where p.product_id not in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) >= 2 )",
          "select p.product_id , p.product_name , p.product_price , p.product_name , p.product_color from products p where p.product_id not in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) >= 2 )",
          "select p.product_id , p.product_name , p.product_name , p.product_price , p.product_color from products p where p.product_id not in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) >= 2 )",
          "select p.product_id , p.product_name , p.product_color from products p where p.product_id not in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) >= 2 )",
          "select product_id , product_name , product_price , product_color from products where product_id not in ( select product_id from order_items group by product_id having count ( * ) >= 2 )",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p left join order_items oi on p.product_id = oi.product_id group by p.product_id having count ( oi.order_id ) <= 2",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p left join order_items oi on p.product_id = oi.product_id group by p.product_id having count ( oi.order_id ) <= 2"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "e_commerce",
      "gold": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
      "infer_predictions": [
        [
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) < 2 )",
          "select products.product_id , products.product_name , products.product_price , products.product_color from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id having count ( * ) < 2",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where ( select count ( * ) from order_items oi where oi.product_id = p.product_id ) < 2",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where ( select count ( distinct oi.order_id ) from order_items oi where oi.product_id = p.product_id ) < 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) < 2",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where ( select count ( distinct oi.product_id ) from order_items oi where oi.product_id = p.product_id ) < 2",
          "select p.product_id , p.product_name , p.product_price , p.product_color from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( distinct oi.order_id ) < 2 )"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id having count ( * ) >= 2",
          "select distinct orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( distinct order_items.product_id ) >= 2",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id and orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select distinct o.order_id , o.date_order_placed from orders o where o.order_id in ( select oi.order_id from order_items oi group by oi.order_id having count ( distinct oi.product_id ) >= 2 )",
          "select distinct o.order_id , o.date_order_placed from orders o where o.order_id in ( select oi.order_id from order_items oi group by oi.order_id having count ( oi.product_id ) >= 2 )",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select o.order_id , o.date_order_placed from orders o where o.order_id in ( select oi.order_id from order_items oi group by oi.order_id having count ( distinct oi.product_id ) >= 2 )",
          "select distinct o.order_id , o.date_order_placed from orders o where exists ( select 1 from order_items oi where oi.order_id = o.order_id group by oi.order_id having count ( distinct oi.product_id ) >= 2 )",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id having count ( * ) >= 2",
          "select distinct orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( distinct order_items.product_id ) >= 2"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select order_items.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select product_id , product_name , product_price from products where product_id in ( select product_id from order_items group by product_id having count ( order_id ) = ( select max ( cnt ) from ( select count ( order_id ) as cnt from order_items group by product_id ) tmp ) )",
          "select product_id , product_name , product_price from products where product_id in ( select product_id from order_items group by product_id having count ( order_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from order_items group by product_id ) tmp ) )"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select order_items.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select p.product_id , p.product_name , p.product_price from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from order_items group by product_id ) ) )",
          "select p.product_id , p.product_name , p.product_price from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from order_items group by product_id ) ) )",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select p.product_id , p.product_name , p.product_price from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from order_items group by product_id ) t ) )",
          "select p.product_id , p.product_name , p.product_price from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from order_items group by product_id ) t ) )"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select orders.order_id , sum ( products.product_price ) from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "e_commerce",
      "gold": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 56,
      "db_id": "e_commerce",
      "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select cpm.payment_method_code from customer_payment_methods cpm group by cpm.payment_method_code having count ( cpm.payment_method_code ) = ( select max ( count ) from ( select count ( * ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cpm.payment_method_code from customer_payment_methods cpm group by cpm.payment_method_code having count ( cpm.payment_method_code ) = ( select max ( count ) from ( select count ( payment_method_code ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cpm.payment_method_code from customer_payment_methods as cpm group by cpm.payment_method_code having count ( cpm.payment_method_code ) = ( select max ( count ) from ( select count ( * ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cpm.payment_method_code from customer_payment_methods as cpm group by cpm.payment_method_code having count ( cpm.payment_method_code ) = ( select max ( count ) from ( select count ( payment_method_code ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cp.payment_method_code from customer_payment_methods cp group by cp.payment_method_code having count ( cp.payment_method_code ) = ( select max ( count ) from ( select count ( * ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cp.payment_method_code from customer_payment_methods as cp group by cp.payment_method_code having count ( cp.payment_method_code ) = ( select max ( count ) from ( select count ( * ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cp.payment_method_code from customer_payment_methods cp group by cp.payment_method_code having count ( cp.payment_method_code ) = ( select max ( count ) from ( select count ( payment_method_code ) as count from customer_payment_methods group by payment_method_code ) )",
          "select cp.payment_method_code from customer_payment_methods as cp group by cp.payment_method_code having count ( cp.payment_method_code ) = ( select max ( count ) from ( select count ( payment_method_code ) as count from customer_payment_methods group by payment_method_code ) )"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "e_commerce",
      "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with popularpayment as ( select payment_method_code , count ( customer_id ) as popularity from customer_payment_methods group by payment_method_code ) select payment_method_code from popularpayment where popularity = ( select max ( popularity ) from popularpayment )",
          "with popularpayment as ( select payment_method_code , count ( distinct customer_id ) as popularity from customer_payment_methods group by payment_method_code ) select payment_method_code from popularpayment where popularity = ( select max ( popularity ) from popularpayment )",
          "with paymentcounts as ( select payment_method_code , count ( customer_id ) as num_customers from customer_payment_methods group by payment_method_code ) select payment_method_code from paymentcounts order by num_customers desc limit 1",
          "with paymentcounts as ( select payment_method_code , count ( distinct customer_id ) as num_customers from customer_payment_methods group by payment_method_code ) select payment_method_code from paymentcounts order by num_customers desc limit 1",
          "with paymentcounts as ( select payment_method_code , count ( customer_id ) as num from customer_payment_methods group by payment_method_code ) select payment_method_code from paymentcounts order by num desc limit 1",
          "with paymentcount as ( select payment_method_code , count ( customer_id ) as num from customer_payment_methods group by payment_method_code ) select payment_method_code from paymentcount where num = ( select max ( num ) from paymentcount )"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders join order_items on customers.customer_id = orders.customer_id join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , sum ( order_items.product_id ) from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders join order_items on customers.customer_id = orders.customer_id join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by gender_code",
          "select customers.gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code",
          "select gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id group by gender_code"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by gender_code",
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customers.customer_first_name , customers.customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customer_first_name , customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customer_first_name , customer_middle_initial , customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customer_first_name , customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customer_first_name , customer_middle_initial , customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customer_first_name , customer_middle_initial , customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customer_first_name , customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customer_first_name , customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customer_first_name , customer_first_name , customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
      "infer_predictions": [
        [
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from shipments join invoices on shipments.invoice_number = invoices.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
      "infer_predictions": [
        [
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoice_status_code , invoice_date , shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 67,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 68,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
      "infer_predictions": [
        [
          "select order_items.order_item_status_code , shipments.shipment_tracking_number from order_items join shipments on order_items.order_item_id = shipments.order_id"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
      "infer_predictions": [
        [
          "select order_item_status_code from order_items where order_id in ( select order_id from shipments ) and order_item_id in ( select order_item_id from shipment_items )",
          "select order_item_status_code from order_items where order_id in ( select order_id from shipments ) and order_item_id in ( select order_id from shipment_items )",
          "select order_item_status_code from order_items where order_item_id in ( select order_id from shipments ) and order_item_id in ( select order_id from shipment_items )"
        ]
      ]
    },
    {
      "id": 70,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        [
          "select product_name , product_color from products where product_id in ( select product_id from order_items )",
          "select product_name , product_color from products where product_id in ( select product_id from order_items where order_item_id in ( select order_id from shipments ) )"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        [
          "select product_name , product_color from products where product_id in ( select product_id from shipment_items )",
          "select products.product_name , products.product_color from products join order_items on products.product_id = order_items.product_id join shipments on order_items.order_item_id = shipments.order_id where shipments.shipment_date > 0",
          "select products.product_name , products.product_color from shipments join order_items on shipments.shipment_id = order_items.order_item_id join products on order_items.product_id = products.product_id",
          "select products.product_name , products.product_color from products join order_items on products.product_id = order_items.product_id join shipments on order_items.order_item_id = shipments.order_id where shipments.shipment_date > 0"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "e_commerce",
      "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
      "infer_predictions": [
        [
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id where customers.gender_code = 'Female'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where customers.gender_code = 'Female'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "e_commerce",
      "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
      "infer_predictions": [
        [
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id where customers.gender_code = 'Female'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items on customers.customer_id = orders.customer_id join products on order_items.product_id = products.product_id where customers.gender_code = 'Female'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where customers.gender_code = 'Female'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items on customers.customer_id = orders.customer_id join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id where customers.gender_code = 'Female'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id where customers.gender_code = 'Female'"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "e_commerce",
      "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
      "infer_predictions": [
        [
          "select invoice_status_code from invoices where invoice_number not in ( select invoice_number from shipments )",
          "select order_status_code from orders where order_id not in ( select order_id from shipments )"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "e_commerce",
      "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
      "infer_predictions": [
        [
          "select invoice_status_code from invoices where invoice_number not in ( select invoice_number from shipments )",
          "select order_status_code from orders where order_id not in ( select order_id from shipments )",
          "select invoice_status_code from invoices where invoice_number in ( select invoice_number from shipments where order_id in ( select order_id from orders ) )",
          "select invoice_status_code from invoices where invoices.invoice_number not in ( select invoice_number from shipments )"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "e_commerce",
      "gold": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 77,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 78,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from orders"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from orders",
          "select count ( distinct customer_id ) from ( select customer_id from orders )"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
      "infer_predictions": [
        [
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_item_status_code ) from ( select order_item_status_code from order_items )",
          "select count ( distinct order_item_status_code ) from ( select order_items.order_item_status_code from order_items join orders on order_items.order_id = orders.order_id )",
          "select count ( distinct order_items.order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id",
          "select count ( distinct order_items.order_item_status_code ) from order_items join orders on order_items.order_id = orders.order_id",
          "select count ( distinct order_item_status_code ) from ( select order_items.order_item_status_code from order_items join orders on orders.order_id = order_items.order_id )"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
      "infer_predictions": [
        [
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id",
          "select count ( distinct order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id",
          "select count ( distinct order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
      "infer_predictions": [
        [
          "select count ( distinct payment_method_code ) from customer_payment_methods"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
      "infer_predictions": [
        [
          "select count ( distinct payment_method_code ) from customer_payment_methods"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "e_commerce",
      "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
      "infer_predictions": [
        [
          "select login_name , login_password from customers where phone_number like '%+12%'",
          "select login_name , login_password from customers where phone_number like '%12%'",
          "select login_name , login_password from customers where phone_number like '+12%'",
          "select login_name , login_password from customers where phone_number like '%12%'",
          "select login_name , login_password from customers where phone_number like '%+12%'",
          "select login_name , login_password from customers where phone_number like '%+12'",
          "select login_name , login_password from customers where phone_number like '%12.'",
          "select login_name , login_password from customers where phone_number like '%12.%'"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "e_commerce",
      "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
      "infer_predictions": [
        [
          "select customer_first_name , login_password from customers where phone_number like '%12%'",
          "select customer_first_name , login_password from customers where phone_number like '+12%'",
          "select customer_first_name , login_password from customers where phone_number like '%+12%'",
          "select customer_first_name , login_password from customers where phone_number like '%12%'",
          "select customer_first_name , login_password from customers where phone_number like '+12%'"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "e_commerce",
      "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
      "infer_predictions": [
        [
          "select product_size from products where product_name like '%Dell%'",
          "select product_size from products where instr ( product_name , 'Dell' ) > 0",
          "select product_size from products where instr ( product_name , '%Dell%' ) > 0",
          "select distinct product_size from products where product_name like '%Dell%'"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "e_commerce",
      "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
      "infer_predictions": [
        [
          "select product_size from products where product_name like '%Dell%'",
          "select product_size from products where product_name like '%Dell%'",
          "select product_size from products where product_name like '%Dell%' or product_name like '%Dell%'"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "e_commerce",
      "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
      "infer_predictions": [
        [
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "Select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "e_commerce",
      "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
      "infer_predictions": [
        [
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( distinct product_id ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from ( select product_id from products where product_id not in ( select product_id from order_items ) )",
          "select count ( distinct product_name ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id in ( select product_id from order_items )",
          "select count ( * ) from products where product_ID not in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( distinct product_id ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_payment_methods )",
          "select count ( * ) from customers where customer_Id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_Id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_ID not in ( select customer_id from customer_payment_methods )"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
      "infer_predictions": [
        [
          "select order_status_code , date_order_placed from orders",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as _",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as date_order_placed",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as '*'",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as 'Status'",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as dates",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as 'orders'",
          "select order_status_code , date_order_placed from ( select order_status_code , date_order_placed from orders ) as 'order_status'"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
      "infer_predictions": [
        [
          "select order_status_code , date_order_placed from orders",
          "select order_status_code , date_order_placed from orders",
          "select order_status_code , date_order_placed as order_status_code , date_order_placed from orders",
          "select ( order_status_code ) , ( date_order_placed ) from orders"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "e_commerce",
      "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
      "infer_predictions": [
        [
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'United States'"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "e_commerce",
      "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
      "infer_predictions": [
        [
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'United State'"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , products.product_name from customers join orders on customers.customer_id = orders.customer_id join products on orders.order_id = products.product_id"
        ]
      ]
    },
    {
      "id": 99,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id",
          "select customers.customer_first_name , products.product_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id",
          "select customers.customer_first_name , products.product_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by customers.customer_first_name order by customers.customer_first_name asc",
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.customer_first_name order by customers.customer_first_name asc",
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.customer_first_name"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Shipment_Items",
      "infer_predictions": [
        [
          "select count ( * ) from shipments",
          "select count ( * ) from ( select shipment_items.shipment_id from shipment_items join shipments on shipment_items.shipment_id = shipments.shipment_id ) as num_items",
          "select count ( * ) from ( select shipment_items.shipment_id from shipment_items join shipments on shipment_items.shipment_id = shipments.shipment_id )",
          "select count ( * ) from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id group by shipments.shipment_id",
          "select count ( * ) from ( select shipment_id from shipments ) as num_items"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Shipment_Items",
      "infer_predictions": [
        [
          "select count ( * ) from shipments",
          "select count ( distinct oi.product_id ) from order_items oi , shipments s where oi.order_item_id = s.order_id and s.shipment_id = s.shipment_id",
          "select count ( distinct p.product_id ) from products p join order_items oi on p.product_id = oi.product_id join shipments s on oi.order_item_id = s.order_id",
          "select count ( distinct oi.product_id ) from order_items oi , shipments s where oi.order_id = s.order_id and s.shipment_id = s.shipment_id and s.shipment_id = s.shipment_id and s.shipment_id = oi.order_id"
        ]
      ]
    },
    {
      "id": 102,
      "db_id": "e_commerce",
      "gold": "SELECT avg(product_price) FROM Products",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "e_commerce",
      "gold": "SELECT avg(product_price) FROM Products",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products",
          "select avg ( product_price ) from products",
          "select avg ( product_price  ) from products",
          "Select avg ( product_price ) from products"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "e_commerce",
      "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id",
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id and orders.customer_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id and orders.customer_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id",
          "select avg ( product_price ) from products where product_id in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "e_commerce",
      "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id group by products.product_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id",
          "select avg ( product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id group by order_items.product_id",
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select avg ( product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by order_items.product_id order by sum ( products.product_price ) asc limit 1"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "e_commerce",
      "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
      "infer_predictions": [
        [
          "select email_address , town_city , county from customers group by gender_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "e_commerce",
      "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
      "infer_predictions": [
        [
          "select email_address , town_city , county from customers where gender_code in ( select customer_id from orders group by customer_id having count ( customer_id ) = ( select min ( count ) from ( select count ( customer_id ) as count from orders group by customer_id ) ) )",
          "select email_address , town_city , county from customers where gender_code in ( select customer_id from orders group by customer_id having count ( customer_id ) = ( select min ( counted ) from ( select count ( customer_id ) as counted from orders group by customer_id ) ) )",
          "select email_address , town_city , county from customers where gender_code in ( select customer_id from orders group by customer_id having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from orders group by customer_id ) ) )"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "e_commerce",
      "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select date_order_placed from orders where customer_id in ( select customer_id from customer_payment_methods group by customer_id having count ( distinct payment_method_code ) >= 2 )",
          "select distinct o.date_order_placed from orders o where o.customer_id in ( select customer_id from customer_payment_methods group by customer_id having count ( distinct payment_method_code ) >= 2 )",
          "select distinct date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by orders.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by orders.customer_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "e_commerce",
      "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by orders.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by orders.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2",
          "select orders.date_order_placed from customers join orders on customers.customer_id = orders.customer_id group by customers.customer_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select max ( count ) from ( select count ( order_status_code ) as count from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select max ( counted ) from ( select count ( order_status_code ) as counted from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from ( select order_status_code , count ( * ) as count from orders group by order_status_code ) where count = ( select max ( count ) from ( select count ( * ) as count from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select max ( counted ) from ( select count ( * ) as counted from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select max ( count ) from ( select count ( order_status_code ) as count from orders group by order_status_code ) as cnt )",
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from orders group by order_status_code ) as cnt )"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from orders group by order_status_code order by count ( * ) asc limit 1",
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select min ( count ) from ( select count ( order_status_code ) as count from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select min ( count_order ) from ( select count ( order_status_code ) as count_order from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select min ( cnt ) from ( select count ( order_status_code ) as cnt from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( * ) = ( select min ( counted ) from ( select count ( * ) as counted from orders group by order_status_code ) )",
          "select order_status_code from orders group by order_status_code having count ( order_status_code ) = ( select min ( counted ) from ( select count ( order_status_code ) as counted from orders group by order_status_code ) )"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) >= 3",
          "select order_items.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from products join order_items on products.product_id = order_items.product_id group by products.product_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select p.product_id , p.product_description from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( oi.order_id ) > 3 )",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3",
          "select p.product_id , p.product_description from products p where p.product_id in ( select oi.product_id from order_items oi group by oi.product_id having count ( distinct oi.order_id ) > 3 )",
          "select products.product_id , products.product_description from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by invoices.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from shipments join invoices on shipments.invoice_number = invoices.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( distinct shipments.shipment_id ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from shipments join invoices on shipments.invoice_number = invoices.invoice_number group by invoices.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from shipments join invoices on shipments.invoice_number = invoices.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by invoices.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "e_commerce",
      "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
      "infer_predictions": [
        [
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "e_commerce",
      "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
      "infer_predictions": [
        [
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "e_commerce",
      "gold": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
      "infer_predictions": [
        [
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price <= ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "e_commerce",
      "gold": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
      "infer_predictions": [
        [
          "select product_color , product_description , product_size from products where product_price != ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price != ( select max ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
      "infer_predictions": [
        [
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )",
          "Select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select Avg ( age ) from director )"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from director where age = ( select max ( age ) from director )",
          "select name from director where age = ( select max ( age ) from director )",
          "select name from director where ( age ) = ( select max ( age ) from director )",
          "select name from director where age = ( select Max ( age ) from director )",
          "select name from director where age = ( select min ( age ) from director )",
          "select name from director where age > ( select max ( age ) from director )"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "bbc_channels",
      "gold": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
      "infer_predictions": [
        [
          "select count ( * ) from channel where internet like '%bbc%'",
          "select count ( * ) from channel where internet like '%bbc%'",
          "select count ( * ) from channel where Internet like '%bbc%'",
          "select count ( * ) from channel where internet like '%bbc%'",
          "select count ( * ) from channel where internet like '%bbc%' or name like '%bbc%'"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "bbc_channels",
      "gold": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
      "infer_predictions": [
        [
          "select count ( distinct digital_terrestrial_channel ) from channel",
          "select count ( distinct digital_terrestrial_channel ) from channel"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "bbc_channels",
      "gold": "SELECT title FROM program ORDER BY start_year DESC",
      "infer_predictions": [
        [
          "select title from program order by start_year desc"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select director.name from program join director on program.director_id = director.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name from director join program on director.director_id = program.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name from program join director on program.director_id = director.director_id group by director.name order by count ( * ) desc limit 1",
          "select director.name from program join director on program.director_id = director.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name from program join director on director.director_id = program.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name from program join director on program.director_id = director.director_id group by program.director_id order by count ( * ) desc limit 1",
          "select director.name from program join director on program.director_id = director.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name from director join program on director.director_id = program.director_id group by director.director_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select director.name , director.age from director join program on director.director_id = program.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name , director.age from program join director on program.director_id = director.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select first.name , first.age from ( select director.name , director.age , count ( program.director_id ) as num_programs from director join program on director.director_id = program.director_id group by director.director_id ) first where first.num_programs = ( select max ( num_programs ) from ( select count ( director_id ) as num_programs from program group by director_id ) second )",
          "select first.name , first.age from ( select director.name , director.age , count ( program.director_id ) as num_programs from director join program on director.director_id = program.director_id group by director.director_id ) first where first.num_programs = ( select max ( num_programs ) from ( select count ( program_id ) as num_programs from program group by director_id ) second )"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "bbc_channels",
      "gold": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
      "infer_predictions": [
        [
          "select p.title from program p where p.start_year = ( select max ( start_year ) from program )",
          "select p.title from program as p where p.start_year = ( select max ( start_year ) from program )",
          "select p.title from program p where p.start_year = ( select max ( start_year ) from program )",
          "select title from program order by start_year desc limit 1",
          "select b.title from program b where b.start_year = ( select max ( start_year ) from program )"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by channel.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by program.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from program join channel on program.channel_id = channel.channel_id group by channel.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from program join channel on program.channel_id = channel.channel_id group by program.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program. channel_id group by channel.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program. channel_id group by program.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by channel. channel_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
      "infer_predictions": [
        [
          "select name , ( select count ( * ) from program where channel_id = channel.channel_id ) as program_count from channel",
          "select channel.name , count ( * ) from channel join program on channel.channel_id = program.channel_id group by channel.channel_id",
          "select name , ( select count ( * ) from program where channel_id = channel.channel_id ) as number_of_programs from channel",
          "select channel.name , count ( * ) from program join channel on program.channel_id = channel.channel_id group by channel.channel_id",
          "select name , ( select count ( * ) from program where channel_id = channel.channel_id ) as num_programs from channel",
          "select channel.name , ( select count ( * ) from program where channel_id = channel.channel_id ) as number_of_programs from channel",
          "select name , ( select count ( * ) from program where program.channel_id = channel.channel_id ) as program_count from channel",
          "select count ( * ) , channel.name from channel join program on channel.channel_id = program.channel_id group by channel.channel_id"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "bbc_channels",
      "gold": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
      "infer_predictions": [
        [
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select distinct channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
      "infer_predictions": [
        [
          "select name from director where director_id in ( select director_id from program where title = 'Dracula' )",
          "select director.name from program join director on program.director_id = director.director_id where program.title = 'Dracula'",
          "select director.name from director join program on director.director_id = program.director_id where program.title = 'Dracula'",
          "select name from director where director_id in ( select director_id from program where title = 'Dracula' )",
          "select name from director where exists ( select 1 from program where director_id = director.director_id and title = 'Dracula' )",
          "select name from director where director_id in ( select director_id from program where title = 'Dracula' )",
          "select name from director where director_id in ( select director_id from program where title = 'Dracula' )",
          "select director.name from program join director on program.director_id = director.director_id where program.title = 'Dracula'"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin.channel_id group by channel.channel_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
      "infer_predictions": [
        [
          "select name from director where age between 30 and 60",
          "select name from director where age between 30 and 60 Is not null",
          "select name from director where age between 30 and 60 Is not null",
          "select name from director where age between 30 and 60",
          "select name from director where age between 30 and 60"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 135,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
      "infer_predictions": [
        [
          "select channel_id , name from channel where channel_id not in ( select channel_id from director_admin where director_id = 'Hank Baskett' )",
          "select channel_id , name from channel where channel_id not in ( select channel_id from director_admin join director on director_admin.director_id = director.director_id where director.name = 'Hank Baskett' )",
          "select channel_id , name from channel where channel_id not in ( select channel_id from director_admin where director_id in ( select director_id from director where name = 'Hank Baskett' ) )",
          "select channel.channel_id , channel.name from channel where channel.channel_id not in ( select channel_id from director_admin where director_id = 'Hank Baskett' )",
          "select channel.channel_id , channel.name from channel where channel_id not in ( select channel_id from director_admin where director_id = 'Hank Baskett' )"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "tv_shows",
      "gold": "SELECT count(*) FROM radio",
      "infer_predictions": [
        [
          "select count ( * ) from radio"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "tv_shows",
      "gold": "select transmitter from radio order by erp_kw asc",
      "infer_predictions": [
        [
          "select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc , transmitter asc",
          "select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc , transmitter",
          "select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "tv_shows",
      "gold": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
      "infer_predictions": [
        [
          "select tv_show_name , original_airdate from tv_show",
          "select tv_show_name , original_airdate from tv_show",
          "select TV_show_name , original_airdate from tv_show"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "tv_shows",
      "gold": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
      "infer_predictions": [
        [
          "select station_name from city_channel where affiliation != 'ABC'",
          "select station_name from city_channel where affiliation != 'ABC'",
          "select station_name from city_channel where affiliation != 'ABC'",
          "select station_name from city_channel where affiliation != 'Abc'",
          "select station_name from city_channel where affiliation != 'ABC '"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
      "infer_predictions": [
        [
          "select transmitter from radio where erp_kw > 150 or erp_kw < 30",
          "select transmitter from radio where erp_kw > 150 or erp_kw < 30",
          "select transmitter from radio where erp_kw > 150 or erp_kw < 30",
          "select transmitter from radio where erp_kw > 150 or erp_kw <= 30"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
      "infer_predictions": [
        [
          "select transmitter from radio order by erp_kw desc limit 1",
          "select transmitter from radio where erp_kw = ( select max ( erp_kw ) from radio )",
          "select transmitter from radio where erp_kW = ( select max ( erp_kw ) from radio )",
          "select transmitter from radio where erp_kw = ( select max ( erp_kW ) from radio )",
          "select transmitter from radio order by erp_kW desc limit 1",
          "select transmitter from radio where erp_kW = ( select max ( erp_kW ) from radio )",
          "select transmitter from radio where erp_kw = ( select max ( erp_kw ) from radio )",
          "select transmitter from radio where ERP_kW = ( select max ( erp_kw ) from radio )"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "tv_shows",
      "gold": "SELECT avg(ERP_kW) FROM radio",
      "infer_predictions": [
        [
          "select avg ( erp_kw ) from radio",
          "select avg ( erp_kw ) from radio",
          "select avg ( erp_Kw ) from radio",
          "select avg ( erp_kW ) from radio"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from city_channel group by affiliation",
          "select ( select affiliation from city_channel group by affiliation ) , count ( * ) from city_channel group by affiliation",
          "select sub.affiliation , count ( * ) from city_channel sub group by sub.affiliation",
          "select ( affiliation ) , count ( * ) from city_channel group by affiliation",
          "select affiliation , count ( * ) from city_channel group by affiliation",
          "select affiliation as affiliation , count ( * ) from city_channel group by affiliation",
          "select affiliation , count ( * ) from city_channel group by affiliation"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from city_channel group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from city_channel group by affiliation having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from city_channel group by affiliation ) )",
          "select affiliation from city_channel group by affiliation having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from city_channel group by affiliation ) )",
          "select affiliation from city_channel group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from city_channel group by affiliation ) )",
          "select affiliation from city_channel group by affiliation having count ( affiliation ) = ( select max ( count ) from ( select count ( affiliation ) as count from city_channel group by affiliation ) )",
          "select affiliation from city_channel group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from city_channel group by affiliation ) tmp )",
          "select affiliation from city_channel group by affiliation having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from city_channel group by affiliation ) tmp )",
          "select affiliation from city_channel group by affiliation having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from city_channel group by affiliation ) as cnt )"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
      "infer_predictions": [
        [
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "tv_shows",
      "gold": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
      "infer_predictions": [
        [
          "select city , station_name from city_channel order by station_name asc"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "tv_shows",
      "gold": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
      "infer_predictions": [
        [
          "select radio.transmitter , city_channel.city from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id join city_channel on city_channel.id = city_channel_radio.city_channel_id",
          "select radio.transmitter , city_channel.city from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id join city_channel on city_channel.id = city_channel.id",
          "select radio.transmitter , city_channel.city from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id join city_channel on city_channel.id = city_channel_radio.city_channel_id",
          "select radio.transmitter , city_channel.city from city_channel_radio join city_channel on city_channel_radio.city_channel_id = city_channel.id join radio on city_channel_radio.radio_id = radio.radio_id",
          "select radio.transmitter , city_channel.city from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id join city_channel on city_channel_radio.city_channel_id = city_channel.id",
          "select radio.transmitter , city_channel.city from city_channel join city_channel_radio on city_channel.id = city_channel_radio.city_channel_id join radio on city_channel_radio.radio_id = radio.radio_id",
          "select radio.transmitter , city_channel.city from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id join city_channel on city_channel_radio.city_channel_id = city_channel.id",
          "select radio.transmitter , city_channel.city from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id join city_channel on city_channel.id = city_channel_id"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "tv_shows",
      "gold": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
      "infer_predictions": [
        [
          "select radio.transmitter , city_channel.station_name from city_channel join city_channel_radio on city_channel.id = city_channel_radio.city_channel_id join radio on city_channel_radio.radio_id = radio.radio_id order by radio.erp_kw desc",
          "select radio.transmitter , city_channel.station_name from city_channel join city_channel_radio on city_channel.id = city_channel_radio.city_channel_id join radio on radio.radio_id = city_channel_radio.radio_id order by radio.erp_kw desc",
          "select radio.transmitter , city_channel.station_name from city_channel join radio on city_channel.id = radio.radio_id order by radio.erp_kw desc"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "tv_shows",
      "gold": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
      "infer_predictions": [
        [
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by radio.radio_id",
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by radio.transmitter",
          "select radio.transmitter , count ( * ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.radio_id",
          "select radio.transmitter , count ( * ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.transmitter",
          "select radio.transmitter , count ( * ) from radio left join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.radio_id",
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by city_channel_radio.radio_id"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
      "infer_predictions": [
        [
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select distinct radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select distinct radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from vehicle where top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where top_speed = ( select max ( top_speed ) from vehicle ) and power > 6000",
          "select model from vehicle where power > 6000 and top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from vehicle where power > 6000 and top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where power > 6000 order by top_speed desc limit 1",
          "select v.model from vehicle v where v.power > 6000 and v.top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where power > 6000 and top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where power > 6000 and top_speed = ( select max ( top_speed ) from vehicle ) order by top_speed desc limit 1",
          "select model from vehicle where power > 6000 and top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where power > 6000 order by top_speed desc limit 1",
          "select model from vehicle where power > 6000 order by top_speed desc limit 1"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
      "infer_predictions": [
        [
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United State'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United Catalysts'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United States' != 'United Kingdom'",
          "Select name from driver where citizenship = 'United States'"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
      "infer_predictions": [
        [
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United State'",
          "select name from driver where citizenship = 'United States'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) <= 1",
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) <= 5",
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) <= 10",
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) <= 2",
          "select driver.driver_id , vehicle_driver.vehicle_id from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle_driver.driver_id having count ( * ) <= 1",
          "select driver.driver_id , max ( vehicle_driver.vehicle_id ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( vehicle_driver.vehicle_id ) <= 1"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "vehicle_driver",
      "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
      "infer_predictions": [
        [
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhouzhou'"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "vehicle_driver",
      "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
      "infer_predictions": [
        [
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) as maxpower , avg ( power ) as avgpower from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhouzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "vehicle_driver",
      "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle_driver.vehicle_id order by count ( * ) asc limit 1",
          "with vehiclecounts as ( select vehicle_id , count ( * ) as ct from vehicle group by vehicle_id ) select vehicle_id from vehiclecounts where ct = ( select min ( ct ) from vehiclecounts )",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "vehicle_driver",
      "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_id from vehicle_driver group by vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_id from ( select vehicle_id , count ( driver_id ) as cnt from vehicle_driver group by vehicle_id ) where cnt = ( select min ( cnt ) from ( select count ( driver_id ) as cnt from vehicle_driver group by vehicle_id ) )",
          "select vehicle_id from ( select vehicle_id , count ( * ) as cnt from vehicle_driver group by vehicle_id ) where cnt = ( select min ( cnt ) from ( select count ( vehicle_id ) as cnt from vehicle_driver group by vehicle_id ) )",
          "select vehicle_id from ( select vehicle_id , count ( driver_id ) as odometer_count from vehicle_driver group by vehicle_id ) where odometer_count = ( select min ( odometer_count ) from ( select count ( driver_id ) as odometer_count from vehicle_driver group by vehicle_id ) )",
          "select vehicle_id from ( select vehicle_id , count ( * ) as cnt from vehicle_driver group by vehicle_id ) where cnt = ( select min ( cnt ) from ( select count ( * ) as cnt from vehicle_driver group by vehicle_id ) )",
          "select vehicle_id from ( select vehicle_id , count ( driver_id ) as num_drives from vehicle_driver group by vehicle_id ) where num_drives = ( select min ( num_drives ) from ( select count ( driver_id ) as num_drives from vehicle_driver group by vehicle_id ) )",
          "select vehicle_id from ( select vehicle_id , count ( driver_id ) as ct from vehicle_driver group by vehicle_id ) where ct = ( select min ( ct ) from ( select count ( driver_id ) as ct from vehicle_driver group by vehicle_id ) )"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "vehicle_driver",
      "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
      "infer_predictions": [
        [
          "select top_speed , power from vehicle where build_year = 1996",
          "select max ( top_speed ) , max ( power ) from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = 1996"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "vehicle_driver",
      "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
      "infer_predictions": [
        [
          "select top_speed , power from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = 1996 != '1996'",
          "Select top_speed , power from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = '1996'"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "vehicle_driver",
      "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
      "infer_predictions": [
        [
          "select build_year , model , builder from vehicle",
          "Select build_year , model , builder from vehicle",
          "select build_year ,model ,builder from vehicle",
          "select build_year ,model , builder from vehicle",
          "select build_year , model , builder from vehicle",
          "select build_year , model and builder from vehicle"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "vehicle_driver",
      "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
      "infer_predictions": [
        [
          "select build_year , model , builder from vehicle",
          "Select build_year , model , builder from vehicle",
          "select build_year , model , builder from vehicle",
          "select build_year , model , builder from vehicle",
          "select build_year , model , builder from vehicle",
          "select build_year , builder , model from vehicle"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
      "infer_predictions": [
        [
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vd.driver_id ) from vehicle_driver vd join vehicle v on vd.vehicle_id = v.vehicle_id where v.build_year = 2012",
          "select count ( distinct driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vd.driver_id ) from vehicle_driver vd join vehicle v on vd.vehicle_id = v.vehicle_id where v.build_year = 2012",
          "select count ( distinct vd.driver_id ) from vehicle_driver vd join vehicle v on vd.vehicle_id = v.vehicle_id where v.build_year = '2012'",
          "select count ( distinct vd.driver_id ) from vehicle_driver vd join vehicle v on vd.vehicle_id = v.vehicle_id where v.build_year = 12"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
      "infer_predictions": [
        [
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.build_year = 2012"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
      "infer_predictions": [
        [
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct d.driver_id ) from driver d where d.racing_series = 'NASCAR'",
          "select count ( distinct d.driver_id ) from driver d where exists ( select 1 from driver d2 where d2.racing_series = 'NASCAR' and d2.driver_id = d.driver_id )",
          "select count ( distinct d.driver_id ) from driver d where exists ( select 1 from driver d2 where d2.driver_id = d.driver_id and d.racing_series = 'NASCAR' )",
          "select count ( distinct d.driver_id ) from driver d where exists ( select 1 from driver d2 where d2.driver_id = d.driver_id and d2.racing_series = 'NASCAR' )",
          "select count ( distinct d.driver_id ) from driver d where exists ( select 1 from driver d2 where d2.racing_series = 'NASCAR' and d2.driver_id = d.driver_id )"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
      "infer_predictions": [
        [
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct d.driver_id ) from driver d where d.racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct d.driver_id ) from driver d where d.racing_series = 'NASCAR'",
          "select count ( distinct driver.driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct d.driver_id ) from driver d where d.racing_series = 'Nascar'"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "vehicle_driver",
      "gold": "SELECT avg(top_speed) FROM vehicle",
      "infer_predictions": [
        [
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "vehicle_driver",
      "gold": "SELECT avg(top_speed) FROM vehicle",
      "infer_predictions": [
        [
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "Select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "vehicle_driver",
      "gold": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
      "infer_predictions": [
        [
          "select distinct driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000",
          "select distinct driver.name from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select distinct driver.name from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select distinct driver.name from driver join vehicle_driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "vehicle_driver",
      "gold": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
      "infer_predictions": [
        [
          "select driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000",
          "select driver.name from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select driver.name from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select name from driver where driver_id in ( select vehicle_driver.driver_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000 )",
          "select name from driver where driver_id in ( select driver_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000 )",
          "select name from driver where driver_id in ( select driver_id from vehicle_driver where vehicle_id in ( select vehicle_id from vehicle where power > 5000 ) )",
          "select driver.name from driver join vehicle_driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select driver.name from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.power > 5000"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
      "infer_predictions": [
        [
          "select model from vehicle where total_production > 100 or top_speed > 150"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
      "infer_predictions": [
        [
          "select model from vehicle where total_production > 100 or top_speed > 150",
          "select model from vehicle where total_production > 100 union select model from vehicle where top_speed > 150",
          "select model from vehicle where ( total_production > 100 or top_speed > 150 )",
          "select model from vehicle where total_production > 100 OR top_speed > 150",
          "select model from vehicle where total_production > 100 or top_speed > 150",
          "select model from vehicle where total_production > 100 or top_speed > 150"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "vehicle_driver",
      "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
      "infer_predictions": [
        [
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJ%'",
          "Select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJS%'"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "vehicle_driver",
      "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
      "infer_predictions": [
        [
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJ%'",
          "Select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJS%'"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
      "infer_predictions": [
        [
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle_driver.vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle_driver.vehicle_id is null",
          "select model from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle_driver.driver_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.model not in ( select model from vehicle_driver )",
          "select model from vehicle left join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle_driver.driver_id not in ( select vehicle_driver.driver_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
      "infer_predictions": [
        [
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select null from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id NOT in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id Not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver)"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.builder = 'Ziyang' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.builder = 'Ziyang'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.builder = 'Ziyang'"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
      "infer_predictions": [
        [
          "select vehicle_id , model from vehicle where builder = 'Ziyang' or vehicle_id in ( select vehicle_id from vehicle_driver where driver_id = 2 union select vehicle_id from vehicle_driver where builder = 'Ziyang' )",
          "select vehicle_id , model from vehicle where builder = 'Ziyang' or vehicle_id in ( select vehicle_id from vehicle_driver where driver_id = vehicle_driver.driver_id group by vehicle_id having count ( distinct driver_id ) = 2 )"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon'"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jefff Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name like '%Jeff Gordon%' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name like '%Jefff Gordon%'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jefffy Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jefffrey Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon' union select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jefff'"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
      "infer_predictions": [
        [
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed > ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from ( select max ( top_speed ) as max_speed from vehicle )"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
      "infer_predictions": [
        [
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from ( select max ( top_speed ) as max_speed from vehicle ) where max_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from ( select top_speed from vehicle where top_speed = ( select max ( top_speed ) from vehicle ) )",
          "select count ( * ) from ( select * from vehicle where top_speed = ( select max ( top_speed ) from vehicle ) )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from ( select max ( top_speed ) as max_speed from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver ORDER BY name",
      "infer_predictions": [
        [
          "select name from driver order by name asc",
          "select name from ( select name as name , citizenship from driver order by name asc ) as name",
          "select name from ( select name as name , citizenship from driver order by name asc ) as c",
          "select name from ( select name as name , citizenship from driver order by name asc ) as x",
          "select name from ( select name as name , citizenship from driver order by name asc ) as sorted",
          "select name from ( select name as name , citizenship from driver order by name asc ) as name",
          "select name from ( select name as name , citizenship from driver order by name asc ) as c",
          "select name from ( select name as name , citizenship from driver order by name asc ) as z"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver ORDER BY name",
      "infer_predictions": [
        [
          "select name from driver order by name asc"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
      "infer_predictions": [
        [
          "select racing_series , count ( * ) from driver group by racing_series",
          "select racing_series , count ( distinct driver_id ) from driver group by racing_series",
          "select racing_series , count ( * ) from driver group by racing_Series",
          "select count ( * ) , racing_series from driver group by racing_series",
          "select racing_series  , count ( * ) from driver group by racing_series",
          "select racing_Series , count ( * ) from driver group by racing_series"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
      "infer_predictions": [
        [
          "select count ( * ) , racing_series from driver group by racing_series",
          "select count ( distinct driver.driver_id ) , racing_series from driver group by racing_series",
          "select racing_series , count ( * ) from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_series",
          "select count ( * ) , racing_Series from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_Series"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
      "infer_predictions": [
        [
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where exists ( select 1 from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1' )",
          "select driver.name , driver.citizenship from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where exists ( select 1 from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1' )",
          "select driver.name , driver.citizenship from driver join vehicle_driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
      "infer_predictions": [
        [
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where exists ( select 1 from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1' )",
          "select driver.name , driver.citizenship from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1/'"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
      "infer_predictions": [
        [
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select distinct driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from ( select driver_id from driver except select driver_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
      "infer_predictions": [
        [
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "online_exams",
      "gold": "SELECT count(*) FROM Exams",
      "infer_predictions": [
        [
          "select count ( * ) from exams"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "online_exams",
      "gold": "SELECT count(*) FROM Exams",
      "infer_predictions": [
        [
          "select count ( * ) from exams"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "online_exams",
      "gold": "select distinct subject_code from exams order by subject_code asc",
      "infer_predictions": [
        [
          "select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
      "infer_predictions": [
        [
          "select distinct subject_code from exams order by subject_code asc"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
      "infer_predictions": [
        [
          "select exam_name , exam_date from exams where subject_code != 'Database'",
          "select exam_name , exam_date from exams where subject_code != 'Database'",
          "select exam_name , exam_date from exams where subject_code != 'Database'",
          "select exam_name , exam_date from exams where subject_code != 'Database'"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
      "infer_predictions": [
        [
          "select exam_date , exam_name from exams where subject_code != 'Database'",
          "select exam_date , exam_name from exams where subject_code != 'Database'"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
      "infer_predictions": [
        [
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where instr ( subject_code , 'data' ) > 0 order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
      "infer_predictions": [
        [
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where instr ( subject_code , 'data' ) > 0 order by exam_date desc"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
      "infer_predictions": [
        [
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code",
          "select count ( * ) , type_of_question_code from questions group by type_of_question_code"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
      "infer_predictions": [
        [
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
      "infer_predictions": [
        [
          "select distinct student_answer_text from student_answers where comments = 'Normal'",
          "select distinct student_answer_text from student_answers where comments = 'Normal' not null"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
      "infer_predictions": [
        [
          "select distinct student_answer_text from student_answers where comments = 'Normal'",
          "select distinct student_answer_text from student_answers where comments = 'Normal'",
          "select distinct student_answer_text from student_answers where comments = 'Normal'"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "online_exams",
      "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
      "infer_predictions": [
        [
          "select count ( distinct comments ) from student_answers"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "online_exams",
      "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
      "infer_predictions": [
        [
          "select count ( distinct comments ) from student_answers"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc",
          "select student_answer_text from ( select student_answer_text , count ( * ) as num_answers from student_answers group by student_answer_text ) order by num_answers desc",
          "select student_answer_text from ( select student_answer_text , count ( * ) as cnt from student_answers group by student_answer_text ) order by cnt desc",
          "select student_answer_text from ( select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc ) desc",
          "select student_answer_text from ( select student_answer_text , count ( * ) as count from student_answers group by student_answer_text ) order by count desc"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc",
          "select student_answer_text from ( select student_answer_text , count ( * ) as cnt from student_answers group by student_answer_text ) where cnt = ( select min ( cnt ) from ( select count ( * ) as cnt from student_answers group by student_answer_text ) ) order by cnt desc",
          "select student_answer_text from student_answers group by student_answer_text having count ( student_answer_text ) = ( select min ( cnt ) from ( select count ( student_answer_text ) as cnt from student_answers group by student_answer_text ) ) order by count ( student_answer_text ) desc",
          "select student_answer_text from student_answers group by student_answer_text having count ( student_answer_text ) = ( select min ( count_text ) from ( select count ( student_answer_text ) as count_text from student_answers group by student_answer_text ) ) order by count ( student_answer_text ) desc",
          "select student_answer_text from student_answers group by student_answer_text having count ( student_answer_text ) = ( select min ( count ) from ( select count ( student_answer_text ) as count from student_answers group by student_answer_text ) ) order by count ( student_answer_text ) desc",
          "select student_answer_text from student_answers group by student_answer_text having count ( student_answer_text ) = ( select min ( count ) from ( select count ( student_answer_text ) as count from student_answers group by student_answer_text ) ) order by count ( * ) desc",
          "select student_answer_text from ( select student_answer_text , count ( * ) as cnt from student_answers group by student_answer_text ) order by cnt desc"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
      "infer_predictions": [
        [
          "select s.first_name , sa.date_of_answer from student_answers sa join students s on sa.student_id = s.student_id",
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id",
          "select s.first_name , sa.date_of_answer from student_answers sa join students s on sa.student_id = sa.student_id"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
      "infer_predictions": [
        [
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id",
          "select students.first_name , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id",
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id",
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_Id"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "online_exams",
      "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
      "infer_predictions": [
        [
          "select students.email_adress , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id order by date_of_answer desc",
          "select students.email_adress , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id order by date_of_answer desc"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "online_exams",
      "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
      "infer_predictions": [
        [
          "select students.email_adress , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id order by date_of_answer desc",
          "select students.email_adress , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id order by student_answers.date_of_answer desc"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "online_exams",
      "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select assessment from student_assessments group by assessment order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "online_exams",
      "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select assessment from student_assessments group by assessment order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by student_answers.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by students.student_id having count ( * ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by students.student_id having count ( * ) >= 2",
          "select s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( sa.student_answer_id ) >= 2",
          "select distinct s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( distinct sa.student_answer_id ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by student_answers.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by first_name having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( distinct sa.student_answer_id ) >= 2",
          "select s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( sa.student_answer_id ) >= 2",
          "select s.first_name from students s join student_answers an on s.student_id = an.student_id group by s.student_id having count ( distinct an.student_answer_id ) >= 2",
          "select s.first_name from students s inner join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( distinct sa.student_answer_id ) >= 2",
          "select s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( * ) >= 2",
          "select s.first_name from students s inner join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( sa.student_answer_id ) >= 2",
          "select s.first_name from students s join student_answers sa on s.student_id = sa.student_id group by s.student_id having count ( distinct sa.student_answer_id ) >= 2"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "online_exams",
      "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( cnt ) from ( select count ( valid_answer_text ) as cnt from valid_answers group by valid_answer_text ) )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( cnt ) from ( select count ( valid_answer_text ) as cnt from valid_answers group by valid_answer_text ) tmp )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) tmp )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) as maximums )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) as maxcount )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) as most_common )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) as most_common )"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "online_exams",
      "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select valid_answer_text from valid_answers group by valid_answer_text order by count ( * ) desc limit 1",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( cnt ) from ( select count ( valid_answer_text ) as cnt from valid_answers group by valid_answer_text ) tmp )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) tmp )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) as maximums )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( count ) from ( select count ( valid_answer_text ) as count from valid_answers group by valid_answer_text ) t )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( cnt ) from ( select count ( valid_answer_text ) as cnt from valid_answers group by valid_answer_text ) )",
          "select valid_answer_text from valid_answers group by valid_answer_text having count ( valid_answer_text ) = ( select max ( cnt ) from ( select count ( valid_answer_text ) cnt from valid_answers group by valid_answer_text ) tmp )"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu != 'M'",
          "select last_name from students where gender_mfu != 'M' or gender_mfu != 'F'",
          "select last_name from students where gender_mfu != 'M' or gender_mfu = 'N'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu != 'M'",
          "select last_name from students where gender_mfu != 'M'",
          "select last_name from students where gender_mfu != 'M'",
          "select last_name from students where gender_mfu != 'M' or gender_mfu = 'N'",
          "select last_name from students where gender_mfu != 'M' != 'N'",
          "select last_name from students where gender_mfu != 'M' or gender_mfu = 'F'",
          "select last_name from students where gender_mfu != 'M'",
          "select last_name from students where gender_mfu != 'M' != 'L'"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "online_exams",
      "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
      "infer_predictions": [
        [
          "select gender_mfu , count ( * ) from students group by gender_mfu",
          "select gender_mfu , count ( * ) from students group by gender_mfu"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "online_exams",
      "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
      "infer_predictions": [
        [
          "select gender_mfu , count ( * ) from students group by gender_mfu"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'",
          "Select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "online_exams",
      "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
      "infer_predictions": [
        [
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select an.student_id from student_answers an )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_Id from student_answers )"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "online_exams",
      "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
      "infer_predictions": [
        [
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students where student_id not in ( select an.student_id from student_answers an )",
          "select first_name from students where not exists ( select 1 from student_answers where student_id = students.student_id )",
          "select first_name from students where student_id not in ( select student_Id from student_answers )",
          "select first_name from students where student_id not in ( select student_id from student_answers ) != ( select student_id from student_answers )"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers group by student_answer_text having count ( * ) = 2 intersect select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' group by student_answer_text having count ( * ) = 2",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers group by student_answer_text having count ( * ) = 2 intersect select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers group by student_answer_text having sum ( case when comments = 'Normal' then 1 else 0 end ) = 2",
          "select student_answer_text from student_answers group by student_answer_text having count ( distinct comments ) = 2",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "online_exams",
      "gold": "SELECT * FROM Students",
      "infer_predictions": [
        [
          "select * from students"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "online_exams",
      "gold": "SELECT * FROM Students",
      "infer_predictions": [
        [
          "select * from students",
          "select * from students",
          "select * from students",
          "select * from students"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Addresses",
      "infer_predictions": [
        [
          "select count ( * ) from addresses"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Addresses",
      "infer_predictions": [
        [
          "select count ( * ) from addresses"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "customers_and_orders",
      "gold": "SELECT address_id ,  address_details FROM Addresses",
      "infer_predictions": [
        [
          "select address_id , address_details from addresses"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "customers_and_orders",
      "gold": "SELECT address_id ,  address_details FROM Addresses",
      "infer_predictions": [
        [
          "select address_id , address_details from addresses"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products",
      "infer_predictions": [
        [
          "select count ( * ) from products"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products",
      "infer_predictions": [
        [
          "select count ( * ) from products"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
      "infer_predictions": [
        [
          "select product_id , product_type_code , product_name from products"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
      "infer_predictions": [
        [
          "select product_id , product_type_code , product_name from products",
          "select product_id , product_type_code , product_name as product_name from products"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitors'",
          "select product_price from products where product_name = 'Monitor'",
          "Select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitored'"
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitor' and product_price = ( select max ( product_price ) from products where product_name = 'Monitor' )",
          "select product_price from products where product_name = 'Monitor' or product_price = ( select max ( product_price ) from products where product_name = 'Monitor' )"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "customers_and_orders",
      "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
      "infer_predictions": [
        [
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price )  , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price )  , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "customers_and_orders",
      "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
      "infer_predictions": [
        [
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price )  , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "customers_and_orders",
      "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothes'"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "customers_and_orders",
      "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from Products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_Code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothe'",
          "select avg ( product_price ) from products where product_name = 'Clothes'"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'hardware'",
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_Code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'HARDWARE'"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_Code = 'Hardware'"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_Name from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "Select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products  )"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_type_code = 'Hardware'",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_Code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware'  )"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price = ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_type_code = 'Hardware'",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' ) and product_type_code = 'Hardware'"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select p.product_name from products p where p.product_type_code = 'Clothes' and p.product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select product_name from products where product_type_code = 'Clothes' and product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select p.product_name from products p where p.product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select p.product_name from products p where p.product_type_code = 'Clothes' and p.product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select p.product_name from products p where p.product_type_code = 'Clothes' and ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select p.product_name from products p where p.product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_name from products where product_type_code = 'Clothes' and product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select p.product_name from products p where p.product_type_code = 'Clothes' and p.product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select product_name from products where product_type_code = 'Clothes' and product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select product_name from products where product_type_code = 'Clothes' and product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )",
          "select product_name from products where product_type_code = 'Clothes' and product_price = ( select max ( product_price ) from products where product_type_code = 'Clothes' )"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
      "infer_predictions": [
        [
          "select p.product_id , p.product_name from products p where p.product_type_code = 'Hardware' and p.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_id , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select p.product_id , p.product_name from products p where p.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and p.product_type_code = 'Hardware'",
          "select p.product_id , p.product_name from products p where p.product_type_code = 'Hardware' and p.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select x.product_id , x.product_name from products x where x.product_type_code = 'Hardware' and x.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select p.product_id , p.product_name from products p where p.product_type_code = 'Hardware' and p.product_price = ( select min ( product_price ) from Products where product_type_code = 'Hardware' )"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and product_name = 'Hardware'",
          "select p.product_id , p.product_name from products p where p.product_type_code = 'Hardware' and p.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and product_name = 'Handy'",
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and product_type_code = 'Hardware'",
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_id , product_name from products where product_type_code = 'Hardware' and product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and product_name = 'Product_id'",
          "select p.product_id , p.product_name from products p where p.product_price = ( select min ( product_price ) from products where product_type_code = 'Hardware' ) and p.product_type_code = 'Hardware'"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
      "infer_predictions": [
        [
          "select product_name from products order by product_price desc"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
      "infer_predictions": [
        [
          "select product_name from products order by product_price desc",
          "select product_name from products order by product_price desc",
          "Select product_name from products order by product_price desc",
          "select product_Name from products order by product_price desc"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
      "infer_predictions": [
        [
          "select product_price from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_type_code from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_type_code from products where product_price = ( select max ( product_price ) from products where product_type_code = 'Hardware' ) order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
      "infer_predictions": [
        [
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' group by product_name order by product_price asc",
          "select product_name from products where product_type_code like 'Hardware' order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select ( select product_type_code from products group by product_type_code ) , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_Code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code  , count ( * ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 0 ) from products group by product_type_code",
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 1 ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 2 ) from products group by product_type_code",
          "select ( product_type_code ) , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , products.product_type_code ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 2 ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 0 ) from products group by product_type_code",
          "select product_type_code , round ( avg ( product_price ) , 1 ) from products group by product_type_code",
          "select product_type_code , avg ( product_price ) from products group by product_type_Code"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >=2",
          "select product_type_code from products group by product_type_Code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= 02"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= 3",
          "select distinct product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_Code having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select max ( cnt ) from ( select count ( product_id ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select max ( cnt ) from ( select count ( product_id ) cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select max ( cnt ) from ( select count ( * ) cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select max ( count ) from ( select count ( product_id ) as count from products group by product_type_code ) )"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) desc limit 1",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( cnt ) from ( select count ( product_type_code ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( count ) from ( select count ( product_type_code ) as count from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( cnt ) from ( select count ( product_type_code ) cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( product_count ) from ( select count ( product_type_code ) as product_count from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select max ( cnt ) from ( select count ( product_type_code ) as cnt from products group by product_type_code ) tmp )"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers",
      "infer_predictions": [
        [
          "select count ( * ) from customers",
          "select count ( * ) , customer_id from customers group by customer_id"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers",
      "infer_predictions": [
        [
          "select count ( * ) from customers"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id ,  customer_name FROM Customers",
      "infer_predictions": [
        [
          "select customer_id , customer_name from customers"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id ,  customer_name FROM Customers",
      "infer_predictions": [
        [
          "select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'John Doe' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'John Smith' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'John' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'john' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'Joe' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = 'X' )",
          "select customer_id , customer_name from customers where customer_id = ( select customer_id from customers where customer_name = '*' )"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeremiah'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerome'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeremiah'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerome'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
      "infer_predictions": [
        [
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_Code"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
      "infer_predictions": [
        [
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_Code",
          "select payment_method_Code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customers group by payment_method_code having count ( customer_id ) = ( select max ( count ) from ( select count ( customer_id ) as count from customers group by payment_method_code ) )",
          "with popularpayment as ( select payment_method_code , count ( * ) as popularity from customers group by payment_method_code ) select payment_method_code from popularpayment where popularity = ( select max ( popularity ) from popularpayment )",
          "with popularpayment as ( select payment_method_code , count ( customer_id ) as popularity from customers group by payment_method_code ) select payment_method_code from popularpayment where popularity = ( select max ( popularity ) from popularpayment )",
          "select payment_method_code from customers group by payment_method_code having count ( customer_id ) = ( select max ( count ) from ( select count ( customer_id ) as count from customers group by payment_method_code ) as maximums )",
          "select payment_method_code from customers group by payment_method_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from customers group by payment_method_code ) )",
          "select payment_method_code from customers group by payment_method_code having count ( customer_id ) = ( select max ( cnt ) from ( select count ( customer_id ) as cnt from customers group by payment_method_code ) )",
          "select payment_method_code from customers group by payment_method_code having count ( customer_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from customers group by payment_method_code ) )",
          "select payment_method_code from customers group by payment_method_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from customers group by payment_method_code ) as maximums )"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( c ) from ( select count ( payment_method_code ) as c from customers group by payment_method_code ) as maximums )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( count ) from ( select count ( payment_method_code ) as count from customers group by payment_method_code ) as maximums )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( cnt ) from ( select count ( payment_method_code ) as cnt from customers group by payment_method_code ) as maximums )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( c ) from ( select count ( payment_method_code ) as c from customers group by payment_method_code ) as maximals )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( c ) from ( select count ( payment_method_code ) as c from customers group by payment_method_code ) as max_count )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( cnt ) from ( select count ( payment_method_code ) as cnt from customers group by payment_method_code ) )",
          "select payment_method_code from customers group by payment_method_code having count ( payment_method_code ) = ( select max ( cnt ) from ( select count ( payment_method_code ) as cnt from customers group by payment_method_code ) as max_count )"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 280,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
      "infer_predictions": [
        [
          "select customer_name from customers where payment_method_code = ( select payment_method_code from customers group by payment_method_code order by count ( * ) asc limit 1 )",
          "select customer_name from customers where payment_method_code = ( select min ( c.payment_method_code ) from ( select payment_method_code , count ( * ) as payment_method_code from customers group by payment_method_code ) c )",
          "select customer_name from customers where payment_method_code = ( select min ( c.payment_method_code ) from ( select payment_method_code , count ( * ) as payment_method from customers group by payment_method_code ) c )",
          "select customer_name from customers where payment_method_code = ( select min ( c.payment_method_code ) from ( select payment_method_code , count ( * ) as payment_method from customers group by payment_method_code ) as c )",
          "select customer_name from customers where payment_method_code = ( select min ( cnt ) from ( select count ( * ) as cnt from customers group by payment_method_code ) )",
          "select customer_name from customers where payment_method_code = ( select min ( c.payment_method_code ) from ( select payment_method_code , count ( * ) as payment_method_code from customers group by payment_method_code ) as c )",
          "select customer_name from customers where payment_method_code = ( select min ( c.payment_method_code ) from ( select payment_method_code , count ( * ) as payment_volume from customers group by payment_method_code ) c )"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeremiah'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerome'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_Code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeremiah'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerome'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "customers_and_orders",
      "gold": "SELECT DISTINCT payment_method_code FROM Customers",
      "infer_predictions": [
        [
          "select distinct payment_method_code from customers"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "customers_and_orders",
      "gold": "SELECT DISTINCT payment_method_code FROM Customers",
      "infer_predictions": [
        [
          "select distinct payment_method_code from customers"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
      "infer_predictions": [
        [
          "select product_id , product_type_code from products order by product_name asc",
          "select product_id as product_id , product_type_code as product_type_code from products order by product_name asc",
          "select product_id , product_type_code from products group by product_id order by product_name asc",
          "select products.product_id , products.product_type_code from products order by products.product_name asc",
          "select product_id , product_type_code from products order by product_Name asc"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
      "infer_predictions": [
        [
          "select product_id , product_type_code from products order by product_name asc",
          "select product_id , product_type_code from products group by product_id order by product_name asc"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) asc limit 1",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( cnt ) from ( select count ( product_id ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( prodcnt ) from ( select count ( product_id ) as prodcnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( cnt ) from ( select count ( product_id ) cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( count ) from ( select count ( product_id ) as count from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select p.product_type_code from products p group by p.product_type_code having count ( p.product_id ) = ( select min ( count ) from ( select count ( product_id ) as count from products group by product_type_code ) )"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) asc limit 1",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select min ( cnt ) from ( select count ( product_type_code ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select min ( prodcnt ) from ( select count ( product_type_code ) as prodcnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_type_code ) = ( select min ( cnt ) from ( select count ( * ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select min ( prodcnt ) from ( select count ( * ) as prodcnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( product_id ) = ( select min ( cnt ) from ( select count ( product_id ) as cnt from products group by product_type_code ) )",
          "select product_type_code from products group by product_type_code having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from products group by product_type_code ) )"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( * ) from customer_orders"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( * ) from customer_orders"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select order_id , order_date , order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select order_id , order_date , order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , order_date , order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select order_id , order_date , order_status_code from customer_orders where customer_id = 'Jeromy'",
          "select o.order_id , o.order_date , o.order_status_code from customer_orders o where o.customer_id = 'Jeromy'",
          "select c.order_id , c.order_date , c.order_status_code from customer_orders c where exists ( select 1 from customer_orders co where co.customer_id = c.customer_id and co.order_status_code = 'Jeromy' )"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "customers_and_orders",
      "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_name , customers.customer_id , count ( customer_orders.order_id ) as orders_count from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( customer_orders.order_id ) as ordercount from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customer_name , customer_id , ( select count ( * ) from customer_orders where customer_id = customers.customer_id ) as ordercount from customers",
          "select customer_name , customer_id , ( select count ( order_id ) from customer_orders where customers.customer_id = customer_orders.customer_id ) as orders_count from customers",
          "select customers.customer_name , customers.customer_id , count ( * ) as ordercount from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customer_name , customer_id , ( select count ( order_id ) from customer_orders where customer_id = customers.customer_id ) as orders_count from customers",
          "select customer_name , customer_id , ( select count ( order_id ) from customer_orders where customers.customer_id = customer_orders.customer_id ) as ordercount from customers"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "customers_and_orders",
      "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_name , customers.customer_id , count ( * ) as ordercount from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) as ordercount from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customer_name , customer_id , ( select count ( * ) from customer_orders where customers.customer_id = customer_orders.customer_id ) as ordercount from customers",
          "select customers.customer_name , customers.customer_id , count ( customer_orders.order_id ) as orders_count from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( customer_orders.order_id ) as ordercount from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customer_name , customer_id , ( select count ( order_id ) from customer_orders where customers.customer_id = customer_orders.customer_id ) as orders_count from customers",
          "select customers.customer_name , customers.customer_id , count ( customer_orders.order_id ) as number_of_orders from customers left join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customer_name , customer_id , ( select count ( order_id ) from customer_orders where customers.customer_id = customer_orders.customer_id ) as ordercount from customers"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select names.customer_id , names.customer_name , names.customer_email , names.customer_phone from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) as order_count )",
          "select names.customer_id , names.customer_name , names.customer_phone , names.customer_email from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) temp )",
          "select names.customer_id , names.customer_name , names.customer_phone , names.customer_email from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) )",
          "select names.customer_id , names.customer_name , names.customer_email , names.customer_phone from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) as orders_count )",
          "select names.customer_id , names.customer_name , names.customer_email , names.customer_phone from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) as order_count )",
          "select names.customer_id , names.customer_name , names.customer_email from customers names join customer_orders orders on names.customer_id = orders.customer_id group by names.customer_id having count ( orders.order_id ) = ( select max ( order_count ) from ( select customer_id , count ( order_id ) as order_count from customer_orders group by customer_id ) as order_count )"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
      "infer_predictions": [
        [
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select sub.order_status_code , sub.order_count from ( select order_status_code , count ( * ) as order_count from customer_orders group by order_status_code ) sub",
          "select ( select order_status_code from customer_orders group by order_status_code ) , count ( * ) from customer_orders group by order_status_code",
          "select sub.order_status_code , count ( sub.order_id ) from customer_orders sub group by sub.order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select sub.order_status_code , sub.order_count from ( select order_status_code , count ( customer_id ) as order_count from customer_orders group by order_status_code ) sub",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code as order_status , count ( * ) from customer_orders group by order_status_code"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
      "infer_predictions": [
        [
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select distinct order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code as order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code , order_status_code"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from customer_orders group by order_status_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from customer_orders group by order_status_code ) )",
          "select order_status_code from customer_orders group by order_status_code having count ( order_status_code ) = ( select max ( count ) from ( select count ( order_status_code ) as count from customer_orders group by order_status_code ) )",
          "select order_status_code from customer_orders group by order_status_code having count ( order_status_code ) = ( select max ( cnt ) from ( select count ( order_status_code ) as cnt from customer_orders group by order_status_code ) tmp )",
          "select order_status_code from customer_orders group by order_status_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from customer_orders group by order_status_code ) )",
          "select order_status_code from customer_orders group by order_status_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from customer_orders group by order_status_code ) tmp )"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with ordercounts as ( select order_status_code , count ( * ) as cnt from customer_orders group by order_status_code ) select order_status_code from ordercounts where cnt = ( select max ( cnt ) from ordercounts )",
          "with ordercounts as ( select order_status_code , count ( * ) as cnt from customer_orders group by order_status_code ) select order_status_code from ordercounts ordercounts order by cnt desc limit 1",
          "with ordercounts as ( select order_status_code , count ( * ) as num from customer_orders group by order_status_code ) select order_status_code from ordercounts ordercounts order by num = ( select max ( num ) from ordercounts )",
          "with ordercounts as ( select order_status_code , count ( * ) as num from customer_orders group by order_status_code ) select order_status_code from ordercounts where num = ( select max ( num ) from ordercounts )",
          "with ordercounts as ( select order_status_code , count ( * ) as count from customer_orders group by order_status_code ) select order_status_code from ordercounts ordercounts order by count desc limit 1"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_orders )",
          "select count ( * ) from customers where customer_Id not in ( select customer_id from customer_orders )",
          "select count (* ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( customer_id ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers where customer_Id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select product_name from products where product_id not in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_name from products where product_id in ( select product_id from order_items )",
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_Name from products where product_id not in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "customers_and_orders",
      "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from products join order_items on products.product_id = order_items.product_id where products.product_name = 'Monitor'",
          "select count ( distinct order_items.order_id ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitors'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "customers_and_orders",
      "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from products join order_items on products.product_id = order_items.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'monitor'"
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_orders.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitoring'",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor Device'",
          "select count ( distinct customer_id ) from ( select customer_id from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where product_name = 'Monitor' )",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id join order_items on order_items.order_id = customer_orders.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customers.customer_id ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id",
          "select count ( distinct customer_id ) from ( select distinct customer_id from customer_orders )",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
      "infer_predictions": [
        [
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers where customer_id not in ( select customer_id from customer_orders )",
          "select customer_id from customers except select customers.customer_id from customers join customer_orders on customers.customer_id = customer_orders.customer_id"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
      "infer_predictions": [
        [
          "select customer_id from customers where customer_id not in ( select customer_id from customer_orders )",
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers where customer_id not in ( select customer_id from customer_orders )"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
      "infer_predictions": [
        [
          "select distinct co.order_date , co.order_id from customer_orders co join order_items oi on co.order_id = oi.order_id where oi.order_quantity > 6 or co.order_id in ( select order_id from order_items group by order_id having count ( distinct product_id ) > 3 )",
          "select distinct co.order_date , co.order_id from customer_orders co join order_items oi on co.order_id = oi.order_id where oi.order_quantity > 6 or co.order_id in ( select order_id from order_items group by order_id having count ( product_id ) > 3 )",
          "select distinct co.order_date , co.order_id from customer_orders co join order_items oi on co.order_id = oi.order_id where oi.order_quantity > 6 or co.order_id in ( select 1 from order_items group by order_id having count ( distinct product_id ) > 3 )",
          "select distinct co.order_date , co.order_id from customer_orders co join order_items oi on co.order_id = oi.order_id where oi.order_quantity > 6 or co.order_id group by co.order_id having count ( distinct oi.product_id ) > 3",
          "select distinct co.order_date , co.order_id from customer_orders co join order_items oi on co.order_id = oi.order_id where oi.order_quantity > 6 or co.order_id in ( select 1 from order_items group by order_id having count ( product_id ) > 3 )"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
      "infer_predictions": [
        [
          "select customer_orders.order_id , customer_orders.order_date from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 or order_items.product_id > 3"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "region_building",
      "gold": "SELECT count(*) FROM building",
      "infer_predictions": [
        [
          "select count ( * ) from building",
          "select count ( * ) from building",
          "select count ( * ) from building"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "region_building",
      "gold": "SELECT count(*) FROM building",
      "infer_predictions": [
        [
          "select count ( * ) from building"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "region_building",
      "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
      "infer_predictions": [
        [
          "select name from building order by number_of_stories asc",
          "select name from building order by number_of_stories asc , name asc",
          "select name from building order by number_of_stories asc",
          "select name from building order by number_of_stories asc"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "region_building",
      "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
      "infer_predictions": [
        [
          "select name from building order by number_of_stories asc"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "region_building",
      "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
      "infer_predictions": [
        [
          "select address from building order by completed_year desc"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "region_building",
      "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
      "infer_predictions": [
        [
          "select address from building order by completed_year desc",
          "select b.address from building b order by b.completed_year desc , b.address desc",
          "select address from building order by completed_year desc , address",
          "select address from building order by completed_year desc , address asc",
          "select b.address from building b order by b.completed_year desc , b.address desc"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "region_building",
      "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
      "infer_predictions": [
        [
          "select max ( number_of_stories ) from building where completed_year != 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "region_building",
      "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
      "infer_predictions": [
        [
          "select max ( number_of_stories ) from building where completed_year != 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980 group by completed_year",
          "select max ( number_of_stories ) from building where completed_year != 1980 group by building_id"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "region_building",
      "gold": "SELECT avg(Population) FROM region",
      "infer_predictions": [
        [
          "select avg ( population ) from region"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "region_building",
      "gold": "SELECT avg(Population) FROM region",
      "infer_predictions": [
        [
          "select avg ( population ) from region"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from region order by name asc",
          "select name from region order by name asc , name asc",
          "select name from region order by name asc",
          "select name from region order by name asc",
          "select name from region order by name asc",
          "Select name from region order by name asc"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from region order by name asc"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region WHERE Area  >  10000",
      "infer_predictions": [
        [
          "select capital from region where area > 10000",
          "select capital from region where area > 100000",
          "select capital from region where area > 10000",
          "select capital from region where area > 10000 != 10000",
          "select capital from region where area > 10000 != 0"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region WHERE Area  >  10000",
      "infer_predictions": [
        [
          "select capital from region where area > 10000",
          "select capital from region where area > 10000",
          "select capital from region where area > 10000 != 0",
          "select capital from region where area > 100000"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
      "infer_predictions": [
        [
          "select capital from region where population = ( select max ( population ) from region )",
          "select capital from region where population = ( select max ( population ) from region )",
          "select capital from region where population = ( select max ( population ) from region )"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
      "infer_predictions": [
        [
          "select capital from region where population = ( select max ( population ) from region )",
          "select capital from region where population = ( select max ( population ) from region )",
          "select capital from region where population = ( select max ( population ) from region )"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
      "infer_predictions": [
        [
          "select name from region order by area desc limit 5",
          "select r.name from region r where r.area in ( select area from region order by area desc limit 5 )",
          "select r.name from region r where r.area is not null and r.area in ( select area from region order by area desc limit 5 )",
          "select name from region where area in ( select area from region order by area desc limit 5 )",
          "select r.name from region r order by r.area desc limit 5",
          "select r.name from region r where r.area in ( select region_id from region order by area desc limit 5 )"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
      "infer_predictions": [
        [
          "select name from region order by area desc limit 5",
          "select name from region where area in ( select area from region order by area desc limit 5 )",
          "select region.name from region order by region.area desc limit 5"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "region_building",
      "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from region join building on region.region_id = building.region_id",
          "select ( select name from building where region_id = building.region_id ) , region.name from building join region on building.region_id = region.region_id",
          "select ( select name from building where region_id = building.region_id ) , name from region",
          "select building.name , region.name from building join region on building.region_id = region.region_id where building.building_id = building.building_id",
          "Select building.name , region.name from building join region on building.region_id = region.region_id"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "region_building",
      "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from region join building on region.region_id = building.region_id",
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.Name from building join region on building.region_id = region.region_id",
          "select building.Name , region.name from building join region on building.region_id = region.region_id",
          "Select building.name , region.name from building join region on building.region_id = region.region_id"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "region_building",
      "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "region_building",
      "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by building.region_id having count ( * ) > 1",
          "select name from region where region_id in ( select region_id from building group by region_id having count ( * ) > 1 )",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from region where region_id in ( select region_id from building group by region_id having count ( * ) > 1 )",
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "region_building",
      "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select region.capital from region join building on region.region_id = building.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select region.capital from region join ( select region_id from building group by region_id having count ( building_id ) = ( select max ( count ) from ( select count ( building_id ) as count from building group by region_id ) ) ) as max_region on region.region_id = max_region.region_id",
          "select region.capital from region join ( select region_id from building group by region_id having count ( building_id ) = ( select max ( count ) from ( select count ( building_id ) as count from building group by region_id ) ) ) as maxbuilt on region.region_id = maxbuilt.region_id",
          "select region.capital from region join ( select region_id from building group by region_id having count ( region_id ) = ( select max ( count ) from ( select count ( building_id ) as count from building group by region_id ) ) ) as max_region on region.region_id = max_region.region_id",
          "select region.capital from region join ( select region_id from building group by region_id having count ( region_id ) = ( select max ( count ) from ( select count ( building_id ) as count from building group by region_id ) ) ) as maxbuilt on region.region_id = maxbuilt.region_id",
          "select region.capital from region join ( select region_id from building group by region_id having count ( building_id ) = ( select max ( count ) from ( select count ( building_id ) as count from building group by region_id ) ) ) as maxbuilds on region.region_id = maxbuilds.region_id"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "region_building",
      "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select region.capital from building join region on building.region_id = region.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from region join building on region.region_id = building.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select capital from region where region_id in ( select region_id from building group by region_id having count ( building_id ) = ( select max ( counted ) from ( select count ( building_id ) as counted from building group by region_id ) ) )",
          "select capital from region where region_id in ( select region_id from building group by region_id having count ( region_id ) = ( select max ( counted ) from ( select count ( building_id ) as counted from building group by region_id ) ) )",
          "select capital from region where region_id in ( select region_id from building group by region_id having count ( region_id ) = ( select max ( counted ) from ( select count ( region_id ) as counted from building group by region_id ) ) )",
          "select region.capital from region join building on region.region_id = building.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select capital from region where region_id in ( select region_id from building group by region_id having count ( * ) = ( select max ( counted ) from ( select count ( * ) as counted from building group by region_id ) ) )"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "region_building",
      "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.address , region.capital from building join region on building.region_id = region.region_id",
          "select building.address , region.capital from region join building on region.region_id = building.region_id"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "region_building",
      "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from region join building on region.region_id = building.region_id",
          "select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from building join region on building.region_id = region.region_id where building.building_id = building.building_id",
          "Select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.Name from building join region on building.region_id = region.region_id"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "region_building",
      "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
      "infer_predictions": [
        [
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzo'",
          "select sum ( building.number_of_stories ) from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select sum ( building.number_of_stories ) from region join building on region.region_id = building.region_id where region.name = 'Abruzzo'",
          "select max ( building.number_of_stories ) from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzze'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "region_building",
      "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
      "infer_predictions": [
        [
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories , sum ( building.number_of_stories ) from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories , max ( building.number_of_stories ) from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzze'"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
      "infer_predictions": [
        [
          "select completed_year , count ( * ) from building group by completed_year",
          "select ( completed_year ) , count ( * ) from building group by completed_year"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
      "infer_predictions": [
        [
          "select completed_year , count ( * ) from building group by completed_year",
          "select completed_year , count ( * ) from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year , count ( * ) from building group by completed_year"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year from building group by completed_year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from building group by completed_year ) )",
          "select completed_year as year from building group by year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from building group by completed_year ) )",
          "select completed_year from building group by completed_year having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from building group by completed_year ) )"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year from building group by completed_year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from building group by completed_year ) )",
          "select completed_year as year from building group by year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from building group by completed_year ) )",
          "select completed_year from building group by completed_year having count ( completed_year ) = ( select max ( count ) from ( select count ( * ) as count from building group by completed_year ) )"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
      "infer_predictions": [
        [
          "select name from region where region_id not in ( select region_id from building )",
          "select name from region where region_id not in ( select region_id from building )",
          "select name from region where region_id not in ( select region_id from building )"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
      "infer_predictions": [
        [
          "select name from region where region_id not in ( select region_id from building )",
          "select region.name from region where region_id not in ( select region_id from building )",
          "select name from region where region_id not in ( select region_id from building )",
          "select name from region where area not in ( select region_id from building )",
          "select name from region where region_id not in ( select region_id from building )"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
      "infer_predictions": [
        [
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 group by completed_year having sum ( completed_year ) = 2 intersect select sum ( completed_year ) from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 group by completed_year having sum ( completed_year ) = 2 and number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 group by completed_year having sum ( completed_year ) = 1 intersect select sum ( completed_year ) from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 group by completed_year having sum ( completed_year ) = 0 intersect select sum ( completed_year ) from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 group by completed_year having sum ( completed_year ) = 1 and number_of_stories < 15"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
      "infer_predictions": [
        [
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 union select completed_year from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories <= 15"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "region_building",
      "gold": "SELECT DISTINCT Address FROM building",
      "infer_predictions": [
        [
          "select distinct address from building",
          "select distinct ( address ) from building",
          "select distinct address from building"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "region_building",
      "gold": "SELECT DISTINCT Address FROM building",
      "infer_predictions": [
        [
          "select distinct address from building"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
      "infer_predictions": [
        [
          "select completed_year from building order by number_of_stories desc"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
      "infer_predictions": [
        [
          "select completed_year from building order by number_of_stories desc , completed_year",
          "select completed_year from building order by number_of_stories desc , completed_year asc",
          "select completed_year , number_of_stories from building order by number_of_stories desc , completed_year",
          "select completed_year from building order by number_of_stories desc , completed_year",
          "select completed_year from building order by number_of_stories desc , completed_year",
          "select completed_year from building order by number_of_stories desc , completed_year",
          "select number_of_stories , completed_year from building order by number_of_stories desc , completed_year",
          "select completed_year from building order by number_of_stories desc , completed_year"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "government_shift",
      "gold": "select channel_details from channels order by channel_details",
      "infer_predictions": [
        [
          "select channel_details from channels order by channel_details asc",
          "select channel_details from channels order by channel_details asc , channel_details asc",
          "select channel_details from channels order by channel_details asc , channels.channel_details asc"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "government_shift",
      "gold": "select channel_details from channels order by channel_details",
      "infer_predictions": [
        [
          "select channel_details from channels order by channel_details asc",
          "select channel_details from channels order by channel_details asc , channel_details"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM services",
      "infer_predictions": [
        [
          "select count ( * ) from services"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM services",
      "infer_predictions": [
        [
          "select count ( * ) from services"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code order by count ( * ) desc limit 1",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( count ) from ( select count ( analytical_layer_type_code ) as count from analytical_layer group by analytical_layer_type_code ) )",
          "with typecount as ( select analytical_layer_type_code , count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) select analytical_layer_type_code from typecount where cnt = ( select max ( cnt ) from typecount )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from analytical_layer group by analytical_layer_type_code ) )",
          "with typecount as ( select analytical_layer_type_code , count ( * ) as count from analytical_layer group by analytical_layer_type_code ) select analytical_layer_type_code from typecount where count = ( select max ( count ) from typecount )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( cnt ) from ( select count ( analytical_layer_type_code ) as cnt from analytical_layer group by analytical_layer_type_code ) tmp )",
          "with codingcounts as ( select analytical_layer_type_code , count ( * ) as count from analytical_layer group by analytical_layer_type_code ) select analytical_layer_type_code from codingcounts where count = ( select max ( count ) from codingcounts )"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) tmp )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( cnt ) from ( select count ( analytical_layer_type_code ) as cnt from analytical_layer group by analytical_layer_type_code ) tmp )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) tmp )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) t )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from analytical_layer group by analytical_layer_type_code ) )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( analytical_layer_type_code ) = ( select max ( count ) from ( select count ( analytical_layer_type_code ) as count from analytical_layer group by analytical_layer_type_code ) )",
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from analytical_layer group by analytical_layer_type_code ) )"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "government_shift",
      "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
      "infer_predictions": [
        [
          "select services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select services.service_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select distinct services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "government_shift",
      "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
      "infer_predictions": [
        [
          "select services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id join customers on customers_and_services.customer_id = customers.customer_id where customers.customer_details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "government_shift",
      "gold": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
      "infer_predictions": [
        [
          "select services.service_details from customer_interactions join services on customer_interactions.service_id = services.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from services join customer_interactions on services.service_id = customer_interactions.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select service_details from services where service_id in ( select service_id from customer_interactions group by service_id having count ( customer_id ) > 3 )",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id group by customers_and_services.service_id having count ( * ) > 3",
          "select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id group by customers_and_services.service_id having count ( * ) > 3",
          "select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id group by services.service_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "government_shift",
      "gold": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select service_details from services where service_id in ( select service_id from customers_and_services group by service_id having count ( customer_id ) > 3 )",
          "select distinct s.service_details from services s where s.service_id in ( select cs.service_id from customers_and_services cs join customers c on cs.customer_id = c.customer_id group by cs.service_id having count ( distinct cs.customer_id ) > 3 )",
          "select service_details from services where service_id in ( select service_id from customers_and_services group by service_id having count ( distinct customer_id ) > 3 )",
          "select distinct s.service_details from services s where s.service_id in ( select cs.service_id from customers_and_services cs join customers c on cs.customer_id = c.customer_id group by cs.service_id having count ( distinct c.customer_id ) > 3 )",
          "select distinct s.service_details from services s join customers_and_services cs on s.service_id = cs.service_id join customers c on cs.customer_id = c.customer_id group by s.service_id having count ( distinct c.customer_id ) > 3"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "government_shift",
      "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( count ) from ( select count ( customer_id ) as count from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( cnt ) from ( select count ( customer_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( customer_count ) from ( select count ( customer_id ) as customer_count from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( counted ) from ( select count ( customer_id ) as counted from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( count ) from ( select count ( customer_id ) as count from customers_and_services group by customer_id ) cnt_interactions ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( usage_count ) from ( select count ( customer_id ) as usage_count from customers_and_services group by customer_id ) ) )"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( service_id ) = ( select max ( counted ) from ( select count ( service_id ) as counted from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( service_id ) = ( select max ( count ) from ( select count ( service_id ) as count from customers_and_services group by customer_id ) ) )",
          "select c.customer_details from customers c inner join customers_and_services cs on c.customer_id = cs.customer_id group by c.customer_id having count ( cs.service_id ) = ( select max ( count ) from ( select count ( service_id ) as count from customers_and_services group by customer_id ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( counted ) from ( select count ( service_id ) as counted from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( service_id ) = ( select max ( cnt ) from ( select count ( service_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select c.customer_details from customers c inner join customers_and_services cs on c.customer_id = cs.customer_id group by c.customer_id having count ( cs.service_id ) = ( select max ( count ) from ( select count ( service_id ) as count from customers_and_services group by customer_id ) cs )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( service_id ) = ( select max ( counted ) from ( select customer_id , count ( service_id ) as counted from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customer_id ) = ( select max ( count ) from ( select count ( service_id ) as count from customers_and_services group by customer_id ) ) )"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( cnt ) from ( select count ( distinct customers_and_services_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( cnt ) from ( select count ( distinct customer_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customers_and_services_id ) = ( select max ( cnt ) from ( select count ( customers_and_services_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customers_and_services_id ) = ( select max ( cnt ) from ( select count ( customer_id ) as cnt from customers_and_services group by customer_id ) ) )"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( cnt ) from ( select count ( distinct customers_and_services_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customers_and_services_id ) = ( select max ( cnt ) from ( select count ( customers_and_services_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( customers_and_services_id ) = ( select max ( cnt ) from ( select count ( customer_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( cnt ) from ( select count ( distinct customer_id ) as cnt from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( total_types ) from ( select count ( distinct customers_and_services_id ) as total_types from customers_and_services group by customer_id ) ) )",
          "select customer_details from customers where customer_id in ( select customer_id from customers_and_services group by customer_id having count ( distinct customers_and_services_id ) = ( select max ( total ) from ( select count ( distinct customers_and_services_id ) as total from customers_and_services group by customer_id ) ) )"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "government_shift",
      "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id not in ( select customer_id from customer_interactions )",
          "select customer_details from customers where customer_id not in ( select customer_id from customers_and_services )",
          "select customer_details from customers where customer_id not in ( select customer_Id from customer_interactions )",
          "select customer_details from customers where customer_id not in ( select customer_id from customer_interactions )"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "government_shift",
      "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id not in ( select customer_id from customers_and_services )",
          "select customer_details from customers where customer_id not in ( select customers_and_services.customer_id from customers_and_services join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id )",
          "select customer_details from customers where not exists ( select 1 from customers_and_services where customers_and_services.customer_id = customers.customer_id )",
          "select customer_details from customers where customer_id not in ( select customer_id from customers_and_services )",
          "select customer_details from customers where customer_id not in ( select customer_id from customers_and_services )",
          "select customer_details from customers where customer_id not in ( select customers_and_services.customer_id from customers_and_services join customer_interactions on customers.customer_id = customer_interactions.customer_id )",
          "select customer_details from customers where customer_id not in ( select customers_and_services.customer_id from customers_and_services join customers on customers_and_services.customer_id = customers.customer_id )"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions group by customer_id order by count ( * ) asc limit 1 )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where service_id in ( select service_id from services group by service_id order by count ( * ) asc limit 1 ) )",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id where services.service_id = ( select service_id from customers_and_services group by customer_id order by count ( * ) asc limit 1 )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions join services on customer_interactions.service_id = services.service_id group by customer_id order by count ( * ) asc limit 1 )",
          "select customer_details from customers where customer_id in ( select customers_and_services.customer_id from customers_and_services join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id group by customers_and_services.customer_id order by count ( * ) asc limit 1 )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where service_id in ( select service_id from customers_and_services group by service_id order by count ( * ) asc limit 1 ) )"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
      "infer_predictions": [
        [
          "select distinct customer_details from customers where customer_id in ( select customer_id from customers_and_services where service_id in ( select service_id from services group by service_id order by count ( * ) asc limit 1 ) )"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "government_shift",
      "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
      "infer_predictions": [
        [
          "select count ( distinct customers_and_services_details ) from customers_and_services",
          "select count ( distinct customers_and_services_details ) from customers_and_services",
          "select count ( distinct customers_and_services_details) from customers_and_services"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "government_shift",
      "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
      "infer_predictions": [
        [
          "select count ( * ) from customers_and_services",
          "select count ( * ) from customers_and_services where customers_and_services_details = ( select customers_and_services_details from customers_and_services )",
          "select count ( * ) from customers_and_services where customers_and_services_details = 'Y'",
          "select count ( * ) from customers_and_services where customers_and_services_details = 'Y'",
          "select count ( * ) from ( select customers_and_services_details from customers_and_services )",
          "select count ( * ) from customers_and_services where customers_and_services_details is not null",
          "select count ( * ) from customers_and_services where customers_and_services_details is not null",
          "select count ( * ) from customers_and_services where customers_and_services_details = 'Y' or customers_and_services.customers_and_services_details = 'N'"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "government_shift",
      "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select * from customers where customer_details like '%Kutch%' and customer_details is not null",
          "select customer_details from customers where customer_details like '%Kutz%'",
          "select customer_details from customers where customer_details like '%K\u00fctch%'"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "government_shift",
      "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like '%Kutz%'",
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like '%K\u00fctch%'",
          "Select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like \"%Kutch%\"",
          "select customer_details from customers where customer_details like '%KUTCH%'"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
      "infer_predictions": [
        [
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) )",
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) )",
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) or service_id in ( select service_id from customer_interactions where customer_id = 'Hardy Kutch' ) )",
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) ) or service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) )",
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) )"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
      "infer_predictions": [
        [
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) or service_id in ( select service_id from customer_interactions where customer_id = 'Hardy Kutch' ) )"
        ]
      ]
    },
    {
      "id": 379,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        [
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) and status_code = 'bad' )",
          "select service_details from services where service_id in ( select service_id from customer_interactions where customer_id in ( select customer_id from customers where customer_details = 'Hardy Kutch' ) and service_id in ( select service_id from customer_interactions where customer_interactions.status_code = 'Bad' ) )"
        ]
      ]
    },
    {
      "id": 380,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 381,
      "db_id": "government_shift",
      "gold": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
      "infer_predictions": [
        [
          "select services.service_details from services join customer_interactions on services.service_id = customer_interactions.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '' and customer_interactions.customer_id = 1",
          "select services.service_details from customer_interactions join services on customer_interactions.service_id = services.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '' and customer_interactions.customer_id = 1",
          "select distinct services.service_details from services join customer_interactions on services.service_id = customer_interactions.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '' and customer_interactions.customer_id = 1"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
      "infer_predictions": [
        [
          "select services.service_details from services join customer_interactions on services.service_id = customer_interactions.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '15 ij'",
          "select distinct s.service_details from services s join customer_interactions ci on s.service_id = ci.service_id join channels c on ci.channel_id = c.channel_id where c.channel_details = '15 ij'",
          "select s.service_details from services s where exists ( select 1 from customer_interactions ci join channels c on ci.channel_id = c.channel_id where ci.service_id = s.service_id and c.channel_details = '15 ij' )",
          "select distinct s.service_details from services s join customer_interactions cu on s.service_id = cu.service_id join channels c on cu.channel_id = c.channel_id where c.channel_details = '15 ij'",
          "select distinct s.service_details from services s join customer_interactions co on s.service_id = co.service_id join channels c on co.channel_id = c.channel_id where c.channel_details = '15 ij'",
          "select s.service_details from services s join customer_interactions ci on s.service_id = ci.service_id join channels c on ci.channel_id = c.channel_id where c.channel_details = '15 ij'",
          "select distinct s.service_details from services s join customer_interactions ci on s.service_id = ci.service_id join channels c  on ci.channel_id = c.channel_id where c.channel_details = '15 ij'"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where status_code = 'Stuck' intersect select customer_id from customer_interactions where services_and_channels_details = 'Bad' )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where status_code = 'Stuck' intersect select customer_id from customer_interactions where services_and_channels_details = 'bad' )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where status_code = 'Stuck' ) and customer_id in ( select customer_id from customer_interactions where services_and_channels_details = 'bad' )",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "government_shift",
      "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions where status_code = 'Stuck' intersect select customer_id from customer_interactions where services_and_channels_details = 'bad' )"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
      "infer_predictions": [
        [
          "select count ( * ) from integration_platform where integration_platform_details = 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Successful'",
          "select count ( * ) from integration_platform where integration_platform_details = 'success'",
          "select count ( * ) from integration_platform where integration_platform_details >'success'",
          "select count ( * ) from integration_platform where integration_platform_details > 0",
          "select count ( * ) from integration_platform where integration_platform_details > 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details = 'successful'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success!'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
      "infer_predictions": [
        [
          "select count ( * ) from integration_platform where integration_platform_details = 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details like '%Success%'",
          "select count ( distinct ip.integration_platform_details ) from integration_platform ip where ip.integration_platform_details = 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details != 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success%'",
          "select count ( distinct ip.integration_platform_details ) from integration_platform ip where ip.integration_platform_details = 'Success%'"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Failed' )",
          "select customer_details from customers where customer_id in ( select customer_id from integration_platform where integration_platform_id = 'failed' )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_id = 'failed' )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_id = 'Failed' )",
          "select customer_details from customers where customer_id in ( select customer_id from integration_platform where integration_platform_id = 'Failed' )",
          "select customer_details from customers where customer_id in ( select customer_id from customer_interactions join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'failed' )"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
      "infer_predictions": [
        [
          "select c.customer_details from customers c where exists ( select 1 from customer_interactions ci join integration_platform ip on ci.customer_interaction_id = ip.customer_interaction_id where ci.customer_id = c.customer_id and ip.integration_platform_details = 'Fail' )"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "government_shift",
      "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
      "infer_predictions": [
        [
          "select service_details from services where service_id not in ( select service_id from customers_and_services )",
          "select service_details from services where service_id not in ( select service_id from customer_interactions )",
          "select services.service_details from services where service_id not in ( select service_id from customers_and_services )",
          "select services.service_details from services where service_id not in ( select service_id from customer_interactions )",
          "select services.service_details from services where services.service_id not in ( select service_id from customers_and_services )"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "government_shift",
      "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
      "infer_predictions": [
        [
          "select service_details from services where service_id not in ( select service_id from customers_and_services )",
          "select service_details from services where service_id not in ( select services.service_id from customers_and_services join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id )"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
      "infer_predictions": [
        [
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code",
          "select sub.analytical_layer_type_code , sub.usage_count from ( select analytical_layer_type_code , count ( * ) as usage_count from analytical_layer group by analytical_layer_type_code ) sub",
          "select sub.analytical_layer_type_code , sub.usage_count from ( select analytical_layer_type_code , count ( * ) as usage_count from analytical_layer group by analytical_layer_type_code ) sub order by sub.usage_count desc limit 1"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
      "infer_predictions": [
        [
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code",
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_Code",
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "government_shift",
      "gold": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
      "infer_predictions": [
        [
          "select s.service_details from services s where exists ( select 1 from customers_and_services cs where cs.service_id = s.service_id and cs.customers_and_services_details = 'Unsatisfied' )",
          "select s.service_details from services s where exists ( select 1 from customers_and_services cs where cs.service_id = s.service_id and cs.customers_and_services_details = 'Unsatisfied' )",
          "select s.service_details from services s where exists ( select 1 from customers_and_services cs where cs.service_id = s.service_id and cs.customers_and_services_details = 'Unsatisfied' )"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
      "infer_predictions": [
        [
          "select service_details from services where service_id in ( select service_id from customers_and_services where customers_and_services_details = 'unsatisfied' )",
          "select service_details from services where service_id in ( select service_id from customers_and_services where customer_id in ( select customer_id from customers_and_services where customers_and_services_details = 'unsatisfied' ) )",
          "select service_details from services where service_id in ( select service_id from customers_and_services where customers_and_services_details = ( select customers_and_services_details from customers_and_services where customers_and_services_details = 'unsatisfied' ) )",
          "select service_details from services where service_id in ( select service_id from customers_and_services where customers_and_services_details in ( select customers_and_services_details from customers_and_services where customers_and_services_details = 'unsatisfied' ) )"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "vehicle_rent",
      "gold": "SELECT count(*) FROM vehicles",
      "infer_predictions": [
        [
          "select count ( * ) from vehicles"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "vehicle_rent",
      "gold": "SELECT count(*) FROM vehicles",
      "infer_predictions": [
        [
          "select count ( * ) from vehicles",
          "select count ( * ) from vehicles",
          "select count ( * ) from vehicles",
          "Select count ( * ) from vehicles"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
      "infer_predictions": [
        [
          "select name from vehicles order by model_year desc",
          "select name from vehicles order by model_year desc , name asc"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
      "infer_predictions": [
        [
          "select name from vehicles order by model_year desc",
          "Select name from vehicles order by model_year desc"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "vehicle_rent",
      "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
      "infer_predictions": [
        [
          "select distinct type_of_powertrain from vehicles",
          "select distinct ( type_of_powertrain ) from vehicles",
          "select distinct type_of_powertrain from vehicles 'Type_of_powertrain'"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "vehicle_rent",
      "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
      "infer_predictions": [
        [
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles 'type_of_powertrain'",
          "select distinct type_of_powertrain from vehicles 'Type_of_powertrain'",
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
      "infer_predictions": [
        [
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 OR model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 and model_year <= 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 14",
          "select name , type_of_powertrain and annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
      "infer_predictions": [
        [
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 OR model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year in ( 2013 , 2014 )",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 and model_year <= 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 and model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 14"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013",
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 2014",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 13",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013."
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 2014",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013",
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 2014",
          "select type_of_powertrain from vehicles where model_year >= 2013 intersect select type_of_powertrain from vehicles where model_year <= 2014",
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 14"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
      "infer_predictions": [
        [
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select ( select type_of_powertrain from vehicles group by type_of_powertrain ) , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
      "infer_predictions": [
        [
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain  , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( cnt ) from ( select count ( * ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count (* ) = ( select max ( cnt ) from ( select count ( * ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( cnt ) from ( select count ( * ) cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( cnt ) from ( select count ( * ) cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from vehicles group by type_of_powertrain ) )"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( cnt ) from ( select count ( type_of_powertrain ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( cnt ) from ( select count ( * ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( count ) from ( select count ( type_of_powertrain ) as count from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( c ) from ( select count ( type_of_powertrain ) as c from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( type_of_powertrain ) = ( select max ( cnt ) from ( select count ( type_of_powertrain ) cnt from vehicles group by type_of_powertrain ) )",
          "select type_of_powertrain from vehicles group by type_of_powertrain having count ( * ) = ( select max ( c ) from ( select count ( * ) as c from vehicles group by type_of_powertrain ) )"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "vehicle_rent",
      "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
      "infer_predictions": [
        [
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) as minfuelcost , max ( annual_fuel_cost ) as maxfuelcost , avg ( annual_fuel_cost ) as avgfuelcost from vehicles",
          "select min ( annual_fuel_cost )  , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) as minfuelcost , max ( annual_fuel_cost ) as avgfuelcost from vehicles"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "vehicle_rent",
      "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
      "infer_predictions": [
        [
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost )  , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "Select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
      "infer_predictions": [
        [
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
      "infer_predictions": [
        [
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 3",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 4"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age ,  membership_credit FROM customers",
      "infer_predictions": [
        [
          "select name , age , membership_credit from customers",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as '*'",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as 'name'",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as _",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as 'Name'",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as name",
          "select name , age , membership_credit from ( select name , age , membership_credit from customers ) as 'Show'"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age ,  membership_credit FROM customers",
      "infer_predictions": [
        [
          "select name , age , membership_credit from customers",
          "select name , membership_credit , age from customers",
          "select name , membership_credit , age from customers",
          "Select name , age , membership_credit from customers",
          "select name ,age , membership_credit from customers",
          "select name , age and membership_credit from customers"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name , age from customers where membership_credit = ( select max ( membership_credit ) from customers )",
          "select x.name , x.age from customers x where x.membership_credit = ( select max ( membership_credit ) from customers )",
          "select s.name , s.age from customers s where s.membership_credit = ( select max ( membership_credit ) from customers )",
          "select c.name , c.age from customers c where c.membership_credit = ( select max ( membership_credit ) from customers )",
          "select max ( membership_credit ) , name , age from customers group by membership_credit order by max ( membership_credit ) desc limit 1",
          "select max ( membership_credit ) , name , age from customers group by name order by max ( membership_credit ) desc limit 1"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name , age from customers where membership_credit = ( select max ( membership_credit ) from customers )",
          "select name , age from customers group by membership_credit order by sum ( membership_credit ) desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1",
          "select c.name , c.age from customers c where c.membership_credit = ( select max ( membership_credit ) from customers )",
          "select s.name , s.age from customers s where s.membership_credit = ( select max ( membership_credit ) from customers )",
          "select x.name , x.age from customers x where x.membership_credit = ( select max ( membership_credit ) from customers )",
          "select b.name , b.age from customers b where b.membership_credit = ( select max ( membership_credit ) from customers )",
          "select v.name , v.age from customers v where v.membership_credit = ( select max ( membership_credit ) from customers )"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
      "infer_predictions": [
        [
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( age ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
      "infer_predictions": [
        [
          "select avg ( age ) from customers where membership_credit > ( select avg ( age ) from customers )",
          "select avg ( age ) from customers where exists ( select 1 from customers where membership_credit > ( select avg ( age ) from customers ) )",
          "select avg ( age ) from customers where exists ( select 1 from customers where customers.membership_credit > ( select avg ( age ) from customers ) )",
          "select avg ( age ) from ( select age from customers group by membership_credit having sum ( membership_credit ) > ( select avg ( age ) from customers ) )",
          "select avg ( age ) from ( select age from customers where membership_credit > ( select avg ( age ) from customers ) )",
          "select avg ( age ) from customers group by membership_credit having avg ( membership_credit ) > ( select avg ( age ) from customers )"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "vehicle_rent",
      "gold": "SELECT * FROM discount",
      "infer_predictions": [
        [
          "select * from discount"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "vehicle_rent",
      "gold": "SELECT * FROM discount",
      "infer_predictions": [
        [
          "select * from discount"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
      "infer_predictions": [
        [
          "select vehicles.name , renting_history.total_hours from renting_history join vehicles on renting_history.vehicles_id = vehicles.id",
          "select vehicles.name , renting_history.total_hours from vehicles join renting_history on vehicles.id = renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
      "infer_predictions": [
        [
          "select vehicles.name , renting_history.total_hours from vehicles join renting_history on vehicles.id = renting_history.vehicles_id",
          "select vehicles.name , renting_history.total_hours from renting_history join vehicles on renting_history.vehicles_id = vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
      "infer_predictions": [
        [
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "Select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
      "infer_predictions": [
        [
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history)",
          "select name from vehicles where Id not in ( select vehicles_id from renting_history )"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2",
          "select name from customers where id in ( select customer_id from renting_history group by customer_id having count ( * ) >= 2 )",
          "select customers.name from customers join renting_history on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2",
          "select name from customers where id in ( select customer_id from renting_history group by customer_id having count ( distinct id ) >= 2 )"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by renting_history.customer_id having count ( distinct renting_history.id ) >= 2",
          "select customers.name from customers join renting_history on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name , model_year from vehicles where id in ( select vehicles_id from renting_history group by vehicles_id having count ( customer_id ) = ( select max ( cnt ) from ( select count ( customer_id ) as cnt from renting_history group by vehicles_id ) ) )",
          "select v.name , v.model_year from vehicles v , renting_history rh where v.id = rh.vehicles_id group by v.id having count ( rh.id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) )",
          "select name , model_year from vehicles where id in ( select vehicles_id from renting_history group by vehicles_id having count ( customer_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) ) )",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select name , model_year from vehicles where id in ( select vehicles_id from renting_history group by vehicles_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) ) )",
          "select v.name , v.model_year from vehicles v , renting_history rh where v.id = rh.vehicles_id group by v.id having count ( rh.id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) )",
          "select v.name , v.model_year from vehicles v , renting_history rh where v.id = rh.vehicles_id group by v.id having count ( rh.customer_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) )",
          "select v.name , v.model_year from vehicles v , renting_history rh where v.id = rh.vehicles_id group by v.id having count ( rh.id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by vehicles_id ) t )"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
      "infer_predictions": [
        [
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by renting_history.total_hours desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by sum ( total_hours ) desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by sum ( renting_history.total_hours ) desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by renting_history.total_hours desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id order by sum ( renting_history.total_hours ) desc",
          "select vehicles.name from renting_history join vehicles on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
      "infer_predictions": [
        [
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by renting_history.total_hours desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by total_hours desc",
          "select name from vehicles where id in ( select vehicles_id from renting_history order by total_hours desc )",
          "select vehicles.name from renting_history join vehicles on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by discount_id ) )",
          "select name from discount where id in ( select discount_id from renting_history group by discount_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by discount_id ) ) )",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from renting_history group by discount_id ) )",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.name order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id having count ( renting_history.id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from renting_history group by discount_id ) )",
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by renting_history.discount_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by discount.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
      "infer_predictions": [
        [
          "select name , type_of_powertrain from vehicles where id in ( select vehicles_id from renting_history group by vehicles_id having sum ( total_hours ) > 30 )",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id having sum ( renting_history.total_hours ) > 30"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
      "infer_predictions": [
        [
          "select name , type_of_powertrain from vehicles where id in ( select vehicles_id from renting_history group by vehicles_id having sum ( total_hours ) > 30 )",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
      "infer_predictions": [
        [
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
      "infer_predictions": [
        [
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain",
          "select avg ( city_fuel_economy_rate )  , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
      "infer_predictions": [
        [
          "select avg ( amount_of_loan ) from student_loans"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
      "infer_predictions": [
        [
          "select avg ( amount_of_loan ) from student_loans",
          "select avg ( amount_of_loan ) from student_loans"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by classes.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) >= 2 intersect select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by classes.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) <= 2"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
      "infer_predictions": [
        [
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like '%net%' )",
          "select teacher_details from teachers where teacher_id in ( select teacher_id from classes where class_details like '%data%' ) and teacher_id not in ( select teacher_id from classes where class_details like '%net%' )",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select distinct t.teacher_details from teachers t join classes c on t.teacher_id = c.teacher_id where c.class_details like '%data%' except select distinct t.teacher_details from teachers t join classes c on t.teacher_id = c.teacher_id where c.class_details like '%net%'",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' ) and not exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like 'data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like '%net%' )"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
      "infer_predictions": [
        [
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' except select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%data%' ) and not exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like 'data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like 'net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like 'data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like '%net%' )",
          "select t.teacher_details from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id and c.class_details like 'data%' ) and not exists ( select 1 from classes c2 where c2.teacher_id = t.teacher_id and c2.class_details like 'net%' )"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
      "infer_predictions": [
        [
          "select bio_data from students where student_id not in ( select student_id from detention ) or student_id not in ( select student_id from student_loans )",
          "select bio_data from students where student_id not in ( select student_id from detention union select student_id from student_loans )"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
      "infer_predictions": [
        [
          "select bio_data from students where student_id not in ( select student_id from detention ) or student_id not in ( select student_id from student_loans )",
          "select bio_data from students where student_id not in ( select student_id from detention union select student_id from student_loans )"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by achievements.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join students on student_loans.student_id = students.student_id join achievements on students.student_id = achievements.student_id group by students.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by achievements.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from achievements join student_loans on achievements.student_id = student_loans.student_id group by achievements.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) t ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) t ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) t2 ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from classes group by teacher_id ) ) )"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from classes group by teacher_id ) as counts ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from classes group by teacher_id ) as counts ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select 1 from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) ) )",
          "select t.teacher_details , t.teacher_id from teachers t where exists ( select null from classes c where c.teacher_id = t.teacher_id group by c.teacher_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from classes group by teacher_id ) as counts ) )"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
      "infer_predictions": [
        [
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct detention_type_description from ( select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code )"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
      "infer_predictions": [
        [
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on detention.detention_type_code = ref_detention_type.detention_type_code"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
      "infer_predictions": [
        [
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students.student_id",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code where students.student_details = 'yes' and ref_address_types.address_type_description = 'null'",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code where students.student_details = 'Yes' and ref_address_types.address_type_description = 'No'"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
      "infer_predictions": [
        [
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students.student_id",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id",
          "select addresses.address_details , students.bio_data from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id",
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id",
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id",
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id",
          "select addresses.address_details , students.bio_data from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id",
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id group by addresses.address_id"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on transcripts.student_id = students.student_id"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select s.bio_data , t.date_of_transcript from students s , transcripts t where s.student_id = t.student_id",
          "select s.bio_data , t.date_of_transcript from students s join transcripts t on s.student_id = t.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select s.bio_data , t.date_of_transcript from students s , transcripts t where s.student_id = t.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id",
          "select s.bio_data , t.date_of_transcript from students s join transcripts t on s.student_id = t.student_id"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select student_id , behaviour_monitoring_details from behaviour_monitoring group by student_id order by count ( * ) desc limit 1",
          "select count ( * ) , behaviour_monitoring.behaviour_monitoring_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.behaviour_monitoring_details order by count ( * ) desc limit 1",
          "select students.student_id , behaviour_monitoring.behaviour_monitoring_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select student_id , behaviour_monitoring_details from behaviour_monitoring where behaviour_monitoring_details = ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count ( * ) desc limit 1 )"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select behaviour_monitoring_details , count ( * ) from behaviour_monitoring group by behaviour_monitoring_details having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from behaviour_monitoring group by behaviour_monitoring_details ) )",
          "select behaviour_monitoring_details , count ( * ) from behaviour_monitoring group by behaviour_monitoring_details having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by behaviour_monitoring_details ) )",
          "select behaviour_monitoring_details , count ( * ) from behaviour_monitoring group by behaviour_monitoring_details order by count ( * ) desc limit 1",
          "select behaviour_monitoring_details , count ( * ) from behaviour_monitoring group by behaviour_monitoring_details having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from behaviour_monitoring group by behaviour_monitoring_details ) )"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
      "infer_predictions": [
        [
          "select s.bio_data , s.student_details from students s where s.student_id in ( select a.student_id from behaviour_monitoring a group by a.student_id having count ( a.behaviour_monitoring_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select a.student_id from behaviour_monitoring a group by a.student_id having count ( a.behaviour_monitoring_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select a.student_id from behaviour_monitoring a group by a.student_id having count ( a.behaviour_monitoring_id ) = ( select max ( cnt ) from ( select count ( student_id ) as cnt from behaviour_monitoring group by student_id ) ) )"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
      "infer_predictions": [
        [
          "select s.bio_data , s.student_details from students s where s.student_id in ( select bm.student_id from behaviour_monitoring bm group by bm.student_id having count ( bm.student_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select bm.student_id from behaviour_monitoring bm group by bm.student_id having count ( bm.behaviour_monitoring_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where exists ( select 1 from behaviour_monitoring bm where bm.student_id = s.student_id group by bm.student_id having count ( * ) = ( select max ( c ) from ( select count ( * ) as c from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where exists ( select 1 from behaviour_monitoring bm where bm.student_id = s.student_id group by bm.student_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from behaviour_monitoring group by student_id ) as cnt ) )",
          "select s.bio_data , s.student_details from students s where exists ( select 1 from behaviour_monitoring bm where bm.student_id = s.student_id group by bm.student_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select s.bio_data , s.student_details from students s where exists ( select 1 from behaviour_monitoring bm where bm.student_id = s.student_id group by bm.student_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from behaviour_monitoring group by student_id ) ) )"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
      "infer_predictions": [
        [
          "select bio_data from students where student_id = ( select student_id from behaviour_monitoring group by student_id order by count ( * ) desc limit 1 )",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select bio_data from students where student_id in ( select student_id from behaviour_monitoring group by student_id having count ( behaviour_monitoring_details ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id order by behaviour_monitoring.behaviour_monitoring_details desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id order by behaviour_monitoring.behaviour_monitoring_details desc limit 1",
          "select bio_data from students where student_id in ( select student_id from behaviour_monitoring group by student_id having count ( behaviour_monitoring_details ) = ( select max ( cnt ) from ( select count ( behaviour_monitoring_details ) as cnt from behaviour_monitoring group by student_id ) ) )"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
      "infer_predictions": [
        [
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select bio_data from students where student_id in ( select student_id from behaviour_monitoring group by student_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select bio_data from students where student_id in ( select student_id from behaviour_monitoring group by student_id having count ( behaviour_monitoring_details ) = ( select max ( cnt ) from ( select count ( * ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select bio_data from students where student_id in ( select student_id from behaviour_monitoring group by student_id having count ( behaviour_monitoring_details ) = ( select max ( cnt ) from ( select count ( behaviour_monitoring_details ) as cnt from behaviour_monitoring group by student_id ) ) )",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , student_events.event_date from student_events join students on student_events.student_id = students.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on student_events.student_id = students.student_id"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id",
          "select students.bio_data , student_events.event_date from student_events join students on student_events.student_id = students.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on student_events.student_id = students.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id where student_events.event_id != student_events.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id where student_events.event_type_code = 'Open'",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id where student_events.event_id != student_events.event_id"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select count ( distinct student_id ) , ref_event_types.event_type_description from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by ref_event_types.event_type_code order by count ( * ) desc limit 1",
          "select count ( distinct student_id ) , ref_event_types.event_type_description from ref_event_types join student_events on ref_event_types.event_type_code = student_events.event_type_code group by ref_event_types.event_type_code order by count ( * ) desc limit 1",
          "select count ( distinct student_id ) , ref_event_types.event_type_description , student_events.event_type_code from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select count ( distinct student_id ) , ref_event_types.event_type_description from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select event_type_code , count ( * ) from student_events group by event_type_code order by count ( * ) desc limit 1",
          "select event_type_code , count ( student_id ) from student_events group by event_type_code order by count ( * ) desc limit 1",
          "select event_type_code , count ( distinct student_id ) as student_count from student_events group by event_type_code having student_count = ( select max ( num_students ) from ( select count ( distinct student_id ) as num_students from student_events group by event_type_code ) )",
          "select event_type_code , count ( distinct student_id ) as num_students from student_events group by event_type_code order by num_students desc limit 1",
          "select event_type_code , count ( distinct student_id ) from student_events group by event_type_code order by count ( distinct student_id ) desc limit 1",
          "select event_type_code , count ( distinct student_id ) as total_students from student_events group by event_type_code order by total_students desc limit 1",
          "select event_type_code , count ( distinct student_id ) as student_count from student_events group by event_type_code order by student_count desc limit 1"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
      "infer_predictions": [
        [
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from achievements join ref_achievement_type on achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
          "select achievement_details , achievement_type_description from achievements join ref_achievement_type on achievements.achievement_type_code = ref_achievement_type.achievement_type_code"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
      "infer_predictions": [
        [
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from achievements join ref_achievement_type on achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from ref_achievement_type join achievements on achievements.achievement_type_code = ref_achievement_type.achievement_type_code"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
      "infer_predictions": [
        [
          "select count ( distinct teacher_id ) from classes where student_id not in ( select student_id from achievements )",
          "select count ( distinct teachers.teacher_id ) from teachers where teachers.teacher_id not in ( select classes.teacher_id from classes join students on classes.student_id = students.student_id )",
          "select count ( distinct teachers.teacher_id ) from teachers where teachers.teacher_id in ( select classes.teacher_id from classes join students on classes.student_id = students.student_id )"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
      "infer_predictions": [
        [
          "select count ( distinct teacher_id ) from classes where student_id not in ( select student_id from achievements )",
          "select count ( distinct teacher_id ) from classes where student_id in ( select student_id from achievements except select teacher_id from classes )",
          "select count ( distinct teacher_id ) from classes where student_id in ( select student_id from achievements where student_id not in ( select student_id from achievements ) )"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
      "infer_predictions": [
        [
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts order by date_of_transcript asc , transcript_details desc limit 1",
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts order by date_of_transcript asc , transcript_details asc limit 1",
          "select date_of_transcript , transcript_details from transcripts"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
      "infer_predictions": [
        [
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
      "infer_predictions": [
        [
          "select achievement_type_code , achievement_details , date_achievement from achievements",
          "select achievement_type_code , achievement_details , date_achievement from achievements",
          "select achievement_type_code , achievement_details , date_achievement from achievements"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
      "infer_predictions": [
        [
          "select achievement_type_code , achievement_details , date_achievement from achievements",
          "select achievement_type_code , achievement_details , date_achievement from achievements"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start , datetime_detention_end from detention"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start , datetime_detention_end from detention"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
      "infer_predictions": [
        [
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where instr ( student_details , 'Suite' ) > 0",
          "select bio_data from students where student_details like '%Suite%' or student_details is not null",
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where student_details like '%Suite%' or student_details is not null",
          "select bio_data from students where student_details like '%Suite%' or student_details is not null",
          "select bio_data from students where student_details like '%Suite%' or student_details is null",
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where student_details like '%Suite%' or student_details not like '%Suite%'"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
      "infer_predictions": [
        [
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where instr ( student_details , 'Suite' ) > 0",
          "select bio_data from students where student_details glob '*Suite*'",
          "select bio_data from students where student_details like '%Suite%' or student_details like '%Suite%'"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select teacher_details from teachers where teacher_id in ( select teacher_id from classes )",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_id",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select teacher_details from teachers where teacher_id in ( select teacher_id from classes )",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_id having count ( * ) = 1",
          "select student_details from students where student_id in ( select teacher_id from classes )",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by classes.teacher_id having count ( * ) = 1",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_details having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select classes.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select classes.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select s.student_id , count ( c.class_id ) as total_courses from students s join classes c on s.student_id = c.student_id group by s.student_id having total_courses = ( select max ( total_courses ) from ( select count ( class_id ) as total_courses from classes group by student_id ) )",
          "select s.student_id , count ( c.class_id ) as total_courses from students s left join classes c on s.student_id = c.student_id group by s.student_id having total_courses = ( select max ( total_courses ) from ( select count ( class_id ) as total_courses from classes group by student_id ) )"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select student_id , count ( * ) from classes group by student_id order by count ( * ) desc limit 1",
          "select students.student_id , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "infer_predictions": [
        [
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select s.student_id , s.student_details from students s join classes c on s.student_id = c.student_id group by s.student_id having count ( distinct c.class_id ) = 2",
          "select students.student_id , students.student_details from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select distinct s.student_id , s.student_details from students s join classes c on s.student_id = c.student_id group by s.student_id having count ( distinct c.class_id ) = 2",
          "select s.student_id , s.student_details from students s where exists ( select 1 from classes c where c.student_id = s.student_id group by c.student_id having count ( distinct c.class_id ) = 2 )",
          "select s.student_id , s.student_details from students s where exists ( select 1 from classes c where c.student_id = s.student_id group by c.student_id having count ( * ) = 2 )",
          "select s.student_id , s.student_details from students s where ( select count ( distinct class_id ) from classes c where c.student_id = s.student_id ) = 2"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "infer_predictions": [
        [
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) = 2",
          "select classes.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from students join classes on students.student_id = classes.student_id group by classes.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by students.student_id having count ( distinct classes.class_id ) = 2"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1",
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_Code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1",
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_Code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
      "infer_predictions": [
        [
          "select s.bio_data , s.student_details from students s where exists ( select 1 from student_loans sl where sl.student_id = s.student_id and sl.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans ) )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select student_id from student_loans where amount_of_loan > ( select avg ( amount_of_loan ) from student_loans ) )",
          "select students.bio_data , students.student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select student_id from student_loans group by student_id having avg ( amount_of_loan ) > 'average' )",
          "select s.bio_data , s.student_details from students s where s.student_id in ( select student_id from student_loans group by student_id having avg ( amount_of_loan ) > 0 )"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from students join student_loans on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as date_of_loan from student_loans ) where date_of_loan = ( select min ( date_of_loan ) from student_loans )",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as date_of_loan from student_loans ) as earliest_date",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as date_from_student_loan from student_loans ) where date_of_loan = ( select min ( date_of_loan ) from student_loans )",
          "select date_of_loan from ( select date_of_loan , max ( date_of_loan ) as date_of_loan from student_loans ) where date_of_loan = ( select min ( date_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as earliest_date from student_loans ) order by date_of_loan asc limit 1",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as earliest_date from student_loans ) order by earliest_date asc limit 1",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as date_of_loan from student_loans ) order by date_of_loan asc limit 1",
          "select date_of_loan from ( select date_of_loan , min ( date_of_loan ) as earliest_date from student_loans ) as earliest_date",
          "select date_of_loan from ( select date_of_loan , student_loan_id from student_loans order by date_of_loan asc limit 1 )",
          "select date_of_loan from ( select date_of_loan , date_of_loan from student_loans order by date_of_loan asc limit 1 )"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select bio_data from students where student_id in ( select student_id from student_loans where amount_of_loan = ( select min ( amount_of_loan ) from student_loans ) )",
          "select students.bio_data from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )",
          "select bio_data from students where student_id = ( select min ( amount_of_loan ) from student_loans )",
          "select s.bio_data from students s where exists ( select 1 from student_loans sl where sl.student_id = s.student_id and sl.amount_of_loan = ( select min ( amount_of_loan ) from student_loans ) )",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )",
          "select student_details from students where student_id in ( select student_id from student_loans where amount_of_loan = ( select min ( amount_of_loan ) from student_loans ) )",
          "select student_details from students where student_id = ( select min ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by amount_of_loan asc limit 1",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by student_loans.amount_of_loan asc limit 1",
          "select s.bio_data from students s where exists ( select 1 from student_loans sl where sl.student_id = s.student_id and sl.amount_of_loan = ( select min ( amount_of_loan ) from student_loans ) )",
          "select s.bio_data from students s inner join student_loans sl on s.student_id = sl.student_id where sl.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )",
          "select bio_data from students where student_id in ( select student_id from student_loans where amount_of_loan = ( select min ( amount_of_loan ) from student_loans ) )",
          "select s.bio_data from students s join student_loans sl on s.student_id = sl.student_id where sl.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
      "infer_predictions": [
        [
          "select date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id where student_loans.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select date_of_transcript from transcripts t join student_loans sl on t.student_id = sl.student_id where sl.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select transcripts.date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id where student_loans.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id where amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id where student_loans.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
      "infer_predictions": [
        [
          "select t.date_of_transcript from transcripts t join student_loans sl on t.student_id = sl.student_id where sl.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select t.date_of_transcript from transcripts t inner join student_loans sl on t.student_id = sl.student_id where sl.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select t.date_of_transcript from transcripts t join student_loans s on t.student_id = s.student_id where s.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select t.date_of_transcript from transcripts t inner join student_loans s on t.student_id = s.student_id where s.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )",
          "select s.date_of_transcript from transcripts s inner join student_loans sl on s.student_id = sl.student_id where sl.amount_of_loan = ( select max ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on transcripts.student_id = classes.student_id order by transcripts.date_of_transcript asc limit 1",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on classes.student_id = transcripts.student_id order by transcripts.date_of_transcript asc limit 1",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on transcripts.student_id = classes.student_id order by date_of_transcript asc limit 1",
          "select t.teacher_details from teachers t where exists ( select 1 from transcripts t where t.teacher_id = t.teacher_id and t.date_of_transcript = ( select min ( date_of_transcript ) from transcripts ) )",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join transcripts on transcripts.student_id = classes.student_id order by transcripts.date_of_transcript asc limit 1"
        ]
      ]
    },
    {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join transcripts on transcripts.student_id = classes.student_id order by transcripts.date_of_transcript asc limit 1",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on classes.student_id = transcripts.student_id order by transcripts.date_of_transcript asc limit 1",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on transcripts.student_id = classes.student_id order by transcripts.date_of_transcript asc limit 1",
          "select distinct t.teacher_details from teachers t inner join classes c on t.teacher_id = c.teacher_id inner join transcripts t on c.student_id = t.student_id where t.date_of_transcript = ( select min ( date_of_transcript ) from transcripts )",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join transcripts on classes.student_id = transcripts.student_id order by transcripts.date_of_transcript asc limit 1",
          "select distinct teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id join transcripts on classes.student_id = transcripts.student_id order by transcripts.date_of_transcript asc limit 1",
          "select distinct teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join transcripts on transcripts.student_id = classes.student_id order by transcripts.date_of_transcript asc limit 1"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id",
      "infer_predictions": [
        [
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from students s join student_loans sl on s.student_id = sl.student_id group by s.student_id",
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from student_loans sl join students s on s.student_id = sl.student_id group by s.student_id",
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from students s left join student_loans sl on s.student_id = sl.student_id group by s.student_id",
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan from students s join student_loans sl on s.student_id = sl.student_id group by s.student_id"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
      "infer_predictions": [
        [
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from students s left join student_loans sl on s.student_id = sl.student_id group by s.student_id",
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from students s join student_loans sl on s.student_id = sl.student_id group by s.student_id",
          "select s.student_id , sum ( l.amount_of_loan ) as total_loan_amount from students s join student_loans l on s.student_id = l.student_id group by s.student_id",
          "select s.student_id , sum ( sl.amount_of_loan ) as total_loan_amount from students s , student_loans sl where s.student_id = sl.student_id group by s.student_id",
          "select students.student_id , sum ( student_loans.amount_of_loan ) from students join student_loans on students.student_id = student_loans.student_id group by students.student_id",
          "select s.student_id , sum ( amount_of_loan ) from students s left join student_loans sl on s.student_id = sl.student_id group by s.student_id"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
      "infer_predictions": [
        [
          "select student_id , bio_data , ( select count ( * ) from classes where classes.student_id = students.student_id ) as total_courses from students",
          "select students.student_id , students.bio_data , count ( * ) from students join classes on students.student_id = classes.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id",
          "select student_id , bio_data , ( select count ( * ) from classes where classes.student_id = students.student_id ) as number_of_courses from students"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
      "infer_predictions": [
        [
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( classes.student_id ) as numberofcourses from students left join classes on students.student_id = classes.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( classes.class_id ) as numberofcourses from students left join classes on students.student_id = classes.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( * ) from students join classes on students.student_id = classes.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( classes.class_id ) as num_courses from students left join classes on students.student_id = classes.student_id group by students.student_id",
          "select student_id , bio_data , ( select count ( * ) from classes where classes.student_id = students.student_id ) as numberofcourses from students",
          "select student_id , bio_data , ( select count ( * ) from classes where classes.student_id = students.student_id ) as number_of_courses from students"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) FROM Detention",
      "infer_predictions": [
        [
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( * ) from detention"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) FROM Detention",
      "infer_predictions": [
        [
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention where student_id in ( select student_id from students )",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( *) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( *) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_Code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select bio_data from students where student_id in ( select student_id from student_events except select student_id from student_loans )",
          "select bio_data from students where student_id in ( select student_id from student_events except select student_id from student_loans )",
          "select bio_data from students where student_id in ( select student_id from student_events except select student_id from student_loans )"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select bio_data from students where student_id in ( select student_id from student_events except select student_id from student_loans )",
          "select bio_data from students inner join student_events on students.student_id = student_events.student_id where student_events.student_id in ( select student_id from student_loans except select student_id from student_loans )",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_events.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_events.student_id = student_loans.student_id",
          "select bio_data from students inner join student_events on students.student_id = student_events.student_id where student_events.event_id in ( select student_id from student_loans except select student_id from student_loans )",
          "select students.bio_data from students join student_events on students.student_id = student_events.student_id except select students.bio_data from students join student_loans on students.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_loans.student_id = students.student_id"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
      "infer_predictions": [
        [
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students.student_id = transcripts.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on transcripts.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students_addresses.address_id = transcripts.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.student_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on transcripts.student_id = students.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students.student_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
      "infer_predictions": [
        [
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.student_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on transcripts.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students.student_id = transcripts.student_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on transcripts.student_id = students.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students_addresses.address_id = transcripts.transcript_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join addresses on students_addresses.address_id = addresses.address_id join transcripts on students_addresses.student_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students_addresses.address_id = transcripts.transcript_id group by students.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students join students_addresses on students.student_id = students_addresses.student_id join transcripts on students_addresses.address_id = transcripts.student_id group by students.student_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start from detention",
          "select datetime_detention_start from detention order by datetime_detention_start asc limit 1",
          "select datetime_detention_start from detention where datetime_detention_start = ( select min ( datetime_detention_start ) from detention )",
          "select datetime_detention_start from detention where datetime_detention_start = ( select datetime_detention_start from detention )",
          "select datetime_detention_start from detention where datetime_detention_start is not null"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start from detention",
          "select datetime_detention_start from detention where datetime_detention_start is not null"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "book_1",
      "gold": "SELECT name FROM Author",
      "infer_predictions": [
        [
          "select name from author",
          "select name from ( select name as name , idauthor from author ) as c",
          "select name from ( select name as name , idauthor from author ) as name",
          "select name from ( select name from author ) as name",
          "select name from ( select name from author ) as tbl_name",
          "select name from ( select name as name , IDauthor from author ) as c",
          "select name from ( select name as name , IDauthor from author ) as name",
          "select name from ( select name from author ) as c"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "book_1",
      "gold": "SELECT name FROM Author",
      "infer_predictions": [
        [
          "select name from author",
          "select name from author where name is not null"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client",
      "infer_predictions": [
        [
          "select name , address from client",
          "select name , address from client where address not in ( select address from client )",
          "select name , address from client where address is not null",
          "select name , address from client where address is not null",
          "Select name , address from client",
          "select name , address from client",
          "select name , address from client"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client",
      "infer_predictions": [
        [
          "select name , address from client",
          "select name , address from client",
          "select name , address from client",
          "select name , address from client",
          "select name , address from client",
          "Select name , address from client"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "book_1",
      "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
      "infer_predictions": [
        [
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "Select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "book_1",
      "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
      "infer_predictions": [
        [
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "Select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book",
      "infer_predictions": [
        [
          "select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book",
      "infer_predictions": [
        [
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "Select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author",
          "select count ( * ) , name from author group by name"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Client",
      "infer_predictions": [
        [
          "select count ( * ) from client",
          "select count ( * ) , client.name from client join orders on client.idclient = orders.idclient group by client.idclient"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Client",
      "infer_predictions": [
        [
          "select count ( * ) from client"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client ORDER BY name",
      "infer_predictions": [
        [
          "select name , address from client order by name asc",
          "select name , address from client order by name Asc"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client ORDER BY name",
      "infer_predictions": [
        [
          "select name , address from client order by name asc",
          "Select name , address from client order by name asc",
          "select name , address from client order by name asc"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "book_1",
      "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
      "infer_predictions": [
        [
          "select title , author from book",
          "select book.title , author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor",
          "select title , author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select title , name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select title , author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "book_1",
      "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
      "infer_predictions": [
        [
          "select book.title , author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author_book.author from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author_book.author from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor",
          "select title , author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "book_1",
      "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select idorder , idclient from orders",
          "select idorder , client.name from orders join client on orders.idclient = client.idclient",
          "select idorder , name from orders join client on orders.idclient = client.idclient"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "book_1",
      "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select idorder , idclient from orders",
          "select orders.idorder , client.name from orders join client on orders.idclient = client.idclient"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "book_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.name",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.idauthor",
          "select name , ( select count ( * ) from author_book where author = author.idauthor ) as total_books from author",
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( author_book.isbn ) as total_books from author left join author_book on author.idauthor = author_book.author group by author.name",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.name",
          "select author.name , count ( author_book.isbn ) as total_books from author left join author_book on author.idauthor = author_book.author group by author.idauthor"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "book_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.idauthor",
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.name",
          "select name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.idauthor",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.name"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , count ( * ) from books_order group by isbn",
          "select book.isbn , count ( * ) from books_order join book on books_order.isbn = book.isbn group by book.isbn",
          "select book.isbn , count ( * ) from book join books_order on book.isbn = books_order.isbn group by book.isbn"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , count ( * ) from books_order group by isbn",
          "select book.isbn , count ( * ) from books_order join book on books_order.isbn = book.isbn group by book.isbn",
          "select isbn , ( select count ( * ) from books_order where books_order.isbn = book.isbn ) as ordercount from book",
          "select isbn , ( select count ( * ) from books_order where books_order.isbn = book.isbn ) as ordered_count from book"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select isbn , sum ( amount ) from books_order group by isbn"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "book_1",
      "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by books_order.idorder order by count ( * ) desc limit 1",
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from book join ( select isbn from books_order group by isbn having count ( idorder ) = ( select max ( cnt ) from ( select count ( idorder ) as cnt from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn",
          "select book.title from book join ( select isbn from books_order group by isbn having count ( idorder ) = ( select max ( counted ) from ( select count ( idorder ) as counted from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn",
          "select book.title from book join ( select isbn from books_order group by isbn having count ( idorder ) = ( select max ( count ) from ( select count ( idorder ) as count from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "book_1",
      "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select title from book join ( select isbn from books_order group by isbn having count ( idorder ) = ( select max ( cnt ) from ( select count ( idorder ) as cnt from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn",
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select title from book join ( select isbn from books_order group by isbn having count ( isbn ) = ( select max ( cnt ) from ( select count ( idorder ) as cnt from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn",
          "select title from book join ( select isbn from books_order group by isbn having count ( isbn ) = ( select max ( cnt ) from ( select count ( isbn ) as cnt from books_order group by isbn ) ) ) as maxorders on book.isbn = maxorders.isbn",
          "select title from book join ( select isbn from books_order group by isbn having count ( idorder ) = ( select max ( cnt ) from ( select count ( idorder ) as cnt from books_order group by isbn ) ) ) as maxorder on book.isbn = maxorder.isbn",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "book_1",
      "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by sum ( amount ) desc limit 1",
          "select b.title , b.purchaseprice from book b where exists ( select 1 from books_order bo where bo.isbn = b.isbn group by bo.isbn having sum ( amount ) = ( select max ( total ) from ( select sum ( amount ) as total from books_order group by isbn ) ) )",
          "select b.title , b.purchaseprice from book b , books_order bo where b.isbn = bo.isbn group by b.isbn having sum ( bo.amount ) = ( select max ( total ) from ( select sum ( amount ) as total from books_order group by isbn ) )",
          "select title , purchaseprice from book where isbn in ( select isbn from books_order group by isbn having sum ( amount ) = ( select max ( total_orders ) from ( select sum ( amount ) as total_orders from books_order group by isbn ) ) )"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "book_1",
      "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by sum ( amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.amount order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by book.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.amount order by sum ( amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by book.isbn order by sum ( amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn",
          "select book.title from book join books_order on book.isbn = books_order.isbn",
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn",
          "select title from book where isbn in ( select isbn from books_order )",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on orders.idorder = books_order.idorder",
          "select book.title from books_order join book on books_order.isbn = book.isbn"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select distinct book.title from books_order join book on books_order.isbn = book.isbn",
          "select distinct book.title from book join books_order on book.isbn = books_order.isbn",
          "select distinct book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn",
          "select distinct book.title from books_order join book on books_order.isbn = book.isbn join orders on orders.idorder = books_order.idorder",
          "select distinct book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( * ) >= 1 )",
          "select name from client where idclient in ( select idclient from orders )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) >= 1 )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( * ) > 0 )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( * ) >= 1 )",
          "select client.name from orders join client on orders.idclient = client.idclient group by orders.idclient having count ( * ) >= 1",
          "select name from client where exists ( select 1 from orders where orders.idclient = client.idclient )"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select distinct client.name from orders join client on orders.idclient = client.idclient",
          "select distinct client.name from client join orders on client.idclient = orders.idclient",
          "select distinct name from client join orders on client.idclient = orders.idclient"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.name",
          "select name , ( select count ( * ) from orders where orders.idclient = client.idclient ) as ordercount from client",
          "select name , ( select count ( * ) from orders where orders.idclient = client.idclient ) as orders_total from client",
          "select name , ( select count ( * ) from orders where orders.idclient = client.idclient ) as orders_count from client"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.idclient",
          "select name , ( select count ( * ) from orders where orders.idclient = client.idclient ) as orders_count from client",
          "select name , ( select count ( * ) from orders where orders.idclient = client.idclient ) as ordercount from client",
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.name",
          "select name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.name",
          "select name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.idclient"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) = ( select max ( counted ) from ( select count ( idorder ) as counted from orders group by idclient ) ) )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( * ) = ( select max ( counted ) from ( select count ( * ) as counted from orders group by idclient ) ) )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) = ( select max ( counted ) from ( select count ( * ) as counted from orders group by idclient ) ) )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) = ( select max ( counts ) from ( select count ( idorder ) as counts from orders group by idclient ) ) )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) = ( select max ( counted ) from ( select idclient , count ( order_buffer.idorder ) as counted from orders order_buffer group by order_buffer.idclient ) as ordercounts ) )",
          "select name from client where idclient in ( select idclient from orders group by idclient having count ( idorder ) = ( select max ( count_order ) from ( select idclient , count ( order_buffer.idorder ) as count_order from orders order_buffer group by order_buffer.idclient ) as ordercounts ) )"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from orders join client on orders.idclient = client.idclient group by orders.idclient order by count ( * ) desc limit 1",
          "select client.name from client join orders on client.idclient = orders.idclient group by client.idclient order by count ( * ) desc limit 1",
          "select c.name from client c where c.idclient in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) = ( select max ( counts ) from ( select count ( * ) as counts from orders group by idclient ) ) )",
          "select c.name from client c where c.idclient in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) = ( select max ( counts ) from ( select count ( idorder ) as counts from orders group by idclient ) ) )"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.name"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.name"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by orders.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by orders.idclient order by sum ( amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( books_order.amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by orders.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( amount ) desc limit 1",
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by orders.idclient order by sum ( amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "book_1",
      "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book where isbn not in ( select ISBN from books_order )",
          "select title from book where isbn not in ( select ISBN from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book where isbn not in ( select Isbn from books_order )"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "book_1",
      "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book where isbn not in ( select ISBN from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "book_1",
      "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client where idclient not in ( select o.idclient from orders o )",
          "select name from client where idclient not in ( select o.idclient from orders as o )",
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client where idclient not in ( select Idclient from orders )"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "book_1",
      "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client where idclient not in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) > 0 )",
          "select name from client where idclient not in ( select o.idclient from orders o )",
          "select name from client where idclient not in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) = 1 )",
          "select name from client where idclient not in ( select o.idclient from orders as o )",
          "select name from client where idclient not in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) > 1 )",
          "select name from client where idclient not in ( select o.idclient from orders o group by o.idorder having count ( o.idorder ) > 0 )",
          "select name from client where idclient not in ( select o.idclient from orders o group by o.idclient having count ( o.idorder ) >= 1 )"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) , min ( saleprice ) from book",
          "select max ( saleprice ) as maxsaleprice , min ( saleprice ) as minsaleprice from book",
          "select max ( saleprice ) as max_saleprice , min ( saleprice ) as min_saleprice from book",
          "select max ( saleprice ) as maxprice , min ( saleprice ) as minprice from book"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) , min ( saleprice ) from book"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "book_1",
      "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg (saleprice ) from book",
          "select avg (purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice )  , avg ( saleprice ) from book"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "book_1",
      "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg (saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg (purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) from book",
          "select max ( saleprice - purchaseprice ) from book",
          "select max ( saleprice - purchaseprice ) from ( select saleprice , purchaseprice from book )",
          "select max ( saleprice - purchaseprice ) from book"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) from book",
          "select saleprice from book where purchaseprice = ( select max ( saleprice ) from book )",
          "select saleprice from book where purchaseprice > ( select max ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "book_1",
      "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
      "infer_predictions": [
        [
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "book_1",
      "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
      "infer_predictions": [
        [
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "book_1",
      "gold": "select title from book order by saleprice asc limit 1",
      "infer_predictions": [
        [
          "select title from book where saleprice = ( select min ( saleprice ) from book )",
          "select title from ( select title , min ( saleprice ) as minsaleprice from book ) where minsaleprice = ( select min ( saleprice ) from book )",
          "select title from ( select title , min ( saleprice ) as min_price from book ) where min_price = ( select min ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "book_1",
      "gold": "select title from book order by saleprice asc limit 1",
      "infer_predictions": [
        [
          "select b.title from book b where b.saleprice = ( select min ( saleprice ) from book )",
          "select title from book where saleprice = ( select min ( saleprice ) from book )",
          "select b.title from book b where exists ( select 1 from book c where c.saleprice = ( select min ( saleprice ) from book ) )",
          "select b.title from book b where exists ( select 1 from book where saleprice = ( select min ( saleprice ) from book ) )",
          "select b.title from book as b where b.saleprice = ( select min ( saleprice ) from book )",
          "select b.title from book b where exists ( select 1 from book where book.saleprice = ( select min ( saleprice ) from book ) )"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "book_1",
      "gold": "select title from book order by purchaseprice  desc limit 1",
      "infer_predictions": [
        [
          "select title from book where purchaseprice = ( select max ( purchaseprice ) from book )",
          "select title from ( select title , max ( purchaseprice ) as maxprice from book ) where maxprice = ( select max ( purchaseprice ) from book )",
          "select title from ( select title , max ( purchaseprice ) as maxprice from book group by title ) where maxprice = ( select max ( purchaseprice ) from book )",
          "select title from ( select title , max ( purchaseprice ) as max_price from book ) where max_price = ( select max ( purchaseprice ) from book )",
          "select title from ( select title , max ( purchaseprice ) as maxprice from book ) where maxprice = ( select max ( purchaseprice ) from book )",
          "select title from book order by purchaseprice desc limit 1"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "book_1",
      "gold": "select title from book order by purchaseprice  desc limit 1",
      "infer_predictions": [
        [
          "select b.title from book b where b.purchaseprice = ( select max ( purchaseprice ) from book )",
          "select b.title from book as b where b.purchaseprice = ( select max ( purchaseprice ) from book )"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "book_1",
      "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
      "infer_predictions": [
        [
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn where author_book.author = 'George Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn where author_book.author = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "book_1",
      "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
      "infer_predictions": [
        [
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'G. Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = book.author where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'G.Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "book_1",
      "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
      "infer_predictions": [
        [
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Pl\u00e1to'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plastico'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plaza'"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "book_1",
      "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
      "infer_predictions": [
        [
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plastico'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Pl\u00e1to'"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 576,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
      "infer_predictions": [
        [
          "select title from book where author = 'George Orwell' and saleprice = ( select min ( saleprice ) from book where author = 'George Orwell' )",
          "select title from book where author = 'George Orwell' and saleprice = ( select min ( saleprice ) from book where author = 'George Orwell' ) and title",
          "select title from ( select title , min ( saleprice ) as min_saleprice from book where author = 'George Orwell' ) where min_saleprice = ( select min ( saleprice ) from book where author = 'George Orwell' )"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
      "infer_predictions": [
        [
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book where author = 'Plato' )",
          "select title from book where saleprice < ( select avg ( saleprice ) from book where author = 'Plato' )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book where author = 'Plato' )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book where author = 'Plato' )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book where author = 'Pluto' )"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
      "infer_predictions": [
        [
          "select book.title from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato' and book.saleprice < ( select avg ( saleprice ) from book where author_book.author = 'Plato' )",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.saleprice < ( select avg ( saleprice ) from book where author = 'Plato' )",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.saleprice < ( select avg ( saleprice ) from book where author_book.author = 'Plato' )",
          "select book.title from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato' and book.saleprice < ( select avg ( saleprice ) from book where author_book.author = 'Plato' )",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.saleprice < ( select avg ( saleprice ) from book )",
          "select book.title from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato' and book.saleprice < ( select avg ( saleprice ) from book )",
          "select book.title from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato' and book.saleprice < ( select avg ( saleprice ) from book where author_book.author = 'Plato' )"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from author join author_book on author.idauthor = author_book.author join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author where book.title = 'Pride and Prejudice'",
          "select name from author where idauthor in ( select author_book.author from author_book join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice' )",
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where book.title = 'Pride and Prejudice'",
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from author join author_book on author.idauthor = author_book.author join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select name from author where idauthor in ( select author_book.author from author_book join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice' )",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author where book.title = 'Pride and Prejudice'",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where book.title = 'Pride and prejudice'"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
      "infer_predictions": [
        [
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = book.author where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
      "infer_predictions": [
        [
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plazo%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plazo%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn where author_book.author like '%Plato%'"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select count ( * ) from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from orders join books_order on orders.idorder = books_order.idorder join book on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from book join books_order on book.isbn = books_order.isbn join orders on books_order.idorder = orders.idorder where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from book join books_order on book.isbn = books_order.isbn join orders on orders.idorder = books_order.idorder where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select count ( * ) from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from ( select orders.idorder from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' )",
          "select count ( * ) from book join books_order on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from orders join books_order on orders.idorder = books_order.idorder join book on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "book_1",
      "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
      "infer_predictions": [
        [
          "select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'The Little Prince'"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "book_1",
      "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 587,
      "db_id": "book_1",
      "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'",
          "select isbn from books_order where idorder in ( select idorder from orders where idclient = 'Peter Doe' intersect select idorder from orders where idclient = 'James Smith' )"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "book_1",
      "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'",
          "select distinct isbn from books_order where idorder in ( select idorder from orders where idclient = 'Peter Doe' intersect select idorder from orders where idclient = 'James Smith' )"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "book_1",
      "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select title from book where isbn in ( select isbn from books_order join orders on books_order.idorder = orders.idorder where orders.idclient = 'Peter Doe' except select book.title from books_order join orders on books_order.idorder = orders.idorder where orders.idclient = 'James Smith' )",
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where orders.idclient = 'Peter Doe' except select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where orders.idclient = 'James Smith'"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "book_1",
      "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 591,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select name from client where idclient in ( select idclient from orders where idorder = 'Pride and Prejudice' )"
        ]
      ]
    },
    {
      "id": 592,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select name from client where idclient in ( select idclient from orders where idorder = 'Pride and Prejudice' )"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "book_review",
      "gold": "SELECT count(*) FROM book",
      "infer_predictions": [
        [
          "select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book ORDER BY Title ASC",
      "infer_predictions": [
        [
          "select title from book order by title asc",
          "select title from book order by title asc , title asc"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book ORDER BY Pages DESC",
      "infer_predictions": [
        [
          "select title from book order by pages desc"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  Release FROM book",
      "infer_predictions": [
        [
          "select type , release from book",
          "select type , release from book",
          "select type , release from book",
          "select type , release from book"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "book_review",
      "gold": "SELECT max(Chapters) ,  min(Chapters) FROM book",
      "infer_predictions": [
        [
          "select max ( chapters ) , min ( chapters ) from book",
          "select max ( chapters ) , min ( chapters ) , title from book",
          "select max ( chapters ) , min ( chapters ) from book"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
      "infer_predictions": [
        [
          "select title from book where title not in ( 'Poet' )",
          "select title from book where type not in ( 'Poet' )",
          "select title from book where title not in ( select title from book where type = 'Poet' )",
          "select title from book where type not in ( select title from book where title = 'Poet' )",
          "select title from book where type not in ( select title from book where type = 'Poet' )",
          "select title from book where type != 'Poet'",
          "select title from book where type != 'Poet'",
          "select title from book where title != 'Poet'"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "book_review",
      "gold": "SELECT avg(Rating) FROM review",
      "infer_predictions": [
        [
          "select avg ( rating ) from review",
          "select avg ( rating ) from review"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "book_review",
      "gold": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
      "infer_predictions": [
        [
          "select book.title , review.rating from book join review on book.book_id = review.book_id",
          "select book.title , review.rating from review join book on review.book_id = book.book_id",
          "select book.title , review.rating from book join review on book.book_id = review.book_id",
          "select book.title , review.rating from book join review on book.Book_id = review.book_id",
          "select book.title , review.rating from book join review on book.book_id = review.Book_id"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "book_review",
      "gold": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
      "infer_predictions": [
        [
          "select review.rating from review join book on review.book_id = book.book_id where book.chapters = ( select max ( chapters ) from book )",
          "select review.rating from book join review on book.book_id = review.book_id where book.chapters = ( select max ( chapters ) from book )",
          "select review.rating from review join book on review.book_id = book.book_id group by book.book_id order by count ( * ) desc limit 1",
          "select review.rating from book join review on book.book_id = review.book_id group by book.book_id order by count ( * ) desc limit 1",
          "select review.rating from review inner join ( select book_id , count ( chapters ) as num_chapters from book group by book_id ) as temp on review.book_id = temp.book_id"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "book_review",
      "gold": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
      "infer_predictions": [
        [
          "select review.rank from book join review on book.book_id = review.book_id order by book.pages asc limit 1",
          "select review.rank from review join book on review.book_id = book.book_id order by book.pages asc limit 1",
          "select review.rank from review join book on review.book_id = book.book_id where book.pages = ( select min ( pages ) from book )",
          "select review.rank from book join review on book.book_id = review.book_id where book.pages = ( select min ( pages ) from book )",
          "select r.rank from review r inner join book b on r.book_id = b.book_id where b.pages = ( select min ( pages ) from book )"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "book_review",
      "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from book join review on book.book_id = review.book_id order by review.rank desc limit 1",
          "select book.title from book join review on book.book_id = review.book_id where review.rank = ( select max ( rank ) from review )",
          "select title from book where book_id in ( select book_id from review order by rank desc limit 1 )",
          "select book.title from review join book on review.book_id = book.book_id order by review.rank desc limit 1",
          "select title from book where exists ( select 1 from review where book_id = book.book_id and rank = ( select max ( rank ) from review ) )",
          "select title from book where book_id in ( select book_id from review where rank = ( select max ( rank ) from review ) )"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "book_review",
      "gold": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
      "infer_predictions": [
        [
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from book join review on book.book_id = review.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel' is not null",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.Book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where type = 'Novel'"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
      "infer_predictions": [
        [
          "select type , count ( * ) from book group by type",
          "select type , count ( * ) from book group by type",
          "select type , count ( * ) from book group by type",
          "select ( type ) , count ( * ) from book group by type",
          "Select type , count ( * ) from book group by type"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type from book group by type having count ( type ) = ( select max ( cnt ) from ( select count ( * ) as cnt from book group by type ) )",
          "select type from book group by type having count ( type ) = ( select max ( count ) from ( select count ( type ) as count from book group by type ) )",
          "select type from book group by type having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from book group by type ) )",
          "select type from book group by type having count ( type ) = ( select max ( cnt ) from ( select count ( type ) as cnt from book group by type ) )",
          "select type from book group by type having count ( type ) = ( select max ( count ) from ( select count ( * ) as count from book group by type ) )",
          "select type from book group by type having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from book group by type ) )",
          "select type from book group by type having count ( type ) = ( select max ( count_type ) from ( select count ( type ) as count_type from book group by type ) )",
          "select b.type from book b group by b.type having count ( b.type ) = ( select max ( count ) from ( select count ( * ) as count from book group by type ) )"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "book_review",
      "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
      "infer_predictions": [
        [
          "select book.title from book join review on book.book_id = review.book_id order by review.rating asc",
          "select book.title from review join book on review.book_id = book.book_id order by review.rating asc",
          "select book.title from book join review on book.Book_id = review.book_id order by review.rating asc",
          "select book.title from book join review on book.book_id = review.Book_id order by review.rating asc"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "book_review",
      "gold": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
      "infer_predictions": [
        [
          "select book.title , book.audio from book join review on book.book_id = review.book_id order by review.readers_in_million desc",
          "select book.title , book.audio from review join book on review.book_id = book.book_id order by review.readers_in_million desc",
          "select book.title , audio from book join review on book.book_id = review.book_id order by review.readers_in_million desc",
          "select book.title , book.audio length from book join review on book.book_id = review.book_id order by review.readers_in_million desc",
          "select book.title , book.audio from book join review on book.Book_id = review.book_id order by review.readers_in_million desc",
          "select book.title , book.audio from book join review on book.book_id = review.book_id order by review. readers_in_million desc"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "book_review",
      "gold": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
      "infer_predictions": [
        [
          "select count ( * ) from book where book_id not in ( select book_id from review )",
          "select count ( * ) from book where book_id not in ( select distinct book_id from review )",
          "select count ( * ) from book where book_id not in ( select book_id from review )",
          "select count ( * ) from book where book_id not in ( select book_id from review )",
          "select count ( * ) from book where book_id not in ( select book_id from review )",
          "select count ( * ) from book where book_id not in ( select book_id from review )"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
      "infer_predictions": [
        [
          "select type from book where chapters > 75 intersect select type from book where chapters < 50",
          "select type from ( select type from book where chapters > 75 ) intersect select type from ( select type from book where chapters < 50 )",
          "select type from ( select type from book where chapters > 75 ) intersect select type from ( select type from book where chapters < 50 )"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "book_review",
      "gold": "SELECT count(DISTINCT TYPE) FROM book",
      "infer_predictions": [
        [
          "select count ( distinct type ) from book"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
      "infer_predictions": [
        [
          "select type , title from book where book_id not in ( select book_id from review )",
          "select title , type from book where book_id not in ( select book_id from review )",
          "select type ,title from book where book_id not in ( select book_id from review )",
          "select type , title from book where book_id not in ( select book_id from review where rating = '1' )",
          "select type , title from book where book_id not in ( select book_id from review where rating = 'star' )",
          "select type , title from book where book_id not in ( select book_id from review where rating = '*' )",
          "select type , title from book where book_id not in ( select distinct book_id from review )"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "restaurant_bills",
      "gold": "SELECT count(*) FROM customer",
      "infer_predictions": [
        [
          "select count ( * ) from customer"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "restaurant_bills",
      "gold": "SELECT count(*) FROM customer",
      "infer_predictions": [
        [
          "select count ( * ) from customer"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
      "infer_predictions": [
        [
          "select name from customer order by level_of_membership asc",
          "select name from customer order by level_of_membership asc , name asc",
          "select name from customer order by level_of_membership asc",
          "select name from customer order by level_of_membership asc , name",
          "select name from customer order by level_of_membership asc",
          "select name from customer order by level_of_membership asc"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
      "infer_predictions": [
        [
          "select name from customer order by level_of_membership asc"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  Card_Credit FROM customer",
      "infer_predictions": [
        [
          "select nationality , card_credit from customer"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  Card_Credit FROM customer",
      "infer_predictions": [
        [
          "select nationality , card_credit from customer",
          "select nationality , card_credit from customer",
          "select nationality , card_credit from customer"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
      "infer_predictions": [
        [
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australie'",
          "Select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' OR nationality = 'Australia'",
          "select name from customer where nationality = 'UK' or nationality = 'Australia'"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
      "infer_predictions": [
        [
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "Select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'UK' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australie'"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "restaurant_bills",
      "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
      "infer_predictions": [
        [
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select avg ( card_credit ) from customer where level_of_membership > 0",
          "select avg ( card_credit ) from customer where level_of_membership >1",
          "select avg ( card_credit ) from customer where level_of_membership > 1"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "restaurant_bills",
      "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
      "infer_predictions": [
        [
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select avg ( card_credit ) from customer where level_of_membership > 1 and card_credit = 'Y'",
          "select avg ( card_credit ) from customer where level_of_membership > 1 and card_credit = '1'",
          "select avg ( card_credit ) from customer where level_of_membership > 1 and card_credit = 'Yes'",
          "select avg ( card_credit ) from customer where level_of_membership > 1 and card_credit = 'Credit'",
          "select avg ( card_credit ) from customer where level_of_membership > 1 and card_credit > 0",
          "select avg ( card_credit ) from customer where level_of_membership > 1 And card_credit = 'Y'"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "restaurant_bills",
      "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
      "infer_predictions": [
        [
          "select card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select card_credit from customer c where c.level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select card_credit from customer order by level_of_membership desc limit 1"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "restaurant_bills",
      "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
      "infer_predictions": [
        [
          "select card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select customer_id , card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select name , card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality as nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with nationalitycount as ( select nationality , count ( * ) as count from customer group by nationality ) select nationality from nationalitycount where count = ( select max ( count ) from nationalitycount )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select nationality , count ( nationality ) as count_national from customer group by nationality ) as max_count )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select nationality , count ( nationality ) as count_national from customer group by nationality ) as maximums )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from customer group by nationality ) as maxcount )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select nationality , count ( nationality ) as count_national from customer group by nationality ) as stats )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select nationality , count ( nationality ) as count_national from customer group by nationality ) as maximum_count )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select nationality , count ( nationality ) as count_national from customer group by nationality ) as most_common )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from customer group by nationality ) as maximums )"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with nationalitycount as ( select nationality , count ( * ) as count from customer group by nationality ) select nationality from nationalitycount where count = ( select max ( count ) from nationalitycount )",
          "with nationalitycount as ( select nationality , count ( customer_id ) as count from customer group by nationality ) select nationality from nationalitycount where count = ( select max ( count ) from nationalitycount )",
          "with nationalitycounts as ( select nationality , count ( * ) as count from customer group by nationality ) select nationality from nationalitycounts where count = ( select max ( count ) from nationalitycounts )",
          "with nationalitycount as ( select nationality , count ( * ) as total from customer group by nationality ) select nationality from nationalitycount where total = ( select max ( total ) from nationalitycount )",
          "with nationalitycounts as ( select nationality , count ( customer_id ) as count from customer group by nationality ) select nationality from nationalitycounts where count = ( select max ( count ) from nationalitycounts )",
          "select nationality from customer group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( * ) as count from customer group by nationality ) )",
          "with nationalitycount as ( select nationality , count ( customer_id ) as total from customer group by nationality ) select nationality from nationalitycount where total = ( select max ( total ) from nationalitycount )",
          "with nationalitycounts as ( select nationality , count ( * ) as total from customer group by nationality ) select nationality from nationalitycounts where total = ( select max ( total ) from nationalitycounts )"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
      "infer_predictions": [
        [
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 75",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit >75",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 75 != 100",
          "select nationality from customer where card_credit <= 50 intersect select nationality from customer where card_credit > 75",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 75 != 50",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 75"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
      "infer_predictions": [
        [
          "select nationality from customer where card_credit > 50 intersect select nationality from customer where card_credit < 75",
          "select nationality from customer group by nationality having max ( card_credit ) > 50 and min ( card_credit ) < 75",
          "select nationality from customer where card_credit > 50 intersect select nationality from customer where card_credit <= 75",
          "select nationality from customer group by nationality having max ( card_credit ) > 50 and min ( card_credit ) <= 75"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer join customer_order on customer.customer_id = customer_order.customer_id",
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
      "infer_predictions": [
        [
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , dish_name from customer join customer_order on customer.customer_id = customer_order.customer_id",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , dish_name from customer_order join customer on customer.customer_id = customer_order.customer_id"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , customer_order.dish_name from customer join customer_order on customer.customer_id = customer_order.customer_id order by customer_order.quantity desc"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , customer_order.dish_name from customer join customer_order on customer.customer_id = customer_order.customer_id order by customer_order.quantity desc",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by quantity desc",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
      "infer_predictions": [
        [
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name",
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id",
          "select customer.name , sum ( customer_order.quantity ) from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.name"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "restaurant_bills",
      "gold": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
      "infer_predictions": [
        [
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name",
          "select customer.name , sum ( customer_order.quantity ) from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.name",
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id",
          "select customer.name , sum ( customer_order.quantity ) from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.customer_id"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
      "infer_predictions": [
        [
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.name having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name having sum ( quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.customer_id having sum ( quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.name having sum ( quantity ) > 1"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
      "infer_predictions": [
        [
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer_order.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer join ( select customer_id from customer_order group by customer_id having sum ( quantity ) > 1 ) as total_orders on customer.customer_id = total_orders.customer_id",
          "select name from customer where customer_id in ( select customer_id from customer_order group by customer_id having sum ( quantity ) > 1 )",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer_order.customer_id having sum ( quantity ) > 1",
          "select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer_order.customer_id having sum ( customer_order.quantity ) > 1"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "restaurant_bills",
      "gold": "SELECT DISTINCT Manager FROM branch",
      "infer_predictions": [
        [
          "select distinct manager from branch"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "restaurant_bills",
      "gold": "SELECT DISTINCT Manager FROM branch",
      "infer_predictions": [
        [
          "select distinct manager from branch"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "restaurant_bills",
      "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
      "infer_predictions": [
        [
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "Select name from customer where customer_id not in ( select customer_id from customer_order )"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "restaurant_bills",
      "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
      "infer_predictions": [
        [
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "Select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )",
          "select name from customer where customer_id not in ( select customer_Id from customer_order )",
          "select name from customer where customer_id not in ( select customer_id from customer_order )"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "club_leader",
      "gold": "SELECT count(*) FROM member",
      "infer_predictions": [
        [
          "select count ( * ) from member"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select name from member order by age asc"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "club_leader",
      "gold": "SELECT Name ,  Nationality FROM member",
      "infer_predictions": [
        [
          "select name , nationality from member",
          "Select name , nationality from member"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "club_leader",
      "gold": "select name from member where nationality != \"england\"",
      "infer_predictions": [
        [
          "select name from member where nationality != 'England'"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
      "infer_predictions": [
        [
          "select name from member where age = 19 or age = 20",
          "select name from member where age = 20 or age = 19",
          "select name from member where age >= 19 and age <= 20",
          "select name from member where age = 19 OR age = 20",
          "select name from member where age <= 20 and age >= 19",
          "select name from member where age >= 20 and age <= 19",
          "select name from member where age < 20 and age >= 19"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select m.name from member m where m.age = ( select max ( age ) from member )",
          "select name from member where age = ( select max ( age ) from member )",
          "select b.name from member b where b.age = ( select max ( age ) from member )",
          "select r.name from member r where r.age = ( select max ( age ) from member )",
          "select s.name from member s where s.age = ( select max ( age ) from member )",
          "select m.name from member as m where m.age = ( select max ( age ) from member )",
          "select v.name from member v where v.age = ( select max ( age ) from member )"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "club_leader",
      "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * ) from member group by nationality",
          "select nationality as nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * ) from member group by nationality",
          "Select nationality , count ( * ) from member group by nationality"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "club_leader",
      "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with nationalitycount as ( select nationality , count ( * ) as count from member group by nationality ) select nationality from nationalitycount where count = ( select max ( count ) from nationalitycount )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from member group by nationality ) )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from member group by nationality ) as stats )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select count ( nationality ) as count_national from member group by nationality ) )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from member group by nationality ) as maxcount )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count_national ) from ( select count ( nationality ) as count_national from member group by nationality ) as stats )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from member group by nationality ) as counts )",
          "select nationality from member group by nationality having count ( nationality ) = ( select max ( count ) from ( select count ( nationality ) as count from member group by nationality ) as cnt )"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "club_leader",
      "gold": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select nationality from member group by nationality having count ( * ) >= 2",
          "select nationality from member group by nationality having count ( * ) >= 2",
          "select nationality from member group by nationality having count ( * ) >=2",
          "select nationality from member group by nationality having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 654,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
      "infer_predictions": [
        [
          "select m.name from member m where exists ( select 1 from club_leader cl join club c on cl.club_id = c.club_id where cl.member_id = m.member_id and c.overall_ranking > 100 )",
          "select m.name from member m where exists ( select 1 from club c join club_leader cl on c.club_id = cl.club_id where cl.member_id = m.member_id and c.overall_ranking > 100 )",
          "select m.name from member m where exists ( select 1 from club_leader cl join club c on cl.club_id = c.club_id where cl.club_id = c.club_id and c.overall_ranking > 100 )",
          "select m.name from member m where exists ( select 1 from club_leader cl join club cb on cl.club_id = cb.club_id where cl.member_id = m.member_id and cb.overall_ranking > 100 )",
          "select m.name from member m where exists ( select 1 from club c join club_leader cl on c.club_id = cl.club_id where cl.club_id = c.club_id and c.overall_ranking > 100 )"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
      "infer_predictions": [
        [
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.year_join < 2018 and cl.member_id = m.member_id )",
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.year_join < 2018 and cl.year_join > 0 )",
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.year_join < 2018 and cl.year_join >= 2018 )",
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.year_join < 2018 )",
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.member_id = m.member_id and cl.year_join < 2018 )",
          "select m.name from member m where exists ( select 1 from club_leader cl where cl.year_join < 2018 and cl.year_join >= 2018 and cl.year_join < 2018 )"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
      "infer_predictions": [
        [
          "select m.name from member m where exists ( select 1 from club_leader cl join club c on cl.club_id = c.club_id where cl.member_id = m.member_id and c.club_name = 'Houston' )",
          "select m.name from member m where exists ( select 1 from club_leader cl join club cb on cl.club_id = cb.club_id where cb.club_name = 'Houston' and cl.member_id = m.member_id )",
          "select m.name from member m where exists ( select 1 from club c join club_leader cl on c.club_id = cl.club_id where cl.member_id = m.member_id and c.club_name = 'Houston' )",
          "select m.name from member m where exists ( select 1 from club_leader cl join club c on cl.club_id = c.club_id where m.member_id = cl.member_id and c.club_name = 'Houston' )"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
      "infer_predictions": [
        [
          "select name from member where member_id not in ( select member_id from club_leader )",
          "select name from member where member_id not in ( select member_id from club_leader )",
          "select name from member where member_id in ( select member_id from club_leader )",
          "select name from member where member_id not in ( select member_id from club_leader )",
          "select name from member where member_id not in ( select member_id from club_leader )",
          "select name from member where member_id not in ( select member_id from club_leader )"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "club_leader",
      "gold": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
      "infer_predictions": [
        [
          "select nationality from member where age > 22 intersect select nationality from member where age < 19",
          "select nationality from member group by nationality having max ( age ) > 22 and min ( age ) < 19",
          "select nationality from ( select nationality from member where age > 22 intersect select nationality from member where age < 19 ) where nationality = 'United States'",
          "select nationality from ( select nationality from member where age > 22 intersect select nationality from member where age < 19 ) where nationality = 'Nigeria'",
          "select nationality from ( select nationality from member where age > 22 intersect select nationality from member where age < 19 ) where nationality = 'USA'",
          "select nationality from ( select nationality from member where age > 22 intersect select nationality from member where age < 19 )",
          "select nationality from ( select nationality from member where age > 22 intersect select nationality from member where age < 19 ) where nationality = 'German'",
          "select nationality from member where ( age > 22 ) intersect select nationality from member where ( age < 19 )"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "club_leader",
      "gold": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
      "infer_predictions": [
        [
          "select avg ( member.age ) from club_leader join member on club_leader.member_id = member.member_id",
          "select avg ( member.age ) from member join club_leader on member.member_id = club_leader.member_id",
          "select avg ( age ) from club_leader join member on club_leader.member_id = member.member_id",
          "select avg ( member.age ) from club_leader join member on club_leader.member_id = member.member_id group by club_leader.member_id"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "club_leader",
      "gold": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
      "infer_predictions": [
        [
          "select club_name from club where club_name like '%state%'",
          "Select club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'",
          "select club_Name from club where club_name like '%state%'"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
      "infer_predictions": [
        [
          "select collection_subset_name from collection_subsets"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
      "infer_predictions": [
        [
          "select collection_subset_name from collection_subsets"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
      "infer_predictions": [
        [
          "select collecrtion_subset_details from collection_subsets where collection_subset_name = 'Top collection'"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
      "infer_predictions": [
        [
          "select document_subset_name from document_subsets"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
      "infer_predictions": [
        [
          "select document_subset_name from document_subsets"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best For 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000' or document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best of 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000' or document_subset_name = 'Best For 2000'"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best For 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best of 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000' or document_subset_name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects;",
      "infer_predictions": [
        [
          "select document_object_id from document_objects"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
      "infer_predictions": [
        [
          "select parent_document_object_id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_objects where owner = 'Marlin'",
          "select parent_document_Object_id from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
      "infer_predictions": [
        [
          "select document_object_id from document_objects where owner = 'Marlin'",
          "select document_Object_id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_objects where owner = 'Marlon'"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
      "infer_predictions": [
        [
          "select owner from document_objects where description = 'Braeden Collection'",
          "select document_objects.owner from document_objects join collections on document_objects.parent_document_object_id = collections.collection_id where document_objects.description = 'Braeden Collection'"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
      "infer_predictions": [
        [
          "select document_objects.owner from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join collections on document_objects.document_object_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join collections on document_objects.parent_document_object_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from documents_in_collections join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Braeden Collection'"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
      "infer_predictions": [
        [
          "select owner from document_objects where owner = 'Marlin'",
          "select owner from document_objects where parent_document_object_id = document_objects.document_object_id and owner = 'Marlin'",
          "select owner from document_objects where parent_document_object_id in ( select document_object_id from document_objects where owner = 'Marlin' )",
          "select owner from document_objects where parent_document_object_id = ( select document_object_id from document_objects where owner = 'Marlin' )",
          "select owner from document_objects where parent_document_object_id = document_objects.document_object_id and document_objects.owner = 'Marlin'",
          "select owner from document_objects where parent_document_object_id = document_objects.parent_document_object_id and owner = 'Marlin'",
          "select owner from document_objects where parent_document_object_id = ( select document_object_id from document_objects where owner = 'Marlin' )",
          "select owner from document_objects where document_object_id = parent_document_object_id and owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
      "infer_predictions": [
        [
          "select owner from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select distinct description from document_objects",
          "select distinct description from document_objects where parent_document_object_id = document_objects.document_object_id",
          "select distinct description from ( select description from document_objects )",
          "select distinct description from document_objects where parent_document_object_id = document_objects.parent_document_object_id",
          "select distinct ( description ) from document_objects"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select distinct description from document_objects",
          "select description from document_objects group by parent_document_object_id having count ( parent_document_object_id ) = ( select max ( cnt ) from ( select count ( description ) as cnt from document_objects group by parent_document_object_id ) )",
          "select description from document_objects where parent_document_object_id is not null",
          "select description from document_objects group by parent_document_object_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from document_objects group by parent_document_object_id ) )",
          "select description from document_objects group by parent_document_object_id having count ( document_object_id ) = ( select max ( cnt ) from ( select count ( description ) as cnt from document_objects group by parent_document_object_id ) )",
          "select description from document_objects group by parent_document_object_id having count ( parent_document_object_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from document_objects group by parent_document_object_id ) )"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
      "infer_predictions": [
        [
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlon'",
          "select count ( * ) from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
      "infer_predictions": [
        [
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( distinct document_object_id ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlon'",
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
      "infer_predictions": [
        [
          "select document_object_id from document_objects except select parent_document_object_id from document_objects"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
      "infer_predictions": [
        [
          "select document_object_id from document_objects except select parent_document_object_id from document_objects"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
      "infer_predictions": [
        [
          "select parent_document_object_id , count ( * ) from document_objects group by parent_document_object_id",
          "select document_object_id , count ( * ) from document_objects group by document_object_id",
          "select document_object_id , count ( * ) from document_objects group by parent_document_object_id"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections;",
      "infer_predictions": [
        [
          "select collection_name from collections"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections;",
      "infer_predictions": [
        [
          "select collection_name from collections"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = 'Best' != ( select collection_description from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_description from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_description from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_name = 'Nice'",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c2.parent_collection_id = c.parent_collection_id )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c.parent_collection_id )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c2.parent_collection_id = c.parent_collection_id and c.collection_name = 'Nice' )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c2.parent_collection_id and c.collection_name = 'Nice' )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c2.collection_id and c.collection_name = 'Nice' )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c2.parent_collection_id = c.parent_collection_id and c.collection_name = 'Nice' )"
        ]
      ]
    },
    {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_name = 'Nice'",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c2.parent_collection_id = c.parent_collection_id )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c.parent_collection_id )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c2.collection_id and c.collection_name = 'Nice' )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_id = c.parent_collection_id and c.collection_name = 'Nice' )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c.parent_collection_id = c2.collection_id )",
          "select c.collection_name from collections c where exists ( select 1 from collections c2 where c2.collection_name = 'Nice' and c2.parent_collection_id = c.parent_collection_id and c.collection_name = 'Nice' )"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
      "infer_predictions": [
        [
          "select collection_name from collections where parent_collection_id not in ( select collection_id from collections )",
          "select collection_name from collections where collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where parent_collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where collections.parent_collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where collections.parent_collection_id not in ( select collection_id from collections )"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where parent_collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where parent_collection_id not in ( select collection_id from collections )",
          "select collection_name from collections where parent_collection_id != ( select collection_id from collections )",
          "select collection_name from collections where collection_id != ( select parent_collection_id from collections )",
          "select collection_name from collections where collection_id not in ( select parent_collection_id from collections )"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select document_object_id from document_objects group by document_object_id having count ( * ) > 1",
          "select document_object_id from ( select document_object_id from document_subset_members group by document_object_id having count ( * ) > 1 )",
          "select document_object_id from document_subset_members group by document_object_id having count ( * ) > 1",
          "select document_object_id from ( select document_object_id from document_subset_members group by document_object_id having count ( related_document_object_id ) > 1 )"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( c.collection_id ) from collections c where c.collection_name = 'Best'",
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( * ) from collections where collection_name = 'Best' != ( select collection_id from collections where collection_name = 'Best' )",
          "select count ( * ) from collections where collection_name = 'Best' != ( select collection_name from collections where collection_name = 'Best' )",
          "select count ( * ) from collections where collection_name = 'Best' != ( select collection_name from collections where collection_name = 'Good' )",
          "select count ( * ) from collections where collection_name = 'Best' != ( select collection_name from collections where collection_name = 'Best' )",
          "select count ( * ) from collections where collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( sub.collection_id ) from collections sub join collections c on c.collection_id = sub.collection_id where c.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select document_object_id from document_objects where owner = 'Ransom'",
          "select document_object_id from document_objects where owner = 'Ransom' intersect select document_object_id from document_subset_members where document_object_id = document_subset_members.related_document_object_id"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select document_object_id from document_objects where owner = 'Ransom'",
          "select document_object_id from document_objects where owner in ( select owner from document_objects where owner = 'Ransom' )",
          "select document_object_id from document_objects where owner = 'Ransom' intersect select document_object_id from document_subset_members where document_object_id = document_subset_members.document_object_id",
          "select document_object_id from document_objects where owner = ( select owner from document_objects where owner = 'Ransom' )"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
      "infer_predictions": [
        [
          "select collection_subset_id , collection_subset_name , count ( * ) from collection_subsets group by collection_subset_id"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_objects group by document_object_id"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
      "infer_predictions": [
        [
          "select document_object_id from documents_in_collections group by document_object_id order by count ( * ) asc limit 1",
          "select document_object_id from ( select document_object_id , count ( * ) as num_docs from documents_in_collections group by document_object_id ) where num_docs = ( select min ( num_docs ) from ( select count ( * ) as num_docs from documents_in_collections group by document_object_id ) )",
          "select document_object_id from ( select document_object_id , count ( * ) as cnt from documents_in_collections group by document_object_id ) where cnt = ( select min ( cnt ) from ( select count ( * ) as cnt from documents_in_collections group by document_object_id ) )",
          "select document_object_id from ( select document_object_id , count ( * ) as num_documents from documents_in_collections group by document_object_id ) where num_documents = ( select min ( num_documents ) from ( select count ( * ) as num_documents from documents_in_collections group by document_object_id ) )"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id having count ( * ) between 2 and 4",
          "select related_document_object_id , count ( * ) from document_subset_members group by related_document_object_id having count ( * ) between 2 and 4"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
      "infer_predictions": [
        [
          "select owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Braeden' )",
          "select owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breeden' )",
          "select owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breaeden' )",
          "select owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Braeden' )",
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breeden' )",
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Braeden' )",
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breaeden' )",
          "select owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breaden' )"
        ]
      ]
    },
    {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
      "infer_predictions": [
        [
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Braeden' )",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.related_document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.related_document_object_id where document_objects.owner = 'Breeden'",
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breeden' )",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Breeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.related_document_object_id where document_objects.owner = 'Breaeden'",
          "select distinct owner from document_objects where document_object_id in ( select related_document_object_id from document_subset_members where owner = 'Breaeden' )"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
      "infer_predictions": [
        [
          "select distinct document_subset_name from document_subsets join document_objects on document_subsets.document_subset_id = document_subsets.document_subset_id where document_objects.owner = 'Braeden'"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
      "infer_predictions": [
        [
          "select distinct document_subset_name from document_objects join document_subsets on document_objects.document_object_id = document_subsets.document_subset_id where document_objects.owner = 'Breaeden'",
          "select distinct document_subset_name from document_objects join document_subsets on document_objects.document_object_id = document_subsets.document_subset_id where document_objects.owner = 'Braseden'"
        ]
      ]
    },
    {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
      "infer_predictions": [
        [
          "select document_subset_id , document_subset_name , count ( * ) from document_subsets group by document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_id , document_subset_name , count ( * ) from document_subsets group by document_subsets.document_subset_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_id from document_subsets where document_subset_name = 'Best for 2000'",
          "select distinct document_subset_id from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_id from document_subsets where document_subset_name = 'Best For 2000'",
          "select document_subset_id from document_subsets where document_subset_name = 'Best of 2000'"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_id from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_id from document_subsets where document_subset_name = 'Best For 2000'"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "gold": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select distinct collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select distinct collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'",
          "select collection_name from collections where collection_id in ( select documents_in_collections.collection_id from documents_in_collections join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom' )",
          "select collection_name from collections where exists ( select 1 from documents_in_collections join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom' and documents_in_collections.collection_id = collections.collection_id )"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
      "infer_predictions": [
        [
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select count ( * ) , documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id group by documents_in_collections.document_object_id",
          "select count ( * ) , document_object_id from documents_in_collections group by document_object_id",
          "select count ( distinct collections.collection_id ) , documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id group by documents_in_collections.document_object_id",
          "select count ( distinct collection_id ) , document_object_id from documents_in_collections group by document_object_id",
          "select count ( distinct collection_id ) , document_object_id from documents_in_collections",
          "select count ( distinct collections.collection_id ) , documents_in_collections.document_object_id from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by documents_in_collections.document_object_id"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select document_object_id , count ( distinct collections.collection_id ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id group by document_object_id",
          "select document_object_id , count ( distinct collection_id ) from documents_in_collections group by document_object_id",
          "select count ( distinct collections.collection_id ) , document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id group by document_object_id",
          "select count ( distinct collections.collection_id ) , documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id group by documents_in_collections.document_object_id"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' or documents_in_collections.collection_id is null",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' or documents_in_collections.collection_id is null",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' or documents_in_collections.collection_id is null",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' or collections.collection_id is null"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( distinct d.document_object_id ) from documents_in_collections d inner join collections c on d.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct d.document_object_id ) from documents_in_collections d join collections c on d.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct dc.document_object_id ) from documents_in_collections dc join collections c on dc.collection_id = c.collection_id where c.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select collections.collection_name , collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_id order by count ( * ) desc limit 1",
          "select collection_name , collection_id , ( select count ( * ) from documents_in_collections where collection_id = c.collection_id ) as total_documents from collections c",
          "select collection_name , collection_id , ( select count ( * ) from documents_in_collections where collections.collection_id = documents_in_collections.collection_id ) as total_documents from collections",
          "select collection_name , collection_id , ( select count ( * ) from documents_in_collections where documents_in_collections.collection_id = collections.collection_id ) as total_documents from collections",
          "select collection_name , collection_id , ( select count ( * ) from documents_in_collections where collection_id = c.collection_id ) as total_docs from collections c",
          "select collection_name , collection_id , ( select count ( * ) from documents_in_collections where collections.collection_id = documents_in_collections.collection_id ) as num_docs from collections"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select collections.collection_name , collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' group by collections.collection_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
      "infer_predictions": [
        [
          "select distinct documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best' except select distinct documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select distinct documents_in_collections.document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best' except select distinct document_object_id from document_subset_members where document_subset_members.document_subset_id = 'Best for 2000'",
          "select distinct document_object_id from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best' except select distinct document_object_id from document_subset_members where document_subset_members.document_subset_id = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_name in ( select collection_id from collections where collection_name = 'Best' )",
          "select collection_name from collections where collection_id in ( select related_collection_id from collection_subset_members where collection_name = 'Best' )",
          "select collections.collection_name from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name like 'Best%'",
          "select collections.collection_name from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name like '%Best%'",
          "select collection_name from collections where collection_name = 'Best' intersect select collections.collection_name from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name = 'Best'",
          "select collection_name from collections where collection_id in ( select related_collection_id from collection_subset_members where collection_id = collections.collection_id and collection_name = 'Best' )",
          "select collections.collection_name from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select c.collection_name from collections c where exists ( select 1 from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where csm.collection_id = c.collection_id and c.collection_name = 'Best' )",
          "select c.collection_name from collections c where exists ( select 1 from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where csm.related_collection_id = c.collection_id and c.collection_name = 'Best' )",
          "select c1.collection_name from collections c1 where exists ( select 1 from collection_subset_members c2 where c2.collection_id = c1.collection_id and c1.collection_name = 'Best' )",
          "select c.collection_name from collections c where exists ( select 1 from collection_subset_members csm where csm.collection_id = c.collection_id and c.collection_name = 'Best' )",
          "select c.collection_name from collections c where exists ( select 1 from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where csm.related_collection_id = c.collection_id and c.collection_name = 'Best' )"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct csm.collection_id ) from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct csm.related_collection_id ) from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct cs.collection_id ) from collection_subset_members cs join collections c on cs.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( * ) from ( select collection_subset_members.collection_id from collection_subset_members join collections on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best' )",
          "select count ( distinct csm.collection_id ) from collections csm join collections c on csm.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( * ) from ( select collection_subset_members.collection_id from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best' )"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( distinct collection_subset_members.related_collection_id ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct collections.collection_id ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct csm.related_collection_id ) from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct csm.collection_id ) from collection_subset_members csm join collections c on csm.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct csm.related_collection_id ) from collection_subset_members csm join collections c on csm.related_collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct cs.collection_id ) from collection_subset_members cs join collections c on cs.collection_id = c.collection_id where c.collection_name = 'Best'",
          "select count ( distinct cs.collection_id ) from collections cs join collections c on cs.collection_id = c.collection_id where c.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_subset_name from collections join collection_subsets on collections.collection_id = collection_subsets.collection_subset_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 741,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
      "infer_predictions": [
        [
          "select count ( * ) from songs where name like '%Love%'",
          "select count ( * ) from songs where instr ( name , 'Love' ) > 0",
          "select count ( * ) from songs where name like '%Love%'",
          "select count ( * ) from songs where language like '%Love%'"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "sing_contest",
      "gold": "SELECT name FROM songs ORDER BY name",
      "infer_predictions": [
        [
          "select name from songs order by name asc",
          "select name from songs order by name asc , language asc"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "sing_contest",
      "gold": "select name , language from songs",
      "infer_predictions": [
        [
          "select name , language from songs"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "sing_contest",
      "gold": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
      "infer_predictions": [
        [
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score",
          "select max ( voice_sound_quality ) as max_score , min ( voice_sound_quality ) as min_score from performance_score",
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score",
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "sing_contest",
      "gold": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
      "infer_predictions": [
        [
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from participants join performance_score on participants.id = performance_score.participant_id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeways'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo and performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "sing_contest",
      "gold": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
      "infer_predictions": [
        [
          "select id , language , original_artist from songs where name != 'Love'",
          "select id , original_artist , language from songs where name != 'Love'",
          "select id , language , original_artist from songs where name != 'Love'"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "sing_contest",
      "gold": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
      "infer_predictions": [
        [
          "select name , original_artist from songs where english_translation = 'All the streets of love'",
          "select name , original_artist from songs where English_translation = 'All the streets of love'",
          "select name , original_artist from songs where english_translation = 'All the streets of love'",
          "select name , original_artist from Songs where english_translation = 'All the streets of love'"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "sing_contest",
      "gold": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
      "infer_predictions": [
        [
          "select distinct performance_score.stage_presence from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select distinct performance_score.stage_presence from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'english'",
          "select distinct ( performance_score.stage_presence ) from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select distinct ( performance_score.stage_presence ) from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'english'",
          "select distinct performance_score.stage_presence from performance_score join songs on performance_score.Songs_id = songs.id where songs.language = 'English'"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id group by participants.id having count ( * ) >= 2",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id group by participants.id having count ( * ) >= 2",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id group by participants.id having count ( * ) >= 2",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id group by participants.id having count ( * ) >= 2",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id group by participant_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
      "infer_predictions": [
        [
          "select p.id , p.name , p.popularity from participants p join performance_score ps on p.id = ps.participant_id group by p.id order by count ( ps.songs_id ) asc",
          "select p.id , p.name , p.popularity from participants p where p.id in ( select participant_id from performance_score group by participant_id order by count ( * ) desc )",
          "select p.id , p.name , p.popularity from participants p join performance_score ps on p.id = ps.participant_id group by p.id , p.name order by count ( ps.songs_id ) asc",
          "select p.id , p.name , p.popularity from participants p join performance_score ps on p.id = ps.participant_id group by p.id order by count ( distinct ps.songs_id ) asc"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
      "infer_predictions": [
        [
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id where performance_score.voice_sound_quality = 5 or performance_score.rhythm_tempo = 5",
          "select id , name from participants where id in ( select participant_id from performance_score where voice_sound_quality = '5' )",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality = 5 or performance_score.rhythm_tempo = 5",
          "select id , name from participants where id in ( select participant_id from performance_score where voice_sound_quality = '5' or rhythm_tempo = '5' )",
          "select id , name from participants where id in ( select participant_id from performance_score where rhythm_tempo = 5 )",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '5'",
          "select id , name from participants where id in ( select participant_id from performance_score where rhythm_tempo = 5 or voice_sound_quality = 5 )"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "sing_contest",
      "gold": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
      "infer_predictions": [
        [
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'english'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'english' and songs.name = 'The Balkan Girls'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'english_translation'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'english'",
          "select voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'english'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'english_translation' and songs.name = 'The Balkan Girls'"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select songs.id , songs.name from performance_score join songs on performance_score.songs_id = songs.id group by songs.id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join songs on songs.id = performance_score.songs_id group by songs.id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id group by songs.id order by count ( * ) desc limit 1",
          "select performance_score.songs_id , songs.name from performance_score join songs on performance_score.songs_id = songs.id group by performance_score.songs_id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join songs on songs.id = performance_score.songs_id join participants on performance_score.participant_id = participants.id group by songs.id order by count ( * ) desc limit 1",
          "select performance_score.songs_id , songs.name from performance_score join songs on performance_score.songs_id = songs.id group by songs.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
      "infer_predictions": [
        [
          "select count ( distinct performance_score.stage_presence ) from performance_score where stage_presence < 7 or stage_presence > 9",
          "select count ( * ) from performance_score where stage_presence < 7 or stage_presence > 9",
          "select count ( distinct performance_score.stage_presence ) from performance_score where performance_score.stage_presence < 7 or performance_score.stage_presence > 9"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
      "infer_predictions": [
        [
          "select count ( * ) from songs where id not in ( select songs_id from performance_score )",
          "select count ( * ) from songs where name not in ( select songs.name from performance_score join songs on performance_score.songs_id = songs.id )",
          "select count ( * ) from songs where id not in ( select songs_id from performance_score )",
          "select count ( * ) from songs where id not in ( select songs_id from performance_score )",
          "select count ( * ) from songs where id not in ( select distinct songs_id from performance_score )",
          "select count ( * ) from ( select name from songs except select songs_id from performance_score )"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "sing_contest",
      "gold": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
      "infer_predictions": [
        [
          "select avg ( performance_score.rhythm_tempo ) , songs.language from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select songs.language , avg ( performance_score.rhythm_tempo ) from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select avg ( rhythm_tempo ) , language from performance_score join songs on performance_score.songs_id = songs.id group by language",
          "select avg ( rhythm_tempo ) , songs.language from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select language , avg ( performance_score.rhythm_tempo ) from performance_score join songs on performance_score.songs_id = songs.id group by language"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "sing_contest",
      "gold": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
      "infer_predictions": [
        [
          "select distinct participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'english'",
          "select distinct participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'English'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id where songs.language = 'english'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id where songs.language = 'English'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on participants.id = performance_score.participant_id where songs.language = 'english'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on participants.id = performance_score.participant_id where songs.language = 'English'"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "sing_contest",
      "gold": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
      "infer_predictions": [
        [
          "select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'English'",
          "select name , popularity from participants where id in ( select participant_id from performance_score join songs on performance_score.songs_id = songs.id where language = 'Croatian' ) and id in ( select participant_id from performance_score join songs on performance_score.songs_id = songs.id where language = 'English' )",
          "select name , popularity from participants where id in ( select participant_id from performance_score join songs on performance_score.songs_id = songs.id where language = 'Croatian' intersect select participant_id from performance_score join songs on performance_score.songs_id = songs.id where language = 'English' )"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "sing_contest",
      "gold": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
      "infer_predictions": [
        [
          "select name from songs where name like '%Is%'",
          "select name from songs where name like '%is%'",
          "select name from songs where instr ( name , 'Is' ) > 0",
          "select name from songs where instr ( name , 'is' ) > 0",
          "select name from songs where name like '%Is%'",
          "select name from songs where name like '%Is%'"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "sing_contest",
      "gold": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 761,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "address_1",
      "gold": "select distinct state from city",
      "infer_predictions": [
        [
          "select distinct state from city"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "address_1",
      "gold": "SELECT DISTINCT state FROM City",
      "infer_predictions": [
        [
          "select distinct state from city"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "address_1",
      "gold": "SELECT count(DISTINCT country) FROM City",
      "infer_predictions": [
        [
          "select count ( distinct country ) from city",
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "address_1",
      "gold": "SELECT count(DISTINCT country) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "address_1",
      "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
      "infer_predictions": [
        [
          "select city_name , city_code , state , country from city"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "address_1",
      "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
      "infer_predictions": [
        [
          "select city_name , city_code , state , country from city",
          "select city.city_name , city.city_code , city.state , city.country from city",
          "select city_name , city_code , state , country as name , country from city",
          "select city_name , city_code , state , country from city",
          "select city_name , city_code , state , country as name from city",
          "select city_name , city_code , state , country as name , state , country from city"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "address_1",
      "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Boston'",
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Barry'",
          "select latitude , longitude from city where city_name = 'Barker'"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "address_1",
      "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Boston'",
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Baltitown'",
          "select latitude , longitude from city where city_name = 'Barker'"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
      "infer_predictions": [
        [
          "select city_name from city where state = 'PA'",
          "select city_name from city where state = 'PA' and city_name is not null",
          "select city_name from city where state = 'PA' and city_name is not null",
          "select city_name from city where state = 'PA' and city_name not null",
          "select city_name from city where state = 'PA' and city_name not null",
          "Select city_name from city where state = 'PA'",
          "select city_name from city where state = 'PA'"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
      "infer_predictions": [
        [
          "select city_name from city where state = 'PA'",
          "select city_name from city where state = 'PA'",
          "select city_name from city where state = 'PA'",
          "Select city_name from city where state = 'PA'",
          "select city_name from city where city.state = 'PA'",
          "select city_name from city where state = 'PA'"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) , country from city where country = 'Canada'",
          "select count ( * ) from city where city.country = 'Canada'",
          "select count ( * ) from city where country = 'Canada'"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from city where city.country = 'Canada'",
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from City where country = 'Canada'"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
      "infer_predictions": [
        [
          "select city_name from city where country = 'USA' order by latitude asc",
          "select city_name from city where state = 'USA' order by latitude asc",
          "select city_name from city where country = 'United States' order by latitude asc",
          "select city_name from city where city.state = 'USA' order by latitude asc"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
      "infer_predictions": [
        [
          "select city_name from city where country = 'USA' order by latitude asc",
          "select city_name from city where country = 'United States' order by latitude asc"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "address_1",
      "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
      "infer_predictions": [
        [
          "select state , count ( * ) from city group by state"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "address_1",
      "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
      "infer_predictions": [
        [
          "select state , count ( * ) from city group by state",
          "select count ( * ) , state from city group by state",
          "select sub.state , count ( * ) from city sub group by sub.state",
          "select state , count ( * ) from city group by state",
          "select state , count ( * ) from city group by state"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "address_1",
      "gold": "select country ,  count(*) from city group by country",
      "infer_predictions": [
        [
          "select country , count ( * ) from city group by country",
          "select city.country , count ( * ) from city group by city.country"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "address_1",
      "gold": "SELECT country ,  count(*) FROM City GROUP BY country",
      "infer_predictions": [
        [
          "select count ( * ) , country from city group by country",
          "select country , count ( * ) from city group by country",
          "select count ( * ) , country from City group by country"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select state from city group by state having count ( * ) >= 2",
          "select distinct state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >=2"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 2",
          "select distinct state from city group by state having count ( * ) >= 2",
          "Select state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 2",
          "select state from City group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 200"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from city group by state ) )",
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( count ) from ( select count ( * ) as count from city group by state ) )",
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( total ) from ( select count ( * ) as total from city group by state ) )",
          "select state from city group by state having count ( * ) = ( select max ( total ) from ( select count ( * ) as total from city group by state ) )",
          "select state from city group by state having count ( city_code ) = ( select max ( total ) from ( select count ( city_code ) as total from city group by state ) )",
          "select state from city group by state having count ( city_code ) = ( select max ( count ) from ( select count ( city_code ) as count from city group by state ) )",
          "select state from city group by state having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from city group by state ) )",
          "select state from city group by state having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from city group by state ) )"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "with citycounts as ( select state , count ( city_code ) as num_cities from city group by state ) select state from citycounts where num_cities = ( select max ( num_cities ) from citycounts )",
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from city group by state ) )",
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( c1.city_count ) from ( select count ( * ) as city_count from city group by state ) c1 )",
          "select c.state from city c group by c.state having count ( c.city_code ) = ( select max ( c1.count ) from ( select count ( * ) as count from city group by state ) c1 )",
          "with rankedstates as ( select state , rank ( ) over ( order by count ( * ) desc ) rank from city group by state ) select state from rankedstates where rank = 1",
          "with rankedstates as ( select state , rank ( ) over ( order by count ( city_code ) desc ) rank from city group by state ) select state from rankedstates where rank = 1",
          "select state from city group by state having count ( city_code ) = ( select max ( cnt ) from ( select count ( city_code ) as cnt from city group by state ) )",
          "select c.state from ( select state , count ( city_code ) as num_cities from city group by state ) c order by num_cities desc limit 1"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "address_1",
      "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "with citycounts as ( select country , count ( city_code ) as num_cities from city group by country ) select country from citycounts where num_cities = ( select min ( num_cities ) from citycounts )",
          "with citycounts as ( select country , count ( city_code ) as totalcitycount from city group by country ) select country from citycounts where totalcitycount = ( select min ( totalcitycount ) from citycounts )",
          "with citycounts as ( select country , count ( * ) as num_cities from city group by country ) select country from citycounts where num_cities = ( select min ( num_cities ) from citycounts )",
          "with citycounts as ( select country , count ( * ) as cnt from city group by country ) select country from citycounts where cnt = ( select min ( cnt ) from citycounts )",
          "with citycounts as ( select country , count ( city_code ) as total from city group by country ) select country from citycounts where total = ( select min ( total ) from citycounts )",
          "with citycounts as ( select country , count ( city_code ) as population from city group by country ) select country from citycounts where population = ( select min ( population ) from citycounts )",
          "with citycounts as ( select country , count ( * ) as total from city group by country ) select country from citycounts where total = ( select min ( total ) from citycounts )",
          "with citycounts as ( select country , count ( city_code ) as totalcity from city group by country ) select country from citycounts where totalcity = ( select min ( totalcity ) from citycounts )"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "address_1",
      "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select country from city group by country having count ( city_code ) = ( select min ( cnt ) from ( select count ( city_code ) as cnt from city group by country ) )",
          "with citycounts as ( select country , count ( city_code ) as num_cities from city group by country ) select country from citycounts where num_cities = ( select min ( num_cities ) from citycounts )",
          "select country from city group by country order by count ( * ) asc limit 1",
          "select country from ( select country , count ( city_code ) as num_cities from city group by country ) where num_cities = ( select min ( num_cities ) from ( select count ( city_code ) as num_cities from city group by country ) )",
          "with countedcities as ( select country , count ( city_code ) as num_cities from city group by country ) select country from countedcities where num_cities = ( select min ( num_cities ) from countedcities )",
          "with citycounts as ( select country , count ( city_code ) as total from city group by country ) select country from citycounts where total = ( select min ( total ) from citycounts )",
          "with citycounts as ( select country , count ( city_code ) as population from city group by country ) select country from citycounts where population = ( select min ( population ) from citycounts )",
          "select country from city group by country having count ( city_code ) = ( select min ( cnt ) from ( select count ( * ) as cnt from city group by country ) )"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
      "infer_predictions": [
        [
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select fname , lname from student where exists ( select 1 from city where city_code = student.city_code and state = 'MD' )",
          "select fname , lname from student where exists ( select 1 from city where city.city_code = student.city_code and city.state = 'MD' )",
          "select fname , lname from student where exists ( select 1 from city where city.city_code = student.city_code and state = 'MD' )",
          "select fname , lname from student where city_code in ( select city_code from city where state = 'MD' )",
          "select fname , lname from student where exists ( select 1 from city where city_code = student.city_code and city.state = 'MD' )",
          "select student.fname , student.lname from student join city on student.city_code = city.city_code where city.state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Maryland'"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 789,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where city.country = 'China'",
          "select count ( * ) from student s join city c on s.city_code = c.city_code where c.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where country = 'China'",
          "select count ( distinct student.city_code ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( distinct student.city_code ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( distinct s.city_code ) from student s , city c where s.city_code = c.city_code and c.country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where city.country = 'China'",
          "select count ( * ) from student where city_code in ( select city_code from city where country = 'China' )",
          "select count ( * ) from city join student on city.city_code = student.city_code where country = 'China'",
          "select count ( distinct student.city_code ) from student , city where student.city_code = city.city_code and city.country = 'China'",
          "select count ( distinct student.city_code ) from student join city on student.city_code = city.city_code where city.country = 'China'"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Boston'",
          "select student.fname , student.major from student join city on student.city_code = city.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Bowie'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Barker'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimores'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Belfast'"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from student join city on student.city_code = city.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Boston'",
          "select fname , major from student where exists ( select 1 from city where city_code = student.city_code and city_name = 'Baltimore' )",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Bowie'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Barker'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltitown'"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "address_1",
      "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
      "infer_predictions": [
        [
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select city.country as city_country , count ( * ) as num_students from city join student on city.city_code = student.city_code group by city.country",
          "select city.country as country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select city.country , count ( * ) from student join city on student.city_code = city.city_code group by city.country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "address_1",
      "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
      "infer_predictions": [
        [
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select country , count ( * ) from student join city on student.city_code = city.city_code group by country",
          "select city.country , count ( * ) from student join city on student.city_code = city.city_code group by city.country"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
      "infer_predictions": [
        [
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_name",
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by city.city_name",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_code",
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by city.city_code",
          "select count ( * ) , city_name from student join city on student.city_code = city.city_code group by city.city_name",
          "select count ( distinct student.city_code ) , city.city_name from city join student on city.city_code = student.city_code group by city.city_name",
          "select city.city_name , count ( * ) from student join city on student.city_code = city.city_code group by city.city_name",
          "select count ( * ) , city_name from city join student on city.city_code = student.city_code group by city.city_name"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
      "infer_predictions": [
        [
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_name",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_code",
          "select city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_name",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by student.city_code",
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by city.city_name",
          "select city.city_name , count ( * ) from student join city on student.city_code = city.city_code group by city.city_name",
          "select city_name , count ( * ) from student join city on student.city_code = city.city_code group by city.city_name",
          "select city.city_name , count ( * ) from city join student on city.city_Code = student.city_code group by city.city_name"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select c.state from city c join student s on c.city_code = s.city_code group by c.state having count ( s.sex ) = ( select max ( student_count ) from ( select count ( * ) as student_count from student group by city_code ) )",
          "select c.state from city c join student s on c.city_code = s.city_code group by c.state having count ( s.age ) = ( select max ( student_count ) from ( select count ( * ) as student_count from student group by city_code ) )"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select c.state from city c join student s on c.city_code = s.city_code group by c.state having count ( s.city_code ) = ( select max ( count ) from ( select count ( city_code ) as count from student group by city_code ) )",
          "select c.state from city c join student s on c.city_code = s.city_code group by c.state having count ( s.sex ) = ( select max ( count ) from ( select count ( * ) as count from student group by city_code ) )",
          "select c.state from city c join ( select city_code from student group by city_code having count ( city_code ) = ( select max ( count ) from ( select count ( city_code ) as count from student group by city_code ) ) ) s on c.city_code = s.city_code"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "address_1",
      "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "with studentcounts as ( select country , count ( city_code ) as num_students from city group by country ) select country from studentcounts where num_students = ( select min ( num_students ) from studentcounts )",
          "select country from city group by country order by count ( * ) asc limit 1",
          "with studentcounts as ( select country , count ( * ) as num_students from city group by country ) select country from studentcounts where num_students = ( select min ( num_students ) from studentcounts )",
          "with studentcounts as ( select country , count ( * ) as total from city group by country ) select country from studentcounts where total = ( select min ( total ) from studentcounts )"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "address_1",
      "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select country from city group by country order by count ( * ) asc limit 1",
          "select country from city join student on city.city_code = student.city_code group by country order by count ( * ) asc limit 1",
          "select c.country from city c join student s on c.city_code = s.city_code group by c.country order by count ( s.sex ) asc limit 1",
          "select c.country from city c join ( select city_code from student group by city_code having count ( city_code ) = ( select min ( count ) from ( select count ( city_code ) as count from student group by city_code ) ) ) s on c.city_code = s.city_code",
          "select c.country from city c join ( select city_code from student group by city_code having count ( city_code ) = ( select min ( count ) from ( select count ( city_code ) as count from student group by city_code ) ) ) d on c.city_code = d.city_code",
          "select city.country from city join student on city.city_code = student.city_code group by city.country order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by city.city_name having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by city.city_code having count ( * ) >= 3",
          "select city.city_name from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( distinct student.city_code ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_Code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by city.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( distinct student.city_code ) >= 3",
          "select city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_Code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5",
          "select city.state from student join city on student.city_code = city.city_code group by city.state having count ( * ) > 5",
          "select distinct city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) >= 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.city_code having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select city.state from city join student on city.city_Code = student.city_code group by city.state having count ( * ) > 5"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
      "infer_predictions": [
        [
          "select state from city group by state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5",
          "select state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select state from student join city on student.city_code = city.city_code group by state having count ( * ) > 5",
          "select city.state from student join city on student.city_code = city.city_code group by city.state having count ( * ) > 5"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where city_code not in ( select city_code from city where country = 'USA' )",
          "select stuid from student where city_code != 'USA'",
          "select stuid from student where city_code != ( select city_code from city where country = 'USA' )",
          "select student.stuid from city join student on city.city_code = student.city_code where city.country != 'USA'",
          "select stuid from student where city_code not in ( select city_code from city where country = 'United States' )",
          "select stuid from student where city_code not in ( select city.city_code from city join student on city.city_code = student.city_code where city.country = 'USA' )"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where city_code not in ( select city.city_code from city join student on city.city_code = student.city_code where city.country = 'USA' )",
          "select stuid from student where city_code not in ( select city.city_code from city join student on city.city_code = student.city_code where city.country = 'United States' )",
          "select stuid from student where city_code not in ( select c.city_code from city c join student s on c.city_code = s.city_code where c.country = 'USA' )"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
      "infer_predictions": [
        [
          "select student.stuid from city join student on city.city_code = student.city_code where student.sex = 'F' and city.state = 'PA'",
          "select stuid from student where sex = 'F' and city_code in ( select city_code from city where state = 'PA' ) and sex = 'F'",
          "select student.stuid from city join student on city.city_code = student.city_code where city.state = 'PA' and student.sex = 'F'"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
      "infer_predictions": [
        [
          "select student.stuid from city join student on city.city_code = student.city_code where city.state = 'PA' and student.sex = 'F'",
          "select student.stuid from city join student on city.city_code = student.city_code where student.sex = 'F' and city.state = 'PA'",
          "select stuid from student where sex = 'F' and city_code = ( select city_code from city where state = 'PA' )",
          "select stuid from student where sex = 'F' and city_code = ( select city_code from city where state = 'PA' )"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where sex = 'M' and city_code != 'USA'",
          "select stuid from student where sex = 'M' and city_code != ( select city_code from city where country = 'USA' )",
          "select stuid from student where sex = 'M' and city_code = student.city_code",
          "select student.stuid from city join student on city.city_code = student.city_code where city.country = 'USA' and student.sex = 'M'",
          "select student.stuid from city join student on city.city_code = student.city_code where city.country != 'USA' and student.sex = 'M'"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where sex = 'M' and city_code != 'USA'",
          "select stuid from student where sex = 'M' except select stuid from student join city on student.city_code = city.city_code where city.country = 'USA'",
          "select stuid from student where sex = 'M' except select stuid from student where city_code = 'USA'"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
      "infer_predictions": [
        [
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL' or city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL' and city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL' or city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL' and city.city_name = 'CHI'"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
      "infer_predictions": [
        [
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL' or city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL' and city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL' or city.city_name = 'CHI'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL' and city.city_name = 'CHI'"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
      "infer_predictions": [
        [
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston' or city.city_name = 'Newark'"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
      "infer_predictions": [
        [
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston' or city.city_name = 'Newark'",
          "select distance from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Boston' and city.city_name = 'Newark'",
          "select distance from direct_distance where city1_code in ( select city_code from city where city_name = 'Boston' or city_name = 'Newark' )",
          "select distance from direct_distance where city2_code in ( select city_code from city where city_name = 'Boston' or city_name = 'Newark' )"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
      "infer_predictions": [
        [
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance join city on direct_distance.city2_code = city.city_code"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
      "infer_predictions": [
        [
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance join city on direct_distance.city2_code = city.city_code",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city_code from city where city_code in ( select city2_code from direct_distance group by city2_code having max ( distance ) )",
          "select c.city_code from city c join ( select city2_code from direct_distance group by city2_code having max ( distance ) ) dd on c.city_code = dd.city2_code",
          "select c.city_code from city c join direct_distance dd on c.city_code = dd.city2_code where dd.distance = ( select max ( distance ) from direct_distance )",
          "select c.city_code from city c join direct_distance d on c.city_code = d.city2_code where d.distance = ( select max ( distance ) from direct_distance )",
          "select city_code from city where city_code in ( select city2_code from direct_distance where distance = ( select max ( distance ) from direct_distance ) )"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select c.city_code from city c inner join direct_distance d on c.city_code = d.city1_code where d.distance = ( select max ( distance ) from direct_distance )",
          "select c.city_code from city c join direct_distance d on c.city_code = d.city1_code where d.distance = ( select max ( distance ) from direct_distance )",
          "select c.city_code from city c join direct_distance dd on c.city_code = dd.city1_code where dd.distance = ( select max ( distance ) from direct_distance )",
          "select c.city_code from city c inner join direct_distance dd on c.city_code = dd.city1_code where dd.distance = ( select max ( distance ) from direct_distance )",
          "select c.city_code from city c join ( select city1_code from direct_distance where distance = ( select max ( distance ) from direct_distance ) ) dd on c.city_code = dd.city1_code",
          "select c.city_code from city as c inner join direct_distance as d on c.city_code = d.city1_code where d.distance = ( select max ( distance ) from direct_distance )"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
      "infer_predictions": [
        [
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance ) group by city.city_code having count ( * ) > 0",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance ) group by city.city_code having count ( city_code ) > 0",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance ) group by city.city_code having count ( * ) > 2",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance ) group by city.city_code having count ( * ) = 2",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance ) group by city.city_code having count ( distinct city_code ) > 0"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
      "infer_predictions": [
        [
          "select c.city_code from city c join direct_distance d on c.city_code = d.city1_code where d.distance > ( select avg ( distance ) from direct_distance )",
          "select c.city_code from city c where c.city_code in ( select d.city1_code from direct_distance d where d.distance > ( select avg ( distance ) from direct_distance ) )",
          "select c.city_code from city c where exists ( select 1 from direct_distance d where d.city1_code = c.city_code and d.distance > ( select avg ( distance ) from direct_distance ) )",
          "select c.city_code from city c join direct_distance dd on c.city_code = dd.city1_code where dd.distance > ( select avg ( distance ) from direct_distance )",
          "select c.city_code from city c where exists ( select 1 from direct_distance d where d.city1_code = c.city_code and d.distance > ( select avg ( distance ) from direct_distance ) )"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
      "infer_predictions": [
        [
          "select city_code from city where city_code in ( select city2_code from direct_distance where distance < 1000 )",
          "select city_code from city where city_code in ( select city_code from direct_distance where distance < 1000 )",
          "select city_code from city where city_code in ( select city2_code from direct_distance where distance < 1000 ) and city_code in ( select city1_code from direct_distance where distance < 1000 )",
          "select city_code from city where city_code in ( select city2_code from direct_distance where distance < 1000 ) and city_code in ( select city2_code from direct_distance where distance < 1000 )",
          "select city_code from city where city_code in ( select city_code from direct_distance where distance < 1000 ) and city_code in ( select city_code from direct_distance where distance < 1000 )",
          "select c.city_code from city c join direct_distance dd on c.city_code = dd.city2_code where dd.distance < 1000"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
      "infer_predictions": [
        [
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance < 1000",
          "select c.city_code from city c join direct_distance d on c.city_code = d.city1_code where d.distance < 1000",
          "select c.city_code from city c where c.city_code in ( select d.city1_code from direct_distance d where d.distance < 1000 )",
          "select c.city_code from city c join direct_distance dd on c.city_code = dd.city1_code where dd.distance < 1000",
          "select c.city_code from city c join direct_distance d on c.city_code = d.city1_code where d.distance < 1000",
          "select c.city_code from city c where c.city_code in ( select d.city1_code from direct_distance d where d.distance < 1000 )"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "address_1",
      "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
      "infer_predictions": [
        [
          "select sum ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'",
          "select sum ( distance ) from direct_distance where city1_code in ( select city_code from city where city_name = 'BAL' )",
          "select sum ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL'"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "address_1",
      "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
      "infer_predictions": [
        [
          "select sum ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'",
          "select sum ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'BAL'",
          "select sum ( distance ) from direct_distance where city1_code in ( select city_code from city where city_name = 'BAL' )",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
      "infer_predictions": [
        [
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston' or city.city_name = 'Boston'",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston' and direct_distance.city2_code = city.city_code",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance where city1_code in ( select city_code from city where city_name = 'Boston' )"
        ]
      ]
    },
    {
      "id": 826,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
      "infer_predictions": [
        [
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance where city1_code in ( select city_code from city where city_name = 'Boston' )",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston' or city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Boston'"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 828,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
      "infer_predictions": [
        [
          "select city_name from city where city_code = ( select min ( direct_distance.city2_code ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Chicago' )",
          "select city_name from city where city_code = ( select min ( direct_distance.city2_code ) from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Chicago' )",
          "select city_name from city where city_code = ( select max ( city_code ) from city where city_name = 'Chicago' )",
          "select city_name from city where city_code = ( select min ( city_code ) from city where city_name = 'Chicago' )"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 830,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 831,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
      "infer_predictions": [
        [
          "select c.city_code , sum ( d.distance ) from city c join direct_distance d on c.city_code = d.city1_code group by c.city_code",
          "select c.city_code , sum ( d.distance ) as total_distance from city c join direct_distance d on c.city_code = d.city1_code group by c.city_code",
          "select c.city_code , sum ( d.distance ) from city c join direct_distance d on c.city_code = d.city1_code group by c.city_code",
          "select c.city_code , sum ( d.distance ) from city c join direct_distance d on c.city_code = d.city2_code group by c.city_code",
          "select c.city_code , sum ( dd.distance ) from city c join direct_distance dd on c.city_code = dd.city1_code group by c.city_code",
          "select c.city_code , sum ( d.distance ) from city c join direct_distance d on c.city_code = d.city1_code group by c.city_code"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
      "infer_predictions": [
        [
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_code",
          "select city.city_code , sum ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "address_1",
      "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
      "infer_predictions": [
        [
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_name",
          "select city_name , avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_name",
          "select city_name , avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_name",
          "select c.city_name , avg ( d.distance ) from city c join direct_distance d on c.city_code = d.city2_code group by c.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_code"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "address_1",
      "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
      "infer_predictions": [
        [
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) as avg_distance from city left join direct_distance on city.city_code = direct_distance.city2_code group by city.city_code",
          "select city.city_name , avg ( direct_distance.distance ) as avg_distance from city left join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
      "infer_predictions": [
        [
          "select distance from student join direct_distance on student.city_code = direct_distance.city1_code join city on direct_distance.city2_code = city.city_code where student.fname = 'Linda' and student.lname = 'Smith'"
        ]
      ]
    },
    {
      "id": 836,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
      "infer_predictions": [
        [
          "select distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code where student.fname = 'Linda' and student.lname = 'Smith' intersect select distance from direct_distance join city on direct_distance.city2_code = city.city_code join student on direct_distance.city1_code = city.city_code where student.fname = 'Tracy' and student.lname = 'Kim'",
          "select distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code where student.lname = 'Linda' and student.fname = 'Smith' intersect select distance from direct_distance join city on direct_distance.city2_code = city.city_code join student on direct_distance.city1_code = city.city_code where student.fname = 'Tracy' and student.lname = 'Kim'",
          "select distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code where student.lname = 'Linda' and student.fname = 'Smith' intersect select distance from direct_distance join city on direct_distance.city2_code = city.city_code join student on direct_distance.city1_code = city.city_code where student.lname = 'Tracy' and student.fname = 'Kim'",
          "select distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code where student.fname = 'Linda' and student.lname = 'Smith' intersect select distance from direct_distance join city on direct_distance.city2_code = city.city_code join student on direct_distance.city2_code = city.city_code where student.fname = 'Tracy' and student.lname = 'Kim'",
          "select distance from direct_distance where city1_code in ( select city_code from student where fname = 'Linda' and lname = 'Smith' intersect select city_code from student where fname = 'Tracy' and lname = 'Kim' )"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "address_1",
      "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select s.fname , s.lname from student s where exists ( select 1 from direct_distance d where d.city1_code = s.city_code and s.fname = 'Linda' ) and exists ( select 1 from direct_distance d where d.city1_code = s.city_code and s.fname = 'Smith' )",
          "select s.fname , s.lname from student s where exists ( select 1 from direct_distance d where d.city2_code = s.city_code and s.fname = 'Linda' ) and exists ( select 1 from direct_distance d where d.city2_code = s.city_code and s.fname = 'Smith' )"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "address_1",
      "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 839,
      "db_id": "address_1",
      "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code where student.fname = 'LINDA'",
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'LINDA'",
          "select city.state from city join student on city.city_code = student.city_code where student.fname = 'Linda'",
          "select city.state from student join city on student.city_code = city.city_code where student.fname = 'LINDA'",
          "select state from city join student on city.city_code = student.city_code where student.fname = 'LINDA'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "address_1",
      "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code where student.fname = 'LINDA'",
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'LINDA'",
          "select city.state from city join student on city.city_code = student.city_code where student.fname = 'Linda'",
          "select city.state from student join city on student.city_code = city.city_code where student.fname = 'LINDA'"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "boat_1",
      "gold": "SELECT * FROM Sailors WHERE age  >  30",
      "infer_predictions": [
        [
          "select * from sailors where age > 30"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "boat_1",
      "gold": "SELECT * FROM Sailors WHERE age  >  30",
      "infer_predictions": [
        [
          "select * from sailors where age > 30"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
      "infer_predictions": [
        [
          "select name , age from sailors where age < 30",
          "select name , age from sailors where age <= 30"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
      "infer_predictions": [
        [
          "select name , age from sailors where age < 30",
          "select name , age from sailors where age <= 30"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
      "infer_predictions": [
        [
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.name = '1'",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.name = '1'",
          "select b.name from boats b inner join reserves r on b.bid = r.bid inner join sailors s on r.sid = s.sid where s.name = '1'",
          "select b.name from boats b inner join reserves r on b.bid = r.bid inner join sailors s on r.sid = s.sid where s.name = 1",
          "select name from boats where bid in ( select reserves.bid from reserves join sailors on reserves.sid = sailors.sid where sailors.name = '1' )",
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.name = 'John Doe' and reserves.sid = 1",
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.name = 'James' and reserves.sid = 1"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
      "infer_predictions": [
        [
          "select distinct bid from reserves join sailors on reserves.sid = sailors.sid where sailors.sid = 1",
          "select distinct reserves.bid from sailors join reserves on sailors.sid = reserves.sid where sailors.sid = 1",
          "select distinct r.bid from reserves r join sailors sa on r.sid = sa.sid where sa.sid = 1",
          "select distinct r.bid from reserves r join sailors s on r.sid = s.sid where s.sid = 1",
          "select distinct reserves.bid from reserves join sailors on reserves.sid = sailors.sid where sailors.sid = 1"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
      "infer_predictions": [
        [
          "select name from boats join reserves on boats.bid = reserves.bid where boats.name = '102'",
          "select name from boats where name = '102'",
          "select * from boats join reserves on boats.bid = reserves.bid where boats.name = '102'",
          "select * from reserves join boats on reserves.bid = boats.bid where boats.name = '102'"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
      "infer_predictions": [
        [
          "select name from sailors where sid in ( select sid from reserves where bid = 102 )",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 102 )",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = '102' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 102",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 102 )"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves",
      "infer_predictions": [
        [
          "select distinct bid from reserves",
          "select bid from reserves group by bid having count ( bid ) = ( select max ( cnt ) from ( select count ( bid ) as cnt from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( distinct bid ) = ( select max ( cnt ) from ( select count ( distinct bid ) as cnt from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( distinct bid ) = ( select max ( c ) from ( select count ( distinct bid ) as c from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( bid ) = ( select max ( bid ) from ( select count ( bid ) as bid from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( bid ) = ( select max ( cnt ) from ( select count ( * ) as cnt from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( distinct bid ) = ( select max ( cnt ) from ( select count ( bid ) as cnt from reserves group by bid ) )",
          "select bid from reserves group by bid having count ( distinct bid ) = ( select max ( cnt ) from ( select count ( * ) as cnt from reserves group by bid ) )"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves",
      "infer_predictions": [
        [
          "select r.sid from reserves r left join boats b on r.bid = b.bid group by r.sid",
          "select r.bid from reserves r",
          "select r.bid from reserves r left join boats b on r.bid = b.bid group by r.bid",
          "select r.sid from reserves r join boats b on r.bid = b.bid where r.bid is not null",
          "select r.sid from reserves r join boats b on r.bid = b.bid group by r.sid",
          "select r.sid from reserves r join boats b on r.bid = b.bid"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
      "infer_predictions": [
        [
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%' and name is not null",
          "select name from sailors where name like '%e%' and name is not null",
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
      "infer_predictions": [
        [
          "select name from sailors where name like '%e%'",
          "select s.name from sailors s where s.name like '%e%'",
          "select name from sailors where name like '%e%' and name is not null",
          "select name from sailors where name like '%e%' and name is not null",
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
      "infer_predictions": [
        [
          "select distinct s.sid from sailors s where s.age > ( select max ( age ) from sailors )",
          "select s.sid from sailors s where s.age > ( select max ( age ) from sailors )",
          "select distinct sa.sid from sailors sa where sa.age > ( select max ( age ) from sailors )",
          "select distinct s.sid from sailors s where s.age > ( select max ( age ) from sailors )",
          "select sid from sailors where age > ( select max ( age ) from sailors )",
          "select distinct sid from sailors where age > ( select max ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
      "infer_predictions": [
        [
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )",
          "select distinct s.sid from sailors s where s.age != ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age not in ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
      "infer_predictions": [
        [
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select name from sailors where age > ( select max ( age ) from sailors where rating > 7 )"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
      "infer_predictions": [
        [
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct s.name from sailors s where s.age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating >7 )"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , reserves.sid from reserves join sailors on reserves.sid = sailors.sid group by reserves.sid having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 1",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 2",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select sailors.sid , sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "boat_1",
      "gold": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
      "infer_predictions": [
        [
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( distinct reserves.bid ) >= 2",
          "select distinct ( sailors.name ) from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'Red' or b.color = 'Blue'",
          "select s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' or b.color = 'blue'",
          "select reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select sid from reserves where bid in ( select bid from boats where color in ('red' , 'blue' ) )",
          "select distinct reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'Red' or b.color = 'Blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' or b.color = 'blue'",
          "select distinct sa.sid from sailors sa join reserves r on sa.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' or b.color = 'blue'",
          "select distinct sa.sid from sailors sa join reserves r on sa.sid = r.sid join boats b on r.bid = b.bid where b.color = 'Red' or b.color = 'Blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'RED' or b.color = 'BLUE'",
          "select distinct sa.sid from sailors sa join reserves rs on sa.sid = rs.sid join boats b on rs.bid = b.bid where b.color = 'red' or b.color = 'blue'",
          "select s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'Red' or b.color = 'Blue'",
          "select distinct sa.sid from sailors sa join reserves rs on sa.sid = rs.sid join boats b on rs.bid = b.bid where b.color = 'Red' or b.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ('red' , 'blue' ) )",
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where color = 'red' or color = 'blue' ) )",
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ( 'bid' ) )",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where color = 'red' or color = 'blue' ) )",
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ( 'bid' ) )",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select name , sid from sailors where sid in ( select sid from reserves where bid in ('red' , 'blue' ) )"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'red' intersect select reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'blue'",
          "select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Blue'",
          "select distinct reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select distinct reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' and boats.color = 'blue'",
          "select distinct reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'red' and boats.color = 'blue'",
          "select distinct reserves.sid from boats join reserves on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select distinct reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' and b.color = 'blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'Red' and b.color = 'Blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color in ('red' , 'blue' ) group by s.sid having count ( distinct b.color ) = 2",
          "select distinct sa.sid from sailors sa join reserves r on sa.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' and b.color = 'blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' or b.color = 'blue'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'RED' and b.color = 'BLUE'",
          "select distinct s.sid from sailors s join reserves r on s.sid = r.sid join boats b on r.bid = b.bid where b.color = 'red' or b.color = 'blue'"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue' )",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue' )",
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue' )",
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' union select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue' )",
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue' )",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Blue'",
          "select name , sid from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Blue' )"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors except select sid from reserves"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors group by sid having count ( sid ) not in ( select sid from reserves )",
          "select sid from sailors group by sid having count ( * ) not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select distinct sid from reserves )"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "boat_1",
      "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors where sid not in ( select distinct sid from reserves )",
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors where sid not in ( select sid from reserves )"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "boat_1",
      "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors where sid not in ( select distinct sid from reserves )",
          "select name , sid from sailors except select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select name , sid from sailors where sid not in ( select sid from reserves )"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select sid from reserves )"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors except select s.sid from sailors s join reserves r on s.sid = r.sid where r.bid in ( select b.bid from boats b group by b.bid )",
          "select sid from sailors except select s.sid from sailors s join reserves r on s.sid = r.sid where r.bid in ( select b.bid from boats b join reserves r on b.bid = r.bid )",
          "select sid from sailors except select s.sid from sailors s join reserves r on s.sid = r.sid where r.bid in ( select b.bid from boats b join reserves r on b.bid = r.bid)"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
      "infer_predictions": [
        [
          "select name from sailors where sid in ( select sid from reserves where bid = 103 )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 103",
          "select sailors.name from reserves join sailors on reserves.sid = sailors.sid where reserves.bid = 103",
          "select name from sailors where sid in ( select Sid from reserves where bid = 103 )",
          "select name from sailors where sid in ( select sid from reserves where bid = 103 )"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
      "infer_predictions": [
        [
          "select name from sailors where sid in ( select sid from reserves where bid = 103 )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 103",
          "select sailors.name from reserves join sailors on reserves.sid = sailors.sid where reserves.bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.sid = 103"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select s.name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors s1 where s1.rating > ( select max ( s2.rating ) from sailors s2 where s2.name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucian' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucian' )"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucian' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucie' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucas' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucias' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucio' )"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select s.name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors s1 where s1.rating > ( select max ( s2.rating ) from sailors s2 where s2.name = 'Luis' )",
          "select s1.name from sailors s1 where s1.rating > ( select max ( s2.rating ) from sailors s2 where s2.name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select s.name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucio' )"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select s.name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select s1.name from sailors s1 where s1.rating > ( select max ( s2.rating ) from sailors s2 where s2.name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select sa.name from sailors sa where sa.rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select s.name from sailors s where s.rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select s1.name from sailors s1 where s1.rating > ( select max ( s2.rating ) from sailors s2 where s2.name = 'Lucio' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucian' )"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 882,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
      "infer_predictions": [
        [
          "select name , sid from sailors where rating >= 3 and sid in ( select sid from reserves where rating >= 3 )"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
      "infer_predictions": [
        [
          "select name , age from sailors where age = ( select max ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
      "infer_predictions": [
        [
          "select s.name , s.age from sailors s where s.age = ( select max ( age ) from sailors )",
          "select sa.name , sa.age from sailors sa where sa.age = ( select max ( age ) from sailors )",
          "select s.name , s.age from sailors s where s.age = ( select max ( age ) from sailors )",
          "select x.name , x.age from sailors x where x.age = ( select max ( age ) from sailors )",
          "select name , age from sailors where age = ( select max ( age ) from sailors )",
          "select s.Name , s.age from sailors s where s.age = ( select max ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "boat_1",
      "gold": "SELECT COUNT(*) FROM Sailors",
      "infer_predictions": [
        [
          "select count ( * ) from sailors"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "boat_1",
      "gold": "SELECT COUNT(*) FROM Sailors",
      "infer_predictions": [
        [
          "select count ( * ) from sailors"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "boat_1",
      "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
      "infer_predictions": [
        [
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = '7'",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "boat_1",
      "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
      "infer_predictions": [
        [
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = '7'",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7.",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "boat_1",
      "gold": "select count(*) from sailors where name like 'd%'",
      "infer_predictions": [
        [
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like '%D%'",
          "select count ( * ) from sailors where name like 'D0%'",
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like \"D%\""
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "boat_1",
      "gold": "select count(*) from sailors where name like 'd%'",
      "infer_predictions": [
        [
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like '%D%'",
          "select count ( * ) from sailors where name like 'D0%'",
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like \"D%\""
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "boat_1",
      "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
      "infer_predictions": [
        [
          "select avg ( rating ) , max ( age ) from sailors",
          "select max ( rating ) , avg ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max (age ) from sailors"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "boat_1",
      "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
      "infer_predictions": [
        [
          "select avg ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors group by rating",
          "select avg ( rating ) , max ( age ) from sailors group by age",
          "select max ( rating ) , avg ( age ) from sailors",
          "select avg ( rating ) & max ( age ) from sailors"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.bid",
          "select boats.name , count ( reserves.bid ) as reservation_count from boats join reserves on boats.bid = reserves.bid group by boats.bid",
          "select boats.name , count ( reserves.bid ) as reservation_count from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( reserves.bid ) as reservations_count from boats join reserves on boats.bid = reserves.bid group by boats.bid",
          "select boats.name , count ( reserves.bid ) as reservations_count from boats join reserves on boats.bid = reserves.bid group by boats.name"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.bid",
          "select boats.name , count ( reserves.bid ) as reservation_count from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( reserves.bid ) as reservations_count from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( reserves.bid ) as reservation_count from boats join reserves on boats.bid = reserves.bid group by boats.bid",
          "select boats.name , count ( reserves.bid ) as reservations_count from boats join reserves on boats.bid = reserves.bid group by boats.bid"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
      "infer_predictions": [
        [
          "select bid , count ( * ) from reserves where bid > 50 group by bid",
          "select count ( * ) , bid from reserves where bid > 50 group by bid",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.bid > 50 group by boats.bid",
          "select bid , count ( * ) from reserves where sid > 50 group by bid",
          "select boats.bid , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.bid > 50 group by boats.bid"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
      "infer_predictions": [
        [
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.bid",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.bid > 50 group by boats.bid",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid where reserves.bid > 50 group by boats.name",
          "select bid , count ( * ) from reserves where sid > 50 group by bid",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.bid",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.name",
          "select reserves.bid , count ( * ) from reserves join boats on reserves.bid = boats.bid where reserves.sid > 50 group by reserves.bid"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by reserves.bid having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by reserves.bid having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select count ( * ) , boats.Name from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.bid having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where reserves.bid > 1 group by boats.name",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where reserves.sid > 1 group by boats.name",
          "select count ( * ) , boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where reserves.sid > 1 group by boats.name",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.name",
          "select count ( * ) , boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.sid > 1 group by boats.name"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
      "infer_predictions": [
        [
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.bid",
          "select boats.name , count ( * ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.sid > 1 group by sailors.sid"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "boat_1",
      "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
      "infer_predictions": [
        [
          "select avg ( age ) , rating from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' ) group by rating",
          "select avg ( age ) , rating from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' ) group by rating",
          "select avg ( rating ) , age from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' ) group by rating"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "boat_1",
      "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
      "infer_predictions": [
        [
          "select rating , avg ( age ) from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' ) group by rating",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select rating , avg ( age ) from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'Red' ) group by rating",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' group by sailors.rating",
          "select rating , avg ( age ) from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' ) group by sailors.rating"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "boat_1",
      "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
      "infer_predictions": [
        [
          "select name , rating , age from sailors order by rating asc , age",
          "select name , rating , age from sailors order by rating + age asc",
          "select name , rating , age from sailors order by rating desc , age",
          "select name , rating , age from sailors order by rating + age asc , name",
          "select name , rating , age from sailors order by rating asc , age"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "boat_1",
      "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
      "infer_predictions": [
        [
          "select name , rating , age from sailors order by rating asc , age",
          "select name , rating , age from ( select name , rating , age from sailors order by rating asc , age ) as z",
          "select name , rating , age from ( select name , rating , age from sailors order by rating asc , age ) as c",
          "select name , rating , age from sailors order by rating asc , age",
          "select name , rating , age from ( select name , rating , age from sailors order by rating asc , age ) as z"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats",
      "infer_predictions": [
        [
          "select count ( * ) from boats"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats",
      "infer_predictions": [
        [
          "select count ( * ) from boats",
          "select count ( * ) , name from boats",
          "select count ( * ) from boats",
          "select count ( * ) from boats"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
      "infer_predictions": [
        [
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color = 'RED'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color like'red'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color like '#red%'"
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
      "infer_predictions": [
        [
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'RED'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color like'red'",
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color = 'red'"
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "boat_1",
      "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
      "infer_predictions": [
        [
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.age between 20 and 30",
          "select b.name from boats b inner join reserves r on b.bid = r.bid inner join sailors s on r.sid = s.sid where s.age between 20 and 30",
          "select name from boats where bid in ( select reserves.bid from reserves join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30 )",
          "select boats.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where sailors.age between 20 and 30"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "boat_1",
      "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
      "infer_predictions": [
        [
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select name from boats where bid in ( select reserves.bid from reserves join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30 )",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.age between 20 and 30",
          "select boats.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where sailors.age between 20 and 30"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where sid = boats.bid and boats.color = 'Red' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where boats.color = 'Red' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where sid = boats.bid and boats.color = 'red' )"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where sid = boats.bid and boats.color = 'Red' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where boats.color = 'Red' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.rating > ( select max ( rating ) from sailors where sid = boats.bid and boats.color = 'red' )"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "boat_1",
      "gold": "SELECT max(rating) FROM Sailors",
      "infer_predictions": [
        [
          "select max ( rating ) from sailors",
          "select max ( rating ) from sailors group by rating having max ( rating ) = ( select max ( rating ) from sailors )",
          "select max ( rating ) from sailors group by rating having max ( rating ) = ( select max ( rating ) from ( select max ( rating ) as max_rating from sailors group by rating ) )",
          "select max ( rating ) from sailors group by rating order by max ( rating ) desc limit 1",
          "select max ( rating ) from sailors group by rating having max ( rating ) = ( select max ( rating ) from sailors group by rating )",
          "select max ( rating ) from sailors group by rating having max ( rating ) = max ( ( select max ( rating ) from sailors group by rating ) )",
          "select rating from sailors order by rating desc limit 1"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "boat_1",
      "gold": "SELECT max(rating) FROM Sailors",
      "infer_predictions": [
        [
          "select max ( rating ) from sailors"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
      "infer_predictions": [
        [
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'Melon' ) )",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 'Melon' )",
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'Mellon' ) )",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 'Mellon' )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melon'",
          "select sailors.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Melon'",
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'melon' ) )",
          "select sailors.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Mellon'"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
      "infer_predictions": [
        [
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 'Melon' )",
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'Melon' ) )",
          "select name from sailors where sid in ( select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.name = 'Mellon' )",
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'Mellon' ) )",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melon'",
          "select name from sailors where sid in ( select sid from reserves where bid in ( select bid from boats where name = 'melon' ) )",
          "select sailors.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Melon'"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
      "infer_predictions": [
        [
          "select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
      "infer_predictions": [
        [
          "select name , age from sailors order by rating desc",
          "Select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from headphone where price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone ) where max_price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone ) where max_price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone ) where max_price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone ) where max_price = ( select max ( price ) from headphone )",
          "select model from ( select model , price , max ( price ) as max_price from headphone ) where max_price = ( select max ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from headphone where price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone group by model ) where max_price = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as maxprice from headphone group by model ) where maxprice = ( select max ( price ) from headphone )",
          "select model from ( select model , max ( price ) as max_price from headphone group by model ) where max_price = ( select max ( price ) from headphone )",
          "select model from headphone order by price desc limit 1",
          "select model from ( select model , max ( price ) as max_price from headphone group by model ) where max_price = ( select max ( price ) from headphone where model = model )",
          "select model from ( select model , max ( price ) as max_price from headphone group by model ) where max_price = ( select max ( price ) from headphone group by model )"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "headphone_store",
      "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
      "infer_predictions": [
        [
          "select distinct model from headphone order by model asc"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "headphone_store",
      "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
      "infer_predictions": [
        [
          "select distinct model from headphone order by model asc",
          "select distinct ( model ) from headphone order by model asc"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from headphone group by class ) )",
          "select class from headphone group by class having count ( class ) = ( select max ( cnt ) from ( select count ( * ) as cnt from headphone group by class ) )",
          "select class from headphone group by class having count ( class ) = ( select max ( class_count ) from ( select count ( * ) as class_count from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.class ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )",
          "select class from headphone group by class having count ( * ) = ( select max ( class_count ) from ( select count ( * ) as class_count from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.class ) = ( select max ( c ) from ( select count ( * ) as c from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.class ) = ( select max ( cnt ) from ( select count ( * ) as cnt from headphone group by class ) )",
          "select class from headphone group by class having count ( * ) = ( select max ( c ) from ( select count ( * ) as c from headphone group by class ) )"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.headphone_id ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.headphone_id ) = ( select max ( count ) from ( select count ( headphone_id ) as count from headphone group by class ) )",
          "select class from headphone group by class having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from headphone group by class ) )",
          "select p.class from headphone p group by p.class having count ( p.headphone_id ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )",
          "select h.class from headphone h group by h.class having count ( h.headphone_id ) = ( select max ( counted ) from ( select count ( * ) as counted from headphone group by class ) )",
          "select hp.class from headphone hp group by hp.class having count ( hp.headphone_id ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )",
          "select class from headphone group by class having count ( class ) = ( select max ( count ) from ( select count ( * ) as count from headphone group by class ) )"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) < 2",
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) <= 2",
          "select class from headphone group by class having count ( * ) <= 2"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
      "infer_predictions": [
        [
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
      "infer_predictions": [
        [
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select headphone.class , count ( * ) from headphone where price > 200 group by headphone.class",
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT earpads) FROM headphone",
      "infer_predictions": [
        [
          "select count ( distinct earpads ) from headphone"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT earpads) FROM headphone",
      "infer_predictions": [
        [
          "select count ( distinct earpads ) from headphone"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select earpads from headphone group by earpads order by count ( * ) desc limit 2",
          "select earpads from ( select earpads , count ( * ) as ccount from headphone group by earpads ) where ccount = ( select max ( ccount ) from ( select count ( * ) as ccount from headphone group by earpads ) )",
          "select earpads from ( select earpads , count ( * ) as cnt from headphone group by earpads ) where cnt = ( select max ( c ) from ( select count ( * ) as c from headphone group by earpads ) )",
          "with earcount as ( select earpads , count ( * ) as num from headphone group by earpads ) select earpads from earcount where num = ( select max ( num ) from earcount )",
          "select earpads from ( select earpads , rank ( ) over ( order by count ( * ) desc ) as rank from headphone group by earpads ) where rank <= 2"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select earpads from headphone group by earpads order by count ( * ) desc limit 2",
          "with earcount as ( select earpads , count ( * ) as cnt from headphone group by earpads ) select earpads from earcount where cnt = ( select max ( cnt ) from earcount )",
          "with earcount as ( select earpads , count ( * ) as count from headphone group by earpads ) select earpads from earcount where count <= 2",
          "with earcount as ( select earpads , count ( * ) as count from headphone group by earpads ) select earpads from earcount where count < 2",
          "with earcount as ( select earpads , count ( * ) as count from headphone group by earpads ) select earpads from earcount where count <= 2 order by count desc limit 2",
          "with earcount as ( select earpads , count ( * ) as count from headphone group by earpads ) select earpads from earcount where count < 2 order by count desc limit 2",
          "with earcount as ( select earpads , count ( * ) as count from headphone group by earpads ) select earpads from earcount where count <= 2"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "headphone_store",
      "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select model , class , construction from headphone where price = ( select min ( price ) from headphone )",
          "select model , class , construction from ( select model , class , construction , min ( price ) as price from headphone ) where price = ( select min ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "headphone_store",
      "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select model , class , construction from headphone where price = ( select min ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "headphone_store",
      "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
      "infer_predictions": [
        [
          "select construction , avg ( price ) from headphone group by construction",
          "select avg ( price ) , construction from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "headphone_store",
      "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
      "infer_predictions": [
        [
          "select avg ( price ) , construction from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select avg ( price )  , construction from headphone group by construction",
          "select avg ( price ) , construction from headphone group by construction",
          "select avg ( price ) , construction from headphone group by construction"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
      "infer_predictions": [
        [
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowl' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select headphone.class from headphone where earpads = 'Bowls' intersect select headphone.class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'ComfortPads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pad'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfortpads'"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
      "infer_predictions": [
        [
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowl' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select headphone.class from headphone where earpads = 'Bowls' intersect select headphone.class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pad'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'ComfortPads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
      "infer_predictions": [
        [
          "select earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select distinct earpads from headphone except select distinct earpads from headphone where construction = 'plastic'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'plastic'",
          "select earpads from headphone where construction not in ( select construction from headphone where construction = 'plastic' )",
          "select distinct earpads from headphone except select distinct earpads from headphone where construction = 'Plastic'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'rubber'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'metal'",
          "select earpads from headphone except select earpads from headphone where construction = 'Plastic'"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
      "infer_predictions": [
        [
          "select distinct earpads from headphone where construction != 'plastic'",
          "select earpads from headphone where construction != 'plastic'",
          "select distinct earpads from headphone where construction != 'Plastic'",
          "select earpads from headphone where construction != 'Plastic'",
          "select distinct earpads from headphone except select distinct earpads from headphone where construction = 'plastic'",
          "select earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select distinct earpads from headphone where construction != 'plastic'"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
      "infer_predictions": [
        [
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price <= ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
      "infer_predictions": [
        [
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price <= ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store ORDER BY date_opened",
      "infer_predictions": [
        [
          "select name from store order by date_opened asc"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store ORDER BY date_opened",
      "infer_predictions": [
        [
          "select name from store order by date_opened asc"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "headphone_store",
      "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
      "infer_predictions": [
        [
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Targana'",
          "select name , parking from store where neighborhood = 'Tarrazana'",
          "select name , parking from store where neighborhood = 'Tarazana'",
          "select name , parking from store where neighborhood = 'Tarazana'",
          "select name , parking from store where neighborhood = 'Tardana'",
          "select name , parking from store where neighborhood = 'Tarzana'"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "headphone_store",
      "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
      "infer_predictions": [
        [
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Tarzana'",
          "Select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Tarzano'"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT neighborhood) FROM store",
      "infer_predictions": [
        [
          "select count ( distinct neighborhood ) from store"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT neighborhood) FROM store",
      "infer_predictions": [
        [
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
      "infer_predictions": [
        [
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select count ( * ) , neighborhood from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
      "infer_predictions": [
        [
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select count ( * ) , neighborhood from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by Neighborhood"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "headphone_store",
      "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( quantity ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by stock.store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by stock.store_id order by sum ( quantity ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by store.store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by store.store_id order by sum ( stock.quantity ) desc limit 1"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "headphone_store",
      "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by store.store_id",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by store.name",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by store.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , sum ( stock.quantity ) from store join stock on store.store_id = stock.store_id group by store.store_id",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by store.name order by sum ( stock.quantity ) desc limit 1",
          "select store.name , sum ( stock.quantity ) from store join stock on store.store_id = stock.store_id group by store.name"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
      "infer_predictions": [
        [
          "select name from store where store_id not in ( select distinct store_id from stock where headphone_id = stock.headphone_id )",
          "select name from store where store_id not in ( select distinct store_id from stock where headphone_id )",
          "select name from store where store_id not in ( select distinct store_id from stock where headphone_id != stock.headphone_id )",
          "select store.name from store where store_id not in ( select distinct store_id from stock where headphone_id = stock.headphone_id )",
          "select name from store where store_id not in ( select store_id from stock where headphone_id != stock.headphone_id )"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
      "infer_predictions": [
        [
          "select name from store where store_id not in ( select distinct store_id from stock where quantity > 0 )",
          "select store.name from store where store_id not in ( select distinct store_id from stock where quantity > 0 )",
          "select name from store where store_id not in ( select store_id from stock where quantity > 0 )",
          "select store.name from store where store_id not in ( select store_id from stock where quantity > 0 )",
          "select name from store where store_id not in ( select distinct store_id from stock where quantity >= 0 )"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
      "infer_predictions": [
        [
          "select model from headphone where headphone_id not in ( select headphone_id from stock )",
          "select model from headphone where headphone_id not in ( select distinct headphone_id from stock )"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
      "infer_predictions": [
        [
          "select model from headphone where headphone_id not in ( select headphone_id from stock )",
          "select model from headphone where headphone_id not in ( select distinct headphone_id from stock )"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "headphone_store",
      "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select model from headphone where headphone_id in ( select headphone_id from stock group by headphone_id having sum ( quantity ) = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) ) )",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( quantity ) desc limit 1"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "headphone_store",
      "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select model from ( select headphone.model , sum ( stock.quantity ) as total_quantity from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model ) where total_quantity = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) )",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select model from headphone join stock on headphone.headphone_id = stock.headphone_id group by model having sum ( stock.quantity ) = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) )",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model having sum ( stock.quantity ) = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) )",
          "select model from ( select model , sum ( quantity ) as total_quantity from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model ) where total_quantity = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) )",
          "select model from headphone join stock on headphone.headphone_id = stock.headphone_id group by model having sum ( quantity ) = ( select max ( total_quantity ) from ( select sum ( quantity ) as total_quantity from stock group by headphone_id ) )"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "headphone_store",
      "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
      "infer_predictions": [
        [
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from headphone join stock on headphone.headphone_id = stock.headphone_id join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from store join stock on store.store_id = stock.store_id where store.name = 'Woodman'",
          "select count ( stock.headphone_id ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'The Woodman'"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "headphone_store",
      "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
      "infer_predictions": [
        [
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select sum ( stock.quantity ) from store join stock on store.store_id = stock.store_id where store.name = 'Woodman'",
          "select sum ( quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select total ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woolman'"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "headphone_store",
      "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
      "infer_predictions": [
        [
          "select neighborhood from store left join stock on store.store_id = stock.store_id where stock.headphone_id is null",
          "select neighborhood from store where store_id not in ( select distinct store_id from stock where headphone_id = stock.headphone_id )",
          "select neighborhood from store except select store.neighborhood from stock join store on stock.store_id = store.store_id join headphone on headphone.headphone_id = stock.headphone_id"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "headphone_store",
      "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
      "infer_predictions": [
        [
          "select neighborhood from store where store_id not in ( select distinct store_id from stock where headphone_id = stock.headphone_id )",
          "select neighborhood from store where store_id not in ( select store_id from stock where headphone_id = stock.headphone_id )",
          "select store.neighborhood from store left join stock on store.store_id = stock.store_id where stock.headphone_id is null"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper",
      "infer_predictions": [
        [
          "select count ( * ) from paper"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper",
      "infer_predictions": [
        [
          "select count ( * ) from paper"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Affiliation",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Affiliation",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 2000 and year = 'NAACL'",
          "select count ( * ) from paper where year = 2000 and year = 'NAACL 2000'",
          "select count ( * ) from paper where year = 2000 and title = 'NAACL 2000'"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 2000 and year = 'NAACL'",
          "select count ( * ) from paper where year = 2000 and title = 'NAACL 2000'",
          "select count ( * ) from paper where year = 2000 and year = 'NAACL 2000'"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year = 2009",
          "select count ( * ) from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where paper.year = 2009 and affiliation.name = 'Columbia University'",
          "select count ( * ) from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' and paper.year = 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 and affiliation.name = 'Columbia University'",
          "select count ( * ) from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where year = 2009 and affiliation.name = 'Columbia University'",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and year = 2009"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year = 2009",
          "select count ( * ) from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' and paper.year = 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and year = 2009",
          "select count ( * ) from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' and year = 2009"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
      "infer_predictions": [
        [
          "select name , address from affiliation",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null != affiliation.affiliation_id",
          "select name , address from affiliation where affiliation.affiliation_id not null",
          "select name , address from affiliation where affiliation.affiliation_id not null != 'Affiliation'"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
      "infer_predictions": [
        [
          "select name , address from affiliation",
          "select name , address from affiliation",
          "select name , address as name , address from affiliation"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
      "infer_predictions": [
        [
          "select venue , year from paper order by year asc",
          "select distinct venue , year from paper order by year asc",
          "select venue , year from paper order by year asc",
          "select venue , year from paper order by year asc"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
      "infer_predictions": [
        [
          "select distinct venue from paper order by year asc",
          "select distinct venue from ( select venue from paper order by year asc )",
          "select distinct venue from paper order by year asc , venue",
          "select distinct ( venue ) from paper order by year asc",
          "select distinct venue from paper order by year asc",
          "select distinct venue from paper order by year asc"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select paper.title , author_list.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select title , paper_id from paper where exists ( select 1 from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University' and author_list.paper_id = paper.paper_id )",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University' or author_list.affiliation_id = affiliation.affiliation_id"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
      "infer_predictions": [
        [
          "select paper.title , author_list.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where affiliation_id in ( select affiliation_id from affiliation where name = 'Harvard University' ) )",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University' )",
          "select title , paper_id from paper where paper_id in ( select author_list.paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University' )",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select paper.title , author_list.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id = ( select author_id from author where name = 'Mckeown' ) )",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'McKeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author.author_id = author_list.author_id where author.name = 'Mckeown'"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , author_list.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'McKeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author.author_id = author_list.author_id where author.name = 'Mckeown'"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
      "infer_predictions": [
        [
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' )",
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Stanford University' intersect select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Cornell University' intersect select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list intersect select paper_id from affiliation where affiliation_id = 1 and name = 'Stanford University' )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columnia University' )"
        ]
      ]
    },
    {
      "id": 982,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
      "infer_predictions": [
        [
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford' intersect select paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' )",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 984,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Rambow'"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Rambow'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' except select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Rambow'",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id = 'Mckeown' except select paper_id from author_list where author_id = 'Rambow' )"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Rambow'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' except select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Rambow'"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and name = 'Kathleen' ) )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' or name = 'Rambow' ) )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and title = 'Kathleen' ) )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and name = 'Kathleen' ) or author_id in ( select author_id from author where name = 'Rambow' ) )",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name in ( 'Mckeown , Kathleen' , 'Rambow , Owen' )"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and name = 'Kathleen' ) )",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id where author_list.author_id in ( 'Mckeown , Kathleen' , author_list.author_id )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and name = 'Kathleen' ) )",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name in ( 'Mckeown , Kathleen' , 'Rambow , Owen' )",
          "select title , paper_id from paper where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and title = 'Kathleen' ) )"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "aan_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_list join author on author_list.author_id = author.author_id group by author.author_id order by count ( * ) desc",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id group by author.author_id order by count ( * ) desc",
          "select name , ( select count ( paper_id ) from author_list where author_id = author.author_id ) as total_papers from author order by total_papers desc",
          "select name , ( select count ( paper_id ) from author_list where author_id = author.author_id ) as paper_count from author order by paper_count desc",
          "select name , ( select count ( paper_id ) from author_list where author_id = author.author_id ) as papers_count from author order by papers_count desc",
          "select name , ( select count ( * ) from author_list where author_id = author.author_id ) as paper_count from author order by paper_count desc",
          "select name , ( select count ( * ) from author_list where author_id = author.author_id ) as total_papers from author order by total_papers desc",
          "select name , ( select count ( * ) from author_list where author_id = author.author_id ) as papers_count from author order by papers_count desc"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "aan_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id group by author.author_id order by count ( * ) asc",
          "select author.name , count ( author_list.paper_id ) as published_papers from author left join author_list on author.author_id = author_list.author_id group by author.author_id order by published_papers desc",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id group by author.author_id order by count ( * ) desc",
          "select author.name , count ( author_list.paper_id ) as num_papers from author left join author_list on author.author_id = author_list.author_id group by author.author_id order by num_papers desc",
          "select author.name , count ( * ) as published_papers from author join author_list on author.author_id = author_list.author_id group by author.author_id order by published_papers desc",
          "select author.name , count ( author_list.paper_id ) as published_papers from author join author_list on author.author_id = author_list.author_id group by author.author_id order by published_papers desc",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id group by author.name order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join ( select affiliation_id from author_list group by affiliation_id order by count ( * ) asc ) as temp on affiliation.affiliation_id",
          "select affiliation.name from affiliation join ( select affiliation_id from author_list group by affiliation_id order by count ( * ) asc ) as temp on affiliation.affiliation_id = temp.affiliation_id",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.Name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join ( select affiliation_id from author_list group by affiliation_id order by count ( paper_id ) asc ) as temp on affiliation.affiliation_id = temp.affiliation_id"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id order by author_list.paper_id asc",
          "select affiliation.name from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id order by author_list.paper_id asc",
          "select name from affiliation order by ( select count ( * ) from author_list where affiliation_id = affiliation.affiliation_id ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author_list.author_id having count ( * ) > 50",
          "select distinct a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( distinct al.paper_id ) > 50",
          "select distinct a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( al.paper_id ) > 50",
          "select a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( distinct al.paper_id ) > 50",
          "select author.name from author join ( select author_id from author_list group by author_id having count ( paper_id ) > 50 ) as temp on author.author_id = temp.author_id"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author_list.author_id having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) > 50",
          "select a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( al.paper_id ) > 50",
          "select a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( distinct al.paper_id ) > 50",
          "select a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( al.paper_id ) > 50",
          "select a.name from author a join author_list al on a.author_id = al.author_id group by a.author_id having count ( al.paper_id ) > 50",
          "select a.name from author a where ( select count ( * ) from author_list al where al.author_id = a.author_id ) > 50"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author_list.author_id having count ( * ) = 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id group by author_list.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( distinct author_list.paper_id ) = 1",
          "select author.name from author left join author_list on author.author_id = author_list.author_id group by author.author_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author_list.author_id having count ( * ) = 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id group by author_list.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.name having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "aan_1",
      "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by venue ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by year ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from paper group by year ) )",
          "select venue , year from paper group by year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by year ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from paper group by venue ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from paper group by year ) )",
          "select venue , year from paper group by year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from paper group by year ) )"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "aan_1",
      "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select venue , year from paper group by venue , year order by count ( * ) desc limit 1",
          "select venue , year from paper group by year order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by year ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from paper group by year ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by venue ) )",
          "select venue , year from paper group by venue , year having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from paper group by year ) )",
          "select venue , year from paper group by year having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from paper group by year ) )"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "aan_1",
      "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from ( select venue , count ( * ) as cnt from paper group by venue ) where cnt = ( select min ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )",
          "select venue from ( select venue , count ( paper_id ) as num_publications from paper group by venue ) where num_publications = ( select min ( num_publications ) from ( select count ( paper_id ) as num_publications from paper group by venue ) )",
          "select venue from ( select venue , count ( paper_id ) as cnt from paper group by venue ) where cnt = ( select min ( cnt ) from ( select count ( paper_id ) as cnt from paper group by venue ) )",
          "select venue from ( select venue , count ( * ) as num_publications from paper group by venue ) where num_publications = ( select min ( num_publications ) from ( select count ( * ) as num_publications from paper group by venue ) )",
          "select venue from paper group by venue having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "aan_1",
      "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from ( select venue , count ( * ) as num_publications from paper group by venue ) where num_publications = ( select min ( num_publications ) from ( select count ( * ) as num_publications from paper group by venue ) )",
          "select venue from ( select venue , count ( * ) as cnt from paper group by venue ) where cnt = ( select min ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )",
          "with venuecounts as ( select venue , count ( * ) as cnt from paper group by venue ) select venue from venuecounts where cnt = ( select min ( cnt ) from venuecounts )",
          "select venue from paper group by venue having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from paper group by venue ) )",
          "select venue from paper group by venue having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from paper group by venue ) )",
          "with venuecounts as ( select venue , count ( * ) as count from paper group by venue ) select venue from venuecounts where count = ( select min ( count ) from venuecounts )"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'A00-1002'",
          "select count ( distinct paper_id ) from citation where paper_id = 'A00-1002'",
          "select count ( * ) from ( select distinct citation.paper_id from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'A00-1002' )",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = 'A00-1002'",
          "select count ( distinct citation.cited_paper_id ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'A00-1002'",
          "select count ( * ) from ( select citation.paper_id from citation join paper on citation.cited_paper_id = paper.paper_id where paper.paper_id = 'A00-1002' )",
          "select count ( * ) from ( select paper_id from citation where paper_id = 'A00-1002' )"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
      "infer_predictions": [
        [
          "select count ( distinct paper.paper_id ) from citation join paper on citation.cited_paper_id = paper.paper_id where paper.paper_id = 'A00-1002'",
          "select count ( distinct paper.paper_id ) from paper join citation on paper.paper_id = citation.paper_id where citation.cited_paper_id = 'A00-1002'",
          "select count ( distinct paper_id ) from citation where cited_paper_id = 'A00-1002'",
          "select count ( distinct paper.paper_id ) from citation join paper on citation.cited_paper_id = paper.paper_id where citation.cited_paper_id = 'A00-1002'"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'D12-1027'",
          "select count ( * ) from paper join citation on paper.paper_id = citation.paper_id where paper.paper_id = 'D12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where title = 'D12-1027' )",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where paper_id = 'D12-1027' )",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where title = 'D12-1027' )",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where title = 'D12-1027' )"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'D12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where title = 'D12-1027' )",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = ( select paper_id from paper where paper_id = 'D12-1027' )",
          "select count ( * ) from ( select citation.cited_paper_id from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'D12-1027' )"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select p.paper_id , count ( * ) as num_citations from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id having num_citations = ( select max ( num_citations ) from ( select count ( * ) as num_citations from citation group by paper_id ) )",
          "select p.paper_id , count ( c.cited_paper_id ) as num_citations from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id having num_citations = ( select max ( num_citations ) from ( select count ( paper_id ) as num_citations from citation group by paper_id ) )"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select p.paper_id , count ( * ) as num_citations from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id having num_citations = ( select max ( num_citations ) from ( select count ( * ) as num_citations from citation group by paper_id ) )"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) )",
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( cited_paper_id ) as cnt from citation group by paper_id ) ) )",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( cited_paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( cited_paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) )",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( cited_paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) tmp ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) ) as mostcites on paper.paper_id = mostcites.paper_id",
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( cited_paper_id ) as cnt from citation group by paper_id ) ) )",
          "select paper.title from paper inner join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from citation group by paper_id ) ) ) as most_cited on paper.paper_id = most_cited.paper_id"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
      "infer_predictions": [
        [
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( citation.cited_paper_id ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "with citationcounts as ( select paper_id , count ( cited_paper_id ) as num_citations from citation group by paper_id ) select paper.title , num_citations from paper join citationcounts on paper.paper_id = citationcounts.paper_id where num_citations = ( select max ( num_citations ) from citationcounts )",
          "select paper.title , count ( citation.cited_paper_id ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( citation.cited_paper_id ) desc limit 10"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
      "infer_predictions": [
        [
          "select p.title , count ( * ) as num_citations from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id order by num_citations desc limit 10",
          "select p.title , count ( * ) as cite_count from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id order by cite_count desc limit 10",
          "select p.title , count ( * ) as cnt from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id order by cnt desc limit 10",
          "select p.title , count ( * ) as citation_count from paper p join citation c on p.paper_id = c.paper_id group by p.paper_id order by citation_count desc limit 10",
          "select p.title , count ( * ) as num_citations from paper p join citation c on p.paper_id = c.cited_paper_id group by p.paper_id order by num_citations desc limit 10",
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 10"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'McKeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Katherine'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown'and author.name = 'Kathleen'",
          "select count ( * ) from author where name = 'Mckeown , Kathleen'"
        ]
      ]
    },
    {
      "id": 1012,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'McKeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.cited_paper_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id where author.name = 'Mckeown' and author.name = 'Kathleen'"
        ]
      ]
    },
    {
      "id": 1013,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Katherine'"
        ]
      ]
    },
    {
      "id": 1014,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown' and name = 'Kathleen' ) )",
          "select count ( distinct c.paper_id ) from citation c join author_list al on c.cited_paper_id = al.paper_id join author au on al.author_id = au.author_id where au.name = 'Mckeown , Kathleen'",
          "select count ( distinct c.paper_id ) from citation c join author_list al on c.cited_paper_id = al.paper_id join author a on al.author_id = a.author_id where a.name = 'Mckeown , Kathleen'",
          "select count ( * ) from citation where paper_id in ( select paper_id from author_list where author_id in ( select author_id from author where name = 'Mckeown , Kathleen' ) )"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "aan_1",
      "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1016,
      "db_id": "aan_1",
      "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1017,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1018,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1019,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select distinct paper.venue , paper.year from affiliation join paper on affiliation.affiliation_id = paper.paper_id where affiliation.name = 'Columbia University'",
          "select venue , year from affiliation join paper on affiliation.affiliation_id = paper.paper_id where affiliation.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 1020,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select venue , year from affiliation join paper on affiliation.affiliation_id = paper.paper_id where affiliation.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 1021,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.author_id order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1",
          "select author.name from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.author_id order by count ( * ) desc limit 1",
          "select author.name from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by author.author_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from author where author_id in ( select author_id from author_list where paper_id = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from author_list where paper_id = 2009 group by author_id ) ) )"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3",
          "select name from affiliation where affiliation_id in ( select affiliation_id from author_list where paper_id = 2009 group by affiliation_id order by count ( paper_id ) desc limit 3 )",
          "select name from affiliation where affiliation_id in ( select affiliation_id from author_list where paper_id = 2009 group by affiliation_id order by count ( * ) desc limit 3 )"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.Name order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "aan_1",
      "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year <= 2009",
          "select count ( * ) from paper where year <= 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' or paper.year <= 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year < 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' or paper.year < 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' or year <= 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' or year < 2009"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "aan_1",
      "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year <= 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and paper.year < 2009",
          "select count ( * ) from paper where exists ( select 1 from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' and paper.year <= 2009 )",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' or paper.year < 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Columbia University' and year <= 2009",
          "select count ( * ) from paper where exists ( select * from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University' and paper.year <= 2009 )"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Stanford University' and paper.year between 2000 and 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Stanford University' and paper.year >= 2000 and paper.year <= 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Stanford University' and year between 2000 and 2009",
          "select count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Stanford University' and year >= 2000 and year <= 2009",
          "select count ( * ) from paper where year >= 2000 and year <= 2009"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year between 2000 and 2009 and venue = 'Stanford University'",
          "select count ( * ) from paper where year >= 2000 and year <= 2009 and venue = 'Stanford University'",
          "select count ( * ) from paper where year between 2000 and 2009 and venue = 'Carnegie Hall'"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select title from paper where paper_id in ( select paper_id from author_list group by paper_id having count ( author_id ) = ( select max ( cnt ) from ( select count ( author_id ) as cnt from author_list group by paper_id ) ) )",
          "select title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id having num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) ) ) as temp on paper.paper_id = temp.paper_id",
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id order by num_authors desc limit 1 ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select paper.title from paper join ( select paper_id from author_list group by paper_id having count ( author_id ) = ( select max ( cnt ) from ( select count ( author_id ) as cnt from author_list group by paper_id ) ) ) as maxauthors on paper.paper_id = maxauthors.paper_id",
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id ) as temp on paper.paper_id = temp.paper_id where num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) )",
          "select paper.title from paper inner join ( select paper_id , count ( author_id ) as num_authors from author_list group by paper_id having num_authors = ( select max ( num_authors ) from ( select count ( author_id ) as num_authors from author_list group by paper_id ) ) ) as temp on paper.paper_id = temp.paper_id",
          "select paper.title from paper join ( select paper_id from author_list group by paper_id having count ( author_id ) = ( select max ( cnt ) from ( select count ( author_id ) as cnt from author_list group by paper_id ) ) ) as temp on paper.paper_id = temp.paper_id"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "aan_1",
      "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author where name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( distinct author_id ) from author where name = 'Mckeown , Kathleen'"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "aan_1",
      "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen'",
          "select count ( * ) from author where author.name = 'Mckeown , Kathleen'"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "aan_1",
      "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select author.name from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select name from ( select author.name , count ( author_list.paper_id ) as num_papers from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) where num_papers = ( select max ( num_papers ) from ( select count ( paper_id ) as num_papers from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) )",
          "select name from ( select author.name , count ( paper_id ) as num_papers from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) where num_papers = ( select max ( num_papers ) from ( select count ( paper_id ) as num_papers from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) )",
          "select name from ( select author.name , count ( distinct paper_id ) as num_papers from author join author_list on author.author_id = author_list.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) where num_papers = ( select max ( num_papers ) from ( select count ( distinct paper_id ) as num_papers from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown , Kathleen' group by author.author_id ) )"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "aan_1",
      "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id where author.name = 'Mckeown , Kathleen' group by author.author_id order by count ( * ) desc limit 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id where author.name = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id where author.name = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "aan_1",
      "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
      "infer_predictions": [
        [
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where instr ( title , 'translation' ) > 0",
          "select p.paper_id from paper as p where p.title like '%translation%'",
          "select paper_id from paper where exists ( select 1 from citation where citation.paper_id = paper.paper_id and paper.title like '%translation%' )",
          "select p.paper_id from paper as p where p.title glob '*translation*'"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "aan_1",
      "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
      "infer_predictions": [
        [
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where instr ( title , 'translation' ) > 0",
          "select paper_id from paper where title like '%translation%' and title is not null",
          "select paper_id from paper where title like '%translation%' and title is not null",
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where title like '%translation%' - not null",
          "select paper_id from paper where title like '%translation%' - not null",
          "select paper_id from paper where title like '%translation%' - not null",
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where title like '%translation%'"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
      "infer_predictions": [
        [
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper where paper.paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper left join citation on paper.paper_id = citation.paper_id except select paper.paper_id , paper.title from paper left join citation on paper.paper_id = citation.paper_id",
          "select paper.paper_id , paper.title from paper left join citation on paper.paper_id = citation.paper_id except select paper.paper_id , paper.title from paper left join citation on paper.paper_id = citation.cited_paper_id"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
      "infer_predictions": [
        [
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper where paper.paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper where paper_id not in ( select paper_id from citation )",
          "select title , paper_id from paper where paper_id not in ( select paper_id from citation )",
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation)",
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation )",
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation )"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where affiliation.address like '%China%' group by affiliation.affiliation_id order by count ( * ) desc limit 1",
          "select name from affiliation where address like '%China%' in ( select affiliation_id from author_list group by affiliation_id having count ( paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from author_list group by affiliation_id ) ) )",
          "select name from affiliation where address like '%China%' in ( select affiliation_id from author_list group by affiliation_id having count ( paper_id ) = ( select max ( publication_counts.pc ) from ( select count ( paper_id ) as pc from author_list group by affiliation_id ) publication_counts ) )",
          "select name from affiliation where address like '%China%' and affiliation_id in ( select affiliation_id from author_list group by affiliation_id having count ( paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from author_list group by affiliation_id ) ) )",
          "select name from affiliation where address in ( select affiliation_id from author_list where address like '%China%' group by affiliation_id having count ( paper_id ) = ( select max ( cnt ) from ( select count ( paper_id ) as cnt from author_list group by affiliation_id ) ) )",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where affiliation.address like '%China%' group by affiliation.address order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where affiliation.address like '%China%' group by affiliation.name order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where affiliation.address like '%China%' group by affiliation.address order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where author_list.paper_id like '%China%' group by affiliation.name order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id where affiliation.address like '%China%' group by affiliation.affiliation_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "aan_1",
      "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
      "infer_predictions": [
        [
          "select count ( * ) , venue from paper group by year",
          "select count ( * ) , venue from paper group by venue",
          "select count ( * ) , year from paper group by year",
          "select count ( distinct venue ) , year from paper group by year",
          "select count ( distinct year ) , venue from paper group by year"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "aan_1",
      "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
      "infer_predictions": [
        [
          "select venue , count ( * ) from paper group by venue , year",
          "select venue , count ( * ) from paper group by venue",
          "select venue , count ( * ) from paper group by year",
          "select count ( * ) , venue , year from paper group by venue , year",
          "select venue , count ( * ) , year from paper group by venue , year",
          "select venue , year , count ( * ) from paper group by venue , year",
          "select venue , count ( * ) from paper group by year , venue",
          "select venue , count ( * ) , year from paper group by venue , year"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
      "infer_predictions": [
        [
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select count ( * ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select ( select count ( * ) from author_list where affiliation_id = affiliation.affiliation_id ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select ( select count ( * ) from author_list where affiliation_id = a.affiliation_id ) , count ( * ) from affiliation a group by a.affiliation_id",
          "select ( select count ( * ) from author_list where affiliation_id = affiliation.affiliation_id ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select ( select count ( * ) from author_list where affiliation_id = affiliation.affiliation_id ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select sum ( author_list.paper_id ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
      "infer_predictions": [
        [
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select count ( * ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select ( select count ( * ) from author_list where affiliation_id = affiliation.affiliation_id ) as published_papers from affiliation"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 )",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cite_count on paper.paper_id = cite_count.paper_id",
          "select title from paper inner join citation on paper.paper_id = citation.paper_id where citation.cited_paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 )",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cnt on paper.paper_id = cnt.paper_id",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cited on paper.paper_id = cited.paper_id",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as temp on paper.paper_id = temp.paper_id",
          "select title from paper inner join citation on paper.paper_id = citation.paper_id where citation.cited_paper_id in ( select cited_paper_id from citation group by cited_paper_id having count ( cited_paper_id ) > 50 )"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select title from paper where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 )",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( * ) > 50",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cite_count on paper.paper_id = cite_count.paper_id",
          "select paper.title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cite_count on paper.paper_id = cite_count.paper_id",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cnt on paper.paper_id = cnt.paper_id",
          "select title from paper join ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) as cp on paper.paper_id = cp.paper_id"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
      "infer_predictions": [
        [
          "select count ( * ) from author where author_id not in ( select author_id from author_list group by author_id having count ( paper_id ) > 50 )",
          "select count ( * ) from author where author_id not in ( select author_id from author_list group by author_id having count ( * ) > 50 )",
          "select count ( * ) from author where author_id not in ( select author_id from author_list join citation on author_list.paper_id = citation.paper_id group by author_id having count ( cited_paper_id ) > 50 )",
          "select count ( * ) from author where author_id not in ( select author_id from author_list where paper_id in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 ) )",
          "select count ( * ) from author where author_id not in ( select author_id from author_list join citation on author_list.paper_id = citation.paper_id group by author_id having count ( * ) > 50 )"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
      "infer_predictions": [
        [
          "select count ( distinct author_id ) from author_list where paper_id not in ( select paper_id from citation group by paper_id having count ( cited_paper_id ) > 50 )",
          "select count ( * ) from author where author_id not in ( select author_id from author_list group by author_id having count ( paper_id ) > 50 )"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
      "infer_predictions": [
        [
          "select name from author where author_id in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 intersect select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 and paper.title = 'NAACL' )",
          "select distinct author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL and ACL'",
          "select name from author where author_id in ( select author_list.author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 intersect select author_list.author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 and paper.title = 'NAACL' )",
          "select distinct author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL' or paper.title = 'ACL'",
          "select name from author where author_id in ( select author_list.author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 intersect select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 and paper.title = 'NAACL' )",
          "select distinct author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL , ACL'",
          "select name from author where author_id in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 intersect select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 and paper.title = 'NAACL' or paper.title = 'ACL' )",
          "select distinct author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL & ACL'"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
      "infer_predictions": [
        [
          "select distinct a.name from author a join author_list al on a.author_id = al.author_id join paper p on al.paper_id = p.paper_id where p.year = 2009 and al.author_id in ( select author_id from author_list where paper_id = p.paper_id )",
          "select distinct a.name from author a join author_list al on a.author_id = al.author_id join paper p on al.paper_id = p.paper_id where p.year = 2009 and al.author_id in ( select author_id from author_list where year = 2009 )"
        ]
      ]
    },
    {
      "id": 1051,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name from author where author_id not in ( select author_id from author_list where paper_id = 'ACL' )",
          "select name from author where author_id not in ( select author_id from author_list where paper_id in ( select paper_id from paper where title = 'ACL' ) )",
          "select name from author where author_id not in ( select author_id from author_list where paper_id in ( select paper_id from author_list where author_id = author.author_id ) )"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name from author where author_id not in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where title = 'ACL' )",
          "select name from author where author_id not in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.title = 'ACL' )",
          "select name from author where author_id not in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where title = 'ACCL' )",
          "select name from author where author_id not in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where paper.title = 'ACCL' )",
          "select name from author where author_id not in ( select author_id from author_list join paper on author_list.paper_id = paper.paper_id where name = 'ACL' )"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM conference",
      "infer_predictions": [
        [
          "select count ( * ) from conference"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM conference",
      "infer_predictions": [
        [
          "select count ( * ) from conference"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "conference",
      "gold": "SELECT DISTINCT conference_name FROM conference",
      "infer_predictions": [
        [
          "select distinct conference_name from conference"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "conference",
      "gold": "SELECT DISTINCT conference_name FROM conference",
      "infer_predictions": [
        [
          "select distinct conference_name from conference"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
      "infer_predictions": [
        [
          "select conference_name , year , location from conference"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
      "infer_predictions": [
        [
          "select conference_name , year , location from conference",
          "Select conference_name , year , location from conference",
          "select conference_name  , year , location from conference",
          "select conference_name , year , location from conference",
          "select conference_name , year ,location from conference"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
      "infer_predictions": [
        [
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference.conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name",
          "select conference_name , ( select count ( * ) from conference where conference_name = conference.conference_name ) as conference_count from conference",
          "select conference_name as conference_name , count ( * ) as num_conferences from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
      "infer_predictions": [
        [
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference group by conference_name"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "conference",
      "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
      "infer_predictions": [
        [
          "select year , count ( * ) from conference group by year",
          "select tblp.year , count ( * ) from conference tblp left join conference c on tblp.conference_id = c.conference_id group by tblp.year",
          "select tblp.year , count ( * ) from conference tblp left join conference c on tblp.conference_id = c.conference_id group by tblp.year",
          "select tblp.year , count ( * ) from conference tblp left join conference c on tblp.conference_id = c.conference_id group by tblp.year",
          "select a.year , count ( b.conference_id ) as num_conferences from conference a left join conference_participation b on a.conference_id = b.conference_id group by a.year",
          "select a.year , count ( b.conference_id ) as num_conferences from conference a left join conference_participation b on a.conference_id = b.conference_id group by a.year",
          "select a.year , count ( b.conference_id ) as num_conferences from conference a left join conference_participation b on a.conference_id = b.conference_id group by a.year"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "conference",
      "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
      "infer_predictions": [
        [
          "select count ( * ) , year from conference group by year",
          "select count ( * ) , year from conference group by year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )",
          "select count ( * ) , year from conference group by year having count ( year ) = ( select max ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )",
          "select count ( * ) , year from conference group by year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) cnt from conference group by year ) )",
          "select count ( * ) , year from conference group by year having count ( year ) = ( select max ( cnt ) from ( select count ( year ) as cnt from conference group by year ) )",
          "select count ( * ) , year from conference group by year having count (* ) = ( select max ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )",
          "select count ( * ) , year from conference group by year having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from conference group by year ) t )"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "conference",
      "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )",
          "select year from conference group by year having count ( conference_id ) = ( select min ( cnt ) from ( select count ( conference_id ) as cnt from conference group by year ) )",
          "select year from ( select year , count ( conference_id ) as num_conferences from conference group by year ) where num_conferences = ( select min ( num_conferences ) from ( select count ( conference_id ) as num_conferences from conference group by year ) )",
          "with countedyears as ( select year , count ( conference_id ) as num_conferences from conference group by year ) select year from countedyears where num_conferences = ( select min ( num_conferences ) from countedyears )",
          "with conferencecounts as ( select year , count ( conference_id ) as num_conferences from conference group by year ) select year from conferencecounts where num_conferences = ( select min ( num_conferences ) from conferencecounts )",
          "with countedyears as ( select year , count ( * ) as total from conference group by year ) select year from countedyears where total = ( select min ( total ) from countedyears )",
          "select year from conference group by year having count ( conference_id ) = ( select min ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "conference",
      "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select year from conference group by year having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from conference group by year ) )",
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from conference group by year ) )",
          "select year from conference group by year having count ( * ) = ( select min ( total ) from ( select count ( * ) as total from conference group by year ) )",
          "select year from ( select year , count ( * ) as num_conferences from conference group by year ) where num_conferences = ( select min ( num_conferences ) from ( select count ( * ) as num_conferences from conference group by year ) )",
          "select year from conference group by year having count ( conference_id ) = ( select min ( cnt ) from ( select count ( conference_id ) as cnt from conference group by year ) )",
          "select year from conference group by year having count ( conference_id ) = ( select min ( count ) from ( select count ( conference_id ) as count from conference group by year ) )",
          "select year from conference group by year having count ( * ) = ( select min ( counts ) from ( select count ( * ) as counts from conference group by year ) )"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "conference",
      "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >=2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "conference",
      "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
      "infer_predictions": [
        [
          "select institution_name , location , founded from institution",
          "select institution_name , location ,founded from institution",
          "Select institution_name , location , founded from institution"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
      "infer_predictions": [
        [
          "select institution_name , location , founded from institution",
          "select institution_name , location ,founded from institution",
          "Select institution_name , location , founded from institution"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
      "infer_predictions": [
        [
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and founded <= 1900",
          "select count ( * ) from institution where founded between 1800 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
      "infer_predictions": [
        [
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and founded <= 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1800 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
      "infer_predictions": [
        [
          "select institution_name , location from institution where founded = ( select max ( founded ) from institution )",
          "select institution_name , location from institution order by founded desc limit 1",
          "select institution_name , location from institution where founded = ( select min ( founded ) from institution )",
          "select institution_name , location from institution where founded = ( select max (founded ) from institution )"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
      "infer_predictions": [
        [
          "select institution_name , location from institution where founded = ( select max ( founded ) from institution )",
          "select institution_name , location from institution order by founded desc limit 1",
          "select institution_name , location from institution where founded = ( select min ( founded ) from institution )",
          "select institution_name , location from institution where founded = ( select max (founded ) from institution )"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "conference",
      "gold": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
      "infer_predictions": [
        [
          "select institution_name , ( select count ( * ) from staff where institution_id = institution.institution_id and founded > 1800 ) as staff_count from institution where founded > 1800",
          "select institution.institution_name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution_name , ( select count ( * ) from staff where institution_id = institution.institution_id ) as staff_count from institution where founded > 1800",
          "select institution.institution_name , count ( staff.staff_id ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution.institution_name , count ( staff.staff_id ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution_name , ( select count ( staff_id ) from staff where institution_id = institution.institution_id and founded > 1800 ) as staff_count from institution where founded > 1800",
          "select institution_name , ( select count ( * ) from staff where staff.institution_id = institution.institution_id and institution.founded > 1800 ) as staff_count from institution where founded > 1800",
          "select institution_name , ( select count ( * ) from staff where staff.institution_id = institution.institution_id ) as staff_count from institution where founded > 1800"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "conference",
      "gold": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id",
      "infer_predictions": [
        [
          "select institution.institution_id , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution.institution_id , count ( staff.staff_id ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution.institution_id , count ( staff.name ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution.institution_id , count ( staff.staff_id ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select institution.institution_id , count ( staff.name ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_id"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "conference",
      "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
      "infer_predictions": [
        [
          "select institution_name from institution where institution_id not in ( select institution_id from staff )",
          "select institution_name from institution where institution_id not in ( select distinct institution_id from staff )"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "conference",
      "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
      "infer_predictions": [
        [
          "select institution_name from institution where institution_id not in ( select institution_id from staff )"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "conference",
      "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
      "infer_predictions": [
        [
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "Select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "conference",
      "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
      "infer_predictions": [
        [
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "Select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "conference",
      "gold": "SELECT max(age) ,  min(age) FROM staff",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from staff where nationality = 'United States'",
          "select max ( age ) as maxage , min ( age ) as minage from staff where nationality = 'United States'",
          "select max ( age ) as max_age , min ( age ) as min_age from staff where nationality = 'United States'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United State'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United Stated'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United States'"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "conference",
      "gold": "SELECT max(age) ,  min(age) FROM staff",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from staff",
          "select max ( age ) as maxage , min ( age ) as minage from staff",
          "select max ( age ) as max_age , min ( age ) as min_age from staff",
          "select max ( age ) as maxage , min ( age ) as minage from staff",
          "select max ( age ) as maxag , min ( age ) as minag from staff",
          "select max ( age ) as maximumage , min ( age ) as minage from staff",
          "select max ( age ) , min ( age ) from staff",
          "select max ( age ) as maxaage , min ( age ) as minage from staff"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
      "infer_predictions": [
        [
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on staff.staff_id = conference_participation.staff_id where staff.nationality = 'Canada'",
          "select conference_name from conference where conference_id in ( select conference_id from conference_participation join staff on conference_participation.staff_id = staff.staff_id where staff.nationality = 'Canada' )",
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where staff.nationality = 'Canada'",
          "select conference_name from conference where conference_id in ( select conference_id from conference_participation where staff_id in ( select staff_id from staff where nationality = 'Canada' ) )"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
      "infer_predictions": [
        [
          "select distinct conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where staff.nationality = 'Canada'",
          "select distinct c.conference_name from conference c join conference_participation cp on c.conference_id = cp.conference_id join staff s on cp.staff_id = s.staff_id where s.nationality = 'Canada'",
          "select distinct conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference_name from conference where conference_id in ( select CP.conference_id from conference_participation CP join staff s on CP.staff_id = s.staff_id where s.nationality = 'Canada' )"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
      "infer_predictions": [
        [
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select name from staff where staff_id in ( select staff_id from conference_participation where role = 'speaker' intersect select staff_id from conference_participation where role = 'sponsor' )",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
      "infer_predictions": [
        [
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'sponsor'",
          "select name from staff where staff_id in ( select staff_id from conference_participation where role = 'speaker' intersect select staff_id from conference_participation where role = 'sponsor' )",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'",
          "select distinct name from staff where staff_id in ( select staff_id from conference_participation where role = 'speaker' intersect select staff_id from conference_participation where role = 'sponsor' )",
          "select name from staff where staff_id in ( select staff_id from conference_participation where role = 'Speaker' intersect select staff_id from conference_participation where role = 'Sponsor' )",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'sponsor'"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1086,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
      "infer_predictions": [
        [
          "select name from staff where staff_id in ( select conference_participation.staff_id from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL' )",
          "select name from staff where staff_id in ( select CP.staff_id from conference_participation CP join conference c on CP.conference_id = c.conference_id where c.conference_name = 'ACL' union select cp.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'NACCL' )",
          "select name from staff where staff_id in ( select staff_id from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff_id from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL' )",
          "select name from staff where staff_id in ( select conference_participation.staff_id from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff_id from conference_participation join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL' )",
          "select staff.name from staff where staff.staff_id in ( select CP.staff_id from conference_participation CP join conference c on CP.conference_id = c.conference_id where c.conference_name = 'ACL' union select cp.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'NACCL' )",
          "select staff.name from staff where staff.staff_id in ( select CP.staff_id from conference_participation CP join conference c on CP.conference_id = c.conference_id where c.conference_name = 'ACL' union select CP.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'NACCL' )",
          "select name from staff where staff_id in ( select CP.staff_id from conference_participation cp join conference c on CP.conference_id = c.conference_id where c.conference_name = 'ACL' union select cp.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'NACCL' )",
          "select name from staff where staff_id in ( select cp.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'ACL' union select cp.staff_id from conference_participation cp join conference c on cp.conference_id = c.conference_id where c.conference_name = 'NACCL' )"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "conference",
      "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
      "infer_predictions": [
        [
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( conference_id ) )",
          "select distinct staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004",
          "select distinct staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 union select distinct staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2004",
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( 2003 , 2004 ) )",
          "select distinct name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( conference_id ) )",
          "select distinct staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 union select distinct staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2004",
          "select distinct staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "conference",
      "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
      "infer_predictions": [
        [
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( conference_id ) )",
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( conference_id ) between 2003 and 2004 )",
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( 2003 , 2004 ) )",
          "select name from staff where staff_id in ( select staff_id from conference_participation where conference_id in ( conference_id ) ) between 2003 and 2004"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
      "infer_predictions": [
        [
          "select conference_name , year , ( select count ( * ) from conference_participation where conference_id = conference.conference_id ) as participant_count from conference",
          "select conference.conference_name , conference.year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as participant_count from conference",
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id",
          "select conference_name , year , ( select count ( * ) from conference_participation where conference_id = conference.conference_id ) as participants_count from conference",
          "select conference_name , year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as participant_count from conference",
          "select conference.conference_name , conference.year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as number_of_participants from conference",
          "select conference.conference_name , conference.year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as participants_count from conference",
          "select conference_name , year , ( select count ( * ) from conference_participation where conference_id = conference.conference_id ) as number_of_participants from conference"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
      "infer_predictions": [
        [
          "select conference.conference_name , conference.year , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_id",
          "select conference.conference_name , conference.year , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference_participation.conference_id",
          "select conference.conference_name , conference.year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as participant_count from conference",
          "select conference.conference_name , conference.year , sum ( conference_participation.staff_id ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id",
          "select conference.conference_name , conference.year , ( select count ( * ) from conference_participation where conference_participation.conference_id = conference.conference_id ) as participants_count from conference"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select conference_name from conference where conference_id in ( select conference_id from conference_participation group by conference_id order by count ( * ) desc limit 2 )",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2",
          "select conference.conference_name from conference left join conference_participation on conference.conference_id = conference_participation.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "conference",
      "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation where conference_id = 'ACL' )"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "conference",
      "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation where conference_id = 'ACL' )"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "conference",
      "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
      "infer_predictions": [
        [
          "select institution_name , location from institution where institution_id not in ( select staff.institution_id from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2004 )"
        ]
      ]
    },
    {
      "id": 1096,
      "db_id": "conference",
      "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
      "infer_predictions": [
        [
          "select institution.institution_name , institution.location from institution where institution_id not in ( select staff.institution_id from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2004 )"
        ]
      ]
    },
    {
      "id": 1097,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills )",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills b where pilotskills.pilot_name = pilot_name )",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills b where pilotskills.pilot_name = b.pilot_name )",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills b where b.age = pilotskills.age )",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills b where b.age = 1 )",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills )"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills )",
          "select p.pilot_name from pilotskills p where p.age = ( select max ( age ) from pilotskills )",
          "select pilot_name from pilotskills order by age desc limit 1",
          "select p.pilot_name from pilotskills as p where p.age = ( select max ( age ) from pilotskills )",
          "select a.pilot_name from pilotskills a where a.age = ( select max ( age ) from pilotskills )",
          "select v.pilot_name from pilotskills v where v.age = ( select max ( age ) from pilotskills )"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age <= ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select Avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age <= ( select avg ( age ) from pilotskills ) order by age asc"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "pilot_1",
      "gold": "SELECT * FROM PilotSkills WHERE age  <  30",
      "infer_predictions": [
        [
          "select * from pilotskills where age < 30"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "pilot_1",
      "gold": "select * from pilotskills where age  <  30",
      "infer_predictions": [
        [
          "select * from pilotskills where age < 30"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age < 35",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.age < 35 and pilotskills.plane_name = 'Piper Cub'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' and pilotskills.age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age < 35"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < 35 and plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 and plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills ps where ps.age < 35 and ps.plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills ps where ps.age < 35 and ps.plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age <= 35 and plane_name = 'Piper Cub'"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F14 Fighter'",
          "select location from hangar where plane_name = 'F-14 fighter'",
          "select location from hangar where plane_name = 'F-14 Fighting'",
          "select location from hangar where plane_name = 'F-14 Fighter'"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select hangar.location from hangar where hangar.plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F14 Fighter'",
          "select location from hangar where plane_name = 'F-14 fighter'",
          "select location from hangar where plane_name = 'F-14 Fighting'"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
      "infer_predictions": [
        [
          "select count ( distinct location ) from hangar"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
      "infer_predictions": [
        [
          "select count ( distinct location ) from hangar"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Jones' and pilotskills.age = 32",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Johnson' and pilotskills.age = 32",
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Jones' and pilotskills.age = 32",
          "select plane_name from pilotskills where pilot_name = 'Johnson' and age = 32",
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where pilot_name = 'Jonas' and age = 32"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select age from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from ( select * from pilotskills where age > 40 )"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select age from pilotskills where age > 40 )",
          "select count ( * ) from ( select * from pilotskills where age > 40 )",
          "select count ( * ) from ( select count ( * ) from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from pilotskills where age > 40."
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where plane_name = 'B-52 Bomber' and age < 35",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.pilot_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where pilotskills.plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.age < 35 and pilotskills.plane_name = 'B-52 Bomber'",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.pilot_name = 'Boeing 202' and pilotskills.age < 35"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where plane_name = 'B-52 Bomber' and age < 35",
          "select count ( distinct plane_name ) from pilotskills where plane_name = 'B-52 Bomber' and age < 35",
          "select count ( distinct plane_name ) from pilotskills where pilotskills.age < 35 and plane_name = 'B-52 Bomber'",
          "select count ( distinct plane_name ) from pilotskills where age < 35 and plane_name = 'B-52 Bomber'",
          "select count ( * ) from pilotskills where pilotskills.plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( distinct plane_name ) from pilotskills where plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where plane_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where plane_name = 'B-52' and age < 35"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p1.pilot_name from pilotskills p1 where p1.age = ( select min ( p2.age ) from pilotskills p2 where p2.plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
      "infer_predictions": [
        [
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and p.age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( cnt ) from ( select count ( * ) as cnt from pilotskills group by plane_name ) )",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( count ) from ( select count ( * ) as count from pilotskills group by plane_name ) )",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( c ) from ( select count ( * ) as c from pilotskills group by plane_name ) )",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( cnt ) from ( select count ( * ) as cnt from pilotskills group by plane_name ) tmp )",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( count ) from ( select count ( plane_name ) as count from pilotskills group by plane_name ) )",
          "select plane_name from pilotskills group by plane_name having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from pilotskills group by plane_name ) )",
          "select p.plane_name from pilotskills p group by p.plane_name having count ( p.plane_name ) = ( select max ( cnt ) from ( select count ( plane_name ) as cnt from pilotskills group by plane_name ) )"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select max ( countflights ) from ( select count ( plane_name ) as countflights from pilotskills group by plane_name ) )",
          "select plane_name from ( select plane_name , count ( * ) as num_flights from pilotskills group by plane_name ) where num_flights = ( select max ( num_flights ) from ( select count ( * ) as num_flights from pilotskills group by plane_name ) )",
          "select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select max ( count ) from ( select count ( plane_name ) as count from pilotskills group by plane_name ) )",
          "select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select max ( cnt ) from ( select count ( * ) as cnt from pilotskills group by plane_name ) )",
          "select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select max ( countflights ) from ( select count ( * ) as countflights from pilotskills group by plane_name ) )",
          "select plane_name from ( select plane_name , count ( * ) as num_flights from pilotskills group by plane_name ) where num_flights = ( select max ( num_flights ) from ( select count ( * ) as num_flights from pilotskills group by plane_name ) )"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select p.plane_name from pilotskills p where p.plane_name in ( select plane_name from pilotskills group by plane_name having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from pilotskills group by plane_name ) ) )",
          "select p.plane_name from pilotskills p where p.plane_name in ( select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select min ( count ) from ( select count ( plane_name ) as count from pilotskills group by plane_name ) ) )",
          "select p.plane_name from pilotskills p where p.plane_name = ( select min ( p2.plane_name ) from pilotskills p2 group by p2.plane_name )",
          "select p.plane_name from pilotskills p where p.plane_name = ( select min ( p2.plane_name ) from pilotskills p2 group by p2.plane_name order by count ( p2.plane_name ) asc limit 1 )"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select p.plane_name from pilotskills p where p.plane_name in ( select plane_name from pilotskills group by plane_name having count ( plane_name ) = ( select min ( count ) from ( select count ( plane_name ) as count from pilotskills group by plane_name ) ) )",
          "with airplanecounts as ( select plane_name , count ( * ) as cnt from pilotskills group by plane_name ) select plane_name from airplanecounts where cnt = ( select min ( cnt ) from airplanecounts )",
          "with planecounts as ( select plane_name , count ( * ) as cnt from pilotskills group by plane_name ) select plane_name from planecounts where cnt = ( select min ( cnt ) from planecounts )",
          "select p.plane_name from pilotskills p where p.plane_name in ( select plane_name from pilotskills group by plane_name having count ( * ) = ( select min ( count ) from ( select count ( * ) as count from pilotskills group by plane_name ) ) )",
          "select p.plane_name from pilotskills p where p.plane_name in ( select plane_name from pilotskills group by plane_name having count ( * ) = ( select min ( count ) from ( select count ( plane_name ) as count from pilotskills group by plane_name ) ) )",
          "with airplanecounts as ( select plane_name , count ( * ) as cnt from pilotskills group by plane_name ) select plane_name from airplanecounts where cnt = ( select min ( cnt ) from airplanecounts )"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "pilot_1",
      "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select count ( distinct p.pilot_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location = 'Chicago'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from ( select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago' )",
          "select count ( distinct ps.pilot_name ) from pilotskills ps join hangar h on ps.plane_name = h.plane_name where h.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from ( select pilot_name from pilotskills where plane_name in ( select plane_name from hangar where location = 'Chicago' ) )"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "pilot_1",
      "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select count ( distinct p.pilot_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location = 'Chicago'",
          "select count ( distinct ps.pilot_name ) from pilotskills ps join hangar h on ps.plane_name = h.plane_name where h.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct ps.pilot_name ) from pilotskills ps join hangar hb on ps.plane_name = hb.plane_name where hb.location = 'Chicago'",
          "select count ( distinct ps.pilot_name ) from pilotskills ps join hangar hl on ps.plane_name = hl.plane_name where hl.location = 'Chicago'",
          "select count ( distinct ps.pilot_name ) from pilotskills ps join hangar hh on ps.plane_name = hh.plane_name where hh.location = 'Chicago'",
          "select count ( distinct p.pilot_name ) from pilotskills p join hangar ha on p.plane_name = ha.plane_name where ha.location = 'Chicago'",
          "select count ( distinct p.pilot_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location = 'CHICAGO'"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where age = 41 and pilot_name = 'Smith'",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Smith' and pilotskills.age = 41",
          "select distinct plane_name from pilotskills where pilotskills.pilot_name = 'Smith' and pilotskills.age = 41",
          "select distinct plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where age = 41 and pilot_name = 'Smith'"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Smith' and pilotskills.age = 41",
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select distinct plane_name from pilotskills where pilot_name = 'Smith' and age = 41"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from ( select plane_name from pilotskills group by plane_name )",
          "select count ( distinct plane_name ) from ( select plane_name from pilotskills group by pilot_name )"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills where pilot_name = 'Smith'",
          "select count ( distinct p.plane_name ) from pilotskills p where p.pilot_name = 'Smith'"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills where pilotskills.pilot_name = 'Smith'",
          "select count ( distinct p.plane_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where p.pilot_name = 'Smith'",
          "select count ( * ) from pilotskills where pilotskills.pilot_name = 'Smith'"
        ]
      ]
    },
    {
      "id": 1129,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( distinct plane_name ) from pilotskills where age > 40",
          "select count ( distinct p.plane_name ) from pilotskills p where p.age > 40",
          "select count ( distinct p.plane_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where p.age > 40",
          "select count ( distinct p.plane_name ) from pilotskills p where exists ( select 1 from pilotskills ps where ps.age > 40 and ps.plane_name = p.plane_name )",
          "select count ( distinct p.plane_name ) from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = p.plane_name and ps.age > 40 )",
          "select count ( distinct p.plane_name ) from pilotskills p where exists ( select * from pilotskills ps where ps.age > 40 and ps.plane_name = p.plane_name )"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( distinct plane_name ) from pilotskills where age > 40",
          "select count ( distinct p.plane_name ) from pilotskills p join hangar h on p.plane_name = h.plane_name where p.age > 40",
          "select count ( * ) from ( select plane_name from pilotskills where age > 40 )",
          "select count ( distinct p.plane_name ) from pilotskills p where p.age > 40"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_Name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age Asc"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_Name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age Asc"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc",
          "select pilot_name from pilotskills order by age desc",
          "select pilot_name from pilotskills order by age desc"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc",
          "select pilot_Name from pilotskills order by age desc",
          "Select pilot_name from pilotskills order by age desc"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
      "infer_predictions": [
        [
          "select location from hangar order by plane_name asc",
          "select location from ( select location from hangar order by plane_name asc ) as sorted",
          "select location from hangar order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
      "infer_predictions": [
        [
          "select distinct location from hangar order by plane_name asc",
          "select distinct location from hangar order by plane_name asc",
          "select distinct location from ( select location from hangar order by plane_name asc )",
          "select location from hangar order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by pilot_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
      "infer_predictions": [
        [
          "select distinct plane_name from hangar order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from hangar order by plane_name asc",
          "select distinct plane_name from hangar order by plane_name asc",
          "select distinct plane_name from hangar order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40 or age < 30",
          "select count ( * ) from ( select age from pilotskills where age > 40 union select age from pilotskills where age < 30 )",
          "select count ( * ) from pilotskills where age > 40 union select count ( * ) from pilotskills where age < 30",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 )",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 )",
          "select count ( * ) from ( select * from pilotskills where age > 40 union select * from pilotskills where age < 30 )"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40 or age < 30",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 )",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 )",
          "select count ( * ) from ( select age from pilotskills where age > 40 union select age from pilotskills where age < 30 )",
          "select count ( * ) from ( select * from pilotskills where age > 40 or age < 30 )",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 ) where age > 40",
          "select count ( * ) from ( select age from pilotskills where age > 40 or age < 30 ) where age > 40 or age < 30",
          "select count ( * ) from ( select * from pilotskills where age > 40 or age < 30 )"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
      "infer_predictions": [
        [
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name in ( 'Piper Cub' ) and age > 35 or plane_name in ( 'F-14 Fighter' ) and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name in ( select plane_name from pilotskills where age > 35 ) or plane_name in ( select plane_name from pilotskills where age < 30 )",
          "select pilot_name , age from pilotskills where plane_name in ( 'Piper Cub' , age > 35 ) or plane_name in ( 'F-14 Fighter' , age < 30 )",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 or ( plane_name = 'F-14 Fighter' and age < 30 )"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
      "infer_predictions": [
        [
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name in ( 'Piper Cub' , age > 35 ) or plane_name in ( 'F-14 Fighter' , age < 30 )"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select distinct p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and not exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and ps.pilot_name = p.pilot_name )",
          "select p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and not exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and ps.pilot_name = p.pilot_name )",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select distinct p1.pilot_name from pilotskills p1 where p1.plane_name = 'Piper Cub' and not exists ( select 1 from pilotskills p2 where p2.plane_name = 'B-52 Bomber' and p2.pilot_name = p1.pilot_name )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select distinct p.pilot_name from pilotskills p where p.plane_name = 'Piper Cub' and not exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and p.pilot_name = p.pilot_name )"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select distinct pilot_name from pilotskills where plane_name = 'Piper Cub' except select distinct pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select distinct pilot_name from pilotskills where plane_name = 'Piper Cub' except select distinct pilot_name from pilotskills where plane_name = 'B-52 Bomber'"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = p.pilot_name ) and exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and ps.pilot_name = p.pilot_name )",
          "select p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = p.plane_name and ps.pilot_name = p.pilot_name ) and exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = p.pilot_name )",
          "select p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = 'B-52 Bomber' ) and exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and ps.pilot_name = p.pilot_name )",
          "select p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = 'B-52 Bomber' ) and exists ( select 1 from pilotskills ps where ps.plane_name = 'B-52 Bomber' and ps.pilot_name = 'Piper Cub' )",
          "select p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = p.pilot_name and ps.plane_name = 'B-52 Bomber' )",
          "select p.pilot_name from pilotskills p where p.plane_name in ( 'Piper Cub' , 'B-52 Bomber' ) group by p.pilot_name having count ( distinct p.plane_name ) = 2"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills ps where ps.plane_name in ( 'Piper Cub' , 'B-52 Bomber' ) group by ps.pilot_name having count ( distinct ps.plane_name ) = 2",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name in ( select plane_name from pilotskills where pilot_name = 'Piper Cub' ) and plane_name in ( select plane_name from pilotskills where pilot_name = 'B-52 Bomber' )",
          "select distinct pilot_name from pilotskills where plane_name in ( 'Piper Cub' , 'B-52 Bomber' ) group by pilot_name having count ( distinct plane_name ) = 2",
          "select pilot_name from pilotskills where plane_name in ( select plane_name from pilotskills where plane_name = 'Piper Cub' ) and plane_name in ( select plane_name from pilotskills where plane_name = 'B-52 Bomber' )"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
      "infer_predictions": [
        [
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) as average_age , min ( age ) as min_age from pilotskills",
          "select avg ( age ) as average_age , min ( age ) as minimum_age from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) as average_age , min ( age ) as minimal_age from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
      "infer_predictions": [
        [
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotSkills"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Boston'",
          "select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select p.pilot_name from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location in ( 'Austin' , 'Boston' ) group by p.pilot_name having count ( distinct h.location ) = 2",
          "select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Boston'",
          "select p.pilot_name from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location in ( 'Austin' , 'Boston' ) group by p.pilot_name having count ( distinct h.location ) = 2",
          "select p.pilot_name from pilotskills p where exists ( select 1 from hangar h where h.plane_name = p.plane_name and h.location = 'Austin' ) and exists ( select 1 from hangar h where h.plane_name = p.plane_name and h.location = 'Boston' )"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' union select pilot_name from pilotskills where plane_name = 'F-14 Fighter'",
          "select distinct pilot_name from pilotskills where plane_name = 'Piper Cub' union select distinct pilot_name from pilotskills where plane_name = 'F-14 Fighter'",
          "select distinct p.pilot_name from pilotskills p join hangar h on p.plane_name = h.plane_name where h.plane_name in ( 'Piper Cub' , 'F-14 Fighter' )",
          "select distinct p.pilot_name from pilotskills p join hangar h on p.plane_name = h.plane_name where h.plane_name in ( 'Piper Cub' , 'F-14 Fighter' ) group by p.pilot_name having count ( distinct p.pilot_name ) = 2",
          "select distinct p.pilot_name from pilotskills p where exists ( select 1 from pilotskills ps where ps.plane_name = 'Piper Cub' and ps.pilot_name = 'F-14 Fighter' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' union select pilot_name from pilotskills where plane_name = 'F-14 Fighter'",
          "select distinct p.pilot_name from pilotskills p join hangar h on p.plane_name = h.plane_name where h.plane_name in ( 'Piper Cub' , 'F-14 Fighter' ) group by p.pilot_name having count ( distinct p.plane_name ) = 2",
          "select pilot_name from pilotskills where plane_name in ( 'Piper Cub' , 'F-14 Fighter' )"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name in ( select plane_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter' )",
          "select distinct pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter'",
          "select pilot_name from pilotskills where plane_name in ( select plane_name from pilotskills where pilot_name = 'Piper Cub' or plane_name = 'F-14 Fighter' )",
          "select pilot_name from pilotskills where plane_name in ( 'Piper Cub' , 'F-14 Fighter' )",
          "select pilot_name from pilotskills where plane_name in ( select plane_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter' )"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select plane_name , ( select avg ( age ) from pilotskills group by plane_name ) from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1156,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select count ( * ) , plane_name from pilotskills group by plane_name",
          "select plane_name , count ( * ) from pilotskills group by plane_name",
          "select count ( * ) , plane_name from pilotskills group by plane_name",
          "select count ( * ) , plane_name from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
      "infer_predictions": [
        [
          "select max ( age ) , plane_name from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , max ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name from pilotskills where ( plane_name , age ) in ( select plane_name , max ( age ) from pilotskills group by plane_name ) order by plane_name asc",
          "select pilot_name , max ( age ) from pilotskills group by plane_name order by max ( age ) asc",
          "select ( pilot_name ) , plane_name from pilotskills group by plane_name order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , pilot_name from pilotskills order by plane_name asc",
          "select plane_name , pilot_name from ( select plane_name , pilot_name from pilotskills order by plane_name desc ) as max_age",
          "select plane_name , pilot_name from ( select plane_name , pilot_name from pilotskills order by plane_name desc ) as maxage"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where ( plane_name , age ) in ( select plane_name , max ( age ) from pilotskills group by plane_name )",
          "select pilot_name from pilotskills where plane_name = ( select max ( age ) from pilotskills where plane_name = pilotskills.plane_name ) group by plane_name",
          "select max ( age ) , plane_name from pilotskills group by plane_name",
          "select pilot_name from pilotskills where plane_name = ( select max ( age ) from pilotskills where plane_name = pilotskills.plane_name )",
          "select pilot_name from pilotskills where plane_name = ( select max ( age ) from pilotskills where plane_name = pilotskills.plane_name group by plane_name )",
          "select pilot_name from pilotskills where ( plane_name , age ) in ( select plane_name , max ( age ) from pilotskills group by plane_name )"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , pilot_name from pilotskills order by age desc limit 1",
          "select plane_name , pilot_name from pilotskills where ( plane_name , age ) in ( select plane_name , max ( age ) from pilotskills group by plane_name )"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "pilot_1",
      "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
      "infer_predictions": [
        [
          "select max ( age ) , pilot_name from pilotskills group by pilot_name having pilot_name = pilotskills.pilot_name",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name having pilot_name = ( select max ( age ) from pilotskills group by pilot_name )",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name having count ( * ) = 1",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name having pilot_name = ( select max ( age ) from pilotskills where pilot_name = pilot_name group by pilot_name )"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "pilot_1",
      "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
      "infer_predictions": [
        [
          "select pilot_name , max ( age ) from pilotskills group by pilot_name",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select pilotskills.pilot_name , max ( pilotskills.age ) from pilotskills group by pilotskills.pilot_name",
          "select pilot_name , max ( age ) from pilotskills group by pilotskills.pilot_name",
          "select pilot_name , max ( age ) from pilotskills group by pilot_name",
          "select distinct pilot_name , max ( age ) from pilotskills group by pilot_name"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "pilot_1",
      "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
      "infer_predictions": [
        [
          "select count ( * ) , avg ( age ) , location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by location",
          "select count ( * ) , avg ( age ) , location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by location"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "pilot_1",
      "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
      "infer_predictions": [
        [
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select hangar.location , count ( * ) , avg ( age ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select location , count ( * ) , avg ( age ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select hangar.location , count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
      "infer_predictions": [
        [
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills where age < 35 group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) <= 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
      "infer_predictions": [
        [
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select distinct plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "pilot_1",
      "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
      "infer_predictions": [
        [
          "select hangar.location from hangar inner join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.age = ( select min ( age ) from pilotskills )",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as y on hangar.plane_name = y.plane_name",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as earliestplane on hangar.plane_name = earliestplane.plane_name",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as london on hangar.plane_name = london.plane_name",
          "select hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from hangar inner join ( select plane_name , min ( age ) as age from pilotskills group by plane_name ) as temp on hangar.plane_name = temp.plane_name"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "pilot_1",
      "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
      "infer_predictions": [
        [
          "select hangar.location from hangar inner join pilotskills on hangar.plane_name = pilotskills.plane_name where pilotskills.age = ( select min ( age ) from pilotskills )",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as lowest_age on hangar.plane_name = lowest_age.plane_name",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as firstorder on hangar.plane_name = firstorder.plane_name",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as first_order on hangar.plane_name = first_order.plane_name",
          "select hangar.location from hangar inner join ( select plane_name from pilotskills where age = ( select min ( age ) from pilotskills ) ) as low_age on hangar.plane_name = low_age.plane_name",
          "select hangar.location from hangar inner join ( select plane_name , min ( age ) as min_age from pilotskills group by plane_name ) as temp on hangar.plane_name = temp.plane_name",
          "select hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name order by pilotskills.age asc limit 1"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin'",
          "select pilot_name , age from pilotskills where plane_name in ( select plane_name from hangar where location = 'Austin' )",
          "select p.pilot_name , p.age from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location = 'Austin'",
          "select p.pilot_name , p.age from pilotskills p where exists ( select 1 from hangar h where h.plane_name = p.plane_name and h.location = 'Austin' )",
          "select pilotskills.pilot_name , pilotskills.age from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin'",
          "select pilot_name , age from pilotskills where exists ( select 1 from hangar where hangar.location = 'Austin' and pilotskills.plane_name = hangar.plane_name )",
          "select pilot_name , age from pilotskills where plane_name in ( select plane_name from hangar where location = 'austin' )"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin'",
          "select p.pilot_name , p.age from pilotskills p where exists ( select 1 from hangar h where h.plane_name = p.plane_name and h.location = 'Austin' )",
          "select p.pilot_name , p.age from pilotskills p where exists ( select 1 from hangar h where h.location = 'Austin' and h.plane_name = p.plane_name )",
          "select p.pilot_name , p.age from pilotskills p join hangar h on p.plane_name = h.plane_name where h.location = 'Austin'",
          "select p.pilot_name , p.age from pilotskills p where exists ( select 1 from hangar h where h.plane_name = p.plane_name and h.location = 'austin' )",
          "select pilot_name , age from pilotskills where exists ( select 1 from hangar where hangar.location = 'Austin' and pilotskills.plane_name = hangar.plane_name )"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
      "infer_predictions": [
        [
          "select p.pilot_name from pilotskills p where p.age > ( select max ( ps.age ) from pilotskills ps where ps.plane_name = 'Piper Cub' ) order by p.pilot_name asc",
          "select p.pilot_name from pilotskills p where p.age > ( select max ( p2.age ) from pilotskills p2 where p2.plane_name = 'Piper Cub' ) order by p.pilot_name asc",
          "select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select p.pilot_name from pilotskills p where p.age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by p.pilot_name asc",
          "select p.pilot_name from pilotskills p where p.age > ( select max ( p.age ) from pilotskills p where p.plane_name = 'Piper Cub' ) order by p.pilot_name asc",
          "select p.pilot_name from pilotskills p where p.age > ( select max ( ps2.age ) from pilotskills ps2 where ps2.plane_name = 'Piper Cub' ) order by p.pilot_name asc",
          "select p.pilot_name from pilotskills p where p.age > ( select max ( p2.age ) from pilotskills p2 where p2.plane_name = 'Piper Cub' ) order by p.pilot_name asc"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from ( select min ( age ) as age from pilotskills where plane_name = 'F-14 Fighter' )"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from ( select age from pilotskills where plane_name = 'Piper Cub' and age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) )",
          "select count ( * ) from ( select * from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) )",
          "select count ( * ) from ( select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) )",
          "select count ( * ) from ( select age from pilotskills where plane_name = 'Piper Cub' and age > ( select max ( age ) from pilotskills where plane_name = 'Piper' ) )",
          "select count ( * ) from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( distinct age ) from pilotskills where plane_name = 'Piper Cub' and age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from ( select age from pilotskills where plane_name = 'Piper Cub' ) where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
      "infer_predictions": [
        [
          "select d.name from district d where d.area_km = ( select max ( area_km ) from district )",
          "select d.name from district d where d.area_km = ( select max ( d2.area_km ) from district d2 )",
          "select d.name from district d where d.area_km = ( select max ( area_km ) from district )",
          "select d.name from district as d where d.area_km = ( select max ( area_km ) from district )",
          "select d.name from district d where d.area_KM = ( select max ( area_km ) from district )",
          "select d.name from district d where d.area_km = ( select max ( area_KM ) from district )"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "district_spokesman",
      "gold": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
      "infer_predictions": [
        [
          "select area_km , government_website from district where population = ( select min ( population ) from district )",
          "select d.area_km , d.government_website from district d where d.population = ( select min ( population ) from district )",
          "select area_km , government_website from district where population = ( select min ( population ) from district )",
          "select district.area_km , district.government_website from district where district.population = ( select min ( population ) from district )",
          "select area_km , government_website from district where population = ( select min ( population ) from district )"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
      "infer_predictions": [
        [
          "select name , population from district where area_km > ( select avg ( area_km ) from district )",
          "select district.name , district.population from district where area_km > ( select avg ( area_km ) from district )",
          "select name , population from district where area_km > ( select avg ( area_km ) from district )",
          "select name , population from district where area_km > ( select avg ( area_KM ) from district )"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "district_spokesman",
      "gold": "SELECT max(area_km) ,  avg(area_km) FROM district",
      "infer_predictions": [
        [
          "select max ( area_km ) , avg ( area_km ) from district",
          "select max ( area_km ) , avg ( density_km ) from district",
          "select max ( area_km ) , avg ( district.area_km ) from district",
          "select max ( area_KM ) , avg ( area_km ) from district",
          "select max ( area_km ) , avg ( area_KM ) from district"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "district_spokesman",
      "gold": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
      "infer_predictions": [
        [
          "select sum ( population ) from district where area_km in ( select area_km from district order by area_km desc limit 3 )",
          "select sum ( population ) from ( select population from district order by area_km desc limit 3 )",
          "select sum ( population ) from ( select d.population from district d where d.area_km in ( select area_km from district order by area_km desc limit 3 ) )",
          "select sum ( population ) from ( select d.population from district d where d.area_km in ( select area_km from district ) order by d.area_km desc limit 3 )",
          "select sum ( population ) from district where area_km in ( select area_km from district list order by area_km desc limit 3 )"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
      "infer_predictions": [
        [
          "select district_id , name , government_website from district order by population asc",
          "select district.district_id , district.name , district.government_website from district order by district.population asc",
          "select district_id , district.name , district.government_website from district order by population asc",
          "select district.district_id , district.name , district.government_website from district order by population asc",
          "Select district_id , name , government_website from district order by population asc",
          "select district_id , district.name , government_website from district order by population asc",
          "select district_id , name , government_website from district order by population asc"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
      "infer_predictions": [
        [
          "select name from district where government_website = 'gov'",
          "select name from district where government_website = 'gov.gov'",
          "select name from district where government_website = 'gov.com'",
          "select name from district where government_website like '%gov%'",
          "select name from district where government_website = 'gov.org'",
          "select name from district where government_website = 'gov.gov.uk'",
          "select name from district where government_website = 'gov.co.uk'",
          "select name from district where government_website = 'www.district.gov'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "district_spokesman",
      "gold": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
      "infer_predictions": [
        [
          "select district_id , name from district where population > 4000 or area_km > 3000",
          "select district.district_id , district.name from district where district.population > 4000 or district.area_km > 3000",
          "select district_id , district.name from district where population > 4000 or area_km > 3000",
          "select district_id , name from district where population >4000 or area_km >3000",
          "select district_id , name from district where population >4000 or area_km > 3000"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  speach_title FROM spokesman",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1188,
      "db_id": "district_spokesman",
      "gold": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
      "infer_predictions": [
        [
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = '1'",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  points FROM spokesman WHERE age  <  40",
      "infer_predictions": [
        [
          "select name , points from spokesman where age < 40",
          "select name , points from spokesman where age <= 40",
          "select name , points from spokesman where age < 40"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select s.name from spokesman s where s.age = ( select max ( age ) from spokesman )",
          "select s1.name from spokesman s1 where s1.age = ( select max ( s2.age ) from spokesman s2 )",
          "select p.name from spokesman p where p.age = ( select max ( age ) from spokesman )",
          "select name from spokesman where age = ( select max ( age ) from spokesman )",
          "select z.name from spokesman z where z.age = ( select max ( age ) from spokesman )",
          "select name from spokesman order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
      "infer_predictions": [
        [
          "select name from spokesman where points < ( select avg ( points ) from spokesman )",
          "select s.name from spokesman s where s.points < ( select avg ( points ) from spokesman )",
          "select sp.name from spokesman sp where sp.points < ( select avg ( points ) from spokesman )",
          "select p.name from spokesman p where p.points < ( select avg ( points ) from spokesman )",
          "select name from spokesman group by points having avg ( points ) < 0"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id order by count ( * ) desc limit 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman.spokesman_id = spokesman_district.spokesman_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman.spokesman_id = spokesman_district.spokesman_id group by district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id group by district.district_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
      "infer_predictions": [
        [
          "select name from spokesman where spokesman_id in ( select spokesman_id from spokesman_district where start_year < 2004 )",
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year < 2004",
          "select name from spokesman where spokesman_id in ( select spokesman_id from spokesman_district where start_year <= 2004 )",
          "select name from spokesman where spokesman_id in ( select spokesman_id from spokesman_district where start_year < 2014 )"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
      "infer_predictions": [
        [
          "select district.name , count ( spokesman_district.spokesman_id ) from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select district.name , count ( * ) from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select district.name , count ( spokesman_district.spokesman_id ) as num_spokesmen from spokesman_district left join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select district.name , count ( spokesman_district.spokesman_id ) as num_spokesmen from district left join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id",
          "select district.name , ( select count ( distinct spokesman_id ) from spokesman_district where district_id = district.district_id ) as num_spokesmen from district",
          "select district.name , count ( spokesman_id ) from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select district.name , ( select count ( distinct spokesman_id ) from spokesman_district where district_id = district.district_id ) as spokesmen_count from district",
          "select district.name , count ( * ) from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "district_spokesman",
      "gold": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
      "infer_predictions": [
        [
          "select district.name from district where district_id in ( select spokesman_district.district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district.name from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 2 )",
          "select name from district where district_id in ( select spokesman_district.district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district.name from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 2 )",
          "select district.name from district where district_id in ( select spokesman_district.district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 2 )",
          "select name from district where district_id in ( select district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where rank_position = 1 intersect select district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where rank_position = 2 )",
          "select name from district where district_id in ( select district_id from spokesman_district join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where rank_position = 1 intersect select district_id from spokesman where rank_position = 2 )"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by spokesman_district.district_id having count ( * ) > 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id having count ( * ) > 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by spokesman_district.district_id having count ( * ) > 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id having count ( * ) > 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id having count ( distinct spokesman_id ) > 1"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "district_spokesman",
      "gold": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
      "infer_predictions": [
        [
          "select count ( * ) from district where district_id not in ( select district_id from spokesman_district )",
          "select count ( * ) from district where district_id not in ( select distinct district_id from spokesman_district )",
          "select count ( distinct district_id ) from district where district_id not in ( select district_id from spokesman_district )",
          "select count ( * ) from district where district_id not in ( select district_id from spokesman_district )"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
      "infer_predictions": [
        [
          "select name from spokesman where spokesman_id not in ( select spokesman_id from spokesman_district )"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "district_spokesman",
      "gold": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
      "infer_predictions": [
        [
          "select sum ( district.population ) , avg ( district.population ) from district where district_id in ( select district_id from spokesman_district )",
          "select sum ( population ) , avg ( population ) from district where district_id in ( select district_id from spokesman_district )",
          "select sum ( district.population ) , avg ( district.population ) from district where exists ( select 1 from spokesman_district where spokesman_district.district_id = district.district_id )",
          "select sum ( district.population ) , avg ( district.population ) from district join ( select district_id from spokesman_district ) d on d.district_id = d.district_id",
          "select sum ( district.population ) , avg ( district.population ) from district join ( select district_id from spokesman_district ) as temp on district.district_id = temp.district_id"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "art_1",
      "gold": "select title from sculptures order by year desc limit 1",
      "infer_predictions": [
        [
          "select title from sculptures where year = ( select max ( year ) from sculptures )",
          "select s.title from sculptures s where s.year = ( select max ( year ) from sculptures )",
          "select s.title from sculptures as s where s.year = ( select max ( year ) from sculptures )",
          "select title from sculptures order by year desc limit 1",
          "select title from sculptures where year = ( select max ( year ) from sculptures )"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "art_1",
      "gold": "select title from sculptures order by year desc limit 1",
      "infer_predictions": [
        [
          "select title from sculptures where year = ( select max ( year ) from sculptures )",
          "select s.title from sculptures s where s.year = ( select max ( year ) from sculptures )",
          "select title from sculptures order by year desc limit 1",
          "select s.title from sculptures as s where s.year = ( select max ( year ) from sculptures )",
          "select s.title , s.year from sculptures s where s.year = ( select max ( year ) from sculptures )",
          "select s.title from sculptures s where s. year = ( select max ( year ) from sculptures )"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "art_1",
      "gold": "select title ,  location from paintings order by year limit 1",
      "infer_predictions": [
        [
          "select title , location from paintings where year = ( select min ( year ) from paintings )",
          "select title , location from paintings where year = ( select max ( year ) from paintings )"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select title , location from paintings where year = ( select min ( year ) from paintings )",
          "select title , location from paintings where year = ( select max ( year ) from paintings )"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "art_1",
      "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title from sculptures where location = 226",
          "select title from sculptures where location = 'Gallery 226'",
          "select title from sculptures where location = '226'",
          "select title from sculptures where location = 'gallery 226'",
          "select title from sculptures where location = 'Gallery 226' or sculptureid = sculptures.sculptureid",
          "select title from sculptures where location = 'Gallery 226 ,' or sculptureid = sculptures.sculptureid"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "art_1",
      "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title from sculptures where location = 226",
          "select title from sculptures where year = 2000 and location = 'Gallery 226'",
          "select title from sculptures where sculptureid = 226",
          "select title from sculptures where year = 2000 and location = 226",
          "select title from sculptures where location = '226'",
          "select title from sculptures where year = 2002 and location = 226"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM paintings",
      "infer_predictions": [
        [
          "select title , location from paintings",
          "select title , location from paintings",
          "Select title , location from paintings"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM paintings",
      "infer_predictions": [
        [
          "select title , location from paintings",
          "select title , location from paintings"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM sculptures",
      "infer_predictions": [
        [
          "select title , location from sculptures"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM sculptures",
      "infer_predictions": [
        [
          "select title , location from sculptures"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "art_1",
      "gold": "SELECT medium FROM paintings WHERE paintingID  =  80",
      "infer_predictions": [
        [
          "select distinct medium from paintings where paintingid = 80",
          "select medium from paintings where paintingid = 80"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "art_1",
      "gold": "select medium from paintings where paintingid  =  80",
      "infer_predictions": [
        [
          "select medium from paintings where paintingid = 80",
          "select distinct medium from paintings where paintingid = 80",
          "select medium from paintings where paintingid = 80",
          "select medium from paintings where paintingid = 80 != '80'",
          "select medium from paintings where paintingid = 80 != 'Oil on canvas'"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
      "infer_predictions": [
        [
          "select fname , lname from artists where birthyear > 1850",
          "select fname , lname from artists where deathyear > 1850",
          "select fname , lname from artists where birthyear > 1850"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1214,
      "db_id": "art_1",
      "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title , year from sculptures where location != 226",
          "select title , year from sculptures where location != 'Gallery 226'",
          "select title , year from sculptures where location != 'gallery 226'",
          "select title , year from sculptures where location != '226'",
          "select title , year from sculptures where location != 'Galley 226'",
          "select title , year from sculptures where location != \"Gallery 226\""
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "art_1",
      "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title , year from sculptures where location != 'Gallery 226'",
          "select title , year from sculptures where location != 226",
          "select title , year from sculptures where location != '226'",
          "select title , year from sculptures where location != 'gallery 226'",
          "select title , year from sculptures where location != 'Galley 226'"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
      "infer_predictions": [
        [
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year <= 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.Artistid = sculptures.sculptorid where sculptures.year < 1900"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
      "infer_predictions": [
        [
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where exists ( select 1 from sculptures where sculptures.year < 1900 )",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year <= 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures. sculptureid where sculptures.year < 1900"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
      "infer_predictions": [
        [
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 1920",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
      "infer_predictions": [
        [
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 1920",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920",
          "select distinct artists.birthyear from artists join sculptures on artists.Artistid = sculptures.sculptorid where sculptures.year > 1920",
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 1930",
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 20",
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures. year > 1920"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , lname from artists order by deathyear desc limit 1",
          "select fname , lname from artists where deathyear = ( select max ( deathyear ) from artists )"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , lname from artists order by deathyear desc limit 1",
          "select fname , lname from artists where deathyear = ( select max ( deathyear ) from artists )"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "art_1",
      "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
      "infer_predictions": [
        [
          "select birthyear from artists order by deathyear asc limit 1"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "art_1",
      "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
      "infer_predictions": [
        [
          "select a.fname from artists a where a.birthyear = ( select min ( birthyear ) from artists )"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "art_1",
      "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1225,
      "db_id": "art_1",
      "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , deathyear from artists order by deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "art_1",
      "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select count ( * ) from paintings where location = 240",
          "select count ( * ) from paintings where location = '240'",
          "select count ( * ) from ( select paintings.title from paintings join sculptures on paintings.painterid = sculptures.sculptorid where sculptures.location = 240 )",
          "select count ( * ) from ( select paintings.title , paintings.year , sculptures.medium , sculptures.location from paintings join sculptures on paintings.painterid = sculptures.sculptorid where sculptures.location = 240 )",
          "select count ( * ) from ( select paintings.title , paintings.year , sculptures.location from paintings join sculptures on paintings.painterid = sculptures.sculptorid where sculptures.location = 240 )"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "art_1",
      "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select count ( * ) from paintings where location = 240",
          "select count ( * ) from paintings where location = '240'",
          "select count ( * ) from paintings where location = 'Gallery 240'",
          "select count ( * ) from paintings where location = 230"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "art_1",
      "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
      "infer_predictions": [
        [
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) from paintings join artists on paintings.painterid = artists.artistid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from paintings inner join artists on paintings.painterid = artists.artistid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) from paintings join artists on paintings.painterid = artists.artistid order by artists.deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "art_1",
      "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
      "infer_predictions": [
        [
          "select count ( * ) from paintings join artists on paintings.painterid = artists.artistid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) from paintings inner join artists on paintings.painterid = artists.artistid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from paintings inner join ( select artistid from artists where deathyear = ( select max ( deathyear ) from artists ) ) as maxpaintings on paintings.painterid = maxpaintings.artistid"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "art_1",
      "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
      "infer_predictions": [
        [
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'James'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Jack'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Mary'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Maria'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Janet'",
          "select distinct p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Jane'"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "art_1",
      "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
      "infer_predictions": [
        [
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'James'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Jack'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary'",
          "select p.title , p.year from paintings p join artists ar on p.painterid = ar.artistid where ar.fname = 'Mary' and ar.lname = 'James'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'Susan'",
          "select p.title , p.year from paintings p join artists a on p.painterid = a.artistid where a.fname = 'Mary' and a.lname = 'John'"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "art_1",
      "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
      "infer_predictions": [
        [
          "select width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.paINTERID where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.paintingid where artists.birthyear < 1850",
          "select width_mm from paintings join artists on paintings.paintingid = artists.artistid where artists.birthyear < 1850",
          "select paintings.width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "art_1",
      "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
      "infer_predictions": [
        [
          "select width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select max ( width_mm ) from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select width_mm from paintings join artists on paintings.paintingid = artists.artistid where artists.birthyear < 1850",
          "select width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "art_1",
      "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
      "infer_predictions": [
        [
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select location , medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.paINTERID where artists.fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "art_1",
      "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
      "infer_predictions": [
        [
          "select location , medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select distinct paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select distinct location , medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select location , medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Artists.fname' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title = 'Artists.title'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Artists.Fname' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title = 'Artists.title'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Artists.fname' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title = 'Artists.title'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Artists.name' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title = 'Artists.title'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Paintings' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title = 'Sculptures.title'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where paintings.title = 'Artists' intersect select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1238,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Lithography'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithograph'",
          "select a.fname , a.lname from artists a where exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'oil' ) and exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'lithographic' )",
          "select a.fname , a.lname from artists a where exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'oil' ) and exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'lithographic' )",
          "select a.fname , a.lname from artists a where exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'Oil' ) and exists ( select 1 from paintings p where p.painterid = a.artistid and p.medium = 'lithographic' )"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Lithography'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Lithograph'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithography'"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "art_1",
      "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select a.birthyear from artists a where exists ( select 1 from paintings p where p.year = 1884 and p.medium = 'canvas' )",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and paintings.medium = 'canvas'",
          "select a.birthyear from artists a where exists ( select 1 from paintings p where p.year = 1884 and p.mediumon = 'canvas' )",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and paintings.mediumon = 'canvas'",
          "select a.birthyear from artists a where exists ( select 1 from paintings p where p.year = 1884 and p.medium = 'Canvas' )"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "art_1",
      "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884",
          "select artists.birthyear from paintings join artists on paintings.painterid = artists.artistid where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.paintingid where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.paINTERID where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings. year = 1884"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1243,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select artists.fname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' and paintings.location = 241",
          "select artists.fname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' and paintings.location = 241",
          "select artists.fname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' and paintings.location = 241",
          "select artists.fname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'Oil' and paintings.location = 241"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select medium , count ( * ) from paintings group by medium",
          "select count ( * ) , medium from paintings group by medium",
          "select count ( * ) , mediumon from paintings group by mediumon",
          "select medium , count ( * ) from paintings group by mediumon"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select count ( * ) , medium from paintings group by medium",
          "select medium , count ( * ) from paintings group by medium"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , medium from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select avg ( height_mm ) , medium from paintings group by mediumon"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , medium from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select avg ( height_mm ) , medium from paintings group by mediumon"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select count ( * ) , location from paintings where year < 1900 group by location",
          "select count ( * ) , location from paintings where year <= 1900 group by location",
          "select count ( * ) , location from paintings where year < 1900 group by location"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select count ( * ) from paintings where year < 1900 and location = 'USA'",
          "select count ( * ) from paintings where year < 1900 and location = 'London'",
          "select count ( * ) from paintings where year < 1900 group by location",
          "select count ( * ) from paintings where year < 1900 and location > 100",
          "select count ( * ) , location from paintings where year < 1900 group by location",
          "select count ( * ) from paintings where year < 1900 and location = 'Boston'",
          "select count ( * ) from paintings where year < 1900 and location = 'NYC'",
          "select count ( * ) from paintings where year < 1900 and location = 'San Francisco'"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
      "infer_predictions": [
        [
          "select title from paintings where year > 1910 and medium = 'oil'",
          "select title from paintings where year > 1910 and medium = 'Oil'",
          "select title from paintings where medium = 'oil' and year > 1910",
          "select title from paintings where year > 1930 and medium = 'oil'",
          "select title from paintings where year > 1920 and medium = 'oil'"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
      "infer_predictions": [
        [
          "select title from paintings where medium = 'oil' and year > 1910",
          "select title from paintings where medium = 'Oil' and year > 1910",
          "select title from paintings where year > 1910 and medium = 'oil'",
          "select title from paintings where year > 1910 and medium = 'Oil'"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select distinct painterid from paintings where medium = 'oil' and location = 240",
          "select distinct painterid from paintings where medium = 'oil' and location = 240",
          "select distinct painterid from paintings where medium = 'Oil' and location = 240",
          "select distinct painterid from paintings where medium = 'oil' and location = 240"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select distinct painterid from paintings where medium = 'oil' and location = 240",
          "select distinct painterid from paintings where medium = 'oil' and location = 240",
          "select distinct painterid from paintings where medium = 'Oil' and location = 240",
          "select distinct painterid from paintings where medium = 'oil' and location = 240",
          "select distinct painterid from paintings where medium = 'Oil' and location = 240"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
      "infer_predictions": [
        [
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select max ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select max ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select avg ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canva' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canvases' )"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
      "infer_predictions": [
        [
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select max ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select max ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select avg ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canva' )"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
      "infer_predictions": [
        [
          "select distinct paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 240 )",
          "select distinct p.paintingid from paintings p where p.year > ( select min ( year ) from paintings where location = 240 )",
          "select distinct p.paintingid from paintings p where p.year > ( select min ( year ) from paintings p2 where p2.location = 240 )",
          "select distinct paintingid from paintings where year < ( select max ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year <= ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
      "infer_predictions": [
        [
          "select distinct p.paintingid from paintings p where p.year > ( select min ( year ) from paintings p2 where p2.year = 240 )"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select paintingid from paintings where year = ( select min ( year ) from paintings )",
          "select painterid from paintings where year = ( select min ( year ) from paintings )",
          "select paintingid from paintings order by year asc limit 1"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select paintingid from paintings where year = ( select min ( year ) from paintings )",
          "select p.paintingid from paintings as p where p.year = ( select min ( year ) from paintings )",
          "select paintingid from paintings order by year asc limit 1"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select a.fname , a.lname from artists a where exists ( select 1 from sculptures s where s.sculptorid = a.artistid and s.title like '%female%' )",
          "select u.fname , u.lname from artists u where exists ( select 1 from sculptures s where s.sculptorid = u.artistid and s.title like '%female%' )",
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.title like '%female%'",
          "select u.fname , u.lname from artists u join sculptures s on u.artistid = s.sculptorid where s.title like '%female%'",
          "select a.fname , a.lname from artists a where exists ( select 1 from sculptures s where s.sculptorid = a.artistid and s.title like '%feminine%' )",
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%feminine%'",
          "select u.fname , u.lname from artists u where exists ( select 1 from sculptures s where s.sculptorid = u.artistid and s.title like '%feminine%' )"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
      "infer_predictions": [
        [
          "select distinct title from paintings order by title asc"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
      "infer_predictions": [
        [
          "select distinct title from paintings order by title asc"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
      "infer_predictions": [
        [
          "select distinct title from paintings order by width_mm asc"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
      "infer_predictions": [
        [
          "select distinct title from paintings order by height_mm asc"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptorid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.paintingid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year >= 1900 and paintings.year <= 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptorid where sculptures.year >= 1900 and paintings.year <= 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.painterid = sculptures.sculptorid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptorid = paintings.paintingid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.painterid = sculptures.sculptureid where sculptures.year between 1900 and 1950"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptorid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptorid where sculptures.year between 1950 and 1900",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptorid = paintings.paintingid where sculptures.year between 1900 and 1950"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "art_1",
      "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Alice' and artists.lname = 'James'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'Janet'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'James' and artists.lname = 'Susan'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'Mary'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'James'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'James' and artists.lname = 'Janice'"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "art_1",
      "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Alice' and artists.lname = 'James'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'Janet'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'Mary'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Fred' and artists.lname = 'James'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'James' and artists.lname = 'Susan'",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.fname = 'Susan' and artists.lname = 'James'"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "art_1",
      "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "art_1",
      "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "art_1",
      "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "art_1",
      "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by sculptures.sculptorid order by count ( * ) desc limit 1",
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by sculptures.sculptorid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
      "infer_predictions": [
        [
          "select title from paintings where width_mm < 600 or height_mm > 800",
          "select title from paintings where width_mm < 600 union select title from paintings where height_mm > 800",
          "select title from paintings where width_mm < 600 or ( height_mm > 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm  > 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm + 800 )",
          "select title from paintings where width_mm <= 600 or height_mm > 800",
          "select title from paintings where width_mm < 600 or ( height_mm > 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm > 800 )"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
      "infer_predictions": [
        [
          "select title from paintings where width_mm < 600 or height_mm > 800",
          "select title from paintings where width_mm < 600 union select title from paintings where height_mm > 800",
          "select title from paintings where width_mm < 600 or ( height_mm > 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm  > 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm + 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm - 800 )",
          "select title from paintings where width_mm < 600 or ( height_mm ) > 800",
          "select title from paintings where width_mm < 600 or ( height_mm > 800 )"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 or year > 1930",
          "select distinct location from paintings where year < 1885 or year > 1930",
          "select location from paintings where year < 1885 union select location from paintings where year > 1930",
          "select location from paintings where year < 1885 or ( year > 1930 )",
          "select location from paintings where year < 1885 or ( location and year > 1930 )",
          "select location from paintings where year < 1885 or ( year > 1930 )",
          "select location from paintings where year < 1885 or ( location + year ) > 1930",
          "select location from paintings where year < 1885 or ( location = paintings.location and year > 1930 )"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
      "infer_predictions": [
        [
          "select distinct location from paintings where year < 1885 or year > 1930",
          "select location from paintings where year < 1885 or year > 1930",
          "select location from paintings where year < 1885 union select location from paintings where year > 1930",
          "select location from paintings where year < 1885 or ( year > 1930 )",
          "select location from paintings where year <= 1885 union select location from paintings where year > 1930",
          "select distinct location from paintings where year <= 1885 or year > 1930"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm between 500 and 2000",
          "select paintingid from paintings where height_mm > 500 and height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 and height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 and height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 and height_mm < 2000"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > 500 and width_mm < 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where width_mm < 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where width_mm < 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where width_mm < 2000"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on canvas' intersect select location from paintings where medium = 'on panel'",
          "select location from paintings where medium = 'on board' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'On panel' intersect select location from paintings where medium = 'On canvas'",
          "select location from paintings where medium = 'on panels' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where medium = 'on panels' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on canvas' intersect select location from paintings where medium = 'on panels'",
          "select location from paintings where medium = 'on canvas' intersect select location from paintings where medium = 'on panel'",
          "select distinct location from paintings where medium = 'on panels' intersect select distinct location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on boards' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on panels' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'On panels' intersect select location from paintings where medium = 'On canvas'"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year <= 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year >> 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year <= 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year >> 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = '241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 'Gallery 241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 'gallery 241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = 'Gallery 241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = '241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = '241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = 241"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = '241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = '241'"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
      "infer_predictions": [
        [
          "select max ( height_mm ) , max ( paintingid ) from paintings where year < 1900",
          "select max ( height_mm ) as maxheight , max ( paintingid ) as maxpaintingid from paintings where year < 1900",
          "select max ( height_mm ) , max ( paintingid ) from paintings where year <= 1900",
          "select max ( height_mm ) , max ( paintingid ) from paintings where year < 1900"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
      "infer_predictions": [
        [
          "select height_mm , paintingid from paintings where year < 1900",
          "select max ( height_mm ) , max ( paintingid ) from paintings where year < 1900",
          "select p.height_mm , p.paintingid from paintings p where p.year < 1900 = ( select max ( height_mm ) from paintings where year < 1900 )",
          "select height_mm , painterid from paintings where year < 1900",
          "select height_mm , paintingid from paintings where year < 1900 = ( select max ( height_mm ) from paintings where year < 1900 )",
          "select paintingid , height_mm from paintings where year < 1900",
          "select height_mm , paintingid from paintings where year < 1900 and height_mm = ( select max ( height_mm ) from paintings where year < 1900 )"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
      "infer_predictions": [
        [
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
      "infer_predictions": [
        [
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) , artists.lname from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid order by artists.lname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid order by artists.fname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid order by artists.fname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , artists.lname from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid order by artists.fname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , artists.lname from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid order by artists.lname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , paintings.painterid from paintings join artists on paintings.painterid = artists.artistid group by paintings.painterid order by artists.fname asc"
        ]
      ]
    },
    {
      "id": 1291,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) , artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid order by artists.fname asc",
          "select avg ( height_mm ) , avg ( width_mm ) , paintings.painterid from paintings join artists on paintings.painterid = artists.artistid group by paintings.painterid order by artists.fname asc"
        ]
      ]
    },
    {
      "id": 1292,
      "db_id": "art_1",
      "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.paINTERID group by artists.artistid having count ( * ) >= 2",
          "select count ( * ) , artists.fname from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "art_1",
      "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.paINTERID group by artists.artistid having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
      "infer_predictions": [
        [
          "select deathyear from artists group by deathyear having count ( * ) <= 3",
          "select deathyear from artists left join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 3",
          "select deathyear from artists left join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 3",
          "select deathyear from artists group by artists.artistid having count ( * ) <= 3",
          "select deathyear from artists where artistid not in ( select painterid from paintings group by painterid having count ( * ) > 3 )",
          "select deathyear from artists where artistid not in ( select painterid from paintings group by painterid having count ( * ) >= 3 )"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "art_1",
      "gold": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select distinct artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) asc limit 1",
          "select a.deathyear from artists a inner join sculptures s on a.artistid = s.sculptorid group by a.artistid order by count ( s.sculptorid ) asc limit 1",
          "select a.deathyear from artists a left join sculptures s on a.artistid = s.sculptorid group by a.artistid order by count ( s.sculptorid ) asc limit 1",
          "select a.deathyear from artists a inner join sculptures s on a.artistid = s.Sculptorid group by a.artistid order by count ( s.sculptorid ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by sculptures.sculptorid order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.Artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1299,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1300,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1301,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
      "infer_predictions": [
        [
          "select paintingid from paintings where year < ( select min ( year ) from paintings where year = 240 )",
          "select paintingid from paintings where year < ( select min ( year ) from paintings where year <= 240 )",
          "select paintingid from paintings where year < ( select min ( year ) from paintings where paintingid = paintingid )",
          "select paintingid from paintings where year < ( select min ( year ) from paintings where year < 240 )"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select p.paintingid from paintings p where p.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings p where p.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintings.paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year = 1900 )",
          "select paintingid from paintings where height_mm = ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_MM > ( select max ( height_mm ) from paintings where year > 1900 )"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select p.paintingid from paintings p where p.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select i.paintingid from paintings as i where i.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select i.paintingid from paintings i where i.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select u.paintingid from paintings u where u.height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintings.paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year> 1900 )"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' group by artists.artistid order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'Oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'Oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'Oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
      "infer_predictions": [
        [
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'Oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'oil' group by paintingid order by year asc",
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'oils' order by year asc",
          "select paintingid , location ,title from paintings where medium = 'oil' order by year asc"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
      "infer_predictions": [
        [
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc , paintingid , title",
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc , paintingid",
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc , paintings.title",
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'Oil' order by year asc , paintingid , title",
          "select paintings.paintingid , paintings.location , paintings.title from paintings order by paintings.year asc , paintings.paintingid , paintings.title",
          "select paintings.paintingid , paintings.location , paintings.title from paintings order by paintings.year asc , paintings.location , paintings.title"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
      "infer_predictions": [
        [
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location ,title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm >1000 order by title asc",
          "select year , location , title from paintings where height_MM > 1000 order by title asc",
          "select title , year , location from paintings where height_mm > 1000 order by title asc"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
      "infer_predictions": [
        [
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm > 1000 order by year asc",
          "select year , location ,title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm >1000 order by title asc",
          "select year , location , title from paintings where height_MM > 1000 order by title asc"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
      "infer_predictions": [
        [
          "select fname , lname from artists except select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on sculptures.sculptorid = artists.artistid",
          "select fname , lname from artists except select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
      "infer_predictions": [
        [
          "select fname , lname from artists where artistid not in ( select artistid from sculptures )",
          "select fname , lname from artists where artistid not in ( select artistid from sculptures ) except select artists.fname , artists.lname from artists where artistid not in ( select artistid from paintings ) except select artists.fname , artists.lname from artists where artistid not in ( select artistid from sculptures )",
          "select fname , lname from artists where artistid not in ( select artistid from sculptures ) except select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where artists.artistid not in ( select artistid from sculptures )"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 except select location from paintings where medium = 'Canvas'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'canvas'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'mediumon'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'oil on canvas'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'canva'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'painting on canvas'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'paint on canvas'",
          "select location from paintings where year <= 1885 except select location from paintings where medium = 'Canvas'"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 and medium != 'canvas'",
          "select location from paintings where year < 1885 and mediumon != 'canvas'",
          "select location from paintings where year < 1885 and medium != 'Canvas'",
          "select location from paintings where year < 1885 and medium != 'canva'",
          "select location from paintings where year < 1885 and mediumon != 'Canvas'"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "car_road_race",
      "gold": "SELECT count(*) FROM race",
      "infer_predictions": [
        [
          "select count ( * ) from race"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "car_road_race",
      "gold": "SELECT count(*) FROM race",
      "infer_predictions": [
        [
          "select count ( * ) from race"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
      "infer_predictions": [
        [
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as t",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as winning_team",
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from race order by winning_team asc"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
      "infer_predictions": [
        [
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as t",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as winning_team",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as winning_driver",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc )",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as winners",
          "select winning_driver , winning_team from ( select winning_driver , winning_team from race order by winning_team asc ) as winner",
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from race order by winning_team asc"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
      "infer_predictions": [
        [
          "select winning_driver from race where pole_position != 'Junior Strous'",
          "select distinct winning_driver from race where pole_position != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Strous' or winning_driver != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Strous' != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Strous' and winning_driver != 'Junior Strous'"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
      "infer_predictions": [
        [
          "select winning_driver from race where pole_position != 'Junior Strous'"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc",
          "select constructor from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select distinct constructor from driver order by age asc",
          "select distinct constructor from ( select constructor from driver order by age asc )",
          "select distinct ( constructor ) from driver order by age asc",
          "select distinct constructor from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
      "infer_predictions": [
        [
          "select distinct entrant from driver where age >= 20",
          "Select distinct entrant from driver where age >= 20",
          "select distinct entrant from driver where age + 20",
          "select distinct entrant from driver where age >= 20 != 19"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
      "infer_predictions": [
        [
          "select distinct entrant from driver where age >= 20",
          "select distinct ( entrant ) from driver where age >= 20",
          "Select distinct entrant from driver where age >= 20"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "car_road_race",
      "gold": "SELECT max(Age) ,  min(Age) FROM driver",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) as maxage , min ( age ) as minage from driver",
          "select max ( age ) as max_age , min ( age ) as min_age from driver",
          "select max ( age ) as maxage , min ( age ) as minage from driver",
          "select max ( age ) as maxag , min ( age ) as minag from driver",
          "select max ( age ) as maximumage , min ( age ) as minage from driver",
          "select max ( age ) as maxage , min ( age ) as minage from driver"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "car_road_race",
      "gold": "SELECT max(Age) ,  min(Age) FROM driver",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) as maxage , min ( age ) as minage from driver",
          "select max ( age ) as max_age , min ( age ) as min_age from driver",
          "select max ( age ) as maxage , min ( age ) as minage from driver",
          "select max ( age ) as maxag , min ( age ) as minag from driver",
          "select max ( age ) as maxaage , min ( age ) as minage from driver",
          "select max ( age ) as maxage , min ( age ) as minaage from driver",
          "select max ( age ) , min ( age ) from driver"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "car_road_race",
      "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
      "infer_predictions": [
        [
          "select count ( distinct engine ) from driver where age > 30 or age < 20",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 union select engine from driver where age < 20 )",
          "select count ( distinct engine ) from ( select d.engine from driver d where d.age > 30 or d.age < 20 )",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 or age < 20 )",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 or age < 20 )",
          "select count ( distinct engine ) from ( select d.engine from driver d where d.age > 30 or d.age <= 20 )",
          "select count ( distinct engine ) from ( select engine from driver where age >30 union select engine from driver where age < 20 )"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "car_road_race",
      "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
      "infer_predictions": [
        [
          "select count ( distinct engine ) from driver where age > 30 or age < 20",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 union select engine from driver where age < 20 )",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 or age < 20 )",
          "select count ( distinct engine ) from ( select engine from driver where age > 30 or age < 20 )",
          "select count ( distinct engine ) from driver where ( age > 30 or age < 20 )",
          "select count ( distinct engine ) from driver where age > 30 OR age < 20",
          "select count ( distinct engine ) from driver where age >30 or age < 20",
          "select count ( distinct engine ) from ( select engine from driver where age >30 union select engine from driver where age < 20 )"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
      "infer_predictions": [
        [
          "select driver_name from driver order by driver_name desc"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
      "infer_predictions": [
        [
          "select driver_name from driver order by driver_name desc"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , race.race_name from race join driver on race.driver_id = driver.driver_id",
          "select driver.driver_name , race.race_name from driver join race on driver.driver_id = race.driver_id"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , race.race_name from race join driver on race.driver_id = driver.driver_id",
          "select driver.driver_name , race.race_name from driver join race on driver.driver_id = race.driver_id",
          "Select driver.driver_name , race.race_name from race join driver on race.driver_id = driver.driver_id"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_name",
          "select driver.driver_name , ( select count ( * ) from race where race.driver_id = driver.driver_id ) as race_count from driver",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_id",
          "select driver.driver_name , ( select count ( distinct race.driver_id ) from race where race.driver_id = driver.driver_id ) as race_count from driver",
          "select driver.driver_name as driver_name , ( select count ( * ) from race where race.driver_id = driver.driver_id ) as race_count from driver",
          "select driver.driver_name as driver_name , ( select count ( * ) from race where driver_id = driver.driver_id ) as race_count from driver",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_id"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_id",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_id",
          "select count ( * ) , driver.driver_name from race join driver on race.driver_id = driver.driver_id group by driver.driver_id",
          "select count ( * ) , driver.driver_name from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by race.driver_id",
          "select count ( * ) , driver.driver_name from driver join race on driver.driver_id = race.driver_id group by driver.driver_id"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( race.driver_id ) = ( select max ( total_races ) from ( select count ( driver_id ) as total_races from race group by driver_id ) )",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( race.driver_id ) = ( select max ( total_races ) from ( select count ( * ) as total_races from race group by driver_id ) )",
          "select age from ( select driver.age , count ( race.driver_id ) as num_races from driver join race on driver.driver_id = race.driver_id group by driver.driver_id ) where num_races = ( select max ( num_races ) from ( select count ( driver_id ) as num_races from race group by driver_id ) )"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select age from ( select driver.age , count ( race.driver_id ) as num_races from driver join race on driver.driver_id = race.driver_id group by driver.driver_id ) where num_races = ( select max ( num_races ) from ( select count ( driver_id ) as num_races from race group by driver_id ) )",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( race.driver_id ) = ( select max ( total_races ) from ( select count ( * ) as total_races from race group by driver_id ) )"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "car_road_race",
      "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
      "infer_predictions": [
        [
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where ( driver.age >= 26 )",
          "select distinct race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26 and race.race_name = race.race_name",
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26 and race.driver_id != race.driver_id"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "car_road_race",
      "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
      "infer_predictions": [
        [
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where ( driver.age >= 26 )",
          "select race.race_name from driver join race on driver.driver_id = race.driver_id where driver.age >= 26",
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26 and race.driver_id != driver.driver_id",
          "select race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
      "infer_predictions": [
        [
          "select driver_name from driver where constructor != 'Bugatti'",
          "select driver_name from driver where constructor != 'Bugatti'",
          "select driver_name from driver where constructor != 'Buggatti'"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
      "infer_predictions": [
        [
          "select driver_name from driver where constructor != 'Bugatti'",
          "select driver_name from driver where constructor != 'Bogati'",
          "select driver_name from driver where constructor != 'Buggatti'",
          "select driver_name from driver where constructor != 'Bogatini'",
          "select driver_name from driver where constructor != 'Bogattini'",
          "select driver_name from driver where constructor != 'Bogatti'",
          "select driver_name from driver where constructor != 'Bugati'"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
      "infer_predictions": [
        [
          "select constructor , count ( * ) from driver group by constructor",
          "select distinct constructor , count ( * ) from driver group by constructor",
          "select count ( * ) , constructor from driver group by constructor"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
      "infer_predictions": [
        [
          "select constructor , count ( * ) from driver group by constructor",
          "select count ( * ) , constructor from driver group by constructor",
          "select constructor , count ( * ) from driver group by constructor",
          "select constructor , count ( * ) from driver group by constructor != driver.constructor"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine having count ( engine ) = ( select max ( count ) from ( select count ( engine ) as count from driver group by engine ) )",
          "select engine from driver group by engine having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( cnt ) from ( select count ( engine ) as cnt from driver group by engine ) )",
          "select engine from driver group by engine having count ( * ) = ( select max ( count ) from ( select count ( engine ) as count from driver group by engine ) )",
          "select engine from driver group by engine having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( counts ) from ( select count ( engine ) as counts from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( count_type ) from ( select count ( engine ) as count_type from driver group by engine ) )"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select engine from driver group by engine having count ( engine ) = ( select max ( cnt ) from ( select count ( engine ) as cnt from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( count ) from ( select count ( engine ) as count from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( drivercount ) from ( select count ( engine ) as drivercount from driver group by engine ) )",
          "select engine from driver group by engine having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( enginecount ) from ( select count ( engine ) as enginecount from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( count_type ) from ( select count ( engine ) as count_type from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( engine_count ) from ( select count ( engine ) as engine_count from driver group by engine ) )",
          "select engine from driver group by engine having count ( engine ) = ( select max ( count_engine ) from ( select count ( engine ) as count_engine from driver group by engine ) )"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine type from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( distinct engine ) >= 2",
          "select engine from driver group by engine having count ( distinct driver.engine ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine type from driver group by engine having count ( * ) >= 2",
          "select engine from ( select engine from driver group by engine having count ( * ) >= 2 )",
          "select engine from driver group by engine having count ( distinct engine ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
      "infer_predictions": [
        [
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select distinct driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
      "infer_predictions": [
        [
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select distinct driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "Select driver_name from driver where driver_id not in ( select driver_id from race )"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
      "infer_predictions": [
        [
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from ( select constructor from driver where age < 20 intersect select constructor from driver where age > 30 )",
          "select constructor from driver where age < 20 intersect select constructor from driver where age >30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30 != 30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30.",
          "select constructor from driver where age <= 20 intersect select constructor from driver where age > 30"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
      "infer_predictions": [
        [
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from ( select constructor from driver where age < 20 intersect select constructor from driver where age > 30 )",
          "select constructor from driver where age < 20 intersect select constructor from driver where age >30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age <= 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30 != 30"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select winning_team from race group by winning_team having count ( * ) > 1",
          "select winning_team from ( select winning_team , count ( * ) as num_wins from race group by winning_team ) where num_wins > 1",
          "select winning_team from ( select winning_team , count ( * ) as win_count from race group by winning_team ) where win_count > 1",
          "select winning_team from ( select winning_team , count ( * ) as num_wins from race group by winning_team ) where num_wins > 1",
          "select winning_team from race group by winning_team having count ( * ) > 1",
          "select winning_team from ( select winning_team , count ( * ) as win_count from race group by winning_team ) where win_count > 1"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select winning_team from race group by winning_team having count ( * ) > 1",
          "select winning_team from ( select winning_team , count ( * ) as num_races from race group by winning_team ) where num_races > 1",
          "select winning_team from ( select winning_team , count ( * ) as num_races from race group by winning_team ) where num_races > 1"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position in ( 'James Hinchcliffe' , 'Carl Skerlong' ) group by d.driver_id having count ( distinct r.pole_position ) = 2",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select d.driver_name from driver d inner join race ra on d.driver_id = ra.driver_id where ra.pole_position in ( 'James Hinchcliffe' , 'Carl Skerlong' ) group by d.driver_id having count ( distinct ra.pole_position ) = 2",
          "select distinct d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position in ( 'James Hinchcliffe' , 'Carl Skerlong' ) group by d.driver_id having count ( distinct r.pole_position ) = 2"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select d.driver_name from driver d where exists ( select 1 from race r where r.driver_id = d.driver_id and r.pole_position = 'James Hinchcliffe' ) and exists ( select 1 from race r where r.driver_id = d.driver_id and r.pole_position = 'Carl Skerlong' )",
          "select d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position in ( 'James Hinchcliffe' , 'Carl Skerlong' ) group by d.driver_id having count ( distinct r.pole_position ) = 2",
          "select distinct d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position in ( 'James Hinchcliffe' , 'Carl Skerlong' ) group by d.driver_id having count ( distinct r.pole_position ) = 2",
          "select driver_name from driver where driver_id in ( select driver_id from race where pole_position = 'James Hinchcliffe' ) and driver_id in ( select driver_id from race where pole_position = 'Carl Skerlong' )",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'Carl Skerlong'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select distinct driver_name from driver where driver_id not in ( select driver_id from race where pole_position = 'James Hinchcliffe' )",
          "select distinct d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position != 'James Hinchcliffe' and d.driver_id not in ( select driver_id from race where pole_position = 'James Hinchcliffe' )",
          "select distinct d.driver_name from driver d inner join race r on d.driver_id = r.driver_id where r.pole_position != 'James Hinchcliffe' and d.driver_id not in ( select 1 from race where pole_position = 'James Hinchcliffe' )",
          "select distinct d.driver_name from driver d where not exists ( select 1 from race r where r.pole_position = 'James Hinchcliffe' and r.driver_id = d.driver_id )",
          "select driver_name from driver where driver_id not in ( select driver_id from race where pole_position = 'James Hinchcliffe' )",
          "select distinct d.driver_name from driver d where not exists ( select 1 from race r1 where r1.pole_position = 'James Hinchcliffe' and r1.driver_id = d.driver_id )",
          "select distinct d.driver_name from driver d where d.driver_id not in ( select r.driver_id from race r where r.pole_position = 'James Hinchcliffe' )"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select driver_name from driver where driver_id not in ( select driver_id from race where pole_position = 'James Hinchcliffe' )",
          "select driver_name from driver where driver_id not in ( select race.driver_id from race where race.pole_position = 'James Hinchcliffe' )",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position != 'James Hinchcliffe'",
          "select driver_name from driver where driver_id not in ( select race.driver_id from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' )",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position != 'James Hinchcliffe'",
          "select driver_name from driver where driver_id not in ( select driver_id from race where pole_position = '1' and driver_name = 'James Hinchcliffe' )",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "country_language",
      "gold": "SELECT count(*) FROM languages",
      "infer_predictions": [
        [
          "select count ( * ) from languages"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "country_language",
      "gold": "SELECT count(*) FROM languages",
      "infer_predictions": [
        [
          "select count ( * ) from languages"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages ORDER BY name ASC",
      "infer_predictions": [
        [
          "select name from languages order by name asc"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages ORDER BY name ASC",
      "infer_predictions": [
        [
          "select name from languages order by name asc"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
      "infer_predictions": [
        [
          "select name from languages where name like '%ish%'",
          "select name from languages where instr ( name , 'ish' ) > 0",
          "select name from languages where name like '%ish%' and name is not null",
          "select name from languages where name like '%ish%'"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
      "infer_predictions": [
        [
          "select name from languages where name like '%ish%'",
          "select name from languages where instr ( name , 'ish' ) > 0",
          "select l.name from languages l where l.name like '%ish%'"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by overall_score desc",
          "select name from countries order by overall_score desc , name desc",
          "select name from countries group by overall_score order by overall_score desc"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by overall_score desc",
          "select name from countries where overall_score = '100' order by overall_score desc",
          "select name from countries where overall_score = 0 order by overall_score desc",
          "select name from countries where overall_score = '0' order by overall_score desc"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "country_language",
      "gold": "SELECT avg(justice_score) FROM countries",
      "infer_predictions": [
        [
          "select avg ( justice_score ) from countries",
          "select avg ( justice_score ) from countries Where justice_score = ( select avg ( justice_score ) from countries )"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "country_language",
      "gold": "SELECT avg(justice_score) FROM countries",
      "infer_predictions": [
        [
          "select avg ( justice_score ) from countries",
          "select avg ( justice_score ) from countries",
          "select avg ( justice_score ) from countries",
          "select avg ( justice_score ) from countries"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "country_language",
      "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
      "infer_predictions": [
        [
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'",
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "country_language",
      "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
      "infer_predictions": [
        [
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'",
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Northern Norway'"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "country_language",
      "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
      "infer_predictions": [
        [
          "select count ( distinct language_id ) from official_languages"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "country_language",
      "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
      "infer_predictions": [
        [
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY education_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by education_score desc",
          "select name from countries where education_score in ( select education_score from countries order by education_score desc )",
          "select name from countries order by education_score desc , name desc",
          "select name from countries order by education_score desc , name asc",
          "select name from countries where education_score < 0 order by education_score desc",
          "select name from countries where education_score < 100"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY education_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by education_score desc",
          "select name from countries where education_score < 0 order by education_score desc",
          "select name from countries where education_score = 'F' order by education_score desc",
          "select name from countries where education_score = '0' order by education_score desc"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from countries where politics_score = ( select max ( politics_score ) from countries )",
          "select c.name from countries c where c.politics_score = ( select max ( politics_score ) from countries )",
          "select ch.name from countries ch where ch.politics_score = ( select max ( politics_score ) from countries )",
          "select name from countries order by politics_score desc limit 1"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from countries where politics_score = ( select max ( politics_score ) from countries )",
          "select c.name from countries c where c.politics_score = ( select max ( politics_score ) from countries )",
          "select name from countries order by politics_score desc limit 1"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "country_language",
      "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
      "infer_predictions": [
        [
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id",
          "select countries.name , official_languages.language_id from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages. language_id = languages.id"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "country_language",
      "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
      "infer_predictions": [
        [
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages. language_id = languages.id"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "country_language",
      "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
      "infer_predictions": [
        [
          "select languages.name , count ( distinct countries.id ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( distinct countries.id ) from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( distinct countries.id ) from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.name"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "country_language",
      "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
      "infer_predictions": [
        [
          "select languages.name , count ( distinct countries.id ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( distinct countries.id ) from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.name",
          "select languages.name , count ( * ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( distinct countries.id ) from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.language_id"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select l.name from languages l where l.id in ( select ol.language_id from official_languages ol group by ol.language_id having count ( distinct ol.country_id ) = ( select max ( cnt ) from ( select count ( distinct ol.country_id ) as cnt from official_languages ol group by ol.language_id ) ) )",
          "select l.name from languages l where l.id in ( select ol.language_id from official_languages ol group by ol.language_id having count ( ol.country_id ) = ( select max ( cnt ) from ( select count ( country_id ) as cnt from official_languages group by language_id ) ) )",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select l.name from languages l where l.id in ( select ol.language_id from official_languages ol group by ol.language_id having count ( distinct ol.country_id ) = ( select max ( cnt ) from ( select count ( distinct country_id ) as cnt from official_languages group by language_id ) ) )",
          "select l.name from languages l join official_languages ol on l.id = ol.language_id join countries c on ol.country_id = c.id group by l.id order by count ( * ) desc limit 1",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 1",
          "select l.name from languages l inner join official_languages ol on l.id = ol.language_id inner join countries c on ol.country_id = c.id group by l.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.id having count ( official_languages.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by language_id ) tmp )",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id having count ( official_languages.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by language_id ) tmp )"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct official_languages.country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( * ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( * ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( distinct official_languages.country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct countries.id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( distinct countries.id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( distinct country_id ) >= 2"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct official_languages.country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id having count ( distinct countries.id ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.id having count ( distinct countries.id ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.id having count ( distinct official_languages.country_id ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.id having count ( distinct country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name having count ( distinct country_id ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( distinct country_id ) >= 2"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "country_language",
      "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id = 'English' )",
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id = 'english' )",
          "select avg ( overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where languages.name = 'English'",
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id = countries.id and name = 'English' )",
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id in ( select language_id from languages where name = 'English' ) )",
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id in ( select id from languages where name = 'English' ) )"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "country_language",
      "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where languages.name = 'english'",
          "select avg ( countries.overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where languages.name = 'english'",
          "select avg ( countries.overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.name = 'English'",
          "select avg ( overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.name = 'English'",
          "select avg ( overall_score ) from countries where id in ( select country_id from official_languages where language_id = 'english' )",
          "select avg ( countries.overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.name = 'english'",
          "select avg ( countries.overall_score ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.name = 'England'"
        ]
      ]
    },
    {
      "id": 1386,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select official_languages.language_id from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.id order by count ( * ) desc limit 3",
          "select official_languages.language_id from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.name order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.name order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id order by avg ( countries.overall_score ) desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by avg ( countries.overall_score ) desc",
          "select l.name from languages l join official_languages ol on l.id = ol.language_id join countries c on ol.country_id = c.id group by l.id order by avg ( c.overall_score ) desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id order by countries.overall_score desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id order by avg ( overall_score ) desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by avg ( overall_score ) desc"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id order by countries.overall_score desc",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id order by countries.overall_score desc",
          "select l.name from languages l join official_languages ol on l.id = ol.language_id join countries c on ol.country_id = c.id group by l.id order by avg ( c.overall_score ) desc",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id order by countries.overall_score desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by avg ( countries.overall_score ) desc"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "country_language",
      "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by official_languages.country_id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by countries.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "country_language",
      "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1",
          "select c.name from countries c where exists ( select null from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( ol.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by country_id ) t ) )",
          "select c.name from countries c where exists ( select 1 from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from official_languages group by country_id ) t ) )",
          "select c.name from countries c where exists ( select null from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( ol.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by country_id ) ol ) )",
          "select c.name from countries c where exists ( select null from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( ol.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by country_id ) ) )",
          "select c.name from countries c where exists ( select 1 from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( ol.language_id ) = ( select max ( cnt ) from ( select count ( language_id ) as cnt from official_languages group by country_id ) t ) )",
          "select c.name from countries c where exists ( select 1 from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from official_languages group by country_id ) ) )",
          "select c.name from countries c where exists ( select 1 from official_languages ol where ol.country_id = c.id group by ol.country_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from official_languages group by country_id ) tmp ) )"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id where official_languages.language_id = languages.id )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where Id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id where languages.id = official_languages.language_id )"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id where official_languages.language_id = languages.id )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select languages.id from official_languages join countries on official_languages.country_id = countries.id where languages.id = official_languages.language_id )",
          "select name from languages where Id not in ( select language_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from countries where id not in ( select country_id from official_languages )",
          "select name from countries where id not in ( select country_id from official_languages )",
          "select name from countries where Id not in ( select country_id from official_languages )",
          "select name from countries where id not in ( select country_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from countries where id not in ( select country_id from official_languages )",
          "select name from countries where Id not in ( select country_id from official_languages )",
          "select name from countries where id not in ( select country_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
      "infer_predictions": [
        [
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) intersect select language_id from official_languages where country_id in ( select id from countries where overall_score < 90 ) )",
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) and country_id in ( select id from countries where overall_score < 90 ) )",
          "select distinct l.name from languages l join official_languages ol on l.id = ol.language_id join countries c on ol.country_id = c.id where c.overall_score > 95 and c.overall_score < 90",
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) intersect select language_id from official_languages where country_id in ( select country_id from countries where overall_score < 90 ) )"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
      "infer_predictions": [
        [
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) ) and id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score < 90 ) )",
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) ) and name in ( select language_id from official_languages where country_id in ( select id from countries where overall_score < 90 ) )",
          "select name from languages where id in ( select language_id from official_languages where country_id in ( select id from countries where overall_score > 95 ) ) and name in ( select id from official_languages where country_id in ( select id from countries where overall_score < 90 ) )"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "real_estate_rentals",
      "gold": "SELECT country ,  town_city FROM Addresses;",
      "infer_predictions": [
        [
          "select country , town_city from addresses",
          "select distinct country , town_city from addresses",
          "select country , town_city from addresses",
          "select country , town_city from addresses"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "real_estate_rentals",
      "gold": "SELECT country ,  town_city FROM Addresses;",
      "infer_predictions": [
        [
          "select country , town_city from addresses",
          "select county_state_province , town_city from addresses",
          "select distinct country , town_city from addresses",
          "select country , town_city from addresses"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "real_estate_rentals",
      "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
      "infer_predictions": [
        [
          "select distinct addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id",
          "select distinct addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id group by addresses.county_state_province",
          "select distinct addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select distinct addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id group by properties.property_address_id"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "real_estate_rentals",
      "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
      "infer_predictions": [
        [
          "select distinct county_state_province from addresses",
          "select distinct addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select county_state_province from addresses",
          "select distinct addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "real_estate_rentals",
      "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
      "infer_predictions": [
        [
          "select feature_description from features where feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'roofed'",
          "select feature_description from features where feature_name = 'roof'",
          "select feature_description from features where feature_name = 'skyscraper'",
          "select feature_description from features where feature_name = 'roof'",
          "select feature_description from features where feature_name = 'rooftop'"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "real_estate_rentals",
      "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
      "infer_predictions": [
        [
          "select feature_description from features where feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'rooftop' or feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'rooftop' or feature_description = 'null'",
          "select feature_description from features where feature_name = 'rooftop' != 'feature_description'"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id where property_features.property_id = ( select property_id from property_features group by feature_id order by count ( * ) desc limit 1 )",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id where property_features.property_id = ( select property_id from property_features group by property_id order by count ( * ) desc limit 1 )",
          "select feature_name , feature_description from features where feature_id in ( select feature_id from property_features group by feature_id order by count ( * ) desc limit 1 )"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select f.feature_name , f.feature_description from features f , property_features pf where f.feature_id = pf.feature_id group by f.feature_id having count ( pf.property_id ) = ( select max ( cnt ) from ( select count ( property_id ) as cnt from property_features group by feature_id ) tmp )",
          "select f.feature_name , f.feature_description from features f , property_features pf where f.feature_id = pf.feature_id group by f.feature_id having count ( pf.property_id ) = ( select max ( cnt ) from ( select count ( feature_id ) as cnt from property_features group by feature_id ) tmp )",
          "select f.feature_name , f.feature_description from features f , property_features pf where f.feature_id = pf.feature_id group by f.feature_id having count ( pf.property_id ) = ( select max ( cnt ) from ( select count ( property_id ) as cnt from property_features group by feature_id ) )"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "real_estate_rentals",
      "gold": "SELECT min(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select min ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "real_estate_rentals",
      "gold": "SELECT min(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select min ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties",
          "select count ( * ) from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties group by garage_yn having count ( * ) = 1",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn = 1",
          "select count ( * ) from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties group by parking_lots having count ( * ) = 1",
          "select count ( * ) from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties where garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn not in ( select garage_yn from properties )",
          "select count ( * ) from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties where garage_yn not in ( select garage_yn from properties )",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn = 1"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties",
          "select count ( * ) from ( select parking_lots from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties where garage_yn = 1 )",
          "select count ( * ) from ( select parking_lots from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from ( select count ( * ) as count from properties group by parking_lots ) )",
          "select count ( * ) from properties group by parking_lots having count ( * ) = 1 union select count ( * ) from properties group by garage_yn having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
      "infer_predictions": [
        [
          "select distinct u.age_category_code from users u join ref_user_categories rc on u.user_category_code = rc.user_category_code where rc.user_category_description like '%Mother%'"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1412,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join properties on users.user_id = properties.owner_user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join properties on users.user_id = properties.owner_user_id group by properties.owner_user_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.property_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.property_id group by user_property_history.user_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1415,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
      "infer_predictions": [
        [
          "select avg ( properties.room_count ) from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'garden'",
          "select avg ( properties.room_count ) from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'Garden'",
          "select avg ( room_count ) from properties where property_id in ( select property_id from property_features where feature_id = 'garden' )"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
      "infer_predictions": [
        [
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where features.feature_name = 'swimming pool'",
          "select distinct addresses.town_city from addresses inner join properties on addresses.address_id = properties.property_address_id inner join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'swimming pool'",
          "select distinct addresses.town_city from addresses inner join properties on addresses.address_id = properties.property_address_id inner join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'swimming_pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id in ( select feature_id from features where feature_name = 'swimming pool' )",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where features.feature_name = 'Swimming pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'swimming pool'"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
      "infer_predictions": [
        [
          "select distinct addresses.town_city from addresses inner join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'swimming_pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'swimming_pool'",
          "select distinct addresses.town_city from addresses inner join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses inner join properties on addresses.address_id = properties.property_address_id where properties.property_type_code = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'swimming_pool'"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "real_estate_rentals",
      "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
      "infer_predictions": [
        [
          "select property_id , price_min from properties where vendor_requested_price = ( select min ( vendor_requested_price ) from properties )",
          "select property_id , vendor_requested_price from properties where vendor_requested_price = ( select min ( vendor_requested_price ) from properties )",
          "select property_id , vendor_requested_price from properties order by vendor_requested_price asc limit 1",
          "select properties.property_id , properties.vendor_requested_price from properties where properties.vendor_requested_price = ( select min ( vendor_requested_price ) from properties )",
          "select property_id , price_max from properties where vendor_requested_price = ( select min ( vendor_requested_price ) from properties )",
          "select property_id , price_min from properties order by vendor_requested_price asc limit 1"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "real_estate_rentals",
      "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
      "infer_predictions": [
        [
          "select property_id , vendor_requested_price from properties where vendor_requested_price = ( select min ( vendor_requested_price ) from properties )",
          "select property_id , vendor_requested_price from properties order by vendor_requested_price asc limit 1",
          "select properties.property_id , properties.vendor_requested_price from properties order by properties.vendor_requested_price asc limit 1",
          "select properties.property_id , properties.vendor_requested_price from properties order by vendor_requested_price asc limit 1",
          "select properties.property_id , properties.vendor_requested_price from properties where properties.vendor_requested_price = ( select min ( vendor_requested_price ) from properties )"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) from ( select room_count from properties )",
          "select avg ( room_count ) from properties Join rooms on properties.property_id = rooms.property_id"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) as average_room_count from properties"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
      "infer_predictions": [
        [
          "select count ( distinct room_size ) from rooms"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
      "infer_predictions": [
        [
          "select count ( distinct room_size ) from rooms"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
      "infer_predictions": [
        [
          "select user_id , search_string from user_searches group by user_id having count ( * ) >= 2",
          "select user_id , search_string from user_searches group by user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
      "infer_predictions": [
        [
          "select user_id , search_seq from user_searches group by user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "real_estate_rentals",
      "gold": "SELECT max(search_datetime) FROM User_Searches;",
      "infer_predictions": [
        [
          "select max ( search_datetime ) from user_searches",
          "select search_datetime from user_searches order by search_datetime desc limit 1"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "real_estate_rentals",
      "gold": "SELECT max(search_datetime) FROM User_Searches;",
      "infer_predictions": [
        [
          "select max ( search_datetime ) from user_searches"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
      "infer_predictions": [
        [
          "select search_datetime , search_string from user_searches order by search_string desc"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
      "infer_predictions": [
        [
          "select search_string , search_datetime from user_searches order by search_string desc"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
      "infer_predictions": [
        [
          "select distinct zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2 )",
          "select distinct addresses.zip_postcode from addresses where addresses.address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2 )",
          "select zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select property_address_id from properties group by owner_user_id having count ( property_id ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select property_address_id from properties group by property_address_id having count ( owner_user_id ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.property_address_id having count ( * ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.property_id having count ( * ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select owner_user_id from properties group by owner_user_id having count ( * ) <= 2 )"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
      "infer_predictions": [
        [
          "select distinct zip_postcode from addresses where address_id not in ( select property_address_id from properties group by property_address_id having count ( property_id ) <= 2 )",
          "select distinct addresses.zip_postcode from addresses where addresses.address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select property_address_id from properties group by property_address_id having count ( property_id ) < 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2 )",
          "select distinct zip_postcode from addresses where address_id not in ( select property_address_id from properties group by property_address_id having count ( property_id ) <= 2 )",
          "select distinct addresses.zip_postcode from addresses where addresses.address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) < 2 )"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_category_code , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1 union select users.user_category_code , users.user_id from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1 union select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1 union select users.user_category_code , users.user_id from user_searches join users on user_searches.user_id = users.user_id",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1 union select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1",
          "select user_id , user_category_code from users where user_id not in ( select user_id from user_searches group by user_id having count ( * ) > 1 )",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id where user_searches.search_seq = 1 group by users.user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id where user_searches.search_seq = 1",
          "select user_id , user_category_code from users group by user_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
      "infer_predictions": [
        [
          "select age_category_code from users where user_id = ( select user_id from user_searches order by search_datetime asc limit 1 )",
          "select users.age_category_code from user_searches join users on user_searches.user_id = users.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from user_searches join users on user_searches.user_id = users.user_id order by user_searches.search_seq asc limit 1",
          "select age_category_code from users where user_id in ( select user_id from user_searches order by search_datetime asc limit 1 )",
          "select age_category_code from users where user_id = ( select user_id from user_searches order by search_seq asc limit 1 )",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_seq asc limit 1",
          "select age_category_code from users inner join user_searches on users.user_id = user_searches.user_id where user_searches.search_seq = ( select search_seq from user_searches order by search_seq asc limit 1 )"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
      "infer_predictions": [
        [
          "select users.age_category_code from user_searches join users on user_searches.user_id = users.user_id order by user_searches.search_datetime asc limit 1",
          "select age_category_code from users where user_id = ( select min ( search_datetime ) from user_searches )",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1",
          "select age_category_code from users inner join user_searches on users.user_id = user_searches.user_id where user_searches.search_datetime = ( select min ( search_datetime ) from user_searches )"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "real_estate_rentals",
      "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
      "infer_predictions": [
        [
          "select login_name from users where age_category_code = 'Senior' order by first_name asc",
          "select login_name from users where age_category_code = 'Senior Citizen' order by first_name asc",
          "select login_name from users where age_category_code = 'Senior Citizens' order by first_name asc",
          "select login_name from users where age_category_code = 'senior' order by first_name asc",
          "select login_name from users where age_category_code = 'senior citizen' order by first_name asc",
          "select login_name from users where age_category_code = 'Seniors' order by first_name asc",
          "select login_name from users where age_category_code = 'Senior citizen' order by first_name asc"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "real_estate_rentals",
      "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
      "infer_predictions": [
        [
          "select login_name from users where age_category_code = 'Senior' order by first_name asc",
          "select login_name from users where age_category_code = 'Senior Citizen' order by first_name asc",
          "select login_name from users where age_category_code = 'Senior Citizens' order by first_name asc",
          "select login_name from users where age_category_code = 'senior' order by first_name asc",
          "select login_name from users where age_category_code = 'Seniors' order by first_name asc",
          "select login_name from users where age_category_code = 'senior citizen' order by first_name asc",
          "select login_name from users where age_category_code = 'Golden Senior' order by first_name asc"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 1",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Yes'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = '1'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'yes'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where is_buyer = '1'"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 1",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = '1'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Yes'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = '1'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 1",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'yes'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "real_estate_rentals",
      "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
      "infer_predictions": [
        [
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione' or login_name = '%user_name%'"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "real_estate_rentals",
      "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
      "infer_predictions": [
        [
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'rational'",
          "Select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_Name = 'ratione'"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
      "infer_predictions": [
        [
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = '1'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , first_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name and login_name from users where is_seller = 1"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
      "infer_predictions": [
        [
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'Y'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'Yes'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'yes'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = '1'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'Seller'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'No'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'S'"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1445,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
      "infer_predictions": [
        [
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'senior'"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
      "infer_predictions": [
        [
          "select count ( distinct properties.property_id ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( distinct property_features.feature_id ) >= 2",
          "select count ( distinct property_id ) from property_features group by property_id having count ( distinct feature_id ) >= 2",
          "select count ( distinct properties.property_id ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( distinct property_features.feature_id ) >= 2",
          "select count ( distinct property_id ) from property_features group by property_id having count ( distinct feature_id ) >= 2",
          "select count ( distinct property_id ) from property_features group by property_id having count ( * ) >= 2",
          "select count ( distinct properties.property_id ) from property_features join properties on property_features.property_id = properties.property_id group by properties.property_id having count ( distinct property_features.feature_id ) >= 2",
          "select count ( distinct properties.property_id ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( distinct feature_id ) >= 2"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
      "infer_predictions": [
        [
          "select count ( distinct properties.property_id ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( distinct property_features.feature_id ) >= 2",
          "select count ( distinct properties.property_id ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( distinct property_features.feature_id ) >= 2",
          "select count ( distinct property_id ) from property_features where property_id in ( select property_id from property_features group by property_id having count ( feature_id ) >= 2 )",
          "select count ( distinct property_id ) from property_features where property_id in ( select property_id from property_features group by property_id having count ( distinct feature_id ) >= 2 )",
          "select count ( distinct property_id ) from property_features group by property_id having count ( distinct feature_id ) >= 2",
          "select count ( distinct property_id ) from property_features group by property_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
      "infer_predictions": [
        [
          "select properties.property_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select properties.property_id , count ( * ) from property_photos join properties on property_photos.property_id = properties.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select properties.property_id , count ( property_photos.photo_seq ) as number_of_photos from properties left join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by properties.property_id",
          "select properties.property_id , sum ( property_photos.photo_seq ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select properties.property_name , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
      "infer_predictions": [
        [
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id order by count ( * ) desc limit 1",
          "select count ( * ) , properties.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by Properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , property_photos.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by property_photos.property_id"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
      "infer_predictions": [
        [
          "select properties.owner_user_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select properties.owner_user_id , count ( property_photos.photo_seq ) as total_photos from properties left join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select properties.owner_user_id , count ( property_photos.photo_seq ) as photos_count from properties left join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select properties.owner_user_id , count ( property_photos.photo_seq ) as num_photos from properties left join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select properties.owner_user_id , count ( property_photos.photo_seq ) as number_of_photos from properties left join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
      "infer_predictions": [
        [
          "select properties.owner_user_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select count ( * ) , properties.owner_user_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "real_estate_rentals",
      "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
      "infer_predictions": [
        [
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mother' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( properties.price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mother' or users.age_category_code = 'Student'",
          "select sum ( properties.price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mom' or users.age_category_code = 'Student'",
          "select sum ( properties.price_max ) from users join properties on users.user_id = properties.owner_user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( properties.price_max ) from users join properties on users.user_id = properties.owner_user_id where users.age_category_code = 'Single Mother' or users.age_category_code = 'Student'",
          "select sum ( properties.price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mom' or users.age_category_code = 'Student'"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "real_estate_rentals",
      "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
      "infer_predictions": [
        [
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mother' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'single_mother' or users.age_category_code = 'student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single Mom' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.user_category_code = 'Single Mother' or users.user_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.user_category_code = 'single_mother' or users.user_category_code = 'student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'SingleMother' or users.age_category_code = 'Student'"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
      "infer_predictions": [
        [
          "select user_property_history.datestamp , properties.property_name from user_property_history join properties on user_property_history.property_id = properties.property_id order by user_property_history.datestamp asc"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
      "infer_predictions": [
        [
          "select user_property_history.datestamp , properties.property_name from user_property_history join properties on user_property_history.property_id = properties.property_id order by user_property_history.datestamp asc"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select property_type_description , property_type_code from ref_property_types where property_type_code = ( select property_type_code from properties group by property_type_code order by count ( * ) desc limit 1 )",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( *) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_Code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select property_type_description , property_type_code from ref_property_types where exists ( select 1 from properties where properties.property_type_code = ref_property_types.property_type_code group by property_type_code order by count ( * ) desc limit 1 )"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "real_estate_rentals",
      "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
      "infer_predictions": [
        [
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "real_estate_rentals",
      "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
      "infer_predictions": [
        [
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = '60'",
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = 'over 60'"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "real_estate_rentals",
      "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
      "infer_predictions": [
        [
          "select room_size , count ( * ) from rooms group by room_size",
          "select room_type_code , count ( * ) from rooms group by room_type_code",
          "select room_size , count ( * ) from rooms group by room_type_code"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "real_estate_rentals",
      "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
      "infer_predictions": [
        [
          "select room_size , count ( * ) from rooms group by room_size",
          "select room_type_code , count ( * ) from rooms group by room_type_code",
          "select room_size , count ( * ) from rooms group by room_type_code"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
      "infer_predictions": [
        [
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'",
          "select addresses.country from addresses join users on addresses.address_id = users.user_address_id where users.first_name = 'Robbie'",
          "select addresses. country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'",
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users. first_name = 'Robbie'",
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robby'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
      "infer_predictions": [
        [
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'",
          "select addresses.country from addresses join users on addresses.address_id = users.user_address_id where users.first_name = 'Robbie'",
          "select addresses. country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
      "infer_predictions": [
        [
          "select first_name , middle_name , last_name from users where user_id in ( select owner_user_id from properties )",
          "select first_name , middle_name , last_name from users inner join properties on users.user_id = properties.owner_user_id where properties.property_id in ( select property_id from users )",
          "select first_name , middle_name , last_name from users inner join properties on users.user_id = properties.owner_user_id where properties.property_id in ( select property_id from properties )",
          "select first_name , middle_name , last_name from users inner join properties on users.user_id = properties.owner_user_id where properties.property_id in ( select property_id from user_property_history )",
          "select first_name , middle_name , last_name from users inner join properties on users.user_id = properties.owner_user_id where properties.property_address_id in ( select property_address_id from properties )",
          "select first_name , middle_name , last_name from users where user_id in ( select owner_user_id from properties )",
          "select first_name , middle_name , last_name from users where user_id in ( select owner_user_id from properties )"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1466,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
      "infer_predictions": [
        [
          "select search_string from user_searches where user_id not in ( select user_id from properties )",
          "select search_string from user_searches where user_id not in ( select owner_user_id from properties )",
          "select search_string from user_searches where user_id not in ( select users.user_id from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.property_id )",
          "select search_string from user_searches where user_id not in ( select users.user_id from users join user_property_history on users.user_id = user_property_history.user_id )"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
      "infer_predictions": [
        [
          "select search_string from user_searches where user_id not in ( select owner_user_id from properties )",
          "select search_string from user_searches where user_id not in ( select user_id from properties )",
          "select search_string from user_searches where user_id not in ( select users.user_id from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.property_id )"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
      "infer_predictions": [
        [
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 and count ( * ) <= 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 intersect select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 except select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 except select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 except select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) < 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 intersect select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) < 2",
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 and count ( * ) <= 2"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
      "infer_predictions": [
        [
          "select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2 intersect select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) >= 2",
          "select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) < 2 intersect select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "bike_racing",
      "gold": "SELECT count(*) FROM bike WHERE weight  >  780",
      "infer_predictions": [
        [
          "select count ( * ) from bike where weight > 780",
          "select count ( * ) from bike where weight > 780"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "bike_racing",
      "gold": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
      "infer_predictions": [
        [
          "select product_name , weight from bike order by price asc",
          "select product_Name , weight from bike order by price asc",
          "Select product_name , weight from bike order by price asc",
          "select product_name , weight from bike order by price asc"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "bike_racing",
      "gold": "SELECT heat ,  name ,  nation FROM cyclist",
      "infer_predictions": [
        [
          "select heat , name , nation from cyclist",
          "select heat , name , nation from ( select name , heat , nation from cyclist ) as _",
          "select heat , name , nation from ( select heat , name , nation from cyclist ) as _",
          "select heat , name , nation from ( select name , heat , nation from cyclist ) as '*'",
          "select heat , name , nation from ( select heat , name , nation from cyclist ) as '*'",
          "select heat , name , nation from ( select name , heat , nation from cyclist ) as 'name'",
          "select heat , name , nation from ( select name , heat , nation from cyclist ) as name"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "bike_racing",
      "gold": "SELECT max(weight) ,  min(weight) FROM bike",
      "infer_predictions": [
        [
          "select max ( weight ) , min ( weight ) from bike",
          "select max ( weight ) as maxweight , min ( weight ) as minweight from bike",
          "select max ( weight ) as max_weight , min ( weight ) as min_weight from bike",
          "select max ( weight ) as maxweight , min ( weight ) as minweight from bike",
          "select max ( weight ) as maxweight , min ( weight ) as minweight from bike",
          "select max ( weight ) as maxweight , min ( weight ) as minweight from bike",
          "select max ( weight ) as maxweigh , min ( weight ) as minweight from bike"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "bike_racing",
      "gold": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
      "infer_predictions": [
        [
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC'"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "bike_racing",
      "gold": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
      "infer_predictions": [
        [
          "select name , result from cyclist where nation != 'Russia'",
          "select name , result from cyclist where nation != 'Russia' != 'USA'",
          "select name , result from cyclist where nation != 'Russia'",
          "select name , result from cyclist where nation != 'Russia' != 'Russia'"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
      "infer_predictions": [
        [
          "select distinct bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year > 2015",
          "select distinct bike.id , bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id where cyclists_own_bikes.purchase_year > 2015"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "bike_racing",
      "gold": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
      "infer_predictions": [
        [
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id group by bike.id having count ( * ) >= 4",
          "select id , product_name from bike where id in ( select bike_id from cyclists_own_bikes group by bike_id having count ( distinct cyclist_id ) >= 4 )",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2009 group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2010 group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2007 group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2008 group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2004 group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year = 2009 group by bike.id having count ( distinct cyclist_id ) >= 4"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "bike_racing",
      "gold": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select cyclist.id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclists_own_bikes.cyclist_id order by count ( * ) desc limit 1",
          "select cyclist.id , cyclist.name from cyclist join cyclists_own_bikes on cyclist.id = cyclists_own_bikes.cyclist_id group by cyclists_own_bikes.cyclist_id order by count ( * ) desc limit 1",
          "select c.id , c.name from cyclist c where exists ( select null from cyclists_own_bikes co where co.cyclist_id = c.id group by co.cyclist_id having count ( co.bike_id ) = ( select max ( count ) from ( select count ( bike_id ) as count from cyclists_own_bikes group by cyclist_id ) co ) )",
          "select c.id , c.name from cyclist c where exists ( select null from cyclists_own_bikes co where co.cyclist_id = c.id group by co.cyclist_id having count ( co.bike_id ) = ( select max ( count ) from ( select count ( bike_id ) as count from cyclists_own_bikes group by cyclist_id ) ) )",
          "select cyclist.id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by count ( * ) desc limit 1",
          "select cyclist.id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclists_own_bikes.cyclist_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from cyclists_own_bikes group by cyclist_id ) )"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
      "infer_predictions": [
        [
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'Great Britain'",
          "select distinct bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'Great Britain'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclist.id = cyclists_own_bikes.cyclist_id where cyclist.nation = 'Russia' or cyclist.nation = 'Great Britain'"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "bike_racing",
      "gold": "SELECT count(DISTINCT heat) FROM cyclist",
      "infer_predictions": [
        [
          "select count ( distinct heat ) from cyclist"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "bike_racing",
      "gold": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
      "infer_predictions": [
        [
          "select count ( * ) from cyclist where id not in ( select cyclist_id from cyclists_own_bikes where purchase_year > 2015 )",
          "select count ( * ) from cyclist where Id not in ( select cyclist_id from cyclists_own_bikes where purchase_year > 2015 )",
          "select count ( * ) from cyclist where ID not in ( select cyclist_id from cyclists_own_bikes where purchase_year > 2015 )"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
      "infer_predictions": [
        [
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.555'",
          "select distinct bike.product_name from cyclist join cyclists_own_bikes on cyclist.id = cyclists_own_bikes.cyclist_id join bike on cyclists_own_bikes.bike_id = bike.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.5588'"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "bike_racing",
      "gold": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
      "infer_predictions": [
        [
          "select bike.product_name , bike.price from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Bradley Wiggins' intersect select bike.product_name , bike.price from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Antonio Tauler'",
          "select product_name , price from bike where id in ( select bike_id from cyclists_own_bikes where cyclist_id in ( select id from cyclist where name = 'Bradley Wiggins' ) intersect select bike_id from cyclists_own_bikes where cyclist_id in ( select id from cyclist where name = 'Antonio Tauler' ) )",
          "select bike.product_name , bike.price from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Bradley Wiggins' intersect select bike.product_name , bike.price from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Antonio Tauler'"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "bike_racing",
      "gold": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
      "infer_predictions": [
        [
          "select name , nation , result from cyclist where id not in ( select cyclist_id from cyclists_own_bikes )",
          "select name , nation , result from cyclist where Id not in ( select cyclist_id from cyclists_own_bikes )",
          "select name , nation , result from cyclist where ID not in ( select cyclist_id from cyclists_own_bikes )"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "bike_racing",
      "gold": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
      "infer_predictions": [
        [
          "select product_name from bike where material like '%fiber%'",
          "select product_name from bike where instr ( material , 'fiber' ) > 0",
          "select product_name from bike where material like '%fiber%'",
          "select distinct product_name from bike where material like '%fiber%'",
          "select product_name from bike where material like '%fibre%'",
          "Select product_name from bike where material like '%fiber%'"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "bike_racing",
      "gold": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
      "infer_predictions": [
        [
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclist.id asc",
          "select cyclist_id , count ( * ) from cyclists_own_bikes group by cyclist_id order by cyclist_id asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclists_own_bikes.cyclist_id order by cyclist.id asc",
          "select cyclist.id , count ( * ) from cyclist join cyclists_own_bikes on cyclist.id = cyclists_own_bikes.cyclist_id group by cyclist.id order by cyclist.id asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by count ( * ) asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclists_own_bikes.cyclist_id asc"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select g.flavor , g.price from goods g where g.price = ( select max ( price ) from goods )",
          "select g.flavor , g.price from goods g where g.price = ( select max ( price ) from goods where flavor = 'Cake' )",
          "select g.flavor , g.price from goods g where g.price = ( select max ( price ) from goods where flavor = 'Cake' )",
          "select flavor , price from goods where price = ( select max ( price ) from goods )",
          "select g.price , g.flavor from goods g where g.price = ( select max ( price ) from goods )",
          "select flavor , price from goods where price = ( select max ( price ) from goods where flavor = 'cake' )",
          "select flavor , price from goods where price = ( select max ( price ) from goods where flavor = 'Cake' )",
          "select g.flavor , g.price from goods g where g.price = ( select max ( price ) from goods where flavor = 'cake' )"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select id , flavor from goods where price = ( select max ( price ) from goods )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'cake' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'carrot' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'cookie' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'chocolate' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'carrot cake' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'Cake' )",
          "select id , flavor from goods where price = ( select max ( price ) from goods where flavor = 'cream' )"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select flavor , price from goods where price = ( select min ( price ) from goods where flavor = 'cookie' )",
          "select flavor , price from goods where price = ( select min ( price ) from goods where flavor = 'Cookie' )",
          "select g.flavor , g.price from goods g where g.price = ( select min ( price ) from goods where flavor = 'cookie' )",
          "select min ( price ) , flavor from goods where food = ( select min ( price ) from goods where flavor = 'cookie' )",
          "select g.flavor , g.price from goods g where g.price = ( select min ( price ) from goods where flavor = 'Cookie' )",
          "select min ( price ) , flavor from goods where food = ( select min ( price ) from goods where flavor = 'Cookie' )"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select id , flavor from goods where price = ( select min ( price ) from goods where food = 'cookie' )",
          "select id , flavor from goods where price = ( select min ( price ) from goods where food = 'cookies' )",
          "select id , flavor from goods where price = ( select min ( price ) from goods where flavor = 'cookie' )",
          "select id , flavor from goods where price = ( select min ( price ) from goods )",
          "select id , flavor from goods where price = ( select min ( price ) from goods where food = \"cookies\" )"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apple'",
          "select id from goods where flavor = 'apple'",
          "select id from goods where flavor like 'apple'",
          "select id from goods where flavor like '%Apple%'",
          "select id from goods where flavor = 'Apricot'",
          "select id from goods where flavor = 'Application'",
          "select id from goods where flavor like '%apple%'",
          "select id from goods where flavor like 'Apple'"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apple'",
          "select id from goods where flavor = 'apple'",
          "select id from goods where flavor like 'apple'",
          "select id from goods where flavor like 'Apple'",
          "select id from goods where flavor = 'Apricot'",
          "select id from goods where flavor = 'Application'",
          "select id from goods where flavor like '%Apple%'",
          "select id from goods where flavor = 'Apple'"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  <  3",
      "infer_predictions": [
        [
          "select id from goods where price < 3",
          "select id from goods where price <= 3"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  <  3",
      "infer_predictions": [
        [
          "select id from goods where price < 3",
          "select id from goods where price <= 3"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1496,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1497,
      "db_id": "bakery_1",
      "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1498,
      "db_id": "bakery_1",
      "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1499,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) >= 15"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) >= 15",
          "select customers.id from receipts join customers on receipts.customerid = customers.id group by customers.id having count ( * ) >= 15",
          "select receipts.customerid from receipts join customers on receipts.customerid = customers.id group by receipts.customerid having count ( * ) >= 15",
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) >= 15",
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by receipts.customerid having count ( * ) >= 15",
          "select customerid from receipts group by customerid having count ( * ) >= 15"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "bakery_1",
      "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1502,
      "db_id": "bakery_1",
      "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1503,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select count ( distinct flavor ) from goods where food = 'Cake'",
          "select count ( distinct g.flavor ) from goods g where g.flavor = 'Cake'",
          "select count ( distinct g.flavor ) from goods g where g.food = 'Cake'"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select count ( distinct g.flavor ) from goods g where g.id in ( select item from items g where g.id = g.id )",
          "select count ( distinct g.flavor ) from goods g where g.id in ( select item from items where item = g.id )"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
      "infer_predictions": [
        [
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Croissand'",
          "select distinct flavor from goods where food = 'Croissan'",
          "select distinct ( flavor ) from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'croissant'",
          "select distinct flavor from goods where food = 'Croissants'",
          "select distinct flavor from goods where food = 'Crispissant'"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
      "infer_predictions": [
        [
          "select distinct flavor from goods where food = 'croissant'",
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Crisp'",
          "select distinct flavor from goods where food = 'cro\u00fbton'",
          "select distinct flavor from goods where food = 'cr\u00eape'",
          "select distinct flavor from goods where food = 'Cruscuit'",
          "select distinct flavor from goods where food = 'Crissant'"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
      "infer_predictions": [
        [
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'James' and customers.lastname = 'Smith'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'James'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'Jack' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Jane'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'Christopher' and customers.lastname = 'James'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'James' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'Joe' and customers.lastname = 'Jane'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Christine'"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
      "infer_predictions": [
        [
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = ''",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'Smith'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'Scott'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'John'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = 15 and customers.lastname = ''",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'James'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on customers.id = receipts.customerid where customers.firstname = '15' and customers.lastname = 'Bob'"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "bakery_1",
      "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select avg ( price ) , max ( price ) , min ( price ) , food from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price )  , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "bakery_1",
      "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods Group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from receipts join items on receipts.receiptnumber = items.receipt where items.item = 'Cake' intersect select receipts.receiptnumber from receipts join items on receipts.receiptnumber = items.receipt where items.item = 'Cookie'"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1513,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1514,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from customers join receipts on customers.id = receipts.customerid join items on receipts.receiptnumber = items.receipt where customers.lastname = 'Logan' and items.item = 'croissant'"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select receipts.receiptnumber , receipts.date from receipts join items on receipts.receiptnumber = items.receipt where items.item = ( select max ( price ) from goods )",
          "select receipts.receiptnumber , receipts.date from items join receipts on items.receipt = receipts.receiptnumber where items.item = ( select max ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1516,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select receipts.receiptnumber , receipts.date from receipts join items on receipts.receiptnumber = items.receipt where items.item = ( select max ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1517,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select item from ( select item , count ( receipt ) as cnt from items group by item ) where cnt = ( select min ( cnt ) from ( select count ( receipt ) as cnt from items group by item ) )",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from ( select item , count ( receipt ) as num_purchases from items group by item ) where num_purchases = ( select min ( num_purchases ) from ( select count ( receipt ) as num_purchases from items group by item ) )"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from ( select item , count ( receipt ) as cnt from items group by item ) where cnt = ( select min ( cnt ) from ( select count ( receipt ) as cnt from items group by item ) )",
          "select item from ( select item , count ( receipt ) as num_purchases from items group by item ) where num_purchases = ( select min ( num_purchases ) from ( select count ( receipt ) as num_purchases from items group by item ) )",
          "select item from items group by item having count ( receipt ) = ( select min ( cnt ) from ( select count ( receipt ) as cnt from items group by item ) )",
          "select item from items group by item having count ( receipt ) = ( select min ( count ) from ( select count ( receipt ) as count from items group by item ) )",
          "select item from ( select item , count ( receipt ) as total from items group by item ) where total = ( select min ( total ) from ( select count ( receipt ) as total from items group by item ) )"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , count ( * ) from goods group by food",
          "select food , count ( * ) as total_goods from goods group by food",
          "select food , count ( * ) as numberofgoods from goods group by food",
          "select sub.food , count ( * ) from goods sub group by sub.food",
          "select food type , count ( * ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , count ( * ) from goods group by food",
          "select count ( * ) , food from goods group by food",
          "select sub.food , count ( * ) from goods sub group by sub.food",
          "select food , count ( * ) from goods group by food",
          "select food , count ( * ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) from goods group by food",
          "select food , ( select avg ( price ) from goods group by food ) as average_price from goods group by food",
          "select avg ( price ) , food from goods group by food",
          "select food , ( select avg ( price ) from goods group by food ) as average_price from goods",
          "select food , avg ( price ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) from goods group by food",
          "select food , ( select avg ( price ) from goods group by food ) as average_price from goods group by food",
          "select food , round ( avg ( price ) , 1 ) from goods group by food",
          "select food , round ( avg ( price ) , 2 ) from goods group by food",
          "select food , round ( avg ( price ) , 4 ) from goods group by food",
          "select food , round ( avg ( price ) , goods.food ) from goods group by food",
          "select food , ( select avg ( price ) from goods group by food ) as average_price from goods"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apricot' and price < 5",
          "select id from goods where flavor = 'Apricot' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Apricot' and price <= 5"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apricot' and price < 5",
          "select id from goods where flavor = 'Apricot' and price <= 5"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
      "infer_predictions": [
        [
          "select flavor from goods where price > 10",
          "select flavor from ( select flavor from goods where price > 10 ) as cnt",
          "select flavor from ( select flavor from goods where price > 10 ) as x",
          "select distinct flavor from goods where price > 10",
          "select flavor from goods where price > 10 and food = 'Cake'",
          "select flavor from goods where price like '10%'"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
      "infer_predictions": [
        [
          "select flavor from goods where price > 10",
          "select flavor from goods where price like '10%'",
          "select flavor from goods where price > 10 and food = 'Cake'",
          "select flavor from goods where price > 10 and food = 'cake'"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price <= ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select id , price from goods where price < ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price <= ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select id , price from goods where price < ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select distinct id from goods where price < ( select min ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where price = 'Tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where id = 'Tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where flavor = 'tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where 'Tart' )",
          "select distinct id from goods where price <= ( select min ( price ) from goods where flavor = 'Tart' )"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
      "infer_predictions": [
        [
          "select distinct receipts.receiptnumber from receipts join goods on receipts.receiptnumber = goods.id where goods.price > 13"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
      "infer_predictions": [
        [
          "select distinct receipts.receiptnumber from receipts join items on receipts.receiptnumber = items.receipt join goods on items.item = goods.id where goods.price > 13",
          "select distinct receipts.receiptnumber from receipts join goods on receipts.receiptnumber = goods.id where goods.price > 13"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1534,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
      "infer_predictions": [
        [
          "select receipts.date from receipts join items on receipts.receiptnumber = items.receipt join customers on customers.id = receipts.customerid join goods on items.item = goods.id where goods.price > 15"
        ]
      ]
    },
    {
      "id": 1535,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
      "infer_predictions": [
        [
          "select id from goods where id like '%APP%'",
          "select id from goods where instr ( id , 'APP' ) > 0",
          "select id from goods where instr ( id , 'APP' ) = 0",
          "select id from goods where instr ( 'APP' , 'ID' ) > 0",
          "select id from goods where id like '%APP%'",
          "select id from goods where instr ( id , 'app' ) > 0"
        ]
      ]
    },
    {
      "id": 1536,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
      "infer_predictions": [
        [
          "select id from goods where id like '%APP%'",
          "select id from goods where instr ( id , 'APP' ) > 0",
          "select id from goods where id like '%APP%' or id is null",
          "select id from goods where id like '%APP%'",
          "select all id from goods where id like '%APP%'",
          "select id from goods where id like '%APP%' - id not in ( select id from goods where id like '%APP%' )",
          "select id from goods where id like '%APP%'"
        ]
      ]
    },
    {
      "id": 1537,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
      "infer_predictions": [
        [
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where id like \"%70%\"",
          "select id , price from goods where id like '%70%'"
        ]
      ]
    },
    {
      "id": 1538,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
      "infer_predictions": [
        [
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where instr ( id , 70 ) = 0",
          "select id , price from goods where instr ( id , '70' ) = 1",
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where instr ( id , 70 ) = '70'",
          "select id , price from goods where instr ( id , '70' ) = 0",
          "select id , price from goods where instr ( id , 70 ) = '%'"
        ]
      ]
    },
    {
      "id": 1539,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
      "infer_predictions": [
        [
          "select lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc , firstname asc"
        ]
      ]
    },
    {
      "id": 1540,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
      "infer_predictions": [
        [
          "select lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc , firstname asc"
        ]
      ]
    },
    {
      "id": 1541,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
      "infer_predictions": [
        [
          "select id from goods order by id asc",
          "select id from ( select id , rank ( ) over ( order by id asc ) as rank from goods ) order by id asc",
          "select id from ( select id from goods ) order by id asc",
          "select id from ( select id , rank ( ) over ( order by id asc ) as rank from goods ) where rank = 1",
          "select id from ( select id from goods order by id asc ) as sorted",
          "select id from ( select id , rank ( ) over ( order by id asc ) as rank from goods ) as rank"
        ]
      ]
    },
    {
      "id": 1542,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
      "infer_predictions": [
        [
          "select distinct id from goods order by id asc",
          "select distinct id from goods",
          "select distinct id from goods order by id asc limit 1",
          "select distinct id from goods Order by id asc",
          "select distinct id from goods order by id desc"
        ]
      ]
    },
    {
      "id": 1543,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1544,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1545,
      "db_id": "bakery_1",
      "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
      "infer_predictions": [
        [
          "select receipts.date from receipts where receipts.date = ( select max ( date ) from receipts )",
          "select date from receipts where date = ( select max ( date ) from receipts )",
          "select receipts.date from receipts where date = ( select max ( date ) from receipts )",
          "select receiptnumber , date from receipts where date = ( select max ( date ) from receipts )"
        ]
      ]
    },
    {
      "id": 1546,
      "db_id": "bakery_1",
      "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
      "infer_predictions": [
        [
          "select receiptnumber , date from receipts where date = ( select max ( date ) from receipts )",
          "select receiptnumber , date from receipts where date = ( select max ( date ) from receipts )"
        ]
      ]
    },
    {
      "id": 1547,
      "db_id": "bakery_1",
      "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1548,
      "db_id": "bakery_1",
      "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1549,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
      "infer_predictions": [
        [
          "select id from goods where price between 3 and 7 and food = 'Cookie' or flavor = 'Cake'",
          "select id from goods where food = 'Cookie' and price between 3 and 7",
          "select id from goods where price between 3 and 7",
          "select id from goods where food between 'Cookie' and 'Cake' and price between 3 and 7",
          "select id from goods where food between 3 and 7 and flavor = 'Cookie' or price between 3 and 7",
          "select id from goods where food between 3 and 7 and price between 3 and 7",
          "select id from goods where price between 3 and 7 and flavor = 'Cookie' or price = 'Cake'",
          "select id from goods where price between 3 and 7 and food = 'Cookie' or food = 'Cake'"
        ]
      ]
    },
    {
      "id": 1550,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
      "infer_predictions": [
        [
          "select id from goods where price between 3 and 7 and food = 'Cookies' or flavor = 'Cake'",
          "select id from goods where food = 'Cookies' or food = 'Cake' and price between 3 and 7",
          "select id from goods where food = 'Cookies' or food = 'Cakes' and price between 3 and 7",
          "select id from goods where price between 3 and 7 and food = 'Cookies' or food = 'Cake'",
          "select id from goods where food = 'Cookies' or flavor = 'Cake' and price between 3 and 7",
          "select id from goods where price between 3 and 7 and food = 'Cookies' or food = 'Cakes'",
          "select id from goods where food = 'Cookie' or food = 'Cake' and price between 3 and 7",
          "select id from goods where price between 3 and 7"
        ]
      ]
    },
    {
      "id": 1551,
      "db_id": "bakery_1",
      "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid order by receipts.date asc limit 1",
          "select customers.firstname , customers.lastname from customers join receipts on receipts.customerid = customers.id order by receipts.date asc limit 1",
          "select firstname , lastname from customers where id = ( select min ( date ) from receipts )",
          "select customers.firstname , customers.lastname from receipts join customers on receipts.customerid = customers.id order by receipts.date asc limit 1",
          "select firstname , lastname from customers where id = ( select min ( receipts.date ) from receipts )",
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid order by receipts.date asc limit 1"
        ]
      ]
    },
    {
      "id": 1552,
      "db_id": "bakery_1",
      "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1553,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
      "infer_predictions": [
        [
          "select avg ( price ) from goods where flavor = 'Blackberry' or flavor = 'Blueberry'",
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'Berry' or flavor = 'Blueberry'",
          "select avg ( price ) from goods where flavor = 'Blueberry' or flavor = 'Blackberry'",
          "select avg ( price ) from goods where flavor = 'blueberry' or flavor = 'blackberry'"
        ]
      ]
    },
    {
      "id": 1554,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
      "infer_predictions": [
        [
          "select avg ( price ) from goods where flavor = 'Blackberry' or flavor = 'Blueberry'",
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'Berry' or flavor = 'Blueberry'",
          "select avg ( price ) from goods where flavor = 'Blueberry' or flavor = 'Blackberry'",
          "select avg ( price ) from goods where flavor = 'blueberry' or flavor = 'blackberry'",
          "select avg ( price ) from goods where flavor = 'Cranberry' or flavor = 'Blueberry'"
        ]
      ]
    },
    {
      "id": 1555,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
      "infer_predictions": [
        [
          "select min ( price ) from goods where flavor = 'Cheese'",
          "select price from goods where flavor = 'Cheese'",
          "select price from goods where flavor = 'Cheese' and price = ( select min ( price ) from goods where flavor = 'Cheese' )",
          "select price from goods where flavor = 'cheese' and price = ( select min ( price ) from goods where flavor = 'cheese' )",
          "select min ( price ) from goods where flavor = 'cheese'",
          "select price from goods where flavor = 'cheese'"
        ]
      ]
    },
    {
      "id": 1556,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
      "infer_predictions": [
        [
          "select price from goods where flavor = 'Cheese' and price = ( select min ( price ) from goods where flavor = 'Cheese' )",
          "select price from goods where flavor = 'cheese' and price = ( select min ( price ) from goods where flavor = 'cheese' )",
          "select min ( price ) from goods where flavor = 'Cheese'",
          "select price from goods where flavor = 'Cheese' and price = ( select min ( price ) from goods where flavor = 'Cheese' )",
          "select price from goods where flavor = 'Cheese' and price = ( select min ( price ) from goods where flavor = 'Cheese' )",
          "select min ( price ) from goods where flavor = 'cheese'"
        ]
      ]
    },
    {
      "id": 1557,
      "db_id": "bakery_1",
      "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
      "infer_predictions": [
        [
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc"
        ]
      ]
    },
    {
      "id": 1558,
      "db_id": "bakery_1",
      "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
      "infer_predictions": [
        [
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc , flavor",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc"
        ]
      ]
    },
    {
      "id": 1559,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
      "infer_predictions": [
        [
          "select min ( price ) , max ( price ) , food from goods group by food order by food asc",
          "select max ( price ) , min ( price ) , food from goods group by food order by food asc",
          "select min ( price ) , max ( price ) , food from goods group by food order by food asc"
        ]
      ]
    },
    {
      "id": 1560,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
      "infer_predictions": [
        [
          "select min ( price ) , max ( price ) from goods where food = 'food' order by food asc",
          "select min ( price ) , max ( price ) from goods where food order by food asc",
          "select min ( price ) , max ( price ) , food from goods where food = 'food' order by food asc",
          "select min ( price ) , max ( price ) , food from goods where food order by food asc",
          "select min ( price ) , max ( price ) , food from goods where food = food group by food order by food asc",
          "select min ( price ) , max ( price ) from goods where food in ( select food from goods order by food asc )",
          "select min ( price ) , max ( price ) , food from goods where food = 'food' group by food order by food asc",
          "select min ( price ) , max ( price ) from goods where food = food order by food asc"
        ]
      ]
    },
    {
      "id": 1561,
      "db_id": "bakery_1",
      "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date from ( select date , count ( receiptnumber ) as cnt from receipts group by date ) where cnt = ( select max ( cnt ) from ( select count ( receiptnumber ) as cnt from receipts group by date ) )",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) where num_receipts = ( select max ( num_receipts ) from ( select count ( receiptnumber ) as num_receipts from receipts group by date ) )",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) where num_receipts = ( select max ( num_receipts ) from ( select count ( receiptnumber ) as num_receipts from receipts group by date ) ) order by num_receipts desc limit 3",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) order by num_receipts desc limit 3"
        ]
      ]
    },
    {
      "id": 1562,
      "db_id": "bakery_1",
      "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date from ( select date , count ( receiptnumber ) as cnt from receipts group by date ) where cnt = ( select max ( cnt ) from ( select count ( receiptnumber ) as cnt from receipts group by date ) )",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) where num_receipts = ( select max ( num_receipts ) from ( select count ( receiptnumber ) as num_receipts from receipts group by date ) )",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) where num_receipts = ( select max ( num_receipts ) from ( select count ( receiptnumber ) as num_receipts from receipts group by date ) ) order by num_receipts desc limit 3",
          "select date from ( select date , count ( receiptnumber ) as num_receipts from receipts group by date ) order by num_receipts desc limit 3"
        ]
      ]
    },
    {
      "id": 1563,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.id order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from receipts join customers on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.id order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on customers.id = receipts.customerid group by receipts.customerid order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.firstname , customers.lastname order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.customerid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1564,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.id , count ( * ) from receipts join customers on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1",
          "select customers.id , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.id order by count ( * ) desc limit 1",
          "select receipts.customerid , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.customerid order by count ( * ) desc limit 1",
          "select customers.id , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.customerid order by count ( * ) desc limit 1",
          "select customers.id , count ( * ) from receipts join customers on receipts.customerid = customers.id group by customers.id having count ( * ) = ( select max ( total_purchases ) from ( select count ( * ) as total_purchases from receipts group by receipts.customerid ) )"
        ]
      ]
    },
    {
      "id": 1565,
      "db_id": "bakery_1",
      "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
      "infer_predictions": [
        [
          "select date , count ( distinct customers.id ) from receipts join customers on receipts.customerid = customers.id group by date",
          "select receipts.date , count ( distinct customers.id ) from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select date , count ( distinct customerid ) from receipts group by date",
          "select date , count ( distinct customers.id ) from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select date , count ( distinct customers.id ) from customers join receipts on customers.id = receipts.customerid group by date"
        ]
      ]
    },
    {
      "id": 1566,
      "db_id": "bakery_1",
      "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
      "infer_predictions": [
        [
          "select receipts.date , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select date , count ( * ) from receipts join customers on receipts.customerid = customers.id group by date",
          "select date , count ( * ) from receipts group by date",
          "select receipts.date , count ( * ) from customers join receipts on customers.id = receipts.customerid group by receipts.date",
          "select date , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.date"
        ]
      ]
    },
    {
      "id": 1567,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1568,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1569,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
      "infer_predictions": [
        [
          "select id from goods where price < ( select min ( price ) from goods where food = 'Cookie' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'Croissant' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'Crisp' )"
        ]
      ]
    },
    {
      "id": 1570,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
      "infer_predictions": [
        [
          "select id from goods where price < ( select min ( price ) from goods where food = 'croissant' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'croissant' )",
          "select id from goods where price <= ( select min ( price ) from goods where food = 'croissant' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'crescent' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'cr\u00eape' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'cro\u00fbte' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'cr\u00eapes' )",
          "select id from goods where price < ( select min ( price ) from goods where food = 'croissants' )"
        ]
      ]
    },
    {
      "id": 1571,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1572,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods where goods.id = id )",
          "select id from goods where price >= ( select avg ( price ) from goods where goods.price = 'Tart' )"
        ]
      ]
    },
    {
      "id": 1573,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods group by id having max ( price ) > ( select avg ( price ) from goods )",
          "select id from goods group by id having avg ( price ) > 2",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select Avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1574,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select Avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1575,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
      "infer_predictions": [
        [
          "select id , flavor , food from goods order by price asc",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as goods",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as sorted",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as x",
          "select id , flavor , food from ( select * from goods order by price asc ) as goods",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as good",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as _",
          "select id , flavor , food from ( select * from goods order by price asc ) as sorted"
        ]
      ]
    },
    {
      "id": 1576,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
      "infer_predictions": [
        [
          "select id , flavor , food from goods order by price asc",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as sorted",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as goods",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as x",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as t",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc )",
          "select id , flavor , food from ( select id , flavor , food from goods order by price asc ) as _",
          "select id , flavor , food from ( select * from goods order by price asc ) as sorted"
        ]
      ]
    },
    {
      "id": 1577,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
      "infer_predictions": [
        [
          "select id , flavor from goods where flavor = 'Cake' order by flavor asc",
          "select id , flavor from goods where flavor = 'Cakes' order by flavor asc",
          "select id , flavor from goods where flavor = 'Cake' group by id order by flavor asc",
          "select id , flavor from goods where flavor = 'Cakes' group by id order by flavor asc",
          "select id , flavor from goods where food = 'Cakes' order by flavor asc",
          "select id , flavor from goods where food = 'Cake' order by flavor asc"
        ]
      ]
    },
    {
      "id": 1578,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
      "infer_predictions": [
        [
          "select id , flavor from goods where flavor = 'Cake' order by flavor asc",
          "select id , flavor from goods where flavor = 'cake' order by flavor asc",
          "select id , flavor from goods where flavor = 'cookie' order by flavor asc",
          "select id , flavor from goods order by flavor asc",
          "select id , flavor from goods where flavor = 'Cakes' order by flavor asc",
          "select id , flavor from goods where flavor = 'cupcake' order by flavor asc",
          "select id , flavor from goods where flavor = 'carrot' order by flavor asc",
          "select id , flavor from goods order by flavor asc"
        ]
      ]
    },
    {
      "id": 1579,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
      "infer_predictions": [
        [
          "select items.item from items join goods on items.item = goods.id where goods.flavor like 'chocolate' except select items.item from items join goods on items.item = goods.id group by items.item having count ( items.receipt ) > 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor like 'chocolate' except select items.item from items join goods on items.item = goods.id group by items.item having count ( * ) > 10"
        ]
      ]
    },
    {
      "id": 1580,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
      "infer_predictions": [
        [
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'Chocolate' group by items.item having count ( items.receipt ) <= 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'Chocolate' group by items.item having count ( * ) <= 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'chocolate' group by items.item having count ( items.receipt ) <= 10",
          "select goods.flavor from goods join items on goods.id = items.item where goods.flavor = 'Chocolate' group by goods.id having count ( items.receipt ) <= 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'chocolate' group by items.item having count ( * ) <= 10",
          "select items.item from goods join items on goods.id = items.item where goods.flavor = 'Chocolate' group by items.item having count ( items.receipt ) <= 10",
          "select goods.flavor from items join goods on items.item = goods.id where goods.flavor = 'Chocolate' group by items.item having count ( * ) <= 10"
        ]
      ]
    },
    {
      "id": 1581,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
      "infer_predictions": [
        [
          "select flavor from goods where food = 'Cake' except select flavor from goods where food = 'Tart'",
          "select distinct flavor from goods where food = 'Cake' except select distinct flavor from goods where food = 'Tart'",
          "select flavor from goods where food = 'Cake' except select flavor from goods where food = 'Tart'"
        ]
      ]
    },
    {
      "id": 1582,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
      "infer_predictions": [
        [
          "select flavor from goods where food = 'Cake' except select flavor from goods where food = 'Tart'",
          "select flavor from goods where food != 'Cake' except select flavor from goods where food != 'Tart'",
          "select flavor from goods where food != 'Tart' except select flavor from goods where food != 'Cake'",
          "select flavor from goods where food not in ( select flavor from goods where food = 'Tart' )",
          "select distinct flavor from goods where food not in ( select flavor from goods where food = 'Tart' )",
          "select distinct flavor from goods where food = 'Cake' and flavor not in ( select distinct flavor from goods where food = 'Tart' )",
          "select distinct flavor from goods where food = 'Cake' except select distinct flavor from goods where food = 'Tart'",
          "select flavor from goods where food except select flavor from goods where food = 'Tart'"
        ]
      ]
    },
    {
      "id": 1583,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select food from goods group by flavor order by count ( * ) desc limit 3",
          "select g.food from goods g where g.id in ( select i.item from items i group by i.item order by count ( i.receipt ) desc limit 3 )",
          "select g.food from goods g where g.id in ( select i.item from items i group by i.item order by count ( i.item ) desc limit 3 )",
          "select g.food from goods g where g.flavor = ( select flavor from goods group by flavor order by count ( * ) desc limit 3 )",
          "select goods.food from goods join items on goods.id = items.item group by goods.id order by count ( * ) desc limit 3",
          "select goods.food from goods join items on goods.id = items.item group by items.item order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1584,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select items.item from items join goods on items.item = goods.id group by items.item order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1585,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having sum ( receipts.receiptnumber ) > 150"
        ]
      ]
    },
    {
      "id": 1586,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having sum ( receipts.receiptnumber ) > 150"
        ]
      ]
    },
    {
      "id": 1587,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1588,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1589,
      "db_id": "bakery_1",
      "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1590,
      "db_id": "bakery_1",
      "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
      "infer_predictions": [
        [
          "select receipts.date from goods join receipts on goods.id = receipts.receiptnumber group by receipts.date having sum ( goods.price ) > 100"
        ]
      ]
    },
    {
      "id": 1591,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver",
      "infer_predictions": [
        [
          "select count ( * ) from driver"
        ]
      ]
    },
    {
      "id": 1592,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver",
      "infer_predictions": [
        [
          "select count ( * ) from driver",
          "select count ( * ) , driver from driver",
          "select count ( * ) from driver"
        ]
      ]
    },
    {
      "id": 1593,
      "db_id": "car_racing",
      "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
      "infer_predictions": [
        [
          "select count ( * ) , make from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points > 150 group by make",
          "select count ( * ) , make from driver where points > 150 group by make",
          "select count ( * ) , make from driver where points >150 group by make"
        ]
      ]
    },
    {
      "id": 1594,
      "db_id": "car_racing",
      "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver where points > 150 group by make",
          "select ( make ) , count ( * ) from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points >150 group by make"
        ]
      ]
    },
    {
      "id": 1595,
      "db_id": "car_racing",
      "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
      "infer_predictions": [
        [
          "select avg ( age ) , make from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select avg ( age )  , make from driver group by make",
          "select avg ( age ) - make from driver group by make",
          "select avg ( age ) , make from driver group by make"
        ]
      ]
    },
    {
      "id": 1596,
      "db_id": "car_racing",
      "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
      "infer_predictions": [
        [
          "select avg ( age ) , make from driver group by make",
          "select avg ( age )  , make from driver group by make",
          "select avg ( age ) , make from driver group by make"
        ]
      ]
    },
    {
      "id": 1597,
      "db_id": "car_racing",
      "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
      "infer_predictions": [
        [
          "select avg ( laps ) from driver where age < 20",
          "select avg ( laps ) from driver where age <= 20",
          "select avg ( laps ) from driver where age < 20"
        ]
      ]
    },
    {
      "id": 1598,
      "db_id": "car_racing",
      "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
      "infer_predictions": [
        [
          "select avg ( laps ) from driver where age < 20",
          "select avg ( laps ) from driver where age <= 20",
          "select avg (laps ) from driver where age < 20"
        ]
      ]
    },
    {
      "id": 1599,
      "db_id": "car_racing",
      "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
      "infer_predictions": [
        [
          "select manager , sponsor from team order by car_owner asc",
          "select manager , sponsor from team order by car_owner asc",
          "select manager , sponsor from team order by car_owner Asc"
        ]
      ]
    },
    {
      "id": 1600,
      "db_id": "car_racing",
      "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
      "infer_predictions": [
        [
          "select manager , sponsor from team order by car_owner asc",
          "select manager , sponsor from team order by car_owner asc",
          "select manager , sponsor from team order by car_owner asc"
        ]
      ]
    },
    {
      "id": 1601,
      "db_id": "car_racing",
      "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select make from team group by make having count ( * ) > 1",
          "select make from ( select make , count ( distinct team ) as num_teams from team group by make having num_teams > 1 )",
          "select make from ( select make , count ( team_id ) as num_teams from team group by make having num_teams > 1 )",
          "select make from ( select make , count ( * ) as num_teams from team group by make having num_teams > 1 )",
          "select make from ( select make , count ( distinct team_id ) as num_teams from team group by make having num_teams > 1 )",
          "select make from ( select make , count ( * ) as num_teams from team group by make having num_teams > 1 ) where num_teams > 1",
          "select make from ( select make , count ( team_id ) as num_teams from team group by make having num_teams > 1 ) where num_teams > 1",
          "select make from ( select make , count ( * ) as num_teams from team group by make having num_teams > 1 )"
        ]
      ]
    },
    {
      "id": 1602,
      "db_id": "car_racing",
      "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1603,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
      "infer_predictions": [
        [
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Buddy Arrington' or team.car_owner = 'Bobby Arrington'",
          "select make from team where car_owner = 'Bobby Arrington'",
          "select make from team where car_owner = 'Buddy Arrington' or car_owner = 'Bobby'"
        ]
      ]
    },
    {
      "id": 1604,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
      "infer_predictions": [
        [
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where exists ( select 1 from team where team.team_id = team.team_id and car_owner = 'Buddy Arrington' )"
        ]
      ]
    },
    {
      "id": 1605,
      "db_id": "car_racing",
      "gold": "SELECT max(Points) ,  min(Points) FROM driver",
      "infer_predictions": [
        [
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) as maxpoints , min ( points ) as minpoints from driver",
          "select max ( points ) as max_points , min ( points ) as min_points from driver"
        ]
      ]
    },
    {
      "id": 1606,
      "db_id": "car_racing",
      "gold": "SELECT max(Points) ,  min(Points) FROM driver",
      "infer_predictions": [
        [
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) as maxpoints , min ( points ) as minpoints from driver",
          "select max ( points ) as max_points from driver",
          "select max ( points ) as max_points , min ( points ) as min_points from driver",
          "select max ( points ) as maxpoints from driver"
        ]
      ]
    },
    {
      "id": 1607,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
      "infer_predictions": [
        [
          "select count ( * ) from driver where points < 150",
          "select count ( * ) from driver where points <= 150",
          "select count ( * ) from driver where points < 150"
        ]
      ]
    },
    {
      "id": 1608,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
      "infer_predictions": [
        [
          "select count ( * ) from driver where points < 150",
          "select count ( * ) from driver where points <= 150",
          "select count ( * ) from driver where points < 150"
        ]
      ]
    },
    {
      "id": 1609,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select driver from driver order by age asc",
          "select driver from driver order by age asc , driver asc"
        ]
      ]
    },
    {
      "id": 1610,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select driver from driver order by age asc",
          "select driver from ( select driver , age , rank ( ) over ( order by age asc ) as rank from driver ) order by age asc",
          "select driver from ( select driver , age , rank ( ) over ( order by age asc ) as r from driver ) order by age asc"
        ]
      ]
    },
    {
      "id": 1611,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
      "infer_predictions": [
        [
          "select driver from driver order by points desc"
        ]
      ]
    },
    {
      "id": 1612,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
      "infer_predictions": [
        [
          "select driver from driver order by points desc"
        ]
      ]
    },
    {
      "id": 1613,
      "db_id": "car_racing",
      "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
      "infer_predictions": [
        [
          "select driver , country from driver"
        ]
      ]
    },
    {
      "id": 1614,
      "db_id": "car_racing",
      "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
      "infer_predictions": [
        [
          "select driver , country from driver",
          "Select driver , country from driver"
        ]
      ]
    },
    {
      "id": 1615,
      "db_id": "car_racing",
      "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
      "infer_predictions": [
        [
          "select max ( points ) from driver join country on driver.country = country.country where country.capital = 'Dublin'",
          "select max ( points ) from driver where country = 'Dublin'",
          "select max ( points ) from driver join country on driver.country = country.country_id where country.capital = 'Dublin'",
          "select max ( points ) from country join driver on country.capital = driver.country where country.capital = 'Dublin'",
          "select max ( points ) from country join driver on country.country = driver.country where country.capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1616,
      "db_id": "car_racing",
      "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
      "infer_predictions": [
        [
          "select max ( driver.points ) from country join driver on country.country_id = driver.country where country.capital = 'Dublin'",
          "select max ( driver.points ) from country join driver on country.country = driver.country where country.capital = 'Dublin'",
          "select max ( driver.points ) from driver join country on driver.country = country.country where country.capital = 'Dublin'",
          "select max ( driver.points ) from country join driver on country.capital = driver.country where country.capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1617,
      "db_id": "car_racing",
      "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'english'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'english'",
          "select avg ( age ) from driver join country on driver.country = country.country where country.official_native_language = 'English'",
          "select avg ( age ) from driver join country on driver.country = country.country where country.official_native_language = 'english'"
        ]
      ]
    },
    {
      "id": 1618,
      "db_id": "car_racing",
      "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'english'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'english'",
          "select avg ( age ) from driver join country on driver.country = country.country where country.official_native_language = 'English'",
          "select avg ( age ) from driver join country on driver.country = country.country where country.official_native_language = 'english'"
        ]
      ]
    },
    {
      "id": 1619,
      "db_id": "car_racing",
      "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
      "infer_predictions": [
        [
          "select distinct country.country from country join driver on country.country_id = driver.country where driver.points > 150",
          "select distinct country.country from driver join country on driver.country = country.country_id where driver.points > 150"
        ]
      ]
    },
    {
      "id": 1620,
      "db_id": "car_racing",
      "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
      "infer_predictions": [
        [
          "select distinct country.country from driver join country on driver.driver_id = country.country_id where driver.points > 150",
          "select distinct country.country from country join driver on country.country_id = driver.country where driver.points > 150"
        ]
      ]
    },
    {
      "id": 1621,
      "db_id": "car_racing",
      "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country.capital from country join driver on country.country_id = driver.country where driver.points = ( select max ( points ) from driver ) order by driver.points desc limit 1",
          "select capital from country where country in ( select country from driver where points = ( select max ( points ) from driver ) )",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country_id and d.points = ( select max ( points ) from driver ) )",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country and d.points = ( select max ( points ) from driver ) )",
          "select country.capital from country join driver on country.country_id = driver.country order by driver.points desc limit 1",
          "select country.capital from driver join country on driver.country = country.country_id order by driver.points desc limit 1",
          "select c.capital from country c where exists ( select * from driver d where d.country = c.country_id and d.points = ( select max ( points ) from driver ) )",
          "select capital from country inner join driver on country.country_id = driver.country where driver.points = ( select max ( points ) from driver )"
        ]
      ]
    },
    {
      "id": 1622,
      "db_id": "car_racing",
      "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country.capital from country join driver on country.country_id = driver.country order by driver.points desc limit 1",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country and d.points = ( select max ( points ) from driver ) )",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country_id and d.points = ( select max ( points ) from driver ) )",
          "select c.capital from country c inner join driver d on c.country_id = d.country where d.points = ( select max ( points ) from driver )",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country and d.points = ( select max ( points ) from driver where country in ( select country from driver ) ) )",
          "select c.capital from country c where exists ( select 1 from driver d where d.country = c.country_id and d.points = ( select max ( points ) from driver where country in ( select country from driver ) ) )",
          "select capital from country where country in ( select country from driver order by points desc limit 1 )"
        ]
      ]
    },
    {
      "id": 1623,
      "db_id": "car_racing",
      "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver group by make",
          "select make as make , count ( * ) from driver group by make",
          "select make , count ( * ) from driver group by make",
          "select make , count ( * ) from driver group by make",
          "select make , count ( * ) from driver group by make"
        ]
      ]
    },
    {
      "id": 1624,
      "db_id": "car_racing",
      "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver group by make",
          "select make , count ( * ) from driver group by make",
          "select make , count ( * ) from driver group by make"
        ]
      ]
    },
    {
      "id": 1625,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select make from driver group by make having count ( make ) = ( select max ( count ) from ( select count ( make ) as count from driver group by make ) )",
          "select make from driver group by make having count ( make ) = ( select max ( count ) from ( select count ( make ) as count from driver group by make ) t )",
          "select make from driver group by make having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from driver group by make ) )",
          "select make from driver group by make having count ( make ) = ( select max ( cnt ) from ( select count ( * ) as cnt from driver group by make ) )",
          "select make from driver group by make having count ( make ) = ( select max ( cnt ) from ( select count ( make ) as cnt from driver group by make ) )",
          "select make from driver group by make having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from driver group by make ) )",
          "select make from driver group by make having count ( driver_id ) = ( select max ( count ) from ( select count ( driver_id ) as count from driver group by make ) )",
          "select make from driver group by make having count ( make ) = ( select max ( cnt ) from ( select count ( make ) as cnt from driver group by make ) t )"
        ]
      ]
    },
    {
      "id": 1626,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from driver group by make ) )",
          "select make from driver group by make having count ( driver_id ) = ( select max ( count ) from ( select count ( driver_id ) as count from driver group by make ) )",
          "select make from driver group by make having count ( driver ) = ( select max ( count ) from ( select count ( driver ) as count from driver group by make ) )",
          "select make from driver group by make having count ( make ) = ( select max ( count ) from ( select count ( * ) as count from driver group by make ) )",
          "select make from driver group by make having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from driver group by make ) t )",
          "select make from driver group by make having count ( driver_id ) = ( select max ( count ) from ( select count ( driver_id ) as count from driver group by make ) t )",
          "select make from driver group by make having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from driver group by make ) )"
        ]
      ]
    },
    {
      "id": 1627,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( distinct driver_id ) >= 3"
        ]
      ]
    },
    {
      "id": 1628,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( distinct driver_id ) >= 3",
          "select make from driver group by make having count ( distinct driver ) >= 3",
          "select make from driver group by make having count ( * ) >= 4",
          "Select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 1629,
      "db_id": "car_racing",
      "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
      "infer_predictions": [
        [
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team where not exists ( select 1 from team_driver where team_driver.team_id = team.team_id )",
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team where team_id not in ( select team_id from team_driver )"
        ]
      ]
    },
    {
      "id": 1630,
      "db_id": "car_racing",
      "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
      "infer_predictions": [
        [
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team left join team_driver on team.team_id = team_driver.team_id where team_driver.team_id is null group by team.team_id having count ( * ) = 0",
          "select team from team left join team_driver on team.team_id = team_driver.team_id where team_driver.team_id is null group by team.team_id",
          "select team from team left join team_driver on team.team_id = team_driver.team_id where team_driver.team_id is null"
        ]
      ]
    },
    {
      "id": 1631,
      "db_id": "car_racing",
      "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
      "infer_predictions": [
        [
          "select country from driver where make = 'Dodge' intersect select country from driver where make = 'Chevrolet'",
          "select country.country from country join driver on country.country_id = driver.country where driver.make = 'Dodge' intersect select country.country from country join driver on country.country_id = driver.country where driver.make = 'Chevrolet'",
          "select country.country from driver join country on driver.country = country.country_id where driver.make = 'Dodge' intersect select country.country from driver join country on driver.country = country.country_id where driver.make = 'Chevrolet'"
        ]
      ]
    },
    {
      "id": 1632,
      "db_id": "car_racing",
      "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
      "infer_predictions": [
        [
          "select country.country from driver join country on driver.driver_id = country.country_id where driver.make = 'Dodge' intersect select country.country from driver join country on driver.driver_id = country.country_id where driver.make = 'Chevrolet'",
          "select country.country from driver join country on driver.make = country.country_id where driver.make = 'Dodge' intersect select country.country from driver join country on driver.make = country.country_id where driver.make = 'Chevrolet'"
        ]
      ]
    },
    {
      "id": 1633,
      "db_id": "car_racing",
      "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
      "infer_predictions": [
        [
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) as average_points from driver",
          "select sum ( points ) , avg ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1634,
      "db_id": "car_racing",
      "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
      "infer_predictions": [
        [
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1635,
      "db_id": "car_racing",
      "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
      "infer_predictions": [
        [
          "select country from country except select country from driver",
          "select country from country where country_id not in ( select country from driver )"
        ]
      ]
    },
    {
      "id": 1636,
      "db_id": "car_racing",
      "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
      "infer_predictions": [
        [
          "select country from country except select country from driver",
          "select country from country where country_id not in ( select country from driver )"
        ]
      ]
    },
    {
      "id": 1637,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select team.manager , team.sponsor from team join ( select team_id from team_driver group by team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_id ) ) ) as maxdrivers on team.team_id = maxdrivers.team_id",
          "select team.manager , team.sponsor from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team join ( select team_driver.team_id from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_driver.team_id ) ) ) as maxdrivers on team.team_id = maxdrivers.team_id",
          "select team.manager , team.sponsor from team join ( select team_id from team_driver group by team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_id ) ) ) as most_drivers on team.team_id = most_drivers.team_id",
          "select team.manager , team.sponsor from team_driver join team on team_driver.team_id = team.team_id group by team.team_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1638,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select team.manager , team.sponsor from team join ( select team_id from team_driver group by team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_id ) ) ) as maxdrivers on team.team_id = maxdrivers.team_id",
          "select team.manager , team.sponsor from team join ( select team_id from team_driver group by team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_id ) ) ) as most_drivers on team.team_id = most_drivers.team_id",
          "select team.manager , team.sponsor from team inner join ( select team_id , count ( driver_id ) as num_drivers from team_driver group by team_id order by num_drivers desc limit 1 ) as most_drivers on team.team_id = most_drivers.team_id",
          "select team.manager , team.sponsor from team join ( select team_driver.team_id from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id having count ( team_driver.driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_id ) ) ) as maxdrivers on team.team_id = maxdrivers.team_id",
          "select team.manager , team.sponsor from team join ( select team_driver.team_id from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id having count ( driver_id ) = ( select max ( driver_count ) from ( select count ( driver_id ) as driver_count from team_driver group by team_driver.team_id ) ) ) as maxdrivers on team.team_id = maxdrivers.team_id"
        ]
      ]
    },
    {
      "id": 1639,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team_driver.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1640,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team_driver.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team_driver join team on team_driver.team_id = team.team_id group by team_driver.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team_driver join team on team_driver.team_id = team.team_id group by team.team_id having count ( * ) >= 2",
          "select manager , car_owner from team where team_id in ( select team_id from team_driver group by team_id having count ( distinct driver_id ) >= 2 )"
        ]
      ]
    },
    {
      "id": 1641,
      "db_id": "institution_sports",
      "gold": "SELECT count(*) FROM institution",
      "infer_predictions": [
        [
          "select count ( * ) from institution"
        ]
      ]
    },
    {
      "id": 1642,
      "db_id": "institution_sports",
      "gold": "SELECT count(*) FROM institution",
      "infer_predictions": [
        [
          "select count ( * ) from institution"
        ]
      ]
    },
    {
      "id": 1643,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from institution order by name asc",
          "select name from institution order by name asc , name asc",
          "select name from institution order by name asc"
        ]
      ]
    },
    {
      "id": 1644,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from institution order by name asc"
        ]
      ]
    },
    {
      "id": 1645,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
      "infer_predictions": [
        [
          "select name from institution order by founded asc",
          "select name from institution order by founded asc , name asc",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc"
        ]
      ]
    },
    {
      "id": 1646,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
      "infer_predictions": [
        [
          "select name from institution order by founded asc",
          "select name from institution order by founded asc , name",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc",
          "select name from institution order by founded asc"
        ]
      ]
    },
    {
      "id": 1647,
      "db_id": "institution_sports",
      "gold": "SELECT City ,  Province FROM institution",
      "infer_predictions": [
        [
          "select city , province from institution",
          "select city , province from institution where institution.institution_id = ( select institution_id from institution where city = institution.city )",
          "select city , province from institution where institution.institution_id = ( select institution_id from institution where province = institution.province )"
        ]
      ]
    },
    {
      "id": 1648,
      "db_id": "institution_sports",
      "gold": "SELECT City ,  Province FROM institution",
      "infer_predictions": [
        [
          "select city , province from institution",
          "select city , province from ( select city , province from institution ) as unique_locations"
        ]
      ]
    },
    {
      "id": 1649,
      "db_id": "institution_sports",
      "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
      "infer_predictions": [
        [
          "select max ( enrollment ) , min ( enrollment ) from institution",
          "select max ( enrollment ) as maxenrollment , min ( enrollment ) as minenrollment from institution",
          "select max ( enrollment ) as max_enrollment , min ( enrollment ) as min_enrollment from institution"
        ]
      ]
    },
    {
      "id": 1650,
      "db_id": "institution_sports",
      "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
      "infer_predictions": [
        [
          "select max ( enrollment ) , min ( enrollment ) from institution",
          "select max ( enrollment ) as maxenrollment , min ( enrollment ) as minenrollment from institution"
        ]
      ]
    },
    {
      "id": 1651,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
      "infer_predictions": [
        [
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver' or affiliation = 'Affiliation'",
          "select affiliation from institution where city != 'Vancouver' != 'Calgary'",
          "select affiliation from institution where city != 'Vancouver' != \"Calgary\""
        ]
      ]
    },
    {
      "id": 1652,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
      "infer_predictions": [
        [
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver' or affiliation = 'Affiliation'",
          "select affiliation from institution where city != 'Vancouver' or city != 'Toronto'",
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouve'"
        ]
      ]
    },
    {
      "id": 1653,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
      "infer_predictions": [
        [
          "select stadium from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1654,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
      "infer_predictions": [
        [
          "select stadium from institution order by capacity desc",
          "select stadium from ( select stadium from institution order by capacity desc ) desc",
          "select stadium from institution order by capacity desc",
          "select stadium from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1655,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
      "infer_predictions": [
        [
          "select stadium from institution where enrollment = ( select max ( enrollment ) from institution )",
          "select stadium from institution where enrollment = ( select max ( enrollment ) from institution )",
          "Select stadium from institution where enrollment = ( select max ( enrollment ) from institution )"
        ]
      ]
    },
    {
      "id": 1656,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
      "infer_predictions": [
        [
          "select stadium from institution where enrollment = ( select max ( enrollment ) from institution )",
          "select stadium from institution order by enrollment desc limit 1"
        ]
      ]
    },
    {
      "id": 1657,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1658,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
      "infer_predictions": [
        [
          "select institution.name , championship.nickname from institution join championship on institution.institution_id = championship.institution_id",
          "select institution.name , championship.nickname from championship join institution on championship.institution_id = institution.institution_id",
          "select name , nickname from institution join championship on institution.institution_id = championship.institution_id"
        ]
      ]
    },
    {
      "id": 1659,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
      "infer_predictions": [
        [
          "select name from institution where enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id order by enrollment asc limit 1",
          "select nickname from championship join institution on championship.institution_id = institution.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from institution join championship on institution.institution_id = championship.institution_id order by enrollment asc limit 1",
          "select nickname from championship join institution on championship.institution_id = institution.institution_id where enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from institution join championship on institution.institution_id = championship.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )"
        ]
      ]
    },
    {
      "id": 1660,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
      "infer_predictions": [
        [
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id order by enrollment asc limit 1",
          "select championship.nickname from institution join championship on institution.institution_id = championship.institution_id order by enrollment asc limit 1",
          "select nickname from championship join institution on championship.institution_id = institution.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id order by institution.enrollment asc limit 1",
          "select championship.nickname from institution join championship on institution.institution_id = championship.institution_id where institution.enrollment = ( select min ( enrollment ) from institution )",
          "select championship.nickname from institution join championship on institution.institution_id = championship.institution_id order by institution.enrollment asc limit 1"
        ]
      ]
    },
    {
      "id": 1661,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by number_of_championships desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by championship.number_of_championships desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id order by count ( * ) desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id order by number_of_championships desc",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id order by count ( * ) desc )",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by number_of_championships desc"
        ]
      ]
    },
    {
      "id": 1662,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by number_of_championships desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by championship.number_of_championships desc",
          "select name from institution where institution_id in ( select institution_id from championship order by number_of_championships desc )",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id order by count ( * ) desc )",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by number_of_championships desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by championship.number_of_championships desc"
        ]
      ]
    },
    {
      "id": 1663,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id having count ( * ) >= 1 )",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by institution.institution_id having count ( * ) >= 1",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id having count ( * ) > 0 )",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id having count ( * ) >= 1 )"
        ]
      ]
    },
    {
      "id": 1664,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select name from institution where institution_id in ( select institution_id from championship group by institution_id having count ( * ) >= 1 )",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by institution.institution_id having count ( * ) >= 1",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution inner join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution left join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 1665,
      "db_id": "institution_sports",
      "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
      "infer_predictions": [
        [
          "select total ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select total ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select Total ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select Total ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'"
        ]
      ]
    },
    {
      "id": 1666,
      "db_id": "institution_sports",
      "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
      "infer_predictions": [
        [
          "select total ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select total ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select Total ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select Total ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'"
        ]
      ]
    },
    {
      "id": 1667,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select distinct affiliation , count ( * ) from institution group by affiliation",
          "Select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation"
        ]
      ]
    },
    {
      "id": 1668,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from institution group by affiliation",
          "Select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select distinct affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation"
        ]
      ]
    },
    {
      "id": 1669,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( c ) from ( select count ( affiliation ) as c from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from institution group by affiliation ) tmp )",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( * ) as cnt from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( * ) = ( select max ( c ) from ( select count ( * ) as c from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( count_type ) from ( select count ( affiliation ) as count_type from institution group by affiliation ) )"
        ]
      ]
    },
    {
      "id": 1670,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from institution group by affiliation ) )",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( c ) from ( select count ( affiliation ) as c from institution group by affiliation ) )",
          "select affiliation from ( select affiliation , count ( * ) as num from institution group by affiliation ) where num = ( select max ( num ) from ( select count ( * ) as num from institution group by affiliation ) )",
          "select affiliation from ( select affiliation , count ( * ) as cnt from institution group by affiliation ) where cnt = ( select max ( c ) from ( select count ( * ) as c from institution group by affiliation ) )",
          "with rankedaffiliations as ( select affiliation , rank ( ) over ( order by count ( * ) desc ) as rank from institution group by affiliation ) select affiliation from rankedaffiliations where rank = 1",
          "with rankedaffiliation as ( select affiliation , rank ( ) over ( order by count ( * ) desc ) as rank from institution group by affiliation ) select affiliation from rankedaffiliation where rank = 1",
          "select affiliation from institution group by affiliation having count ( affiliation ) = ( select max ( cnt ) from ( select count ( affiliation ) as cnt from institution group by affiliation ) tmp )"
        ]
      ]
    },
    {
      "id": 1671,
      "db_id": "institution_sports",
      "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select founded from institution group by founded having count ( * ) > 1",
          "select distinct founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1",
          "Select founded from institution group by founded having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1672,
      "db_id": "institution_sports",
      "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select founded , count ( * ) from institution group by founded having count ( * ) > 1",
          "select founded , count ( * ) from institution group by founded having count (* ) > 1",
          "select founded , count ( * ) from institution group by founded having count ( founded ) > 1",
          "select founded , count ( * ) from institution group by founded having sum ( founded ) > 1",
          "select distinct founded , count ( * ) from institution group by founded having count ( * ) > 1",
          "select founded , count ( * ) from institution group by founded having count ( * ) > 1",
          "select count ( * ) , founded from institution group by founded having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1673,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
      "infer_predictions": [
        [
          "select c.nickname from championship c join institution i on c.institution_id = i.institution_id order by i.capacity desc",
          "select championship.nickname from championship join institution on championship.institution_id = institution.institution_id order by capacity desc",
          "select c.nickname from championship c join institution e on c.institution_id = e.institution_id order by e.capacity desc",
          "select ch.nickname from championship ch join institution e on ch.institution_id = e.institution_id order by e.capacity desc"
        ]
      ]
    },
    {
      "id": 1674,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
      "infer_predictions": [
        [
          "select c.nickname from championship c join institution i on c.institution_id = i.institution_id order by i.capacity desc"
        ]
      ]
    },
    {
      "id": 1675,
      "db_id": "institution_sports",
      "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
      "infer_predictions": [
        [
          "select sum ( enrollment ) from institution where city = 'Vancouver' or city = 'Calgary'",
          "select sum ( enrollment ) from ( select enrollment from institution where city = 'Vancouver' union select enrollment from institution where city = 'Calgary' )",
          "select sum ( enrollment ) from ( select enrollment from institution where city = 'Vancouver' or city = 'Calgary' )",
          "select sum ( enrollment ) from ( select enrollment from institution where city = 'Vancouver' or city = 'Calgary' )"
        ]
      ]
    },
    {
      "id": 1676,
      "db_id": "institution_sports",
      "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
      "infer_predictions": [
        [
          "select enrollment from institution where city = 'Vancouver' or city = 'Calgary'",
          "select enrollment from institution where city = 'Vancouver' union select enrollment from institution where city = 'Calgary'",
          "select sum ( enrollment ) from institution where city = 'Vancouver' or city = 'Calgary'",
          "select enrollment from institution where city = 'Vancouver' OR city = 'Calgary'",
          "select enrollment from institution where ( city = 'Vancouver' or city = 'Calgary' )",
          "select enrollment from institution where city = 'Vancouver'or city = 'Calgary '",
          "select null from institution where city = 'Vancouver' or city = 'Calgary'",
          "select enrollment from institution where city = 'Vancouver' union select enrollment from institution where city = 'Calgly'"
        ]
      ]
    },
    {
      "id": 1677,
      "db_id": "institution_sports",
      "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
      "infer_predictions": [
        [
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950 != 1950",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950.",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950 != 1960",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950"
        ]
      ]
    },
    {
      "id": 1678,
      "db_id": "institution_sports",
      "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
      "infer_predictions": [
        [
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950 != 1950",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950.",
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950 != 1960"
        ]
      ]
    },
    {
      "id": 1679,
      "db_id": "institution_sports",
      "gold": "SELECT count(DISTINCT Province) FROM institution",
      "infer_predictions": [
        [
          "select count ( distinct province ) from institution"
        ]
      ]
    },
    {
      "id": 1680,
      "db_id": "institution_sports",
      "gold": "SELECT count(DISTINCT Province) FROM institution",
      "infer_predictions": [
        [
          "select count ( distinct province ) from institution"
        ]
      ]
    },
    {
      "id": 1681,
      "db_id": "warehouse_1",
      "gold": "SELECT * FROM warehouses",
      "infer_predictions": [
        [
          "select * from warehouses"
        ]
      ]
    },
    {
      "id": 1682,
      "db_id": "warehouse_1",
      "gold": "SELECT * FROM warehouses",
      "infer_predictions": [
        [
          "select * from warehouses"
        ]
      ]
    },
    {
      "id": 1683,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
      "infer_predictions": [
        [
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1684,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
      "infer_predictions": [
        [
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1685,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
      "infer_predictions": [
        [
          "select contents from boxes where value > 150"
        ]
      ]
    },
    {
      "id": 1686,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
      "infer_predictions": [
        [
          "select contents from boxes where value > 150",
          "select contents from boxes where value > 150",
          "select contents from boxes where value >150"
        ]
      ]
    },
    {
      "id": 1687,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouse , avg ( value ) from boxes group by warehouse",
          "select warehouses.code , avg ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , avg ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , avg ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouse code , avg ( value ) from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1688,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select avg ( value ) , warehouse from boxes group by warehouse",
          "select avg ( boxes.value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select avg ( boxes.value ) , warehouse from boxes group by warehouse",
          "select avg ( value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select avg ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select avg ( boxes.value ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1689,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes",
          "select avg (value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1690,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1691,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select avg ( capacity ) , sum ( capacity ) from warehouses",
          "select avg ( capacity ) , sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1692,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select avg ( capacity ) , sum ( capacity ) from warehouses",
          "select avg ( capacity ) , sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1693,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , avg ( value ) , max ( value ) from boxes group by contents",
          "select avg ( value ) , max ( value ) , contents from boxes group by contents",
          "select contents , avg ( value ) , max ( value ) from boxes group by contents",
          "select contents , avg ( value ) , max ( value ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1694,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , avg ( value ) , max ( value ) from boxes group by contents",
          "select avg ( value ) , max ( value ) , contents from boxes group by contents",
          "select contents , avg ( value ) , max ( value ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1695,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
      "infer_predictions": [
        [
          "select contents from boxes group by contents order by sum ( value ) desc limit 1",
          "select contents from boxes group by contents having sum ( value ) = ( select max ( total ) from ( select sum ( value ) as total from boxes group by contents ) )",
          "select contents from boxes group by contents having sum ( value ) = ( select max ( total_value ) from ( select sum ( value ) as total_value from boxes group by contents ) )",
          "select contents from ( select contents , sum ( value ) as total_value from boxes group by contents ) where total_value = ( select max ( total_value ) from ( select sum ( value ) as total_value from boxes group by contents ) )"
        ]
      ]
    },
    {
      "id": 1696,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
      "infer_predictions": [
        [
          "select contents from boxes group by contents order by sum ( value ) desc limit 1",
          "select contents from boxes where value = ( select max ( value ) from boxes )",
          "select contents from boxes group by contents having sum ( value ) = ( select max ( total ) from ( select sum ( value ) as total from boxes group by contents ) )",
          "select contents from boxes group by contents having sum ( value ) = ( select max ( total_value ) from ( select sum ( value ) as total_value from boxes group by contents ) )"
        ]
      ]
    },
    {
      "id": 1697,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1698,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) from boxes",
          "select avg (value ) from boxes",
          "select avg ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1699,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes",
      "infer_predictions": [
        [
          "select distinct contents from boxes",
          "select distinct ( contents ) from boxes"
        ]
      ]
    },
    {
      "id": 1700,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes",
      "infer_predictions": [
        [
          "select distinct contents from boxes"
        ]
      ]
    },
    {
      "id": 1701,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
      "infer_predictions": [
        [
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes"
        ]
      ]
    },
    {
      "id": 1702,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
      "infer_predictions": [
        [
          "select count ( distinct contents ) from boxes"
        ]
      ]
    },
    {
      "id": 1703,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
      "infer_predictions": [
        [
          "select distinct location from warehouses",
          "select distinct location from ( select distinct location from warehouses )",
          "select distinct ( location ) from warehouses"
        ]
      ]
    },
    {
      "id": 1704,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
      "infer_predictions": [
        [
          "select distinct location from warehouses",
          "select distinct location from ( select location from warehouses )",
          "select distinct ( location ) from warehouses",
          "select distinct location from warehouses"
        ]
      ]
    },
    {
      "id": 1705,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select code from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select warehouse from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select code from boxes where warehouse in ( select distinct code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select distinct boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1706,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select code from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' union select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select warehouse from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select distinct boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1707,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( value ) from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select sum ( value ) from ( select boxes.value from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location in ( 'Chicago' , 'New York' ) )",
          "select sum ( value ) from boxes where warehouse in ( select warehouse from warehouses where location in ( 'Chicago' , 'New York' ) )"
        ]
      ]
    },
    {
      "id": 1708,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( value ) from boxes where warehouse in ( select code from warehouses where location in ( 'Chicago' , 'New York' ) )",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York City'"
        ]
      ]
    },
    {
      "id": 1709,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' union select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' union select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' union select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' union select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1710,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1711,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select distinct contents from boxes where warehouse not in ( select code from warehouses where location = 'New York' )",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'New York'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'New York'",
          "select distinct contents from boxes where warehouse not in ( select warehouse from warehouses where location = 'New York' )",
          "select contents from boxes where warehouse not in ( select code from warehouses where location = 'New York' )",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'New York'"
        ]
      ]
    },
    {
      "id": 1712,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select contents from boxes where warehouse not in ( select code from warehouses where location = 'New York' )",
          "select distinct contents from boxes where warehouse not in ( select code from warehouses where location = 'New York' )",
          "select distinct contents from boxes where warehouse not in ( select distinct code from warehouses where location = 'New York' )",
          "select contents from boxes where warehouse not in ( select distinct code from warehouses where location = 'New York' )"
        ]
      ]
    },
    {
      "id": 1713,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and not boxes.contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1714,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select distinct w.location from warehouses w join boxes b on w.code = b.warehouse where b.contents = 'Rocks' and w.code not in ( select b.warehouse from boxes b where b.contents = 'Scissors' )",
          "select distinct w.location from warehouses w join boxes b on w.code = b.code where b.contents = 'Rocks' and w.code not in ( select b.warehouse from boxes b where b.contents = 'Scissors' )",
          "select distinct w.location from warehouses w inner join boxes b on w.code = b.warehouse where b.contents = 'Rocks' and w.code not in ( select b.warehouse from boxes b where b.contents = 'Scissors' )",
          "select distinct w.location from warehouses w join boxes b on w.code = b.warehouse where b.contents = 'Rocks' and w.code not in ( select b2.warehouse from boxes b2 where b2.contents = 'Scissors' )",
          "select distinct warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' except select distinct warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1715,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
      "infer_predictions": [
        [
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1716,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
      "infer_predictions": [
        [
          "select distinct warehouse from boxes where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouse from boxes where contents = 'Rock' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rock' or boxes.contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1717,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks and Scissors'",
          "select location from warehouses where exists ( select 1 from boxes where boxes.warehouse = warehouses.code and contents = 'Rocks and Scissors' )",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks and Scissors'",
          "select location from warehouses where exists ( select 1 from boxes where boxes.warehouse = warehouses.code and boxes.contents = 'Rocks and Scissors' )",
          "select location from warehouses where code in ( select warehouse from boxes where contents = 'Rocks and Scissors' )"
        ]
      ]
    },
    {
      "id": 1718,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select distinct warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select distinct warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks and Scissors'"
        ]
      ]
    },
    {
      "id": 1719,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc",
          "select code , contents from boxes order by value asc"
        ]
      ]
    },
    {
      "id": 1720,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc",
          "select code ,contents from boxes order by value asc"
        ]
      ]
    },
    {
      "id": 1721,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
      "infer_predictions": [
        [
          "select code , contents from boxes where value = ( select min ( value ) from boxes )",
          "select code , contents from boxes where value = ( select min ( value ) from boxes )"
        ]
      ]
    },
    {
      "id": 1722,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
      "infer_predictions": [
        [
          "select code , contents from boxes where value = ( select min ( value ) from boxes )",
          "select code , contents from boxes where value = ( select min ( value ) from boxes )"
        ]
      ]
    },
    {
      "id": 1723,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
      "infer_predictions": [
        [
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )",
          "select contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where exists ( select 1 from boxes where value > ( select avg ( value ) from boxes ) )",
          "select distinct contents from boxes where exists ( select 1 from boxes where contents > ( select avg ( value ) from boxes ) )",
          "select distinct contents from boxes where exists ( select 1 from boxes where contents = '*' and value > ( select avg ( value ) from boxes ) )"
        ]
      ]
    },
    {
      "id": 1724,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
      "infer_predictions": [
        [
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where exists ( select 1 from boxes where contents > ( select avg ( value ) from boxes ) )",
          "select contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where exists ( select 1 from boxes where value > ( select avg ( value ) from boxes ) )",
          "select distinct contents from boxes where exists ( select 1 from boxes where contents = 'empty' and value > ( select avg ( value ) from boxes ) )",
          "select distinct contents from boxes where exists ( select 1 from boxes where contents = 'text' and value > ( select avg ( value ) from boxes ) )"
        ]
      ]
    },
    {
      "id": 1725,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
      "infer_predictions": [
        [
          "select distinct contents from boxes order by contents asc"
        ]
      ]
    },
    {
      "id": 1726,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
      "infer_predictions": [
        [
          "select distinct contents from boxes order by contents asc",
          "select distinct ( contents ) from boxes order by contents asc",
          "select distinct contents from boxes order by contents asc"
        ]
      ]
    },
    {
      "id": 1727,
      "db_id": "warehouse_1",
      "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
      "infer_predictions": [
        [
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes b where b.value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rock' )"
        ]
      ]
    },
    {
      "id": 1728,
      "db_id": "warehouse_1",
      "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
      "infer_predictions": [
        [
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select b.code from boxes b where b.value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select b.code from boxes b where b.value > ( select max ( b2.value ) from boxes b2 where b2.contents = 'Rocks' )",
          "select code from boxes b where b.value > ( select max ( value ) from boxes where contents = 'Rocks' )"
        ]
      ]
    },
    {
      "id": 1729,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
      "infer_predictions": [
        [
          "select code , contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select code , contents from boxes b where b.value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select code , contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissor' )"
        ]
      ]
    },
    {
      "id": 1730,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
      "infer_predictions": [
        [
          "select b.code , b.contents from boxes b where b.value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select b.code , b.contents from boxes b where b.value > ( select max ( b2.value ) from boxes b2 where b2.contents = 'Scissors' )",
          "select b.code , b.contents from boxes b where b.value > ( select max ( value ) from boxes b where b.contents = 'Scissors' )",
          "select boxes.code , boxes.contents from boxes where boxes.value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select x.code , x.contents from boxes x where x.value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select code , contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissors' )"
        ]
      ]
    },
    {
      "id": 1731,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( value ) from boxes where warehouse in ( select code from warehouses where capacity = ( select max ( capacity ) from warehouses ) )",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select total ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select total ( boxes.value ) from boxes inner join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )"
        ]
      ]
    },
    {
      "id": 1732,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( value ) from boxes where warehouse in ( select code from warehouses where capacity = ( select max ( capacity ) from warehouses ) )",
          "select sum ( value ) from boxes where warehouse in ( select warehouse from warehouses where capacity = ( select max ( capacity ) from warehouses ) )",
          "select sum ( value ) from boxes where warehouse in ( select warehouses.code from warehouses where capacity = ( select max ( capacity ) from warehouses ) )",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from boxes where warehouse in ( select warehouses.code from warehouses where capacity = ( select max ( capacity ) from warehouses ) )"
        ]
      ]
    },
    {
      "id": 1733,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
      "infer_predictions": [
        [
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select warehouse code , avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select warehouse and avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select warehouse + avg ( value ) from boxes group by warehouse having avg ( value ) > 150"
        ]
      ]
    },
    {
      "id": 1734,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
      "infer_predictions": [
        [
          "select avg ( value ) , warehouse from boxes group by warehouse having avg ( value ) > 150",
          "select avg ( boxes.value ) , warehouse from boxes group by warehouse having avg ( boxes.value ) > 150",
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select avg ( boxes.value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( boxes.value ) > 150"
        ]
      ]
    },
    {
      "id": 1735,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , sum ( value ) , count ( * ) from boxes group by contents",
          "select sum ( value ) , count ( * ) , contents from boxes group by contents",
          "select contents , sum ( value ) as total_value , count ( * ) as total_boxes from boxes group by contents",
          "select contents , sum ( value ) , count ( * ) from boxes group by contents",
          "select contents , sum ( value ) as total_boxes from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1736,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , sum ( value ) , count ( * ) from boxes group by contents",
          "select sum ( value ) , count ( * ) from boxes group by contents",
          "select sum ( value ) , count ( * ) , contents from boxes group by contents",
          "select sum ( boxes.value ) , count ( * ) from boxes group by contents",
          "select contents , sum ( value ) as total_value , count ( * ) from boxes group by contents",
          "select contents , sum ( value ) , count ( * ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1737,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location"
        ]
      ]
    },
    {
      "id": 1738,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location",
          "select location , sum ( capacity ) , avg ( capacity ) , max ( capacity ) from warehouses group by location",
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location"
        ]
      ]
    },
    {
      "id": 1739,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select sum ( capacity ) from warehouses",
          "select sum ( capacity ) from warehouses where location in ( select location from warehouses )",
          "select sum ( capacity ) from warehouses where location = 'NYC'",
          "select sum ( capacity ) from warehouses where location is not null",
          "select sum ( capacity ) from warehouses where location = 'City'"
        ]
      ]
    },
    {
      "id": 1740,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select sum ( capacity ) from warehouses",
          "select sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1741,
      "db_id": "warehouse_1",
      "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
      "infer_predictions": [
        [
          "select warehouses.location , max ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select max ( boxes.value ) , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouse , max ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select warehouse , max ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select max ( boxes.value ) , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select warehouses.location , sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location"
        ]
      ]
    },
    {
      "id": 1742,
      "db_id": "warehouse_1",
      "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
      "infer_predictions": [
        [
          "select warehouses.location , max ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select max ( boxes.value ) , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select max ( boxes.value ) , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select sum ( boxes.value ) , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select ( boxes.value ) , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location"
        ]
      ]
    },
    {
      "id": 1743,
      "db_id": "warehouse_1",
      "gold": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select w.code , count ( * ) from warehouses w left join boxes b on w.code = b.warehouse group by w.code",
          "select warehouses.code , count ( * ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1744,
      "db_id": "warehouse_1",
      "gold": "select warehouse ,  count(*) from boxes group by warehouse",
      "infer_predictions": [
        [
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouse , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select sub.warehouse , count ( * ) from boxes sub group by sub.warehouse",
          "select distinct warehouse , count ( * ) from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1745,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
      "infer_predictions": [
        [
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rock'"
        ]
      ]
    },
    {
      "id": 1746,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
      "infer_predictions": [
        [
          "select count ( distinct warehouse ) from boxes where contents = 'Rocks'",
          "select count ( distinct warehouse ) from boxes where contents = 'Rock'"
        ]
      ]
    },
    {
      "id": 1747,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
      "infer_predictions": [
        [
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code group by b.code",
          "select boxes.code , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code group by b.warehouse",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code where w.location = 'Boston'",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code where w.location = 'Chicago'",
          "select b.code , w.location from boxes b join warehouses w on b.warehouse = w.code where w.location = 'Dallas'"
        ]
      ]
    },
    {
      "id": 1748,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
      "infer_predictions": [
        [
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code",
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code",
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes. warehouse"
        ]
      ]
    },
    {
      "id": 1749,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select boxes.warehouse from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select distinct boxes.warehouse from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select boxes.warehouse from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select distinct boxes.warehouse from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select distinct boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select distinct boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1750,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicagoland'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'"
        ]
      ]
    },
    {
      "id": 1751,
      "db_id": "warehouse_1",
      "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select sub.warehouse , count ( * ) from boxes sub group by sub.warehouse",
          "select warehouse , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouse",
          "select warehouse , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1752,
      "db_id": "warehouse_1",
      "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , count ( * ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select count ( * ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouse , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1753,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouse",
          "select warehouse , count ( distinct contents ) from boxes group by warehouse",
          "select count ( distinct boxes.contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1754,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select count ( distinct boxes.contents ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct boxes.contents ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1755,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
      "infer_predictions": [
        [
          "select code from warehouses where capacity > 0",
          "select code from warehouses where capacity > 100",
          "select code from warehouses where capacity > 'capacity'"
        ]
      ]
    },
    {
      "id": 1756,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1757,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
      "infer_predictions": [
        [
          "select sum ( value ) from boxes where warehouse not in ( select code from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicago' )",
          "select total ( value ) from boxes where warehouse not in ( select code from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select code from warehouses where location = 'Chicagoland' )"
        ]
      ]
    },
    {
      "id": 1758,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicago'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'Chicago'",
          "select total ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'Chicago'",
          "select total ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicago'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicago'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'Chicago'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicagoland'"
        ]
      ]
    },
    {
      "id": 1759,
      "db_id": "university_rank",
      "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
      "infer_predictions": [
        [
          "select university_name , city , state from university order by university_name asc",
          "select university.university_name , university.city , university.state from university order by university.university_name asc",
          "select university_name , city , state from university order by university_name asc",
          "select university_name , city , state from university order by university_name asc",
          "select university_name , state , city from university order by university_name asc",
          "select university_Name , city , state from university order by university_name asc"
        ]
      ]
    },
    {
      "id": 1760,
      "db_id": "university_rank",
      "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
      "infer_predictions": [
        [
          "select university_name , city , state from university order by university_name asc",
          "select university_name , city , state from university order by university.university_name asc",
          "select university_name , state , city from university order by university_name asc",
          "select university_name , city , state from university order by university_Name asc",
          "select university_name , city , state from university order by university_name asc"
        ]
      ]
    },
    {
      "id": 1761,
      "db_id": "university_rank",
      "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
      "infer_predictions": [
        [
          "select count ( * ) from university where state = 'IL' or state = 'OH'",
          "select count ( * ) from ( select university_id from university where state = 'IL' union select university_id from university where state = 'OH' )",
          "select count ( * ) from ( select state from university where state in ( 'IL' , 'OH' ) )",
          "select count ( * ) from ( select university_id from university where state in ( 'IL' , 'OH' ) )",
          "select count ( * ) from ( select count ( * ) from university where state = 'IL' union select state from university where state = 'OH' )",
          "select count ( * ) from university where state = 'IL' or state = 'OHI'",
          "select count ( * ) from ( select state from university where state = 'IL' union select state from university where state = 'OH' )",
          "select count ( * ) from university where state = 'IL' or state = 'OHIO'"
        ]
      ]
    },
    {
      "id": 1762,
      "db_id": "university_rank",
      "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
      "infer_predictions": [
        [
          "select count ( * ) from university where state = 'IL' or state = 'OH'",
          "select count ( * ) from ( select university_id from university where state = 'IL' union select university_id from university where state = 'OH' )",
          "select count ( * ) from ( select university_id from university where state in ( 'IL' , 'OH' ) )",
          "select count ( * ) from ( select * from university where state in ( 'IL' , 'OH' ) )",
          "select count ( * ) from ( select state from university where state in ( 'IL' , 'OH' ) )",
          "select count ( * ) from university where state in ( 'IL' , 'OH' )",
          "select count ( * ) from university where state = 'IL' or state = 'OHI'",
          "select count ( * ) from university where state = 'IL' or state = 'OHIO'"
        ]
      ]
    },
    {
      "id": 1763,
      "db_id": "university_rank",
      "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
      "infer_predictions": [
        [
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment )  , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment )  , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university"
        ]
      ]
    },
    {
      "id": 1764,
      "db_id": "university_rank",
      "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
      "infer_predictions": [
        [
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment )  , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment )  , min ( enrollment ) from university"
        ]
      ]
    },
    {
      "id": 1765,
      "db_id": "university_rank",
      "gold": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
      "infer_predictions": [
        [
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select Avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "Select team_name from university where enrollment > ( select avg ( enrollment ) from university )"
        ]
      ]
    },
    {
      "id": 1766,
      "db_id": "university_rank",
      "gold": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
      "infer_predictions": [
        [
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select Avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )"
        ]
      ]
    },
    {
      "id": 1767,
      "db_id": "university_rank",
      "gold": "SELECT DISTINCT home_conference FROM University",
      "infer_predictions": [
        [
          "select home_conference from university"
        ]
      ]
    },
    {
      "id": 1768,
      "db_id": "university_rank",
      "gold": "SELECT DISTINCT home_conference FROM University",
      "infer_predictions": [
        [
          "select distinct home_conference from university"
        ]
      ]
    },
    {
      "id": 1769,
      "db_id": "university_rank",
      "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
      "infer_predictions": [
        [
          "select home_conference , count ( * ) from university group by home_conference",
          "select ( select home_conference from university group by home_conference ) , count ( * ) from university group by home_conference",
          "select sub.home_conference , count ( * ) from university sub group by sub.home_conference",
          "select home_conference , count ( * ) from university group by home_conference"
        ]
      ]
    },
    {
      "id": 1770,
      "db_id": "university_rank",
      "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
      "infer_predictions": [
        [
          "select home_conference , count ( * ) from university group by home_conference",
          "select count ( * ) , home_conference from university group by home_conference"
        ]
      ]
    },
    {
      "id": 1771,
      "db_id": "university_rank",
      "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from university group by state having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from university group by state ) )",
          "select state from university group by state having count ( * ) = ( select max ( total ) from ( select count ( * ) as total from university group by state ) )",
          "select state from ( select state , count ( * ) as num_universities from university group by state ) where num_universities = ( select max ( num_universities ) from ( select count ( * ) as num_universities from university group by state ) )",
          "select state from university group by state having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from university group by state ) )",
          "select state from university group by state having count ( * ) = ( select max ( university_count ) from ( select count ( * ) as university_count from university group by state ) )",
          "select state from university group by state having count ( * ) = ( select max ( campus_count ) from ( select count ( * ) as campus_count from university group by state ) )"
        ]
      ]
    },
    {
      "id": 1772,
      "db_id": "university_rank",
      "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from university group by state having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from university group by state ) )",
          "select state from university group by state having count ( university_id ) = ( select max ( cnt ) from ( select count ( university_id ) as cnt from university group by state ) )",
          "select state from university group by state having count ( university_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from university group by state ) )",
          "select state from ( select state , count ( university_id ) as num_universities from university group by state ) where num_universities = ( select max ( num_universities ) from ( select count ( university_id ) as num_universities from university group by state ) )",
          "select state from university group by state having count ( university_id ) = ( select max ( num_universities ) from ( select count ( university_id ) as num_universities from university group by state ) )",
          "select state from university group by state having count (* ) = ( select max ( cnt ) from ( select count ( * ) as cnt from university group by state ) )",
          "select state from university group by state having count ( university_id ) = ( select max ( total ) from ( select count ( university_id ) as total from university group by state ) )"
        ]
      ]
    },
    {
      "id": 1773,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000",
          "select home_conference from ( select home_conference , avg ( enrollment ) as average_enrollment from university group by home_conference ) where average_enrollment > 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000"
        ]
      ]
    },
    {
      "id": 1774,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000",
          "select home_conference from ( select home_conference , avg ( enrollment ) as average_enrollment from university group by home_conference ) where average_enrollment > 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000"
        ]
      ]
    },
    {
      "id": 1775,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference order by sum ( enrollment ) asc limit 1",
          "select home_conference from ( select home_conference , sum ( enrollment ) as total_enrollment from university group by home_conference ) where total_enrollment = ( select min ( total_enrollment ) from ( select sum ( enrollment ) as total_enrollment from university group by home_conference ) )",
          "select home_conference from ( select home_conference , sum ( enrollment ) as total from university group by home_conference ) where total = ( select min ( total ) from ( select sum ( enrollment ) as total from university group by home_conference ) )",
          "select home_conference from ( select home_conference , sum ( enrollment ) as total_enrollment from university group by home_conference ) where total_enrollment = ( select min ( total_enrollment ) from ( select sum ( enrollment ) as total_enrollment from university group by home_conference ) )",
          "select home_conference from ( select home_conference , sum ( enrollment ) as total_enrollment from university group by home_conference order by total_enrollment asc limit 1 )"
        ]
      ]
    },
    {
      "id": 1776,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
      "infer_predictions": [
        [
          "select home_conference from university where enrollment = ( select min ( enrollment ) from university )",
          "select home_conference from ( select home_conference , min ( enrollment ) as min_enrollment from university group by home_conference ) where min_enrollment = ( select min ( enrollment ) from university )"
        ]
      ]
    },
    {
      "id": 1777,
      "db_id": "university_rank",
      "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
      "infer_predictions": [
        [
          "select major_name , major_code from major order by major_code asc",
          "select major_name , major_code from major order by major_code asc",
          "select major_name , major_code from major order by major_code Asc"
        ]
      ]
    },
    {
      "id": 1778,
      "db_id": "university_rank",
      "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
      "infer_predictions": [
        [
          "select major_name , major_code from major order by major_code asc",
          "select major_name , major_code from major order by major_code asc",
          "select major_name , major_code from major order by major_Code asc",
          "select major_Name , major_code from major order by major_code asc"
        ]
      ]
    },
    {
      "id": 1779,
      "db_id": "university_rank",
      "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
      "infer_predictions": [
        [
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where university.university_name = 'Augustana College'",
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major.major_name , major_ranking.rank from major join major_ranking on major.major_id = major_ranking.major_id join university on university.university_id = major_ranking.university_id where university.university_name = 'Augustana College'",
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Auburn College'",
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where university.university_name = 'Augustana College'"
        ]
      ]
    },
    {
      "id": 1780,
      "db_id": "university_rank",
      "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
      "infer_predictions": [
        [
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Auburn College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Auburn College'"
        ]
      ]
    },
    {
      "id": 1781,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1782,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
      "infer_predictions": [
        [
          "select university_name , city , state from university where university_id in ( select university_id from major_ranking where major_id = ( select max ( rank ) from major_ranking where major_id = 'Accounting' ) )",
          "select u.university_name , u.city , u.state from university u join major_ranking mr on u.university_id = mr.university_id where mr.rank = 1 and mr.major_id = 'Accounting'"
        ]
      ]
    },
    {
      "id": 1783,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by university.university_id order by count ( * ) desc limit 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by major_ranking.university_id order by count ( * ) desc limit 1",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( count ) from ( select count ( major_id ) as count from major_ranking where rank = 1 group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking where rank = 1 group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( counts ) from ( select count ( major_id ) as counts from major_ranking where rank = 1 group by university_id ) ) )",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by university.university_name order by count ( * ) desc limit 1",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( * ) as cnt from major_ranking where rank = 1 group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( count ) from ( select count ( * ) as count from major_ranking where rank = 1 group by university_id ) ) )"
        ]
      ]
    },
    {
      "id": 1784,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id order by count ( major_id ) desc limit 1 )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id order by count ( * ) desc limit 1 )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking where rank = 1 group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking where rank = 1 group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking group by university_id ) ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking group by university_id having count ( major_id ) = ( select max ( cnt ) from ( select count ( major_id ) as cnt from major_ranking where rank = 1 ) ) )"
        ]
      ]
    },
    {
      "id": 1785,
      "db_id": "university_rank",
      "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
      "infer_predictions": [
        [
          "select university_name from university where university_id not in ( select university_id from major_ranking where rank = 1 )",
          "select university_name from university where not exists ( select 1 from major_ranking where major_ranking.university_id = university.university_id and major_ranking.rank = 1 )",
          "select university_name from university left join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 is null",
          "select university_name from university where not exists ( select 1 from major_ranking where major_ranking.university_id = university.university_id and rank = 1 )",
          "select university_name from university where university_id not in ( select university_id from major_ranking where rank = 1 )"
        ]
      ]
    },
    {
      "id": 1786,
      "db_id": "university_rank",
      "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
      "infer_predictions": [
        [
          "select university_name from university where university_id not in ( select university_id from major_ranking where rank = 1 )",
          "select university_name from university where university_id not in ( select university_id from major_ranking where rank = 1 )",
          "select university_name from university where university_id in ( select university_id from major_ranking where rank = 1 )",
          "select university_name from university where university_id not in ( select university_id from major_ranking where rank = 1 )"
        ]
      ]
    },
    {
      "id": 1787,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Accounting' intersect select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'",
          "select university_name from university where university_id in ( select university_id from major_ranking join major on major_ranking.major_id = major.major_id where major_name = 'Accounting' intersect select university_id from major_ranking join major on major_ranking.major_id = major.major_id where major_name = 'Urban Education' )",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Accounting' intersect select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'United Education'"
        ]
      ]
    },
    {
      "id": 1788,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'United Education'",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major_ranking.major_id where major.major_name = 'Urban Education'",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major.major_id = major.major_id where major.major_name = 'Urban Education'"
        ]
      ]
    },
    {
      "id": 1789,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.University_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from overall_ranking join university on overall_ranking.university_id = university.university_id where university.state = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1790,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'WI'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'WI'",
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1791,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from overall_ranking order by research_point desc limit 1 )",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.research_point desc limit 1",
          "select university_name from university where university_id in ( select university_id from overall_ranking where research_point = ( select max ( research_point ) from overall_ranking ) )",
          "select university_name from university where university_id = ( select max ( research_point ) from overall_ranking )",
          "select university_name from university inner join ( select university_id , max ( research_point ) as max_research from overall_ranking group by university_id ) as max_ranking on university.university_id = max_ranking.university_id",
          "select university_name from university where university_id in ( select university_id from overall_ranking group by university_id order by sum ( research_point ) desc limit 1 )",
          "select university_name from university where university_id in ( select university_id from overall_ranking group by university_id order by research_point desc limit 1 )",
          "select university_name from university where university_id in ( select university_id from overall_ranking )"
        ]
      ]
    },
    {
      "id": 1792,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) )",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.research_point desc limit 1",
          "select university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) top_ranking on university.university_id = top_ranking.university_id",
          "select university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) as max_ranking on university.university_id = max_ranking.university_id",
          "select university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) as maxres on university.university_id = maxres.university_id",
          "select university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) as maxranking on university.university_id = maxranking.university_id",
          "select university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) as maxresearch on university.university_id = maxresearch.university_id",
          "select university.university_name from university join ( select university_id from overall_ranking group by university_id having sum ( research_point ) = ( select max ( total ) from ( select sum ( research_point ) as total from overall_ranking group by university_id ) ) ) top_ranking on university.university_id = top_ranking.university_id"
        ]
      ]
    },
    {
      "id": 1793,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
      "infer_predictions": [
        [
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point asc",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point asc"
        ]
      ]
    },
    {
      "id": 1794,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from overall_ranking order by reputation_point asc )",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point asc"
        ]
      ]
    },
    {
      "id": 1795,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from major_ranking where major_id in ( select major_id from major where rank >= 3 ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where major_id = 'Accounting' and rank >= 3 )"
        ]
      ]
    },
    {
      "id": 1796,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
      "infer_predictions": [
        [
          "select university_name from university where university_id in ( select university_id from major_ranking where major_id in ( select major_id from major where rank >= 3 ) )",
          "select university_name from university where university_id in ( select university_id from major_ranking where major_id = 'Accounting' and rank >= 3 )"
        ]
      ]
    },
    {
      "id": 1797,
      "db_id": "university_rank",
      "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
      "infer_predictions": [
        [
          "select sum ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank <= 5 )",
          "select sum ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank < 5 )",
          "select sum ( enrollment ) from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank <= 5"
        ]
      ]
    },
    {
      "id": 1798,
      "db_id": "university_rank",
      "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
      "infer_predictions": [
        [
          "select total ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank <= 5 )",
          "select sum ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank <= 5 )",
          "select total ( enrollment ) from university inner join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank <= 5",
          "select total ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank < 5 )",
          "select total ( enrollment ) from university where university_id in ( select university_id from overall_ranking where rank <= 5 )"
        ]
      ]
    },
    {
      "id": 1799,
      "db_id": "university_rank",
      "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3",
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id where overall_ranking.reputation_point >= 3"
        ]
      ]
    },
    {
      "id": 1800,
      "db_id": "university_rank",
      "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point desc limit 3",
          "select u.university_name , o.citation_point from university u inner join overall_ranking o on u.university_id = o.university_id order by o.reputation_point desc limit 3"
        ]
      ]
    },
    {
      "id": 1801,
      "db_id": "university_rank",
      "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select count ( * ) from ( select state from university where enrollment < 3000 group by state having count ( * ) > 2 )",
          "select count ( * ) , state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment <= 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment < 3000 group by state having count ( * ) >2",
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 1802,
      "db_id": "university_rank",
      "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from ( select state from university where enrollment < 3000 group by state having count ( * ) > 2 )",
          "select state from university where enrollment <= 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 1803,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select title from movies where rating = 'null'",
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating not in ( select title from movies )",
          "select title from movies where rating Not in ( select title from movies )",
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating Not in ( select rating from movies )",
          "select title from movies where rating = 'Null'"
        ]
      ]
    },
    {
      "id": 1804,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating = 'null'",
          "select title from movies where rating not in ( select title from movies )",
          "select title from movies where rating Not in ( select rating from movies )",
          "select title from movies where rating NOT in ( select rating from movies )",
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating NOT IN ( select rating from movies )"
        ]
      ]
    },
    {
      "id": 1805,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select title from movies where rating = 'G'",
          "select title from movies where rating = 'G'"
        ]
      ]
    },
    {
      "id": 1806,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select title from movies where rating = 'G'",
          "select title from movies where rating = 'G'",
          "select title from movies where rating = 'G%'",
          "Select title from movies where rating = 'G'",
          "select title from movies where rating = 'G'"
        ]
      ]
    },
    {
      "id": 1807,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Adeon'"
        ]
      ]
    },
    {
      "id": 1808,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Adeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Adeon'"
        ]
      ]
    },
    {
      "id": 1809,
      "db_id": "movie_2",
      "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code"
        ]
      ]
    },
    {
      "id": 1810,
      "db_id": "movie_2",
      "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie",
          "select movies.title , movietheaters.Name from movies join movietheaters on movies.code = movietheaters.movie"
        ]
      ]
    },
    {
      "id": 1811,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G%'",
          "select count ( * ) from movies where rating = 'G' != 'M'"
        ]
      ]
    },
    {
      "id": 1812,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G%'",
          "select count ( * ) from movies where rating = 'G'"
        ]
      ]
    },
    {
      "id": 1813,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( * ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( * ) from ( select movie from movietheaters )",
          "select count ( * ) from ( select distinct movie from movietheaters )",
          "select count ( * ) from ( select movie from movietheaters group by movie )",
          "select count ( * ) from ( select movie , code from movietheaters )"
        ]
      ]
    },
    {
      "id": 1814,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( * ) from movietheaters",
          "select count ( * ) from ( select movie , code from movietheaters )",
          "select count ( distinct movie ) from movietheaters",
          "select count ( * ) from ( select movie from movietheaters )",
          "select count ( * ) from ( select movie from movietheaters group by movie )",
          "select count ( * ) from movies join movietheaters on movies.code = movietheaters.movie",
          "select count ( * ) from ( select movie , code from movietheaters group by movie )",
          "select count ( * ) from ( select distinct movie from movietheaters )"
        ]
      ]
    },
    {
      "id": 1815,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1816,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from ( select movietheaters.movie from movietheaters )",
          "select count ( distinct movie ) from ( select movietheaters.movie , movies.title , movies.rating from movietheaters join movies on movietheaters.movie = movies.code )",
          "select count ( distinct movie ) from ( select movietheaters.movie , movies.code from movietheaters join movies on movietheaters.movie = movies.code )",
          "select count ( distinct movie ) from ( select movie from movietheaters )",
          "select count ( distinct movie ) from ( select movietheaters.movie from movietheaters  join movies on movietheaters.movie = movies.code )"
        ]
      ]
    },
    {
      "id": 1817,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT name) FROM movietheaters",
      "infer_predictions": [
        [
          "select count ( distinct code ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1818,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT name) FROM movietheaters",
      "infer_predictions": [
        [
          "select count ( distinct code ) from movietheaters",
          "select count ( distinct code ) from movietheaters",
          "select count ( * ) from movietheaters",
          "select count ( distinct code ) from movietheaters",
          "select count ( distinct code ) from movietheaters",
          "select count ( distinct name ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1819,
      "db_id": "movie_2",
      "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
      "infer_predictions": [
        [
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where instr ( title , 'Citizen' ) > 0",
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' or title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' or title like '%Movie%'"
        ]
      ]
    },
    {
      "id": 1820,
      "db_id": "movie_2",
      "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
      "infer_predictions": [
        [
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where instr ( title , 'Citizen' ) > 0",
          "select rating from movies where title like '%Citizen%' or title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' and title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' or title like '%Movie%'"
        ]
      ]
    },
    {
      "id": 1821,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
      "infer_predictions": [
        [
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select distinct movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'",
          "select name from movietheaters where code in ( select code from movies where rating = 'G' or rating = 'PG' )",
          "select name from movietheaters where code in ( select code from movies where rating in ( 'G' , 'PG' ) )",
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select name from movietheaters where movie in ( select code from movies where rating = 'G' or rating = 'PG' )",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'PG' or movies.rating = 'G'"
        ]
      ]
    },
    {
      "id": 1822,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'",
          "select name from movietheaters where movie in ( select code from movies where rating in ( 'G' , 'PG' ) )",
          "select name from movietheaters where movie in ( select movie from movies where rating in ( 'G' , 'PG' ) )",
          "select name from movietheaters where code in ( select code from movies where rating in ( 'G' , 'PG' ) )",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select name from movietheaters where movie in ( select code from movies where rating = 'G' or rating = 'PG' )"
        ]
      ]
    },
    {
      "id": 1823,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select distinct movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.Name = 'Odeon' or movietheaters.Name = 'Imperial'",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Adeon' or movietheaters.name = 'Imperial'",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial' or movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'"
        ]
      ]
    },
    {
      "id": 1824,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select title from movies where code in ( select movie from movietheaters where name in ( 'Odeon' , 'Imperial' ) )",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where ( movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial' )",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'The Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'The Odeon' or movietheaters.name = 'The Imperial'"
        ]
      ]
    },
    {
      "id": 1825,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' intersect select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Adeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Independent'"
        ]
      ]
    },
    {
      "id": 1826,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movie from movietheaters where name = 'Odeon' intersect select movie from movietheaters where name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movie from movietheaters where name = 'The Odeon' intersect select movie from movietheaters where name = 'Imperial'",
          "select movie from movietheaters where name = 'Odeon' intersect select movie from movietheaters where name = 'Imperial'",
          "select movie from movietheaters where name = 'Adeon' intersect select movie from movietheaters where name = 'Imperial'"
        ]
      ]
    },
    {
      "id": 1827,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select movies.title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select distinct movies.title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select distinct title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )"
        ]
      ]
    },
    {
      "id": 1828,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select movies.title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name != 'Odeon'",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name != 'Odeon'",
          "select movies.title from movies where movies.code not in ( select movie from movietheaters where name = 'Odeon' )"
        ]
      ]
    },
    {
      "id": 1829,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY title",
      "infer_predictions": [
        [
          "select title from movies order by title asc"
        ]
      ]
    },
    {
      "id": 1830,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY title",
      "infer_predictions": [
        [
          "select title from movies order by title asc"
        ]
      ]
    },
    {
      "id": 1831,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY rating",
      "infer_predictions": [
        [
          "select title from movies order by rating asc",
          "select title from movies order by rating asc , title"
        ]
      ]
    },
    {
      "id": 1832,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY rating",
      "infer_predictions": [
        [
          "select title from movies order by rating asc"
        ]
      ]
    },
    {
      "id": 1833,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movietheaters.name order by count ( * ) desc limit 1",
          "select name from movietheaters group by name order by count ( * ) desc limit 1",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movietheaters.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1834,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from movietheaters group by name order by count ( * ) desc limit 1",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movietheaters.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1835,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movietheaters.movie order by count ( * ) desc limit 1",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( code ) as cnt from movietheaters group by movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from movietheaters group by movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from movietheaters group by movietheaters.movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( code ) as cnt from movietheaters group by movietheaters.movie ) ) )",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1836,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movietheaters.movie order by count ( * ) desc limit 1",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( code ) as cnt from movietheaters group by movietheaters.movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( code ) as cnt from movietheaters group by movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from movietheaters group by movietheaters.movie ) ) )",
          "select title from movies where code in ( select movie from movietheaters group by movie having count ( code ) = ( select max ( cnt ) from ( select count ( * ) as cnt from movietheaters group by movie ) ) )",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1837,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
      "infer_predictions": [
        [
          "select rating , count ( * ) from movies group by rating",
          "select count ( * ) , rating from movies group by rating",
          "select sub.rating , count ( * ) from movies sub group by sub.rating"
        ]
      ]
    },
    {
      "id": 1838,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
      "infer_predictions": [
        [
          "select rating , count ( * ) from movies group by rating"
        ]
      ]
    },
    {
      "id": 1839,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null' or rating != ''"
        ]
      ]
    },
    {
      "id": 1840,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null' or rating != ''",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating > 'null'"
        ]
      ]
    },
    {
      "id": 1841,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select name from movietheaters where movie = ( select code from movies )"
        ]
      ]
    },
    {
      "id": 1842,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select name from movietheaters group by name having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 1843,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
      "infer_predictions": [
        [
          "select name from movietheaters where code not in ( select code from movietheaters )",
          "select name from movietheaters where code not in ( select movie from movietheaters )",
          "select name from movietheaters where code not in ( select code from movies )",
          "select name from movietheaters where code not in ( select code from movietheaters )"
        ]
      ]
    },
    {
      "id": 1844,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
      "infer_predictions": [
        [
          "select name from movietheaters where code not in ( select code from movietheaters )",
          "select name from movietheaters where code not in ( select code from movies )",
          "select name from movietheaters where code not in ( select movie from movietheaters )",
          "select name from movietheaters except select name from movietheaters"
        ]
      ]
    },
    {
      "id": 1845,
      "db_id": "movie_2",
      "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'",
          "select name from movietheaters where code in ( select code from movies where rating = 'G' )",
          "select name from movietheaters where movie in ( select code from movies where rating = 'G' )",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select movietheaters.name from movies join movietheaters on movies.Code = movietheaters.movie where movies.rating = 'G'"
        ]
      ]
    },
    {
      "id": 1846,
      "db_id": "movie_2",
      "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'",
          "select name from movietheaters where movie in ( select code from movies where rating = 'G' )",
          "select name from movietheaters where code in ( select code from movies where rating = 'G' )"
        ]
      ]
    },
    {
      "id": 1847,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies",
      "infer_predictions": [
        [
          "select title from movies"
        ]
      ]
    },
    {
      "id": 1848,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies",
      "infer_predictions": [
        [
          "select title from movies",
          "select title from movies where title is not null",
          "select title from movies",
          "select title from movies"
        ]
      ]
    },
    {
      "id": 1849,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT rating FROM movies",
      "infer_predictions": [
        [
          "select distinct rating from movies",
          "select distinct ( rating ) from movies",
          "Select distinct rating from movies"
        ]
      ]
    },
    {
      "id": 1850,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT rating FROM movies",
      "infer_predictions": [
        [
          "select distinct rating from movies"
        ]
      ]
    },
    {
      "id": 1851,
      "db_id": "movie_2",
      "gold": "SELECT * FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select * from movies where rating = 'null'",
          "select * from movies where rating = 'Unrated'",
          "select * from movies where rating = 'Null'",
          "select * from movies where rating = 'unrated'",
          "select * from movies where rating = 'N/A'",
          "select * from movies where rating = 'No'",
          "select * from movies where rating = 'Non-Rated'",
          "select * from movies where rating = 'None'"
        ]
      ]
    },
    {
      "id": 1852,
      "db_id": "movie_2",
      "gold": "SELECT * FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select * from movies where rating = 'null'",
          "select * from movies where rating = 'unrated'",
          "select * from movies where rating = 'Unrated'",
          "select * from movies where rating = 'Null'",
          "select * from movies where rating = 'Non-Rated'",
          "select * from movies where rating = 'N/A'",
          "select * from movies where rating = 'None'",
          "select * from movies where rating = 'No'"
        ]
      ]
    },
    {
      "id": 1853,
      "db_id": "movie_2",
      "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters )",
          "select title from movies where code not in ( select movie from movietheaters )",
          "select title from movies where code not in ( select movie from movietheaters )"
        ]
      ]
    },
    {
      "id": 1854,
      "db_id": "movie_2",
      "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters )",
          "select title from movies where code not in ( select movie from movietheaters )"
        ]
      ]
    },
    {
      "id": 1855,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
      "infer_predictions": [
        [
          "select recipient from package where weight = ( select max ( weight ) from package )",
          "select recipient from package order by weight desc limit 1",
          "select recipient from package where weight = ( select max ( weight ) from package )",
          "select recipient from package where weight = ( select max ( weight ) from package )",
          "select recipient from package where weight = ( select max ( weight ) from package )",
          "select recipient from package where weight = ( select max ( weight ) from package )"
        ]
      ]
    },
    {
      "id": 1856,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.recipient order by package.weight desc limit 1",
          "select client.name from package join client on package.recipient = client.accountnumber order by package.weight desc limit 1",
          "select c.name from client c where exists ( select 1 from package p where p.recipient = c.accountnumber and p.weight = ( select max ( weight ) from package ) )",
          "select name from client where accountnumber in ( select recipient from package where weight = ( select max ( weight ) from package ) )"
        ]
      ]
    },
    {
      "id": 1857,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select sum ( package.weight ) from client join package on client.accountnumber = package.sender where client.name = 'Leo Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'",
          "select sum ( weight ) from client join package on client.accountnumber = package.sender where client.name = 'Leo Wong'",
          "select sum ( package.weight ) from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'",
          "select sum ( package.weight ) from client join package on client.accountnumber = package.sender where client.name = 'Leo' and package.recipient = 'Wong'",
          "select sum ( package.weight ) from client join package on client.accountnumber = package.sender where client.name = 'Leo Wong'",
          "select sum ( package.weight ) from client join package on client.accountnumber = package.sender where client.name = 'Leo' and client.name = 'Wong'"
        ]
      ]
    },
    {
      "id": 1858,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select sum ( weight ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'",
          "select sum ( package.weight ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'",
          "select sum ( weight ) from package join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'",
          "select sum ( weight ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo' and employee.name = 'Wong'",
          "select sum ( weight ) from package join employee on package.sender = employee.employeeid where employee.name = 'Leo' and employee.name = 'Wong'",
          "select sum ( weight ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'",
          "select sum ( weight ) from employee join package on employee.employeeid = package.sender where employee.name = 'Loo Wong'"
        ]
      ]
    },
    {
      "id": 1859,
      "db_id": "planet_1",
      "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
      "infer_predictions": [
        [
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy' and employeeid = ( select employeeid from employee join has_clearance on employee.employeeid = has_clearance.employee )",
          "select position from employee where name = 'Amy' and employeeid = ( select employeeid from has_clearance join employee on has_clearance.employee = employee.employeeid )",
          "select position from employee where name = 'Amy' and employeeid = ( select employeeid from has_clearance join employee on has_clearance.employee = employee.employeeid )"
        ]
      ]
    },
    {
      "id": 1860,
      "db_id": "planet_1",
      "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
      "infer_predictions": [
        [
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy Wong' and employeeid = ( select count ( employeeid ) from employee group by position having count ( employeeid ) = ( select count ( employeeid ) from employee group by position having count ( employeeid ) = ( select count ( employeeid ) from employee group by position ) ) )"
        ]
      ]
    },
    {
      "id": 1861,
      "db_id": "planet_1",
      "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turanga' and position = 'Leela'",
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1862,
      "db_id": "planet_1",
      "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turanga' and name = 'Leela'",
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1863,
      "db_id": "planet_1",
      "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
      "infer_predictions": [
        [
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'Intern'",
          "select avg ( salary ) from employee where position like 'intern'"
        ]
      ]
    },
    {
      "id": 1864,
      "db_id": "planet_1",
      "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
      "infer_predictions": [
        [
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'Intern'",
          "select avg ( salary ) from employee where position = 'intern' and salary is not null",
          "select avg ( salary ) from employee where position = 'INTERN'",
          "select avg ( salary ) from employee where position = 'intern' and position = 'student'",
          "select avg ( salary ) from employee where position = 'intern' and position is not null",
          "select avg ( salary ) from employee where position = 'intern' and position = 'researcher'"
        ]
      ]
    },
    {
      "id": 1865,
      "db_id": "planet_1",
      "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
      "infer_predictions": [
        [
          "select level from has_clearance where level = 'Physician'",
          "select level from has_clearance where level = 'Medicine'",
          "select level from has_clearance where level = 'Ph.D.'",
          "select level from has_clearance where level = 'Pharmacy'",
          "select level from has_clearance where level = 'Pharmacist'",
          "select level from has_clearance where level = 'Patient'",
          "select level from has_clearance where level = 'Medical'"
        ]
      ]
    },
    {
      "id": 1866,
      "db_id": "planet_1",
      "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
      "infer_predictions": [
        [
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'Physician'",
          "select has_clearance.level from employee join has_clearance on employee.employeeid = has_clearance.employee where employee.name = 'Physician'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.position = 'Physician'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.position = 'physician'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'Doctor'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'physician'"
        ]
      ]
    },
    {
      "id": 1867,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package where sender = 'Leo Wong'",
          "select packagenumber from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1868,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select count ( * ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'",
          "select count ( * ) from package join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'",
          "select count ( * ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo' and employee.name = 'Wong'",
          "select count ( * ) from employee join package on employee.employeeid = package.sender where employee.name = 'Wong'",
          "select count ( * ) from employee join package on employee.employeeid = package.sender where employee.name = 'Wong'",
          "select count ( * ) from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1869,
      "db_id": "planet_1",
      "gold": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select packagenumber from package join employee on package.recipient = employee.employeeid where employee.name = 'Leo Wong'",
          "select packagenumber from package join employee on package.recipient = employee.employeeid where employee.name = 'Leo' and employee.name = 'Wong'",
          "select packagenumber from client join package on client.accountnumber = package.recipient where client.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1870,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select count ( * ) from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select packagenumber from package join employee on package.recipient = employee.employeeid where employee.name = 'Leo Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where recipient = 'Leo Wong'",
          "select distinct packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select packagenumber from package join employee on package.recipient = employee.employeeid where employee.name = 'Leo' and employee.name = 'Wong'"
        ]
      ]
    },
    {
      "id": 1871,
      "db_id": "planet_1",
      "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select package.contents from client join package on client.accountnumber = package.sender where client.name = 'Leo Wong'",
          "select package.contents from client join package on client.accountnumber = package.sender join employee on employee.employeeid = package.recipient where employee.name = 'Leo Wong'",
          "select package.contents from client join package on client.accountnumber = package.sender join employee on package.recipient = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.contents from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'",
          "select package.contents from client join package on client.accountnumber = package.sender join employee on employee.employeeid = package.recipient where employee.name = 'Leo' and employee.name = 'Wong'",
          "select package.contents from package join client on package.sender = client.accountnumber join employee on employee.employeeid = package.recipient where employee.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1872,
      "db_id": "planet_1",
      "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select distinct packagenumber from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong' or package.recipient = employee.employeeid",
          "select distinct packagenumber from employee join package on employee.employeeid = package.sender where employee.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1873,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where client.name = 'Ogden Wernstrom' and package.recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where client.name = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.recipient = client.accountnumber where package.sender = 'Ogden Wernstrom' and package.recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where package.recipient = 'Leo Wong' and package.sender = 'Ogden Wernstrom'"
        ]
      ]
    },
    {
      "id": 1874,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select count ( * ) from package join client on package.sender = client.accountnumber where client.name = 'Ogden Wernstrom' and package.recipient = 'Leo Wong'",
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where client.name = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where package.recipient = 'Leo Wong' and package.sender = 'Ogden Wernstrom'",
          "select count ( * ) from package join client on package.sender = client.accountnumber where package.sender = 'Ogden Wernstrom' and package.recipient = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1875,
      "db_id": "planet_1",
      "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
      "infer_predictions": [
        [
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'John Zoidsfarb'"
        ]
      ]
    },
    {
      "id": 1876,
      "db_id": "planet_1",
      "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
      "infer_predictions": [
        [
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'John Zoidsfarb'",
          "select contents from package where sender = 'Johnny Zoidfarb'",
          "select contents from package where sender = 'John Zoniadfarb'"
        ]
      ]
    },
    {
      "id": 1877,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
      "infer_predictions": [
        [
          "select p.packagenumber , p.weight from package p join client c on p.recipient = c.accountnumber where c.name like '%John%'",
          "select p.packagenumber , p.weight from package p join client c on p.sender = c.accountnumber where c.name like '%John%'",
          "select p.weight , p.packagenumber from package p join client c on p.recipient = c.accountnumber where c.name like '%John%'",
          "select p.weight , p.packagenumber from package p join client c on p.sender = c.accountnumber where c.name like '%John%'",
          "select p.packagenumber , p.weight from package p join client c on p.sender = c.accountnumber where c.name like '%John%'"
        ]
      ]
    },
    {
      "id": 1878,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
      "infer_predictions": [
        [
          "select packagenumber , weight from package join client on package.sender = client.accountnumber where client.name = 'John' or client.name = 'Johnny'"
        ]
      ]
    },
    {
      "id": 1879,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight desc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber and weight from package order by weight asc limit 3"
        ]
      ]
    },
    {
      "id": 1880,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight desc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3"
        ]
      ]
    },
    {
      "id": 1881,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.name order by count ( * ) desc limit 1",
          "select client.name , count ( package.shipment ) as total_packages from client join package on client.accountnumber = package.sender group by client.accountnumber order by total_packages desc limit 1",
          "select client.name , count ( package.shipment ) as num_packages from client join package on client.accountnumber = package.sender group by client.accountnumber order by num_packages desc limit 1",
          "select client.name , count ( package.shipment ) from package join client on package.sender = client.accountnumber group by client.accountnumber order by count ( package.shipment ) desc limit 1",
          "select client.name , count ( package.shipment ) from package join client on package.sender = client.accountnumber group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( package.shipment ) from package join client on package.sender = client.accountnumber group by client.name order by count ( package.shipment ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1882,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by package.sender order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by package.sender order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.name order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.recipient = client.accountnumber group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by recipient order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1883,
      "db_id": "planet_1",
      "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
      "infer_predictions": [
        [
          "select client.name , count ( package.shipment ) from package join client on package.recipient = client.accountnumber group by client.accountnumber order by count ( package.shipment ) asc limit 1",
          "select client.name , count ( package.shipment ) as total_packages from client left join package on client.accountnumber = package.recipient group by client.accountnumber order by total_packages asc limit 1",
          "select client.name , count ( package.shipment ) from client join package on client.accountnumber = package.recipient group by client.accountnumber order by count ( package.shipment ) asc limit 1",
          "select client.name , count ( package.shipment ) as num_packages from client left join package on client.accountnumber = package.recipient group by client.accountnumber order by num_packages asc limit 1",
          "select client.name , count ( package.shipment ) from package join client on package.recipient = client.accountnumber group by client.accountnumber order by count ( * ) asc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.recipient group by client.accountnumber order by count ( * ) asc limit 1",
          "select client.name , count ( package.shipment ) from package join client on package.recipient = client.accountnumber group by client.name order by count ( package.shipment ) asc limit 1",
          "select client.name , count ( package.shipment ) as count from client join package on client.accountnumber = package.recipient group by client.accountnumber order by count ( package.shipment ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1884,
      "db_id": "planet_1",
      "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
      "infer_predictions": [
        [
          "select recipient , count ( * ) from package group by recipient order by count ( * ) asc limit 1",
          "select recipient , count ( * ) from package group by recipient order by count ( * ) asc limit 1",
          "select count ( * ) , recipient from package group by recipient order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1885,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.sender group by package.sender having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by package.sender having count ( * ) > 1",
          "select name from ( select client.name , count ( package.recipient ) as num_packages from client join package on client.accountnumber = package.sender group by client.accountnumber having num_packages > 1 )",
          "select name from ( select client.name , count ( package.recipient ) as num_packets from client join package on client.accountnumber = package.sender group by client.accountnumber having num_packets > 1 )",
          "select client.name from client join package on client.accountnumber = package.sender group by client.accountnumber having count ( * ) > 1",
          "select name from ( select client.name , count ( package.sender ) as num_packets from client join package on client.accountnumber = package.sender group by client.accountnumber having num_packets > 1 )"
        ]
      ]
    },
    {
      "id": 1886,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.sender group by client.accountnumber having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by package.sender having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by client.accountnumber having count ( * ) > 1",
          "select c.name from client c join package p on c.accountnumber = p.sender group by c.accountnumber having count ( p.recipient ) > 1",
          "select c.name from client c where exists ( select 1 from package p where p.sender = c.accountnumber group by p.sender having count ( * ) > 1 )",
          "select c.name from client c where ( select count ( * ) from package p where p.sender = c.accountnumber ) > 1",
          "select client.name from client join package on client.accountnumber = package.sender group by package.sender having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1887,
      "db_id": "planet_1",
      "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select coordinates from planet where name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1888,
      "db_id": "planet_1",
      "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select coordinates from planet where name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1889,
      "db_id": "planet_1",
      "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
      "infer_predictions": [
        [
          "select name , coordinates from planet order by name asc"
        ]
      ]
    },
    {
      "id": 1890,
      "db_id": "planet_1",
      "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
      "infer_predictions": [
        [
          "select name , coordinates from planet order by name asc",
          "select name , coordinates from planet order by name asc , coordinates",
          "select name , coordinates from planet order by name asc"
        ]
      ]
    },
    {
      "id": 1891,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J. Fry'",
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J. Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Philip J. Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J. Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J Fry'",
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Philip J. Fry'",
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J. Fry'"
        ]
      ]
    },
    {
      "id": 1892,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
      "infer_predictions": [
        [
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J Fry'",
          "select s.shipmentid from shipment s join employee e on s.manager = e.employeeid where e.name = 'Phillip J Fry'",
          "select shipment.shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J Fry'",
          "select s.shipmentid from shipment s join employee e on s.manager = e.employeeid where e.name = 'Phillip J. Fry'",
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Philip J Fry'",
          "select s.shipmentid from shipment s join employee e on s.manager = e.employeeid where e.name = 'Philip J Fry'",
          "select shipment.shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J Fry'"
        ]
      ]
    },
    {
      "id": 1893,
      "db_id": "planet_1",
      "gold": "SELECT Date FROM Shipment;",
      "infer_predictions": [
        [
          "select date from shipment",
          "select date from shipment"
        ]
      ]
    },
    {
      "id": 1894,
      "db_id": "planet_1",
      "gold": "SELECT Date FROM Shipment;",
      "infer_predictions": [
        [
          "select date from shipment"
        ]
      ]
    },
    {
      "id": 1895,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mas'",
          "select shipment.shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet = 'Mars'"
        ]
      ]
    },
    {
      "id": 1896,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from planet join shipment on planet.planetid = shipment.planet where planet.name = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipment.shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mas'"
        ]
      ]
    },
    {
      "id": 1897,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid join employee on shipment.manager = employee.employeeid where planet.name = 'Mars' and employee.name = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' intersect select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars' and shipment.manager = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1898,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select s.shipmentid from shipment s join employee e on s.manager = e.employeeid join planet p on s.planet = p.planetid where p.name = 'Mars' and e.name = 'Turanga Leela'",
          "select s.shipmentid from shipment s join planet p on s.planet = p.planetid join employee e on s.manager = e.employeeid where p.name = 'Mars' and e.name = 'Turanga Leela'",
          "select s.shipmentid from shipment s join employee e on s.manager = e.employeeid join planet p on s.planet = p.planetid where p.name = 'Mars' and e.name = 'Turanga'"
        ]
      ]
    },
    {
      "id": 1899,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' or manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipment.shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turranga Leela'",
          "select shipmentid from shipment where planet = 'Mars' or ( manager = 'Turanga Leela' )"
        ]
      ]
    },
    {
      "id": 1900,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from employee join shipment on employee.employeeid = shipment.manager where planet = 'Mars' and employee.name = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1901,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
      "infer_predictions": [
        [
          "select planet.name , sum ( shipment.shipmentid ) from shipment join planet on shipment.planet = planet.planetid group by planet.planetid",
          "select planet.name , sum ( shipment.shipmentid ) from shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select planet.name , sum ( shipment.shipmentid ) from planet join shipment on planet.planetid = shipment.planet group by planet.planetid"
        ]
      ]
    },
    {
      "id": 1902,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
      "infer_predictions": [
        [
          "select planet.name , count ( * ) from shipment join planet on shipment.planet = planet.planetid group by planet.planetid",
          "select planet , count ( * ) from shipment group by planet",
          "select planet.name , count ( * ) from planet join shipment on planet.planetid = shipment.planet group by planet.planetid",
          "select count ( * ) , planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select planet.name , count ( * ) from shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select count ( * ) , planet from shipment group by planet",
          "select planet.name , count ( * ) as num_shipments from shipment join planet on shipment.planet = planet.planetid group by planet.planetid",
          "select planet.name , count ( * ) as num_shipments from shipment join planet on shipment.planet = planet.planetid group by planet.planetid"
        ]
      ]
    },
    {
      "id": 1903,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by planet.planetid order by count ( * ) desc limit 1",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by shipment.planet order by count ( * ) desc limit 1",
          "select name from planet where planetid in ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( cnt ) from ( select count ( shipmentid ) as cnt from shipment group by planet ) ) )",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by shipment.planet order by count ( * ) desc limit 1",
          "select name from planet where planetid in ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( counted ) from ( select count ( shipmentid ) as counted from shipment group by planet ) ) )",
          "select name from planet where planetid in ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( total_shipments ) from ( select count ( shipmentid ) as total_shipments from shipment group by planet ) ) )",
          "select name from planet where planetid in ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( total_shipment ) from ( select count ( shipmentid ) as total_shipment from shipment group by planet ) ) )",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.planetid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1904,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from planet join ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( count ) from ( select count ( shipmentid ) as count from shipment group by planet ) ) ) as maxships on planet.planetid = maxships.planet",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by planet.planetid order by count ( * ) desc limit 1",
          "select name from planet where planetid in ( select planet from shipment group by planet having count ( shipmentid ) = ( select max ( counted ) from ( select count ( shipmentid ) as counted from shipment group by planet ) ) )",
          "select planet.name from planet join ( select planet , count ( shipmentid ) as count_shipment from shipment group by planet ) as max_shipment on planet.planetid = max_shipment.planet"
        ]
      ]
    },
    {
      "id": 1905,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
      "infer_predictions": [
        [
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select employee.name , count ( shipmentid ) as num_shipments from employee left join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager",
          "select employee.name , count ( shipmentid ) as num_shipments from employee left join shipment on employee.employeeid = shipment.manager group by shipment.manager"
        ]
      ]
    },
    {
      "id": 1906,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
      "infer_predictions": [
        [
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select manager , count ( * ) from shipment group by manager",
          "select shipment.manager , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager",
          "select count ( * ) , employee.name from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager",
          "select count ( * ) , employee.name from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by manager"
        ]
      ]
    },
    {
      "id": 1907,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment where shipment.planet = 'Mars'",
          "select sum ( weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mas'"
        ]
      ]
    },
    {
      "id": 1908,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment where shipment.planet = 'Mars'"
        ]
      ]
    },
    {
      "id": 1909,
      "db_id": "planet_1",
      "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
      "infer_predictions": [
        [
          "select planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.planetid",
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.name",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by shipment.planet",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.planetid",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by planet.planetid",
          "select planet.name , sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.planetid"
        ]
      ]
    },
    {
      "id": 1910,
      "db_id": "planet_1",
      "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
      "infer_predictions": [
        [
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.name",
          "select sum ( package.weight ) , planet.name from package join planet on package.shipment = planet.planetid group by planet.name",
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet group by planet.name",
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by shipment.planet"
        ]
      ]
    },
    {
      "id": 1911,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
      "infer_predictions": [
        [
          "select planet.name from package join planet on package.shipment = planet.planetid group by planet.planetid having sum ( package.weight ) > 30"
        ]
      ]
    },
    {
      "id": 1912,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1913,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' and package.sender = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1914,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where package.sender = 'Zapp Brannigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where package.sender = 'Zapp' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where package.sender = 'Zapp Brannigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where package.sender = 'Zapp' and package.recipient = 'Brannonigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where package.sender = 'Zapp' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where package.sender = 'Zapp' and package.shipment = 'Omicron Persei 8'"
        ]
      ]
    },
    {
      "id": 1915,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select total ( package.packagenumber ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' union select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Zapp Brannigan'",
          "select total ( packagenumber ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1916,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' union select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Omicron Persei 8' union select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Omicron Persei 8' union select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet where planet.name = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1917,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 20"
        ]
      ]
    },
    {
      "id": 1918,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30"
        ]
      ]
    },
    {
      "id": 1919,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select name from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet not in ( select planetid from planet where name = 'Mars' ) )",
          "select name from employee where employeeid not in ( select employee from has_clearance where planet not in ( select planetid from planet where name = 'Mars' ) )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet not in ( select planetid from planet where name = 'Mars' ) )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet = 'Mars' )",
          "select name from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select name from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select name from employee where employeeid not in ( select employee from has_clearance where planet not in ( select planetid from planet where name = 'Mars' ) )"
        ]
      ]
    },
    {
      "id": 1920,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select name from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select employee.name from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select employee.name from employee where employeeid not in ( select employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select employee.name from employee where employeeid not in ( select has_clearance.employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select employee.name from employee where employee.employeeid not in ( select has_clearance.employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select name from employee where employeeid not in ( select employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select employee.name from employee where employee.employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet not in ( select planetid from planet where name = 'Mars' ) )"
        ]
      ]
    },
    {
      "id": 1921,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
      "infer_predictions": [
        [
          "select name from employee where employeeid in ( select employee from has_clearance where planet = 'Omega III' )",
          "select name from employee where employeeid in ( select employee from has_clearance where level = 3 and planet = 'Omega III' )",
          "select name from employee where employeeid in ( select employee from has_clearance where level = 'Omega III' )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet = 'Omega 3' )",
          "select name from employee where employeeid in ( select employee from has_clearance where planet = planet and level = 3 )"
        ]
      ]
    },
    {
      "id": 1922,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
      "infer_predictions": [
        [
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Omega III'",
          "select employee.name from has_clearance join employee on has_clearance.employee = employee.employeeid join planet on has_clearance.planet = planet.planetid where planet.name = 'Omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Alpha III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Omega 3'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on planet.planetid = has_clearance.planet where planet.name = 'Omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Omega III'",
          "select name from employee where employeeid in ( select employee from has_clearance where planet = 'Omega III' )",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Omega-3'"
        ]
      ]
    },
    {
      "id": 1923,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select planet.name from planet join has_clearance on planet.planetid = has_clearance.planet group by has_clearance.planet having count ( * ) = 1",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( distinct employee ) = 1 )",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( employee ) = 1 )",
          "select planet.name from planet join has_clearance on planet.planetid = has_clearance.planet group by has_clearance.planet having count ( distinct has_clearance.employee ) = 1",
          "select planet.name from planet join has_clearance on planet.planetid = has_clearance.planet group by has_clearance.planet having count ( has_clearance.employee ) = 1"
        ]
      ]
    },
    {
      "id": 1924,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( distinct employee ) = 1 )",
          "select name from planet where planetid in ( select planet from has_clearance )",
          "select planet.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( distinct employee ) > 0 )",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( distinct employee ) >= 1 )",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( distinct employee ) = 1 )",
          "select name from planet where planetid in ( select planet from has_clearance group by planet having count ( employee ) = 1 )"
        ]
      ]
    },
    {
      "id": 1925,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
      "infer_predictions": [
        [
          "select name from employee where salary between 5000 and 10000"
        ]
      ]
    },
    {
      "id": 1926,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
      "infer_predictions": [
        [
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 500 and 10000",
          "select name from employee where salary between 50000 and 10000",
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 5000 and 100000"
        ]
      ]
    },
    {
      "id": 1927,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
      "infer_predictions": [
        [
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) and salary > 5000"
        ]
      ]
    },
    {
      "id": 1928,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
      "infer_predictions": [
        [
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) and salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee )or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000"
        ]
      ]
    },
    {
      "id": 1929,
      "db_id": "planet_1",
      "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
      "infer_predictions": [
        [
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select has_clearance.employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select count ( employeeid ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select has_clearance.employee from has_clearance join Planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )"
        ]
      ]
    },
    {
      "id": 1930,
      "db_id": "planet_1",
      "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
      "infer_predictions": [
        [
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select has_clearance.employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select count ( employee.employeeid ) from employee where employee.employeeid not in ( select has_clearance.employee from has_clearance join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )",
          "select count ( employeeid ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select has_clearance.employee from has_clearance join Planet on has_clearance.planet = planet.planetid where planet.name = 'Mars' )"
        ]
      ]
    },
    {
      "id": 1931,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM game",
      "infer_predictions": [
        [
          "select count ( * ) from game"
        ]
      ]
    },
    {
      "id": 1932,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM game",
      "infer_predictions": [
        [
          "select count ( * ) from game"
        ]
      ]
    },
    {
      "id": 1933,
      "db_id": "video_game",
      "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
      "infer_predictions": [
        [
          "select title , developers from game order by units_sold_millions desc",
          "select title , developers from game order by units_sold_millions desc",
          "select title , developers from game order by units_sold_millions desc"
        ]
      ]
    },
    {
      "id": 1934,
      "db_id": "video_game",
      "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
      "infer_predictions": [
        [
          "select title , developers from game order by units_sold_millions desc"
        ]
      ]
    },
    {
      "id": 1935,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'",
          "select avg ( units_sold_millions ) from game where developers not in ( select developers from game where developers = 'Nintendo' )",
          "select avg ( units_sold_millions ) from game where developers Not in ( select developers from game where developers = 'Nintendo' )"
        ]
      ]
    },
    {
      "id": 1936,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'",
          "select avg ( units_sold_millions ) from game where developers not in ( select developers from game where developers = 'Nintendo' )",
          "select avg ( units_sold_millions ) from game where developers Not in ( select developers from game where developers = 'Nintendo' )"
        ]
      ]
    },
    {
      "id": 1937,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Market_district FROM platform",
      "infer_predictions": [
        [
          "select platform_name , market_district from platform",
          "select platform_name , market_district from platform where platform_id = ( select platform_id from platform where market_district = 'North' )",
          "select platform_name , market_district from platform where platform_id = ( select platform_id from platform where market_district = 'City' )",
          "select platform_name , market_district from platform where platform_id = ( select platform_id from platform where market_district = 'South' )",
          "select platform_name , market_district from platform where platform_id = ( select platform_id from platform where market_district = 'NYC' )"
        ]
      ]
    },
    {
      "id": 1938,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Market_district FROM platform",
      "infer_predictions": [
        [
          "select platform_name , market_district from platform",
          "Select platform_name , market_district from platform",
          "select platform_Name , market_district from platform"
        ]
      ]
    },
    {
      "id": 1939,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
      "infer_predictions": [
        [
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform_name , platform_id from platform where download_rank = '1'",
          "select platform.platform_name , platform.platform_id from platform where download_rank = 1",
          "select platform_name , platform_id from platform where download_rank = 0",
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform_Name , platform_id from platform where download_rank = 1"
        ]
      ]
    },
    {
      "id": 1940,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
      "infer_predictions": [
        [
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform.platform_name , platform.platform_id from platform where download_rank = 1",
          "select platform_name , platform_id from platform where download_rank = '1'",
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform_Name , platform_id from platform where download_rank = 1",
          "select platform_name , platform_id from platform where download_rank = 0"
        ]
      ]
    },
    {
      "id": 1941,
      "db_id": "video_game",
      "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
      "infer_predictions": [
        [
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player",
          "select max ( rank_of_the_year ) as max_rank , min ( rank_of_the_year ) as min_rank from player",
          "select max ( rank_of_the_year ) as max_rank from player"
        ]
      ]
    },
    {
      "id": 1942,
      "db_id": "video_game",
      "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
      "infer_predictions": [
        [
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player",
          "select max ( rank_of_the_year ) as max_rank , min ( rank_of_the_year ) as min_rank from player"
        ]
      ]
    },
    {
      "id": 1943,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
      "infer_predictions": [
        [
          "select count ( * ) from player where rank_of_the_year < 3",
          "select count ( distinct p.player_id ) from player p where p.rank_of_the_year < 3",
          "select count ( distinct player.player_id ) from player where rank_of_the_year < 3",
          "select count ( distinct p.player_id ) from player p where p.rank_of_the_year < 3 group by p.player_id",
          "select count ( distinct player_id ) from player where rank_of_the_year < 3",
          "select count ( distinct p.player_id ) from player p where p.rank_of_the_year <= 3"
        ]
      ]
    },
    {
      "id": 1944,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
      "infer_predictions": [
        [
          "select count ( * ) from player where rank_of_the_year <= 3",
          "select count ( distinct p.player_id ) from player p where p.rank_of_the_year <= 3",
          "select count ( * ) from player where rank_of_the_year < 3",
          "select count ( distinct p.player_id ) from player p where p.rank_of_the_year < 3",
          "select count ( * ) from player where rank_of_the_year <= 3"
        ]
      ]
    },
    {
      "id": 1945,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
      "infer_predictions": [
        [
          "select player_name from player order by player_name asc"
        ]
      ]
    },
    {
      "id": 1946,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
      "infer_predictions": [
        [
          "select player_name from player order by player_name asc",
          "select player_name from player order by player_name asc",
          "select player_name from player order by player_name asc"
        ]
      ]
    },
    {
      "id": 1947,
      "db_id": "video_game",
      "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
      "infer_predictions": [
        [
          "select player_name , college from player order by rank_of_the_year desc",
          "select player_name , college from player order by rank_of_the_year desc"
        ]
      ]
    },
    {
      "id": 1948,
      "db_id": "video_game",
      "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
      "infer_predictions": [
        [
          "select player_name , college from player order by rank_of_the_year desc",
          "select player_name , college from player order by rank_of_the_year desc"
        ]
      ]
    },
    {
      "id": 1949,
      "db_id": "video_game",
      "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
      "infer_predictions": [
        [
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1950,
      "db_id": "video_game",
      "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
      "infer_predictions": [
        [
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1951,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on player.player_id = game_player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1952,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select distinct game.developers from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1953,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where position = 'Guard'",
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select avg ( units_sold_millions ) from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on player.player_id = game_player.player_id where player.position = 'Guard'"
        ]
      ]
    },
    {
      "id": 1954,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where player.position = 'Guard'",
          "select avg ( units_sold_millions ) from game join game_player on game.game_id = game_player.game_id join player on game_player.player_id = player.player_id where position = 'Guard'"
        ]
      ]
    },
    {
      "id": 1955,
      "db_id": "video_game",
      "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
      "infer_predictions": [
        [
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id"
        ]
      ]
    },
    {
      "id": 1956,
      "db_id": "video_game",
      "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
      "infer_predictions": [
        [
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select title , platform.platform_name from game join platform on game.platform_id = platform.platform_id"
        ]
      ]
    },
    {
      "id": 1957,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
      "infer_predictions": [
        [
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'USA' ) )",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'America'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'North America'",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'United States' ) )",
          "select game.title from platform join game on platform.platform_id = game.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'America' ) )"
        ]
      ]
    },
    {
      "id": 1958,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
      "infer_predictions": [
        [
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'USA' ) )",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'United States' ) )",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'America' ) )",
          "select title from game where platform_id in ( select platform_id from platform where market_district in ( 'Asia' , 'North America' ) )",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select title from game where platform_id in ( select platform_id from platform where market_district = 'Asia' or market_district = 'USA' )"
        ]
      ]
    },
    {
      "id": 1959,
      "db_id": "video_game",
      "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
      "infer_predictions": [
        [
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by Franchise",
          "select franchise as franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise"
        ]
      ]
    },
    {
      "id": 1960,
      "db_id": "video_game",
      "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
      "infer_predictions": [
        [
          "select franchise , count ( * ) from game group by franchise",
          "select Franchise , count ( * ) from game group by Franchise",
          "select franchise , count ( * ) from game group by Franchise",
          "select count ( * ) , franchise from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise"
        ]
      ]
    },
    {
      "id": 1961,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( total ) from ( select count ( * ) as total from game group by franchise ) )",
          "select franchise from ( select franchise , count ( * ) as num_games from game group by franchise ) where num_games = ( select max ( num_games ) from ( select count ( * ) as num_games from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( total_games ) from ( select count ( * ) as total_games from game group by franchise ) )",
          "select franchise from game group by franchise having count ( franchise ) = ( select max ( cnt ) from ( select count ( * ) as cnt from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( cnt ) from ( select count ( * ) cnt from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( ct ) from ( select count ( * ) as ct from game group by franchise ) )"
        ]
      ]
    },
    {
      "id": 1962,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) = ( select max ( total ) from ( select count ( * ) as total from game group by franchise ) )",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select g.franchise from game g group by g.franchise having count ( g.game_id ) = ( select max ( total ) from ( select count ( * ) as total from game group by franchise ) )",
          "select g.franchise from game g group by g.franchise having count ( g.game_id ) = ( select max ( total ) from ( select count ( game_id ) as total from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( total_games ) from ( select count ( * ) as total_games from game group by franchise ) )",
          "select franchise from ( select franchise , count ( * ) as num_games from game group by franchise ) where num_games = ( select max ( num_games ) from ( select count ( * ) as num_games from game group by franchise ) )",
          "select franchise from game group by franchise having count ( * ) = ( select max ( totalgames ) from ( select count ( * ) as totalgames from game group by franchise ) )"
        ]
      ]
    },
    {
      "id": 1963,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >=2",
          "select franchise from game group by franchise having count ( * ) >= 200"
        ]
      ]
    },
    {
      "id": 1964,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 3",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 4"
        ]
      ]
    },
    {
      "id": 1965,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
      "infer_predictions": [
        [
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )"
        ]
      ]
    },
    {
      "id": 1966,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
      "infer_predictions": [
        [
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "Select player_name from player where player_id not in ( select player_id from game_player )"
        ]
      ]
    },
    {
      "id": 1967,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' intersect select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1968,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select title from game where game_id in ( select game_id from game_player where player_id in ( select player_id from player where college = 'Oklahoma' or college = 'Auburn' ) )",
          "select title from game where game_id in ( select game_id from game_player where player_id in ( select player_id from player where college = 'Oklahoma' or college = 'Auburn' ) )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college = 'Oklahoma City' or p.college = 'Auburn' )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college = 'Oklahoma' or p.college = 'Auburn' )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college in ( 'Oklahoma' , 'Auburn' ) )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college = 'Oklahoma City' or p.college = 'Auburn College' )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college = 'Oklahomahia' or p.college = 'Auburn' )",
          "select title from game where game_id in ( select gp.game_id from game_player gp join player p on gp.player_id = p.player_id where p.college = 'Oklahomaha' or p.college = 'Auburn' )"
        ]
      ]
    },
    {
      "id": 1969,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT Franchise FROM game",
      "infer_predictions": [
        [
          "select distinct franchise from game"
        ]
      ]
    },
    {
      "id": 1970,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT Franchise FROM game",
      "infer_predictions": [
        [
          "select distinct franchise from game",
          "select distinct franchise from ( select franchise from game )",
          "select distinct sub.franchise from game sub",
          "select distinct sub.franchise from game sub Where sub.franchise = 'Major League Baseball'",
          "select distinct sub.franchise from game sub",
          "select distinct sub.franchise from game sub",
          "select distinct sub.franchise from game sub Where sub.franchise = 'Farming Simulator'",
          "select distinct sub.franchise from game sub Where sub.franchise = 'Final Fantasy X'"
        ]
      ]
    },
    {
      "id": 1971,
      "db_id": "video_game",
      "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guard' )",
          "select title from game where game_id not in ( select game_player.game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guard' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guardian' )",
          "select title from game where game_id not in ( select game_player.game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guard' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guard' )",
          "select title from game where game_id not in ( select game_player.game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guardian' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Gard' )"
        ]
      ]
    },
    {
      "id": 1972,
      "db_id": "video_game",
      "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guard' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guardian' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Gard' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guard' )",
          "select title from game where game_id not in ( select game_player.game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guard' )",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Gaurd' )"
        ]
      ]
    },
    {
      "id": 1973,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
      "infer_predictions": [
        [
          "select name from press order by year_profits_billion desc"
        ]
      ]
    },
    {
      "id": 1974,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
      "infer_predictions": [
        [
          "select name from press order by year_profits_billion desc"
        ]
      ]
    },
    {
      "id": 1975,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
      "infer_predictions": [
        [
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1",
          "select name from press group by name having sum ( year_profits_billion ) > 15 union select name from press group by name having sum ( month_profits_billion ) > 1"
        ]
      ]
    },
    {
      "id": 1976,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
      "infer_predictions": [
        [
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1",
          "select p.name from press p where p.year_profits_billion > 15 or p.month_profits_billion > 1",
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1 union select name from press where year_profits_billion > 15",
          "select name from press where ( year_profits_billion > 15 or month_profits_billion > 1 ) and name",
          "select name from press where ( year_profits_billion > 15 or month_profits_billion > 1 ) and name"
        ]
      ]
    },
    {
      "id": 1977,
      "db_id": "book_press",
      "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
      "infer_predictions": [
        [
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press",
          "select max ( year_profits_billion ) , avg ( year_profits_billion ) from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press"
        ]
      ]
    },
    {
      "id": 1978,
      "db_id": "book_press",
      "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
      "infer_predictions": [
        [
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) , name from press group by name",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) , press.name from press group by press.name"
        ]
      ]
    },
    {
      "id": 1979,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press where month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select p.name from press p where p.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select s.name from press s where s.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select x.name from press x where x.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select b.name from press b where b.month_profits_billion = ( select max ( month_profits_billion ) from press )"
        ]
      ]
    },
    {
      "id": 1980,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from press where month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select p.name from press p where p.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select name from press order by month_profits_billion desc limit 1",
          "select s.name from press s where s.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select j.name from press j where j.month_profits_billion = ( select max ( month_profits_billion ) from press )",
          "select b.name from press b where b.month_profits_billion = ( select max ( month_profits_billion ) from press )"
        ]
      ]
    },
    {
      "id": 1981,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press where month_profits_billion = ( select max ( month_profits_billion ) from press ) or month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select p.name from press p where p.month_profits_billion = ( select max ( month_profits_billion ) from press ) or p.month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select x.name from press x where x.month_profits_billion = ( select max ( month_profits_billion ) from press ) or x.month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select z.name from press z where z.month_profits_billion = ( select max ( month_profits_billion ) from press ) or z.month_profits_billion = ( select min ( month_profits_billion ) from press )"
        ]
      ]
    },
    {
      "id": 1982,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select p.name from press p where p.month_profits_billion = ( select max ( month_profits_billion ) from press ) or p.month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select s.name from press s where s.month_profits_billion = ( select max ( month_profits_billion ) from press ) or s.month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select name from press where month_profits_billion = ( select max ( month_profits_billion ) from press ) or month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select x.name from press x where x.month_profits_billion = ( select max ( month_profits_billion ) from press ) or x.month_profits_billion = ( select min ( month_profits_billion ) from press )",
          "select b.name from press b where b.month_profits_billion = ( select max ( month_profits_billion ) from press ) or b.month_profits_billion = ( select min ( month_profits_billion ) from press )"
        ]
      ]
    },
    {
      "id": 1983,
      "db_id": "book_press",
      "gold": "SELECT count(*) FROM author WHERE age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from author where age < 30",
          "select count ( * ) from author where age <= 30",
          "select count ( * ) from author where age < 30"
        ]
      ]
    },
    {
      "id": 1984,
      "db_id": "book_press",
      "gold": "SELECT count(*) FROM author WHERE age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from author where age < 30",
          "select count ( * ) from ( select age from author where age < 30 )",
          "select count ( * ) from author where age < 30 Is not null",
          "select count ( * ) from author where age < 30 Is not null",
          "select count ( * ) from author where age <= 30",
          "select count ( * ) from author where age < 30",
          "select count ( * ) from author where age < 30 Is null",
          "select count ( * ) from author where age < 30 Is null",
          "select count ( * ) from author where age < 30 Is null"
        ]
      ]
    },
    {
      "id": 1985,
      "db_id": "book_press",
      "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
      "infer_predictions": [
        [
          "select avg ( age ) , gender from author group by gender"
        ]
      ]
    },
    {
      "id": 1986,
      "db_id": "book_press",
      "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
      "infer_predictions": [
        [
          "select gender , avg ( age ) from author group by gender",
          "select gender , round ( avg ( age ) , author.gender ) from author group by gender",
          "select ( gender ) , avg ( age ) from author group by gender"
        ]
      ]
    },
    {
      "id": 1987,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
      "infer_predictions": [
        [
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from ( select gender from author where age > 30 group by gender ) group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age >30 group by gender"
        ]
      ]
    },
    {
      "id": 1988,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
      "infer_predictions": [
        [
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from ( select gender from author where age > 30 group by gender )",
          "select gender , count ( * ) from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age >30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender"
        ]
      ]
    },
    {
      "id": 1989,
      "db_id": "book_press",
      "gold": "SELECT title FROM book ORDER BY release_date DESC",
      "infer_predictions": [
        [
          "select title from book order by release_date desc",
          "select title from book order by release_date desc",
          "select title from book order by release_date desc",
          "select title from book order by release_date desc"
        ]
      ]
    },
    {
      "id": 1990,
      "db_id": "book_press",
      "gold": "SELECT title FROM book ORDER BY release_date DESC",
      "infer_predictions": [
        [
          "select title from book order by release_date desc",
          "select title from book order by release_date desc , title"
        ]
      ]
    },
    {
      "id": 1991,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
      "infer_predictions": [
        [
          "select book_series , count ( * ) from book group by book_series",
          "select book_Series , count ( * ) from book group by book_series",
          "select book_series , count ( * ) from book group by book_Series",
          "select book_series , count ( * ) from book group by book_series"
        ]
      ]
    },
    {
      "id": 1992,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
      "infer_predictions": [
        [
          "select count ( * ) , book_series from book group by book_series",
          "select book_series , count ( * ) from book group by book_series",
          "select book_series , count ( * ) from book group by book_series"
        ]
      ]
    },
    {
      "id": 1993,
      "db_id": "book_press",
      "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
      "infer_predictions": [
        [
          "select title , release_date from book order by sale_amount desc limit 5"
        ]
      ]
    },
    {
      "id": 1994,
      "db_id": "book_press",
      "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
      "infer_predictions": [
        [
          "select title , release_date from book order by sale_amount desc limit 5",
          "select title , release_date from book where sale_amount in ( select sale_amount from book order by sale_amount desc limit 5 )",
          "select b.title , b.release_date from book b where b.sale_amount = ( select max ( sale_amount ) from book ) order by b.sale_amount desc limit 5",
          "select b.title , b.release_date from book b where b.sale_amount = ( select max ( sale_amount ) from book )",
          "select title , release_date from book where sale_amount in ( select sale_amount from book order by sale_amount desc limit 5 ) order by sale_amount desc"
        ]
      ]
    },
    {
      "id": 1995,
      "db_id": "book_press",
      "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
      "infer_predictions": [
        [
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 group by book_series having max ( sale_amount ) > 1000 and min ( sale_amount ) < 500",
          "select book_series from book where sale_amount > 1000 union select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount <= 500"
        ]
      ]
    },
    {
      "id": 1996,
      "db_id": "book_press",
      "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
      "infer_predictions": [
        [
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount <= 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500"
        ]
      ]
    },
    {
      "id": 1997,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
      "infer_predictions": [
        [
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'",
          "select name from author where author_id in ( select author_id from book where book_series = 'MM' ) and author_id in ( select author_id from book where book_series = 'LT' )",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select name from author where author_id in ( select author_id from book where book_series = 'MM' intersect select author_id from book where book_series = 'LT' )",
          "select distinct name from author where author_id in ( select author_id from book where book_series = 'MM' ) and author_id in ( select author_id from book where book_series = 'LT' )"
        ]
      ]
    },
    {
      "id": 1998,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
      "infer_predictions": [
        [
          "select name from author where author_id in ( select author_id from book where book_series = 'MM' intersect select author_id from book where book_series = 'LT' )",
          "select distinct name from author where author_id in ( select author_id from book where book_series = 'MM' ) and author_id in ( select author_id from book where book_series = 'LT' )",
          "select distinct name from author where author_id in ( select author_id from book where book_series = 'MM' intersect select author_id from book where book_series = 'LT' )",
          "select name from author where author_id in ( select author_id from book where book_series = 'MM' ) and author_id in ( select author_id from book where book_series = 'LT' )",
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select distinct author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select distinct author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select distinct author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select distinct author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'"
        ]
      ]
    },
    {
      "id": 1999,
      "db_id": "book_press",
      "gold": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
      "infer_predictions": [
        [
          "select name , age from author where author_id not in ( select author_id from book )",
          "select name , age from author where author_id not in ( select author_id from book )",
          "select name , age from author where author_id not in ( select author_id from book )",
          "select name , age from author where author_id not in ( select author_id from book )"
        ]
      ]
    },
    {
      "id": 2000,
      "db_id": "book_press",
      "gold": "select name from author where author_id not in (select author_id from book)",
      "infer_predictions": [
        [
          "select name from author where author_id not in ( select author_id from book )",
          "select name from author left join book on author.author_id = book.author_id where book.author_id not in ( select author_id from book )",
          "select name from author except select author.name from book join author on book.author_id = author.author_id",
          "select name from author except select author.name from author join book on author.author_id = book.author_id",
          "select name from author left join book on author.author_id = book.author_id where book.author_id is null",
          "select name from author left join book on author.author_id = book.author_id where book.author_id not in ( select author_id from author )",
          "select name from author where author_id not in ( select author_id from book )",
          "select name from author where author_id not in ( select author_id from book )"
        ]
      ]
    },
    {
      "id": 2001,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select author.name from book join author on book.author_id = author.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by book.author_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 2002,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select author.name from book join author on book.author_id = author.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.author_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 2003,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
      "infer_predictions": [
        [
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.author_id = author.author_id order by book.sale_amount desc limit 3"
        ]
      ]
    },
    {
      "id": 2004,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
      "infer_predictions": [
        [
          "select book.title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select book.title , author.name , press.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id where book.sale_amount in ( select sale_amount from book order by sale_amount desc limit 3 )",
          "select book.title , author.name , press.name from press join book on press.press_id = book.press_id join author on book.author_id = author.author_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from press join book on press.press_id = book.press_id join author on book.author_id = author.author_id order by book.sale_amount desc limit 3"
        ]
      ]
    },
    {
      "id": 2005,
      "db_id": "book_press",
      "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
      "infer_predictions": [
        [
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by book.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.Press_id"
        ]
      ]
    },
    {
      "id": 2006,
      "db_id": "book_press",
      "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
      "infer_predictions": [
        [
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.Press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by book.press_id"
        ]
      ]
    },
    {
      "id": 2007,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
      "infer_predictions": [
        [
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name",
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( book.sale_amount ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.press_id",
          "select count ( * ) , press.name from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.press_id",
          "select sum ( book.sale_amount ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name"
        ]
      ]
    },
    {
      "id": 2008,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
      "infer_predictions": [
        [
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.press_id",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.press_id",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on book.press_id = press.press_id where book.sale_amount > 1000 group by press.press_id",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.Press_id",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.Press_id"
        ]
      ]
    },
    {
      "id": 2009,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from author where author_id in ( select author_id from book where sale_amount = ( select max ( sale_amount ) from book ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( sales_amount ) from ( select sum ( sale_amount ) as sales_amount from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( total ) from ( select sum ( sale_amount ) as total from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( total_sale ) from ( select sum ( sale_amount ) as total_sale from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( sale_amount ) from ( select sum ( sale_amount ) as sale_amount from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( sale_amount ) from ( select sum ( sale_amount ) as _ from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( sale_amount ) from ( select sum ( sale_amount ) as sales_amount from book group by author_id ) ) )",
          "select name from author where author_id in ( select author_id from book group by author_id having sum ( sale_amount ) = ( select max ( sale_amount ) from ( select sum ( sale_amount ) as total from book group by author_id ) ) )"
        ]
      ]
    },
    {
      "id": 2010,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from author where author_id in ( select author_id from book where sale_amount = ( select max ( sale_amount ) from book ) )",
          "select author.name from author join book on author.author_id = book.author_id where book.sale_amount = ( select max ( sale_amount ) from book )",
          "select author.name from book join author on book.author_id = author.author_id where book.sale_amount = ( select max ( sale_amount ) from book )",
          "select name from author where author_id = ( select author_id from book where sale_amount = ( select max ( sale_amount ) from book ) )",
          "select author.name from author where author.author_id = ( select author_id from book group by author_id order by sum ( sale_amount ) desc limit 1 )",
          "select author.name from author where author.author_id = ( select author_id from book where sale_amount = ( select max ( sale_amount ) from book ) )",
          "select author.name from author where author.author_id in ( select author_id from book group by author_id order by sum ( sale_amount ) desc limit 1 )",
          "select author.name from author where author.author_id = ( select author_id from book order by sale_amount desc limit 1 )"
        ]
      ]
    },
    {
      "id": 2011,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select first.name , first.gender from ( select author.name , author.gender , count ( book.book_id ) as num_books from author join book on author.author_id = book.author_id group by author.author_id ) first where first.num_books = ( select max ( num_books ) from ( select count ( book_id ) as num_books from book group by author_id ) second )",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join ( select author_id from book group by author_id having count ( book_id ) = ( select max ( cnt ) from ( select count ( book_id ) as cnt from book group by author_id ) ) ) top_author on author.author_id = top_author.author_id"
        ]
      ]
    },
    {
      "id": 2012,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select a.name , a.gender from author a , book b where a.author_id = b.author_id group by a.author_id having count ( b.book_id ) = ( select max ( cnt ) from ( select count ( book_id ) as cnt from book group by author_id ) )",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select x.name , x.gender from author x where exists ( select null from book b where b.author_id = x.author_id group by b.author_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from book group by author_id ) ) )",
          "select x.name , x.gender from author x where exists ( select null from book b where b.author_id = x.author_id group by b.author_id having count ( book_id ) = ( select max ( cnt ) from ( select count ( book_id ) as cnt from book group by author_id ) ) )",
          "select a.name , a.gender from author a where exists ( select null from book b where b.author_id = a.author_id group by b.author_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from book group by author_id ) ) )"
        ]
      ]
    },
    {
      "id": 2013,
      "db_id": "book_press",
      "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
      "infer_predictions": [
        [
          "select name from author where author_id not in ( select book.author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author where author_id not in ( select B.author_id from book B join press p on B.press_id = p.press_id where p.name = 'Accor' )",
          "select name from author where author_id not in ( select author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author where author_id not in ( select book.author_id from book join press on book.press_id = press.press_id where press.name = 'ACCOR' )",
          "select author.name from author left join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'Accor' and author.author_id is null",
          "select name from author where author_id not in ( select B.author_id from book B join press p on b.press_id = p.press_id where p.name = 'Accor' )"
        ]
      ]
    },
    {
      "id": 2014,
      "db_id": "book_press",
      "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
      "infer_predictions": [
        [
          "select name from author where author_id not in ( select book.author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author where author_id not in ( select author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author where author_id not in ( select author_id from book join press on book.press_id = press.press_id where name = 'Accor' )",
          "select distinct name from author where author_id not in ( select book.author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select distinct name from author where author_id not in ( select author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author where author_id not in ( select book.author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )"
        ]
      ]
    },
    {
      "id": 2015,
      "db_id": "book_press",
      "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , year_profits_billion from book join press on book.press_id = press.press_id group by book.press_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 2016,
      "db_id": "book_press",
      "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by book.press_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 2017,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Authors",
      "infer_predictions": [
        [
          "select count ( * ) from authors",
          "select count ( * ) , authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select count ( * ) , authors.author_name from authors group by authors.author_name",
          "select count ( * ) from authors"
        ]
      ]
    },
    {
      "id": 2018,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Authors",
      "infer_predictions": [
        [
          "select author_name from authors",
          "select author_name from ( select author_name from authors ) as c where not exists ( select 1 from authors a where a.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select * from authors a where a.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select 1 from authors as a where a.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select * from authors as a where a.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select 1 from authors where authors.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select * from authors where authors.author_name = c.author_name )",
          "select author_name from ( select author_name from authors ) as c where not exists ( select 1 from authors a where a.author_Name = c.author_name )"
        ]
      ]
    },
    {
      "id": 2019,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name ,  other_details FROM Authors",
      "infer_predictions": [
        [
          "select author_name , other_details from authors",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_profile",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_profile",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_info",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_details",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_report",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_report",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_list",
          "select author_name , other_details from ( select author_name , other_details from authors ) as authors",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_result",
          "select author_name , other_details from ( select author_name , other_details from authors ) as author_result"
        ]
      ]
    },
    {
      "id": 2020,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
      "infer_predictions": [
        [
          "select other_details from authors where author_name = 'Addison Denesik'",
          "select other_details from authors where author_name = 'Addison' and author_name = 'Denesik'",
          "select other_details from authors where author_name = 'Addison' and author_name = 'Denesik'",
          "select other_details from authors where author_name = 'Adison Denesik'",
          "select other_details from authors where author_name = 'Addision Denesik'",
          "select other_details from authors where author_name = 'Addison Denesik' or author_name = 'Addison'",
          "select other_details from authors where author_name = 'Addison Denesik'",
          "select other_details from authors where author_name = 'Addison D. Denesik'"
        ]
      ]
    },
    {
      "id": 2021,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Documents",
      "infer_predictions": [
        [
          "select count ( * ) from documents"
        ]
      ]
    },
    {
      "id": 2022,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents WHERE document_id  =  4",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_id = 4",
          "select author_name from documents where document_id = 4",
          "select authors.author_name from documents join authors on documents.author_name = authors.author_name where documents.document_id = 4",
          "select authors.author_name from authors join documents on authors.author_name = documents. author_name where documents.document_id = 4",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_id = 4",
          "select authors.author_Name from authors join documents on authors.author_name = documents.author_name where documents.document_id = 4"
        ]
      ]
    },
    {
      "id": 2023,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to Brazil'",
          "select authors.author_name from documents join authors on documents.author_name = authors.author_name where documents.document_name = 'Travel to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where document_name = 'Travel to Brazil'",
          "select author_name from documents where document_name = 'Travel to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Traveling to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travell to Brazil'"
        ]
      ]
    },
    {
      "id": 2024,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
      "infer_predictions": [
        [
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era' and authors.other_details = 'Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.other_details = 'Era' and authors.author_name = 'Kerluke'",
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Era Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era' and authors.other_details = 'Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era' and documents.document_name = 'Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.other_details = 'Era Kerluke'"
        ]
      ]
    },
    {
      "id": 2025,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_name ,  document_description FROM Documents",
      "infer_predictions": [
        [
          "select document_name , document_description from documents"
        ]
      ]
    },
    {
      "id": 2026,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
      "infer_predictions": [
        [
          "select document_id , document_name from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Bianka Cummings'",
          "select document_id , document_name from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , documents.document_name from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , documents.document_name from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , document_name from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , document_name from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Bianka Cummings'"
        ]
      ]
    },
    {
      "id": 2027,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
      "infer_predictions": [
        [
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , documents.other_details from documents join authors on documents.author_name = authors.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where document_name = 'Travel to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Traveling to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travelling to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travell to China'"
        ]
      ]
    },
    {
      "id": 2028,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
      "infer_predictions": [
        [
          "select authors.author_name , count ( documents.document_id ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( * ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( documents.document_id ) from authors left join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select a.author_name , count ( d.document_id ) from authors a left join documents d on a.author_name = d.author_name group by a.author_name",
          "select ( select author_name from documents where document_id = authors.author_name ) , count ( * ) from authors group by author_name",
          "select authors.author_name , count ( documents.document_id ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( documents.document_id ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( documents.document_id ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( documents.document_id ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name"
        ]
      ]
    },
    {
      "id": 2029,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) = ( select max ( count ) from ( select count ( document_id ) as count from documents group by author_name ) as counts )",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) = ( select max ( counts ) from ( select count ( document_id ) as counts from documents group by author_name ) as counts )",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) = ( select max ( counts ) from ( select count ( document_id ) as counts from documents group by author_name ) )",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) = ( select max ( counts ) from ( select count ( documents.document_id ) as counts from documents group by author_name ) as counts )",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) = ( select max ( count ) from ( select count ( documents.document_id ) as count from documents group by author_name ) as counts )"
        ]
      ]
    },
    {
      "id": 2030,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( distinct documents.document_id ) >= 2",
          "select authors.author_name from documents join authors on documents.author_name = authors.author_name group by authors.author_name having count ( * ) >= 2",
          "select distinct authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on authors.author_name = documents. author_name group by authors.author_name having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2031,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Business_processes",
      "infer_predictions": [
        [
          "select count ( * ) from business_processes"
        ]
      ]
    },
    {
      "id": 2032,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
      "infer_predictions": [
        [
          "select next_process_id , process_name , process_description from business_processes where process_id = 9",
          "select next_process_id , process_name , process_description from business_processes where process_id = 9.",
          "select next_process_id ,process_name ,process_description from business_processes where process_id = 9",
          "select next_process_id  , process_name , process_description from business_processes where process_id = 9",
          "select next_process_id , process_name ,process_description from business_processes where process_id = 9",
          "select next_process_id , process_name , process_description from business_processes where process_id = 10"
        ]
      ]
    },
    {
      "id": 2033,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
      "infer_predictions": [
        [
          "select process_name from business_processes where next_process_id = 9",
          "select process_name from business_processes where next_process_id in ( select next_process_id from business_processes where process_id = 9 )",
          "select process_name from business_processes where next_process_id in ( select process_id from business_processes where process_id = 9 )",
          "select process_name from business_processes where process_id = 9"
        ]
      ]
    },
    {
      "id": 2034,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Process_outcomes",
      "infer_predictions": [
        [
          "select count ( * ) from process_outcomes",
          "select count ( * ) from process_outcomes where process_outcome_code = ( select process_outcome_code from process_outcomes group by process_outcome_code )",
          "select count ( * ) from process_outcomes where process_outcome_code = 'Y'",
          "select count ( * ) from process_outcomes where process_outcome_code = 'Y'",
          "select count ( * ) from process_outcomes where process_outcome_code = not null",
          "select count ( * ) from process_outcomes where process_outcome_code = not null"
        ]
      ]
    },
    {
      "id": 2035,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
      "infer_predictions": [
        [
          "select process_outcome_code , process_outcome_description from process_outcomes"
        ]
      ]
    },
    {
      "id": 2036,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
      "infer_predictions": [
        [
          "select process_outcome_description from process_outcomes where process_outcome_code = 'working'"
        ]
      ]
    },
    {
      "id": 2037,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Process_status",
      "infer_predictions": [
        [
          "select count ( * ) from process_status",
          "select count ( distinct process_status_code ) from process_status"
        ]
      ]
    },
    {
      "id": 2038,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_status_code ,  process_status_description FROM Process_status",
      "infer_predictions": [
        [
          "select process_status_code , process_status_description from process_status"
        ]
      ]
    },
    {
      "id": 2039,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
      "infer_predictions": [
        [
          "select process_status_description from process_status where process_status_code = 'ct'",
          "select process_status_description from process_status where process_status_code = 'ct'",
          "select process_status_description from process_status where process_status_code = 'CT'"
        ]
      ]
    },
    {
      "id": 2040,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2041,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_id ,  staff_details FROM Staff",
      "infer_predictions": [
        [
          "select staff_id , staff_details from staff"
        ]
      ]
    },
    {
      "id": 2042,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
      "infer_predictions": [
        [
          "select staff_details from staff where staff_id = 100",
          "select staff_details from staff where staff_id = 100",
          "select staff_details from staff where staff_id = 100 and staff_details = 'Y'"
        ]
      ]
    },
    {
      "id": 2043,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Ref_staff_roles",
      "infer_predictions": [
        [
          "select count ( * ) from ref_staff_roles",
          "select count ( * ) from ( select staff_role_code , count ( * ) as num_roles from ref_staff_roles group by staff_role_code )",
          "select count ( * ) from ( select staff_role_code , count ( staff_role_description ) as num_roles from ref_staff_roles group by staff_role_code )",
          "select count ( * ) from ( select staff_role_code from ref_staff_roles group by staff_role_code )",
          "select count ( * ) from ( select staff_role_code , count ( staff_role_code ) as num_roles from ref_staff_roles group by staff_role_code )"
        ]
      ]
    },
    {
      "id": 2044,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
      "infer_predictions": [
        [
          "select staff_role_code , staff_role_description from ref_staff_roles"
        ]
      ]
    },
    {
      "id": 2045,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
      "infer_predictions": [
        [
          "select staff_role_description from ref_staff_roles where staff_role_code = 'HR'"
        ]
      ]
    },
    {
      "id": 2046,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(DISTINCT document_id) FROM Documents_processes",
      "infer_predictions": [
        [
          "select count ( distinct document_id ) from documents_processes",
          "select count ( distinct d.document_id ) from documents d join documents_processes dp on d.document_id = dp.document_id",
          "select count ( distinct d.document_id ) from documents d join documents_processes dp on d.document_id = dp.document_id group by d.document_id",
          "select count ( distinct d.document_id ) from documents d inner join documents_processes dp on d.document_id = dp.document_id",
          "select count ( distinct documents.document_id ) from documents join documents_processes on documents.document_id = documents_processes.document_id",
          "select count ( distinct dp.document_id ) from documents_processes dp join documents d on dp.document_id = d.document_id",
          "select count ( distinct d.document_id ) from documents d join documents_processes dp on d.document_id = dp.process_id"
        ]
      ]
    },
    {
      "id": 2047,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT DISTINCT process_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select distinct process_id from documents_processes"
        ]
      ]
    },
    {
      "id": 2048,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select document_id from documents except select document_id from documents_processes",
          "select document_id from documents except select documents_processes.document_id from documents_processes join staff_in_processes on documents_processes.document_id = staff_in_processes.document_id",
          "select document_id from documents except select documents.document_id from documents join documents_processes on documents.document_id = documents_processes.document_id",
          "select document_id from documents except select document_id from documents_processes",
          "select document_id from documents except select document_id from documents_processes",
          "select document_id from documents except select documents_processes.document_id from documents_processes join staff_in_processes on documents_processes.process_id = staff_in_processes.process_id"
        ]
      ]
    },
    {
      "id": 2049,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select process_id from business_processes except select process_id from documents_processes",
          "select process_id from documents_processes except select process_id from staff_in_processes",
          "select process_id from staff_in_processes except select process_id from documents_processes"
        ]
      ]
    },
    {
      "id": 2050,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
      "infer_predictions": [
        [
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from documents_processes join process_outcomes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from documents_processes join process_outcomes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where document_id = 0"
        ]
      ]
    },
    {
      "id": 2051,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
      "infer_predictions": [
        [
          "select business_processes.process_name from documents join business_processes on documents.document_id = business_processes.process_id where documents.document_name = 'Travel to Brazil'",
          "select business_processes.process_name from documents join documents_processes on documents.document_id = documents_processes.document_id join business_processes on documents_processes.process_id = business_processes.process_id where documents.document_name = 'Travel to Brazil'",
          "select business_processes.process_name from business_processes join documents on business_processes.process_id = documents.document_id where documents.document_name = 'Travel to Brazil'"
        ]
      ]
    },
    {
      "id": 2052,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
      "infer_predictions": [
        [
          "select a.process_id , count ( b.document_id ) as num_docs from documents_processes a left join staff_in_processes b on a.process_id = b.process_id left join documents d on a.document_id = d.document_id group by a.process_id",
          "select p.process_id , count ( distinct d.document_id ) as num_docs from documents_processes p left join staff_in_processes s on p.process_id = s.process_id left join documents d on s.document_id = d.document_id group by p.process_id",
          "select p.process_id , count ( distinct d.document_id ) from documents_processes p left join documents d on d.document_id = d.document_id group by p.process_id",
          "select p.process_id , count ( distinct d.document_id ) as num_docs from documents_processes p left join documents d on d.document_id = d.document_id group by p.process_id"
        ]
      ]
    },
    {
      "id": 2053,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
      "infer_predictions": [
        [
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and dp.process_id = 9",
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and sip.process_id = 9",
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and sip.process_id = 9",
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and dp.process_id = 9",
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and dp.process_id = 9",
          "select count ( distinct s.staff_id ) from staff s join staff_in_processes sip on s.staff_id = sip.staff_id join documents_processes dp on sip.process_id = dp.process_id where dp.document_id = 0 and sip.process_id = 9"
        ]
      ]
    },
    {
      "id": 2054,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
      "infer_predictions": [
        [
          "select s.staff_id , count ( distinct sip.document_id ) as num_processes from staff s left join staff_in_processes sip on s.staff_id = sip.staff_id group by s.staff_id",
          "select s.staff_id , count ( distinct si.document_id ) as num_processes from staff s left join staff_in_processes si on s.staff_id = si.staff_id group by s.staff_id",
          "select s.staff_id , count ( distinct si.process_id ) as num_processes from staff s left join staff_in_processes si on s.staff_id = si.staff_id group by s.staff_id",
          "select s.staff_id , count ( distinct sip.process_id ) as num_processes from staff s left join staff_in_processes sip on s.staff_id = sip.staff_id group by s.staff_id"
        ]
      ]
    },
    {
      "id": 2055,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
      "infer_predictions": [
        [
          "select staff_role_code , count ( * ) from staff_in_processes group by staff_role_code",
          "select staff_role_code , count ( documents_processes.document_id ) as num_processes from staff_in_processes left join documents_processes on staff_in_processes.process_id = documents_processes.process_id group by staff_role_code",
          "select staff_role_code , count ( document_id ) as num_processes from staff_in_processes left join staff on staff_in_processes.staff_id = staff.staff_id group by staff_role_code"
        ]
      ]
    },
    {
      "id": 2056,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
      "infer_predictions": [
        [
          "select count ( distinct ref_staff_roles.staff_role_code ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join ref_staff_roles on staff_in_processes.staff_role_code = ref_staff_roles.staff_role_code where staff.staff_id = 3",
          "select count ( distinct ref_staff_roles.staff_role_code ) from ref_staff_roles join staff on ref_staff_roles.staff_role_code = staff.staff_id where staff.staff_id = 3"
        ]
      ]
    },
    {
      "id": 2057,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Agencies",
      "infer_predictions": [
        [
          "select count ( * ) from agencies"
        ]
      ]
    },
    {
      "id": 2058,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Agencies",
      "infer_predictions": [
        [
          "select count ( * ) from agencies"
        ]
      ]
    },
    {
      "id": 2059,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  agency_details FROM Agencies",
      "infer_predictions": [
        [
          "select agency_id , agency_details from agencies"
        ]
      ]
    },
    {
      "id": 2060,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  agency_details FROM Agencies",
      "infer_predictions": [
        [
          "select agency_id , agency_details from agencies"
        ]
      ]
    },
    {
      "id": 2061,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Clients",
      "infer_predictions": [
        [
          "select count ( * ) from clients",
          "select count ( * ) , clients.client_id from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select count ( * ) , clients.client_id from clients join agencies on clients.agency_id = agencies.agency_id group by clients.client_id",
          "select count ( * ) , client_details from clients group by client_details",
          "select count ( * ) , client_id from clients group by client_id",
          "select count ( * ) over ( partition by client_id ) from clients",
          "select count ( * ) , clients.client_id from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id",
          "select count ( * ) , clients.client_id from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id"
        ]
      ]
    },
    {
      "id": 2062,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Clients",
      "infer_predictions": [
        [
          "select count ( * ) from clients"
        ]
      ]
    },
    {
      "id": 2063,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients",
      "infer_predictions": [
        [
          "select client_id , client_details from clients"
        ]
      ]
    },
    {
      "id": 2064,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients",
      "infer_predictions": [
        [
          "select client_id , client_details from clients"
        ]
      ]
    },
    {
      "id": 2065,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
      "infer_predictions": [
        [
          "select a.agency_id , count ( c.client_id ) from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id",
          "select a.agency_id , count ( c.client_id ) as clients_count from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id",
          "select a.agency_id , count ( c.client_id ) as client_count from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id",
          "select a.agency_id , count ( distinct c.client_id ) as clients_count from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id",
          "select a.agency_id , count ( distinct c.client_id ) as client_count from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id",
          "select ag.agency_id , count ( distinct c.client_id ) as clients_count from agencies ag left join clients c on ag.agency_id = c.agency_id group by ag.agency_id",
          "select ag.agency_id , count ( distinct c.client_id ) as client_count from agencies ag left join clients c on ag.agency_id = c.agency_id group by ag.agency_id",
          "select a.agency_id as agency_id , count ( distinct c.client_id ) as clients_count from agencies a left join clients c on a.agency_id = c.agency_id group by a.agency_id"
        ]
      ]
    },
    {
      "id": 2066,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
      "infer_predictions": [
        [
          "select count ( * ) , agencies.agency_id from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id",
          "select agencies.agency_id , count ( * ) from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id",
          "select count ( * ) , agencies.agency_id from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id",
          "select agencies.agency_id , count ( * ) from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id",
          "select agencies.agency_id , count ( clients.client_id ) from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2067,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agency_id , client_details from clients group by agency_id order by count ( * ) desc limit 1",
          "select agency_id , client_details from clients group by agency_id having count ( client_id ) = ( select max ( count ) from ( select count ( client_id ) as count from clients group by agency_id ) )",
          "select agency_id , client_details from clients group by agency_id having count ( client_id ) = ( select max ( cnt ) from ( select count ( client_id ) as cnt from clients group by agency_id ) )",
          "select clients.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id order by count ( * ) desc limit 1",
          "select agency_id , client_details from clients group by agency_id having count ( client_details ) = ( select max ( count ) from ( select count ( client_details ) as count from clients group by agency_id ) )",
          "select agency_id , client_details from clients group by agency_id having count ( clients.client_id ) = ( select max ( count ) from ( select count ( clients.client_id ) as count from clients group by agency_id ) )",
          "select agency_id , client_details from clients group by agency_id having count ( client_id ) = ( select max ( client_count ) from ( select count ( client_id ) as client_count from clients group by agency_id ) )",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2068,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select clients.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2069,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select clients.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select agency_id , client_details from clients group by agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select clients.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select clients.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2070,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select clients.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select clients.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select clients.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2071,
      "db_id": "advertising_agencies",
      "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
      "infer_predictions": [
        [
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'MAC'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'MAC'",
          "select agencies.agency_details from Agencies join clients on Agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'mac'"
        ]
      ]
    },
    {
      "id": 2072,
      "db_id": "advertising_agencies",
      "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
      "infer_predictions": [
        [
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'MAC'",
          "select agencies.agency_details from Agencies join clients on Agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients. client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'MAC'"
        ]
      ]
    },
    {
      "id": 2073,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id",
          "select client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id",
          "select client_details , staff_details from clients join staff on clients.agency_id = staff.agency_id",
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id",
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id",
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id group by clients.agency_id",
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id group by clients.agency_id",
          "select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id union all select clients.client_details , staff.staff_details from clients join staff on clients.agency_id = staff.agency_id"
        ]
      ]
    },
    {
      "id": 2074,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id",
          "select clients.client_details as client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details as client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by clients.agency_id",
          "select clients.client_details , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id"
        ]
      ]
    },
    {
      "id": 2075,
      "db_id": "advertising_agencies",
      "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
      "infer_predictions": [
        [
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code"
        ]
      ]
    },
    {
      "id": 2076,
      "db_id": "advertising_agencies",
      "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
      "infer_predictions": [
        [
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_Code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_Code"
        ]
      ]
    },
    {
      "id": 2077,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
      "infer_predictions": [
        [
          "select client_id , client_details from clients where sic_code = 'Bad'",
          "select client_id , client_details from clients where sic_code = 'Bad'"
        ]
      ]
    },
    {
      "id": 2078,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
      "infer_predictions": [
        [
          "select client_id , client_details from clients where sic_code = 'Bad'"
        ]
      ]
    },
    {
      "id": 2079,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select clients.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select distinct agency_id , agency_details from agencies"
        ]
      ]
    },
    {
      "id": 2080,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Y'",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select clients.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'Y'",
          "select agency_id , agency_details from agencies where agency_id in ( select agency_id from clients )",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details != 'null'",
          "select clients.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2081,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
      "infer_predictions": [
        [
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select clients.agency_id from clients join agencies on clients.agency_id = agencies.agency_id",
          "select agency_id from agencies except select agencies.agency_id from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agency_id from agencies except select client_id from clients",
          "select agency_id from agencies except select clients.agency_id from clients",
          "select agency_id from agencies except select agencies.agency_id from clients join agencies on clients.agency_id = agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2082,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
      "infer_predictions": [
        [
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies where agency_id not in ( select agency_id from clients )",
          "select agency_id from agencies except select agencies.agency_id from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select client_id from clients"
        ]
      ]
    },
    {
      "id": 2083,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Invoices",
      "infer_predictions": [
        [
          "select count ( * ) from invoices",
          "select count ( * ) from invoices where client_id = ( select client_id from invoices where invoice_id = invoices.invoice_id )",
          "select count ( * ) from invoices where client_id = ( select client_id from invoices where invoice_id = invoice_id )",
          "select count ( * ) from invoices"
        ]
      ]
    },
    {
      "id": 2084,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Invoices",
      "infer_predictions": [
        [
          "select count ( * ) from invoices",
          "select count ( * ) from invoices",
          "select count ( * ) from invoices"
        ]
      ]
    },
    {
      "id": 2085,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status , invoice_details from invoices join clients on invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id",
          "select a.invoice_id , a.invoice_status , a.invoice_details from invoices a join clients c on a.client_id = c.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from clients join invoices on clients.client_id = invoices.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from clients join invoices on invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2086,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status , invoice_details from invoices",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as _",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as 'Invoice_ID'",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as '*'",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as 'Invoice_id'",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as invoice_id",
          "select invoice_id , invoice_status , invoice_details from ( select invoice_id , invoice_status , invoice_details from invoices ) as 'invoice_id'"
        ]
      ]
    },
    {
      "id": 2087,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
      "infer_predictions": [
        [
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id",
          "select clients.client_id , count ( invoices.invoice_id ) as invoice_count from clients left join invoices on clients.client_id = invoices.client_id group by clients.client_id",
          "select clients.client_id , count ( invoices.invoice_id ) as invoice_count from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id",
          "select clients.client_id , count ( invoices.invoice_id ) as invoice_count from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id",
          "select client_id , ( select count ( * ) from invoices where client_id = clients.client_id ) as invoice_count from clients",
          "select client_id , ( select count ( * ) from invoices where invoices.client_id = clients.client_id ) as invoice_count from clients",
          "select clients.client_id , count ( * ) from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id"
        ]
      ]
    },
    {
      "id": 2088,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from invoices group by client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id",
          "select invoices.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id",
          "select clients.client_id , count ( * ) from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id",
          "select client_id , ( select count ( * ) from invoices where client_id = invoices.client_id ) as invoice_count from invoices"
        ]
      ]
    },
    {
      "id": 2089,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select client_id , invoice_details from invoices group by client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , invoices.invoice_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select client_id , invoice_details from invoices group by client_id having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by client_id ) )",
          "select clients.client_id , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , invoices.invoice_details from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2090,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select c.client_id , c.client_details from clients c where exists ( select null from invoices i where i.client_id = c.client_id group by i.client_id having count ( i.invoice_id ) = ( select max ( cnt ) from ( select count ( invoice_id ) as cnt from invoices group by client_id ) as counts ) )",
          "select c.client_id , c.client_details from clients c where exists ( select null from invoices i where i.client_id = c.client_id group by i.client_id having count ( i.invoice_id ) = ( select max ( total ) from ( select count ( invoice_id ) as total from invoices group by client_id ) as counts ) )",
          "select c.client_id , c.client_details from clients c where exists ( select null from invoices i where i.client_id = c.client_id group by i.client_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from invoices group by client_id ) as counts ) )",
          "select c.client_id , c.client_details from clients c where exists ( select 1 from invoices i where i.client_id = c.client_id group by i.client_id having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from invoices group by client_id ) as counts ) )",
          "select c.client_id , c.client_details from clients c where c.client_id in ( select i.client_id from invoices i group by i.client_id having count ( i.invoice_id ) = ( select max ( total ) from ( select count ( invoice_id ) as total from invoices group by client_id ) ) )",
          "select c.client_id , c.client_details from clients c where exists ( select null from invoices i where i.client_id = c.client_id group by i.client_id having count ( i.invoice_id ) = ( select max ( cnt ) from ( select count ( invoice_id ) as cnt from invoices group by client_id ) tmp ) )",
          "select c.client_id , c.client_details from clients c where exists ( select null from invoices i where i.client_id = c.client_id group by i.client_id having count ( i.invoice_id ) = ( select max ( cnt ) from ( select count ( invoice_id ) as cnt from invoices group by client_id ) ) )"
        ]
      ]
    },
    {
      "id": 2091,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select client_id from invoices group by client_id having count ( * ) >= 2",
          "select clients.client_id from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2092,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select clients.client_id from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select clients.client_id from clients join invoices on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2093,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
      "infer_predictions": [
        [
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select ( select invoice_status from invoices group by invoice_status ) , count ( * ) from invoices group by invoice_status",
          "select invoice_status as invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status"
        ]
      ]
    },
    {
      "id": 2094,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
      "infer_predictions": [
        [
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) as invoice_count from invoices group by invoice_status",
          "select distinct invoice_status , count ( * ) from invoices group by invoice_status"
        ]
      ]
    },
    {
      "id": 2095,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoice_status from invoices group by invoice_status having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_status ) = ( select max ( count ) from ( select count ( invoice_status ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_id ) = ( select max ( count ) from ( select count ( invoice_id ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_status ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( * ) = ( select max ( cnt ) from ( select count ( * ) as cnt from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_id ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_status ) = ( select max ( counts ) from ( select count ( invoice_status ) as counts from invoices group by invoice_status ) )"
        ]
      ]
    },
    {
      "id": 2096,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status having count ( * ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_id ) = ( select max ( count ) from ( select count ( invoice_id ) as count from invoices group by invoice_status ) )",
          "select i.invoice_status from invoices i group by i.invoice_status having count ( i.invoice_id ) = ( select max ( count ) from ( select count ( * ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_status ) = ( select max ( count ) from ( select count ( invoice_status ) as count from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( invoice_id ) = ( select max ( counts ) from ( select count ( invoice_id ) as counts from invoices group by invoice_status ) )",
          "select invoice_status from invoices group by invoice_status having count ( * ) = ( select max ( counts ) from ( select count ( * ) as counts from invoices group by invoice_status ) )",
          "select i.invoice_status from invoices i group by i.invoice_status having count ( i.invoice_id ) = ( select max ( count ) from ( select count ( invoice_id ) as count from invoices group by invoice_status ) )"
        ]
      ]
    },
    {
      "id": 2097,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
      "infer_predictions": [
        [
          "select invoices.invoice_status , invoices.invoice_details , clients.client_id , agencies.agency_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id join agencies on clients.agency_id = agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2098,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 2099,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  other_details FROM meetings",
      "infer_predictions": [
        [
          "select meeting_type , other_details from meetings",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as meeting_type",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as _"
        ]
      ]
    },
    {
      "id": 2100,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  other_details FROM meetings",
      "infer_predictions": [
        [
          "select meeting_type , other_details from meetings",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as unique_meetings",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as unique_types",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as meeting_type",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as meeting_types",
          "select meeting_type , other_details from ( select meeting_type , other_details from meetings ) as _"
        ]
      ]
    },
    {
      "id": 2101,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
      "infer_predictions": [
        [
          "select meeting_outcome , purpose_of_meeting from meetings"
        ]
      ]
    },
    {
      "id": 2102,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
      "infer_predictions": [
        [
          "select meeting_outcome , purpose_of_meeting from meetings"
        ]
      ]
    },
    {
      "id": 2103,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
      "infer_predictions": [
        [
          "select payments.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.invoice_id , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2104,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
      "infer_predictions": [
        [
          "select payments.payment_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.invoice_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payment_id , payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2105,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status from invoices where invoice_id not in ( select invoice_id from payments )",
          "select invoice_id , invoice_status from invoices except select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select invoice_id , invoice_status from invoices except select invoices.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2106,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status from invoices where invoice_id not in ( select invoice_id from payments )",
          "select invoice_id , invoice_status from invoices except select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select invoice_id , invoice_status from invoices where invoice_status not in ( select invoice_id from payments )",
          "select invoice_id , invoice_status from invoices where invoice_id not in ( select invoice_id from payments )"
        ]
      ]
    },
    {
      "id": 2107,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Payments",
      "infer_predictions": [
        [
          "select count ( * ) from payments",
          "select count ( * ) from payments"
        ]
      ]
    },
    {
      "id": 2108,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Payments",
      "infer_predictions": [
        [
          "select count ( * ) from payments"
        ]
      ]
    },
    {
      "id": 2109,
      "db_id": "advertising_agencies",
      "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
      "infer_predictions": [
        [
          "select payments.payment_id , payments.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , payments.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , invoices.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , invoices.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , payments.invoice_id , payments.payment_details from payments join invoices on invoices.invoice_id = payments.invoice_id",
          "select payments.payment_id , payments.invoice_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select payments.payment_id , payments.invoice_id , payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , invoices.invoice_id , payments.payment_details from payments join invoices on invoices.invoice_id = payments.invoice_id"
        ]
      ]
    },
    {
      "id": 2110,
      "db_id": "advertising_agencies",
      "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
      "infer_predictions": [
        [
          "select payment_id , invoice_id , payment_details from payments",
          "select payment_id , invoice_id , payment_details as payment_id , invoice_id as invoice_id , payment_details as payment_details from payments",
          "select payment_id , invoice_id , payment_details as payment_id , invoice_id as payment_id , payment_details as payment_details from payments",
          "select payment_id , invoice_id , payment_details as payment_id , invoice_id from payments",
          "select payment_id , invoice_id , payment_details as payment_id , invoice_id as invoice_id , payment_details from payments"
        ]
      ]
    },
    {
      "id": 2111,
      "db_id": "advertising_agencies",
      "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select distinct payments.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct invoice_id , invoice_status from invoices"
        ]
      ]
    },
    {
      "id": 2112,
      "db_id": "advertising_agencies",
      "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select distinct payments.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from payments join invoices on invoices.invoice_id = payments.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from payments join invoices on invoices.invoice_id = payments.invoice_id"
        ]
      ]
    },
    {
      "id": 2113,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
      "infer_predictions": [
        [
          "select a.invoice_id , count ( b.payment_id ) as number_of_payments from invoices a left join payments b on a.invoice_id = b.invoice_id group by a.invoice_id",
          "select invoices.invoice_id , count ( * ) from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select a.invoice_id , count ( b.payment_id ) as num_payments from invoices a left join payments b on a.invoice_id = b.invoice_id group by a.invoice_id",
          "select a.invoice_id , count ( b.payment_id ) as total_payments from invoices a left join payments b on a.invoice_id = b.invoice_id group by a.invoice_id",
          "select a.invoice_id , count ( b.payment_id ) as payment_count from invoices a left join payments b on a.invoice_id = b.invoice_id group by a.invoice_id",
          "select a.invoice_id , count ( b.payment_id ) as amount_paid from invoices a left join payments b on a.invoice_id = b.invoice_id group by a.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( payments.payment_id ) as number_of_payments from invoices left join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2114,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
      "infer_predictions": [
        [
          "select invoices.invoice_id , count ( * ) from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( payments.payment_id ) as number_of_payments from invoices left join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by payments.invoice_id",
          "select invoices.invoice_id , count ( payments.payment_id ) as num_payments from invoices left join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( payments.payment_id ) as total_payments from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select distinct invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2115,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2116,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2117,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2118,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2119,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
      "infer_predictions": [
        [
          "select a.agency_id , count ( s.staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select a.agency_id , count ( s.staff_id ) as staff_count from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select a.agency_id , count ( distinct s.staff_id ) as staff_count from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select ag.agency_id , count ( distinct s.staff_id ) as staff_count from agencies ag left join staff s on ag.agency_id = s.agency_id group by ag.agency_id",
          "select ag.agency_id , count ( s.staff_id ) from agencies ag left join staff s on ag.agency_id = s.agency_id group by ag.agency_id",
          "select ag.agency_id , count ( s.staff_id ) as staff_count from agencies ag left join staff s on ag.agency_id = s.agency_id group by ag.agency_id",
          "select a.agency_id , count ( s. staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id"
        ]
      ]
    },
    {
      "id": 2120,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
      "infer_predictions": [
        [
          "select a.agency_id , count ( s.staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select a.agency_id , count ( distinct s.staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select distinct a.agency_id , count ( s.staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id",
          "select ag.agency_id , count ( s.staff_id ) from agencies ag left join staff s on ag.agency_id = s.agency_id group by ag.agency_id",
          "select a.agency_id , count ( s.staff_id ) from agencies a left join staff s on a.agency_id = s.agency_id group by a.agency_id"
        ]
      ]
    },
    {
      "id": 2121,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select a.agency_id , a.agency_details from agencies a , staff s where a.agency_id = s.agency_id group by a.agency_id having count ( s.staff_id ) = ( select max ( count ) from ( select count ( staff_id ) as count from staff group by agency_id ) )",
          "select a.agency_id , a.agency_details from agencies a inner join ( select agency_id , count ( staff_id ) as staff_count from staff group by agency_id ) s on a.agency_id = s.agency_id order by s.staff_count desc limit 1",
          "select a.agency_id , a.agency_details from agencies a inner join ( select agency_id , count ( staff_id ) as num_staff from staff group by agency_id ) s on a.agency_id = s.agency_id where num_staff = ( select max ( num_staff ) from ( select count ( staff_id ) as num_staff from staff group by agency_id ) )",
          "select a.agency_id , a.agency_details from agencies a , staff s where a.agency_id = s.agency_id group by a.agency_id having count ( s.staff_id ) = ( select max ( total ) from ( select count ( staff_id ) as total from staff group by agency_id ) )",
          "select a.agency_id , a.agency_details from agencies a , staff s where a.agency_id = s.agency_id group by a.agency_id having count ( s.staff_id ) = ( select max ( counts ) from ( select count ( staff_id ) as counts from staff group by agency_id ) )",
          "select a.agency_id , a.agency_details from agencies a where a.agency_id in ( select agency_id from staff group by agency_id having count ( staff_id ) = ( select max ( cnt ) from ( select count ( staff_id ) as cnt from staff group by agency_id ) ) )"
        ]
      ]
    },
    {
      "id": 2122,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select s.agency_id , s.staff_details from staff s group by s.agency_id having count ( s.staff_id ) = ( select max ( count ) from ( select count ( staff_id ) as count from staff group by agency_id ) )",
          "select s.agency_id , s.staff_details from staff s join agencies a on s.agency_id = a.agency_id group by s.agency_id having count ( s.staff_id ) = ( select max ( count ) from ( select count ( staff_id ) as count from staff group by agency_id ) )",
          "select s.agency_id , s.staff_details from staff s , agencies a where s.agency_id = a.agency_id group by s.agency_id having count ( s.staff_id ) = ( select max ( count ) from ( select count ( staff_id ) as count from staff group by agency_id ) )",
          "select s.agency_id , s.staff_details from staff s join agencies a on s.agency_id = a.agency_id group by s.agency_id having count ( s.staff_id ) = ( select max ( counts ) from ( select count ( staff_id ) as counts from staff group by agency_id ) )",
          "select s.agency_id , s.staff_details from staff s group by s.agency_id having count ( s.staff_id ) = ( select max ( counts ) from ( select count ( staff_id ) as counts from staff group by agency_id ) )",
          "select s.agency_id , s.staff_details from staff s group by s.agency_id having count ( s.staff_id ) = ( select max ( total ) from ( select count ( staff_id ) as total from staff group by agency_id ) )"
        ]
      ]
    },
    {
      "id": 2123,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
      "infer_predictions": [
        [
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome as meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome"
        ]
      ]
    },
    {
      "id": 2124,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
      "infer_predictions": [
        [
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "Select meeting_outcome , count ( * ) from meetings group by meeting_outcome"
        ]
      ]
    },
    {
      "id": 2125,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
      "infer_predictions": [
        [
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id",
          "select clients.client_id , count ( meetings.meeting_id ) as meeting_count from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select clients.client_id , count ( meetings.meeting_id ) as meeting_count from clients left join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select clients.client_id , count ( * ) from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select clients.client_id , count ( meetings.meeting_id ) as number_of_meetings from clients left join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select clients.client_id , count ( meetings.meeting_id ) as num_meetings from clients left join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select clients.client_id , ( select count ( * ) from meetings where client_id = clients.client_id ) as meeting_count from clients",
          "select clients.client_id , count ( meetings.meeting_id ) from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id"
        ]
      ]
    },
    {
      "id": 2126,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from meetings group by client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select meetings.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select clients.client_id , count ( * ) from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select count ( * ) , client_id from meetings group by client_id"
        ]
      ]
    },
    {
      "id": 2127,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
      "infer_predictions": [
        [
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select meetings.meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select meeting_type , count ( * ) from meetings group by client_id",
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meeting_type",
          "select meetings.meeting_type , clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id",
          "select meetings.meeting_type , count ( * ) from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select meetings.meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id"
        ]
      ]
    },
    {
      "id": 2128,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
      "infer_predictions": [
        [
          "select meeting_type , count ( * ) from meetings group by meeting_type"
        ]
      ]
    },
    {
      "id": 2129,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from clients join meetings on clients.client_id = meetings.client_id",
          "select meeting_id , meeting_outcome , meeting_type and clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients. client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2130,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2131,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
      "infer_predictions": [
        [
          "select m.meeting_id , count ( distinct s.staff_id ) as staff_count from meetings m left join staff_in_meetings s on m.meeting_id = s.meeting_id group by m.meeting_id",
          "select meetings.meeting_id , count ( distinct s.staff_id ) as staff_count from meetings join staff_in_meetings s on meetings.meeting_id = s.meeting_id group by meetings.meeting_id",
          "select m.meeting_id , count ( distinct s.staff_id ) from meetings m left join staff_in_meetings s on m.meeting_id = s.meeting_id group by m.meeting_id"
        ]
      ]
    },
    {
      "id": 2132,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
      "infer_predictions": [
        [
          "select meetings.meeting_id , count ( staff_id ) from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id group by meetings.meeting_id",
          "select count ( * ) , meeting_id from staff_in_meetings group by meeting_id",
          "select meetings.meeting_id , count ( staff_in_meetings.staff_id ) from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id group by meetings.meeting_id",
          "select meetings.meeting_id , count ( * ) from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id group by meetings.meeting_id",
          "select meetings.meeting_id , count ( distinct staff_id ) from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id group by meetings.meeting_id",
          "select meetings.meeting_id , count ( distinct staff_id ) from staff_in_meetings join meetings on staff_in_meetings.meeting_id = meetings.meeting_id group by meetings.meeting_id"
        ]
      ]
    },
    {
      "id": 2133,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        [
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id join meetings on staff_in_meetings.meeting_id = meetings.meeting_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id having count ( * ) = ( select min ( cnt ) from ( select count ( * ) as cnt from staff_in_meetings group by staff_id ) )",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id having count ( * ) = ( select min ( meeting_count ) from ( select count ( meeting_id ) as meeting_count from staff_in_meetings group by staff_id ) )",
          "select staff.staff_id , count ( * ) from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id join staff on staff_in_meetings.staff_id = staff.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id having count ( meeting_id ) = ( select min ( meeting_count ) from ( select count ( meeting_id ) as meeting_count from staff_in_meetings group by staff_id ) )"
        ]
      ]
    },
    {
      "id": 2134,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        [
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "with meetingcounts as ( select staff_id , count ( meeting_id ) as num_meetings from staff_in_meetings group by staff_id ) select staff_id from meetingcounts where num_meetings < 1",
          "select staff_id from ( select staff_id , count ( meeting_id ) as num_meetings from staff_in_meetings group by staff_id ) where num_meetings = ( select min ( num_meetings ) from ( select count ( meeting_id ) as num_meetings from staff_in_meetings group by staff_id ) )",
          "select staff_id from staff_in_meetings group by staff_id having count ( meeting_id ) = ( select min ( cnt ) from ( select count ( meeting_id ) as cnt from staff_in_meetings group by staff_id ) )",
          "with meetingcounts as ( select staff_id , count ( meeting_id ) as num_meetings from staff_in_meetings group by staff_id ) select staff_id from meetingcounts where num_meetings < 1",
          "select staff.staff_id from meetings join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id join staff on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff , staff_in_meetings group by staff.staff_id having count ( staff_in_meetings.meeting_id ) = ( select min ( cnt ) from ( select count ( meeting_id ) as cnt from staff_in_meetings group by staff_id ) )"
        ]
      ]
    },
    {
      "id": 2135,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
      "infer_predictions": [
        [
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct s.staff_id ) from staff_in_meetings s join meetings m on s.meeting_id = m.meeting_id",
          "select count ( distinct s.staff_id ) from staff_in_meetings s join meetings m on s.meeting_id = m.meeting_id",
          "select count ( distinct s.staff_id ) from staff_in_meetings s join meetings m on s.meeting_id = m.meeting_id",
          "select count ( distinct s.staff_id ) from staff_in_meetings s join meetings m on s.meeting_id = m.meeting_id"
        ]
      ]
    },
    {
      "id": 2136,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
      "infer_predictions": [
        [
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from ( select distinct staff_id from staff_in_meetings )",
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings"
        ]
      ]
    },
    {
      "id": 2137,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
      "infer_predictions": [
        [
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select distinct staff_id from staff_in_meetings )"
        ]
      ]
    },
    {
      "id": 2138,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
      "infer_predictions": [
        [
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_Id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )"
        ]
      ]
    },
    {
      "id": 2139,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_details , clients.client_id from clients join invoices on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id join invoices on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2140,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2141,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%' group by staff.staff_id having count ( * ) >= 1",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%' group by staff_in_meetings.staff_id having count ( * ) >= 1",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where s.staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff , staff_in_meetings where staff.staff_id = staff_in_meetings.staff_id and staff.staff_details like '%s%' group by staff.staff_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 2142,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%'",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where s.staff_details like '%s%'",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where sim.meeting_id in ( select meeting_id from staff_in_meetings where staff_id like '%s%' )",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where sim.meeting_id in ( select meeting_id from staff_in_meetings where staff_details like '%s%' )",
          "select s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where s.staff_details like '%s%'",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings si on s.staff_id = si.staff_id where s.staff_details like '%s%'",
          "select distinct s.staff_id , s.staff_details from staff s join staff_in_meetings sim on s.staff_id = sim.staff_id where sim.meeting_id in ( select staff_id from staff_in_meetings where staff_id like '%s%' )"
        ]
      ]
    },
    {
      "id": 2143,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.invoice_id = meetings.meeting_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.invoice_id = invoices.client_id group by clients.client_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 2144,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select meetings.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1",
          "select meetings.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 2145,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 2146,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
      "infer_predictions": [
        [
          "select meetings.start_date_time , meetings.end_date_time , clients.client_details , staff.staff_details from meetings join clients on meetings.client_id = clients.client_id join staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id join staff on staff_in_meetings.staff_id = staff.staff_id"
        ]
      ]
    }
  ]