SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda';
SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` ASC LIMIT 3;
SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';
SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);
SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.soctype = 'K-12 Schools (Public)';
SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400 AND schools.virtual = 'F';
SELECT * FROM schools WHERE schools.numtsttakr > 500 AND schools.magnet = 1;
SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr >= 1500 ORDER BY numtsttakr DESC LIMIT 1);
SELECT numtsttakr FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm);
SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';
SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores);
SELECT schools.cdscode FROM schools WHERE schools.`enrollment (k-12)` + schools.`enrollment (ages 5-17)` > 500;
SELECT max(frpm.`free meal count (ages 5-17)`) FROM frpm WHERE frpm.`enrollment (ages 5-17)` / frpm.`free meal count (ages 5-17)` > 0.3;
SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY (satscores.numge1500 / satscores.numtsttakr) DESC LIMIT 3;
SELECT ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;
SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' GROUP BY satscores.dname ORDER BY avg(satscores.avgscrread) DESC LIMIT 1;
SELECT count(DISTINCT schools.cdscode) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;
SELECT frpm.`charter school number`, satscores.avgscrwrite FROM frpm JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite > 499;
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;
SELECT schools.phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);
SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';
SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND schools.gsoffered = 'K-12' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;
SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT sname, street FROM schools WHERE enroll12 - enroll512 > 30;
SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;
SELECT DISTINCT fundingtype FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE cname = 'Riverside' AND avgscrmath > 400;
SELECT schools.school, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Monterey' AND satscores.enroll12 > 800 AND satscores.rtype = 'D';
SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';
SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT AVG((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');
SELECT schools.opendate FROM schools WHERE schools.edopscode = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;
SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 ASC LIMIT 5;
SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D');
SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY `free meal count (k-12)` DESC LIMIT 5;
SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;
SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey';
SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`enrollment (k-12)` = (SELECT min(frpm.`enrollment (k-12)`) FROM frpm WHERE frpm.`charter school (y/n)` = 1);
SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 >= 1500 GROUP BY schools.school ORDER BY COUNT(*) DESC LIMIT 3;
SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cds = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);
SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000 AND schools.county = 'Los Angeles';
SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE avgscrread = (SELECT min(avgscrread) FROM satscores WHERE dname = 'Fresno Unified');
SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;
SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);
SELECT avg(satscores.avgscrmath) , schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;
SELECT schools.city, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;
SELECT sname, avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE admfname1 = 'Ricci';
SELECT * FROM schools WHERE doc = '31' AND soctype = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC;
SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '52' AND frpm.`county code` = '01';
SELECT cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';
SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;
SELECT sname, street FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE rtype = 'D' ORDER BY avgscrmath DESC LIMIT 7);
SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores WHERE rtype = 'D' );
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500;
SELECT count(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';
SELECT schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.admfname1 = 'Avetik';
SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';
SELECT count(DISTINCT schools.cdscode) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.city = 'San Joaquin';
SELECT schools.phone, schools.ext FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 333;
SELECT schools.school, schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';
SELECT schools.website FROM schools WHERE schools.admfname1 = 'Mike' AND schools.admfname2 = 'Dante';
SELECT schools.website FROM schools WHERE schools.charter = 1 AND schools.virtual = 'P' AND schools.county = 'San Joaquin';
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND schools.doc = '52';
SELECT sum(frpm.`free meal count (k-12)`) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18;
SELECT schools.admfname1, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school number` = '00D2';
SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';
SELECT (count(DISTINCT schools.cdscode) * 100.0 / (SELECT count(DISTINCT schools.cdscode) FROM schools WHERE schools.county = 'Santa Clara')) AS percentage FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Locally funded';
SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus';
SELECT sum(satscores.enroll12) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'San Francisco' AND schools.closeddate LIKE '1989%';
SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;
SELECT schools.ncesdist FROM schools WHERE schools.soc = 31 AND schools.soctype = 'State Special Schools';
SELECT count(*) FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alpine' AND schools.closeddate IS NULL;
SELECT frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;
SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';
SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040';
SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '0613360';
SELECT schools.eilname FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';
SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.eilcode = 'HS' AND frpm.`high grade` = '12' AND frpm.`low grade` = '9' AND satscores.cname = 'Merced';
SELECT schools.school, frpm.`percent (%) eligible frpm (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';
SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY COUNT(gsserved) DESC LIMIT 1;
SELECT schools.county , COUNT(*) AS cnt FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY schools.county ORDER BY cnt DESC LIMIT 1;
SELECT schools.`school type`, schools.latitude FROM schools WHERE schools.latitude = (SELECT max(schools.latitude) FROM schools);
SELECT schools.city , schools.latitude , schools.school FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;
SELECT schools.gsoffered FROM schools WHERE schools.longitude = (SELECT max(abs(longitude)) FROM schools);
SELECT schools.city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Multiple Provision Types' AND frpm.`school type` = 'K-8 Schools (Public)' GROUP BY schools.city;
SELECT admfname1, district FROM schools GROUP BY admfname1, district ORDER BY count(*) DESC LIMIT 2;
SELECT frpm.`district code`, frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';
SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40';
SELECT email FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND schools.county = 'San Bernardino' AND schools.city = 'San Bernardino' AND schools.soc = '62' AND schools.doc = '54' AND satscores.enroll12 BETWEEN 398 AND 62;
SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT MAX(numtsttakr) FROM satscores) AND satscores.rtype = 'S';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.a3 = 'east Bohemia';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';
SELECT a12, a13 FROM district WHERE a13 > a12;
SELECT count(DISTINCT district.district_id) FROM district WHERE district.a11 > 6000 AND district.a11 < 10000 AND district.gender = 'F';
SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND district.a11 > 8000;
SELECT account.account_id FROM account JOIN client ON account.district_id = client.district_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MAX(a11) FROM district) AND client.birth_date > (SELECT MIN(birth_date) FROM client);
SELECT account.account_id FROM account account JOIN client client ON account.district_id = client.district_id WHERE client.a11 = (SELECT max(a11) FROM client) AND client.birth_date = (SELECT max(birth_date) FROM client WHERE a11 = (SELECT max(a11) FROM client));
SELECT count(DISTINCT client_id) FROM disp WHERE type = 'OWNER' AND frequency = 'POPLATEK TYDNE';
SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;
SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 12) AND date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY amount DESC LIMIT 1;
SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Sokolov';
SELECT * FROM account WHERE date = '1995-01-01' ORDER BY date ASC;
SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);
SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1994-03-03';
SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 840;
SELECT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';
SELECT MAX(trans.amount) FROM trans INNER JOIN card ON trans.card_id = card.card_id WHERE card.issued = '1996-10-21';
SELECT gender FROM client WHERE birth_date = (SELECT max(birth_date) FROM client) AND district_id = (SELECT district_id FROM district WHERE a11 = (SELECT max(a11) FROM district));
SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.amount = (SELECT max(loan.amount) FROM loan) ORDER BY trans.date LIMIT 1;
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';
SELECT disp.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.disp_id = trans.disp_id WHERE trans.amount = 5100 AND card.issued = '1998-09-02';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996%';
SELECT district.a2 FROM client client INNER JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';
SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';
SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague' LIMIT 1;
SELECT district.a3, ROUND(DIVIDE(COUNT(client.gender = 'M'), COUNT(client.gender)) * 100, 2) AS "Percentage of the male clients" FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' GROUP BY district.a3;
SELECT (loan.amount - trans.balance) / trans.balance * 100 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.date = '1993-07-05' AND loan.status = 'A' AND trans.date BETWEEN '1993-03-22' AND '1998-12-27';
SELECT cast(sum(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / sum(loan.amount) FROM loan;
SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C';
SELECT account.account_id, district.a2, district.a3 FROM account JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';
SELECT account.account_id, account.frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account.account_id, account.date FROM account INNER JOIN district ON district.district_id = account.district_id WHERE district.a2 = 'Prachatice';
SELECT district.a2, district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.loan_id = 4990;
SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.district_id = district.district_id WHERE loan.duration = 60;
SELECT district.a2, district.a3, ((district.a12 - district.a13) / district.a13) * 100 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status LIKE 'D';
SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';
SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';
SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY COUNT(*) DESC LIMIT 9;
SELECT district.a2, sum(disp.type = 'VYDAJ') FROM district JOIN disp ON district.district_id = disp.district_id JOIN account ON disp.account_id = account.account_id WHERE account.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY sum(disp.type = 'VYDAJ') DESC LIMIT 10;
SELECT count(DISTINCT client.client_id) FROM client client INNER JOIN disp disp ON client.client_id = disp.client_id INNER JOIN account account ON disp.account_id = account.account_id INNER JOIN card card ON disp.disp_id = card.disp_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a3 = 'South Bohemia' AND card.card_id IS NULL;
SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;
SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';
SELECT district.district_id, district.a2, district.a13 FROM district WHERE district.a13 = (SELECT max(a13) FROM district);
SELECT count(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT MAX(a16) FROM district));
SELECT count(account.account_id) FROM account WHERE account.frequency = 'POPLATEK MESICNE' AND account.account_id IN ( SELECT trans.account_id FROM trans WHERE trans.operation = 'VYBER KARTOU' AND trans.balance < 0 );
SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A';
SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' AND account.district_id = 1;
SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a15 = (SELECT max(a15) FROM district);
SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';
SELECT DISTINCT district.district_id FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';
SELECT account.account_id FROM order order INNER JOIN account account ON order.account_id = account.account_id INNER JOIN district district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO';
SELECT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold';
SELECT avg(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU';
SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND trans.amount < (SELECT avg(trans.amount) FROM trans) AND trans.date = '1998-01-01';
SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND disp.type = 'OWNER';
SELECT count(DISTINCT account.account_id) FROM account account JOIN client client ON account.district_id = client.district_id JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a3 = 'south Bohemia';
SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a2 = 'Tabor';
SELECT DISTINCT disp.type, district.a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND district.a11 > 8000 AND district.a11 <= 9000;
SELECT count(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';
SELECT a2 FROM district WHERE district_id IN (SELECT account.district_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ');
SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01');
SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER';
SELECT count(*) FROM client client JOIN district district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha';
SELECT (count(type = 'gold' and issued < '1998-01-01') / count(*)) * 100 FROM card;
SELECT client.client_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.client_id = client.client_id ORDER BY loan.amount DESC LIMIT 1;
SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532;
SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333;
SELECT * FROM trans WHERE trans.operation = 'VYBER' AND trans.client_id = 3356;
SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;
SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY count(*) DESC LIMIT 1;
SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 32423;
SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT count(account.account_id) FROM account INNER JOIN district ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik';
SELECT client.client_id FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.issued > '1996-01-01' AND card.type = 'junior';
SELECT (count(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / count(*)) AS percentage FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.a11 > 10000;
SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100.0 AS growth_rate FROM loan loan JOIN loan loan_1996 ON loan.account_id = loan_1996.account_id JOIN client client ON loan.account_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-12-31';
SELECT count(*) FROM trans INNER JOIN card ON trans.trans_id = card.disp_id WHERE trans.date > '1995-01-01' AND trans.operation = 'VYBER KARTOU';
SELECT district.a16 - district.a15 AS difference FROM district WHERE district.a3 = 'north Bohemia';
SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT');
SELECT account.frequency, order.amount FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3539;
SELECT substr(birth_date, 1, 4) FROM client WHERE client_id = 130;
SELECT count(account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';
SELECT loan.amount , loan.payments FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id WHERE client.client_id = 992;
SELECT SUM(trans.amount) FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851;
SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;
SELECT sum(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id INNER JOIN order ON trans.account_id = order.account_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = '617' AND trans.date = '1998';
SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';
SELECT client.client_id FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.amount > 4000 AND trans.k_symbol = 'SIPO';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';
SELECT count(DISTINCT card.card_id) FROM client client JOIN card card ON client.client_id = card.client_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague';
SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT count(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1;
SELECT account.account_id FROM client JOIN account ON client.client_id = account.client_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district);
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date = '1920-01-01' AND district.a3 = 'east Bohemia';
SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;
SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT client.client_id, district.district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id) AND client.client_id NOT IN (SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id);
SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.client_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(*) DESC LIMIT 1;
SELECT count(*) FROM molecule WHERE label = '-' AND molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'cl');
SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND atom.label = '+';
SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '=';
SELECT count(*) FROM bond WHERE bond_type = '#';
SELECT count(*) FROM atom WHERE element != 'br';
SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));
SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1;
SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT DISTINCT connected.atom_id FROM connected INNER JOIN molecule ON connected.molecule_id = molecule.molecule_id WHERE molecule.label = '-';
SELECT element FROM (SELECT element, count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element));
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';
SELECT count(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';
SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181';
SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;
SELECT atom.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';
SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;
SELECT atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_5';
SELECT connected.bond_id FROM connected WHERE connected.atom_id2 = 'TR000_2';
SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.molecule_id ASC LIMIT 5;
SELECT SUM(bond_type = '=') / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';
SELECT ROUND(100 * SUM(label = '+') / COUNT(molecule_id), 3) FROM molecule;
SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percent FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';
SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';
SELECT element, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';
SELECT bond.bond_type, MAX(COUNT(bond_type)) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR010' GROUP BY bond_type;
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY count(molecule.molecule_id) DESC LIMIT 3;
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;
SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'br' AND molecule.label = '+';
SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';
SELECT molecule.molecule_id, iif(atom.label = '+', 'YES', 'NO') AS carcinogenic FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';
SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_19';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';
SELECT count(*) FROM molecule WHERE label = '-';
SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+';
SELECT bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';
SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label HAVING count(bond.bond_id) = (SELECT max(num) FROM (SELECT count(bond.bond_id) AS num FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label) t);
SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom WHERE element = 'i';
SELECT bond.bond_type, bond.bond_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.atom_id = 'TR000_45';
SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id2 FROM connected);
SELECT atom.atom_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR041' AND bond.bond_type = '#';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;
SELECT element FROM (SELECT element, count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element) WHERE cnt = (SELECT min(cnt) FROM (SELECT count(*) AS cnt FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element));
SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb';
SELECT atom.element FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#';
SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) )) FROM connected;
SELECT ROUND(proportion, 5) AS proportion FROM (SELECT SUM(label = '+') * 100 / COUNT(bond_id) AS proportion FROM bond WHERE bond_type = '-');
SELECT count(*) FROM atom WHERE element in('c', 'h');
SELECT atom_id2 FROM atom WHERE element = 's';
SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.element = 'sn';
SELECT count(DISTINCT element) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' );
SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element IN ('p', 'br');
SELECT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT SUM(atom.element = 'cl') / COUNT(atom.atom_id) as percent FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_type = '-';
SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule.molecule_id FROM molecule INNER JOIN connected ON molecule.molecule_id = connected.molecule_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT count(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';
SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_10_11';
SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE atom.element = 'i';
SELECT label FROM molecule WHERE element = 'ca' ORDER BY label DESC LIMIT 1;
SELECT 'YES' FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND atom.element IN ('cl', 'c');
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND atom.label = '-';
SELECT (count(DISTINCT CASE WHEN atom.element = 'cl' THEN molecule.molecule_id ELSE NULL END) * 100.0 / count(DISTINCT molecule.molecule_id)) AS percentage FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';
SELECT molecule.molecule_id FROM bond bond JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ';
SELECT DISTINCT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';
SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_1_2';
SELECT count(DISTINCT molecule.molecule_id) FROM molecule molecule JOIN bond bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT bond.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11';
SELECT bond.bond_id , molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';
SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' AND molecule.label = '+' THEN atom.element END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id;
SELECT SUM(element = 'h') / count(element) AS ratio, label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule_id = 'TR006' GROUP BY label;
SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca' AND label = '+';
SELECT DISTINCT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c';
SELECT DISTINCT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';
SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond;
SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) AS percent FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1';
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';
SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';
SELECT molecule.molecule_id FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT SUM(label = '+' AND element = 'h') * 100.0 / COUNT(molecule_id) FROM molecule;
SELECT label FROM molecule WHERE molecule_id = 'TR124' AND label = '+';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR007_4_19';
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.bond_id = 'TR001_2_4';
SELECT count(bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';
SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND molecule.label = '+';
SELECT bond.bond_id , connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';
SELECT molecule.molecule_id, atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#' GROUP BY molecule.molecule_id, atom.element;
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3';
SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT connected.atom_id, count(DISTINCT bond.bond_type) FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR346' GROUP BY connected.atom_id;
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 's' AND bond_type != ' = ';
SELECT label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4';
SELECT count(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR001';
SELECT count(*) FROM bond WHERE bond_type = '-';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label != '-';
SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;
SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_1_7';
SELECT count(DISTINCT atom.element) FROM connected connected JOIN atom atom ON connected.atom_id = atom.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';
SELECT molecule.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' AND connected.atom_id = 'TR000_4';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT SUM(bond_type = '-') / COUNT(bond_id) AS percentage FROM bond;
SELECT count(*) FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';
SELECT molecule.molecule_id FROM molecule WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING COUNT(molecule.molecule_id) > 5;
SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '=' AND molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.atom_id) DESC LIMIT 1;
SELECT cast(sum(iif(molecule.label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id AND bond.bond_id = atom.atom_id WHERE atom.element = 'h' AND bond.bond_type = '#';
SELECT count(*) FROM molecule WHERE label = '+';
SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';
SELECT count(*) FROM atom INNER JOIN bond ON atom.atom_id = bond.bond_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';
SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';
SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR002';
SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND bond_type = '=';
SELECT atom.atom_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND atom.element = 'o';
SELECT * FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;
SELECT * FROM cards WHERE bordercolor = 'borderless' AND id NOT IN (SELECT cardkingdomfoilid FROM cards WHERE cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL);
SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT max(faceconvertedmanacost) FROM cards);
SELECT cards.name FROM cards WHERE cards.edhrecrank < 100 AND cards.frameversion = 2015;
SELECT name FROM cards WHERE rarity = 'mythic' AND format = 'gladiator' AND status = 'Banned';
SELECT legalities.status FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';
SELECT cards.id, cards.artist FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND (cards.power = '*' OR cards.power IS NULL);
SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele';
SELECT rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT cards.name, cards.artist, rulings.text, rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid GROUP BY cards.name, cards.artist, rulings.text, rulings.date ORDER BY count(rulings.uuid) DESC LIMIT 1;
SELECT DISTINCT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'annul' AND cards.number = '29';
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;
SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations WHERE set_translations.language = 'Chinese Simplified';
SELECT sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';
SELECT count(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT count(*) FROM cards WHERE power = '*';
SELECT promotypes FROM cards WHERE cards.name = 'Duress';
SELECT bordercolor FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor's Chosen';
SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Angel of Mercy';
SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0;
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn';
SELECT count(legalities.id) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;
SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';
SELECT cards.types FROM cards WHERE cards.name = 'Benalish Knight';
SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight';
SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';
SELECT Divide(Count(cards.id) WHERE cards.bordercolor = 'borderless', Count(cards.id)) * 100 AS percentage FROM cards;
SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;
SELECT count(id) FROM cards WHERE bordercolor = 'borderless' AND language = 'Russian';
SELECT (count(cards.id) FILTER (WHERE cards.language = 'French' AND cards.isstoryspotlight = 1) * 100.0 / count(cards.id) FILTER (WHERE cards.isstoryspotlight = 1)) AS percentage FROM cards;
SELECT count(cards.id) FROM cards WHERE cards.toughness = 99;
SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd';
SELECT count(cards.id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedmanacost = 0;
SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%Flying%';
SELECT count(cards.id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes <> 'Angel';
SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null;
SELECT cards.id FROM cards WHERE cards.dueldeck = 'a';
SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = '2015';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT cards.id FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Japanese' AND cards.availability = 'paper';
SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';
SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.format = 'legacy';
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';
SELECT count(*) FROM cards WHERE frameversion = 'future';
SELECT cards.name , cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';
SELECT set_translations.translation , foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.setcode = '10E' AND cards.convertedmanacost = 5;
SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';
SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT * FROM cards WHERE colors = 'B' AND originaltype = 'Artifact' AND language IN (SELECT language FROM foreign_data);
SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY date ASC LIMIT 3;
SELECT count(cards.id) FROM cards WHERE cards.artist = 'John Avon' AND cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NOT NULL;
SELECT count(*) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;
SELECT count(*) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;
SELECT count(*) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1;
SELECT cards.manacost FROM cards WHERE cards.layout = 'normal' AND cards.frameversion = '2003' AND cards.bordercolor = 'black' AND cards.availability LIKE '%mtgo,paper%';
SELECT sum(cards.convertedmanacost) FROM cards WHERE cards.artist = 'Rob Alexander';
SELECT cards.type FROM cards WHERE cards.availability = 'arena';
SELECT set_translations.setcode FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';
SELECT cast(( SELECT count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1 ) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary' AND isonlineonly = 1;
SELECT id FROM cards WHERE isstoryspotlight = 1 AND istextless = 0;
SELECT set_translations.translation , foreign_data.name FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE set_translations.language = 'Spanish';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.basesetsize = 309;
SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brasil)' AND sets.block = 'Commander';
SELECT cards.id FROM cards WHERE cards.types = 'Creature' AND cards.status = 'legal';
SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;
SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%';
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'premodern' AND cards.side IS NULL AND rulings.text = 'This is a triggered mana ability.';
SELECT cards.id FROM cards WHERE cards.artist = 'Erica Yang' AND cards.format = 'pauper' AND cards.availability = 'paper';
SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson';
SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2007-02-01' AND cards.rarity = 'rare';
SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 180 AND sets.block = 'Ravnica';
SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE format = 'commander' AND status = 'legal';
SELECT cast(sum(CASE WHEN foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.power IS NULL OR cards.power = '*';
SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';
SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader';
SELECT COUNT(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;
SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;
SELECT cards.name FROM cards WHERE cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name LIMIT 3;
SELECT foreign_data.language FROM foreign_data WHERE foreign_data.multiverseid = 149934;
SELECT cards.cardkingdomfoilid, cards.cardkingdomid FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;
SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;
SELECT cards.id FROM cards WHERE cards.subtypes = 'Angel,Wizard' AND cards.side IS NULL;
SELECT sets.name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY sets.name ASC LIMIT 3;
SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC';
SELECT name, translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;
SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;
SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON cards.multiverseid = set_translations.multiverseid INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;
SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND set_translations.language = 'Japanese';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1;
SELECT cast(count(CASE WHEN foreign_data.language = 'Chinese Simplified' AND foreign_data.isonlineonly = 1 THEN foreign_data.id ELSE NULL END) AS REAL) * 100 / count(foreign_data.id) FROM `foreign_data`;
SELECT count(*) FROM set_translations WHERE language = 'Japanese' AND mtgocode IS NULL;
SELECT count(*) FROM cards WHERE bordercolor = 'black';
SELECT count(id) FROM cards WHERE cards.frameeffects = 'extendedart';
SELECT id FROM cards WHERE bordercolor = 'black' AND isfullart = 1;
SELECT language FROM foreign_data WHERE id = 174;
SELECT sets.name FROM sets WHERE sets.code = 'ALL';
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'A Pedra Fellwar';
SELECT sets.code FROM sets WHERE sets.releasedate = '2007-07-13';
SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = "Masques" AND sets.name = "Mirage";
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';
SELECT COUNT(convertedmanacost = 16), COUNT(convertedmanacost) FROM cards WHERE name = 'Abyssal Horror';
SELECT sets.code FROM sets WHERE sets.type = 'expansion' AND sets.type = 'commander';
SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';
SELECT count(*) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;
SELECT count(*) FROM cards WHERE availability like '%paper%' AND hand = '3';
SELECT cards.name FROM cards WHERE cards.istextless = 0;
SELECT cards.convertedmanacost FROM cards WHERE cards.name = 'Ancestor`s Chosen';
SELECT count(DISTINCT cards.power) FROM cards WHERE cards.bordercolor = 'white' AND (cards.power = '*' OR cards.power IS NULL);
SELECT cards.name FROM cards WHERE cards.ispromo = 1 AND cards.side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseurls FROM cards WHERE promotypes='bundle';
SELECT count(DISTINCT cards.artist) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena,mtgo%';
SELECT cards.name, cards.convertedmanacost FROM cards ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT cards.artist FROM cards WHERE cards.flavorname = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.name = 'Ancestor''s Chosen';
SELECT count(set_translations.id) FROM set_translations INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE cards.name = 'Angel of Mercy';
SELECT cards.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT CASE WHEN set_translations.language = 'Korean' THEN 'YES' ELSE 'NO' END FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name LIKE '%Ancestor''s Chosen%';
SELECT count(cards.artist) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON set_translations.id = cards.id WHERE sets.name = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';
SELECT CASE WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NOT NULL THEN 'YES' WHEN sets.mtgocode IS NULL AND cards.mtgocode IS NOT NULL THEN 'NO' WHEN sets.mtgocode IS NOT NULL AND cards.mtgocode IS NULL THEN 'NO' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy';
SELECT releasedate FROM sets WHERE name = 'Ancestor''s Chosen';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = ' Hauptset Zehnte Edition';
SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;
SELECT CASE WHEN sets.isforeignonly = 1 THEN 'YES' ELSE 'NO' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Adarkar Valkyrie';
SELECT count(DISTINCT sets.id) FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.id INNER JOIN sets ON sets.code = set_translations.setcode WHERE foreign_data.language = 'Italian' AND sets.basesetsize < 10;
SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black';
SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE setcode = 'Coldsnap' );
SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.setcode = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');
SELECT * FROM cards WHERE cards.setcode = 'Coldsnap' AND cards.number = 4;
SELECT count(*) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR T1.power IS NULL);
SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL;
SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German';
SELECT rulings.text FROM foreign_data INNER JOIN rulings ON foreign_data.uuid = rulings.uuid INNER JOIN sets ON foreign_data.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';
SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.uuid = set_translations.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY foreign_data.convertedmanacost DESC LIMIT 1;
SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';
SELECT SUM(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) * 100 / SUM(1) AS percentage FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap';
SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards WHERE name = 'Coldsnap' AND cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL;
SELECT sets.code FROM sets WHERE releasedate = '2017-07-14';
SELECT sets.keyrunecode FROM sets WHERE code = 'PKHC';
SELECT sets.mcmid FROM sets WHERE sets.code = 'SS2';
SELECT mcmname FROM sets WHERE releasedate = '2017/6/9';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'From the Vault: Lore';
SELECT sets.parentcode FROM sets WHERE sets.name = 'Commander 2014 Oversized';
SELECT IF(cards.hascontentwarning = 1, 'YES', 'NO'), rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec';
SELECT releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation';
SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huitième édition';
SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.name = 'Tendo Ice Bridge' AND set_translations.language = 'French';
SELECT count(DISTINCT set_translations.translation) FROM sets sets JOIN set_translations set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Tenth Edition' AND set_translations.translation IS NOT NULL;
SELECT translation FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese';
SELECT cards.name FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT sets.releasedate FROM sets INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE set_translations.translation = 'Ola de frío';
SELECT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim';
SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';
SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' AND sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese';
SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)))*100 FROM set_translations WHERE language = 'Portuguese (Brazil)';
SELECT availability FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE cards.artist = 'Aleksi Briclot' AND cards.istextless = 1;
SELECT id FROM sets WHERE basesetsize = ( SELECT MAX(basesetsize) FROM sets );
SELECT artist FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE side IS NULL );
SELECT cards.frameeffects FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL GROUP BY cards.frameeffects ORDER BY count(cards.frameeffects) DESC LIMIT 1;
SELECT count(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasfoil = 0 AND dueldeck = 'a';
SELECT sets.id FROM sets WHERE sets.type = 'commander' ORDER BY sets.totalsetsize DESC LIMIT 1;
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedmanacost DESC LIMIT 10;
SELECT originalreleasedate, format FROM cards WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;
SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.artist = 'Volkan Baǵa' AND foreign_data.language = 'French' AND set_translations.language = 'French';
SELECT count(CASE WHEN cards.rarity = 'rare' AND cards.types = 'Enchantment' AND legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Abundance';
SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY COUNT(legalities.status = 'Banned') DESC LIMIT 1;
SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id WHERE sets.name = 'Battlebond';
SELECT artist , format FROM cards WHERE artist = ( SELECT MIN(artist) FROM cards );
SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.artist = 'D. Alexander Gregory' AND cards.frameversion = '1997' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1 AND sets.name = 'Wizards of the Coast';
SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.edhrecrank = 1 AND legalities.status = 'Banned';
SELECT AVG(id) FROM sets WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';
SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';
SELECT uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND legalities.status = 'banned' OR legalities.status = 'restricted';
SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';
SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.translation NOT LIKE '%Japanese%';
SELECT cards.frameversion, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';
SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 2;
SELECT displayname FROM users WHERE year(creationdate) = 2011;
SELECT count(*) FROM users WHERE lastaccessdate > '2014-09-01';
SELECT displayname FROM users ORDER BY views DESC LIMIT 1;
SELECT count(users.id) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;
SELECT count(users.id) FROM users WHERE users.views > 10 AND year(users.creationdate) > 2013;
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT users.displayname FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';
SELECT posts.title FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname FROM users users JOIN posts posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT Max(posts.answercount) FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');
SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE posts.title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posthistory.id DESC LIMIT 1;
SELECT count(*) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL;
SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL;
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;
SELECT users.location FROM users INNER JOIN posts ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';
SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';
SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1;
SELECT count(DISTINCT badges.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1;
SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY b.userid);
SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;
SELECT count(*) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';
SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;
SELECT count(*) FROM badges WHERE name = 'Revival';
SELECT p.title FROM posts p JOIN comments c ON p.id = c.postid ORDER BY c.score DESC LIMIT 1;
SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;
SELECT sum(posts.favoritecount) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';
SELECT comments.text FROM comments WHERE comments.postid = 107829 AND comments.commentcount = 1;
SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = 23853;
SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041';
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';
SELECT users.displayname FROM users INNER JOIN votes ON votes.userid = users.id WHERE votes.id = '6347';
SELECT COUNT(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%';
SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';
SELECT (SELECT count(posts.id) FROM posts WHERE posts.owneruserid = '24') / (SELECT count(votes.id) FROM votes WHERE votes.userid = '24');
SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT comments.text FROM comments WHERE comments.score = 17;
SELECT users.displayname FROM users WHERE users.websiteurl = 'http://stackoverflow.com';
SELECT badges.name FROM users JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost';
SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';
SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion';
SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';
SELECT comments.text FROM comments comments INNER JOIN posts posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer';
SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';
SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.posthistorytypeid = 2;
SELECT SUM(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';
SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute value in standard deviation?');
SELECT SUM(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';
SELECT users.displayname FROM posts posts JOIN votes votes ON posts.id = votes.postid JOIN users users ON votes.userid = users.id WHERE posts.title LIKE '%variance%' AND votes.bountyamount = 50;
SELECT AVG(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = '<humor>';
SELECT COUNT(*) FROM comments WHERE comments.userid = 13;
SELECT users.id FROM users WHERE users.reputation = (SELECT max(reputation) FROM users);
SELECT users.id FROM users WHERE users.views = (SELECT Min(users.views) FROM users);
SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(badges.date) = 2011;
SELECT count(DISTINCT badges.userid) FROM badges WHERE count(name) > 5;
SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' OR badges.name = 'Supporter' AND users.location = 'New York';
SELECT users.id, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1;
SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY posthistory.postid HAVING COUNT(posthistory.id) = 1 AND users.views >= 1000;
SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id HAVING count(*) = (SELECT max(comment_count) FROM (SELECT count(*) AS comment_count FROM comments GROUP BY comments.userid));
SELECT count(DISTINCT users.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';
SELECT (count(name) FILTER (WHERE Year(date) = 2010) - count(name) FILTER (WHERE Year(date) = 2011)) * 100 / count(name) FROM badges;
SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;
SELECT posts.id , posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE postlinks.postid = 61217;
SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.id = 395;
SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;
SELECT SUM(posts.favoritecount) FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE users.id = 686 AND YEAR(posts.creationdate) = 2011;
SELECT AVG(users.upvotes) , AVG(users.age) FROM users WHERE users.id IN (SELECT posts.owneruserid FROM posts WHERE posts.commentcount > 10);
SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Announcer';
SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT COUNT(*) FROM comments WHERE score > 60;
SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0';
SELECT count(*) FROM posts WHERE score = 10;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(reputation) FROM users );
SELECT users.reputation FROM badges JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';
SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY';
SELECT cast(count(users.displayname = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';
SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(userid) FROM badges WHERE name = 'Organizer' ), users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;
SELECT comments.score FROM comments INNER JOIN posts ON posts.id = comments.postid WHERE posts.creationdate = '2010-07-19 19:19:56.0';
SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2010-07-19 19:37:33.0';
SELECT users.age FROM users INNER JOIN badges ON badges.userid = users.id WHERE users.location = 'Vienna, Austria';
SELECT count(*) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;
SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);
SELECT b.name FROM badges b JOIN users u ON b.userid = u.id WHERE u.displayname = 'Sharpie';
SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.age > 65 AND badges.name = 'Supporter';
SELECT displayname FROM users WHERE id = 30;
SELECT count(*) FROM users WHERE location = 'New York';
SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2010;
SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65;
SELECT users.displayname FROM users WHERE users.views = ( SELECT MAX(users.views) FROM users );
SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) FROM votes;
SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE users.displayname = 'John Salvatier';
SELECT count(*) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo';
SELECT count(*) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';
SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;
SELECT posts.id FROM posts WHERE posts.owneruserid IN (SELECT users.id FROM users WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder')) GROUP BY posts.id ORDER BY MAX(SUM(posts.viewcount)) DESC LIMIT 1;
SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4;
SELECT count(*) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan')) AND score < 60;
SELECT t.tagname FROM tags t JOIN posts p ON t.excerptpostid = p.id JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Mark Meckes' AND p.commentcount = 0;
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';
SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) AS percentage FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'Community';
SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) AS difference FROM posts INNER JOIN users ON posts.owneruserid = users.id;
SELECT count(DISTINCT badges.userid) FROM badges WHERE year(badges.date) = 2014 AND badges.name = 'Commentator';
SELECT count(*) FROM posts WHERE creationdate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59';
SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT MAX(views) FROM users );
SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';
SELECT count(*) FROM comments WHERE userid = 13 AND score < 60;
SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON comments.userid = users.id WHERE comments.score > 60;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;
SELECT users.displayname , users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;
SELECT posthistory.id, posthistory.creationdate FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?' ORDER BY posthistory.creationdate DESC LIMIT 1;
SELECT users.lastaccessdate , users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers';
SELECT posts.title FROM posts INNER JOIN postlinks ON postlinks.relatedpostid = posts.id WHERE posts.title = 'How to tell if something happened in a data set which monitors a value over time';
SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND YEAR(posthistory.creationdate) = 2013;
SELECT posts.ownerdisplayname FROM posts WHERE posts.viewcount = (SELECT MAX(posts.viewcount) FROM posts);
SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';
SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';
SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid IS NOT NULL);
SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 AND votes.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);
SELECT posts.title FROM posts ORDER BY viewcount DESC LIMIT 5;
SELECT count(*) FROM tags WHERE count BETWEEN 5000 AND 7000;
SELECT owneruserid FROM posts WHERE favoritecount = (SELECT MAX(favoritecount) FROM posts);
SELECT age FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);
SELECT count(*) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(posts.creationdate) = 2011 AND votes.bountyamount = 50;
SELECT id FROM users WHERE age = (SELECT min(age) FROM users);
SELECT SUM(score) FROM posts WHERE posts.lasactivitydate LIKE '2010-07-19%';
SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';
SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.creationdate = (SELECT min(creationdate) FROM postlinks);
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;
SELECT MIN(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';
SELECT MIN(creationdate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);
SELECT users.displayname FROM users INNER JOIN badges ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;
SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;
SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT max(age) FROM users));
SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;
SELECT users.displayname FROM users WHERE users.age >= 19 AND users.age <= 65;
SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;
SELECT posts.id , posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT posts.id , posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;
SELECT AVG(posts.score) FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner';
SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;
SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(creationdate) = 2011 AND users.reputation > 1000;
SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 AND 18) / (SELECT count(id) FROM users) AS percentage;
SELECT SUM(posts.viewcount), users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.text = 'Computer Game Datasets' GROUP BY users.displayname;
SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT avg(posts.viewcount) FROM posts);
SELECT count(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);
SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;
SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183;
SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett') ORDER BY date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;
SELECT SUBTRACT(date from stats_badges, creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Zolomon';
SELECT COUNT(posts.id), COUNT(comments.id) FROM posts FULL OUTER JOIN comments ON posts.id = comments.postid FULL OUTER JOIN users ON posts.owneruserid = users.id WHERE users.creationdate = (SELECT MAX(users.creationdate) FROM users);
SELECT comments.text, users.displayname FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE posts.title = 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 10;
SELECT COUNT(*) FROM badges WHERE name = 'Citizen Patrol';
SELECT count(*) FROM tags WHERE tagname = 'careers';
SELECT users.reputation , users.views FROM users WHERE users.displayname = 'Jarrod Dixon';
SELECT count(comments.id), count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data';
SELECT creationdate FROM users WHERE users.displayname = 'IrishStat';
SELECT count(*) FROM votes WHERE bountyamount >= 30;
SELECT COUNT(stats_posts.id) / (SELECT COUNT(stats_posts.id) FROM stats_posts WHERE stats_posts.reputation = (SELECT MAX(stats_posts.reputation) FROM stats_posts)) * 100 FROM stats_posts WHERE stats_posts.score > 50;
SELECT count(*) FROM posts WHERE score < 20;
SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;
SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample';
SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)';
SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title LIKE '%linear regression%' AND posthistory.comment LIKE '%regression%';
SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) ORDER BY score DESC LIMIT 1;
SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';
SELECT count(DISTINCT posts.id) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;
SELECT count(DISTINCT comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;
SELECT count(DISTINCT users.id) FROM users JOIN comments ON users.id = comments.userid WHERE comments.score = 0 AND users.age = 40;
SELECT posts.id, comments.text FROM posts JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';
SELECT users.upvotes FROM users JOIN comments ON users.id = comments.userid WHERE comments.text = 'R is also lazy evaluated.';
SELECT text FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Harvey Motulsky');
SELECT DISTINCT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;
SELECT cast((sum(CASE WHEN comments.score BETWEEN 5 AND 10 AND users.upvotes = 0 THEN 1 ELSE 0 END)) AS REAL) * 100 / count(comments.userid) FROM comments INNER JOIN users ON comments.userid = users.id;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT count(superhero.superhero_name) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;
SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15 );
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour.colour FROM superhero superhero INNER JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC;
SELECT publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT skin_colour_id FROM superhero GROUP BY skin_colour_id ORDER BY COUNT(superhero.id) DESC;
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));
SELECT count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';
SELECT publisher.publisher_name FROM publisher publisher JOIN superhero superhero ON publisher.id = superhero.publisher_id JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY MIN(hero_attribute.attribute_value) LIMIT 1;
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name FROM publisher INNER JOIN superhero superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT superhero_name FROM superhero WHERE id = ( SELECT MIN(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' );
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;
SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Death Touch';
SELECT count(*) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superpower.id) DESC LIMIT 1;
SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT (SUM(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) * 100.0 / count(superhero.id)) AS calculation FROM superhero superhero JOIN alignment alignment ON superhero.alignment_id = alignment.id JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher;
SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';
SELECT avg(attribute_value) FROM hero_attribute;
SELECT count(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON hero_power.power_id = superpower.id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Deathlok';
SELECT avg(weight_kg) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');
SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id JOIN gender gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male';
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190 AND colour.colour = 'No colour';
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56;
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;
SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id WHERE superhero.height_cm = 185 AND superhero.race = 'human';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;
SELECT superhero.superhero_name FROM superhero superhero JOIN gender gender ON superhero.gender_id = gender.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT avg(weight_kg) * 0.79 FROM superhero) AND superhero.weight_kg IS NOT NULL;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1;
SELECT hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Abomination';
SELECT superpower.power_name FROM hero_power hero_power JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;
SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';
SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'strength' GROUP BY superhero.full_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;
SELECT AVG(COUNT(superhero.id)) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1;
SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY MAX(hero_attribute.attribute_value) DESC LIMIT 1;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT superhero.eye_colour_id , superhero.hair_colour_id , superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name , publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id;
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero, colour WHERE superhero.skin_colour_id = colour.id AND gender = 'Female';
SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';
SELECT gender.gender FROM superhero superhero INNER JOIN gender gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';
SELECT count(superpower.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm FROM superhero INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Amber';
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';
SELECT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold';
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON alignment.id = superhero.alignment_id WHERE alignment.alignment = 'Neutral';
SELECT count(*) FROM hero_attribute WHERE attribute_name = 'Strength' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');
SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM superhero WHERE publisher_name = 'Marvel Comics';
SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT sum(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - sum(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) AS difference FROM superhero;
SELECT AVG(superhero.height_cm) AS average FROM superhero;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';
SELECT count(superhero.id) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT count(*) FROM superhero WHERE alignment_id = 3;
SELECT superhero.superhero_name, attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = 2;
SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy'));
SELECT count(DISTINCT superhero.id) FROM superhero superhero WHERE superhero.publisher_id = 1;
SELECT cast(sum(CASE WHEN colour.colour = 'Blue' AND colour.id = superhero.eye_colour_id THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) AS percentage FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id;
SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superpower.id FROM superpower WHERE superpower.power_name = 'cryokinesis';
SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;
SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;
SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Helen Parr';
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';
SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superhero.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT avg(attribute_value) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.alignment_id = 3;
SELECT colour.colour FROM colour INNER JOIN superhero ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;
SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.gender = 'Female' AND alignment.alignment = 'Good';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male';
SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN alignment ON superhero.alignment_id = alignment.id;
SELECT SUM(colour.id = 7) - SUM(colour.id = 1) AS difference FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;
SELECT hero_attribute.attribute_value FROM superhero superhero INNER JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Ajax';
SELECT count(superhero.id) FROM superhero superhero JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment = 'Bad';
SELECT count(superhero.id) FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id JOIN gender gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;
SELECT gender.gender FROM superhero superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero superhero JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT COUNT(superhero.id) FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;
SELECT SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') AS difference FROM publisher;
SELECT attribute.attribute_name FROM superhero superhero JOIN hero_attribute hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY attribute.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT (count(CASE WHEN gender.gender = 'Female' THEN 1 END) * 100.0 / count(*)) AS percentage FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';
SELECT (SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics') * 100.0 / COUNT(publisher_name = 'Marvel Comics')) AS percentage FROM superhero superhero INNER JOIN publisher publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_attribute.hero_id FROM hero_attribute WHERE hero_attribute.attribute_value = (SELECT min(attribute_value) FROM hero_attribute);
SELECT superhero.full_name FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE race.race = 'Alien';
SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');
SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';
SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;
SELECT avg(superhero.height_cm) AS average_height FROM superhero WHERE superhero.gender_id = 1 AND superhero.race_id = 1;
SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';
SELECT colour.colour FROM colour, superhero WHERE superhero.eye_colour_id = colour.id AND superhero.superhero_name = 'Blackwulf';
SELECT superpower.power_name FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 0.8 * (SELECT avg(height_cm) FROM superhero);
SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 20 AND qualifying.q1 = (SELECT MAX(q1) FROM qualifying WHERE qualifying.raceid = 20);
SELECT drivers.surname FROM qualifying qualifying JOIN drivers drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.number = 2 AND qualifying.q2 = (SELECT min(q2) FROM qualifying WHERE raceid = 19 AND number = 2);
SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT DISTINCT circuits.name FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany';
SELECT constructorstandings.position FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault';
SELECT count(DISTINCT races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country NOT IN ('Asia', 'Europe') AND seasons.year = 2010;
SELECT DISTINCT races.name FROM circuits circuits JOIN races races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain';
SELECT circuits.lat , circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT lat , lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';
SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;
SELECT qualifying.q1 FROM qualifying WHERE qualifying.qualifyid = 354;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40';
SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND qualifying.q3 LIKE 'M:SS%' AND status.status = 'Finished';
SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015/11/29';
SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;
SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = 161;
SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';
SELECT constructors.url FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructorresults.raceid = 9 AND constructorresults.points = (SELECT MAX(constructorresults.points) FROM constructorresults);
SELECT qualifying.q1 FROM qualifying WHERE qualifying.driverid = 345 AND qualifying.raceid = 345;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN driverstandings ON qualifying.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE qualifying.raceid = '347' AND qualifying.q2 = '0:01:15';
SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 45 AND qualifying.q3 LIKE '0:01:33%';
SELECT results.time FROM results WHERE results.driverid = 743 AND results.raceid = 743;
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND results.position = 2;
SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;
SELECT count(driverid) FROM driverstandings driverstandings JOIN drivers drivers ON driverstandings.driverid = drivers.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2015 AND races.date = '2015-11-29';
SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN results ON laptimes.raceid = results.raceid JOIN driverstandings ON laptimes.raceid = driverstandings.raceid WHERE laptimes.raceid = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;
SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results);
SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)) * 100 , (fastestlapspeed(raceid = 853))), 100) AS percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;
SELECT drivers.forename, drivers.surname, DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;
SELECT min(races.year) FROM races WHERE races.name = 'Singapore Grand Prix';
SELECT count(*) FROM races WHERE year = 2005;
SELECT name FROM races WHERE year = year(min(date)) AND month = month(min(date));
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT max(round) FROM races WHERE year = 1999);
SELECT seasons.year FROM races INNER JOIN seasons ON races.year = seasons.year GROUP BY seasons.year ORDER BY count(races.raceid) DESC LIMIT 1;
SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year <> 2000;
SELECT circuits.country, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;
SELECT max(seasons.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch';
SELECT count(DISTINCT seasons.year) FROM races races JOIN seasons seasons ON races.year = seasons.year JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;
SELECT drivers.forename || ' ' || drivers.surname AS fullname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY driverstandings.points DESC LIMIT 1;
SELECT drivers.forename, drivers.surname, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3;
SELECT drivers.forename, drivers.surname, races.name, laptimes.milliseconds FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes);
SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;
SELECT cast(count(raceid) AS REAL) * 100 / count(DISTINCT raceid) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010;
SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.driverid ORDER BY MAX(driverstandings.wins) DESC LIMIT 1;
SELECT year(CURRENT_TIMESTAMP) - year(drivers.dob) AS age, drivers.driverref FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob ASC LIMIT 1;
SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN constructorresults ON races.raceid = constructorresults.raceid INNER JOIN results ON constructorresults.constructorresultsid = results.resultid WHERE races.year BETWEEN 1990 AND 2000 AND constructorresults.constructorid = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE races.year = 2005 AND MONTH(races.date) = 9;
SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20;
SELECT count(*) FROM drivers, results, races, circuits WHERE drivers.driverid = results.driverid AND races.raceid = results.raceid AND circuits.circuitid = races.circuitid AND drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';
SELECT races.name, races.year FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT min(milliseconds) FROM laptimes laptimes JOIN results results ON laptimes.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher');
SELECT AVG(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Eddie' AND drivers.driverref = 'irvine' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT drivers.forename, drivers.surname, races.name, results.points FROM drivers INNER JOIN races ON drivers.driverid = races.raceid INNER JOIN results ON races.raceid = results.raceid WHERE drivers.driverref = 'lewis' AND races.year = (SELECT MIN(year) FROM races);
SELECT races.date, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;
SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY COUNT(laps) DESC LIMIT 1;
SELECT COUNT(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix';
SELECT circuits.lat , circuits.lng FROM circuits WHERE circuits.name = 'Silverstone Circuit';
SELECT circuits.name FROM circuits ORDER BY circuits.lat DESC LIMIT 1;
SELECT circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';
SELECT circuits.country FROM circuits ORDER BY circuits.alt DESC LIMIT 1;
SELECT count(*) FROM drivers WHERE code IS NULL;
SELECT drivers.nationality FROM drivers ORDER BY drivers.dob DESC LIMIT 1;
SELECT drivers.surname FROM drivers INNER JOIN constructors ON drivers.driverid = constructors.constructorid WHERE constructors.nationality = 'italian';
SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';
SELECT driverref FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';
SELECT * FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.location = 'Abu Dhabi';
SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT races.date FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009;
SELECT min(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN results ON laptimes.raceid = results.raceid AND laptimes.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT max(milliseconds) FROM laptimes);
SELECT driverref FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid IN (SELECT raceid FROM races WHERE name = 'Canadian Grand Prix' AND year = 2007) AND rank = 1);
SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT races.name FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;
SELECT max(fastestlapspeed) FROM results WHERE raceid = (SELECT raceid FROM races WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009);
SELECT DISTINCT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT positionorder, rank FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceid = (SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008);
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.grid = 4 AND races.year = 1989 AND races.name = 'Australian Grand Prix';
SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;
SELECT results.fastestlap FROM results JOIN drivers ON results.driverid = drivers.driverid JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND results.rank = 2 AND races.year = 2008;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = '2008' AND races.name = 'Australian Grand Prix';
SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid JOIN races races ON results.raceid = races.raceid WHERE drivers.nationality = 'British' AND races.year = 2008;
SELECT count(DISTINCT driverstandings.driverid) FROM driverstandings driverstandings JOIN laptimes laptimes ON driverstandings.driverid = laptimes.driverid JOIN races races ON driverstandings.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND laptimes.time IS NOT NULL;
SELECT sum(results.points) FROM results JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT avg(laptimes.milliseconds / 1000) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT COUNT(races.raceid) / COUNT(laptimes.raceid) AS rate FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND laptimes.time IS NOT NULL;
SELECT divide(subtract(results.time, (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)), (SELECT laptimes.time FROM laptimes WHERE laptimes.raceid = races.raceid AND laptimes.driverid = results.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1)) * 100 FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT count(*) FROM circuits WHERE circuits.location = 'Adelaide' AND circuits.country = 'Australia';
SELECT circuits.lat , circuits.lng FROM circuits WHERE circuits.country = 'USA';
SELECT count(driverid) FROM drivers WHERE nationality = 'British' AND year(dob) > 1980;
SELECT max(points) FROM constructors WHERE nationality = 'British';
SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;
SELECT constructors.name FROM constructorresults constructorresults JOIN constructors constructors ON constructorresults.constructorid = constructors.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE races.raceid = 291 AND constructorresults.points = 0;
SELECT COUNT(*) FROM constructors constructors JOIN constructorresults constructorresults ON constructors.constructorid = constructorresults.constructorid JOIN results results ON constructorresults.raceid = results.raceid JOIN constructorstandings constructorstandings ON constructors.constructorid = constructorstandings.constructorid JOIN races races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;
SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.position = 1;
SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50;
SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009 AND laptimes.time IS NOT NULL;
SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(results.time, 7, 2) AS REAL)) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year < 1975;
SELECT drivers.forename, drivers.surname FROM drivers WHERE year(dob) > 1975 AND driverid IN (SELECT driverid FROM driverstandings WHERE position = 2);
SELECT count(DISTINCT drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime ASC LIMIT 1;
SELECT fastestlap FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = 2009) AND fastestlap IS NOT NULL ORDER BY fastestlap ASC LIMIT 1;
SELECT avg(fastestlapspeed) FROM results JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT r.name, r.year FROM races r JOIN results r2 ON r.raceid = r2.raceid WHERE r2.milliseconds = (SELECT min(milliseconds) FROM results WHERE milliseconds IS NOT NULL);
SELECT COUNT(driverid) / (SELECT COUNT(driverid) FROM drivers WHERE year(dob) < 1985) * 100 FROM drivers WHERE year(dob) < 1985 AND laps > 50;
SELECT count(drivers.driverid) FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 7200;
SELECT code FROM drivers WHERE nationality = 'American';
SELECT races.raceid FROM races WHERE races.year = 2009;
SELECT count(DISTINCT drivers.driverid) FROM drivers drivers JOIN results results ON drivers.driverid = results.driverid WHERE results.raceid LIKE 18;
SELECT count(drivers.driverid) FROM drivers INNER JOIN circuits ON drivers.nationality = circuits.country WHERE circuits.country = 'Netherlands';
SELECT drivers.driverref FROM drivers WHERE drivers.forename = 'Robert' AND drivers.surname = 'Kubica';
SELECT count(*) FROM drivers WHERE nationality = 'British' AND year(dob) = 1980;
SELECT drivers.forename, laptimes.time FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND year(drivers.dob) BETWEEN 1980 AND 1990 ORDER BY laptimes.time ASC LIMIT 3;
SELECT driverref FROM drivers WHERE nationality = 'German' AND year(dob) = (SELECT min(year(dob)) FROM drivers WHERE nationality = 'German');
SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE year(drivers.dob) = 1971 AND results.fastestlaptime IS NOT NULL;
SELECT * FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY Max(time) DESC LIMIT 10;
SELECT seasons.year FROM seasons WHERE seasons.year IN (SELECT races.year FROM races WHERE races.raceid IN (SELECT results.raceid FROM results WHERE results.fastestlaptime IS NOT NULL));
SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid GROUP BY races.year ORDER BY Max(laptimes.milliseconds) ASC LIMIT 1;
SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime DESC LIMIT 5;
SELECT count(DISTINCT results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid > 50 AND results.raceid < 100 AND results.time IS NULL;
SELECT count(circuitid) FROM circuits WHERE country = 'Austria';
SELECT number FROM results WHERE time IS NOT NULL GROUP BY number ORDER BY count(number) DESC LIMIT 1;
SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN constructors ON constructors.constructorid = qualifying.constructorid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL;
SELECT races.year, races.name, races.date, races.time FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid JOIN races races ON qualifying.raceid = races.raceid WHERE drivers.dob = (SELECT min(dob) FROM drivers) AND qualifying.qualifyid = (SELECT min(qualifyid) FROM qualifying);
SELECT count(DISTINCT drivers.driverid) FROM drivers drivers, results results, status status WHERE drivers.driverid = results.driverid AND results.statusid = status.statusid AND status.status = 'Puncture' AND drivers.nationality = 'American';
SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorstandings.points DESC LIMIT 1;
SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(wins) DESC LIMIT 1;
SELECT drivers.forename FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid JOIN races races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds DESC LIMIT 1;
SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1;
SELECT AVG(laptimes.milliseconds) FROM laptimes laptimes INNER JOIN drivers drivers ON laptimes.driverid = drivers.driverid INNER JOIN races races ON laptimes.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND laptimes.position < 11;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN driverstandings ON pitstops.raceid = driverstandings.raceid INNER JOIN races ON pitstops.raceid = races.raceid INNER JOIN constructors ON driverstandings.raceid = constructors.constructorid WHERE constructors.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1985' GROUP BY drivers.driverid ORDER BY avg(pitstops.duration) ASC LIMIT 3;
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.resultid = 1;
SELECT constructorref, url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND results.position = 1;
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981' AND '1991';
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;
SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';
SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix' ORDER BY constructorresults.points DESC LIMIT 1;
SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Turkish Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT avg(count(races.raceid)) FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31';
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;
SELECT count(results.resultid) FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid WHERE driverstandings.position = 91 AND driverstandings.wins = 1;
SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);
SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.date = (SELECT max(date) FROM races);
SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND circuits.name = 'Marina Bay Street Circuit' AND seasons.year = 2008;
SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1;
SELECT count(results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' ORDER BY results.number DESC LIMIT 1;
SELECT driverstandings.wins, drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE driverstandings.raceid = (SELECT MIN(raceid) FROM races);
SELECT max(pitstops.duration) FROM pitstops;
SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.circuitid = 23 ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT MAX(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT laptimes.milliseconds FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.name = 'Formula_1';
SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes) GROUP BY drivers.forename, drivers.surname LIMIT 20;
SELECT position FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND results.fastestlap = laptimes.lap AND races.name = 'Formula_1';
SELECT laptimes.lap, laptimes.milliseconds FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT time FROM laptimes WHERE raceid IN (SELECT raceid FROM races WHERE circuitid IN (SELECT circuitid FROM circuits WHERE country = 'Italy'));
SELECT races.name FROM races INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes WHERE laptimes.raceid = races.raceid) AND races.circuitid = (SELECT circuits.circuitid FROM circuits WHERE circuits.name = 'Austrian Grand Prix');
SELECT pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' AND drivers.driverref = 'driver';
SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';
SELECT AVG(pitstops.milliseconds) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Formula_1' AND drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton';
SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(DISTINCT circuits.circuitid) AS average FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT player_name , height FROM player ORDER BY height DESC LIMIT 1;
SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);
SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.attacking_work_rate = 'low';
SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;
SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));
SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY SUBTRACT(match.home_team_goal, match.away_team_goal) ASC LIMIT 1;
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;
SELECT team.team_long_name FROM league league JOIN match match ON league.id = match.league_id JOIN team team ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' GROUP BY team.team_long_name HAVING MAX(SUBTRACT(match.away_team_goal, match.home_team_goal)) > 0 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY buildupplayspeed DESC LIMIT 4;
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(match.home_team_goal = match.away_team_goal) DESC LIMIT 1;
SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND YEAR(player_attributes.date) >= '2013' AND YEAR(player_attributes.date) <= '2015';
SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;
SELECT avg(player.height) FROM player WHERE player.birthday >= '1990-01-01 00:00:00' AND player.birthday < '1996-01-01 00:00:00';
SELECT player_attributes.player_api_id FROM player_attributes WHERE substr(player_attributes.date,1,4) = '2010' AND player_attributes.overall_rating > (SELECT AVG(player_attributes.overall_rating) FROM player_attributes WHERE substr(player_attributes.date,1,4) = '2010');
SELECT team_attributes.team_fifa_api_id FROM team_attributes WHERE team_attributes.buildupplayspeed >50 AND team_attributes.buildupplayspeed <60;
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassingclass = 'Long' AND strftime('%Y', team_attributes.date) = '2012';
SELECT cast(sum(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE YEAR(player.birthday) BETWEEN '1987' AND '1992';
SELECT league.name FROM league JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;
SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE player_name = 'Ahmed Samir Farag');
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;
SELECT team_long_name FROM team_attributes WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' GROUP BY team_long_name ORDER BY SUM(chancecreationpassing) / COUNT(id) DESC;
SELECT league.name FROM league JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' GROUP BY league.name HAVING AVG(match.home_team_goal) > AVG(match.away_team_goal);
SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers';
SELECT * FROM player WHERE substr(birthday,1,7) = '1970-10';
SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';
SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag';
SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_api_id = 505942;
SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND country.name = 'Scotland' AND league.name = 'Scotland Premier League';
SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM player WHERE birthday = (SELECT max(birthday) FROM player));
SELECT * FROM player_attributes WHERE potential = (SELECT MAX(potential) FROM player_attributes);
SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes WHERE weight < 130 AND preferred_foot = 'left';
SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';
SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson';
SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';
SELECT avg(home_team_goal) AS average_home_team_goal FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';
SELECT player_attributes.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player_attributes.player_api_id, player_attributes.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1;
SELECT player_name FROM player WHERE height>180;
SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990';
SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight > 170 AND player.player_name LIKE 'Adam%';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';
SELECT potential FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran');
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left';
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';
SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB';
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70;
SELECT avg(t2.overall_rating) FROM player_attributes AS t1 INNER JOIN player AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.height > 170 AND strftime('%Y', t1.date) >= '2010' AND strftime('%Y', t1.date) <= '2015';
SELECT player_name FROM player ORDER BY height LIMIT 1;
SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Italy Serie A';
SELECT team.team_short_name FROM team JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany' AND league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';
SELECT team.team_short_name FROM team JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = (SELECT max(balance) FROM player_attributes WHERE balance = 61) AND player_attributes.potential = 61;
SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) AS difference FROM player_attributes;
SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';
SELECT player_name FROM player ORDER BY birthday DESC LIMIT 1;
SELECT player_name FROM player ORDER BY height DESC LIMIT 1;
SELECT count(DISTINCT player_attributes.player_api_id) FROM player_attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT count(DISTINCT player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday)<'1986' AND player_attributes.defensive_work_rate = 'high';
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes);
SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942;
SELECT count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;
SELECT count(match.id) FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Belgium' AND match.season = '2008/2009';
SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE birthday = (SELECT min(birthday) FROM player));
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium' AND league.name = 'Belgium Jupiler League' AND SUBSTR(`date`, 1, 7) = '2009-04';
SELECT league.name FROM league WHERE league.id = (SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id HAVING count(*) = (SELECT max(match_count) FROM (SELECT count(*) AS match_count FROM match WHERE season = '2008/2009' GROUP BY league_id)));
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player.birthday) < '1986';
SELECT (SELECT overall_rating FROM player_attributes WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM player_attributes WHERE player_name = 'Paulin Puel') AS RESULT;
SELECT AVG(buildupplayspeed) FROM team_attributes WHERE team_long_name = 'Heart of Midlothian';
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Pietro Marino';
SELECT SUM(crossing) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Aaron Lennox');
SELECT team.team_long_name, MAX(team_attributes.chancecreationpassing), team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' GROUP BY team_attributes.chancecreationpassingclass;
SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo');
SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon');
SELECT avg(match.away_team_goal) FROM match JOIN team ON match.away_team_api_id = team.team_api_id JOIN country ON team.country_id = country.id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date LIKE '2016-06-23%' ORDER BY player.birthday DESC LIMIT 1;
SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date LIKE '2016-02-04%';
SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';
SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date LIKE '2015-05-01%';
SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22 00:00:00' AND player_api_id = 505942;
SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes) AND player.player_name = 'Kevin Constant';
SELECT team_attributes.defenceteamwidthclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22';
SELECT player_attributes.dribbling FROM player_attributes INNER JOIN team_attributes ON player_attributes.id = team_attributes.id INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00';
SELECT defenceteamwidthclass FROM team_attributes WHERE team_attributes.team_long_name = 'FC Lorient' AND team_attributes.date LIKE '2010-02-22%';
SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';
SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';
SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date LIKE '2015-09-10%';
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22' AND '2016-04-21';
SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12' ) AS RESULT;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.height DESC LIMIT 1;
SELECT player.player_api_id FROM player ORDER BY player.weight DESC LIMIT 10;
SELECT player.player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(player.birthday) > 34;
SELECT count(match.home_team_goal) FROM match INNER JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = 'Aaron Lennon';
SELECT SUM(away_team_goal) FROM match WHERE away_player_11 = 46552 AND away_player_10 = 38782;
SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_11 = player.player_api_id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;
SELECT player_name FROM player_attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential = (SELECT max(potential) FROM player_attributes);
SELECT player.player_name FROM player INNER JOIN player_attributes ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(player.birthday)) ASC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN country ON player.country_id = country.id WHERE country.name = 'Belgium';
SELECT country.name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id INNER JOIN country ON player.country_id = country.id WHERE player_attributes.vision > 89;
SELECT country.name FROM country INNER JOIN player ON country.id = player.country_id GROUP BY country.name ORDER BY AVG(player.weight) DESC LIMIT 1;
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE chancecreationpassingclass = 'Safe';
SELECT avg(player.height) FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Italy';
SELECT player.player_name FROM player WHERE player.height > 180 ORDER BY player.player_name ASC LIMIT 0, 3;
SELECT count(*) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';
SELECT (SELECT jumping FROM player_attributes WHERE id = 6) - (SELECT jumping FROM player_attributes WHERE id = 23) FROM player LIMIT 1;
SELECT player_api_id FROM player_attributes WHERE potential = (SELECT MIN(potential) FROM player_attributes) AND preferred_foot = 'right' LIMIT 5;
SELECT count(player_attributes.player_api_id) FROM player_attributes WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes) AND player_attributes.preferred_foot = 'left';
SELECT cast(count(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes;
SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM league WHERE name = 'Belgium Jupiler League');
SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin';
SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';
SELECT count(*) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';
SELECT max(home_team_goal) FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Netherlands Eredivisie') AND country_id = (SELECT id FROM country WHERE name = 'Netherlands');
SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 4;
SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE match.away_team_goal = (SELECT MAX(away_team_goal) FROM match);
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = ( SELECT MAX(overall_rating) FROM player_attributes );
SELECT (count(DISTINCT CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN player.id END) * 100.0 / count(DISTINCT player.id)) AS percentage FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;
SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient WHERE sex = 'M' GROUP BY sex , admission;
SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';
SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE admission = '+';
SELECT (COUNT(id) where diagnosis = 'SLE' and admission = '+') / (COUNT(id) where diagnosis = 'SLE' and admission = '-') FROM patient WHERE diagnosis = 'SLE';
SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 30609;
SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = '163109';
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > '500';
SELECT patient.id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+';
SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.thrombosis = 2;
SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';
SELECT id, sex, diagnosis FROM patient WHERE alb < 3.5;
SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(*) FROM patient)) AS percentage FROM patient WHERE sex = 'F' AND (tp < '6.0' OR tp > '8.5');
SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(year(current_timestamp), year(patient.birthday)) >= '50';
SELECT count(DISTINCT patient.id) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';
SELECT SUBTRACT(YEAR(`first date`),YEAR(birthday)) FROM patient WHERE admission = '+';
SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';
SELECT MAX(year(patient.birthday)) - MIN(year(patient.birthday)) FROM patient WHERE patient.tg >= 200;
SELECT symptoms FROM examination WHERE id IN (SELECT id FROM patient WHERE birthday = (SELECT min(birthday) FROM patient)) AND symptoms IS NOT NULL;
SELECT EXTRACT(YEAR FROM examination.`examination date`) FROM examination JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY EXTRACT(YEAR FROM examination.`examination date`);
SELECT `examination date`, SUBTRACT(year(`first date`), year(birthday)) FROM patient WHERE diagnosis = 'SJS' ORDER BY `examination date` LIMIT 1;
SELECT (count(DISTINCT CASE WHEN patient.sex = 'M' THEN laboratory.id END) * 1.0 / count(DISTINCT CASE WHEN patient.sex = 'F' THEN laboratory.id END)) AS ratio FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.ua <= '8.0' OR laboratory.ua <= '6.5';
SELECT count(DISTINCT patient.id) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;
SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) < 18 AND year(`examination date`) BETWEEN '1990' AND '1993';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= '2.0' AND patient.sex = 'M';
SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY COUNT(patient.diagnosis) DESC LIMIT 1;
SELECT avg(SUBTRACT('1999', year(patient.birthday))) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb), diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY hgb DESC LIMIT 1;
SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-02';
SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', laboratory.date) = '1995-09-04';
SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'AORTITIS' LIMIT 1;
SELECT * FROM laboratory WHERE id = (SELECT id FROM patient WHERE diagnosis = 'SLE' AND description = '1994-02-19') AND date = '1993/11/12';
SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;
SELECT SUBTRACT(strftime('%Y', examination.`examination date`), strftime('%Y', patient.birthday)) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';
SELECT COUNT(id) FROM patient WHERE `first date` = '1991-06-13' AND diagnosis = 'SJS';
SELECT diagnosis FROM examination JOIN patient ON examination.id = patient.id WHERE `examination date` = '1997-01-27' AND patient.`first date` = '1997-01-27';
SELECT examination.symptoms FROM examination JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959/3/1' AND examination.`examination date` = '1993/9/27';
SELECT SUBTraCT(SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`)) FROM patient;
SELECT * FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'Behcet' AND YEAR(examination.`examination date`) >= '1997-1-1' AND YEAR(examination.`examination date`) < '1998-1-1';
SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;
SELECT patient.id FROM patient WHERE patient.sex = 'F' AND YEAR(patient.birthday) = 1964 AND patient.admission = '+';
SELECT id FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S' AND `acl igm` > AVG(`acl igm`) * 1.2;
SELECT 100 * SUM(CASE WHEN laboratory.`u-pro` > 0 AND laboratory.`u-pro` < 30 AND laboratory.ua <= 6.5 THEN 1 ELSE 0 END) / COUNT(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;
SELECT (SUM(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' AND patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) / COUNT(CASE WHEN patient.sex = 'M' AND YEAR(`first date`) = '1981' THEN 1 ELSE 0 END)) * 100 AS calculation FROM patient;
SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND patient.id IN (SELECT id FROM laboratory WHERE `t-bil` < 2.0);
SELECT count(*) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND `ana pattern` != 'P';
SELECT patient.sex FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123;
SELECT avg(laboratory.alb) FROM laboratory JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.plt > 400 AND patient.sex = 'F';
SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY examination.symptoms ORDER BY count(examination.symptoms) DESC LIMIT 1;
SELECT patient.`first date`, patient.diagnosis FROM patient WHERE patient.id = 48473;
SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(examination.`examination date`) = '1997' AND (laboratory.tp < 6 OR laboratory.tp > 8.5);
SELECT (SUM(diagnosis LIKE '%Itp%') * 100.0 / (SELECT SUM(diagnosis LIKE '%SLE%') FROM examination WHERE symptoms LIKE '%thrombocytopenia%')) AS calculation FROM examination WHERE symptoms LIKE '%thrombocytopenia%';
SELECT cast(count(CASE WHEN patient.diagnosis = 'RA' AND patient.sex = 'F' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'Behcet' AND patient.admission = '-';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;
SELECT DATEDIFF(examination.`examination date`, patient.`first date`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;
SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Normal' ELSE 'Abnormal' END FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE patient.id = 57266;
SELECT date FROM laboratory WHERE id = 48473 AND got >= 60;
SELECT patients.sex , patients.birthday FROM patients INNER JOIN examination ON patients.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.got < 60 AND year(examination.`examination date`) = 1994;
SELECT laboratory.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;
SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.gpt > 60 ORDER BY patient.birthday ASC;
SELECT avg(laboratory.ldh) FROM laboratory WHERE laboratory.ldh < 500;
SELECT laboratory.id , SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 600 AND 800;
SELECT admission FROM patient WHERE id IN (SELECT id FROM laboratory WHERE alp < 300);
SELECT CASE WHEN alp < 300 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = (SELECT id FROM patient WHERE birthday = '1982-04-01');
SELECT id, sex, birthday FROM patient WHERE tp < 6.0;
SELECT SUBTRACT(laboratory.tp, 8.5) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5;
SELECT * FROM patient WHERE sex = 'M' AND alb NOT BETWEEN 3.5 AND 5.5 ORDER BY birthday DESC;
SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE Year(patient.birthday) = '1982';
SELECT count(*) * 100.0 / (SELECT count(*) FROM patient WHERE sex = 'F') FROM laboratory WHERE (ua > 8.0 AND sex = 'M') OR (ua > 6.5 AND sex = 'F');
SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F';
SELECT id, sex, birthday FROM patient WHERE un = 29;
SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.diagnosis = 'RA' AND patient.un < 30;
SELECT count(id) FROM patient WHERE sex = 'M' AND cre >= 1.5;
SELECT (SUM(sex = 'M') > SUM(sex = 'F')) AS calculation FROM patient WHERE cre >= 1.5;
SELECT id, sex, birthday FROM patient WHERE `t-bil` = (SELECT max(`t-bil`) FROM laboratory);
SELECT patient.sex, GROUP_CONCAT(DISTINCT examination.id) FROM patient JOIN examination ON patient.id = examination.id JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.sex HAVING laboratory.`t-bil` >= 2.0;
SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1;
SELECT sum(CASE WHEN sex = 'M' THEN round((strftime('%J', date('now')) - strftime('%J', birthday)) / 365) ELSE 0 END) / count(id) FROM patient WHERE `t-cho` >= 250;
SELECT patient.id, patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300;
SELECT count(DISTINCT patient.id) FROM patient WHERE patient.tg >= 200 AND SUBTraCT(year(current_timestamp), year(patient.birthday)) > 50;
SELECT DISTINCT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '-' AND examination.cpk < 250;
SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.cpk >= 250 AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956';
SELECT patient.id, patient.sex, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;
SELECT patient.id , laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu < 180 AND year(patient.`first date`) = 1991;
SELECT patient.id, patient.sex, patient.birthday FROM patient JOIN laboratory ON patient.id = laboratory.id JOIN examination ON patient.id = examination.id WHERE (laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0) AND (examination.`acl igm` <= 3.5 OR examination.`acl igm` >= 9.0) AND (examination.`acl igg` <= 3.5 OR examination.`acl igg` >= 9.0) GROUP BY patient.sex, patient.birthday HAVING count(*) > 0 ORDER BY patient.birthday ASC;
SELECT patient.id , year(current_timestamp) - year(patient.birthday) AS age , patient.diagnosis FROM patient WHERE patient.rbc < 3.5;
SELECT * FROM patient WHERE sex = 'F' AND SUBTRACT(year(current_timestamp), year(birthday)) >= 50 AND (rbc <= 3.5 OR rbc >= 6.0) AND admission = '+';
SELECT patient.id, patient.sex FROM patient WHERE patient.admission = '-' AND patient.hgb < 10;
SELECT patient.id, patient.sex FROM patient WHERE patient.diagnosis = 'SLE' AND 10 < patient.hgb < 17 ORDER BY patient.birthday DESC LIMIT 1;
SELECT patient.id , SUBTRACT(strftime('%Y', current_timestamp), strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;
SELECT avg(laboratory.hct) FROM laboratory INNER JOIN examination ON examination.id = laboratory.id WHERE examination.`examination date` LIKE '1991%' AND laboratory.hct < 29;
SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE plt <= 100 OR plt >= 400);
SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND YEAR(laboratory.date) = '1984' AND SUBTraCT(year(current_timestamp), year(patient.birthday)) < 50;
SELECT cast(sum(CASE WHEN sex = 'F' AND pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS percentage FROM patient WHERE SUBTRACT(year(current_timestamp), year(birthday)) > 55;
SELECT patient.id FROM patient WHERE year(`first date`) > 1992 AND pt < 14;
SELECT count(laboratory.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45;
SELECT count(DISTINCT laboratory.id) FROM laboratory laboratory INNER JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.aptt > 45 AND patient.thrombosis = 0;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc > 3.5 AND laboratory.wbc < 9.0 AND laboratory.fg <= 150 OR laboratory.fg >= 450;
SELECT count(DISTINCT patient.id) FROM patient WHERE patient.birthday > '1980-01-01' AND patient.fg BETWEEN 150 AND 450;
SELECT DISTINCT patient.diagnosis FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` >= 30;
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE 0 < laboratory.`u-pro` AND laboratory.`u-pro` < 30 AND examination.diagnosis = 'SLE';
SELECT COUNT(DISTINCT examination.id) FROM examination WHERE examination.igg >= 2000;
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.igg > 900 AND examination.igg < 2000 AND examination.symptoms IS NOT NULL;
SELECT patient.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1;
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` > 80 AND examination.`acl iga` < 500 AND strftime('%Y', patient.`first date`) >= 1990;
SELECT patient.diagnosis FROM patient JOIN examination ON patient.id = examination.id WHERE examination.igm <= 40 OR examination.igm >= 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;
SELECT count(id) FROM patient WHERE description IS NULL AND crp = '+';
SELECT count(laboratory.id) FROM laboratory laboratory JOIN patient patient ON laboratory.id = patient.id WHERE laboratory.cre >= 1.5 AND SUBTraCT((YEAR(CURdate()), YEAR(birthday))) < 70;
SELECT count(DISTINCT patient.id) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.kct = '+' AND patient.ra = '-';
SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) >= 1985 AND laboratory.ra IN('-', '+-');
SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND (YEAR(CURdate()) - YEAR(patient.birthday)) > 60;
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND patient.thrombosis = '0';
SELECT count(DISTINCT examination.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND examination.c3 > 35;
SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.c4 > 10;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp = '-' AND patient.admission = '+';
SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE rnp NOT IN('-', '+-')) ORDER BY birthday DESC LIMIT 1;
SELECT count(DISTINCT examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 0 AND laboratory.sm NOT IN('-', '+-');
SELECT patient.id FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.sm NOT IN ('negative', '0') ORDER BY patient.birthday DESC LIMIT 3;
SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` > '1997-01-01' AND sc170 IN('negative','0');
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN('negative', '0') AND patient.sex = 'F' AND examination.symptoms IS NULL;
SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(patient.`first date`) < 2000;
SELECT id FROM patient WHERE `first date` = (SELECT MIN(`first date`) FROM patient WHERE ssa NOT IN('negative', '0'));
SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.ssb IN('-', '+-') AND examination.diagnosis = 'SLE';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.ssb IN ('negative', '0') AND examination.symptoms IS NOT NULL;
SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';
SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna >= 8;
SELECT count(DISTINCT patient.id) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;
SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE 900 < examination.`acl igg` < 2000 AND patient.admission = '+';
SELECT (count(*) * 100.0 / (SELECT count(*) FROM patient WHERE got >= 60 AND diagnosis = 'SLE')) AS percentage FROM patient WHERE got >= 60 AND diagnosis = 'SLE';
SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.got < 60;
SELECT MIN(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60;
SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3;
SELECT count(DISTINCT patient.id) FROM patient patient, laboratory laboratory WHERE patient.id = laboratory.id AND laboratory.got < 60 AND patient.sex = 'M';
SELECT patient.`first date` FROM laboratory WHERE ldh < 500 ORDER BY ldh DESC LIMIT 1;
SELECT date FROM patient WHERE id = (SELECT MAX(id) FROM patient) AND ldh >= 500;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp >= 300 AND patient.admission = '+';
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-';
SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;
SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SJS' AND examination.tp > 6.0 AND examination.tp < 8.5;
SELECT examination.`examination date` FROM examination JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.alb = (SELECT MAX(alb) FROM laboratory WHERE alb > 3.5 AND alb < 5.5);
SELECT count(*) FROM patient WHERE sex = 'M' AND alb > 3.5 AND alb < 5.5 AND tp between 6.0 and 8.5;
SELECT `acl igg`, `acl igm`, `acl iga` FROM examination WHERE id = (SELECT id FROM patient WHERE sex = 'F' AND ua > 6.50) ORDER BY `acl igg` DESC LIMIT 1;
SELECT MAX(examination.ana) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.cre < 1.5;
SELECT patient.id FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`) = (SELECT MAX(`acl iga`) FROM examination);
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';
SELECT examination.`acl igg` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.`t-bil` < 2.0;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE `t-cho` >= 250 AND kct = '-';
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `t-cho` < 250 AND `ana pattern` = 'P';
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.tg < 200 AND examination.symptoms IS NOT NULL;
SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200;
SELECT patient.id FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250;
SELECT count(patient.id) FROM examination JOIN patient ON examination.id = patient.id WHERE examination.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');
SELECT birthday FROM patient WHERE id IN (SELECT id FROM laboratory WHERE glu > 180) ORDER BY birthday ASC LIMIT 1;
SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0;
SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;
SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND examination.wbc BETWEEN 3.5 AND 9.0;
SELECT patient.id FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 AND patient.admission = '-';
SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;
SELECT laboratory.plt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400);
SELECT AVG(pt) FROM patient WHERE sex = 'M' AND pt < 14;
SELECT count(*) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis IN (2, 1) AND examination.pt < 14;
SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT count(attendance.link_to_member) FROM attendance, event, member WHERE attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer' AND attendance.link_to_member = member.member_id AND member.position = 'Student_Club';
SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';
SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance attendance ON member.member_id = attendance.link_to_member INNER JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_name ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;
SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';
SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT count(DISTINCT event.event_id) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event JOIN member member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;
SELECT COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.type = 'Meeting';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraiser';
SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event.event_date) = 2020;
SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';
SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';
SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON budget.link_to_member = member.member_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food';
SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';
SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';
SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';
SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08';
SELECT sum(expense.cost) / count(expense.expense_id) AS average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND (month(expense.expense_date) = 9 OR month(expense.expense_date) = 10);
SELECT sum(t.spent) - sum(t1.spent) FROM budget AS t INNER JOIN event AS t1 ON t.link_to_event = t1.event_id WHERE t1.event_name = 'Student_Club' AND t1.event_date LIKE '2019%';
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';
SELECT budget.remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;
SELECT income.notes FROM income WHERE income.source = 'Fundraising' AND income.date_received = '2019-09-14';
SELECT count(*) FROM major WHERE major.college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher';
SELECT count(*) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';
SELECT event.status FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';
SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';
SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT member.first_name, member.last_name, income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues';
SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;
SELECT (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND budget.category = 'Advertisement') / (SELECT sum(budget.amount) FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND budget.category = 'Advertisement') AS ratio FROM budget LIMIT 1;
SELECT (sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) / sum(budget.amount) * 100.0) AS percentage FROM budget budget JOIN event event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND event.event_name = 'November Speaker';
SELECT SUM(expense.cost) AS total_cost FROM expense WHERE expense.expense_description = 'Pizza';
SELECT count(*) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.last_name = 'Firth' AND member.first_name = 'Amy';
SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.remaining = (SELECT MIN(remaining) FROM budget);
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';
SELECT major.college FROM member member INNER JOIN major major ON member.link_to_major = major.major_id GROUP BY major.college HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM member GROUP BY link_to_major));
SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.phone = '809-555-3360';
SELECT event.event_name FROM budget budget INNER JOIN event ON budget.link_to_event = event.event_id GROUP BY event.event_name ORDER BY budget.amount DESC LIMIT 1;
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT count(DISTINCT attendance.link_to_member) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women's Soccer';
SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';
SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT MAX(DIVIDE(budget.spent, budget.amount)) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.status LIKE 'Closed';
SELECT count(member_id) FROM member WHERE position = 'President';
SELECT MAX(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Budget';
SELECT count(event_id) FROM `event` WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(budget.spent) FROM budget WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;
SELECT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Community Theater') AND major.major_name = 'Interior Design';
SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT count(*) FROM income WHERE income.link_to_member = 'rec280Sk7o31iG0Tx';
SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40;
SELECT SUM(expense.cost) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT member.first_name, member.last_name, income.source, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1;
SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_event GROUP BY event.event_id ORDER BY MIN(expense.cost) LIMIT 1;
SELECT SUM(t.cost) AS total_cost, SUM(t.cost WHERE t.event_name = 'Yearly Kickoff') AS yearly_kickoff_cost, DIVIDE(SUM(t.cost WHERE t.event_name = 'Yearly Kickoff'), SUM(t.cost)) * 100 AS percentage FROM expense t;
SELECT (SUM(major_name = 'Finance') / SUM(major_name = 'Physics')) AS ratio FROM major;
SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY SUM(income.amount) DESC LIMIT 1;
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;
SELECT COUNT(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';
SELECT SUM(budget.spent) / COUNT(budget.spent) FROM budget WHERE budget.category = 'Food' AND budget.event_status = 'Closed';
SELECT event.event_name FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' AND budget.spent = (SELECT max(budget.spent) FROM budget WHERE budget.category = 'Advertisement');
SELECT member.first_name, member.last_name, event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND event.event_name = 'Women's Soccer';
SELECT SUM(event.type = 'Community Service') / COUNT(event.event_id) * 100 FROM event WHERE event.event_date BETWEEN '2019-01-01' and '2019-12-31';
SELECT expense.cost FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';
SELECT t1.t_shirt_size FROM member t1 JOIN attendance t2 ON t1.member_id = t2.link_to_member GROUP BY t1.t_shirt_size ORDER BY COUNT(t1.t_shirt_size) DESC LIMIT 1;
SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;
SELECT type, SUM(cost) AS total_value FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY type;
SELECT budget.category, sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY budget.category ORDER BY sum(budget.amount) ASC;
SELECT MAX(budget.amount) FROM budget WHERE budget.category = 'Food';
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3;
SELECT sum(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.category = 'Parking' AND expense.expense_description = 'Parking';
SELECT SUM(expense.cost) AS total_expense FROM expense WHERE expense.expense_date = '2019-08-20';
SELECT member.first_name, member.last_name, SUM(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name;
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';
SELECT zip_code.zip_code FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE expense.cost < 50;
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';
SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;
SELECT category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';
SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';
SELECT (SUM(CASE WHEN major.major_name = 'Business' AND member.position = 'Member' THEN 1 ELSE 0 END) * 100.0 / COUNT(member.member_id)) AS percentage FROM member INNER JOIN major ON member.link_to_major = major.major_id;
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT count(*) FROM income WHERE amount = 50;
SELECT count(member.member_id) FROM member WHERE member.position = 'Member' AND member.t_shirt_size = 'X-Large';
SELECT count(*) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';
SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT budget.category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT zip_code.city, zip_code.state FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering department' AND member.position = 'Member';
SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';
SELECT COUNT(amount = 50) / COUNT(member_id) * 100 AS percentage FROM member WHERE t_shirt_size = 'Medium' AND position = 'Member';
SELECT DISTINCT zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box';
SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.state = 'Puerto Rico' AND zip_code.county = 'San Juan Municipio';
SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50;
SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.link_to_event WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Katy';
SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences' AND major.major_name = 'Business';
SELECT member.email FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 20 AND income.date_received BETWEEN '2019-09-10' AND '2019-11-19';
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.college = 'College of Education & Human Services';
SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;
SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense WHERE expense.cost > 50;
SELECT member.first_name, member.last_name FROM member WHERE member.t_shirt_size = 'X-Large';
SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;
SELECT event.event_name, event.location FROM event JOIN budget ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;
SELECT event.event_name , event.event_date FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT first_name, last_name, major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;
SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 50;
SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING COUNT(attendance.link_to_event) > 1;
SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';
SELECT event_name FROM event WHERE EXISTS (SELECT 1 FROM expense WHERE expense.expense_id = event.event_id AND expense.category = 'Parking' AND expense.cost < (SELECT SUM(expense.cost) / COUNT(expense.expense_id) FROM expense WHERE expense.category = 'Parking'));
SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 AS percentage FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget;
SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1;
SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY expense.cost DESC LIMIT 5;
SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(cost) FROM expense );
SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'New Jersey' OR zip_code.state = 'Vermont';
SELECT major.major_name, major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';
SELECT last_name, phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';
SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';
SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Speaker Gifts';
SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';
SELECT m.first_name || ' ' || m.last_name AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;
SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';
SELECT cast(count(CASE WHEN customers.currency = 'EUR' THEN customers.customerid END) AS REAL) / cast(count(CASE WHEN customers.currency = 'CZK' THEN customers.customerid END) AS REAL) FROM customers;
SELECT customerid FROM yearmonth WHERE date BETWEEN '201201' AND '201212' AND segment = 'LAM' ORDER BY consumption ASC LIMIT 4;
SELECT avg(yearmonth.consumption) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';
SELECT customers.customerid FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;
SELECT count(DISTINCT yearmonth.customerid) FROM yearmonth yearmonth JOIN customers customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000;
SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212';
SELECT strftime('%Y', date) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', date) ORDER BY count(transactionid) DESC LIMIT 1;
SELECT segment FROM yearmonth GROUP BY segment ORDER BY min(consumption) LIMIT 1;
SELECT substr(date, 1, 4) FROM yearmonth GROUP BY substr(date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1;
SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date BETWEEN '201301' AND '201312' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT gasstations.gasstationid, gasstations.chainid, gasstations.segment, yearmonth.date, yearmonth.customerid, yearmonth.consumption FROM gasstations INNER JOIN yearmonth ON gasstations.gasstationid = yearmonth.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK' AND customers.segment IN ('SME', 'LAM', 'KAM');
SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY (yearmonth.consumption - (SELECT yearmonth.consumption FROM yearmonth WHERE yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = '201201')) / yearmonth.consumption DESC LIMIT 1;
SELECT sum(t.amount) FROM transactions_1k t WHERE t.customerid = '6' AND t.date BETWEEN '201308' AND '201311';
SELECT SUM(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations;
SELECT sum(CASE WHEN yearmonth.customerid = 7 THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.customerid = 5 THEN yearmonth.consumption ELSE 0 END) AS diff FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201304';
SELECT SUM(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - SUM(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;
SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';
SELECT SUM(CASE WHEN yearmonth.consumption > 46.73 THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM';
SELECT gasstations.country, count(*) AS COUNT FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country ORDER BY COUNT DESC;
SELECT SUM(CASE WHEN customers.currency = 'EUR' THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM customers WHERE customers.segment = 'KAM';
SELECT cast(count(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE yearmonth.date LIKE '201202%';
SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'Slovakia' AND gasstations.segment = 'Premium';
SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.segment ORDER BY SUM(yearmonth.consumption) ASC LIMIT 1;
SELECT customers.`customer names` FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT max(consumption) FROM yearmonth WHERE date LIKE '2012%';
SELECT customers.customerid, SUM(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) DESC LIMIT 1;
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201309%';
SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date LIKE '201306%';
SELECT chainid FROM gasstations JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';
SELECT products.description FROM products INNER JOIN transactions_1k ON transactions_1k.productid = products.productid WHERE transactions_1k.currency = 'EUR';
SELECT avg(transactions_1k.price) FROM transactions_1k WHERE transactions_1k.date LIKE '2012-01%';
SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';
SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.chainid = 11;
SELECT count(DISTINCT transactions_1k.transactionid) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;
SELECT count(*) FROM transactions_1k transactions_1k INNER JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';
SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';
SELECT AVG(price) FROM transactions_1k WHERE currency = 'EUR';
SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY SUM(amount) DESC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.customerid LIMIT 1;
SELECT transactions_1k.currency FROM transactions_1k WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';
SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '21:20:00' AND transactions_1k.date = '2012-08-23';
SELECT count(transactionid) FROM transactions_1k WHERE date = '2012-08-26' AND time < '13:00:00' AND currency = 'CZK';
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid ORDER BY yearmonth.date ASC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';
SELECT transactions_1k.productid FROM transactions_1k WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00';
SELECT transactions_1k.date, yearmonth.consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE transactions_1k.date = '2012-08-24' AND yearmonth.date = '2012-01';
SELECT count(*) FROM transactions_1k transactions_1k JOIN gasstations gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00';
SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '201306';
SELECT country FROM gasstations INNER JOIN transactions_1k ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;
SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN yearmonth ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.date = '2012-08-24';
SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '2012-08-25' AND customers.currency = 'EUR';
SELECT (transactions_1k.amount - transactions_1k_1.amount) / transactions_1k.amount FROM transactions_1k INNER JOIN transactions_1k AS transactions_1k_1 ON transactions_1k.customerid = transactions_1k_1.customerid AND transactions_1k.date = '2012-08-24' AND transactions_1k_1.date = '2013-08-24' WHERE transactions_1k.customerid = 63 AND transactions_1k.date = '2012-08-25';
SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY SUM(amount) DESC LIMIT 1;
SELECT SUM(CASE WHEN gasstations.segment = 'Premium' THEN transactions_1k.price ELSE 0 END) / SUM(transactions_1k.price) AS percentage FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK';
SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid AND transactions_1k.date = yearmonth.date WHERE transactions_1k.customerid = 38508 AND yearmonth.date = '201201';
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.amount DESC LIMIT 5;
SELECT customers.customerid, customers.currency, AVG(transactions_1k.price / transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1;
SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid JOIN products ON transactions_1k.productid = products.productid WHERE transactions_1k.amount = 1 AND transactions_1k.productid = 2 GROUP BY gasstations.country ORDER BY transactions_1k.price DESC LIMIT 1;
SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date WHERE transactions_1k.productid = 5 AND transactions_1k.price / transactions_1k.amount > 29.00;
