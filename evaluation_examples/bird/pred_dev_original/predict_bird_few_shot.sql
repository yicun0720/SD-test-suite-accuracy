SELECT MAX(frpm.`percent (%) eligible free (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda';
SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.school = 'Continuation School' ORDER BY frpm.`percent (%) eligible free (ages 5-17)` ASC LIMIT 3;
SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county name` = 'Fresno' AND frpm.`charter school (y/n)` = 1;
SELECT mailstreet FROM schools WHERE cdscode = ( SELECT cdscode FROM frpm ORDER BY `frpm count (k-12)` DESC LIMIT 1 );
SELECT schools.phone FROM schools WHERE schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.lastupdate > '2000-01-01';
SELECT count(satscores.cds) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F';
SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1;
SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT satscores.numtsttakr FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;
SELECT count(schools.charter) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560;
SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1;
SELECT frpm.cdscode FROM frpm WHERE frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)` > 500;
SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.3 ORDER BY frpm.`percent (%) eligible free (k-12)` DESC LIMIT 1;
SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;
SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;
SELECT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.charter = 1 GROUP BY satscores.dname ORDER BY avgscrread DESC LIMIT 1;
SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr < 100;
SELECT frpm.`charter school number` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrwrite = 499;
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;
SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1;
SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12';
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;
SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT frpm.`school name`, frpm.streetabr FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.enroll12 - satscores.`enrollment (ages 5-17)` > 30;
SELECT sname FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500;
SELECT schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.cname = 'Riverside' AND satscores.avgscrmath > 400;
SELECT schools.school, schools.street, schools.streetabr, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.cname = 'Monterey' AND satscores.enroll12 > 800 AND satscores.rtype = 'S';
SELECT satscores.sname , satscores.avgscrwrite , schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate < '2000-01-01' OR schools.lastupdate > '1991-01-01';
SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > (SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.fundingtype = 'Locally funded');
SELECT MAX(opendate) FROM schools WHERE edopscode = 'K-12';
SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5;
SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` FROM frpm ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 2 OFFSET 9;
SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5;
SELECT `school name` FROM frpm WHERE `free meal count (ages 5-17)` BETWEEN 1900 AND 2000;
SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson';
SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` LIMIT 1;
SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = ( SELECT max(satscores.numge1500) FROM satscores );
SELECT schools.street, schools.city, schools.zip, schools.state FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1;
SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;
SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%';
SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread LIMIT 1;
SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' GROUP BY schools.school ORDER BY avgscrread DESC LIMIT 5;
SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;
SELECT satscores.avgscrmath FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath + satscores.avgscrread + satscores.avgscrwrite LIMIT 1;
SELECT satscores.avgscrwrite, schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT max(satscores.numtsttakr) FROM satscores);
SELECT schools.school , satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich';
SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.doc = 31 AND schools.gsoffered = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1;
SELECT count(schools.doc) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Alameda' AND schools.doctype = '52' AND strftime('%Y', schools.district) = '1980';
SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Orange';
SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;
SELECT schools.mailstrabr FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 5 OFFSET 5;
SELECT mailstreet FROM schools WHERE cdscode = ( SELECT cds FROM satscores ORDER BY avgscrread LIMIT 1 );
SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Lakeport' AND satscores.numtsttakr >= 1500;
SELECT sum(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';
SELECT schools.school, schools.mailzip FROM schools WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Atoian';
SELECT count(schools.county = 'Colusa') / count(schools.county = 'Humboldt') FROM schools WHERE schools.mailstate = 'CA';
SELECT count(schools.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstate = 'CA' AND frpm.`county name` = 'San Joaquin';
SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 333, 1;
SELECT schools.phone, schools.ext, schools.school FROM schools WHERE schools.zip = '95203-3704';
SELECT schools.website FROM schools WHERE schools.admfname1 = 'Mike' AND schools.admlname1 = 'Larson' OR schools.admfname1 = 'Dante' AND schools.admlname1 = 'Alvarez';
SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.virtual = 'P' AND frpm.`county name` = 'San Joaquin';
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND frpm.`district name` = 'Elementary school district';
SELECT count(*) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.charter = 0 AND frpm.`percent (%) eligible free (k-12)` < 0.18;
SELECT schools.admfname1, schools.admfname2, schools.admfname3, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter school number` = '00D2';
SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';
SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Santa Clara';
SELECT count(schools.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.fundingtype = 'Directly Funded' AND frpm.`county name` = 'Stanislaus';
SELECT sum(schools.closeddate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'San Francisco' AND schools.city = 'San Francisco';
SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;
SELECT schools.ncesdist FROM schools WHERE schools.soc = 31;
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'Community Day School' AND schools.closeddate IS NOT NULL;
SELECT frpm."DISTRICT CODE" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0;
SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';
SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.gsoffered = '5';
SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = '613360' ORDER BY frpm.`low grade` ASC LIMIT 1;
SELECT schools.eilname FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';
SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND frpm.`county name` = 'Merced';
SELECT frpm.`percent (%) eligible frpm (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';
SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(gsserved) DESC LIMIT 1;
SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE frpm.`county name` BETWEEN 'San Diego' AND 'Santa Barbara' AND schools.virtual = 'F';
SELECT `school type`, `school name`, latitude FROM schools ORDER BY latitude DESC LIMIT 1;
SELECT schools.city FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;
SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1;
SELECT city, count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-8' AND schools.magnet = 1 GROUP BY city;
SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY count(*) DESC LIMIT 2;
SELECT frpm.`percent (%) eligible free (k-12)`, frpm.`district code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';
SELECT admlname1, district, county, school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.`charter school number` WHERE frpm.`charter school number` = '40';
SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soc = '62' AND schools.doc = '54' AND satscores.dname = 'San Bernardino County ROP' AND satscores.cname = 'San Bernardino' AND satscores.sname = 'FAME Public Charter' AND satscores.rtype = 'D' AND satscores.enroll12 = '398' AND satscores.cds = '10101080000000';
SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;
SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'east Bohemia' AND trans.type = 'POPLATEK PO OBRATU';
SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id IN (SELECT district.district_id FROM district WHERE district.a3 = 'Prague');
SELECT a12, a13 FROM district ORDER BY a12 DESC LIMIT 1;
SELECT count(district_id) FROM district WHERE district.a11 > 6000 AND district.a11 < 10000 AND district.gender = 'F';
SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND client.gender = 'M' AND district.a11 > 8000;
SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MAX(birth_date) FROM client ) AND district.a11 = ( SELECT MIN(a11) FROM district );
SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date = ( SELECT min(birth_date) FROM client ) AND district.a11 = ( SELECT max(a11) FROM district );
SELECT count(*) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';
SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND trans.type = 'PRIJEM';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;
SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1;
SELECT count(client_id) FROM client WHERE gender = 'F' AND birth_date < '1950-01-01' AND district_id IN (SELECT district_id FROM district WHERE a2 = 'Slokolov');
SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '1995' ORDER BY trans.date ASC LIMIT 1;
SELECT DISTINCT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < 1997 AND trans.amount > 3000;
SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1994-03-03';
SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id = 840;
SELECT loan.account_id, account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25';
SELECT trans.amount FROM trans INNER JOIN card ON trans.trans_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.date = '1996-10-21' ORDER BY trans.amount DESC LIMIT 1;
SELECT gender FROM client WHERE birth_date = ( SELECT MIN(birth_date) FROM client ) AND district_id = ( SELECT district_id FROM district WHERE a11 = ( SELECT MAX(a11) FROM district ) );
SELECT trans.amount FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1;
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';
SELECT disp.disp_id FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON disp.account_id = account.account_id WHERE trans.amount = 5100 AND strftime('%Y-%m-%d', account.date) = '1998-09-02';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date = '1996-01-01';
SELECT district.a2 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';
SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';
SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE a3 = 'Prague') LIMIT 1;
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'M';
SELECT ((SELECT balance FROM trans WHERE account_id = 1 AND date = '1993-03-22') - (SELECT balance FROM trans WHERE account_id = 1 AND date = '1998-12-27')) / (SELECT balance FROM trans WHERE account_id = 1 AND date = '1998-12-27') * 100;
SELECT cast(count(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / count(loan.amount) FROM loan;
SELECT cast(sum(iif(loan.amount < 100000, iif(loan.status = 'C', 1, 0), 0)) AS REAL) * 100 / count(loan.loan_id) FROM loan;
SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';
SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia';
SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice';
SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990;
SELECT loan.account_id, district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id , district.a3 , district.a11 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60;
SELECT district.district_id, district.a12, district.a13, loan.status FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status LIKE 'D';
SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';
SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';
SELECT a2, COUNT(*) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE gender = 'F' GROUP BY a2 ORDER BY COUNT(*) DESC LIMIT 10;
SELECT district.a2, sum(trans.amount) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY sum(trans.amount) DESC LIMIT 10;
SELECT count(*) FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN card ON client.client_id = card.disp_id INNER JOIN disp ON account.account_id = disp.account_id WHERE district.a3 = 'south Bohemia' AND disp.type = 'OWNER';
SELECT district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;
SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M';
SELECT district.district_id , district.a2 FROM district WHERE district.a13 = ( SELECT max(district.a13) FROM district );
SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = (SELECT max(a16) FROM district);
SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK MESICNE' AND account_id IN ( SELECT account_id FROM trans WHERE operation = 'VYBER KARTOU' AND balance < 0 );
SELECT count(loan.loan_id) FROM loan WHERE loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'A' AND loan.payments = 'POPLATEK MESICNE';
SELECT count(account_id) FROM loan WHERE status = 'C' AND account_id IN (SELECT account_id FROM account WHERE district_id = 1);
SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = (SELECT max(district.a15) FROM district) AND client.gender = 'M';
SELECT count(type) FROM card WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'DISPONENT');
SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 LIKE 'Pisek';
SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';
SELECT order.account_id FROM order INNER JOIN account ON order.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO';
SELECT account_id FROM card WHERE type = 'gold' INTERSECT SELECT account_id FROM card WHERE type = 'junior';
SELECT avg(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.disp_id WHERE trans.account_id = 2021 AND trans.operation = 'VYBER KARTOU';
SELECT trans.account_id FROM trans INNER JOIN card ON trans.trans_id = card.card_id WHERE trans.operation = 'VYBER KARTOU' GROUP BY trans.account_id HAVING sum(trans.amount) < ( SELECT avg(trans.amount) FROM trans INNER JOIN card ON trans.trans_id = card.card_id WHERE trans.operation = 'VYBER KARTOU' AND strftime('%Y-%m', trans.date) LIKE '1998%' );
SELECT DISTINCT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F';
SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 LIKE '%south Bohemia%' AND client.gender = 'F';
SELECT account.account_id FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a2 = 'Tabor';
SELECT account.type, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type != 'OWNER' AND district.a11 > 8000 AND district.a11 < 9000;
SELECT count(*) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';
SELECT district.a2 FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';
SELECT district.a3 , avg(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND account.date >= 1997 GROUP BY district.a3;
SELECT count(card_id) FROM card WHERE type = 'classic';
SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M';
SELECT count(type) FROM card WHERE type = 'gold' AND issued < '1998';
SELECT disp.client_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id ORDER BY loan.amount DESC LIMIT 1;
SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532;
SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;
SELECT trans.trans_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';
SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;
SELECT district.a3 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.client_id = 3541;
SELECT district_id FROM account WHERE status = 'A';
SELECT order.account_id FROM order INNER JOIN trans ON order.order_id = trans.trans_id WHERE trans.trans_id = 32423;
SELECT trans.trans_id FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';
SELECT client_id FROM card WHERE type = 'junior' AND issued >= '1997-01-01';
SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE district.a11 > 10000;
SELECT (sum(CASE WHEN loan.date BETWEEN '1996-01-01' AND '1996-12-31' THEN loan.amount ELSE 0 END) - sum(CASE WHEN loan.date BETWEEN '1997-01-01' AND '1997-12-31' THEN loan.amount ELSE 0 END)) / sum(CASE WHEN loan.date BETWEEN '1996-01-01' AND '1996-12-31' THEN loan.amount ELSE 0 END) * 100 FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';
SELECT count(*) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.date > '1995-01-01' AND trans.operation = 'VYBER KARTOU';
SELECT district.a3, SUM(district.a16) - SUM(district.a15) FROM district GROUP BY district.a3;
SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10;
SELECT frequency FROM account WHERE account_id = 3;
SELECT substr(birth_date, 1, 4) FROM client WHERE client_id = 130;
SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK PO OBRATU';
SELECT client.client_id , loan.amount , loan.payments FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.client_id = 992;
SELECT SUM(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id WHERE trans.trans_id = 851 AND client.client_id = 4;
SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;
SELECT sum(t.amount) FROM trans t WHERE t.account_id = '617' AND t.date LIKE '%/%/1998';
SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';
SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;
SELECT count(DISTINCT client.client_id) FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN order ON account.account_id = order.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.gender = 'M' AND strftime('%Y', client.birth_date) BETWEEN '1974' AND '1976' AND trans.amount > 4000 AND order.k_symbol = 'SIPO';
SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';
SELECT count(client.client_id) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON account.account_id = disp.account_id INNER JOIN district ON district.district_id = account.district_id WHERE district.a3 = 'Prague';
SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT count(client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < 1997 ORDER BY loan.amount ASC LIMIT 1;
SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MAX(birth_date) FROM client ) AND district.a11 = ( SELECT MIN(a11) FROM district );
SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date = '1920-01-01';
SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24;
SELECT avg(amount) FROM loan WHERE status = 'C';
SELECT client.client_id, client.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'OWNER';
SELECT client.client_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'gold';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;
SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl';
SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT SUM(bond_type = '-'), COUNT(atom_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'na';
SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';
SELECT SUM(element = 'c') / COUNT(atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT count(bond_id) FROM bond WHERE bond_type = '#';
SELECT count(*) FROM atom WHERE element != 'br';
SELECT count(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'si';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ';
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1;
SELECT bond_type FROM bond WHERE molecule_id = 'TR000' AND atom_id = 'TR000_1' AND atom_id2 = 'TR000_2';
SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '-' );
SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '-';
SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY count(element) LIMIT 1;
SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' AND molecule.label = '-';
SELECT count(atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';
SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#';
SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.molecule_id = 'TR181';
SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT cast(sum(iif(bond.bond_type = '#', 1, 0)) AS REAL) * 100 / count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;
SELECT atom.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';
SELECT SUM(iif(molecule.label = '+', 1, 0)) - SUM(iif(molecule.label = '-', 1, 0)) FROM molecule;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';
SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5;
SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / total(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR008';
SELECT SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(molecule.molecule_id) AS percent FROM molecule;
SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';
SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';
SELECT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060';
SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY COUNT(bond.bond_type) DESC LIMIT 1;
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id AND connected.atom_id2 = atom.atom_id WHERE bond.bond_type = '-' AND molecule.label = '-' GROUP BY molecule.molecule_id ORDER BY molecule.molecule_id ASC LIMIT 3;
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;
SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br';
SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';
SELECT molecule.molecule_id, molecule.label FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT count(connected.atom_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id LIKE 'TR%_19';
SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004';
SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '-';
SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE SUBSTRING(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND atom.label = '+';
SELECT bond.bond_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'p' AND atom.element = 'n';
SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;
SELECT cast(count(connected.bond_id) AS REAL) / count(atom.atom_id) AS average FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'i';
SELECT bond.bond_type, bond.bond_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE SUBSTR(atom.atom_id, 7, 2) + 0 = 45;
SELECT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id FROM connected);
SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id = 'TR447' AND bond.bond_type = '#';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';
SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY count(atom.element) ASC LIMIT 1;
SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'pb';
SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#';
SELECT COUNT(bond_id) / COUNT(atom_id) FROM connected GROUP BY atom_id ORDER BY count(atom_id) DESC LIMIT 1;
SELECT SUM(CASE WHEN bond.bond_type = '-' AND molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(bond.bond_id) AS proportion FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-';
SELECT count(*) FROM atom WHERE atom.element IN ('c', 'h');
SELECT atom_id2 FROM atom WHERE element = 's';
SELECT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'sn';
SELECT count(DISTINCT atom.element) FROM atom INNER JOIN bond ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE molecule.label = '+' AND bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br');
SELECT bond_id FROM bond WHERE bond_type = '+';
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT DIVIDE(SUM(atom.element = 'cl'), COUNT(atom.atom_id)) AS percent FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT sum(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';
SELECT count(bond_id) FROM bond WHERE bond.bond_type = 'i';
SELECT max(molecule.label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca';
SELECT iif(sum(iif(atom.element = 'cl', 1, 0)) - sum(iif(atom.element = 'c', 1, 0)), 0, 1) AS RESULT FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_1_8';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND molecule.label = '-';
SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT atom_id, atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_type = '#';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR005_16_26';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';
SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = '4' AND atom.element = 'cl' AND molecule.label = '+' THEN 1 END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id;
SELECT SUM(atom.element = 'h') / COUNT(atom.element) AS ratio, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.molecule_id = 'TR006';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'ca';
SELECT bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';
SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond;
SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.atom_id = 'TR001_1';
SELECT label FROM molecule WHERE molecule_id = 'TR151';
SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';
SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';
SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR00_1' AND bond.bond_id = 'TR00_1_2';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label LIKE '-' AND atom.element LIKE 'c';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h';
SELECT label FROM molecule WHERE molecule_id = 'TR124';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR001_2_4';
SELECT count(DISTINCT bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = ' = ';
SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'cl';
SELECT bond.bond_type , connected.atom_id , connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';
SELECT molecule.molecule_id, atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';
SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_2_3';
SELECT count(*) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT atom.atom_id, count(bond.bond_type) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id;
SELECT count(molecule_id) FROM bond WHERE bond_type = ' = ';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element != 's' AND bond.bond_type != ' = ';
SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_2_4';
SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR005';
SELECT count(bond_id) FROM bond WHERE bond_type = '-';
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';
SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';
SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR001_3_4';
SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2';
SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2' OR atom_id = 'TR000_4';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT SUM(bond_type = '-') / COUNT(bond_id) AS percentage FROM bond WHERE bond_type = '-';
SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 's' AND bond.bond_type = ' = ';
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '-' GROUP BY molecule.molecule_id HAVING COUNT(molecule.molecule_id) > 5;
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.molecule_id = 'TR024' GROUP BY atom.element;
SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;
SELECT SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(molecule.molecule_id) * 100.0 FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'h' AND bond.bond_type = '#';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010';
SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';
SELECT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.atom_id = 'TR004_7';
SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';
SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';
SELECT atom.element, bond.bond_type FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR016';
SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c' AND bond_type = ' = ';
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';
SELECT * FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;
SELECT cards.name FROM cards WHERE cards.bordercolor = 'borderless' AND cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NULL;
SELECT name FROM cards WHERE faceconvertedmanacost = (SELECT MAX(faceconvertedmanacost) FROM cards);
SELECT name FROM cards WHERE frameversion = 2015 AND edhrecrank < 100;
SELECT name FROM cards WHERE rarity = 'mythic' AND uuid IN (SELECT uuid FROM legalities WHERE status = 'Banned' AND format = 'gladiator');
SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';
SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (power = '*' OR power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal';
SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele' AND cards.hascontentwarning = 1;
SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.uuid) DESC LIMIT 1;
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'annul' AND cards.number = '29';
SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese';
SELECT cast(sum(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid;
SELECT sets.name, sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';
SELECT count(type) FROM cards WHERE artist = 'Aaron Boyd';
SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy';
SELECT count(id) FROM cards WHERE power = '*';
SELECT promotypes FROM cards WHERE name = 'Duress';
SELECT cards.colors FROM cards WHERE cards.name = 'Ancestor''s Chosen';
SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor''s Chosen';
SELECT language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy';
SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0;
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn';
SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;
SELECT cards.facename FROM cards WHERE cards.name = 'Cloudchaser Eagle';
SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight';
SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';
SELECT Count(id) FROM cards WHERE bordercolor = 'borderless';
SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND set_translations.language = 'German' AND cards.isreprint = 1;
SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'Russian' AND set_translations.language = 'Russian' AND cards.bordercolor = 'borderless';
SELECT cast(sum(iif(foreign_data.language = 'French' and cards.isstoryspotlight = 1, 1, 0)) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid;
SELECT count(cards.id) FROM cards WHERE cards.toughness = '99';
SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd';
SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'mtgo';
SELECT id FROM cards WHERE convertedmanacost = 0;
SELECT layout FROM cards WHERE keywords = 'Flying';
SELECT count(cards.id) FROM cards WHERE cards.originaltype = 'Summon - Angel' AND cards.subtypes != 'Angel';
SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL;
SELECT id FROM cards WHERE dueldeck = 'a';
SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = '2015';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT cards.id FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.availability = 'paper' AND foreign_data.language = 'Japanese' AND set_translations.language = 'Japanese';
SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';
SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy';
SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';
SELECT count(id) FROM cards WHERE frameversion = 'future';
SELECT cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';
SELECT cards.name , set_translations.translation , set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5;
SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';
SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B';
SELECT cards.name FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;
SELECT count(cards.id) FROM cards WHERE cards.artist = 'John Avon' AND cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NULL;
SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'white' AND cards.cardkingdomfoilid = cards.cardkingdomid AND cards.cardkingdomid IS NOT NULL;
SELECT count(cards.id) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;
SELECT count(id) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1;
SELECT cards.manacost FROM cards WHERE cards.layout = 'normal' AND cards.frameversion = '2003' AND cards.bordercolor = 'black' AND cards.availability IN ('paper', 'mtgo');
SELECT sum(cards.manacost) FROM cards WHERE cards.artist = 'Rob Alexander';
SELECT cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Arena';
SELECT set_translations.setcode FROM set_translations WHERE set_translations.language = 'Spanish';
SELECT cast(count(cards.hand = '+3') AS REAL) / cast(count(cards.id) AS REAL) FROM cards WHERE cards.frameeffects = 'legendary';
SELECT rulings.id FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.isStoryspotlight = 1 AND cards.istextless = 1;
SELECT foreign_data.name, cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid GROUP BY foreign_data.name;
SELECT language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.basesetsize = 309;
SELECT count(set_translations.setcode) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';
SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal' AND cards.types = 'Creature';
SELECT cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE foreign_data.language = 'German' AND (cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL);
SELECT count(cards.id) FROM cards WHERE power is NULL;
SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'commander' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;
SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper';
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.name = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = '<NAME>';
SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';
SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica';
SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'legal';
SELECT cast(sum(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.power) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French';
SELECT cast(sum(CASE WHEN sets.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;
SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;
SELECT cards.name FROM cards WHERE cards.power IS NULL OR cards.power = '*' AND cards.promotypes = 'arenaleague' ORDER BY cards.name LIMIT 3;
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.multiverseid = cards.multiverseid WHERE cards.multiverseid = 149934;
SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;
SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3;
SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC';
SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;
SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;
SELECT sets.id, sets.name FROM sets INNER JOIN cards ON cards.setcode = sets.code INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2;
SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND set_translations.language = 'Japanese' AND foreign_data.language = 'Japanese';
SELECT set_translations.setcode FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1;
SELECT cast(count(iif(set_translations.language = 'Chinese Simplified' AND cards.isonlineonly = 1, cards.id, NULL)) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id;
SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND sets.mtgocode IS NULL OR sets.mtgocode = '';
SELECT cards.id FROM cards WHERE cards.bordercolor = 'black';
SELECT cards.id FROM cards WHERE cards.frameeffects = 'extendedart';
SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1;
SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 174;
SELECT sets.name FROM sets WHERE sets.code = 'ALL';
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';
SELECT sets.code FROM sets WHERE sets.releasedate = '2007-07-13';
SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = 'Masques' OR sets.block = 'Mirage';
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';
SELECT COUNT(convertedmanacost = 16) * 100 / COUNT(convertedmanacost) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Abyssal Horror';
SELECT sets.code FROM sets WHERE sets.type = 'expansion' OR sets.type = 'commander';
SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan';
SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';
SELECT count(*) FROM cards WHERE artist = 'Aaron Miller' AND (cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL);
SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT cards.name FROM cards WHERE cards.istextless = 0;
SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen';
SELECT count(cards.id) FROM cards WHERE cards.colors = 'W' AND (cards.power = '*' OR cards.power IS NULL);
SELECT cards.name FROM cards WHERE cards.ispromo = 1 AND cards.side IS NOT NULL;
SELECT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';
SELECT count(cards.artist) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.colors like '%B%' AND cards.availability like '%arena,mtgo%';
SELECT name FROM cards WHERE convertedmanacost > faceconvertedmanacost;
SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameversion = '2003' ORDER BY CAST(manacost AS INTEGER) DESC LIMIT 3;
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE set_translations.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';
SELECT count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Angel of Mercy';
SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT cards.id FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Ancestor's Chosen' AND set_translations.language = 'Korean';
SELECT count(cards.artist) FROM cards INNER JOIN set_translations ON set_translations.setcode = cards.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';
SELECT CASE WHEN sets.mtgocode IS NULL THEN 'No' ELSE 'Yes' END FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy';
SELECT releasedate FROM sets WHERE name = 'Ancestor''s Chosen';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = ' Hauptset Zehnte Edition';
SELECT count(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';
SELECT sets.isforeignonly FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Adarkar Valkyrie';
SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.basesetsize < 10;
SELECT count(id) FROM cards WHERE name = 'Coldsnap' AND bordercolor = 'black';
SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');
SELECT cards.number FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND cards.number = 4;
SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL);
SELECT foreign_data.text FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';
SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavortext IS NOT NULL;
SELECT foreign_data.type FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'German';
SELECT rulings.text FROM rulings INNER JOIN foreign_data ON rulings.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND foreign_data.name = 'Coldsnap';
SELECT foreign_data.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE set_translations.language = 'Italian' AND set_translations.translation = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce';
SELECT sum(CASE WHEN sets.name = 'Coldsnap' THEN cards.convertedmanacost ELSE 0 END) * 100 / sum(cards.convertedmanacost) FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.convertedmanacost = 7;
SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap';
SELECT code FROM sets WHERE releasedate = '2017-07-14';
SELECT sets.keyrunecode FROM sets WHERE sets.code = 'PKHC';
SELECT sets.mcmid FROM sets WHERE sets.code = 'SS2';
SELECT sets.mcmname FROM sets WHERE sets.releasedate = '2017/6/9';
SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation LIKE '%From the Vault: Lore%';
SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT cards.artist, rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec';
SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Evacuation';
SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';
SELECT type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huitième édition';
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND foreign_data.name = 'Tendo Ice Bridge';
SELECT count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL;
SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Fellwar Stone' AND foreign_data.language = 'Japanese';
SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;
SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de frío';
SELECT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim';
SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3';
SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';
SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' AND cards.hasnonfoil = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) FROM set_translations INNER JOIN foreign_data ON set_translations.setcode = foreign_data.uuid INNER JOIN cards ON foreign_data.uuid = cards.uuid;
SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)))*100 FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE set_translations.language = 'Portuguese (Brazil)';
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1;
SELECT id FROM sets WHERE basesetsize = ( SELECT max(basesetsize) FROM sets );
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1;
SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;
SELECT count(*) FROM cards WHERE power IS NULL OR power = '*' AND hasfoil = 0 AND dueldeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1;
SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.manacost DESC LIMIT 10;
SELECT originalreleasedate FROM cards WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;
SELECT count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';
SELECT count(CASE WHEN cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal';
SELECT legalities.format , cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1;
SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Battlebond';
SELECT cards.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = (SELECT MIN(artist) FROM cards);
SELECT status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1;
SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecrank = 1;
SELECT AVG(sets.id) FROM sets WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31';
SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';
SELECT cards.uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND ( legalities.status = 'Restricted' OR legalities.status = 'Banned' );
SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';
SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';
SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language NOT LIKE '%Japanese%' AND set_translations.language = 'Korean';
SELECT cards.frameversion, cards.artist, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams';
SELECT displayname FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1;
SELECT displayname FROM users WHERE year(creationdate) = 2014;
SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01 00:00:00';
SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;
SELECT count(*) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;
SELECT count(id) FROM users WHERE views > 10 AND year(creationdate) > 2013;
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT posts.ownerdisplayname FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.answercount FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1;
SELECT posthistory.userdisplayname FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL;
SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;
SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';
SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';
SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;
SELECT count(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';
SELECT displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1;
SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT cast(count(badges.id) AS REAL) / count(users.displayname) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200;
SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 20;
SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';
SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;
SELECT count(badges.id) FROM badges WHERE badges.name = 'Revival';
SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1;
SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;
SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = 3025 AND comments.creationdate = '2014/4/23 20:29:39.0';
SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 LIMIT 1;
SELECT posts.closeddate IS NULL FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0';
SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041';
SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';
SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347';
SELECT votes.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%';
SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';
SELECT count(posts.id)/count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = 24;
SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT comments.text FROM comments WHERE comments.score = 17;
SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';
SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';
SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion';
SELECT posts.title, users.displayname, users.reputation FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';
SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10;
SELECT badges.name FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN badges ON posthistory.userid = badges.userid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data';
SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.comment = 'Edited';
SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';
SELECT comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN comments ON comments.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?';
SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';
SELECT users.displayname FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE votes.bountyamount = 50 AND posts.title LIKE '%variance%';
SELECT avg(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'humor';
SELECT sum(comments.score) FROM comments WHERE comments.userid = 13;
SELECT id FROM users ORDER BY reputation DESC LIMIT 1;
SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;
SELECT count(id) FROM badges WHERE name = 'Supporter' AND year(date) = 2011;
SELECT count(userid) FROM badges WHERE count(name) > 5;
SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' OR badges.name = 'Teacher' AND users.location = 'New York';
SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;
SELECT users.id, users.displayname FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY users.id, users.displayname HAVING count(posthistory.id) = 1 AND users.views >= 1000;
SELECT badges.userid, badges.name FROM badges INNER JOIN comments ON badges.userid = comments.userid GROUP BY badges.userid ORDER BY count(comments.id) DESC LIMIT 1;
SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India';
SELECT cast(sum(CASE WHEN Year(badges.date) = 2010 THEN 1 ELSE 0 END) AS REAL) / count(badges.name) * 100 - cast(sum(CASE WHEN Year(badges.date) = 2011 THEN 1 ELSE 0 END) AS REAL) / count(badges.name) * 100 FROM badges;
SELECT posthistory.posthistorytypeid, count(DISTINCT comments.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;
SELECT posts.id, posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE postlinks.postid = 61217;
SELECT score, posttypeid FROM posts WHERE id = 395;
SELECT posts.id, posts.score, posts.owneruserid FROM posts WHERE posts.score > 60;
SELECT SUM(posts.favoritecount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 686 AND votes.creationdate LIKE '%2011%';
SELECT Divide(Sum(votes.upvotes), count(users.id)) AS average_upvotes, Divide(Sum(users.age), count(users.id)) AS average_age FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(users.id) > 10;
SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';
SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08';
SELECT count(*) FROM comments WHERE score > 60;
SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:16:14.0';
SELECT count(*) FROM posts WHERE score = 10;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(reputation) FROM users );
SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';
SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';
SELECT cast(count(badges.userid) AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Teacher';
SELECT cast(count(users.id) AS REAL) * 100 / ( SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' ), users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;
SELECT comments.score FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.creaiondate = '2010-07-19 19:19:46.0';
SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:37:33';
SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';
SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;
SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY users.reputation ASC LIMIT 1;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';
SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65;
SELECT users.displayname FROM users WHERE users.id = 30;
SELECT count(users.id) FROM users WHERE users.location = 'New York';
SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2010;
SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;
SELECT displayname FROM users ORDER BY views DESC LIMIT 1;
SELECT cast(count(CASE WHEN YEAR(votes.creationdate) = 2010 THEN votes.id ELSE NULL END) AS REAL) / count(CASE WHEN YEAR(votes.creationdate) = 2011 THEN votes.id ELSE NULL END) FROM votes;
SELECT tags.tagname FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'John Stauffer';
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo';
SELECT count(*) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';
SELECT posts.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;
SELECT posts.id FROM posts WHERE posts.ownerdisplayname = 'Harvey Motulsky' OR posts.ownerdisplayname = 'Noah Snyder' GROUP BY posts.id ORDER BY SUM(posts.viewcount) DESC LIMIT 1;
SELECT count(votes.postid) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4;
SELECT count(comments.id) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;
SELECT DISTINCT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON tags.excerptpostid = posts.id INNER JOIN posthistory ON posthistory.postid = posts.id WHERE users.displayname = 'Mark Meckes' AND posthistory.comment = 'Tags';
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';
SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community';
SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM users INNER JOIN posts ON users.id = posts.owneruserid;
SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Commentator' AND year(badges.date) = 2014;
SELECT count(*) FROM posts WHERE creationdate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';
SELECT users.displayname , users.age FROM users ORDER BY users.views DESC LIMIT 1;
SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';
SELECT count(comments.score) FROM comments WHERE comments.userid = 13 AND comments.score < 60;
SELECT posts.title, comments.userdisplayname FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score > 60;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location LIKE '%North Pole%' AND year(badges.date) = 2011;
SELECT users.displayname , users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;
SELECT posthistory.text, posthistory.creationdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';
SELECT lastaccessdate , location FROM users WHERE id IN ( SELECT userid FROM badges WHERE name = 'Outliers' );
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment = 'title';
SELECT posts.id, badges.name FROM badges INNER JOIN comments ON badges.userid = comments.userid INNER JOIN posts ON comments.postid = posts.id WHERE posts.ownerdisplayname = 'Samuel' AND YEAR(comments.creationdate) = 2013;
SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname , users.location FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE posthistory.posthistorytypeid = 2 AND posts.tags LIKE '%hypothesis-testing%';
SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';
SELECT users.displayname FROM posts INNER JOIN users ON posts.parentid = users.id ORDER BY posts.score DESC LIMIT 1;
SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;
SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;
SELECT count(id) FROM tags WHERE count BETWEEN 5000 and 7000;
SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;
SELECT age FROM users ORDER BY reputation DESC LIMIT 1;
SELECT count(*) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;
SELECT id FROM users ORDER BY age LIMIT 1;
SELECT posts.score FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;
SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';
SELECT posts.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY max(posts.favoritecount) DESC LIMIT 1;
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate LIMIT 1;
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;
SELECT MIN(creationdate) FROM votes WHERE userid = ( SELECT id FROM users WHERE displayname = 'chl' );
SELECT creationdate FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE age = ( SELECT min(age) FROM users ) ) ORDER BY creationdate LIMIT 1;
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;
SELECT count(*) FROM users WHERE location = 'United Kingdom' AND id IN ( SELECT owneruserid FROM posts WHERE favoritecount >= 4 );
SELECT AVG(postid) FROM votes WHERE userid = ( SELECT id FROM users WHERE age = ( SELECT MAX(age) FROM users ) );
SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;
SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;
SELECT posts.id , posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT id , title FROM posts ORDER BY score DESC LIMIT 1;
SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';
SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE YEAR(posts.creationdate) = 2011 AND posts.viewcount > 20000;
SELECT id, ownerdisplayname FROM posts WHERE favoritecount = ( SELECT MAX(favoritecount) FROM posts WHERE year(creationdate) = 2010 );
SELECT DIVidE(count(id where creationdate = 2011 and reputation > 1000), count(id) ) * 100 as percentage FROM users INNER JOIN posts ON users.id = posts.owneruserid;
SELECT DIVidE(count(id where age BETWEEN 13 and 18), count(id)) as percentage FROM users;
SELECT sum(posts.viewcount) FROM posts WHERE posts.title = 'Computer Game Datasets';
SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT avg(posts.viewcount) FROM posts);
SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts );
SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;
SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1;
SELECT name FROM badges WHERE date = ( SELECT MAX(date) FROM badges );
SELECT count(users.id) FROM users WHERE users.age BETWEEN 19 AND 65 AND users.upvotes > 5000;
SELECT SUBTRACT(date, creationdate) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon';
SELECT count(posts.id) , count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1;
SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE 'Analysing wind data with R' AND comments.userdisplayname LIKE 'Max' ORDER BY comments.creationdate DESC LIMIT 1;
SELECT count(*) FROM badges WHERE badges.name = 'Citizen Patrol';
SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'careers';
SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';
SELECT posts.answercount + posts.commentcount FROM posts WHERE posts.title = 'Clustering 1D data';
SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';
SELECT count(votes.id) FROM votes WHERE votes.bountyamount >= 30;
SELECT count(stats_posts.id) / count(stats_posts.id where score >= 50 and MAX(reputation)) as percentage FROM stats_posts INNER JOIN users ON stats_posts.owneruserid = users.id WHERE users.reputation = ( SELECT MAX(reputation) FROM users );
SELECT count(*) FROM posts WHERE score < 20;
SELECT count(*) FROM tags WHERE id < 15 AND count <= 20;
SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';
SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';
SELECT posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'How can I adapt ANOVA for binary data?';
SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1;
SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';
SELECT count(DISTINCT posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5;
SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0;
SELECT count(*) FROM users WHERE age = 40;
SELECT posts.id, comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';
SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'R is also lazy evaluated.';
SELECT text FROM comments WHERE userdisplayname = 'Harvey Motulsky';
SELECT comments.userdisplayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.downvotes = 0 AND comments.score BETWEEN 1 AND 5;
SELECT count(userid) / count(userid where upvotes = 0 and score BETWEEN 5 and 10) FROM comments WHERE score BETWEEN 5 and 10;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';
SELECT count(*) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;
SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING COUNT(superhero.full_name) > 15;
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';
SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superhero.height_cm = ( SELECT MAX(height_cm) FROM superhero );
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT count(superhero.superhero_name) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT SUM(power_name = 'Super Strength'), COUNT(id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher_name = 'Marvel Comics';
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';
SELECT t.publisher_name FROM ( SELECT publisher.publisher_name, MIN(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' GROUP BY publisher.publisher_name ) t;
SELECT count(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT count(superhero.id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;
SELECT superhero.superhero_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Death Touch';
SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1;
SELECT count(CASE WHEN race.race = 'Vampire' THEN superhero.id ELSE NULL END) FROM race INNER JOIN superhero ON race.id = superhero.race_id;
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics' AND alignment.alignment = 'Bad';
SELECT t.publisher_name FROM ( SELECT publisher.publisher_name, count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id GROUP BY publisher.publisher_name ORDER BY count(superhero.id) DESC LIMIT 1 ) t;
SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';
SELECT avg(attribute_value) FROM hero_attribute;
SELECT count(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT superpower.power_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' LIMIT 5;
SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT superhero.superhero_name FROM superhero WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = 1;
SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;
SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 185 AND race.race = 'human';
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.height_cm BETWEEN 150 AND 180;
SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > 0.79 * ( SELECT AVG(weight_kg) FROM superhero );
SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY count(power_name) DESC LIMIT 1;
SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';
SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;
SELECT count(*) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';
SELECT full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'strength' ) ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT AVG(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1;
SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY max(hero_attribute.attribute_value) DESC LIMIT 1;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT superhero.full_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id;
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT SUM(colour = 'Blue' AND gender = 'Female') / COUNT(gender = 'Female') * 100 AS percentage;
SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = '<NAME>';
SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';
SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';
SELECT superhero_name FROM superhero WHERE eye_colour_id IN ( SELECT id FROM colour WHERE colour = 'Black' ) AND hair_colour_id IN ( SELECT id FROM colour WHERE colour = 'Black' );
SELECT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold';
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT count(hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));
SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT percent FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';
SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT sum(CASE WHEN t.full_name = 'Emil Blonsky' THEN t.weight_kg ELSE 0 END) - sum(CASE WHEN t.full_name = 'Charles Chandler' THEN t.weight_kg ELSE 0 END) FROM superhero t;
SELECT avg(superhero.height_cm) FROM superhero;
SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';
SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.id = 1;
SELECT superhero.superhero_name FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;
SELECT count(superhero.id) FROM superhero WHERE superhero.alignment_id = 3;
SELECT superhero.superhero_name, attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero.superhero_name FROM superhero  INNER JOIN hero_power  ON superhero.id = hero_power.hero_id  INNER JOIN superpower  ON hero_power.power_id = superpower.id  INNER JOIN colour  ON superhero.eye_colour_id = colour.id  INNER JOIN colour  ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Brown';
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Hawkman' OR superhero.superhero_name = 'Karate Kid' OR superhero.superhero_name = 'Speedy';
SELECT count(*) FROM superhero WHERE publisher_id = 1;
SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero_name) FROM superhero;
SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;
SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1;
SELECT superpower.id FROM superpower WHERE superpower.power_name = 'cryokinesis';
SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 294;
SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = (SELECT max(attribute_value) FROM hero_attribute);
SELECT superhero.alignment_id, hero_power.power_id FROM superhero INNER JOIN hero_power ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;
SELECT avg(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.alignment_id = 3;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;
SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 1 AND gender.id = 2;
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'male';
SELECT ROUND(MULTIPLY(DIVidE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0), 2) AS percentage FROM gender INNER JOIN alignment ON gender.id = alignment.id WHERE alignment.id = 2;
SELECT SUM(CASE WHEN colour.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN colour.id = 1 THEN 1 ELSE 0 END) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;
SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk';
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment_id = 2;
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;
SELECT gender.gender FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT avg(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT COUNT(*) FROM hero_attribute WHERE attribute_value = 100;
SELECT iif(sum(iif(publisher_name = 'DC Comics', 1, 0)) - sum(iif(publisher_name = 'Marvel Comics', 1, 0)), 'DC Comics', 'Marvel Comics') AS RESULT FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id;
SELECT attribute.attribute_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE hero_attribute.hero_id = ( SELECT superhero.id FROM superhero WHERE superhero.superhero_name = 'Black Panther' ) ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = '<NAME>';
SELECT cast(count(CASE WHEN gender = 'Female' THEN publisher_name ELSE NULL END) AS REAL) * 100 / count(publisher_name) FROM superhero WHERE publisher_name = 'George Lucas';
SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' AND publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN alignment ON alignment.id = superhero.alignment_id INNER JOIN publisher ON publisher.id = superhero.publisher_id;
SELECT count(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;
SELECT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Alien';
SELECT full_name FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Brown' ) AND weight_kg < 100;
SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';
SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;
SELECT avg(height_cm) FROM superhero WHERE alignment_id = 1;
SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';
SELECT eye_colour_id FROM superhero WHERE superhero_name = 'Blackwulf';
SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 0.8 * ( SELECT avg(height_cm) FROM superhero );
SELECT driverref FROM drivers WHERE driverid IN ( SELECT driverid FROM qualifying WHERE q1 = ( SELECT MAX(q1) FROM qualifying WHERE raceid = 18 ) );
SELECT drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 19 AND laptimes.lap = 2 ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Shanghai';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany';
SELECT constructorstandings.position FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid WHERE constructors.name = 'Renault';
SELECT count(races.raceid) FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN results ON results.raceid = races.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe');
SELECT races.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Spain';
SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';
SELECT lat, lng FROM circuits WHERE location = 'Abu Dhabi';
SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;
SELECT qualifying.q1 FROM qualifying WHERE qualifying.qualifyid = 354;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 = '0:01:40' AND qualifying.number = 355;
SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '0:01:54';
SELECT count(driverref) FROM drivers WHERE driverref NOT IN ( SELECT driverref FROM results WHERE time IS NOT NULL );
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29';
SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 GROUP BY drivers.dob ORDER BY drivers.dob ASC LIMIT 1;
SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.milliseconds = 127000;
SELECT drivers.driverref, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1;
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';
SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 9 ORDER BY constructorresults.points DESC LIMIT 1;
SELECT q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = 345;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = '347' AND qualifying.q2 = '0:01:15';
SELECT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.number = 45;
SELECT time FROM results WHERE driverid = 743 AND raceid = 743;
SELECT drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND races.name = 'San Marino Grand Prix' AND results.position = 2;
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29';
SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1;
SELECT drivers.surname, drivers.forename FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.time LIMIT 1;
SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed IS NOT NULL ORDER BY results.fastestlapspeed DESC LIMIT 1;
SELECT (fastestlapspeed(raceid = 853) - fastestlapspeed(raceid = 854)) / fastestlapspeed(raceid = 853) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Paul' AND drivers.surname = 'di Resta' AND results.raceid = 853;
SELECT DIVIDE(COUNT(driverid where time has value and date = '1983-07-16'), (COUNT(driverid where date = '1983-07-16'))) as percentage FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16';
SELECT min(races.year) FROM races;
SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;
SELECT name FROM races WHERE year = year(min(date)) AND month(date) = month(min(date));
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT max(round) FROM races WHERE year = 1999);
SELECT year FROM races GROUP BY year ORDER BY count(raceid) DESC LIMIT 1;
SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year <> 2000;
SELECT circuits.country, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;
SELECT seasons.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' ORDER BY seasons.year DESC LIMIT 1;
SELECT count(seasons.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'British';
SELECT drivers.surname, driverstandings.position FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY driverstandings.position;
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.points DESC LIMIT 1;
SELECT results.points FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY results.points DESC LIMIT 3;
SELECT laptimes.driverid, laptimes.raceid FROM laptimes ORDER BY laptimes.time ASC LIMIT 1;
SELECT avg(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix';
SELECT cast(count(races.raceid) AS REAL) / count(DISTINCT races.raceid) FROM races INNER JOIN driverstandings ON races.raceid = driverstandings.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010 AND driverstandings.position > 1;
SELECT drivers.driverref , drivers.nationality , avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN constructorstandings ON results.raceid = constructorstandings.raceid GROUP BY drivers.driverref , drivers.nationality ORDER BY count(constructorstandings.wins) DESC LIMIT 1;
SELECT surname, forename FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year BETWEEN 1990 AND 2000 AND races.round = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006 AND races.round = 1;
SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2005 AND month(races.date) = 9;
SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10;
SELECT count(driverstandings.wins) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';
SELECT races.name, races.year FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT races.year FROM races ORDER BY races.year ASC LIMIT 1;
SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;
SELECT races.name , races.year , circuits.location FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.raceid ORDER BY count(laptimes.lap) DESC LIMIT 1;
SELECT COUNT(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix';
SELECT lat , lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT circuits.name FROM circuits ORDER BY circuits.lat DESC LIMIT 1;
SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT circuits.country FROM circuits ORDER BY circuits.alt DESC LIMIT 1;
SELECT count(*) FROM drivers WHERE code IS NULL;
SELECT drivers.nationality FROM drivers ORDER BY drivers.dob LIMIT 1;
SELECT drivers.surname FROM drivers WHERE drivers.nationality = 'italian';
SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';
SELECT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis';
SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit';
SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.location = 'Abu Dhabi';
SELECT count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT DISTINCT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya';
SELECT races.url FROM races INNER JOIN seasons ON races.year = seasons.year INNER JOIN constructors ON constructors.nationality = 'Spanish' WHERE races.name = 'Spanish Grand Prix' AND seasons.year = 2009;
SELECT min(results.fastestlaptime) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed ASC LIMIT 1;
SELECT driverref FROM results WHERE year = 2008 AND position = 1;
SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis';
SELECT name FROM races WHERE raceid = ( SELECT raceid FROM results WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) );
SELECT max(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT positionorder FROM results WHERE resultid = 2008 AND driverid = 452;
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.grid = 4 AND races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;
SELECT laptimes.milliseconds FROM laptimes INNER JOIN drivers ON drivers.driverid = laptimes.driverid INNER JOIN races ON races.raceid = laptimes.raceid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis' AND races.year = 2008 AND races.name = 'Australian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1;
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.rank = 2 AND races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT drivers.forename, drivers.surname, races.url FROM results INNER JOIN drivers ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid INNER JOIN seasons ON seasons.year = races.year WHERE results.resultid = 2008 AND seasons.year = 2008;
SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.nationality = 'American';
SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';
SELECT sum(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT cast(avg(results.fastestlaptime) AS REAL) / 1000 FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN laptimes.raceid END) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008;
SELECT races.year, results.resultid, (results.time - driverstandings.fastestlaptime) / driverstandings.fastestlaptime * 100 FROM results INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN laptimes ON driverstandings.driverid = laptimes.driverid AND driverstandings.raceid = laptimes.raceid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL AND driverstandings.fastestlaptime IS NOT NULL ORDER BY driverstandings.fastestlaptime DESC LIMIT 1;
SELECT count(circuits.circuitid) FROM circuits WHERE circuits.country = 'Australia' AND circuits.location = 'Melbourne';
SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';
SELECT count(driverid) FROM drivers WHERE year(dob) > 1980;
SELECT avg(constructorresults.points) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British';
SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid ORDER BY constructorresults.points DESC LIMIT 1;
SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.raceid = 291 AND constructorresults.points = 0;
SELECT count(*) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'Japanese' AND COUNT(results.raceid) = 2 AND results.points = 0;
SELECT constructors.name FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.rank = 1;
SELECT count(*) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN laptimes ON results.resultid = laptimes.raceid WHERE constructors.nationality = 'French' AND laptimes.lap > 50;
SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' AND races.year BETWEEN 2007 AND 2009 AND races.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Japanese' AND races.year BETWEEN 2007 AND 2009;
SELECT cast(sum(results.time) AS REAL) / count(DISTINCT races.year) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.time IS NOT NULL;
SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE year(drivers.dob) > 1975 AND driverstandings.position = 2;
SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime ASC LIMIT 1;
SELECT results.fastestlap FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009;
SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT races.name, races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.milliseconds = ( SELECT MIN(results.milliseconds) FROM results WHERE results.milliseconds IS NOT NULL );
SELECT COUNT(driverid) FROM drivers WHERE year(dob)<1985;
SELECT count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.milliseconds < 120 * 1000 AND drivers.nationality = 'French';
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceid FROM races WHERE year = 2009;
SELECT count(results.driverid) FROM results WHERE results.raceid = 18;
SELECT count(driverid) FROM drivers WHERE nationality = 'Dutch' AND dob = (SELECT Max(dob) FROM drivers WHERE nationality = 'Dutch');
SELECT driverref FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert';
SELECT count(driverid) FROM drivers WHERE year(dob) = 1980;
SELECT drivers.forename, drivers.surname, laptimes.time FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY laptimes.time ASC LIMIT 3;
SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1;
SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 1971 AND drivers.dob LIKE '1971%' AND results.fastestlaptime IS NOT NULL;
SELECT * FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY time DESC LIMIT 10;
SELECT races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.fastestlaptime IS NOT NULL ORDER BY results.fastestlaptime ASC LIMIT 1;
SELECT seasons.year FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year GROUP BY seasons.year ORDER BY Max(laptimes.milliseconds) ASC LIMIT 1;
SELECT driverid FROM laptimes ORDER BY time LIMIT 5;
SELECT count(results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE results.raceid > 50 AND results.raceid < 100 AND status.statusid = 2;
SELECT circuits.location , circuits.lat , circuits.lng FROM circuits WHERE circuits.location = 'Austria';
SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1;
SELECT driverref, nationality, dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE q2 IS NOT NULL AND raceid = 23;
SELECT drivers.surname, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1;
SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.statusid = 2;
SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1;
SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1;
SELECT drivers.driverref FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND pitstops.lap = 3 ORDER BY pitstops.time ASC LIMIT 1;
SELECT races.raceid FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.lap = 1 ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT avg(results.fastestlaptime) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11;
SELECT drivers.surname, AVG(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.surname ORDER BY AVG(pitstops.duration) ASC LIMIT 5;
SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Canadian Grand Prix' ORDER BY results.time LIMIT 1;
SELECT constructors.constructorref, constructors.url FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.year = 2009 AND races.name = 'Singapore Grand Prix' AND constructorresults.status = 'D';
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND year(dob) BETWEEN '1981' AND '1991';
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN constructors ON drivers.nationality = constructors.nationality WHERE drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;
SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';
SELECT constructorstandings.points, constructors.name, constructors.nationality FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid INNER JOIN races ON constructorstandings.raceid = races.raceid WHERE races.year BETWEEN 1980 AND 2010 AND races.name = 'Monaco Grand Prix';
SELECT avg(results.points) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis' AND races.name = 'Turkish Grand Prix';
SELECT cast(count(raceid) AS REAL) / count(DISTINCT year) FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';
SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;
SELECT sum(results.points) FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid WHERE driverstandings.position = 91;
SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE results.fastestlapspeed = ( SELECT MIN(fastestlaptime) FROM results );
SELECT circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2008 AND qualifying.position = 3 AND circuits.name = 'Marina Bay Street Circuit' ORDER BY qualifying.q3 ASC LIMIT 1;
SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid ORDER BY drivers.dob LIMIT 1;
SELECT count(results.number) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' ORDER BY results.number DESC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.dob ORDER BY drivers.dob ASC LIMIT 1;
SELECT max(pitstops.duration) FROM pitstops;
SELECT laptimes.time FROM laptimes ORDER BY laptimes.milliseconds LIMIT 1;
SELECT max(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT pitstops.time, pitstops.duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT laptimes.time FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND drivers.driverref = 'hamilton';
SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT laptimes.position FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY laptimes.time ASC LIMIT 1;
SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds ASC LIMIT 1;
SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT laptimes.raceid FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';
SELECT pitstops.duration FROM pitstops INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';
SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488';
SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT cast(sum(laptimes.milliseconds) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';
SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1;
SELECT player_name FROM player ORDER BY height DESC LIMIT 1;
SELECT player_attributes.preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.potential IS NOT NULL ORDER BY player_attributes.potential ASC LIMIT 1;
SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.defensive_work_rate = 'low';
SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;
SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.id ORDER BY sum(home_team_goal, away_team_goal) DESC LIMIT 1;
SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 GROUP BY team.team_long_name ORDER BY count(match.id) ASC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;
SELECT away_team_api_id FROM match WHERE season = '2009/2010' AND league_id = ( SELECT id FROM league WHERE name = 'Scotland Premier league' ) GROUP BY away_team_api_id HAVING MAX(SUBTRACT(away_team_goal, home_team_goal) > 0);
SELECT buildupplayspeed FROM team_attributes ORDER BY buildupplayspeed DESC LIMIT 4;
SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.id ORDER BY SUM(home_team_goal = away_team_goal) DESC LIMIT 1;
SELECT player.id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE date >= '2013-01-01 00:00:00' AND date <= '2015-12-31 00:00:00' AND player_attributes.sprint_speed >= 97;
SELECT league.name, count(match.league_id) FROM match INNER JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY count(match.league_id) DESC LIMIT 1;
SELECT avg(player.height) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday >= '1990-01-01 00:00:00' AND player.birthday < '1996-01-01 00:00:00';
SELECT player.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id AND player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE substr(player_attributes.date,1,4) = '2010' ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT team.team_fifa_api_id FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed BETWEEN 51 AND 59;
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassingclass = 'Long';
SELECT cast(sum(CASE WHEN player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY sum(home_team_goal + away_team_goal) LIMIT 5;
SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id = 2;
SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player_name HAVING height > 180 ORDER BY AVG(heading_accuracy) DESC LIMIT 10;
SELECT team_long_name, chancecreationpassing FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ORDER BY chancecreationpassing DESC;
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' GROUP BY league.name HAVING AVG(match.home_team_goal) > AVG(match.away_team_goal);
SELECT team.team_short_name FROM team WHERE team.team_long_name = 'Queens Park Rangers';
SELECT player_name FROM player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';
SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro';
SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';
SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Francois Affolter');
SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND strftime('%Y', player_attributes.date) = '2011';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND league.name = 'Scotland Premier league';
SELECT preferred_foot FROM player_attributes WHERE player_fifa_api_id = ( SELECT player_fifa_api_id FROM player ORDER BY birthday DESC LIMIT 1 );
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1;
SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left';
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass LIKE 'Risky';
SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';
SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';
SELECT avg(match.home_team_goal) FROM match INNER JOIN league ON match.country_id = league.country_id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';
SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1;
SELECT player_name FROM player WHERE height > 180;
SELECT count(id) FROM player WHERE strftime('%Y', birthday) = '1990';
SELECT count(*) FROM player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';
SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';
SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB';
SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70;
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170 AND strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015';
SELECT player_name FROM player ORDER BY height ASC LIMIT 1;
SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id AND team.team_fifa_api_id = team_attributes.team_fifa_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT team.team_short_name FROM team INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = ( SELECT max(balance) FROM player_attributes ) AND player_attributes.potential = 61;
SELECT avg(player_attributes.ball_control) - avg(player_attributes.ball_control) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo' AND player.player_name = 'Aaron Appindangoye';
SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';
SELECT player_name FROM player WHERE birthday = ( SELECT max(birthday) FROM player );
SELECT player_name FROM player ORDER BY height DESC LIMIT 1;
SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';
SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler league';
SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday)<'1986' AND player_attributes.defensive_work_rate = 'high';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 3;
SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';
SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;
SELECT count(match.id) FROM match INNER JOIN league ON match.country_id = league.country_id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2008/2009' AND country.name = 'Belgium';
SELECT player_attributes.long_passing FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.birthday ASC LIMIT 1;
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler league' AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';
SELECT league_id FROM match WHERE season = '2008/2009' GROUP BY league_id ORDER BY count(league_id) DESC LIMIT 1;
SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986';
SELECT 100 * ( ( SELECT overall_rating FROM player_attributes WHERE player_name = '<NAME>' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = '<NAME>' ) ) / ( SELECT overall_rating FROM player_attributes WHERE player_name = '<NAME>' ) AS RESULT;
SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian';
SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino';
SELECT sum(crossing) FROM player_attributes AS T1 JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox';
SELECT team.team_long_name, team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;
SELECT preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo';
SELECT overall_rating FROM player_attributes WHERE player_fifa_api_id = ( SELECT player_fifa_api_id FROM player WHERE player_name = 'Dorlan Pabon' ) ORDER BY overall_rating DESC LIMIT 1;
SELECT avg(match.away_team_goal) FROM country INNER JOIN match ON country.id = match.country_id INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date = '2016-06-23' ORDER BY player.birthday LIMIT 1;
SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.`date` = '2016-02-04 00:00:00';
SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';
SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01 00:00:00';
SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22 00:00:00' AND player_name = '<NAME>';
SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;
SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22 00:00:00';
SELECT player_attributes.dribbling FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id INNER JOIN player_attributes ON team.team_api_id = player_attributes.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.date = '2015-09-10 00:00:00';
SELECT buildupplaypassingclass FROM team_attributes WHERE team_api_id = ( SELECT team_api_id FROM team WHERE team_long_name = 'FC Lorient' ) AND date = '2010-02-22';
SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';
SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';
SELECT team_attributes.defenceaggressionclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date = '2015-09-10 00:00:00';
SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND player_attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';
SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013-07-12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12' ) AS RESULT;
SELECT player_name FROM player WHERE height = ( SELECT max(height) FROM player ) LIMIT 5;
SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;
SELECT count(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_1 = player.player_api_id WHERE player.player_name = 'Aaron Lennon';
SELECT sum(away_team_goal) FROM match WHERE away_player_1 = (SELECT player_api_id FROM player WHERE player_name = 'Daan Smith') AND away_player_2 = (SELECT player_api_id FROM player WHERE player_name = 'Filipe Ferreira');
SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_11 = player.player_api_id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;
SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY overall_rating DESC LIMIT 10;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player.birthday DESC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN league ON league.id = player_attributes.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Belgium';
SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.id WHERE player_attributes.vision > 89;
SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN player_attributes ON league.id = player_attributes.id GROUP BY country.name ORDER BY AVG(player_attributes.strength) DESC LIMIT 1;
SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';
SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';
SELECT avg(player.height) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN match ON league.id = match.country_id INNER JOIN player ON match.home_player_1 = player.player_api_id WHERE country.name = 'Italy';
SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;
SELECT count(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';
SELECT jumping AND id = 6,jumping AND id = 23 FROM player_attributes;
SELECT player.id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.potential = (SELECT MIN(potential) FROM player_attributes) AND player_attributes.preferred_foot = 'right' ORDER BY player.id LIMIT 3;
SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.crossing = (SELECT MAX(crossing) FROM player_attributes) AND player_attributes.preferred_foot = 'left';
SELECT cast(count(CASE WHEN player_attributes.stamina > 80 AND player_attributes.strength > 80 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes;
SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = 1;
SELECT player_attributes.sprint_speed , player_attributes.agility , player_attributes.acceleration FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = '<NAME>';
SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';
SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND match.season = '2015/2016';
SELECT match.home_team_goal FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands' AND league.name = 'Netherlands Eredivisie' ORDER BY match.home_team_goal DESC LIMIT 1;
SELECT player_attributes.finishing , player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1;
SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;
SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id GROUP BY team.team_long_name ORDER BY sum(match.away_team_goal) DESC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT cast(count(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;
SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND patient.admission = '+';
SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE year(birthday) > '1930';
SELECT count(*) / (SELECT count(*) FROM patient) * 100 FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';
SELECT count(id) / count(DISTINCT id) FROM patient WHERE diagnosis = 'SLE' AND admission = '+';
SELECT laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = '30609';
SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.id = 163109;
SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500';
SELECT id, age FROM patient WHERE rvvt = '+';
SELECT examination.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;
SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';
SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5;
SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F';
SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) >= '50';
SELECT count(patient.id) FROM patient WHERE patient.sex = 'F' AND year(patient.description) = '1997' AND patient.admission = '-';
SELECT age FROM patient ORDER BY age LIMIT 1;
SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';
SELECT MAX(year(birthday)) - MIN(year(birthday)) FROM patient WHERE tg >= 200;
SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id ORDER BY patient.birthday LIMIT 1;
SELECT count(examination.id) / 12 FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31';
SELECT MAX(birthday) FROM patient;
SELECT cast(sum(CASE WHEN patient.sex = 'M' AND laboratory.ua <= '8.0' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.sex = 'F' AND laboratory.ua <= '6.5' THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;
SELECT count(*) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;
SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE year(patient.birthday) < 18 AND examination.`examination date` BETWEEN '1990-01-01' AND '1993-12-31';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > '2.0' AND patient.sex = 'M';
SELECT diagnosis FROM examination WHERE `examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis ORDER BY count(diagnosis) DESC LIMIT 1;
SELECT avg(2019 - strftime('%Y', patient.birthday)) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT patient.id, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hgb = (SELECT MAX(hgb) FROM laboratory);
SELECT examination.ana FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-02';
SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 1 ELSE 0 END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.`date` = '1995-09-04' AND examination.diagnosis = 'Normal';
SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' LIMIT 1;
SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND patient.description = '1994-02-19';
SELECT CASE WHEN patient.sex = 'M' THEN 'Man' ELSE 'Woman' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9;
SELECT SUBTRACT('1992', year(patient.birthday)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';
SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date = '1995';
SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND patient.`first date` = '1997-01-27';
SELECT symptoms FROM examination WHERE id = (SELECT id FROM patient WHERE birthday = '1959/3/1') AND `examination date` = '1993/9/27';
SELECT calculation FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE birthday = '1959-02-18';
SELECT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'Behcet' AND examination.`examination date` >= '1997-1-1' AND examination.`examination date` < '1998-1-1';
SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE date BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;
SELECT patient.id FROM patient WHERE patient.sex = 'F' AND YEAR(patient.birthday) = 1964 AND patient.admission = '+';
SELECT AVG(`acl igm`) FROM examination WHERE thrombosis = 2 AND `ana pattern` = 'S';
SELECT (ua <= 6.5 AND `u-pro` > 0 AND `u-pro` < 30) * 100 FROM examination INNER JOIN laboratory ON examination.id = laboratory.id;
SELECT cast(sum(examination.diagnosis = 'BEHCET') AS REAL) * 100 / count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE YEAR(patient.`first date`) = '1981' AND patient.sex = 'M';
SELECT * FROM patient WHERE admission = '-' AND id IN (SELECT id FROM laboratory WHERE date LIKE '1991-10%' AND `t-bil` < 2.0);
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`ana pattern` != 'p' AND patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31';
SELECT DISTINCT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123;
SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.plt > 400 AND patient.diagnosis = 'SLE';
SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1;
SELECT patient.description, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 48473;
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';
SELECT count(id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(examination.`examination date`) = '1997' AND laboratory.tp > 6 AND laboratory.tp < 8.5;
SELECT cast(sum(examination.diagnosis LIKE '%Itp%') AS REAL) * 100 / sum(examination.diagnosis LIKE '%SLE%') FROM examination examination INNER JOIN patient patient ON examination.id = patient.id;
SELECT cast(count(CASE WHEN patient.sex = 'F' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE YEAR(birthday) = '1980' AND diagnosis = 'ra';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'BEHCET' AND patient.admission = '-';
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;
SELECT strftime('%J', examination.`examination date`) - strftime('%J', patient.`first date`) AS days FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 821298;
SELECT CASE WHEN laboratory.ua > 8.0 AND patient.sex = 'M' THEN 'Yes' WHEN laboratory.ua > 6.5 AND patient.sex = 'F' THEN 'Yes' ELSE 'No' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.id = 57266;
SELECT examination.id, examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.got >= 60;
SELECT patient.sex, patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE got < 60 AND year(examination.`examination date`) = 1994;
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;
SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC;
SELECT avg(laboratory.ldh) FROM laboratory WHERE laboratory.ldh < 500;
SELECT laboratory.id, strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE alp < 300 AND admission = '+';
SELECT id FROM patient WHERE birthday = '1982-04-01';
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;
SELECT tp - 8.5 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND tp > 8.5;
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb <= 3.5 OR laboratory.alb >= 5.5) ORDER BY patient.birthday DESC;
SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'within normal range' ELSE 'not within normal range' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.birthday) = '1982';
SELECT cast(count(CASE WHEN laboratory.ua > 8.0 AND patient.sex = 'M' THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN laboratory.ua > 8.0 AND patient.sex = 'M' THEN 1 ELSE NULL END) + cast(count(CASE WHEN laboratory.ua > 6.5 AND patient.sex = 'F' THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN laboratory.ua > 6.5 AND patient.sex = 'F' THEN 1 ELSE NULL END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F';
SELECT avg(laboratory.ua) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE (laboratory.ua < 8.0 AND patient.sex = 'M') OR (laboratory.ua < 6.5 AND patient.sex = 'F');
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29;
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'RA' AND laboratory.un < 30;
SELECT count(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE cre >= 1.5 AND sex = 'M';
SELECT (SUM(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5;
SELECT * FROM patient WHERE id = ( SELECT id FROM laboratory WHERE `t-bil` = ( SELECT max(`t-bil`) FROM laboratory ) );
SELECT DISTINCT patient.sex, laboratory.`t-bil` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0;
SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY patient.birthday LIMIT 1;
SELECT sum(round((strftime('%Y', date('now')) - strftime('%Y', patient.birthday)) / 365)) / count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.gender = 'M' AND laboratory.`t-cho` >= 250;
SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300;
SELECT count(id) FROM patient WHERE tg >= 200 AND SUBTRACT(year(current_timestamp), year(birthday)) > 50;
SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.cpk < 250;
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND patient.birthday BETWEEN '1936-01-01' AND '1956-12-31' AND laboratory.cpk >= 250;
SELECT patient.id, patient.sex, age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE glu >= 180 AND `t-cho` < 250;
SELECT patient.id, laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND year(patient.description) >= 1991;
SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0 GROUP BY patient.sex, patient.birthday ORDER BY patient.birthday ASC;
SELECT patient.id, strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5;
SELECT patient.id, patient.admission FROM patient WHERE patient.sex = 'F' AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) >= 50 AND (patient.rbc <= 3.5 OR patient.rbc >= 6.0);
SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10;
SELECT patient.id, patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'SLE' AND 10 < laboratory.hgb AND laboratory.hgb < 17 ORDER BY patient.birthday ASC LIMIT 1;
SELECT patient.id, strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;
SELECT avg(laboratory.hct) FROM laboratory WHERE laboratory.date LIKE '1991%' AND laboratory.hct < 29;
SELECT sum(plt < 100), sum(plt > 400) FROM laboratory WHERE plt < 100;
SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE examination."`examination date`" LIKE '1984%' AND SUBTRACT(year(current_timestamp), year(birthday)) < 50 AND laboratory.plt BETWEEN 100 AND 400;
SELECT cast(sum(CASE WHEN pt >= 14 AND sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN pt >= 14 THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE year(current_timestamp) - year(birthday) > 55;
SELECT * FROM patient WHERE year(`first date`) > 1992 AND pt < 14;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3 GROUP BY examination.id HAVING count(examination.id) = 1;
SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg <= 150 OR laboratory.fg >= 450);
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.fg BETWEEN 150 AND 450 AND patient.birthday > '1980-01-01';
SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` >= 30;
SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`acl iga` = 0 AND examination.ana = 0 AND laboratory.rnp = 0 AND patient.diagnosis = 'SLE';
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.igg < 900 AND examination.symptoms = 'abortion';
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.igg BETWEEN 900 AND 2000 AND examination.symptoms IS NOT NULL;
SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.iga = ( SELECT max(iga) FROM laboratory WHERE iga BETWEEN 80 AND 500 );
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND strftime('%Y', patient.`first date`) >= '1990' AND laboratory.iga BETWEEN 80 AND 500;
SELECT diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.igm NOT BETWEEN 40 AND 400 GROUP BY diagnosis ORDER BY count(diagnosis) DESC LIMIT 1;
SELECT count(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE (laboratory.crp LIKE '+' OR laboratory.crp LIKE '-' OR laboratory.crp < 1.0) AND patient.description IS NULL;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.crp NOT IN('+-', '-') AND laboratory.crp >= 1.0 AND SUBTRACT((YEAR(CURdate()), YEAR(birthday))) < 18;
SELECT count(DISTINCT patient.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.ra = '-' AND examination.kct = '+';
SELECT DISTINCT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday >= '1995-01-01' AND patient.diagnosis = 'RA';
SELECT id FROM patient WHERE rf < 20 AND (YEAR(CURdate()), YEAR(birthday)) > 60;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.rf < 20 AND examination.thrombosis = '0';
SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN examination ON examination.id = laboratory.id INNER JOIN patient ON patient.id = examination.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P';
SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 AND examination.`acl iga` = ( SELECT max(`acl iga`) FROM examination ) LIMIT 1;
SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c4 > 10 AND patient.diagnosis = 'APS';
SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+';
SELECT birthday FROM patient ORDER BY birthday DESC LIMIT 1;
SELECT count(DISTINCT examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE sm IN('-', '+-') AND thrombosis = '1';
SELECT id FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE sm NOT IN('-', '+-') ) ORDER BY birthday DESC LIMIT 3;
SELECT examination.id FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` >= 1997-01-01 AND laboratory.sc170 IN('-', '+-');
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND laboratory.sc170 IN('-', '+-') AND examination.symptoms = 'vertigo' AND patient.sex = 'M';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN('-','+-') AND YEAR(patient.`first date`) < 1990;
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa NOT IN('-', '+-') ORDER BY patient.`first date` LIMIT 1;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssb IN('-', '+-') AND examination.diagnosis = 'SLE';
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.ssb IN('-', '+-') AND examination.symptoms IS NOT NULL;
SELECT count(*) FROM ( SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M' );
SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna >= 8;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND (patient.description IS NULL);
SELECT count(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`dna-ii` < 8 AND patient.admission = '+';
SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.got >= 60 AND patient.diagnosis = 'SLE';
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`acl igg` < 60;
SELECT MIN(birthday) FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE got >= 60 );
SELECT birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE gpt < 60 ORDER BY gpt DESC LIMIT 3;
SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.got < 60;
SELECT patient.id, patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1;
SELECT patient.`first date` FROM patient ORDER BY patient.`first date` DESC LIMIT 1;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp >= 300 AND patient.admission = '+';
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-';
SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tp < 6.0;
SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp > 6.0 AND laboratory.tp < 8.5;
SELECT examination.`examination date` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5 ORDER BY laboratory.alb DESC LIMIT 1;
SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp > 6.0 AND laboratory.tp < 8.5;
SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'F' AND examination.diagnosis = 'Normal' AND examination.`acl iga` = (SELECT MAX(ua) FROM laboratory WHERE ua > 6.50);
SELECT MAX(examination.ana) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.cre < 1.5;
SELECT examination.id FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE cre < 1.5 AND `acl iga` = ( SELECT MAX(`acl iga`) FROM examination );
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';
SELECT examination.ana FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` < 2.0 ORDER BY laboratory.`t-bil` DESC LIMIT 1;
SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-cho` >= 250 AND examination.kct = '-';
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P';
SELECT count(*) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE tg < 200 AND symptoms IS NOT NULL;
SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tg < 200 GROUP BY examination.diagnosis ORDER BY max(laboratory.tg) DESC LIMIT 1;
SELECT laboratory.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cpk < 250 AND examination.thrombosis = 0;
SELECT count(patient.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');
SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180 ORDER BY patient.birthday ASC LIMIT 1;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0;
SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;
SELECT count(laboratory.wbc) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;
SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE ( laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 ) AND patient.admission = '-';
SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;
SELECT laboratory.plt FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'MCTD' AND laboratory.plt > 100 AND laboratory.plt < 400;
SELECT cast(sum(laboratory.pt) AS REAL) / count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.pt < 14;
SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.thrombosis = 2 OR examination.thrombosis = 1 AND laboratory.pt < 14;
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Sanders' AND member.first_name = 'Angela';
SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women's Soccer';
SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';
SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';
SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_id ORDER BY count(attendance.link_to_event) DESC LIMIT 1;
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';
SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND YEAR(event.event_date) = 2019;
SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND COUNT(event.event_id) > 10;
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(event.event_id) > 20;
SELECT DIVIDE(COUNT(event.event_id), COUNT(DISTINCT event.event_name)) AS avg_attendance FROM event WHERE event.type = 'Meeting' AND YEAR(event.event_date) = 2020;
SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );
SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county FROM zip_code WHERE city = 'Ramsey';
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';
SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';
SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN attendance ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting' AND member.position = 'Member';
SELECT zip_code.city , zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';
SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN attendance ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting' AND member.position = 'Member';
SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';
SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT DISTINCT expense.approved FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08';
SELECT sum(expense.cost) / count(expense.expense_id) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND MONTH(expense.expense_date) = 9 AND MONTH(expense.expense_date) = 10;
SELECT sum(t1.spent) - sum(t2.spent) FROM budget AS t1 INNER JOIN event AS t2 ON t1.link_to_event = t2.event_id WHERE t2.event_name = 'Student_Club';
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';
SELECT budget.remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;
SELECT income.notes FROM income WHERE income.date_received = '2019-09-14' AND income.source = 'Fundraising';
SELECT count(major.major_id) FROM major WHERE major.college LIKE 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE last_name = 'Jacobs' AND first_name = 'Carlo';
SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'O''Gallagher' AND member.first_name = 'Adela';
SELECT count(budget.budget_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';
SELECT event.status FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent';
SELECT count(member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Nielson' AND member.first_name = 'Christof';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';
SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT income.date_received FROM income WHERE income.source = 'Dues';
SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;
SELECT cast(sum(CASE WHEN budget.category = 'Advertisement' AND event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN budget.category = 'Advertisement' AND event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;
SELECT sum(t.amount) FROM budget t WHERE t.category = 'Parking' AND t.event_name = 'November Speaker';
SELECT SUM(expense.cost) FROM expense WHERE expense.expense_description = 'Pizza';
SELECT count(zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Firth' AND member.first_name = 'Amy';
SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.remaining ASC LIMIT 1;
SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting';
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1;
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1;
SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President';
SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer';
SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.last_name = 'Mason' AND member.first_name = 'Casey';
SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status LIKE 'Closed' ORDER BY (budget.spent / budget.amount) DESC LIMIT 1;
SELECT count(position) FROM member WHERE position = 'President';
SELECT budget.amount FROM budget ORDER BY budget.spent DESC LIMIT 1;
SELECT count(event_id) FROM `event` WHERE YEAR(event_date) = 2020 AND type = 'Meeting';
SELECT sum(budget.spent) FROM budget WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING COUNT(attendance.link_to_event) > 7;
SELECT DISTINCT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';
SELECT CONCAT(member.first_name, ' ', member.last_name) FROM member WHERE member.zip = ( SELECT zip_code.zip_code FROM zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina' AND zip_code.county = 'Carolina' );
SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.last_name = 'Gilmour' AND member.first_name = 'Grant';
SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;
SELECT SUM(expense.cost) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Baseball game';
SELECT first_name, last_name FROM member WHERE position = 'Member';
SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount = ( SELECT max(income.amount) FROM income );
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.spent LIMIT 1;
SELECT SUM(t.cost) / SUM(t2.cost) * 100 FROM expense t INNER JOIN event t2 ON t.link_to_budget = t2.event_id WHERE t2.event_name = 'Yearly Kickoff';
SELECT SUM(major_name = 'Finance') / SUM(major_name = 'Physics') AS ratio FROM major;
SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY income.amount DESC LIMIT 1;
SELECT member.first_name, member.last_name, member.email FROM member WHERE member.position = 'Secretary';
SELECT count(*) FROM member WHERE link_to_major = 'rec06DF6vZ1CyPKpc';
SELECT count(member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;
SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';
SELECT DIVIDE(SUM(t.spent), COUNT(t.spent)) FROM budget t WHERE t.category = 'Food' AND t.event_status = 'Closed';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;
SELECT iif(attendance.link_to_event = 'rec0Si5cQ4rJRVzd6', 'YES', 'NO') FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';
SELECT DIVIDE(SUM(event.type = 'Community Service'), COUNT(event.event_id)) * 100 FROM event WHERE event.event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT expense.cost FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters';
SELECT t.t_shirt_size FROM ( SELECT member.t_shirt_size, COUNT(member.t_shirt_size) FROM member GROUP BY member.t_shirt_size ORDER BY COUNT(member.t_shirt_size) DESC LIMIT 1 ) t;
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining < 0 AND event.status = 'Closed' ORDER BY budget.remaining LIMIT 1;
SELECT expense.expense_description, SUM(expense.cost) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description;
SELECT event.event_name , budget.amount , budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;
SELECT budget.budget_id FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT sum(expense.cost) FROM expense WHERE expense.expense_description = 'Parking';
SELECT SUM(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';
SELECT member.first_name, member.last_name, sum(expense.cost) FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v';
SELECT expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';
SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large';
SELECT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';
SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT cast(sum(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id;
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT count(income_id) FROM income WHERE amount = 50;
SELECT count(member.member_id) FROM member WHERE member.t_shirt_size = 'X-Large';
SELECT count(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education';
SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;
SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering department' AND member.position = 'member';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Social' AND member.position = 'Vice President' AND event.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza';
SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'recI43CzsZ0Q625ma';
SELECT ROUND(COUNT(amount = 50) / COUNT(member_id) * 100, 2) AS percentage FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE t_shirt_size = 'Medium' AND position = 'Member';
SELECT DISTINCT zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box';
SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico';
SELECT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT budget.link_to_event FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.cost > 50;
SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy';
SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'college of Agriculture and Applied Sciences';
SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > 20 AND expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19';
SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND member.position = 'member';
SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;
SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense.expense_description FROM expense GROUP BY expense.expense_description HAVING SUM(expense.cost) / COUNT(expense.expense_id) > 50;
SELECT member.first_name, member.last_name FROM member WHERE member.t_shirt_size = 'X-Large';
SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;
SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0;
SELECT event.event_name, event.event_date FROM expense INNER JOIN event ON expense.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;
SELECT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40;
SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name HAVING COUNT(expense.expense_id) > 1 ORDER BY MAX(expense.cost) DESC LIMIT 1;
SELECT avg(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position != 'member';
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking' AND expense.cost < DIVIDE(SUM(expense.cost), COUNT(event.event_id));
SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Game';
SELECT budget.budget_id FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1;
SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 5;
SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT AVG(cost) FROM expense );
SELECT cast(sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) / count(*) - cast(sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member';
SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';
SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '9/9/2019';
SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';
SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT budget.category, event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';
SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett';
SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;
SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium';
SELECT count(currency = 'EUR') / count(currency = 'CZK') FROM customers;
SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM' GROUP BY yearmonth.date ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT cast(sum(yearmonth.consumption) AS REAL) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.segment = 'SME';
SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT count(*) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000;
SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.`date` BETWEEN '201201' AND '201212';
SELECT strftime('%Y', transactions_1k.date) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR' GROUP BY strftime('%Y', transactions_1k.date) ORDER BY count(transactions_1k.date) DESC LIMIT 1;
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) LIMIT 1;
SELECT substr(date, 1, 4) FROM yearmonth GROUP BY substr(date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1;
SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date LIKE '2013%' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT cast(sum(yearmonth.consumption) AS REAL) / count(yearmonth.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201301' AND '201312' AND customers.currency = 'CZK';
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid INNER JOIN products ON yearmonth.customerid = products.productid WHERE yearmonth.date BETWEEN '201201' AND '201312' GROUP BY customers.segment ORDER BY count(yearmonth.date) DESC LIMIT 1;
SELECT sum(t.consumption) FROM yearmonth t WHERE t.date BETWEEN '201308' AND '201311' AND t.customerid = '6';
SELECT count(gasstationid) FROM gasstations WHERE segment = 'Discount' AND country = 'CZE';
SELECT sum(CASE WHEN yearmonth.date = '201304' AND yearmonth.customerid = 7 THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.date = '201304' AND yearmonth.customerid = 5 THEN yearmonth.consumption ELSE 0 END) FROM yearmonth;
SELECT sum(CASE WHEN transactions_1k.customerid IN ( SELECT customers.customerid FROM customers WHERE customers.segment = 'SME' AND customers.currency = 'CZK' ) THEN transactions_1k.amount ELSE 0 END) - sum(CASE WHEN transactions_1k.customerid IN ( SELECT customers.customerid FROM customers WHERE customers.segment = 'SME' AND customers.currency = 'EUR' ) THEN transactions_1k.amount ELSE 0 END) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.segment = 'SME';
SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201310' AND customers.segment = 'LAM' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT customers.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201305' AND customers.segment = 'KAM';
SELECT count(yearmonth.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'LAM' AND yearmonth.consumption > 46.73;
SELECT gasstations.country, count(gasstations.segment) FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country;
SELECT sum(transactions_1k.amount * transactions_1k.price) / sum(transactions_1k.amount) * 100 FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' AND customers.currency = 'EUR';
SELECT cast(sum(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth;
SELECT (SELECT COUNT(*) FROM gasstations WHERE gasstations.segment = 'Premium' AND gasstations.country = 'SVK') / (SELECT COUNT(*) FROM gasstations WHERE gasstations.country = 'SVK') * 100;
SELECT yearmonth.customerid FROM yearmonth WHERE yearmonth.date = '201309' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;
SELECT max(yearmonth.consumption) FROM yearmonth WHERE strftime('%Y', yearmonth.date) = '2012';
SELECT max(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR';
SELECT products.description FROM yearmonth INNER JOIN transactions_1k ON yearmonth.date = transactions_1k.date INNER JOIN products ON transactions_1k.productid = products.productid WHERE yearmonth.date = '201309';
SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.`date` LIKE '201306%';
SELECT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR';
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR';
SELECT cast(sum(transactions_1k.price) AS REAL) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '%2012-01';
SELECT count(yearmonth.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;
SELECT products.description FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE';
SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11;
SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;
SELECT count(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';
SELECT sum(transactions_1k.price) / count(transactions_1k.gasstationid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';
SELECT avg(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR';
SELECT customerid FROM transactions_1k WHERE date = '2012/8/25' ORDER BY amount DESC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25' ORDER BY transactions_1k.amount LIMIT 1;
SELECT customers.currency FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012/8/24';
SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00';
SELECT count(transactionid) FROM transactions_1k WHERE date = '2012-08-26' AND time < '13:00:00';
SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid ORDER BY yearmonth.date LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';
SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00';
SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.date = transactions_1k.date AND yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.consumption = 124.05;
SELECT count(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012-08-26' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00';
SELECT DISTINCT customers.currency FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date LIKE '%201306';
SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;
SELECT customers.currency FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid INNER JOIN yearmonth ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '2012/8/24' AND yearmonth.consumption = 548.4;
SELECT customers.customerid, transactions_1k.amount FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND transactions_1k.date = '2012/8/25';
SELECT (yearmonth.consumption - transactions_1k.amount) / yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.date = transactions_1k.date WHERE yearmonth.customerid = 63 AND transactions_1k.date = '2012-08-25';
SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY sum(amount) DESC LIMIT 1;
SELECT gasstations.segment, sum(transactions_1k.price) / (SELECT sum(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK') * 100 FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'SVK' GROUP BY gasstations.segment;
SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date = '201201' AND transactions_1k.customerid = '38508';
SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.price DESC LIMIT 5;
SELECT customers.customerid, customers.currency, AVG(transactions_1k.price / transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY AVG(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1;
SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE products.productid = 2 AND transactions_1k.amount = 1 GROUP BY gasstations.country ORDER BY sum(transactions_1k.price) DESC LIMIT 1;
SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE transactions_1k.productid = 5 AND transactions_1k.price / transactions_1k.amount > 29.00 AND yearmonth.date LIKE '%201208';
