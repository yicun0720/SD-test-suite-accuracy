SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';
SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;
SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';
SELECT mailstrabr FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;
SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.fundingtype = 'Directly funded' AND schools.charter = 1;
SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 500 AND schools.magnet = 1;
SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr >= 1500 ORDER BY numtsttakr DESC LIMIT 1);
SELECT count(DISTINCT schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1;
SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT sname FROM satscores ORDER BY avgscrread DESC LIMIT 1);
SELECT satscores.cds FROM satscores WHERE satscores.enroll12 > 500;
SELECT max(`free meal count (ages 5-17)`) FROM frpm WHERE `enrollment (ages 5-17)` / `free meal count (ages 5-17)` > 0.3;
SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;
SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;
SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;
SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND satscores.numtsttakr <= 250;
SELECT phone FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores));
SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;
SELECT sname, street FROM schools WHERE enroll12 - frpm.`enrollment (ages 5-17)` > 30;
SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;
SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';
SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');
SELECT schools.opendate FROM schools WHERE schools.edopsname = 'K-12' ORDER BY schools.opendate ASC LIMIT 1;
SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 LIMIT 5;
SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D');
SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' ORDER BY `free meal count (k-12)` DESC LIMIT 5;
SELECT `school name`, `free meal count (ages 5-17)` FROM frpm WHERE `free meal count (ages 5-17)` BETWEEN 1900 AND 2000;
SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 DESC LIMIT 3;
SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);
SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT schools.school FROM schools WHERE schools.virtual = 'F' ORDER BY schools.county LIMIT 5;
SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;
SELECT avg(satscores.avgscrmath), schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;
SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;
SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools';
SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '52' AND frpm.`county code` = '01';
SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';
SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;
SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE satscores.rtype = 'D') LIMIT 7;
SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread LIMIT 1;
SELECT sum(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';
SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';
SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';
SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;
SELECT account_id FROM loan WHERE duration > 12 ORDER BY amount DESC LIMIT 1;
SELECT * FROM account WHERE date = '1995-01-01';
SELECT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;
SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';
SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );
SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 'sn';
SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';
SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;
SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd';
SELECT language FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Angel of Mercy');
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';
SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;
SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT users.displayname FROM users WHERE year(users.creationdate) = 2011;
SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01';
SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;
SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;
SELECT count(id) FROM users WHERE views > 10 AND year(creationdate) > 2013;
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';
SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname FROM posts posts INNER JOIN users users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';
SELECT posts.answercount FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') ORDER BY posts.answercount DESC LIMIT 1;
SELECT users.displayname FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';
SELECT count(*) FROM posts WHERE owneruserid = -1 AND parentid IS NULL;
SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;
SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;
SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';
SELECT body FROM posts WHERE id = (SELECT excerptpostid FROM tags WHERE tagname = 'bayesian');
SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;
SELECT count(DISTINCT badges.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';
SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1;
SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';
SELECT avg(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200;
SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;
SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';
SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;
SELECT count(badges.id) FROM badges WHERE badges.name = 'Revival';
SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY comments.score DESC LIMIT 1;
SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;
SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';
SELECT text FROM comments WHERE postid = 107829 AND id = 1;
SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = 23853;
SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041';
SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';
SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347';
SELECT votes.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';
SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT text FROM comments WHERE score = 17;
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';
SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93';
SELECT text FROM comments WHERE userid = ( SELECT id FROM users WHERE displayname = 'A Lion' );
SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer';
SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';
SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';
SELECT count(comments.id) FROM comments WHERE comments.userid = 13;
SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;
SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;
SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(badges.date) = 2011;
SELECT count(userid) FROM badges WHERE count(name) > 5;
SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;
SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(*) DESC LIMIT 1;
SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';
SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;
SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';
SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT count(*) FROM comments WHERE score > 60;
SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0';
SELECT count(*) FROM posts WHERE score = 10;
SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );
SELECT users.reputation FROM users JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';
SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');
SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';
SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id;
SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;
SELECT comments.score FROM comments WHERE comments.creationdate = '2010-07-19 19:19:56.0';
SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:37:33.0';
SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';
SELECT count(*) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;
SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);
SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';
SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.age > 65 AND badges.name = 'Supporter';
SELECT users.displayname FROM users WHERE users.id = 30;
SELECT count(users.id) FROM users WHERE users.location = 'New York';
SELECT count(*) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';
SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;
SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) FROM votes;
SELECT count(postid) FROM votes WHERE postid > 4 AND userid = (SELECT id FROM users WHERE displayname = 'Matt Parker');
SELECT count(*) FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan') AND score < 60;
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';
SELECT count(*) FROM badges WHERE name = 'Commentator' AND year(date) = 2014;
SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );
SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';
SELECT count(*) FROM comments WHERE userid = 13 AND score < 60;
SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;
SELECT lastaccessdate , location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');
SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;
SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';
SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL ORDER BY posts.score DESC LIMIT 1;
SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;
SELECT posts.title FROM posts ORDER BY posts.viewcount DESC LIMIT 5;
SELECT count(*) FROM tags WHERE count BETWEEN 5000 and 7000;
SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT age FROM users ORDER BY reputation DESC LIMIT 1;
SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;
SELECT id FROM users WHERE age = (SELECT min(age) FROM users);
SELECT SUM(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';
SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';
SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;
SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1;
SELECT min(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';
SELECT MIN(creaiondate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);
SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;
SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;
SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT max(age) FROM users));
SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );
SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;
SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;
SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;
SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1;
SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;
SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';
SELECT displayname FROM users WHERE viewcount > 20000 AND YEAR(creationdate) = 2011;
SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;
SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(posts.creationdate) = 2011 AND users.reputation > 1000;
SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) AS percentage;
SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);
SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM comments);
SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;
SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;
SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;
SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE users.displayname = 'Zolomon';
SELECT COUNT(posts.id) AS post_count, COUNT(comments.id) AS comment_count FROM users JOIN posts ON users.id = posts.owneruserid JOIN comments ON posts.id = comments.postid GROUP BY users.id ORDER BY users.creationdate DESC LIMIT 1;
SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';
SELECT count(*) FROM tags WHERE tagname = 'careers';
SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';
SELECT posts.commentcount, posts.answercount FROM posts WHERE posts.title = 'Clustering 1D data';
SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';
SELECT count(votes.id) FROM votes WHERE votes.bountyamount >= 30;
SELECT count(*) FROM posts WHERE score < 20;
SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;
SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';
SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';
SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment = 'regression' AND posts.title LIKE '%linear regression%';
SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150) ORDER BY score DESC LIMIT 1;
SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';
SELECT count(DISTINCT posts.id) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;
SELECT count(DISTINCT comments.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0;
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';
SELECT count(*) FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND sh.height_cm > 200;
SELECT full_name FROM superhero GROUP BY full_name HAVING COUNT(full_name) > 15;
SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');
SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON hero_attribute.attribute_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blond' AND superhero.hair_colour_id = colour.id;
SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;
SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));
SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;
SELECT q1 FROM qualifying WHERE qualifyid = 354;
SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 LIKE '0:01:40';
SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE 'M:SS%';
SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;
SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;
SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015/11/29';
SELECT drivers.forename FROM drivers WHERE drivers.driverid IN (SELECT results.driverid FROM results WHERE results.raceid = 592) ORDER BY drivers.dob ASC LIMIT 1;
SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = 161;
SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';
SELECT code FROM drivers WHERE nationality = 'American';
SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime DESC LIMIT 5;
SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';
SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;
SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);
SELECT circuits.lng, circuits.lat FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';
SELECT player.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player);
SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);
SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';
SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;
SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));
SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' ORDER BY SUBTRACT(home_team_goal, away_team_goal) ASC LIMIT 1;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';
SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;
SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';
SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);
SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;
SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission;
SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';
SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';
SELECT calculation FROM (SELECT COUNT(id) AS calculation FROM patient WHERE diagnosis = 'SLE' GROUP BY admission);
SELECT diagnosis FROM patient WHERE id = '30609';
SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE patient.id = '163109';
SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500';
SELECT id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient WHERE rvvt = '+';
SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;
SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';
SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.alb < 3.5;
SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', laboratory.date) = '1995-09-04';
SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31';
SELECT description, diagnosis FROM patient WHERE id = 48473;
SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0;
SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;
SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND examination.`acl igm` BETWEEN 3.5 AND 9.0;
SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;
SELECT count(*) FROM examination WHERE thrombosis = 2 AND pt < 14;
SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT count(*) FROM major WHERE college = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT count(attendance.link_to_member) FROM attendance, member, event WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer';
SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;
SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';
SELECT count(DISTINCT event.event_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;
SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND member.last_name = 'Student_Club';
SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraiser';
SELECT avg(attendance) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );
SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';
SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT SUM(expense.cost), COUNT(event.event_id) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.type = 'Meeting';
SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 0, 5;
SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(cost) FROM expense );
SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;
SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';
SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';
SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';
SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';
SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;
SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201306%';
SELECT sum(transactions_1k.price) / count(transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';
SELECT avg(price) FROM transactions_1k WHERE currency = 'EUR';
SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;
