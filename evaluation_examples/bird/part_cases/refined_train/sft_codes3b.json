[
  {
    "id": 0,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT max(frpm.`percent (%) eligible free (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda'",
        "SELECT max(`percent (%) eligible free (k-12)`) FROM frpm WHERE `county name` = 'Alameda'",
        "SELECT max(`percent (%) eligible free (k-12)`) FROM frpm WHERE `county name` = 'Alameda';",
        "SELECT max(frpm.`percent (%) eligible free (k-12)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda'"
      ]
    ]
  },
  {
    "id": 1,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3",
        "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` LIMIT 3",
        "SELECT min(`free meal count (ages 5-17)`) / min(`enrollment (ages 5-17)`) FROM frpm WHERE `educational option type` = 'Continuation School'",
        "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;"
      ]
    ]
  },
  {
    "id": 2,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
        "SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'",
        "SELECT zip FROM schools WHERE charter = 1 AND county = 'Fresno'",
        "SELECT DISTINCT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1"
      ]
    ]
  },
  {
    "id": 3,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
        "SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
        "SELECT DISTINCT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1",
        "SELECT DISTINCT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 4,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND fundingtype = 'Directly funded';",
        "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND `charter funding type` = 'Directly funded';",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM frpm WHERE `charter school (y/n)` = 1 AND `charter funding type` = 'Directly funded') AND opendate > '2000-01-01';",
        "SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND fundingtype = 'Directly funded'"
      ]
    ]
  },
  {
    "id": 6,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1",
        "SELECT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1",
        "SELECT DISTINCT sname FROM satscores WHERE numge1500 > 500 AND magnet = 1;"
      ]
    ]
  },
  {
    "id": 7,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr > 1500));",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL));",
        "SELECT schools.phone FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores);",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 > 0));"
      ]
    ]
  },
  {
    "id": 9,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1",
        "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.charter = 1",
        "SELECT count(DISTINCT schools.school) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1;",
        "SELECT count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1"
      ]
    ]
  },
  {
    "id": 10,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT frpm.\"FRPM count (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1",
        "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.\"School Code\" WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores) AND frpm.\"FRPM count (ages 5-17)\" IS NOT NULL;",
        "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE satscores.avgscrread = (SELECT max(satscores.avgscrread) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread IS NOT NULL);",
        "SELECT frpm.\"FRPM count (ages 5-17)\" FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode JOIN frpm frpm ON schools.cdscode = frpm.\"School Code\" WHERE satscores.avgscrread = (SELECT max(satscores.avgscrread) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 11,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
        "SELECT \"School Code\" FROM frpm WHERE \"Enrollment (k-12)\" + \"Enrollment (ages 5-17)\" > 500",
        "SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500",
        "SELECT DISTINCT frpm.`school code` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)` > 500"
      ]
    ]
  },
  {
    "id": 12,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.numge1500 / satscores.numtsttakr > 0.3;",
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND satscores.numge1500 > 0 AND satscores.numtsttakr > ",
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL;",
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.avgscrread IS NOT NULL AND satscores.avgscrmath IS NOT NULL AND satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL AND frpm.`free meal count (ages 5-17)` IS NOT NULL AND frpm.`enrollment (ages 5-17)` IS NOT NULL AND satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > "
      ]
    ]
  },
  {
    "id": 13,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
        "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
        "SELECT schools.phone FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE numge1500 IS NOT NULL AND numtsttakr IS NOT NULL) ORDER BY cast(numge1500 AS REAL) / numtsttakr DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 14,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5",
        "SELECT ncesschool FROM schools WHERE cdscode IN (SELECT cdscode FROM frpm WHERE \"Enrollment (ages 5-17)\" = (SELECT max(\"Enrollment (ages 5-17)\") FROM frpm));",
        "SELECT schools.ncesdist FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5",
        "SELECT schools.ncesschool FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE frpm.\"Enrollment (ages 5-17)\" = (SELECT max(\"Enrollment (ages 5-17)\") FROM frpm) LIMIT 5;"
      ]
    ]
  },
  {
    "id": 15,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT dname FROM satscores WHERE avgscrread IS NOT NULL GROUP BY dname ORDER BY avg(avgscrread) DESC LIMIT 1;",
        "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1",
        "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;",
        "SELECT dname FROM satscores WHERE avgscrread IS NOT NULL GROUP BY dname ORDER BY avg(avgscrread) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 18,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
        "SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
        "SELECT count(schools.school) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250",
        "SELECT count(*) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;"
      ]
    ]
  },
  {
    "id": 19,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores));",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL))",
        "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 20,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Amador'",
        "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador'",
        "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Amador' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12",
        "SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Amador' AND frpm.`high grade` = 12 AND frpm.`low grade` = 9"
      ]
    ]
  },
  {
    "id": 22,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1",
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1",
        "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 23,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT schools.`school name`, schools.street FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > 30",
        "SELECT DISTINCT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
        "SELECT schools.`school name`, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30",
        "SELECT DISTINCT schools.`school name`, schools.street FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.school = frpm.`school name` AND (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > 30;"
      ]
    ]
  },
  {
    "id": 24,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
        "SELECT DISTINCT schools.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
        "SELECT DISTINCT schools.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500",
        "SELECT DISTINCT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0 AND satscores.numtsttakr >= 1500"
      ]
    ]
  },
  {
    "id": 27,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT satscores.avgscrwrite, satscores.sname, schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
        "SELECT satscores.avgscrwrite, schools.school, schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
        "SELECT satscores.avgscrwrite, schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'",
        "SELECT satscores.avgscrwrite, satscores.sname, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'"
      ]
    ]
  },
  {
    "id": 28,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(`enrollment (k-12)` - `enrollment (ages 5-17)`) FROM frpm )",
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(`enrollment (k-12)` - `enrollment (ages 5-17)`) FROM frpm )",
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )",
        "SELECT schools.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )"
      ]
    ]
  },
  {
    "id": 29,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsoffered = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
        "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY `enrollment (k-12)` DESC LIMIT 1",
        "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY enroll12 DESC LIMIT 1",
        "SELECT opendate FROM schools WHERE gsoffered = 'K-12' ORDER BY enroll12 DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 30,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5",
        "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5",
        "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5",
        "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` LIMIT 5"
      ]
    ]
  },
  {
    "id": 31,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool LIMIT 1, 2",
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool ASC LIMIT 1, 2",
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool ASC LIMIT 1, 10",
        "SELECT frpm.`free meal count (k-12)`, frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool LIMIT 9, 2"
      ]
    ]
  },
  {
    "id": 32,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.`school code` = schools.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.`school code` = schools.cdscode WHERE schools.soc = '66' ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5",
        "SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '66' ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 33,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT schools.website, schools.school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT DISTINCT schools.website, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT DISTINCT schools.website, frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
        "SELECT DISTINCT schools.website, schools.school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` = 1900 AND frpm.`free meal count (ages 5-17)` = 2000"
      ]
    ]
  },
  {
    "id": 36,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores)",
        "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL)",
        "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores WHERE numge1500 IS NOT NULL);",
        "SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname1, schools.admlname2, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores)"
      ]
    ]
  },
  {
    "id": 37,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr LIMIT 1",
        "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1",
        "SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE satscores.numge1500 IS NOT NULL ORDER BY satscores.numge1500 ASC LIMIT 1",
        "SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 IS NOT NULL AND satscores.numtsttakr IS NOT NULL ORDER BY satscores.numge1500 / satscores.numtsttakr ASC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 39,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND schools.city = 'Fresno'",
        "SELECT avg(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'",
        "SELECT cast(sum(satscores.numtsttakr) AS REAL) / count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'"
      ]
    ]
  },
  {
    "id": 41,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5",
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY satscores.sname ORDER BY avg(satscores.avgscrread) DESC LIMIT 5",
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' GROUP BY satscores.sname ORDER BY sum(satscores.avgscrread) DESC LIMIT 5",
        "SELECT satscores.sname FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' AND satscores.avgscrread IS NOT NULL ORDER BY satscores.avgscrread DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 42,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT edopsname FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));",
        "SELECT schools.edopsname FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
        "SELECT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1",
        "SELECT DISTINCT schools.edopsname FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 43,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT satscores.avgscrmath, schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1",
        "SELECT satscores.avgscrmath, schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath LIMIT 1",
        "SELECT satscores.avgscrmath, satscores.cname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1",
        "SELECT satscores.avgscrmath, schools.county FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath = (SELECT min(avgscrmath) FROM satscores);"
      ]
    ]
  },
  {
    "id": 44,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT satscores.avgscrwrite, schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
        "SELECT satscores.avgscrwrite, schools.city FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr >= 1500);",
        "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )",
        "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr >= 1500) GROUP BY satscores.cds, schools.city;"
      ]
    ]
  },
  {
    "id": 46,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
        "SELECT schools.edopsname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
        "SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soctype = 'State Special Schools' AND schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1",
        "SELECT schools.school FROM schools schools JOIN frpm frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' GROUP BY schools.school ORDER BY sum(frpm.\"Enrollment (k-12)\") DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 47,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT cast(count(schools.doc) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = '52' AND strftime('%Y', schools.opendate) = '1980'",
        "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = '52' AND strftime('%Y', schools.opendate) = '1980'",
        "SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 52 AND schools.county = 'Alameda' AND strftime('%Y', schools.opendate) = '1980'",
        "SELECT cast(count(schools.doc) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52 AND strftime('%Y', schools.opendate) = '1980'"
      ]
    ]
  },
  {
    "id": 48,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
        "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
        "SELECT cast(count(CASE WHEN schools.doc = 54 THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN schools.doc = 52 THEN 1 ELSE NULL END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'",
        "SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange' AND schools.doc IN (52, 54)"
      ]
    ]
  },
  {
    "id": 49,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools schools WHERE schools.statustype = 'Closed';",
        "SELECT schools.county, schools.school, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.school) DESC LIMIT 1",
        "SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county, school, closeddate ORDER BY county DESC LIMIT 1;",
        "SELECT schools.county, schools.school, schools.closeddate FROM schools schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.school) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 50,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
        "SELECT schools.mailstreet, schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
        "SELECT schools.mailstreet, schools.street FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1",
        "SELECT schools.mailstreet, schools.`school name` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1"
      ]
    ]
  },
  {
    "id": 51,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.mailstreet, schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1",
        "SELECT schools.mailstreet, schools.ncesschool FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrread ASC LIMIT 1",
        "SELECT schools.mailstreet, schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread LIMIT 1",
        "SELECT schools.mailstreet, schools.ncesschool FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores )"
      ]
    ]
  },
  {
    "id": 53,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'",
        "SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno'",
        "SELECT count(DISTINCT satscores.numtsttakr) FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';",
        "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno'"
      ]
    ]
  },
  {
    "id": 55,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;",
        "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA'",
        "SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools schools WHERE schools.mailstate = 'CA';",
        "SELECT cast(sum(CASE WHEN counties.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN counties.county = 'Humboldt' THEN 1 ELSE 0 END) FROM counties INNER JOIN schools ON counties.code = schools.county WHERE schools.mailstate = 'CA'"
      ]
    ]
  },
  {
    "id": 58,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone, ext, school FROM schools WHERE zip = '95203-3704'",
        "SELECT phone, ext FROM schools WHERE zip = '95203-3704'",
        "SELECT phone, ext, school FROM schools WHERE zip = '95203-3704';",
        "SELECT phone, ext, school FROM schools WHERE zip = 952033704"
      ]
    ]
  },
  {
    "id": 98,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount ASC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE strftime('%Y', loan.date) = '1997' AND account.frequency = 'POPLATEK TYDNE' ORDER BY loan.amount LIMIT 1",
        "SELECT account.account_id, account.frequency FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1"
      ]
    ]
  },
  {
    "id": 99,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1",
        "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1",
        "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 101,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account WHERE strftime('%Y', date) = '1995' )",
        "SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account WHERE date LIKE '1995%' )",
        "SELECT account_id FROM account WHERE date = (SELECT min(date) FROM account WHERE strftime('%Y', date) = '1995');",
        "SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1995' ORDER BY account.date ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 102,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000",
        "SELECT DISTINCT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000",
        "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.date < '1997-01-01' AND order.amount > 3000",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND account.account_id IN ( SELECT account_id FROM order WHERE amount > 3000 )"
      ]
    ]
  },
  {
    "id": 195,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1",
        "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM bond GROUP BY bond_type));",
        "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(cnt) FROM (SELECT count(*) AS cnt FROM bond GROUP BY bond_type));",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 205,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c'",
        "SELECT molecule_id FROM atom WHERE element = 'c'",
        "SELECT DISTINCT molecule.molecule_id FROM molecule molecule JOIN atom atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';",
        "SELECT molecule_id FROM atom WHERE element = 'c';"
      ]
    ]
  },
  {
    "id": 206,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9'",
        "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR004_8_9'",
        "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9');",
        "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9';"
      ]
    ]
  },
  {
    "id": 207,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '='",
        "SELECT DISTINCT atom.element FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='",
        "SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='",
        "SELECT DISTINCT atom.element FROM bond bond JOIN connected connected ON bond.bond_id = connected.bond_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=';"
      ]
    ]
  },
  {
    "id": 214,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') OR label IS NULL;",
        "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') AND label NOT IN ('+', '-');",
        "SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') AND label NOT IN ('+', '-');",
        "SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') OR label IS NULL"
      ]
    ]
  },
  {
    "id": 215,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT connected.atom_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-';",
        "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND (atom.element = 'i' OR atom.element = 's');",
        "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND atom.element IN ('i', 's') AND bond.bond_type = '-';",
        "SELECT count(DISTINCT connected.atom_id) FROM molecule molecule JOIN connected connected ON molecule.molecule_id = connected.molecule_id JOIN atom atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND (atom.element = 'i' OR atom.element = 's') AND bond.bond_type = '-';"
      ]
    ]
  },
  {
    "id": 343,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;",
        "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015",
        "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = '2015'",
        "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = '2015';"
      ]
    ]
  },
  {
    "id": 351,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1",
        "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Japanese' AND cards.isalternative = 1",
        "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE set_translations.language = 'Japanese' AND cards.isalternative = 1"
      ]
    ]
  },
  {
    "id": 354,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd'",
        "SELECT count(DISTINCT TYPE) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd' AND isfullart = 0"
      ]
    ]
  },
  {
    "id": 360,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT foreign_data.language FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE cards.name = 'Angel of Mercy'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN sets ON foreign_data.id = sets.id INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.id = cards.setcode WHERE cards.name = 'Angel of Mercy'"
      ]
    ]
  },
  {
    "id": 367,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE LANGUAGE = 'Phyrexian');",
        "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'",
        "SELECT cards.artist FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian'",
        "SELECT artist FROM cards WHERE uuid IN (SELECT foreign_data.uuid FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian');"
      ]
    ]
  },
  {
    "id": 369,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1",
        "SELECT count(id) FROM cards WHERE isreprint = 1 AND uuid IN (SELECT uuid FROM foreign_data WHERE LANGUAGE = 'German');",
        "SELECT count(id) FROM cards WHERE isreprint = 1 AND (SELECT language FROM foreign_data WHERE uuid = cards.uuid) = 'German';",
        "SELECT count(id) FROM cards WHERE isreprint = 1 AND uuid IN (SELECT foreign_data.uuid FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German');"
      ]
    ]
  },
  {
    "id": 531,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
        "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Jarrod Dixon' ELSE 'Harlan' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
        "SELECT CASE WHEN reputation = ( SELECT max(reputation) FROM users ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )",
        "SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname = 'Harlan' OR displayname = 'Jarrod Dixon'"
      ]
    ]
  },
  {
    "id": 532,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2011'",
        "SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2011';",
        "SELECT DISTINCT displayname FROM users WHERE strftime('%Y', creationdate) = '2011'",
        "SELECT displayname FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) = '2011';"
      ]
    ]
  },
  {
    "id": 533,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01'",
        "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01';",
        "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01 00:00:00'",
        "SELECT count(id) FROM users WHERE lastaccessdate >= '2014-09-01'"
      ]
    ]
  },
  {
    "id": 534,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )",
        "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
        "SELECT displayname FROM users ORDER BY views DESC LIMIT 1;",
        "SELECT displayname FROM users WHERE id = ( SELECT userid FROM users ORDER BY views DESC LIMIT 1 )"
      ]
    ]
  },
  {
    "id": 535,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT users.id) FROM users users JOIN votes votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1;",
        "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1",
        "SELECT count(DISTINCT users.id) FROM users users WHERE users.upvotes > 100 AND users.downvotes > 1;",
        "SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;"
      ]
    ]
  },
  {
    "id": 536,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) > '2013' AND views > 10",
        "SELECT count(id) FROM users WHERE strftime('%Y', creationdate) > '2013' AND views > 10",
        "SELECT count(id) FROM users WHERE YEAR(creationdate) > 2013 AND views > 10",
        "SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), -4) > '2013' AND views > 10"
      ]
    ]
  },
  {
    "id": 537,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
        "SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
        "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
        "SELECT count(id) FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie');"
      ]
    ]
  },
  {
    "id": 538,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
        "SELECT title FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
        "SELECT title FROM posts WHERE owneruserid IN ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
        "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie'"
      ]
    ]
  },
  {
    "id": 539,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Eliciting priors from experts'",
        "SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts'",
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.comment = 'Eliciting priors from experts'",
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title LIKE 'Eliciting priors from experts'"
      ]
    ]
  },
  {
    "id": 540,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1",
        "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1;",
        "SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) ORDER BY viewcount DESC LIMIT 1",
        "SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' AND viewcount = ( SELECT max(viewcount) FROM posts WHERE ownerdisplayname = 'csgillespie' )"
      ]
    ]
  },
  {
    "id": 541,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1",
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1",
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 542,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
        "SELECT sum(comments.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'csgillespie'",
        "SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
        "SELECT sum(commentcount) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )"
      ]
    ]
  },
  {
    "id": 543,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1",
        "SELECT answercount FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) ORDER BY answercount DESC LIMIT 1",
        "SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1;",
        "SELECT posts.answercount FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 544,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT lasteditoruserid FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'",
        "SELECT lasteditordisplayname FROM posts WHERE title LIKE 'Examples for teaching: Correlation does not mean causation'",
        "SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'"
      ]
    ]
  },
  {
    "id": 545,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL",
        "SELECT count(*) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL",
        "SELECT count(id) FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL"
      ]
    ]
  },
  {
    "id": 546,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL",
        "SELECT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL",
        "SELECT DISTINCT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 547,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20",
        "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score > 19",
        "SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;"
      ]
    ]
  },
  {
    "id": 548,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts'",
        "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'",
        "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title LIKE 'Eliciting priors from experts'",
        "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title LIKE 'Eliciting priors from experts'"
      ]
    ]
  },
  {
    "id": 549,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian'",
        "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'bayesian'",
        "SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'bayesian'",
        "SELECT posts.body FROM tags tags JOIN posts posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';"
      ]
    ]
  },
  {
    "id": 550,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1",
        "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1",
        "SELECT posts.title, posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1",
        "SELECT posts.body FROM tags tags JOIN posts posts ON tags.excerptpostid = posts.id WHERE tags.count = (SELECT max(count) FROM tags);"
      ]
    ]
  },
  {
    "id": 551,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
        "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
        "SELECT count(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
        "SELECT count(id) FROM badges WHERE userid IN ( SELECT id FROM users WHERE displayname = 'csgillespie' )"
      ]
    ]
  },
  {
    "id": 552,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'csgillespie';",
        "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'"
      ]
    ]
  },
  {
    "id": 553,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
        "SELECT count(DISTINCT badges.name) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
        "SELECT count(DISTINCT badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'",
        "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'"
      ]
    ]
  },
  {
    "id": 554,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id, users.displayname ORDER BY count(badges.id) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 555,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
        "SELECT cast(sum(posts.score) AS REAL) / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'",
        "SELECT avg(score) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
        "SELECT avg(score) FROM posts WHERE ownerdisplayname = 'csgillespie'"
      ]
    ]
  },
  {
    "id": 556,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
        "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.views > 200;",
        "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.accountid) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200",
        "SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.accountid) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.views > 200;"
      ]
    ]
  },
  {
    "id": 557,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5",
        "SELECT (count(DISTINCT CASE WHEN users.age > 65 THEN posts.id END) * 100.0 / count(DISTINCT posts.id)) AS percentage FROM posts posts JOIN users users ON posts.owneruserid = users.id WHERE posts.score > 5;",
        "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5",
        "SELECT (count(DISTINCT CASE WHEN users.age > 65 THEN posts.id END) * 100.0 / count(DISTINCT posts.id)) AS percentage FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5"
      ]
    ]
  },
  {
    "id": 558,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
        "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
        "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19'",
        "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate LIKE '2010-07-19'"
      ]
    ]
  },
  {
    "id": 559,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1",
        "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;",
        "SELECT votes.creationdate FROM votes INNER JOIN tags ON votes.postid = tags.wikipostid GROUP BY votes.postid ORDER BY count(votes.id) DESC LIMIT 1",
        "SELECT votes.creationdate FROM votes INNER JOIN tags ON votes.postid = tags.wikipostid GROUP BY votes.creationdate ORDER BY count(votes.id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 560,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM badges WHERE name = 'Revival'",
        "SELECT count(userid) FROM badges WHERE name = 'Revival'",
        "SELECT count(name) FROM badges WHERE name = 'Revival'",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Revival';"
      ]
    ]
  },
  {
    "id": 561,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT title FROM posts WHERE id IN (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments));",
        "SELECT title FROM posts WHERE id = (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments));",
        "SELECT title FROM posts WHERE id = (SELECT postid FROM comments ORDER BY score DESC LIMIT 1);",
        "SELECT title FROM posts WHERE id IN (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments WHERE score IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 562,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT commentcount FROM posts WHERE viewcount = 1910",
        "SELECT comments.commentcount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910",
        "SELECT commentcount FROM posts WHERE id = 1910",
        "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910"
      ]
    ]
  },
  {
    "id": 563,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2014-04-23 20:29:39' AND comments.userid = 3025",
        "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate LIKE '2014-04-23 20:29:39' AND comments.userid = 3025",
        "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 3025 AND comments.creationdate LIKE '2014-04-23 20:29:39'",
        "SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 3025 AND comments.creationdate = '2014-04-23 20:29:39'"
      ]
    ]
  },
  {
    "id": 564,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.parentid = 107829 AND posts.commentcount = 1",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.parentid = 107829 AND comments.commentcount = 1",
        "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND comments.commentcount = 1"
      ]
    ]
  },
  {
    "id": 565,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18.0' AND comments.userid = 23853",
        "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0'",
        "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18' AND comments.userid = 23853",
        "SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS RESULT FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18.0' AND comments.userid = 23853"
      ]
    ]
  },
  {
    "id": 566,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT reputation FROM users WHERE id = (SELECT owneruserid FROM posts WHERE id = 65041);",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041",
        "SELECT reputation FROM users WHERE id = ( SELECT owneruserid FROM posts WHERE id = 65041 )",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041'"
      ]
    ]
  },
  {
    "id": 567,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'",
        "SELECT count(*) FROM posts WHERE ownerdisplayname = 'Tiago Pasqualini'",
        "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Tiago Pasqualini'",
        "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Tiago Pasqualini'"
      ]
    ]
  },
  {
    "id": 568,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347",
        "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = 6347",
        "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347'",
        "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347'"
      ]
    ]
  },
  {
    "id": 569,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM posts INNER JOIN votes ON posts.id = votes.postid",
        "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM votes INNER JOIN posts ON votes.postid = posts.id",
        "SELECT sum(v.votes) FROM votes v JOIN posts p ON v.postid = p.id WHERE p.title LIKE '%data visualization%'",
        "SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%'"
      ]
    ]
  },
  {
    "id": 570,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'DatEpicCoderGuyWhoPrograms');",
        "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'DatEpicCoderGuyWhoPrograms' )",
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatepicCoderGuyWhoPrograms'"
      ]
    ]
  },
  {
    "id": 572,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT viewcount FROM posts WHERE title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT viewcount FROM posts WHERE title LIKE 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/%'"
      ]
    ]
  },
  {
    "id": 573,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE score = 17",
        "SELECT text FROM comments WHERE score = 17;",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 17",
        "SELECT c.text FROM comments c JOIN posts p ON c.postid = p.id WHERE c.score = 17;"
      ]
    ]
  },
  {
    "id": 575,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'SilentGhost';",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'SilentGhost');",
        "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'"
      ]
    ]
  },
  {
    "id": 576,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
        "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'thank you user93!'",
        "SELECT users.displayname FROM comments INNER JOIN users ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
        "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93!'"
      ]
    ]
  },
  {
    "id": 577,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
        "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion'",
        "SELECT comments.text FROM comments INNER JOIN users ON users.id = comments.userid WHERE users.displayname = 'A Lion'",
        "SELECT c.text FROM comments c JOIN users u ON c.userid = u.id WHERE u.displayname = 'A Lion';"
      ]
    ]
  },
  {
    "id": 578,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
        "SELECT users.reputation, users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
        "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?'",
        "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title LIKE 'Understanding what Dassault iSight is doing?'"
      ]
    ]
  },
  {
    "id": 580,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10",
        "SELECT users.id FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10",
        "SELECT users.displayname FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10"
      ]
    ]
  },
  {
    "id": 583,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
        "SELECT posts.score, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
        "SELECT users.websiteurl, sum(posts.score) FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
        "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny'"
      ]
    ]
  },
  {
    "id": 585,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'",
        "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%'",
        "SELECT sum(votes.bountyamount) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'",
        "SELECT sum(v.bountyamount) FROM votes v JOIN posts p ON v.postid = p.id WHERE p.title LIKE '%data%' AND v.bountyamount IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 588,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM comments WHERE userid = 13",
        "SELECT count(id) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid = 13);",
        "SELECT count(*) FROM comments WHERE userid = 13",
        "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 13"
      ]
    ]
  },
  {
    "id": 589,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id FROM users ORDER BY reputation DESC LIMIT 1",
        "SELECT id FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
        "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;",
        "SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
      ]
    ]
  },
  {
    "id": 590,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id FROM users ORDER BY views ASC LIMIT 1",
        "SELECT id FROM users ORDER BY views LIMIT 1",
        "SELECT id FROM users ORDER BY views ASC LIMIT 1;",
        "SELECT id FROM users WHERE views = ( SELECT min(views) FROM users )"
      ]
    ]
  },
  {
    "id": 591,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter'",
        "SELECT count(DISTINCT users.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';"
      ]
    ]
  },
  {
    "id": 592,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT userid) FROM badges WHERE userid IN (SELECT id FROM users) GROUP BY userid HAVING count(name) > 5;",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id GROUP BY badges.userid HAVING count(badges.name) > 5;",
        "SELECT count(DISTINCT userid) FROM badges WHERE userid IN (SELECT userid FROM users) GROUP BY userid HAVING count(name) > 5;",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Teacher' GROUP BY badges.userid HAVING count(badges.name) > 5;"
      ]
    ]
  },
  {
    "id": 594,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
        "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1",
        "SELECT users.reputation, users.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1"
      ]
    ]
  },
  {
    "id": 596,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posts ON users.id = posts.owneruserid GROUP BY users.id ORDER BY count(posts.id) DESC LIMIT 1",
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN ( SELECT userid, count(id) AS commentcount FROM comments GROUP BY userid ) AS t2 ON users.id = t2.userid ORDER BY t2.commentcount DESC LIMIT 1",
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN ( SELECT userid, count(id) AS commentcount FROM comments GROUP BY userid ORDER BY commentcount DESC LIMIT 1 ) AS t2 ON users.id = t2.userid",
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.id IN ( SELECT userid FROM comments GROUP BY userid HAVING count(id) = ( SELECT max(commentcount) FROM posts ) )"
      ]
    ]
  },
  {
    "id": 597,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher';",
        "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher'",
        "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India'"
      ]
    ]
  },
  {
    "id": 599,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;",
        "SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720;",
        "SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720",
        "SELECT posthistorytypeid, count(DISTINCT userid) AS numusers FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;"
      ]
    ]
  },
  {
    "id": 605,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT userid) FROM badges WHERE name = 'Announcer';",
        "SELECT count(userid) FROM badges WHERE name = 'Announcer'",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Announcer';",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Announcer';"
      ]
    ]
  },
  {
    "id": 606,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0'",
        "SELECT name FROM badges WHERE date LIKE '2010-07-19 19:39:08%'",
        "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';",
        "SELECT name FROM badges WHERE DATE = '2010-07-19 19:39:08.0'"
      ]
    ]
  },
  {
    "id": 607,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM comments WHERE score > 60",
        "SELECT count(score) FROM comments WHERE score > 60",
        "SELECT count(*) FROM comments WHERE score > 60",
        "SELECT count(postid) FROM comments WHERE score > 60"
      ]
    ]
  },
  {
    "id": 608,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0'",
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0'",
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14'",
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47'"
      ]
    ]
  },
  {
    "id": 609,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE score = 10",
        "SELECT count(*) FROM posts WHERE score = 10",
        "SELECT count(postid) FROM posts WHERE score = 10",
        "SELECT count(score) FROM posts WHERE score = 10"
      ]
    ]
  },
  {
    "id": 610,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users));",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users ORDER BY reputation DESC LIMIT 1);",
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 611,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
        "SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
        "SELECT users.reputation FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.`date` = '2010-07-19 19:39:08'"
      ]
    ]
  },
  {
    "id": 612,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre'",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Pierre';"
      ]
    ]
  },
  {
    "id": 613,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
        "SELECT DISTINCT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'",
        "SELECT badges.date FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY';",
        "SELECT b.date FROM users u JOIN badges b ON u.id = b.userid WHERE u.location = 'Rochester, NY';"
      ]
    ]
  },
  {
    "id": 614,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN badges.name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid",
        "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Teacher';",
        "SELECT cast(count(DISTINCT users.id) AS REAL) * 100 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher') FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher'",
        "SELECT cast(count(DISTINCT users.id) AS REAL) * 100 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Teacher') FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Teacher';"
      ]
    ]
  },
  {
    "id": 615,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
        "SELECT cast(sum(CASE WHEN users.age >= 13 AND users.age <= 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
        "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Organizer')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
        "SELECT (count(DISTINCT users.id) * 100.0 / (SELECT count(DISTINCT userid) FROM badges WHERE name = 'Organizer')) AS percentage FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age BETWEEN 13 AND 18 AND badges.name = 'Organizer';"
      ]
    ]
  },
  {
    "id": 616,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0'",
        "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56'",
        "SELECT score FROM posts WHERE id IN (SELECT postid FROM comments WHERE creationdate = '2010-07-19 19:19:56.0');",
        "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creationdate = '2010-07-19 19:19:56.0'"
      ]
    ]
  },
  {
    "id": 617,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE creaiondate = '2010-07-19 19:37:33' )",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33'",
        "SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE creationdate = '2010-07-19 19:37:33' )",
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:37:33'"
      ]
    ]
  },
  {
    "id": 618,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'",
        "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria' AND badges.name = 'Student'",
        "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria' AND badges.name = 'Teacher'",
        "SELECT users.age FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';"
      ]
    ]
  },
  {
    "id": 619,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age >= 19 AND users.age <= 65 AND badges.name = 'Supporter';",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65;",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65"
      ]
    ]
  },
  {
    "id": 620,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'",
        "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0'",
        "SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.`date` = '2010-07-19 19:39:08.0'",
        "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.`date` = '2010-07-19 19:39:08.0'"
      ]
    ]
  },
  {
    "id": 621,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE reputation = (SELECT min(reputation) FROM users));",
        "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )",
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid ORDER BY users.reputation LIMIT 1"
      ]
    ]
  },
  {
    "id": 622,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Sharpie';",
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Sharpie');",
        "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'"
      ]
    ]
  },
  {
    "id": 623,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';",
        "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65;",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65"
      ]
    ]
  },
  {
    "id": 624,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users WHERE id = 30",
        "SELECT name FROM users WHERE id = 30",
        "SELECT DISTINCT displayname FROM users WHERE id = 30",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.id = 30"
      ]
    ]
  },
  {
    "id": 625,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE LOCATION = 'New York'",
        "SELECT count(id) FROM users WHERE location = 'New York'",
        "SELECT count(*) FROM users WHERE LOCATION = 'New York'",
        "SELECT count(id) FROM users WHERE LOCATION LIKE 'New York'"
      ]
    ]
  },
  {
    "id": 626,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010'",
        "SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010';",
        "SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2010';",
        "SELECT count(id) FROM votes WHERE substr(creationdate, 1, 4) = '2010';"
      ]
    ]
  },
  {
    "id": 627,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65",
        "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65",
        "SELECT count(id) FROM users WHERE age > 19 AND age < 65",
        "SELECT count(id) FROM users WHERE age > 19 AND age < 66"
      ]
    ]
  },
  {
    "id": 629,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes",
        "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes;",
        "SELECT (SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2010') * 1.0 / (SELECT count(*) FROM votes WHERE strftime('%Y', creationdate) = '2011') AS ratio;",
        "SELECT cast(sum(CASE WHEN strftime('%Y', votes.creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', votes.creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes"
      ]
    ]
  },
  {
    "id": 635,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN votes ON posts.id = votes.postid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
        "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON users.id = votes.userid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4"
      ]
    ]
  },
  {
    "id": 636,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
        "SELECT count(*) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Neil McGuigan')) AND score < 60;",
        "SELECT count(comments.id) FROM users INNER JOIN comments ON users.id = comments.userid INNER JOIN posts ON comments.postid = posts.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60",
        "SELECT count(comments.id) FROM comments INNER JOIN users ON comments.userid = users.id INNER JOIN posts ON comments.postid = posts.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60"
      ]
    ]
  },
  {
    "id": 638,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer'",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
        "SELECT users.displayname FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Organizer';"
      ]
    ]
  },
  {
    "id": 641,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator';",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Commentator' AND strftime('%Y', badges.date) = '2014';",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator'",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.creationdate BETWEEN '2014-01-01' AND '2014-12-31' AND badges.name = 'Commentator';"
      ]
    ]
  },
  {
    "id": 643,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )",
        "SELECT displayname, age FROM users ORDER BY views DESC LIMIT 1",
        "SELECT id, displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )",
        "SELECT users.displayname, users.age FROM users WHERE users.views = ( SELECT max(views) FROM users )"
      ]
    ]
  },
  {
    "id": 644,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'",
        "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';",
        "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title LIKE 'Detecting a given face in a database of facial images'",
        "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Detecting a given face in a database of facial images'"
      ]
    ]
  },
  {
    "id": 645,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM comments WHERE userid = 13 AND score < 60",
        "SELECT count(*) FROM comments WHERE userid = 13 AND score < 60",
        "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13",
        "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13;"
      ]
    ]
  },
  {
    "id": 647,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
        "SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'",
        "SELECT DISTINCT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011';",
        "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011';"
      ]
    ]
  },
  {
    "id": 650,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers'",
        "SELECT users.lastaccessdate, users.location FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Outliers'",
        "SELECT users.lastaccessdate, users.location FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Outliers';",
        "SELECT users.lastaccessdate, users.location FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Outliers';"
      ]
    ]
  },
  {
    "id": 653,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1",
        "SELECT ownerdisplayname FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts )",
        "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1;",
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 654,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'",
        "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE tags.tagname = 'hypothesis-testing'",
        "SELECT users.displayname, users.location FROM users INNER JOIN tags ON users.id = tags.owneruserid WHERE tags.tagname = 'hypothesis-testing'",
        "SELECT users.displayname, users.location FROM users INNER JOIN tags ON users.id = tags.id WHERE tags.tagname = 'hypothesis-testing'"
      ]
    ]
  },
  {
    "id": 656,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.parentid IS NOT NULL ORDER BY posthistory.score DESC LIMIT 1",
        "SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.parentid IS NOT NULL ORDER BY posthistory.score DESC LIMIT 1",
        "SELECT ownerdisplayname FROM posts WHERE parentid IS NOT NULL AND score = ( SELECT max(score) FROM posts )",
        "SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.score = ( SELECT max(score) FROM posthistory ) AND posts.parentid IS NOT NULL"
      ]
    ]
  },
  {
    "id": 657,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
        "SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1",
        "SELECT u.displayname, u.websiteurl FROM users u JOIN votes v ON u.id = v.userid WHERE v.votetypeid = 8 AND v.bountyamount = (SELECT max(bountyamount) FROM votes WHERE votetypeid = 8);",
        "SELECT u.displayname, u.websiteurl FROM users u JOIN votes v ON u.id = v.userid WHERE v.votetypeid = 8 ORDER BY v.bountyamount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 658,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5",
        "SELECT title FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts ) LIMIT 5",
        "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;",
        "SELECT title FROM posts WHERE viewcount = ( SELECT max(viewcount) FROM posts ) ORDER BY viewcount DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 659,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM tags WHERE wikipostid IN ( SELECT id FROM posts WHERE commentcount BETWEEN 5000 AND 7000 )",
        "SELECT count(id) FROM tags WHERE wikipostid IN (SELECT id FROM posts WHERE commentcount BETWEEN 5000 AND 7000);",
        "SELECT count(id) FROM tags WHERE wikipostid IN (SELECT id FROM posts WHERE id BETWEEN 5000 AND 7000);",
        "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE posts.commentcount BETWEEN 5000 AND 7000"
      ]
    ]
  },
  {
    "id": 660,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1",
        "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;",
        "SELECT owneruserid FROM posts WHERE favoritecount = ( SELECT max(favoritecount) FROM posts )",
        "SELECT owneruserid FROM posts WHERE favoritecount = (SELECT max(favoritecount) FROM posts);"
      ]
    ]
  },
  {
    "id": 661,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT age FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
        "SELECT age FROM users ORDER BY reputation DESC LIMIT 1",
        "SELECT age FROM users ORDER BY reputation DESC LIMIT 1;",
        "SELECT age FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
      ]
    ]
  },
  {
    "id": 662,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
        "SELECT count(DISTINCT votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50",
        "SELECT count(DISTINCT votes.postid) FROM votes votes JOIN posts posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50;",
        "SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.creationdate LIKE '2011%' AND votes.bountyamount = 50"
      ]
    ]
  },
  {
    "id": 663,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id FROM users ORDER BY age LIMIT 1",
        "SELECT id FROM users ORDER BY age ASC LIMIT 1",
        "SELECT id FROM users WHERE age = ( SELECT min(age) FROM users )",
        "SELECT id FROM users ORDER BY age LIMIT 1;"
      ]
    ]
  },
  {
    "id": 664,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%'",
        "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.lasactivitydate LIKE '2010-07-19%'",
        "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE strftime('%Y-%m-%d', posts.lasactivitydate) = '2010-07-19'",
        "SELECT sum(posts.score) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate LIKE '2010-07-19%'"
      ]
    ]
  },
  {
    "id": 665,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / 12 FROM postlinks WHERE postid IN (SELECT id FROM posts WHERE answercount <= 2);",
        "SELECT cast(count(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE NULL END) AS REAL) / 12 FROM postlinks WHERE postid IN (SELECT id FROM posts WHERE answercount <= 2);",
        "SELECT cast(count(CASE WHEN strftime('%Y', posts.creationdate) = '2010' THEN 1 ELSE NULL END) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2",
        "SELECT cast(count(CASE WHEN strftime('%Y', creationdate) = '2010' AND answercount <= 2 THEN 1 ELSE NULL END) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid"
      ]
    ]
  },
  {
    "id": 666,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1",
        "SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1;",
        "SELECT postid FROM votes WHERE userid = 1465 ORDER BY votedate DESC LIMIT 1",
        "SELECT postid FROM votes WHERE userid = 1465 ORDER BY votedate DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 667,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE creationdate = (SELECT min(creationdate) FROM postlinks));",
        "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks ORDER BY creationdate ASC LIMIT 1);",
        "SELECT title FROM posts WHERE id = (SELECT postid FROM postlinks ORDER BY creationdate ASC LIMIT 1);",
        "SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE creationdate = (SELECT min(creationdate) FROM postlinks WHERE creationdate IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 668,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id, users.displayname ORDER BY count(badges.name) DESC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 669,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
        "SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1",
        "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1",
        "SELECT votes.creationdate FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl' ORDER BY votes.creationdate LIMIT 1"
      ]
    ]
  },
  {
    "id": 670,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT min(posts.creaiondate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age LIMIT 1",
        "SELECT min(posts.creationdate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age LIMIT 1",
        "SELECT min(posts.creaiondate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age ASC LIMIT 1",
        "SELECT min(creationdate) FROM posts WHERE owneruserid = (SELECT id FROM users ORDER BY age LIMIT 1);"
      ]
    ]
  },
  {
    "id": 671,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1"
      ]
    ]
  },
  {
    "id": 672,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4",
        "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN votes votes ON posts.id = votes.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
        "SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN posthistory posthistory ON posts.id = posthistory.postid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;"
      ]
    ]
  },
  {
    "id": 673,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT avg(v.postid) FROM votes v JOIN users u ON v.userid = u.id WHERE u.age = (SELECT max(age) FROM users);",
        "SELECT avg(v.postid) FROM users u JOIN votes v ON u.id = v.userid WHERE u.age = (SELECT max(age) FROM users);",
        "SELECT cast(sum(v.postid) AS REAL) / count(v.userid) FROM votes v JOIN users u ON v.userid = u.id WHERE u.age = (SELECT max(age) FROM users);",
        "SELECT avg(v.postid) FROM users u JOIN votes v ON u.id = v.userid WHERE u.age = (SELECT max(age) FROM users)"
      ]
    ]
  },
  {
    "id": 674,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1",
        "SELECT displayname FROM users WHERE reputation = ( SELECT max(reputation) FROM users )",
        "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1;",
        "SELECT displayname FROM users WHERE reputation = (SELECT max(reputation) FROM users);"
      ]
    ]
  },
  {
    "id": 675,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000",
        "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000",
        "SELECT count(accountid) FROM users WHERE reputation > 2000 AND views > 1000",
        "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000;"
      ]
    ]
  },
  {
    "id": 676,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users WHERE age >= 19 AND age <= 65",
        "SELECT displayname FROM users WHERE age BETWEEN 19 AND 65",
        "SELECT displayname FROM users WHERE age >= 19 AND age <= 65;",
        "SELECT displayname FROM users WHERE age > 18 AND age < 66"
      ]
    ]
  },
  {
    "id": 677,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2010' AND users.displayname = 'Jay Stevens'",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creationdate) = '2010'"
      ]
    ]
  },
  {
    "id": 678,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1",
        "SELECT posts.id, posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1",
        "SELECT p.id, p.title FROM posts p JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Harvey Motulsky' ORDER BY p.viewcount DESC LIMIT 1;",
        "SELECT id, title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ) ORDER BY viewcount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 679,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id, title FROM posts WHERE score = ( SELECT max(score) FROM posts )",
        "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1",
        "SELECT id, title FROM posts WHERE score = (SELECT max(score) FROM posts);",
        "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 680,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
        "SELECT cast(sum(posts.score) AS REAL) / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'",
        "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner'",
        "SELECT cast(sum(posts.score) AS REAL) / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'"
      ]
    ]
  },
  {
    "id": 681,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND strftime('%Y', posts.creationdate) = '2011'",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011' AND posts.viewcount > 20000",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND strftime('%Y', posts.creaiondate) = '2011'",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000"
      ]
    ]
  },
  {
    "id": 682,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
        "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creationdate) = '2010' ORDER BY favoritecount DESC LIMIT 1",
        "SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1;",
        "SELECT id, ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 683,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
        "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2011'",
        "SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'",
        "SELECT cast(count(CASE WHEN users.reputation > 1000 THEN 1 ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creationdate) = '2011'"
      ]
    ]
  },
  {
    "id": 684,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users",
        "SELECT cast(count(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users",
        "SELECT cast(count(CASE WHEN age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / count(id) FROM users",
        "SELECT cast(count(CASE WHEN age >= 13 AND age <= 18 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM users"
      ]
    ]
  },
  {
    "id": 686,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
        "SELECT count(*) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
        "SELECT count(viewcount) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )",
        "SELECT count(id) FROM posts WHERE viewcount > (SELECT avg(viewcount) FROM posts);"
      ]
    ]
  },
  {
    "id": 687,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts )",
        "SELECT count(*) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )",
        "SELECT count(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);",
        "SELECT count(id) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )"
      ]
    ]
  },
  {
    "id": 688,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
        "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;",
        "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0",
        "SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0;"
      ]
    ]
  },
  {
    "id": 690,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Emmett' ORDER BY b.date DESC LIMIT 1;",
        "SELECT b.name FROM users u JOIN badges b ON u.id = b.userid WHERE u.displayname = 'Emmett' AND b.date = (SELECT max(date) FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett'));"
      ]
    ]
  },
  {
    "id": 691,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE age >= 19 AND age <= 65 AND upvotes > 5000",
        "SELECT count(id) FROM users WHERE age > 19 AND age < 65 AND upvotes > 5000",
        "SELECT count(DISTINCT users.id) FROM users users JOIN votes votes ON users.id = votes.userid WHERE users.age >= 19 AND users.age <= 65 AND users.upvotes > 5000;",
        "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age >= 19 AND users.age <= 65 AND users.upvotes > 5000"
      ]
    ]
  },
  {
    "id": 692,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.date - users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
        "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate), users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
        "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate) AS days , users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'",
        "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate) AS days FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'"
      ]
    ]
  },
  {
    "id": 693,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
        "SELECT count(posts.id) AS postcount, count(comments.id) AS commentcount FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
        "SELECT count(posts.id) AS post_count, count(comments.id) AS comment_count FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1",
        "SELECT count(DISTINCT posts.id) AS postcount, count(DISTINCT comments.id) AS commentcount FROM users users JOIN posts posts ON users.id = posts.owneruserid JOIN comments comments ON users.id = comments.userid WHERE users.creationdate = (SELECT max(creationdate) FROM users);"
      ]
    ]
  },
  {
    "id": 695,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol';",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE badges.name = 'Citizen Patrol';",
        "SELECT count(DISTINCT userid) FROM badges WHERE name = 'Citizen Patrol';",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Citizen Patrol'"
      ]
    ]
  },
  {
    "id": 696,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'",
        "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'",
        "SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname LIKE 'careers'",
        "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'"
      ]
    ]
  },
  {
    "id": 697,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'",
        "SELECT users.reputation, users.views FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jarrod Dixon'",
        "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';",
        "SELECT reputation, viewcount FROM users WHERE displayname = 'Jarrod Dixon'"
      ]
    ]
  },
  {
    "id": 698,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 1 ELSE 0 END), sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 0 ELSE 1 END) FROM posts INNER JOIN comments ON posts.id = comments.postid",
        "SELECT sum(comments.score), sum(posts.answercount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'",
        "SELECT sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 1 ELSE 0 END), sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 0 ELSE 1 END) FROM comments INNER JOIN posts ON comments.postid = posts.id",
        "SELECT sum(comments.score), sum(posts.answercount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE 'Clustering 1D data'"
      ]
    ]
  },
  {
    "id": 699,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT creationdate FROM users WHERE displayname = 'IrishStat'",
        "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.userdisplayname = 'IrishStat'",
        "SELECT users.creationdate FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'IrishStat'",
        "SELECT users.creationdate FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.displayname = 'IrishStat'"
      ]
    ]
  },
  {
    "id": 700,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM votes WHERE bountyamount >= 30",
        "SELECT count(postid) FROM votes WHERE bountyamount >= 30",
        "SELECT count(id) FROM votes WHERE bountyamount > 30",
        "SELECT count(postid) FROM votes WHERE bountyamount > 30"
      ]
    ]
  },
  {
    "id": 702,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE score < 20",
        "SELECT count(*) FROM posts WHERE score < 20",
        "SELECT count(postid) FROM posts WHERE score < 20",
        "SELECT count(score) FROM posts WHERE score < 20"
      ]
    ]
  },
  {
    "id": 703,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 AND tags.count <= 20",
        "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 AND tags.count <= 20",
        "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 GROUP BY tags.tagname HAVING count(tags.tagname) <= 20",
        "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 GROUP BY tags.id HAVING count(tags.id) <= 20"
      ]
    ]
  },
  {
    "id": 704,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
        "SELECT excerptpostid, wikipostid FROM tags WHERE tagname LIKE 'sample'",
        "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample'",
        "SELECT tags.excerptpostid, tags.wikipostid FROM tags INNER JOIN postlinks ON tags.id = postlinks.id WHERE tags.tagname = 'sample'"
      ]
    ]
  },
  {
    "id": 705,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'",
        "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)'",
        "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'fine, you win :)'",
        "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'"
      ]
    ]
  },
  {
    "id": 706,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE '%linear regression%'",
        "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE '%linear regression%'",
        "SELECT DISTINCT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE '%linear regression%'",
        "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE title LIKE '%linear regression%');"
      ]
    ]
  },
  {
    "id": 707,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
        "SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1",
        "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) AND score = (SELECT max(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150));",
        "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) ORDER BY score DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 708,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'",
        "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'",
        "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'",
        "SELECT comments.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'"
      ]
    ]
  },
  {
    "id": 709,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT comments.postid) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5",
        "SELECT count(DISTINCT comments.postid) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;",
        "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5",
        "SELECT count(DISTINCT p.id) FROM posts p JOIN comments c ON p.id = c.postid WHERE p.viewcount < 5 AND c.score = 0;"
      ]
    ]
  },
  {
    "id": 710,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0",
        "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0",
        "SELECT count(DISTINCT comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0",
        "SELECT count(*) FROM (SELECT postid FROM posts WHERE commentcount = 1 AND score = 0) AS t2;"
      ]
    ]
  },
  {
    "id": 718,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';",
        "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';"
      ]
    ]
  },
  {
    "id": 719,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength'",
        "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength'"
      ]
    ]
  },
  {
    "id": 720,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING count(DISTINCT power_id) > 15);",
        "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING count(superhero.id) > 15",
        "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.id HAVING count(superhero.id) > 15",
        "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15"
      ]
    ]
  },
  {
    "id": 721,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
        "SELECT count(id) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');",
        "SELECT count(*) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');",
        "SELECT count(id) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');"
      ]
    ]
  },
  {
    "id": 722,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
        "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.superhero_name = 'Apocalypse'",
        "SELECT DISTINCT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'",
        "SELECT c.colour FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';"
      ]
    ]
  },
  {
    "id": 723,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'",
        "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue'",
        "SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN colour colour ON superhero.eye_colour_id = colour.id JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Agility')) AND colour.colour = 'Blue';"
      ]
    ]
  },
  {
    "id": 724,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'",
        "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'",
        "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'",
        "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'"
      ]
    ]
  },
  {
    "id": 725,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "SELECT count(superhero.id) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics'",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'"
      ]
    ]
  },
  {
    "id": 726,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero.superhero_name, superhero.height_cm FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
        "SELECT superhero.superhero_name, superhero.height_cm FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
        "SELECT superhero.height_cm FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC"
      ]
    ]
  },
  {
    "id": 727,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'",
        "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron'",
        "SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM superhero WHERE superhero_name = 'Sauron');",
        "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'"
      ]
    ]
  },
  {
    "id": 730,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'",
        "SELECT superhero.full_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'",
        "SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';",
        "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'"
      ]
    ]
  },
  {
    "id": 858,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 ORDER BY results.points DESC LIMIT 1",
        "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 AND results.points = 1",
        "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 GROUP BY circuits.country ORDER BY count(circuits.country) DESC LIMIT 1",
        "SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 GROUP BY circuits.country ORDER BY count(results.points) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 859,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354",
        "SELECT qualifying.q1 FROM drivers drivers JOIN qualifying qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354;",
        "SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = '354'",
        "SELECT drivers.forename, drivers.surname, qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.driverref = 'senna' AND qualifying.raceid = 354"
      ]
    ]
  },
  {
    "id": 860,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE raceid = 355 AND q2 = '0:01:40');",
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
        "SELECT drivers.nationality FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'",
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '1:01:40'"
      ]
    ]
  },
  {
    "id": 861,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT driverid FROM qualifying WHERE raceid = 903 AND q3 LIKE '1:01:54%'",
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 LIKE '1:01:54%'",
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54'",
        "SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 LIKE '1:01:54%'"
      ]
    ]
  },
  {
    "id": 862,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;",
        "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL",
        "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL",
        "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL"
      ]
    ]
  },
  {
    "id": 863,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
        "SELECT DISTINCT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901",
        "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = '901'",
        "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901"
      ]
    ]
  },
  {
    "id": 864,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'",
        "SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.date = '2015-11-29';",
        "SELECT count(DISTINCT drivers.driverid) FROM races races JOIN results results ON races.raceid = results.raceid JOIN drivers drivers ON results.driverid = drivers.driverid WHERE races.date = '2015-11-29';",
        "SELECT count(DISTINCT results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'"
      ]
    ]
  },
  {
    "id": 865,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND TIME IS NOT NULL) ORDER BY dob LIMIT 1",
        "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND TIME IS NOT NULL) ORDER BY dob LIMIT 1;",
        "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND time IS NOT NULL) ORDER BY dob LIMIT 1;",
        "SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND time IS NOT NULL) ORDER BY dob LIMIT 1"
      ]
    ]
  },
  {
    "id": 866,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27'",
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = '161' AND laptimes.time = '0:01:27'",
        "SELECT drivers.url FROM drivers drivers JOIN laptimes laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27';",
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27.000'"
      ]
    ]
  },
  {
    "id": 867,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
        "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1",
        "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY cast(replace(substr(results.fastestlapspeed, 2), ',', '') AS REAL) DESC LIMIT 1",
        "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 933 ORDER BY cast(replace(substr(results.fastestlapspeed, 2), ',', '') AS REAL) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 868,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix'",
        "SELECT circuits.lat, circuits.lng FROM races races JOIN circuits circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE name = 'Malaysian Grand Prix');"
      ]
    ]
  },
  {
    "id": 964,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT code FROM drivers WHERE nationality = 'American'",
        "SELECT code FROM drivers WHERE nationality = 'American';",
        "SELECT DISTINCT code FROM drivers WHERE nationality = 'American'",
        "SELECT DISTINCT code FROM drivers WHERE nationality = 'American';"
      ]
    ]
  },
  {
    "id": 976,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT driverid FROM results ORDER BY fastestlaptime LIMIT 5",
        "SELECT driverid FROM (SELECT driverid, min(time) AS fastesttime FROM laptimes GROUP BY driverid) WHERE fastesttime IS NOT NULL ORDER BY fastesttime DESC LIMIT 5;",
        "SELECT driverid FROM results WHERE fastestlaptime = ( SELECT min(fastestlaptime) FROM results ) LIMIT 5",
        "SELECT driverid FROM results WHERE fastestlaptime = ( SELECT min(fastestlaptime) FROM results ) ORDER BY fastestlaptime DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 993,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT LOCATION, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "SELECT LOCATION, country FROM circuits WHERE name = 'Hungaroring'",
        "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "SELECT LOCATION, country, lng, lat FROM circuits WHERE name = 'Hungaroring'"
      ]
    ]
  },
  {
    "id": 997,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT nationality FROM drivers GROUP BY nationality HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM drivers GROUP BY nationality));",
        "SELECT nationality FROM drivers GROUP BY nationality HAVING count(nationality) = (SELECT max(driver_count) FROM (SELECT count(nationality) AS driver_count FROM drivers GROUP BY nationality));",
        "SELECT nationality FROM drivers GROUP BY nationality HAVING count(*) = (SELECT max(driver_count) FROM (SELECT count(*) AS driver_count FROM drivers GROUP BY nationality));",
        "SELECT nationality FROM drivers GROUP BY nationality HAVING count(driverid) = (SELECT max(driver_count) FROM (SELECT count(driverid) AS driver_count FROM drivers GROUP BY nationality));"
      ]
    ]
  },
  {
    "id": 999,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1",
        "SELECT name FROM races WHERE raceid IN (SELECT raceid FROM results WHERE fastestlapspeed = (SELECT min(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL));",
        "SELECT name FROM races WHERE raceid IN (SELECT raceid FROM results WHERE fastestlapspeed = (SELECT min(fastestlapspeed) FROM results WHERE fastestlapspeed IS NOT NULL))",
        "SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY cast(replace(substr(results.fastestlaptime, 3), ':', '') AS REAL) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1017,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'",
        "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488'",
        "SELECT circuits.lat, circuits.lng FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE laptimes.time = '1:29.488'",
        "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT raceid FROM laptimes WHERE TIME = '1:29.488');"
      ]
    ]
  },
  {
    "id": 1020,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
        "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1;",
        "SELECT player_api_id FROM player_attributes WHERE overall_rating = ( SELECT max(overall_rating) FROM player_attributes )",
        "SELECT player_fifa_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1021,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT height, player_name FROM player WHERE height = ( SELECT max(height) FROM player )",
        "SELECT height, player_name FROM player WHERE height = (SELECT max(height) FROM player);",
        "SELECT height, player_name FROM player ORDER BY height DESC LIMIT 1",
        "SELECT player.height, player.player_name FROM player player WHERE player.height = (SELECT max(height) FROM player);"
      ]
    ]
  },
  {
    "id": 1022,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT preferred_foot FROM player_attributes WHERE potential = ( SELECT min(potential) FROM player_attributes )",
        "SELECT preferred_foot FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player_attributes ORDER BY potential ASC LIMIT 1);",
        "SELECT preferred_foot FROM player_attributes ORDER BY potential ASC LIMIT 1",
        "SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);"
      ]
    ]
  },
  {
    "id": 1023,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate LIKE 'low'",
        "SELECT count(*) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';",
        "SELECT count(*) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate = 'low'"
      ]
    ]
  },
  {
    "id": 1024,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN MATCH ON player_attributes.player_api_id = MATCH.home_player_1 OR player_attributes.player_api_id = MATCH.home_player_2 OR player_attributes.player_api_id = MATCH.home_player_3 OR player_attributes.player_api_id = MATCH.home_player_4 OR player_attributes.player_api_id = MATCH.home_player_5 OR player_attributes.player_api_id = MATCH.home_player_6 OR player_attributes.player_api_id = MATCH.home_player_7 OR player_attributes.player_api_id = MATCH.home_player_8 OR player_attributes.player_api_id = MATCH.home_player_9 OR player_attributes.player_api_id = MATCH.home_player_10 OR player_attributes.player_api_id = MATCH.home_player_11 ORDER BY player_attributes.crossing DESC LIMIT 5",
        "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5",
        "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;",
        "SELECT player_attributes.player_api_id FROM player_attributes player_attributes WHERE player_attributes.crossing = (SELECT max(crossing) FROM player_attributes);"
      ]
    ]
  },
  {
    "id": 1025,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) - sum(MATCH.away_team_goal) DESC LIMIT 1",
        "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2015/2016' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) - sum(MATCH.away_team_goal) DESC LIMIT 1",
        "SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) + sum(MATCH.away_team_goal) DESC LIMIT 1",
        "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(match.home_team_goal) - sum(match.away_team_goal) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1026,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1",
        "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(*) ASC LIMIT 1",
        "SELECT team.team_long_name FROM MATCH INNER JOIN team ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1",
        "SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1027,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10",
        "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes ORDER BY penalties DESC LIMIT 10);",
        "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE penalties = (SELECT max(penalties) FROM player_attributes));",
        "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10"
      ]
    ]
  },
  {
    "id": 1124,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
        "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE attacking_work_rate = 'high');",
        "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high'",
        "SELECT player.player_name FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';"
      ]
    ]
  },
  {
    "id": 1132,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
        "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 3",
        "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;",
        "SELECT player_name FROM player ORDER BY height DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1141,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
        "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
        "SELECT team_attributes.buildupplayspeedclass FROM team team JOIN team_attributes team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
        "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'"
      ]
    ]
  },
  {
    "id": 1144,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_attributes.finishing, player_attributes.curve FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
        "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1",
        "SELECT player_attributes.finishing, player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.weight DESC LIMIT 1",
        "SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = ( SELECT max(weight) FROM player )"
      ]
    ]
  },
  {
    "id": 1147,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));",
        "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
        "SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes WHERE overall_rating IS NOT NULL));"
      ]
    ]
  },
  {
    "id": 1149,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M'",
        "SELECT (count(*) filter (WHERE admission = '+') * 100.0 / count(*)) - (count(*) filter (WHERE admission = '-') * 100.0 / count(*)) AS deviation FROM patient WHERE sex = 'M';",
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) * 100 / count(id) FROM patient WHERE sex = 'M'",
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M';"
      ]
    ]
  },
  {
    "id": 1150,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'F'",
        "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND strftime('%Y', patient.birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id",
        "SELECT cast(sum(CASE WHEN sex = 'F' AND strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient",
        "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND strftime('%Y', patient.birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id"
      ]
    ]
  },
  {
    "id": 1151,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE birthday BETWEEN '1930-01-01' AND '1940-12-31'",
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
        "SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE birthday LIKE '1930%'"
      ]
    ]
  },
  {
    "id": 1152,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
        "SELECT cast(count(CASE WHEN patient.admission = '+' THEN patient.id ELSE NULL END) AS REAL) / count(CASE WHEN patient.admission = '-' THEN patient.id ELSE NULL END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
        "SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) AS per FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'",
        "SELECT (SELECT count(*) FROM patient WHERE admission = '-' AND diagnosis = 'SLE') * 1.0 / (SELECT count(*) FROM patient WHERE admission = '+' AND diagnosis = 'SLE') AS ratio;"
      ]
    ]
  },
  {
    "id": 1153,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
        "SELECT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'",
        "SELECT laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = '30609'",
        "SELECT DISTINCT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'"
      ]
    ]
  },
  {
    "id": 1154,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'",
        "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109",
        "SELECT patient.`first date`, patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'",
        "SELECT patient.`first date`, patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109"
      ]
    ]
  },
  {
    "id": 1155,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500",
        "SELECT p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.ldh > 500;",
        "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500",
        "SELECT DISTINCT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500"
      ]
    ]
  },
  {
    "id": 1156,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'",
        "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'",
        "SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rvvt = '+'",
        "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'"
      ]
    ]
  },
  {
    "id": 1157,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
        "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
        "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2",
        "SELECT p.id, p.sex, e.diagnosis FROM patient p JOIN examination e ON p.id = e.id WHERE e.thrombosis = 2;"
      ]
    ]
  },
  {
    "id": 1158,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250",
        "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250",
        "SELECT p.id FROM patient p JOIN laboratory l ON p.id = l.`date` WHERE strftime('%Y', p.birthday) = '1937' AND l.`t-cho` >= 250;",
        "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250"
      ]
    ]
  },
  {
    "id": 1159,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5",
        "SELECT p.id, p.sex, p.diagnosis FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.alb < 3.5;",
        "SELECT patient.id, patient.sex, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb < 3.5",
        "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5"
      ]
    ]
  },
  {
    "id": 1177,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT CASE WHEN `t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04';",
        "SELECT CASE WHEN sum(`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04';",
        "SELECT CASE WHEN sum(laboratory.`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.date = '1995-09-04'",
        "SELECT CASE WHEN sum(laboratory.`t-cho`) < 250 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND laboratory.date = '1995-09-04'"
      ]
    ]
  },
  {
    "id": 1193,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
        "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
        "SELECT count(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P';"
      ]
    ]
  },
  {
    "id": 1197,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT description, diagnosis FROM patient WHERE id = 48473",
        "SELECT description, diagnosis FROM patient WHERE id = 48473;",
        "SELECT `first date`, diagnosis FROM patient WHERE id = 48473",
        "SELECT `description`, diagnosis FROM patient WHERE id = 48473"
      ]
    ]
  },
  {
    "id": 1304,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
        "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
        "SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.glu < 180 AND examination.thrombosis = 0;"
      ]
    ]
  },
  {
    "id": 1305,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
        "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0 AND patient.admission = '+'",
        "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9 AND patient.admission = '+'"
      ]
    ]
  },
  {
    "id": 1306,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
        "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0"
      ]
    ]
  },
  {
    "id": 1308,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL;",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND (examination.diagnosis IS NOT NULL OR examination.symptoms IS NOT NULL);",
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND (examination.diagnosis IS NOT NULL OR examination.symptoms IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 1311,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14",
        "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id IN (SELECT patient FROM examination WHERE thrombosis IN (2, 1)) AND laboratory.pt < 14;",
        "SELECT count(DISTINCT patient.id) FROM patient patient JOIN examination examination ON patient.id = examination.id JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.id IN (SELECT patient FROM examination WHERE thrombosis = 2) AND laboratory.pt < 14;"
      ]
    ]
  },
  {
    "id": 1312,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'",
        "SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders');",
        "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT major_name FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders' )"
      ]
    ]
  },
  {
    "id": 1313,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
        "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'",
        "SELECT count(*) FROM (SELECT member.member_id FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering' GROUP BY member.member_id);"
      ]
    ]
  },
  {
    "id": 1314,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'",
        "SELECT member.first_name, member.last_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
        "SELECT m.first_name, m.last_name FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE mj.department = 'Art and Design Department';",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'"
      ]
    ]
  },
  {
    "id": 1315,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';",
        "SELECT count(DISTINCT member.member_id) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
      ]
    ]
  },
  {
    "id": 1316,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT member.phone FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'",
        "SELECT DISTINCT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'"
      ]
    ]
  },
  {
    "id": 1317,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'",
        "SELECT count(DISTINCT member.member_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE member.t_shirt_size = 'Medium' AND event.event_name = 'Women''s Soccer';",
        "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.t_shirt_size = 'Medium' AND event.event_name = 'Women''s Soccer'",
        "SELECT count(DISTINCT attendance.link_to_member) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id JOIN member member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';"
      ]
    ]
  },
  {
    "id": 1318,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name ORDER BY count(attendance.link_to_member) DESC LIMIT 1",
        "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY attendance.link_to_event ORDER BY count(attendance.link_to_event) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1319,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE POSITION = 'Vice President');",
        "SELECT DISTINCT major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';"
      ]
    ]
  },
  {
    "id": 1320,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
        "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'",
        "SELECT DISTINCT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'"
      ]
    ]
  },
  {
    "id": 1321,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club'",
        "SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE strftime('%Y', EVENT.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND EVENT.type = 'Student_Club'",
        "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club'",
        "SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN EVENT ON attendance.link_to_event = EVENT.event_id WHERE strftime('%Y', EVENT.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND EVENT.type = 'Student_Club'"
      ]
    ]
  },
  {
    "id": 1322,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10",
        "SELECT count(*) FROM (SELECT event.event_id FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10);",
        "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member IN (SELECT member_id FROM member WHERE POSITION = 'Student_Club') AND event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(DISTINCT attendance.link_to_member) > 10;",
        "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN event event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member IN (SELECT member_id FROM member WHERE POSITION = 'Student_Club') AND event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10;"
      ]
    ]
  },
  {
    "id": 1323,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 20",
        "SELECT DISTINCT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 20",
        "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20",
        "SELECT DISTINCT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20"
      ]
    ]
  },
  {
    "id": 1324,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
        "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'",
        "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE substr(event.event_date, 1, 4) = '2020' AND event.type = 'Meeting'",
        "SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020'"
      ]
    ]
  },
  {
    "id": 1325,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense )",
        "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);",
        "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense WHERE cost IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 1326,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT count(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';"
      ]
    ]
  },
  {
    "id": 1327,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
        "SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud'",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'",
        "SELECT member.first_name, member.last_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Laugh Out Loud'"
      ]
    ]
  },
  {
    "id": 1328,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
        "SELECT last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');",
        "SELECT DISTINCT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'",
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies' GROUP BY member.last_name"
      ]
    ]
  },
  {
    "id": 1329,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'",
        "SELECT zip_code.county FROM member member JOIN zip_code zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey';",
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'"
      ]
    ]
  },
  {
    "id": 1330,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
        "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'",
        "SELECT major.college FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';",
        "SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'"
      ]
    ]
  },
  {
    "id": 1331,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'",
        "SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'",
        "SELECT sum(income.amount) FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'"
      ]
    ]
  },
  {
    "id": 1454,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting'",
        "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Meeting'",
        "SELECT sum(expense.cost) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting'",
        "SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Meeting'"
      ]
    ]
  },
  {
    "id": 1456,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member ORDER BY expense.cost DESC LIMIT 5",
        "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 5",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id ORDER BY sum(expense.cost) DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 1457,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
        "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT avg(cost) FROM expense )",
        "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, member.phone HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )",
        "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name, member.phone HAVING sum(expense.cost) > ( SELECT avg(cost) FROM expense )"
      ]
    ]
  },
  {
    "id": 1458,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'",
        "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member'",
        "SELECT (count(*) filter (WHERE zip_code.state = 'New Jersey') * 100.0 / count(*)) - (count(*) filter (WHERE zip_code.state = 'Vermont') * 100.0 / count(*)) AS percentage_difference FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.position = 'Member';",
        "SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'"
      ]
    ]
  },
  {
    "id": 1460,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'",
        "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, veggie tray, supplies'",
        "SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, veggie tray, supplies'"
      ]
    ]
  },
  {
    "id": 1462,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'",
        "SELECT budget.category, budget.amount FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker'",
        "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker'",
        "SELECT DISTINCT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'"
      ]
    ]
  },
  {
    "id": 1463,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'",
        "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food'",
        "SELECT event.event_name FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE budget.category = 'Food'",
        "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'"
      ]
    ]
  },
  {
    "id": 1464,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'",
        "SELECT m.first_name, m.last_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';",
        "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received LIKE '2019-09-09%'",
        "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';"
      ]
    ]
  },
  {
    "id": 1465,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'",
        "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters'",
        "SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');",
        "SELECT DISTINCT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'"
      ]
    ]
  },
  {
    "id": 1488,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT customers.customerid, sum(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1",
        "SELECT customers.customerid, sum(transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1",
        "SELECT customers.customerid, max(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM'",
        "SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1501,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT DISTINCT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date LIKE '201306%');",
        "SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN YEARMONTH ON YEARMONTH.customerid = transactions_1k.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013' AND substr(YEARMONTH.date, 5, 2) = '06'",
        "SELECT DISTINCT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN YEARMONTH ON YEARMONTH.customerid = transactions_1k.customerid WHERE substr(YEARMONTH.date, 1, 4) = '2013' AND substr(YEARMONTH.date, 5, 2) = '06'",
        "SELECT DISTINCT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN YEARMONTH ON transactions_1k.date = YEARMONTH.date WHERE substr(YEARMONTH.date, 5, 2) = '06'"
      ]
    ]
  },
  {
    "id": 1510,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT avg(transactions_1k.price) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'",
        "SELECT avg(price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE'",
        "SELECT avg(price) FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
        "SELECT sum(transactions_1k.price) / count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'"
      ]
    ]
  },
  {
    "id": 1511,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR');",
        "SELECT avg(price) FROM transactions_1k WHERE customerid IN ( SELECT customerid FROM customers WHERE currency = 'EUR' )",
        "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR')",
        "SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR') AND price IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1531,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1",
        "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1",
        "SELECT customers.customerid, customers.currency, avg(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1",
        "SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) DESC LIMIT 1"
      ]
    ]
  }
]