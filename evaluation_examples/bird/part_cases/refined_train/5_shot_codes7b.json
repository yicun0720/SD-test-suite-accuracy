[
  {
    "id": 0,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';",
        "SELECT max(`free meal count (k-12)`) / max(`enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda';",
        "SELECT MAX(`free meal count (k-12)`) / MAX(`enrollment (k-12)`) FROM frpm WHERE `county code` = '01';",
        "SELECT MAX(`free meal count (k-12)`) / MAX(`enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda';"
      ]
    ]
  },
  {
    "id": 1,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE schools.edopsname = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;",
        "SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3;",
        "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` ASC LIMIT 3;",
        "SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm JOIN schools schools ON frpm.cdscode = schools.cdscode WHERE schools.edopsname = 'Continuation School' ORDER BY frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` ASC LIMIT 3;"
      ]
    ]
  },
  {
    "id": 2,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';",
        "SELECT schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno';",
        "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'Fresno' AND schools.county = 'Fresno';",
        "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county name` = 'Fresno' AND frpm.`charter school (y/n)` = 1;"
      ]
    ]
  },
  {
    "id": 3,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT mailstrabr FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;",
        "SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);",
        "SELECT mailstreet FROM schools WHERE cdscode = (SELECT cdscode FROM frpm WHERE `frpm count (k-12)` = (SELECT max(`frpm count (k-12)`) FROM frpm));",
        "SELECT mailstrabr FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT max(frpm.`frpm count (k-12)`) FROM frpm);"
      ]
    ]
  },
  {
    "id": 4,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.fundingtype = 'Directly funded' AND schools.charter = 1;",
        "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.soctype = 'K-12 Schools (Public)';",
        "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.fundingtype =;",
        "SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND frpm.`charter funding type` = 'Directly funded' AND schools.fundingtype = 'Directly funded' AND schools.charter = 1 AND schools.soctype = 'K-12 Schools (Public)' AND frpm.`frpm count (k-12)` > 0;"
      ]
    ]
  },
  {
    "id": 6,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT * FROM schools WHERE schools.numtsttakr > 500 AND schools.magnet = 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 500 AND schools.magnet = 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.magnet = 1 AND satscores.numtsttakr > 500;"
      ]
    ]
  },
  {
    "id": 7,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools ORDER BY numtsttakr DESC LIMIT 1;",
        "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr >= 1500 ORDER BY numtsttakr DESC LIMIT 1);",
        "SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE numtsttakr >= 1500) ORDER BY phone ASC LIMIT 1;",
        "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE numtsttakr = (SELECT MAX(numtsttakr) FROM satscores WHERE rtype = 'S') AND rtype = 'S');"
      ]
    ]
  },
  {
    "id": 9,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
        "SELECT count(DISTINCT schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
        "SELECT count(schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';",
        "SELECT count(DISTINCT schools.cdscode) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1;"
      ]
    ]
  },
  {
    "id": 10,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT sname FROM satscores ORDER BY avgscrread DESC LIMIT 1);",
        "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT sname FROM satscores WHERE rtype = 'D' ORDER BY avgscrread DESC LIMIT 1);",
        "SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = (SELECT max(avgscrread) FROM satscores);",
        "SELECT `frpm count (ages 5-17)` FROM frpm WHERE `school name` = (SELECT `school name` FROM satscores WHERE `avgscrread` = (SELECT max(`avgscrread`) FROM satscores));"
      ]
    ]
  },
  {
    "id": 11,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.cdscode FROM schools WHERE schools.`enrollment (k-12)` + schools.`enrollment (ages 5-17)` > 500;",
        "SELECT satscores.cds FROM satscores WHERE satscores.enroll12 > 500;",
        "SELECT frpm.cdscode FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)` > 500;",
        "SELECT schools.cdscode FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` + frpm.`enrollment (ages 5-17)`) > 500;"
      ]
    ]
  },
  {
    "id": 12,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT max(`free meal count (ages 5-17)`) FROM frpm WHERE `enrollment (ages 5-17)` / `free meal count (ages 5-17)` > 0.3;",
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM frpm WHERE frpm.`enrollment (ages 5-17)` / frpm.`free meal count (ages 5-17)` > 0.3;",
        "SELECT max(frpm.`free meal count (ages 5-17)`) FROM frpm WHERE frpm.`enrollment (ages 5-17)` / frpm.`free meal count (ages 5-17)` >= 0.3;",
        "SELECT max(`free meal count (ages 5-17)`) FROM frpm WHERE `enrollment (ages 5-17)` / `free meal count (ages 5-17)` >= 0.3;"
      ]
    ]
  },
  {
    "id": 13,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;",
        "SELECT phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY (satscores.numge1500 / satscores.numtsttakr) DESC LIMIT 3;",
        "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;",
        "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY (satscores.numge1500 / satscores.numtsttakr) DESC LIMIT 3;"
      ]
    ]
  },
  {
    "id": 14,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT ncesschool FROM frpm ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5;",
        "SELECT ncesschool FROM frpm WHERE `enrollment (ages 5-17)` IS NOT NULL ORDER BY `enrollment (ages 5-17)` DESC LIMIT 5;",
        "SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;",
        "SELECT ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (ages 5-17)` IS NOT NULL ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 15,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;",
        "SELECT dname FROM satscores WHERE rtype = 'D' ORDER BY avgscrread DESC LIMIT 1;",
        "SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread DESC LIMIT 1;",
        "SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' GROUP BY satscores.dname ORDER BY avg(satscores.avgscrread) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 18,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND satscores.numtsttakr <= 250;",
        "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;",
        "SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr <= 250 AND schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded';",
        "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Fresno' AND satscores.numtsttakr <= 250;"
      ]
    ]
  },
  {
    "id": 19,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT phone FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores));",
        "SELECT phone FROM schools WHERE cdscode = (SELECT cds FROM satscores WHERE rtype = 'M' ORDER BY avgscrmath DESC LIMIT 1);",
        "SELECT phone FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE rtype = 'M' ORDER BY avgscrmath DESC LIMIT 1);",
        "SELECT schools.phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);"
      ]
    ]
  },
  {
    "id": 20,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';",
        "SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador';",
        "SELECT count(frpm.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`high grade` = 12 AND frpm.`low grade` = 9 AND schools.county = 'Amador';",
        "SELECT count(schools.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND schools.county = 'Amador';"
      ]
    ]
  },
  {
    "id": 22,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1;",
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
        "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
        "SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.cname = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 23,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname, street FROM schools WHERE enroll12 - frpm.`enrollment (ages 5-17)` > 30;",
        "SELECT sname, street FROM satscores WHERE enroll12 - `enrollment (ages 5-17)` > 30;",
        "SELECT sname, street FROM satscores WHERE enroll12 - enroll517 > 30;",
        "SELECT sname, street FROM schools WHERE enroll12 - enroll512 > 30;"
      ]
    ]
  },
  {
    "id": 24,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;",
        "SELECT sname FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` > 0.1 AND satscores.numge1500 > 0;",
        "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`free meal count (k-12)` > 0.1 AND satscores.numge1500 > 0;",
        "SELECT sname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE (frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)`) > 0.1 AND satscores.numge1500 > 0;"
      ]
    ]
  },
  {
    "id": 27,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';",
        "SELECT sname, avgscrwrite FROM satscores INNER JOIN schools ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2000-01-01';",
        "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.opendate < '2000-01-01';",
        "SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.closeddate > '1991-01-01' OR schools.closeddate < '2001-01-01';"
      ]
    ]
  },
  {
    "id": 28,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');",
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm);",
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT avg((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm) AND frpm.`charter funding type` = 'Locally funded';",
        "SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > (SELECT AVG((frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`)) FROM frpm WHERE frpm.`charter funding type` = 'Locally funded');"
      ]
    ]
  },
  {
    "id": 29,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.opendate FROM schools WHERE schools.edopscode = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;",
        "SELECT schools.opendate FROM schools WHERE schools.edopscode = 'D' ORDER BY schools.enroll12 DESC LIMIT 1;",
        "SELECT schools.opendate FROM schools WHERE schools.edopsname = 'K-12' ORDER BY schools.enroll12 DESC LIMIT 1;",
        "SELECT schools.opendate FROM schools WHERE schools.edopsname = 'K-12' ORDER BY schools.opendate ASC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 30,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 LIMIT 5;",
        "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.enroll12 ASC LIMIT 5;",
        "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.enroll12 LIMIT 5;",
        "SELECT schools.city FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.enroll12 ASC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 31,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D');",
        "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D' AND enroll12 = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D'));",
        "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D') AND frpm.`free meal count (k-12)` = (SELECT max(`free meal count (k-12)`) FROM satscores WHERE rtype = 'D');",
        "SELECT frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)` AS eligible_free_rate FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`enrollment (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D') AND schools.school = (SELECT max(sname) FROM satscores WHERE rtype = 'D') AND frpm.`free meal count (k-12)` = (SELECT max(enroll12) FROM satscores WHERE rtype = 'D');"
      ]
    ]
  },
  {
    "id": 32,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
        "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = 66 ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
        "SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' GROUP BY frpm.cdscode ORDER BY `free meal count (k-12)` DESC LIMIT 5;",
        "SELECT frpm.`frpm count (k-12)` / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' GROUP BY frpm.`frpm count (k-12)` ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 33,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT `school name`, `free meal count (ages 5-17)` FROM frpm WHERE `free meal count (ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;",
        "SELECT `school name`, `free meal count (ages 5-17)` FROM frpm WHERE `free meal count (ages 5-17)` >= 1900 AND `free meal count (ages 5-17)` <= 2000;",
        "SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` >= 1900 AND frpm.`free meal count (ages 5-17)` <= 2000;"
      ]
    ]
  },
  {
    "id": 36,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 DESC LIMIT 3;",
        "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = 3 ORDER BY satscores.numtsttakr DESC LIMIT 1;",
        "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 >= 3 ORDER BY satscores.numge1500 DESC LIMIT 1;",
        "SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 >= 1500 GROUP BY schools.school ORDER BY COUNT(*) DESC LIMIT 3;"
      ]
    ]
  },
  {
    "id": 37,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT street, city, state, zip FROM schools ORDER BY (numge1500 / numtsttakr) ASC LIMIT 1;",
        "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cds = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);",
        "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);",
        "SELECT street, city, state, zip FROM schools INNER JOIN satscores ON schools.cds = satscores.cds WHERE satscores.numge1500 / satscores.numtsttakr = (SELECT Min(satscores.numge1500 / satscores.numtsttakr) FROM satscores);"
      ]
    ]
  },
  {
    "id": 39,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';",
        "SELECT avg(numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%';",
        "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';",
        "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%';"
      ]
    ]
  },
  {
    "id": 41,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.school FROM schools WHERE schools.virtual = 'F' ORDER BY schools.county LIMIT 5;",
        "SELECT satscores.sname FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;",
        "SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;",
        "SELECT frpm.`school name` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 42,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;",
        "SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);",
        "SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores);",
        "SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT MAX(avgscrmath) FROM satscores);"
      ]
    ]
  },
  {
    "id": 43,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT avg(satscores.avgscrmath), schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
        "SELECT avg(satscores.avgscrmath) , schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
        "SELECT avg(satscores.avgscrmath), satscores.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY satscores.county ORDER BY avg(satscores.avgscrmath) ASC LIMIT 1;",
        "SELECT avg(satscores.avgscrmath), satscores.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath = (SELECT min(avgscrmath) FROM satscores) GROUP BY satscores.county;"
      ]
    ]
  },
  {
    "id": 44,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;",
        "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500;",
        "SELECT schools.city, avg(satscores.avgscrwrite) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;",
        "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 GROUP BY schools.city;"
      ]
    ]
  },
  {
    "id": 46,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools';",
        "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC;",
        "SELECT * FROM schools WHERE doc = '31' AND soctype = 'State Special Schools' ORDER BY `enrollment (k-12)` DESC;",
        "SELECT * FROM schools WHERE doc = 31 AND soctype = 'State Special Schools' AND gsoffered = '12' ORDER BY enroll12 DESC;"
      ]
    ]
  },
  {
    "id": 47,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '52' AND frpm.`county code` = '01';",
        "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county code` = '01';",
        "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county name` = 'Alameda';",
        "SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode WHERE schools.doc = '52' AND schools.county = 'Alameda' AND schools.doctype = 'State Special Schools' AND frpm.`county code` = '01' AND frpm.`district code` = 10017;"
      ]
    ]
  },
  {
    "id": 48,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';",
        "SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county code` = '54';",
        "SELECT cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';",
        "SELECT cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county code` = '54';"
      ]
    ]
  },
  {
    "id": 49,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;",
        "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(schools.closeddate) DESC LIMIT 1;",
        "SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county ORDER BY count(schools.closeddate) DESC LIMIT 1;",
        "SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 50,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sname, street FROM schools WHERE cdscode = (SELECT cdscode FROM satscores WHERE rtype = 'D' ORDER BY avgscrmath DESC LIMIT 7);",
        "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE satscores.rtype = 'D') LIMIT 7;",
        "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soctype = 'K-12 Schools (Public)' AND satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE satscores.rtype = 'D') LIMIT 7;",
        "SELECT schools.street FROM schools JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.soctype = 'K-12 Schools (Public)' AND satscores.avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE schools.soctype = 'K-12 Schools (Public)') LIMIT 7;"
      ]
    ]
  },
  {
    "id": 51,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread LIMIT 1;",
        "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores WHERE rtype = 'D' );",
        "SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores );",
        "SELECT schools.mailstreet FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' AND satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores WHERE rtype = 'D' );"
      ]
    ]
  },
  {
    "id": 53,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT sum(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
        "SELECT count(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
        "SELECT sum(satscores.numtsttakr) FROM schools schools JOIN satscores satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';",
        "SELECT sum(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';"
      ]
    ]
  },
  {
    "id": 55,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';",
        "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) FROM schools WHERE schools.state = 'CA';",
        "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.cdscode ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.cdscode ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';",
        "SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.school ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.school ELSE NULL END) AS REAL) AS Ratio FROM schools WHERE schools.mailstate = 'CA';"
      ]
    ]
  },
  {
    "id": 58,
    "db_id": "california_schools",
    "infer_predictions": [
      [
        "SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';",
        "SELECT schools.school, schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';",
        "SELECT schools.phone, schools.ext, schools.school FROM schools WHERE schools.zip = '95203-3704';",
        "SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = 95203-3704;"
      ]
    ]
  },
  {
    "id": 98,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE date = '1997-01-01' AND status = 'A') ORDER BY amount ASC LIMIT 1;",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;",
        "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount LIMIT 1;"
      ]
    ]
  },
  {
    "id": 99,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account_id FROM loan WHERE duration > 12 ORDER BY amount DESC LIMIT 1;",
        "SELECT account_id FROM loan WHERE duration > 12 GROUP BY account_id ORDER BY sum(amount) DESC LIMIT 1;",
        "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 12) AND date LIKE '1993%' ORDER BY amount DESC LIMIT 1;",
        "SELECT * FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE duration > 12) AND date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY amount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 101,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT * FROM account WHERE date = '1995-01-01';",
        "SELECT account.account_id FROM account WHERE account.date = '1995-01-01';",
        "SELECT account.account_id FROM account WHERE account.date = '1995-03-24';",
        "SELECT * FROM account WHERE date = '1995-01-01' ORDER BY date ASC;"
      ]
    ]
  },
  {
    "id": 102,
    "db_id": "financial",
    "infer_predictions": [
      [
        "SELECT account_id FROM account WHERE date < '1997-01-01' AND amount > 3000;",
        "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND amount > 3000;",
        "SELECT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);",
        "SELECT DISTINCT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000);"
      ]
    ]
  },
  {
    "id": 195,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;",
        "SELECT bond_type FROM bond GROUP BY bond_type HAVING count(*) = (SELECT max(total) FROM (SELECT count(*) AS total FROM bond GROUP BY bond_type) t2);",
        "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(*) DESC LIMIT 1;",
        "SELECT bond.bond_type FROM bond GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 205,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';",
        "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';",
        "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'c';",
        "SELECT molecule.molecule_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';"
      ]
    ]
  },
  {
    "id": 206,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';",
        "SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR004_8_9';",
        "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR004_8_9';",
        "SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';"
      ]
    ]
  },
  {
    "id": 207,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );",
        "SELECT DISTINCT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '=' ) );",
        "SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';",
        "SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));"
      ]
    ]
  },
  {
    "id": 214,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element != 'sn';",
        "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';",
        "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';",
        "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' AND molecule.label = '+';"
      ]
    ]
  },
  {
    "id": 215,
    "db_id": "toxicology",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';",
        "SELECT count(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';",
        "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND molecule.label = '+';",
        "SELECT count(DISTINCT atom.atom_id) FROM atom atom JOIN bond bond ON atom.atom_id = bond.atom_id JOIN molecule molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND bond.bond_type = '-' AND molecule.label = '+' AND atom.element = 's';"
      ]
    ]
  },
  {
    "id": 343,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;",
        "SELECT cards.name FROM cards WHERE cards.edhrecrank < 100 AND cards.frameversion = 2015;",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.id < 100 AND foreign_data.frameversion = 2015;",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.id < 100 AND cards.frameversion = 2015;"
      ]
    ]
  },
  {
    "id": 351,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;",
        "SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND foreign_data.isalternative = 1;",
        "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND foreign_data.isalternative = '1';"
      ]
    ]
  },
  {
    "id": 354,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT count(type) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT count(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';",
        "SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';"
      ]
    ]
  },
  {
    "id": 360,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT language FROM set_translations WHERE setcode = (SELECT setcode FROM cards WHERE name = 'Angel of Mercy');",
        "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Angel of Mercy';",
        "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.uuid = (SELECT cards.uuid FROM cards WHERE cards.name = 'Angel of Mercy');",
        "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Angel of Mercy';"
      ]
    ]
  },
  {
    "id": 367,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';",
        "SELECT cards.artist FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Phyrexian';",
        "SELECT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';",
        "SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';"
      ]
    ]
  },
  {
    "id": 369,
    "db_id": "card_games",
    "infer_predictions": [
      [
        "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;",
        "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'German' AND cards.isreprint = 1;",
        "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'German' AND cards.isreprint = 1 AND set_translations.language = 'German';",
        "SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'German' AND cards.isreprint = 1;"
      ]
    ]
  },
  {
    "id": 531,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;",
        "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 2;",
        "SELECT users.displayname FROM users WHERE users.displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY users.reputation DESC LIMIT 1;",
        "SELECT users.displayname FROM users WHERE users.displayname IN ('Harlan', '<NAME>') ORDER BY users.reputation DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 532,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users WHERE year(users.creationdate) = 2011;",
        "SELECT displayname FROM users WHERE year(creationdate) = 2011;",
        "SELECT users.displayname FROM users WHERE year(creationdate) = 2011;",
        "SELECT users.displayname FROM users WHERE YEAR(users.creationdate) = 2011;"
      ]
    ]
  },
  {
    "id": 533,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01';",
        "SELECT count(*) FROM users WHERE lastaccessdate > '2014-09-01';",
        "SELECT count(users.id) FROM users WHERE lastaccessdate > '2014-09-01';",
        "SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01';"
      ]
    ]
  },
  {
    "id": 534,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;",
        "SELECT displayname FROM users ORDER BY views DESC LIMIT 1;",
        "SELECT users.displayname FROM users WHERE users.views = (SELECT max(users.views) FROM users);",
        "SELECT users.displayname FROM users WHERE users.id IN (SELECT users.id FROM users ORDER BY users.views DESC LIMIT 1);"
      ]
    ]
  },
  {
    "id": 535,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;",
        "SELECT count(*) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;",
        "SELECT count(users.id) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;",
        "SELECT count(users.upvotes) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;"
      ]
    ]
  },
  {
    "id": 536,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE views > 10 AND year(creationdate) > 2013;",
        "SELECT count(users.id) FROM users WHERE users.views > 10 AND year(users.creationdate) > 2013;",
        "SELECT count(id) FROM users WHERE views > 10 AND year (creationdate) > 2013;",
        "SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 10 AND year(users.creationdate) > 2013;"
      ]
    ]
  },
  {
    "id": 537,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
        "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';"
      ]
    ]
  },
  {
    "id": 538,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT DISTINCT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT posts.title FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
        "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\";"
      ]
    ]
  },
  {
    "id": 539,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
        "SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts';",
        "SELECT users.displayname FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';",
        "SELECT displayname FROM users WHERE id = (SELECT owneruserid FROM posts WHERE title = 'Eliciting priors from experts');"
      ]
    ]
  },
  {
    "id": 540,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\" ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' AND posts.viewcount = (SELECT max(viewcount) FROM posts);"
      ]
    ]
  },
  {
    "id": 541,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM posts posts INNER JOIN users users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT users.displayname FROM posts posts JOIN users users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT users.displayname FROM users users JOIN posts posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT users.displayname FROM posts posts INNER JOIN users users ON posts.owneruserid = users.id GROUP BY users.displayname ORDER BY posts.favoritecount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 542,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';",
        "SELECT sum(comments.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'csgillespie';",
        "SELECT sum(posts.commentcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT sum(posts.commentcount) AS total_comments FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';"
      ]
    ]
  },
  {
    "id": 543,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.answercount FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') ORDER BY posts.answercount DESC LIMIT 1;",
        "SELECT posts.answercount FROM posts WHERE posts.ownerdisplayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1;",
        "SELECT Max(posts.answercount) FROM posts WHERE posts.owneruserid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
        "SELECT Max(posts.answercount) FROM posts WHERE posts.ownerdisplayname = 'csgillespie';"
      ]
    ]
  },
  {
    "id": 544,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';",
        "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posthistory.id DESC LIMIT 1;",
        "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE posts.title = 'Examples for teaching: Correlation does not mean causation' ORDER BY posthistory.id DESC LIMIT 1;",
        "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';"
      ]
    ]
  },
  {
    "id": 545,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM posts WHERE owneruserid = -1 AND parentid IS NULL;",
        "SELECT count(posts.id) FROM posts WHERE posts.owneruserid = -1 AND posts.parentid IS NULL;",
        "SELECT count(*) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL;",
        "SELECT count(posts.id) FROM posts WHERE posts.owneruserid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') AND posts.parentid IS NULL;"
      ]
    ]
  },
  {
    "id": 546,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;",
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT Null;",
        "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.closeddate IS NOT NULL;",
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE closeddate IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 547,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;",
        "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20;"
      ]
    ]
  },
  {
    "id": 548,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';",
        "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
        "SELECT users.location FROM users INNER JOIN posts ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';",
        "SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = \"Eliciting priors from experts\";"
      ]
    ]
  },
  {
    "id": 549,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT body FROM posts WHERE id = (SELECT excerptpostid FROM tags WHERE tagname = 'bayesian');",
        "SELECT body FROM posts WHERE id = tags.excerptpostid;",
        "SELECT body FROM posts WHERE id = excerptpostid;",
        "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';"
      ]
    ]
  },
  {
    "id": 550,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
        "SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1;",
        "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid GROUP BY tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
        "SELECT p.body FROM posts p JOIN tags t ON p.id = t.excerptpostid GROUP BY t.excerptpostid ORDER BY t.count DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 551,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT count(DISTINCT badges.id) FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT count(DISTINCT id) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');",
        "SELECT count(DISTINCT badges.id) FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');"
      ]
    ]
  },
  {
    "id": 552,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');",
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie');"
      ]
    ]
  },
  {
    "id": 553,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';",
        "SELECT count(badges.id) FROM badges WHERE badges.userid = 2011 AND strftime('%Y', badges.date) = '2011';",
        "SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND YEAR (badges.date) = 2011;",
        "SELECT count(badges.id) FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'csgillespie') AND strftime('%Y', badges.date) = '2011';"
      ]
    ]
  },
  {
    "id": 554,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1;",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1;",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1;",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.id) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 555,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT avg(comments.score) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';",
        "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = \"csgillespie\";"
      ]
    ]
  },
  {
    "id": 556,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT avg(badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200;",
        "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY b.userid);",
        "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY u.id);",
        "SELECT avg(badge_count) FROM (SELECT count(b.id) AS badge_count FROM badges b JOIN users u ON b.userid = u.id WHERE u.views > 200 GROUP BY u.displayname);"
      ]
    ]
  },
  {
    "id": 557,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;",
        "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 5;",
        "SELECT cast(sum(CASE WHEN posts.score > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;",
        "SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 5;"
      ]
    ]
  },
  {
    "id": 558,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';",
        "SELECT count(*) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';",
        "SELECT count(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';",
        "SELECT count(votes.id) FROM votes WHERE votes.creationdate = '2010-07-19' AND votes.userid = 58;"
      ]
    ]
  },
  {
    "id": 559,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;",
        "SELECT creationdate FROM votes WHERE id = (SELECT Max(count(id)) FROM votes);",
        "SELECT creationdate FROM votes WHERE id = (SELECT max(count(id)) FROM votes);",
        "SELECT creationdate FROM votes GROUP BY creationdate HAVING Max(count(id));"
      ]
    ]
  },
  {
    "id": 560,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(badges.id) FROM badges WHERE badges.name = 'Revival';",
        "SELECT count(*) FROM badges WHERE name = 'Revival';",
        "SELECT count(*) FROM badges WHERE badges.name = 'Revival';",
        "SELECT COUNT(badges.id) FROM badges WHERE badges.name = 'Revival';"
      ]
    ]
  },
  {
    "id": 561,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid ORDER BY comments.score DESC LIMIT 1;",
        "SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1;",
        "SELECT p.title FROM posts p JOIN comments c ON p.id = c.postid ORDER BY c.score DESC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = (SELECT Max(comments.score) FROM comments);"
      ]
    ]
  },
  {
    "id": 562,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
        "SELECT count(DISTINCT comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
        "SELECT count(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;",
        "SELECT count(DISTINCT comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;"
      ]
    ]
  },
  {
    "id": 563,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';",
        "SELECT sum(posts.favoritecount) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';",
        "SELECT posts.favoritecount FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = 3025 AND comments.creationdate = '2014/4/23 20:29:39.0';",
        "SELECT sum(posts.favoritecount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';"
      ]
    ]
  },
  {
    "id": 564,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE postid = 107829 AND commentcount = 1;",
        "SELECT text FROM comments WHERE postid = 107829 AND commentcount = '1';",
        "SELECT text FROM comments WHERE postid = 107829 AND id = 1;",
        "SELECT comments.text FROM comments WHERE comments.postid = 107829 AND comments.commentcount = 1;"
      ]
    ]
  },
  {
    "id": 565,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = 23853;",
        "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END well_finished FROM POSTS WHERE id = 23853;",
        "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END wellfinished FROM POSTS WHERE id = '23853';",
        "SELECT CASE WHEN closeddate IS NULL THEN 'NOT well-finished' WHEN closeddate IS NOT NULL THEN 'well-finished' END well_finished FROM POSTS WHERE id = '23853';"
      ]
    ]
  },
  {
    "id": 566,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041';",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = '65041';",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041;",
        "SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 65041;"
      ]
    ]
  },
  {
    "id": 567,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';",
        "SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';",
        "SELECT count(posts.id) FROM users INNER JOIN posts ON users.displayname = posts.ownerdisplayname WHERE users.displayname = 'Tiago Pasqualini';",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';"
      ]
    ]
  },
  {
    "id": 568,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = '6347';",
        "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347';",
        "SELECT users.displayname FROM users INNER JOIN votes ON votes.userid = users.id WHERE votes.id = '6347';",
        "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347;"
      ]
    ]
  },
  {
    "id": 569,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT votes.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%';",
        "SELECT COUNT(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%';",
        "SELECT COUNT(*) FROM votes WHERE postid IN (SELECT id FROM posts WHERE title LIKE '%data visualization%');",
        "SELECT COUNT(*) FROM votes WHERE postid IN ( SELECT id FROM posts WHERE title LIKE '%data visualization%' );"
      ]
    ]
  },
  {
    "id": 570,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT badges.name FROM users INNER JOIN badges ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';",
        "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms');"
      ]
    ]
  },
  {
    "id": 572,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT views FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "SELECT posts.viewcount FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'rapidminer' AND posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"
      ]
    ]
  },
  {
    "id": 573,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE score = 17;",
        "SELECT comments.text FROM comments WHERE comments.score = 17;",
        "SELECT * FROM comments WHERE score = 17;",
        "SELECT text FROM comments WHERE comments.score = 17;"
      ]
    ]
  },
  {
    "id": 575,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'SilentGhost';",
        "SELECT badges.name FROM users JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost';",
        "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'SilentGhost');"
      ]
    ]
  },
  {
    "id": 576,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93';",
        "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%thank you user93%';",
        "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';",
        "SELECT users.displayname FROM comments JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'thank you user93';"
      ]
    ]
  },
  {
    "id": 577,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE userid = ( SELECT id FROM users WHERE displayname = 'A Lion' );",
        "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion';",
        "SELECT text FROM comments WHERE userid = (SELECT id FROM users WHERE displayname = 'A Lion');",
        "SELECT comments.text FROM comments WHERE comments.userid = ( SELECT users.id FROM users WHERE users.displayname = 'A Lion' );"
      ]
    ]
  },
  {
    "id": 578,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
        "SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
        "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';",
        "SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';"
      ]
    ]
  },
  {
    "id": 580,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer';",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer';",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10;",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer' LIMIT 10;"
      ]
    ]
  },
  {
    "id": 583,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';",
        "SELECT SUM(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';",
        "SELECT SUM(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl;",
        "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl;"
      ]
    ]
  },
  {
    "id": 585,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';",
        "SELECT SUM(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';",
        "SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%';",
        "SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON posts.id = votes.postid WHERE posts.title LIKE '%data%';"
      ]
    ]
  },
  {
    "id": 588,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(comments.id) FROM comments WHERE comments.userid = 13;",
        "SELECT COUNT(comments.id) FROM comments WHERE comments.userid = 13;",
        "SELECT COUNT(*) FROM comments WHERE comments.userid = 13;",
        "SELECT count(comments.text) FROM comments WHERE comments.userid = 13;"
      ]
    ]
  },
  {
    "id": 589,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;",
        "SELECT users.id FROM users WHERE users.reputation = (SELECT max(reputation) FROM users);",
        "SELECT id FROM users WHERE reputation = (SELECT max(reputation) FROM users);",
        "SELECT id FROM users ORDER BY reputation DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 590,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;",
        "SELECT users.id FROM users WHERE users.views = (SELECT min(users.views) FROM users);",
        "SELECT users.id FROM users WHERE users.views = (SELECT Min(users.views) FROM users);",
        "SELECT users.id FROM users WHERE users.views = (SELECT min(views) FROM users);"
      ]
    ]
  },
  {
    "id": 591,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(badges.date) = 2011;",
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Supporter' AND year(date) = 2011;",
        "SELECT count(id) FROM badges WHERE name = 'Supporter' AND year(date) = 2011;",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE year(badges.date) = 2011 AND badges.name = 'Supporter';"
      ]
    ]
  },
  {
    "id": 592,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(userid) FROM badges WHERE count(name) > 5;",
        "SELECT count(name) FROM badges WHERE count > 5;",
        "SELECT count(*) FROM badges WHERE count > 5;",
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE count(name) > 5;"
      ]
    ]
  },
  {
    "id": 594,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;",
        "SELECT users.id, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1;",
        "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;",
        "SELECT posts.owneruserid, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = 1;"
      ]
    ]
  },
  {
    "id": 596,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(*) DESC LIMIT 1;",
        "SELECT badges.name FROM comments INNER JOIN badges ON comments.userid = badges.userid GROUP BY comments.userid ORDER BY count(*) DESC LIMIT 1;",
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1;",
        "SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id HAVING count(*) = (SELECT max(comment_count) FROM (SELECT count(*) AS comment_count FROM comments GROUP BY comments.userid));"
      ]
    ]
  },
  {
    "id": 597,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Teacher' AND users.location = 'India';",
        "SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';",
        "SELECT count(DISTINCT users.id) FROM badges badges JOIN users users ON badges.userid = users.id WHERE users.location = 'India';",
        "SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'India';"
      ]
    ]
  },
  {
    "id": 599,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;",
        "SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;",
        "SELECT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;",
        "SELECT DISTINCT posthistory.posthistorytypeid, count(DISTINCT posthistory.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;"
      ]
    ]
  },
  {
    "id": 605,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';",
        "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Announcer';",
        "SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';",
        "SELECT count(badges.name) FROM badges WHERE badges.name = 'Announcer';"
      ]
    ]
  },
  {
    "id": 606,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT badges.name FROM badges WHERE date = '2010-07-19 19:39:08.0';"
      ]
    ]
  },
  {
    "id": 607,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM comments WHERE score > 60;",
        "SELECT count(score) FROM comments WHERE score > 60;",
        "SELECT COUNT(*) FROM comments WHERE score > 60;",
        "SELECT count(comments.score) FROM comments WHERE comments.score > 60;"
      ]
    ]
  },
  {
    "id": 608,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0';",
        "SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:16:14.0';",
        "SELECT text FROM comments WHERE comments.creationdate = '2010-07-19 19:16:14.0';",
        "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0';"
      ]
    ]
  },
  {
    "id": 609,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM posts WHERE score = 10;",
        "SELECT count(*) FROM tags WHERE score = 10;",
        "SELECT count(DISTINCT posts.id) FROM posts posts JOIN tags tags ON posts.id = tags.id WHERE tags.tagname = 'scores' AND posts.score = 10;",
        "SELECT count(DISTINCT posts.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE comments.score = 10;"
      ]
    ]
  },
  {
    "id": 610,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
        "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users );",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users );",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(reputation) FROM users );"
      ]
    ]
  },
  {
    "id": 611,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation FROM users JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT u.reputation FROM users u JOIN badges b ON u.id = b.userid WHERE b.date = '2010-07-19 19:39:08.0';",
        "SELECT users.reputation FROM badges JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT DISTINCT users.reputation FROM badges JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';"
      ]
    ]
  },
  {
    "id": 612,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'Pierre');",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';",
        "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.displayname = 'Pierre');",
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';"
      ]
    ]
  },
  {
    "id": 613,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';",
        "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = \"Rochester, NY\";",
        "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location LIKE 'Rochester, NY';",
        "SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY';"
      ]
    ]
  },
  {
    "id": 614,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id;",
        "SELECT cast(count(users.displayname = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';",
        "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid;",
        "SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';"
      ]
    ]
  },
  {
    "id": 615,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
        "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(users.id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;",
        "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' GROUP BY users.displayname HAVING users.age BETWEEN 13 AND 18;",
        "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(userid) FROM badges WHERE name = 'Organizer' ), users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer' AND users.age BETWEEN 13 AND 18;"
      ]
    ]
  },
  {
    "id": 616,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.score FROM comments WHERE comments.creationdate = '2010-07-19 19:19:56.0';",
        "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0';",
        "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creationdate = '2010-07-19 19:19:56.0';",
        "SELECT comments.score FROM comments INNER JOIN posts ON posts.id = comments.postid WHERE posts.creationdate = '2010-07-19 19:19:56.0';"
      ]
    ]
  },
  {
    "id": 617,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT comments.text FROM comments WHERE comments.creationdate = '2010-07-19 19:37:33.0';",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2010-07-19 19:37:33.0';",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33.0';",
        "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33';"
      ]
    ]
  },
  {
    "id": 618,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';",
        "SELECT users.age FROM users INNER JOIN badges ON badges.userid = users.id WHERE users.location = 'Vienna, Austria';",
        "SELECT users.age FROM users WHERE users.location = 'Vienna, Austria' AND users.id IN (SELECT badges.userid FROM badges);",
        "SELECT users.age FROM users WHERE users.location = 'Vienna, Austria' AND users.id IN (SELECT badges.userid FROM badges WHERE badges.name = 'Teacher');"
      ]
    ]
  },
  {
    "id": 619,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
        "SELECT count(badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
        "SELECT count(DISTINCT badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;",
        "SELECT count(badges.userid) FROM badges JOIN users ON badges.userid = users.id WHERE users.age BETWEEN 19 AND 65 AND badges.name = 'Supporter';"
      ]
    ]
  },
  {
    "id": 620,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';",
        "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08';",
        "SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';",
        "SELECT COUNT(users.views) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';"
      ]
    ]
  },
  {
    "id": 621,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);",
        "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.reputation = (SELECT min(reputation) FROM users);",
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY users.reputation ASC LIMIT 1;",
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.reputation = (SELECT min(reputation) FROM users);"
      ]
    ]
  },
  {
    "id": 622,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';",
        "SELECT b.name FROM badges b JOIN users u ON b.userid = u.id WHERE u.displayname = 'Sharpie';",
        "SELECT badges.name FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie';",
        "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.displayname = 'Sharpie');"
      ]
    ]
  },
  {
    "id": 623,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.age > 65 AND badges.name = 'Supporter';",
        "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';",
        "SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age > 65;",
        "SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65;"
      ]
    ]
  },
  {
    "id": 624,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users WHERE users.id = 30;",
        "SELECT displayname FROM users WHERE id = 30;",
        "SELECT users.displayname FROM users WHERE id = 30;",
        "SELECT users.displayname AS name FROM users WHERE users.id = 30;"
      ]
    ]
  },
  {
    "id": 625,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(users.id) FROM users WHERE users.location = 'New York';",
        "SELECT count(id) FROM users WHERE location = 'New York';",
        "SELECT count(*) FROM users WHERE location = 'New York';",
        "SELECT count(users.location) FROM users WHERE users.location = 'New York';"
      ]
    ]
  },
  {
    "id": 626,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2010;",
        "SELECT count(votes.id) FROM votes WHERE YEAR(votes.creationdate) = 2010;",
        "SELECT count(*) FROM votes WHERE YEAR(votes.creationdate) = 2010;",
        "SELECT count(*) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';"
      ]
    ]
  },
  {
    "id": 627,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;",
        "SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65;",
        "SELECT count(id) FROM users WHERE age BETWEEN 19 and 65;",
        "SELECT count(users.id) FROM users WHERE users.age BETWEEN 19 AND 65;"
      ]
    ]
  },
  {
    "id": 629,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) FROM votes;",
        "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) FROM votes;",
        "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / count(*) FROM votes WHERE votes.creationdate IS NOT NULL;",
        "SELECT cast(sum(CASE WHEN YEAR(votes.creationdate) = 2010 THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN YEAR(votes.creationdate) = 2011 THEN 1 ELSE 0 END) AS REAL) AS ratio FROM votes;"
      ]
    ]
  },
  {
    "id": 635,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Matt Parker' AND votes > 4;",
        "SELECT count(postid) FROM votes WHERE postid > 4 AND userid = (SELECT id FROM users WHERE displayname = 'Matt Parker');",
        "SELECT count(id) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Matt Parker') AND votes > 4;",
        "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4;"
      ]
    ]
  },
  {
    "id": 636,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM comments WHERE userid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan') AND score < 60;",
        "SELECT count(*) FROM comments WHERE postid IN (SELECT id FROM posts WHERE owneruserid IN (SELECT id FROM users WHERE displayname = 'Neil McGuigan')) AND score < 60;",
        "SELECT count(*) FROM posts JOIN comments ON posts.id = comments.postid JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;",
        "SELECT count(*) FROM posts JOIN comments ON posts.id = comments.postid JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND posts.score < 60;"
      ]
    ]
  },
  {
    "id": 638,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';",
        "SELECT DISTINCT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';",
        "SELECT DISTINCT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer';"
      ]
    ]
  },
  {
    "id": 641,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM badges WHERE name = 'Commentator' AND year(date) = 2014;",
        "SELECT count(*) FROM badges WHERE year(date) = 2014 AND name = 'Commentator';",
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE year(badges.date) = 2014 AND badges.name = 'Commentator';",
        "SELECT count(badges.name) FROM badges WHERE badges.name = 'Commentator' AND year(badges.date) = 2014;"
      ]
    ]
  },
  {
    "id": 643,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );",
        "SELECT users.displayname , users.age FROM users ORDER BY users.views DESC LIMIT 1;",
        "SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT MAX(views) FROM users );",
        "SELECT users.displayname , users.age FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE posthistory.views = ( SELECT max(views) FROM posthistory );"
      ]
    ]
  },
  {
    "id": 644,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';",
        "SELECT posthistory.lasteditdate, posthistory.lasteditoruserid FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Detecting a given face in a database of facial images';",
        "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';",
        "SELECT posthistory.lasteditdate, posthistory.lasteditoruserid FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Detecting a given face in a database of facial images';"
      ]
    ]
  },
  {
    "id": 645,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM comments WHERE userid = 13 AND score < 60;",
        "SELECT count(comments.score) FROM comments WHERE comments.userid = 13 AND comments.score < 60;",
        "SELECT count(*) FROM comments WHERE score < 60 AND userid = 13;",
        "SELECT count(*) FROM comments WHERE comments.userid = 13 AND comments.score < 60;"
      ]
    ]
  },
  {
    "id": 647,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;",
        "SELECT badges.name FROM badges WHERE badges.userid IN (SELECT users.id FROM users WHERE users.location = 'North Pole') AND year(badges.date) = 2011;",
        "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;",
        "SELECT badges.name FROM badges WHERE badges.userid = (SELECT users.id FROM users WHERE users.location = 'North Pole') AND year(badges.date) = 2011;"
      ]
    ]
  },
  {
    "id": 650,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT lastaccessdate , location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');",
        "SELECT lastaccessdate, location FROM users WHERE id IN (SELECT userid FROM badges WHERE name = 'Outliers');",
        "SELECT users.lastaccessdate , users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers';",
        "SELECT users.lastaccessdate , users.location FROM users INNER JOIN badges ON badges.userid = users.id WHERE badges.name = 'Outliers';"
      ]
    ]
  },
  {
    "id": 653,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT posts.ownerdisplayname FROM posts WHERE posts.viewcount = (SELECT MAX(posts.viewcount) FROM posts);",
        "SELECT posts.ownerdisplayname FROM posts WHERE posts.viewcount = (SELECT MAX(viewcount) FROM posts);"
      ]
    ]
  },
  {
    "id": 654,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';",
        "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';",
        "SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tagname = 'hypothesis-testing';",
        "SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tagname = 'hypothesis-testing';"
      ]
    ]
  },
  {
    "id": 656,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL ORDER BY posts.score DESC LIMIT 1;",
        "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid IS NOT NULL);",
        "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid = posts.id);",
        "SELECT users.displayname FROM posts JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL AND posts.score = (SELECT max(score) FROM posts WHERE parentid = posts.parentid);"
      ]
    ]
  },
  {
    "id": 657,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;",
        "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;",
        "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votetypeid = 8 AND votes.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);",
        "SELECT users.displayname, users.websiteurl FROM users JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 AND votes.bountyamount = (SELECT MAX(bountyamount) FROM votes WHERE votetypeid = 8);"
      ]
    ]
  },
  {
    "id": 658,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.title FROM posts ORDER BY posts.viewcount DESC LIMIT 5;",
        "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;",
        "SELECT posts.title FROM posts ORDER BY viewcount DESC LIMIT 5;",
        "SELECT posts.title FROM posts WHERE posts.viewcount IN (SELECT max(viewcount) FROM posts) ORDER BY posts.viewcount DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 659,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM tags WHERE count BETWEEN 5000 and 7000;",
        "SELECT count(*) FROM tags WHERE count BETWEEN 5000 AND 7000;",
        "SELECT count(tags.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.id BETWEEN 5000 AND 7000;",
        "SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.id BETWEEN 5000 AND 7000;"
      ]
    ]
  },
  {
    "id": 660,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;",
        "SELECT owneruserid FROM posts WHERE favoritecount = (SELECT MAX(favoritecount) FROM posts);",
        "SELECT posts.owneruserid FROM posts WHERE posts.favoritecount = (SELECT MAX(favoritecount) FROM posts);"
      ]
    ]
  },
  {
    "id": 661,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT age FROM users ORDER BY reputation DESC LIMIT 1;",
        "SELECT age FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);",
        "SELECT age FROM users WHERE reputation = (SELECT max(reputation) FROM users);",
        "SELECT displayname FROM users WHERE reputation = (SELECT MAX(reputation) FROM users);"
      ]
    ]
  },
  {
    "id": 662,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;",
        "SELECT count(*) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(posts.creationdate) = 2011 AND votes.bountyamount = 50;",
        "SELECT count(*) FROM votes WHERE YEAR(votes.creationdate) = 2011 AND votes.bountyamount = 50;",
        "SELECT count(votes.id) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE YEAR(posts.creationdate) = 2011 AND votes.bountyamount = 50;"
      ]
    ]
  },
  {
    "id": 663,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id FROM users WHERE age = (SELECT min(age) FROM users);",
        "SELECT id FROM users WHERE age = ( SELECT min(age) FROM users );",
        "SELECT id FROM users WHERE age = (SELECT MIN(age) FROM users);",
        "SELECT users.id FROM users WHERE age = (SELECT min(age) FROM users);"
      ]
    ]
  },
  {
    "id": 664,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT SUM(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';",
        "SELECT SUM(score) FROM posts WHERE posts.lasactivitydate LIKE '2010-07-19%';",
        "SELECT sum(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%';",
        "SELECT SUM(score) FROM posts WHERE posts.lasactivitydate LIKE '2010-07-19%' GROUP BY posts.id;"
      ]
    ]
  },
  {
    "id": 665,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', posts.creationdate) = '2010';",
        "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';",
        "SELECT cast(sum(postlinks.id) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', postlinks.creationdate) = '2010';",
        "SELECT cast(sum(postlinks.linktypeid) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount <= 2 AND strftime('%Y', posts.creationdate) = '2010';"
      ]
    ]
  },
  {
    "id": 666,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT posts.id FROM posts JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY sum(votes.bountyamount) DESC LIMIT 1;",
        "SELECT posts.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY posts.favoritecount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 667,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid ORDER BY postlinks.creationdate ASC LIMIT 1;",
        "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.creationdate = (SELECT min(creationdate) FROM postlinks);"
      ]
    ]
  },
  {
    "id": 668,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1;",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY badges.userid ORDER BY count(badges.name) DESC LIMIT 1;",
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 669,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT MIN(creationdate) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl';",
        "SELECT min(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';",
        "SELECT MIN(votes.creationdate) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl';",
        "SELECT MIN(creationdate) FROM votes WHERE votes.userid = (SELECT users.id FROM users WHERE users.displayname = 'chl');"
      ]
    ]
  },
  {
    "id": 670,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT MIN(creaiondate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);",
        "SELECT MIN(creationdate) FROM posts WHERE owneruserid = (SELECT MIN(id) FROM users);",
        "SELECT posthistory.creationdate FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users) AND posthistory.creationdate = (SELECT min(creationdate) FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users));",
        "SELECT posthistory.creationdate FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users) AND posthistory.postid = (SELECT min(postid) FROM posthistory posthistory JOIN users users ON posthistory.userid = users.id WHERE users.age = (SELECT min(age) FROM users));"
      ]
    ]
  },
  {
    "id": 671,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
        "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
        "SELECT users.displayname FROM users INNER JOIN badges ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;",
        "SELECT users.displayname FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;"
      ]
    ]
  },
  {
    "id": 672,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM users WHERE location = 'United Kingdom' AND favoritecount >= 4;",
        "SELECT count(DISTINCT users.id) FROM users WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;",
        "SELECT count(DISTINCT users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount >= 4 AND users.location = 'United Kingdom';"
      ]
    ]
  },
  {
    "id": 673,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT max(age) FROM users));",
        "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT MAX(age) FROM users);",
        "SELECT AVG(postid) FROM votes WHERE userid = (SELECT max(age) FROM users);",
        "SELECT AVG(postid) FROM votes WHERE userid IN (SELECT id FROM users WHERE age = (SELECT MAX(age) FROM users));"
      ]
    ]
  },
  {
    "id": 674,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
        "SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;",
        "SELECT users.displayname FROM users users WHERE users.reputation = ( SELECT max(reputation) FROM users );",
        "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT MAX(reputation) FROM users );"
      ]
    ]
  },
  {
    "id": 675,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;",
        "SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000;",
        "SELECT count(reputation) FROM users WHERE reputation > 2000 AND views > 1000;",
        "SELECT count(users.id) FROM users WHERE users.reputation > 2000 AND users.views > 1000;"
      ]
    ]
  },
  {
    "id": 676,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;",
        "SELECT users.displayname FROM users WHERE users.age BETWEEN 19 and 65;",
        "SELECT users.displayname FROM users WHERE users.age >= 19 AND users.age <= 65;",
        "SELECT users.displayname FROM users WHERE age BETWEEN 19 AND 65;"
      ]
    ]
  },
  {
    "id": 677,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
        "SELECT count(DISTINCT posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
        "SELECT count(DISTINCT posts.id) FROM users users INNER JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;",
        "SELECT count(posts.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;"
      ]
    ]
  },
  {
    "id": 678,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1;",
        "SELECT posts.id , posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;",
        "SELECT id , title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ORDER BY views DESC LIMIT 1 );",
        "SELECT posts.id, posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 679,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT id, title FROM posts ORDER BY score DESC LIMIT 1;",
        "SELECT posts.id , posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;",
        "SELECT id , title FROM posts ORDER BY score DESC LIMIT 1;",
        "SELECT posts.id, posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 680,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';",
        "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';",
        "SELECT AVG(posts.score) FROM posts INNER JOIN users ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner';",
        "SELECT AVG(posts.score) AS avg FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';"
      ]
    ]
  },
  {
    "id": 681,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT displayname FROM users WHERE viewcount > 20000 AND YEAR(creationdate) = 2011;",
        "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;",
        "SELECT users.displayname FROM users JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;",
        "SELECT displayname FROM users WHERE YEAR(creationdate) = 2011 AND viewcount > 20000;"
      ]
    ]
  },
  {
    "id": 682,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT id, ownerdisplayname FROM posts WHERE favoritecount = ( SELECT MAX(favoritecount) FROM posts WHERE year(creationdate) = 2010 );",
        "SELECT posts.id, users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE year(posts.creationdate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;",
        "SELECT posts.id, posts.ownerdisplayname FROM posts WHERE posts.favoritecount = ( SELECT MAX(favoritecount) FROM posts WHERE year(posts.creationdate) = 2010 );"
      ]
    ]
  },
  {
    "id": 683,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(posts.creationdate) = 2011 AND users.reputation > 1000;",
        "SELECT percentage = DIVidE(count(id where YEAR(creationdate) = 2011 and reputation > 1000), count(id) ) * 100 FROM users INNER JOIN posts ON users.id = posts.owneruserid;",
        "SELECT percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE YEAR(creationdate) = 2011 AND users.reputation > 1000;",
        "SELECT percentage = DIVidE(count(id where YEAR(creationdate) = 2011 and reputation > 1000), count(id) ) * 100 FROM posts INNER JOIN users ON posts.owneruserid = users.id;"
      ]
    ]
  },
  {
    "id": 684,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) AS percentage;",
        "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) * 100 AS percentage;",
        "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 AND 18) / (SELECT count(id) FROM users) AS percentage;",
        "SELECT (SELECT count(id) FROM users WHERE age BETWEEN 13 and 18) / (SELECT count(id) FROM users) as percentage;"
      ]
    ]
  },
  {
    "id": 686,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);",
        "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT avg(posts.viewcount) FROM posts);",
        "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(viewcount) FROM posts);",
        "SELECT sum(posts.viewcount) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);"
      ]
    ]
  },
  {
    "id": 687,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM comments);",
        "SELECT count(*) FROM comments WHERE postid = (SELECT id FROM posts ORDER BY score DESC LIMIT 1);",
        "SELECT count(*) FROM comments WHERE postid = (SELECT postid FROM posts ORDER BY score DESC LIMIT 1);",
        "SELECT count(id) FROM comments WHERE score = (SELECT MAX(score) FROM posts);"
      ]
    ]
  },
  {
    "id": 688,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;",
        "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;",
        "SELECT count(DISTINCT posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;",
        "SELECT count(posts.id) FROM posts LEFT JOIN comments ON posts.id = comments.postid WHERE posts.viewcount > 35000 AND comments.postid IS NULL;"
      ]
    ]
  },
  {
    "id": 690,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;",
        "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' );",
        "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) AND MAX(date);",
        "SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'Emmett') ORDER BY date DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 691,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;",
        "SELECT COUNT(*) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000;",
        "SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.age BETWEEN 19 AND 65 AND votes.upvotes > 5000;",
        "SELECT count(users.id) FROM users WHERE users.age BETWEEN 19 AND 65 AND users.upvotes > 5000;"
      ]
    ]
  },
  {
    "id": 692,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE users.displayname = 'Zolomon';",
        "SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE displayname = 'Zolomon';",
        "SELECT SUBTRACT(date from stats_badges, creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Zolomon';",
        "SELECT SUBTRACT(date from stats_badges, creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE displayname = 'Zolomon';"
      ]
    ]
  },
  {
    "id": 693,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT COUNT(posts.id) AS post_count, COUNT(comments.id) AS comment_count FROM users JOIN posts ON users.id = posts.owneruserid JOIN comments ON posts.id = comments.postid GROUP BY users.id ORDER BY users.creationdate DESC LIMIT 1;",
        "SELECT COUNT(posts.id), COUNT(comments.id) FROM posts FULL OUTER JOIN comments ON posts.id = comments.postid FULL OUTER JOIN users ON posts.owneruserid = users.id WHERE users.creationdate = (SELECT MAX(users.creationdate) FROM users);",
        "SELECT COUNT(posts.id), COUNT(comments.id) FROM posts FULL OUTER JOIN comments ON posts.id = comments.postid FULL OUTER JOIN users ON posts.owneruserid = users.id WHERE users.creationdate = (SELECT MAX(creationdate) FROM users);",
        "SELECT COUNT(posts.id) AS post_count, COUNT(comments.id) AS comment_count FROM users JOIN posts ON users.id = posts.owneruserid JOIN comments ON posts.id = comments.postid WHERE users.creationdate = (SELECT MAX(creationdate) FROM users);"
      ]
    ]
  },
  {
    "id": 695,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';",
        "SELECT COUNT(*) FROM badges WHERE name = 'Citizen Patrol';",
        "SELECT count(DISTINCT badges.userid) FROM badges WHERE badges.name = 'Citizen Patrol';",
        "SELECT count(id) FROM badges WHERE name = 'Citizen Patrol';"
      ]
    ]
  },
  {
    "id": 696,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM tags WHERE tagname = 'careers';",
        "SELECT count(tags.tagname) FROM tags WHERE tags.tagname = 'careers';",
        "SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'careers';",
        "SELECT count(posts.id) FROM tags INNER JOIN posts ON tags.id = posts.tags WHERE tags.tagname = 'careers';"
      ]
    ]
  },
  {
    "id": 697,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';",
        "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';",
        "SELECT users.reputation , users.views FROM users WHERE users.displayname = 'Jarrod Dixon';",
        "SELECT users.reputation, posts.viewcount FROM users JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jarrod Dixon';"
      ]
    ]
  },
  {
    "id": 698,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posts.commentcount, posts.answercount FROM posts WHERE posts.title = 'Clustering 1D data';",
        "SELECT sum(posts.answercount), sum(posts.commentcount) FROM posts WHERE posts.title = 'Clustering 1D data';",
        "SELECT count(comments.id), count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data';",
        "SELECT count(comments.id), count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid;"
      ]
    ]
  },
  {
    "id": 699,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';",
        "SELECT creationdate FROM users WHERE displayname = 'IrishStat';",
        "SELECT creationdate FROM users WHERE users.displayname = 'IrishStat';",
        "SELECT users.creationdate FROM users WHERE users.displayname='IrishStat';"
      ]
    ]
  },
  {
    "id": 700,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(votes.id) FROM votes WHERE votes.bountyamount >= 30;",
        "SELECT count(*) FROM votes WHERE bountyamount >= 30;",
        "SELECT count(votes.postid) FROM votes WHERE votes.bountyamount >= 30;",
        "SELECT count(votes.bountyamount) FROM votes WHERE votes.bountyamount >= 30;"
      ]
    ]
  },
  {
    "id": 702,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM posts WHERE score < 20;",
        "SELECT count(*) FROM posts WHERE posts.score < 20;",
        "SELECT count(DISTINCT posts.id) FROM posts WHERE posts.score < 20;",
        "SELECT count(DISTINCT posts.id) FROM posts posts WHERE posts.score < 20;"
      ]
    ]
  },
  {
    "id": 703,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;",
        "SELECT count(*) FROM tags WHERE id < 15 AND count <= 20;",
        "SELECT count(tags.id) FROM tags WHERE tags.id < 15 AND tags.count <= 20;",
        "SELECT count(DISTINCT tags.id) FROM tags WHERE tags.id < 15 AND tags.count <= 20;"
      ]
    ]
  },
  {
    "id": 704,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';",
        "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample';",
        "SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tagname = 'sample';",
        "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tagname = 'sample';"
      ]
    ]
  },
  {
    "id": 705,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';",
        "SELECT users.reputation, users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)';",
        "SELECT users.reputation, users.upvotes FROM comments JOIN users ON comments.userid = users.id WHERE comments.text = 'fine, you win :)';",
        "SELECT users.reputation, users.upvotes FROM users JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';"
      ]
    ]
  },
  {
    "id": 706,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment = 'regression' AND posts.title LIKE '%linear regression%';",
        "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment LIKE '%regression%' AND posts.title LIKE '%linear regression%';",
        "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title LIKE '%linear regression%' AND posthistory.comment LIKE '%regression%';",
        "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.text LIKE '%linear regression%' AND posthistory.comment LIKE '%regression%';"
      ]
    ]
  },
  {
    "id": 707,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150) ORDER BY score DESC LIMIT 1;",
        "SELECT MAX(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 and 150);",
        "SELECT MAX(score) FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150);",
        "SELECT text FROM comments WHERE postid IN (SELECT id FROM posts WHERE viewcount BETWEEN 100 AND 150) ORDER BY score DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 708,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';",
        "SELECT users.creationdate, users.age FROM users WHERE users.websiteurl LIKE '%http://%';",
        "SELECT users.creationdate , users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';",
        "SELECT creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';"
      ]
    ]
  },
  {
    "id": 709,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT postid) FROM comments WHERE score = 0 AND viewcount < 5;",
        "SELECT count(*) FROM comments WHERE score = 0 AND viewcount < 5;",
        "SELECT count(DISTINCT posts.id) FROM comments comments JOIN posts posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;",
        "SELECT count(DISTINCT posts.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5;"
      ]
    ]
  },
  {
    "id": 710,
    "db_id": "codebase_community",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT comments.id) FROM posts posts JOIN comments comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0;",
        "SELECT count(DISTINCT comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;",
        "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;",
        "SELECT count(DISTINCT comments.id) FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;"
      ]
    ]
  },
  {
    "id": 718,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "SELECT count(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));"
      ]
    ]
  },
  {
    "id": 719,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(*) FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND sh.height_cm > 200;",
        "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
        "SELECT count(superhero.superhero_name) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
        "SELECT count(superhero.id) FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;"
      ]
    ]
  },
  {
    "id": 720,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT full_name FROM superhero GROUP BY full_name HAVING COUNT(full_name) > 15;",
        "SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15 );",
        "SELECT full_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) > 15 );",
        "SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15);"
      ]
    ]
  },
  {
    "id": 721,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';",
        "SELECT count(superhero.id) FROM superhero, colour WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue';",
        "SELECT count(superhero.id) FROM superhero WHERE superhero.eye_colour_id = colour.id AND colour.colour = 'Blue';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue';"
      ]
    ]
  },
  {
    "id": 722,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT colour FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');",
        "SELECT colour FROM colour WHERE id = (SELECT skin_colour_id FROM superhero WHERE superhero_name = 'Apocalypse');",
        "SELECT colour.colour FROM superhero superhero INNER JOIN colour colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';",
        "SELECT colour FROM colour WHERE id IN (SELECT superhero.skin_colour_id FROM superhero WHERE superhero.superhero_name = 'Apocalypse');"
      ]
    ]
  },
  {
    "id": 723,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';",
        "SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';"
      ]
    ]
  },
  {
    "id": 724,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON hero_attribute.attribute_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blond' AND superhero.hair_colour_id = colour.id;",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blond' AND superhero.hair_colour_id = colour.id;"
      ]
    ]
  },
  {
    "id": 725,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
        "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
        "SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';",
        "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.id;"
      ]
    ]
  },
  {
    "id": 726,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;",
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC;",
        "SELECT superhero_name, height_cm FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;",
        "SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;"
      ]
    ]
  },
  {
    "id": 727,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';",
        "SELECT publisher_name FROM superhero WHERE superhero_name = 'Sauron';",
        "SELECT publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';",
        "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Sauron';"
      ]
    ]
  },
  {
    "id": 730,
    "db_id": "superhero",
    "infer_predictions": [
      [
        "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';",
        "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength'));",
        "SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND superpower_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength');",
        "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';"
      ]
    ]
  },
  {
    "id": 858,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;",
        "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE results.number = 24 AND constructorresults.points = 1;",
        "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE results.number = 24 AND results.points = 1;",
        "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;"
      ]
    ]
  },
  {
    "id": 859,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT q1 FROM qualifying WHERE qualifyid = 354;",
        "SELECT qualifying.q1 FROM qualifying WHERE qualifying.qualifyid = 354;",
        "SELECT qualifying.q1 FROM qualifying WHERE qualifying.driverid = 354 AND qualifying.raceid = 354;",
        "SELECT qualifying.q1 FROM qualifying WHERE qualifying.raceid = 354 AND qualifying.qualifyid = 1;"
      ]
    ]
  },
  {
    "id": 860,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 LIKE '0:01:40';",
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40';",
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 = '0:01:40';",
        "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 LIKE '0:01:40';"
      ]
    ]
  },
  {
    "id": 861,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE 'M:SS%';",
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND qualifying.q3 LIKE 'M:SS%' AND status.status = 'Finished';",
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE '0:01:54%';",
        "SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN results ON qualifying.raceid = results.raceid AND qualifying.qualifyid = results.resultid INNER JOIN status ON results.statusid = status.statusid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 903 AND status.status = 'Finished' AND qualifying.q3 LIKE 'M:SS%';"
      ]
    ]
  },
  {
    "id": 862,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;",
        "SELECT count(DISTINCT drivers.driverid) FROM races JOIN results ON races.raceid = results.raceid JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
        "SELECT count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;",
        "SELECT count(DISTINCT drivers.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 863,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;",
        "SELECT seasons.url FROM seasons WHERE races.raceid = 901;",
        "SELECT seasons.url FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;",
        "SELECT seasons.url FROM seasons WHERE seasons.year = (SELECT races.year FROM races WHERE races.raceid = 901);"
      ]
    ]
  },
  {
    "id": 864,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015/11/29';",
        "SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015-11-29';",
        "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015/11/29';",
        "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29';"
      ]
    ]
  },
  {
    "id": 865,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.forename FROM drivers WHERE drivers.driverid IN (SELECT results.driverid FROM results WHERE results.raceid = 592) ORDER BY drivers.dob ASC LIMIT 1;",
        "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;",
        "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;",
        "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE results.raceid = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 866,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptime.time LIKE '0:01:27' AND races.raceid = 161;",
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = 161;",
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptime.time LIKE '0:01:27' AND races.raceid = 161;",
        "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.time LIKE '0:01:27' AND races.raceid = '161';"
      ]
    ]
  },
  {
    "id": 867,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);",
        "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT max(fastestlapspeed) FROM results WHERE results.raceid = 933);",
        "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE raceid = 933);",
        "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN driverstandings ON results.raceid = driverstandings.raceid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results WHERE results.raceid = 933);"
      ]
    ]
  },
  {
    "id": 868,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT races.lat, races.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix';",
        "SELECT races.lat, races.lng FROM races INNER JOIN constructors ON races.constructorid = constructors.constructorid WHERE races.name = 'Malaysian Grand Prix';"
      ]
    ]
  },
  {
    "id": 964,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT code FROM drivers WHERE nationality = 'American';",
        "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'American';",
        "SELECT DISTINCT drivers.code FROM drivers WHERE drivers.nationality = 'American';",
        "SELECT drivers.code FROM drivers WHERE nationality = 'American';"
      ]
    ]
  },
  {
    "id": 976,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime DESC LIMIT 5;",
        "SELECT driverid FROM results WHERE laps = 1 ORDER BY time LIMIT 5;",
        "SELECT driverid FROM results WHERE fastestlap = 1 ORDER BY time LIMIT 5;",
        "SELECT driverid FROM results WHERE laps = 1 ORDER BY fastestlaptime LIMIT 5;"
      ]
    ]
  },
  {
    "id": 993,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
        "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
        "SELECT circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';",
        "SELECT circuits.location, circuits.country, circuits.lng, circuits.lat FROM circuits WHERE circuits.name = 'Hungaroring';"
      ]
    ]
  },
  {
    "id": 997,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(driverid) DESC LIMIT 1;",
        "SELECT MAX(nationality) FROM drivers;",
        "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 999,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);",
        "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE results.fastestlaptime = (SELECT MIN(fastestlaptime) FROM results);",
        "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE results.fastestlaptime = (SELECT min(fastestlaptime) FROM results);",
        "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid WHERE laptimes.milliseconds = (SELECT MIN(laptimes.milliseconds) FROM laptimes);"
      ]
    ]
  },
  {
    "id": 1017,
    "db_id": "formula_1",
    "infer_predictions": [
      [
        "SELECT circuits.lng, circuits.lat FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.time = '1:29.488';",
        "SELECT circuits.lng, circuits.lat FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.time = '1:29.488';",
        "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN laptimes ON laptimes.raceid = races.raceid WHERE laptimes.time = '1:29.488';"
      ]
    ]
  },
  {
    "id": 1020,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
        "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1;",
        "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
        "SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes);"
      ]
    ]
  },
  {
    "id": 1021,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_name FROM player WHERE height = (SELECT MAX(height) FROM player);",
        "SELECT player_name , height FROM player ORDER BY height DESC LIMIT 1;",
        "SELECT player_name FROM player WHERE height = (SELECT max(height) FROM player);",
        "SELECT player_name , height FROM player WHERE height = (SELECT MAX(height) FROM player);"
      ]
    ]
  },
  {
    "id": 1022,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);",
        "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential = (SELECT min(potential) FROM player_attributes);",
        "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential IS NOT NULL ORDER BY player_attributes.potential ASC LIMIT 1;",
        "SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential = (SELECT MIN(potential) FROM player_attributes);"
      ]
    ]
  },
  {
    "id": 1023,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';",
        "SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.attacking_work_rate = 'low';",
        "SELECT count(player_attributes.id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';",
        "SELECT count(*) FROM player_attributes INNER JOIN match ON player_attributes.player_api_id = match.away_player_11 WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65;"
      ]
    ]
  },
  {
    "id": 1024,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;",
        "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5;",
        "SELECT player_attributes.id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;",
        "SELECT player.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 5;"
      ]
    ]
  },
  {
    "id": 1025,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT name FROM league WHERE id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
        "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
        "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)));",
        "SELECT l.name FROM league l WHERE l.id IN (SELECT league_id FROM match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT max(SUM) FROM (SELECT SUM(home_team_goal + away_team_goal) AS SUM FROM match WHERE season = '2015/2016' GROUP BY league_id)));"
      ]
    ]
  },
  {
    "id": 1026,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' ORDER BY SUBTRACT(home_team_goal, away_team_goal) ASC LIMIT 1;",
        "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0;",
        "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY SUBTRACT(match.home_team_goal, match.away_team_goal) ASC LIMIT 1;",
        "SELECT team.team_long_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY match.home_team_goal ASC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1027,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_name FROM player_attributes ORDER BY penalties DESC LIMIT 10;",
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;",
        "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;",
        "SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;"
      ]
    ]
  },
  {
    "id": 1124,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
        "SELECT player.player_name FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.attacking_work_rate = 'high';",
        "SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';"
      ]
    ]
  },
  {
    "id": 1132,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;",
        "SELECT player.player_name FROM player WHERE player.height > 180 ORDER BY player.player_name ASC LIMIT 0, 3;",
        "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name LIMIT 0, 3;",
        "SELECT player.player_name FROM player WHERE player.height > 180 ORDER BY player.player_name LIMIT 0, 3;"
      ]
    ]
  },
  {
    "id": 1141,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
        "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
        "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_fifa_api_id = team.team_fifa_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';",
        "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.team_long_name = 'KSV Cercle Brugge';"
      ]
    ]
  },
  {
    "id": 1144,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
        "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
        "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);",
        "SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes player_attributes JOIN player player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id WHERE player.weight = (SELECT max(weight) FROM player);"
      ]
    ]
  },
  {
    "id": 1147,
    "db_id": "european_football_2",
    "infer_predictions": [
      [
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
        "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;",
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = ( SELECT MAX(overall_rating) FROM player_attributes );",
        "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);"
      ]
    ]
  },
  {
    "id": 1149,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission;",
        "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission ORDER BY sex , admission;",
        "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient WHERE sex = 'M' GROUP BY sex , admission;",
        "SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END AS inpatient , CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END AS outpatient FROM patient GROUP BY sex , admission ORDER BY inpatient DESC , outpatient DESC;"
      ]
    ]
  },
  {
    "id": 1150,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';",
        "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE sex = 'F' AND year(birthday) > '1930')) AS female_percentage FROM patient WHERE sex = 'F' AND year(birthday) > '1930';",
        "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT id) FROM patient WHERE year(birthday) > '1930' AND sex = 'F')) AS female_percentage FROM patient WHERE year(birthday) > '1930' AND sex = 'F';",
        "SELECT (count(DISTINCT patient.id) * 100.0 / (SELECT count(DISTINCT patient.id) FROM patient WHERE sex = 'F' AND year(birthday) > '1930')) AS female_percentage FROM patient WHERE sex = 'F' AND year(birthday) > '1930';"
      ]
    ]
  },
  {
    "id": 1151,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT patient.id) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND admission = '+';",
        "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE admission = '+';",
        "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') FROM patient WHERE admission = '+';",
        "SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE patient.admission = '+';"
      ]
    ]
  },
  {
    "id": 1152,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT calculation FROM (SELECT COUNT(id) AS calculation FROM patient WHERE diagnosis = 'SLE' GROUP BY admission);",
        "SELECT (COUNT(id) where diagnosis = 'SLE' and admission = '+') / (COUNT(id) where diagnosis = 'SLE' and admission = '-') FROM patient;",
        "SELECT (COUNT(id) where diagnosis = 'SLE' and admission = '+') / (COUNT(id) where diagnosis = 'SLE' and admission = '-') FROM patient WHERE diagnosis = 'SLE';",
        "SELECT calculation FROM (SELECT COUNT(id) AS calculation FROM patient WHERE diagnosis = 'SLE' AND admission = '+' GROUP BY diagnosis, admission);"
      ]
    ]
  },
  {
    "id": 1153,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT diagnosis FROM patient WHERE id = '30609';",
        "SELECT diagnosis FROM patient WHERE id = 30609;",
        "SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609';",
        "SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = 30609;"
      ]
    ]
  },
  {
    "id": 1154,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE patient.id = '163109';",
        "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = '163109';",
        "SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = 163109;",
        "SELECT examination.`examination date` , patient.sex , patient.birthday FROM examination JOIN patient ON examination.id = patient.id WHERE examination.id = '163109';"
      ]
    ]
  },
  {
    "id": 1155,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500';",
        "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > '500';",
        "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500;",
        "SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500' OR laboratory.alp > '500';"
      ]
    ]
  },
  {
    "id": 1156,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient WHERE rvvt = '+';",
        "SELECT id, age FROM patient WHERE rvvt = '+';",
        "SELECT patient.id, SUBTraCT(year(current_timestamp), year(patient.birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+';",
        "SELECT patient.id, SUBTraCT(year(current_timestamp), year(birthday)) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+';"
      ]
    ]
  },
  {
    "id": 1157,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT id, sex, diagnosis FROM patient WHERE thrombosis = 2;",
        "SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.thrombosis = 2;",
        "SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;",
        "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2;"
      ]
    ]
  },
  {
    "id": 1158,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';",
        "SELECT id FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';",
        "SELECT * FROM patient WHERE birthday = '1937-01-01' AND `t-cho` >= '250';",
        "SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` > '250';"
      ]
    ]
  },
  {
    "id": 1159,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.alb < 3.5;",
        "SELECT id, sex, diagnosis FROM patient WHERE alb < 3.5;",
        "SELECT DISTINCT patient.id, patient.sex, patient.diagnosis FROM patient WHERE patient.alb < 3.5;",
        "SELECT patient.id, patient.sex, examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.alb < 3.5;"
      ]
    ]
  },
  {
    "id": 1177,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', laboratory.date) = '1995-09-04';",
        "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`examination date` = '1995-09-04';",
        "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`examination date` = '1995-09-04' AND patient.id = 2927464;",
        "SELECT CASE WHEN laboratory.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 2927464 AND strftime('%Y-%m-%d', patient.description) = '1995-09-04';"
      ]
    ]
  },
  {
    "id": 1193,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(id) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND `ana pattern` != 'P';",
        "SELECT count(*) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND `ana pattern` != 'P';",
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31';",
        "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`ana pattern` != 'P' AND patient.sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31';"
      ]
    ]
  },
  {
    "id": 1197,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT description, diagnosis FROM patient WHERE id = 48473;",
        "SELECT patient.`first date`, patient.diagnosis FROM patient WHERE patient.id = 48473;",
        "SELECT description AS medical_information_first_documented, diagnosis AS disease FROM patient WHERE id = 48473;",
        "SELECT patient.`first date`, patient.diagnosis FROM patient WHERE id = 48473;"
      ]
    ]
  },
  {
    "id": 1304,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(examination.id) FROM examination examination INNER JOIN laboratory laboratory ON examination.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0;",
        "SELECT count(DISTINCT patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.thrombosis = 0;",
        "SELECT count(patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.thrombosis = 0;",
        "SELECT count(DISTINCT patient.id) FROM patient patient INNER JOIN laboratory laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.diagnosis != 'thrombosis';"
      ]
    ]
  },
  {
    "id": 1305,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(laboratory.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(laboratory.wbc) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;"
      ]
    ]
  },
  {
    "id": 1306,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND examination.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE' AND examination.`acl igm` BETWEEN 3.5 AND 9.0;",
        "SELECT count(laboratory.wbc) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON laboratory.id = patient.id WHERE examination.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;",
        "SELECT count(laboratory.wbc) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON laboratory.id = patient.id WHERE examination.diagnosis = 'Normal' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND examination.diagnosis = 'SLE';"
      ]
    ]
  },
  {
    "id": 1308,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;",
        "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL;",
        "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.plt > 100 AND examination.plt < 400 AND examination.diagnosis IS NOT NULL;",
        "SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.plt > 100 AND examination.plt < 400 AND examination.diagnosis IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1311,
    "db_id": "thrombosis_prediction",
    "infer_predictions": [
      [
        "SELECT count(*) FROM examination WHERE thrombosis = 2 AND pt < 14;",
        "SELECT count(id) FROM examination WHERE thrombosis = 2 AND pt < 14;",
        "SELECT count(*) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.pt < 14;",
        "SELECT count(*) FROM examination examination JOIN patient patient ON examination.id = patient.id WHERE examination.thrombosis IN (2, 1) AND examination.pt < 14;"
      ]
    ]
  },
  {
    "id": 1312,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT major.major_name FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT major.major_name FROM member member INNER JOIN major major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';",
        "SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';"
      ]
    ]
  },
  {
    "id": 1313,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(*) FROM major WHERE college = 'College of Engineering';",
        "SELECT count(*) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';",
        "SELECT count(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE college = 'College of Engineering');"
      ]
    ]
  },
  {
    "id": 1314,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
        "SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
        "SELECT first_name, last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';",
        "SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';"
      ]
    ]
  },
  {
    "id": 1315,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(attendance.link_to_member) FROM attendance, member, event WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer';",
        "SELECT count(attendance.link_to_member) FROM attendance, event, member WHERE attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer' AND attendance.link_to_member = member.member_id AND member.position = 'Student_Club';",
        "SELECT count(attendance.link_to_member) FROM attendance, member, event, zip_code WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND member.zip = zip_code.zip_code AND event.event_name = 'Women's Soccer';",
        "SELECT count(attendance.link_to_member) FROM attendance, member, event WHERE attendance.link_to_member = member.member_id AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer' AND member.position = 'Student_Club';"
      ]
    ]
  },
  {
    "id": 1316,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
        "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';",
        "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';",
        "SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';"
      ]
    ]
  },
  {
    "id": 1317,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
        "SELECT count(member.t_shirt_size) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
        "SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance attendance ON member.member_id = attendance.link_to_member INNER JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';",
        "SELECT count(member.t_shirt_size) FROM member member INNER JOIN attendance attendance ON member.member_id = attendance.link_to_member INNER JOIN event event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';"
      ]
    ]
  },
  {
    "id": 1318,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
        "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_name ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
        "SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.position = 'Student_Club' GROUP BY e.event_id ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;",
        "SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Student_Club' GROUP BY event.event_name ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1319,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';",
        "SELECT college FROM major WHERE major_id IN (SELECT link_to_major FROM member WHERE position = 'Vice President');",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
        "SELECT college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';"
      ]
    ]
  },
  {
    "id": 1320,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
        "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';",
        "SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';"
      ]
    ]
  },
  {
    "id": 1321,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT event.event_id) FROM member member JOIN attendance attendance ON member.member_id = attendance.link_to_member JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
        "SELECT count(DISTINCT event.event_id) FROM event event JOIN attendance attendance ON event.event_id = attendance.link_to_event JOIN member member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
        "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event.event_date) = 2019;",
        "SELECT count(DISTINCT attendance.link_to_event) FROM attendance attendance JOIN member member ON attendance.link_to_member = member.member_id JOIN event event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha' AND YEAR(event_date) = 2019;"
      ]
    ]
  },
  {
    "id": 1322,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND member.last_name = 'Student_Club';",
        "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.type = 'Meeting';",
        "SELECT COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Student_Club' AND event.type = 'Meeting';",
        "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.type = 'Meeting' AND member.last_name = 'Student_Club' AND COUNT(event.event_id) > 10;"
      ]
    ]
  },
  {
    "id": 1323,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraiser';",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(event.event_id) > 20 AND event.type != 'Fundraiser';",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(attendance.link_to_event) > 20 AND event.type != 'Fundraising';",
        "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.amount > 20 AND budget.event_status = 'Open';"
      ]
    ]
  },
  {
    "id": 1324,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT avg(attendance) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;",
        "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event.event_date) = 2020;",
        "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE YEAR(event.event_date) = 2020;",
        "SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event_date) = 2020;"
      ]
    ]
  },
  {
    "id": 1325,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );",
        "SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);",
        "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.spent = ( SELECT max(spent) FROM budget );",
        "SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense WHERE approved = 'true' );"
      ]
    ]
  },
  {
    "id": 1326,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT count(member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT count(DISTINCT member.member_id) FROM member member INNER JOIN major major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
        "SELECT count(DISTINCT t1.member_id) FROM ( SELECT member.member_id FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering' ) t1;"
      ]
    ]
  },
  {
    "id": 1327,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';",
        "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';",
        "SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';",
        "SELECT member.first_name || ' ' || member.last_name AS full_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';"
      ]
    ]
  },
  {
    "id": 1328,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';",
        "SELECT member.last_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE major.major_name = 'Law and Constitutional Studies';",
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';",
        "SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies' GROUP BY member.last_name;"
      ]
    ]
  },
  {
    "id": 1329,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
        "SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
        "SELECT county FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';",
        "SELECT county FROM zip_code INNER JOIN member ON member.zip = zip_code.zip_code WHERE first_name = 'Sherri' AND last_name = 'Ramsey';"
      ]
    ]
  },
  {
    "id": 1330,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Hewitt';",
        "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';",
        "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';"
      ]
    ]
  },
  {
    "id": 1331,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';",
        "SELECT income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';",
        "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE position = 'Vice President';",
        "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President' AND income.source = 'Funds Received';"
      ]
    ]
  },
  {
    "id": 1454,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT SUM(expense.cost), COUNT(event.event_id) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.type = 'Meeting';",
        "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget;",
        "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.type = 'Meeting';",
        "SELECT SUM(expense.cost) / COUNT(event.event_id) * 100 AS percentage FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget;"
      ]
    ]
  },
  {
    "id": 1456,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 0, 5;",
        "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5;",
        "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY expense.cost DESC LIMIT 5;",
        "SELECT member.first_name, member.last_name FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name ORDER BY expense.cost DESC LIMIT 0, 5;"
      ]
    ]
  },
  {
    "id": 1457,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(cost) FROM expense );",
        "SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT AVG(cost) FROM expense );",
        "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(expense.cost) FROM expense );",
        "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > (SELECT AVG(cost) FROM expense);"
      ]
    ]
  },
  {
    "id": 1458,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;",
        "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;",
        "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'New Jersey' OR zip_code.state = 'Vermont';",
        "SELECT SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) - SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) / COUNT(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'New Jersey' OR zip_code.state = 'Vermont';"
      ]
    ]
  },
  {
    "id": 1460,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT member.first_name, member.last_name, expense.expense_description, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN expense ON income.income_id = expense.expense_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';",
        "SELECT DISTINCT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN expense ON income.income_id = expense.expense_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';"
      ]
    ]
  },
  {
    "id": 1462,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
        "SELECT budget.category , budget.amount FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
        "SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';",
        "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = \"January Speaker\";"
      ]
    ]
  },
  {
    "id": 1463,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
        "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';",
        "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';",
        "SELECT DISTINCT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';"
      ]
    ]
  },
  {
    "id": 1464,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';",
        "SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '9/9/2019';",
        "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09';",
        "SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '9/9/2019';"
      ]
    ]
  },
  {
    "id": 1465,
    "db_id": "student_club",
    "infer_predictions": [
      [
        "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';",
        "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
        "SELECT budget.category FROM budget INNER JOIN expense ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
        "SELECT DISTINCT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';"
      ]
    ]
  },
  {
    "id": 1488,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;",
        "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' GROUP BY yearmonth.customerid ORDER BY yearmonth.consumption DESC LIMIT 1;",
        "SELECT yearmonth.customerid , yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' ORDER BY yearmonth.consumption DESC LIMIT 1;",
        "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1501,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date LIKE '201306%';",
        "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date LIKE '201306%';",
        "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date LIKE '201306%';",
        "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '201306%';"
      ]
    ]
  },
  {
    "id": 1510,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT sum(transactions_1k.price) / count(transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
        "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
        "SELECT sum(transactions_1k.price) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';",
        "SELECT cast(sum(transactions_1k.price) AS REAL) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';"
      ]
    ]
  },
  {
    "id": 1511,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT avg(price) FROM transactions_1k WHERE currency = 'EUR';",
        "SELECT AVG(price) FROM transactions_1k WHERE currency = 'EUR';",
        "SELECT avg(price) FROM transactions_1k WHERE customers.currency = 'EUR';",
        "SELECT AVG(price) FROM transactions_1k WHERE currency = 'EUR';"
      ]
    ]
  },
  {
    "id": 1531,
    "db_id": "debit_card_specializing",
    "infer_predictions": [
      [
        "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;",
        "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price / transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1;",
        "SELECT customers.customerid, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;",
        "SELECT customers.customerid, customers.currency, SUM(transactions_1k.price) / SUM(transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY SUM(transactions_1k.price) / SUM(transactions_1k.amount) DESC LIMIT 1;"
      ]
    ]
  }
]